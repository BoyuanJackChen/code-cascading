[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [elem for elem in test_tup1 if elem in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = sorted(list(test_tup1))\n    test_tup2 = sorted(list(test_tup2))\n    return [i for i in test_tup1 if i in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [item for item in test_tup1 if item in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared.append(i)\n    return shared\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_items = set(test_tup1).intersection(test_tup2)\n    return similar_items\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    print('Similar Elements are:')\n    for item in test_tup1:\n        if item in test_tup2:\n            print(item)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_elements = []\n    \n    for i in test_tup1:\n        if i in test_tup2:\n            similar_elements.append(i)\n    \n    return similar_elements\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2 or n == 3:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        limit = int(math.sqrt(n)) + 1\n        for i in range(3, limit, 2):\n            if n % i == 0:\n                return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        limit = int(math.sqrt(n)) + 1\n        for i in range(3, limit, 2):\n            if n % i == 0:\n                return False\n    return True\ndef prime_factors(n):\n    '''\n    Write a python function to identify prime factors.\n    '''\n    limit = int(math.sqrt(n)) + 1\n    for i in range(2, limit):\n        if n % i == 0:\n            return i, n/i\n    return n, 1\ndef all_factors(n):\n    '''\n    Write a python function to identify all prime factors.\n    '''\n    limit = int(math.sqrt(n)) + 1\n    factors = []\n    for i in range(2, limit):\n        if n % i == 0:\n            factors.append(i)\n    factors.append(n)\n    return factors\ndef is_palindrome(s):\n    '''\n    Write a python function to identify if a number is palindrome.\n    '''\n    x = s[::-1]\n    return s == x\ndef palindrome_gen(n):\n    '''\n    Write a python function to identify all palindromes in a range.\n    '''\n    for i in range(100, 1000):\n        for j in range(100, 1000):\n            x = i * j\n            if is_palindrome(str(x)):\n                yield x\ndef palindrome_gen_adv(n):\n    '''\n    Write a python function to identify all palindromes in a range.\n    '''\n    for i in range(100, 1000):\n        for j in range(100, 1000):\n            x = i * j\n            if is_palindrome(str(x)) and x > n:\n                yield x\ndef sum_divisors(n):\n    '''\n    Write a python function to sum all divisors of a number.\n    '''\n    result = 1\n    limit = int(math.sqrt(n)) + 1\n    for i in range(2, limit):\n        if n % i == 0:\n            result += i\n    if n % limit == 0:\n        result += limit\n    return result\ndef sum_divisors_gen(n):\n    '''\n    Write a python function to sum all divisors of a number.\n    '''\n    result = 1\n    limit = int(math.sqrt(n)) + 1\n    for i in range(2, limit):\n        if n % i == 0:\n            result += i\n            yield i\n    if n % limit == 0:\n        result += limit\n        yield limit\ndef sum_amicable_numbers(n):\n    '''\n    Write a python function to sum all amicable numbers below n.\n    '''\n    result = 0\n    limit = n\n    for i in range(2, limit):\n        if i!= sum_divisors(i) and i == sum_divisors(sum_divisors(i)):\n            result += i\n    return result\ndef sum_amicable_numbers_gen(n):\n    '''\n    Write a python function to sum all amicable numbers below n.\n    '''\n    result = 0\n    limit = n\n    for i in range(2, limit):\n        if i!= sum_divisors(i) and i == sum_divisors(sum_divisors(i)):\n            result += i\n            yield i\ndef sum_square_divisors(n):\n    '''\n    Write a python function to sum all the square divisors of a number.\n    '''\n    result = 1\n    limit = int(math.sqrt(n)) + 1\n    for i in range(2, limit):\n        if n % i == 0:\n            result += (i * i)\n    if n % limit == 0:\n        result += (limit * limit)\n    return result\ndef sum_square_divisors_gen(n):\n    '''\n    Write a python function to sum all the square divisors of a number.\n    '''\n    result = 1\n    limit = int(math.sqrt(n)) + 1\n    for i in range(2, limit):\n        if n % i == 0:\n            result += (i * i)\n            yield i * i\n    if n % limit == 0:\n        result += (limit * limit)\n        yield limit * limit\ndef sum_triangular_numbers(n):\n    '''\n    Write a python function to sum all triangular numbers below n.\n    '''\n    return int(n * (n + 1) / 2)\ndef sum_triangular_numbers_gen(n):\n    '''\n    Write a python function to sum all triangular numbers below n.\n    '''\n    i = 1\n    while True:\n        i += 1\n        yield int(i * (i + 1) / 2)\ndef sum_divisors_list(n):\n    '''\n    Write a python function to return a list of all divisors of a number.\n    '''\n    result = []\n    limit = int(math.sqrt(n)) + 1\n    for i in range(2, limit):\n        if n % i == 0:\n            result.append(i)\n    if n % limit == 0:\n        result.append(limit)\n    return result\ndef sum_amicable_numbers_list(n):\n    '''\n    Write a python function to return a list of amicable numbers below n.\n    '''\n    result = []\n    limit = n\n    for i in range(2, limit):\n        if i!= sum_divisors(i) and i == sum_divisors(sum_divisors(i)):\n            result.append(i)\n    return result\ndef sum_divisors_adv_list(n):\n    '''\n    Write a python function to return a list of all divisors of a number.\n    '''\n    result = []\n    limit = int(math.sqrt(n)) + 1\n    for i in range(2, limit):\n        if n % i == 0:\n            result.append(i)\n    if n % limit == 0:\n        result.append(limit)\n    return result\ndef sum_amicable_numbers_adv_list(n):\n    '''\n    Write a python function to return a list of amicable numbers below n.\n    '''\n    result = []\n    limit = n\n    for i in range(2, limit):\n        if i!= sum_divisors(i) and i == sum_divisors(sum_divisors(i)):\n            result.append(i)\n    return result\ndef is_permutation(a, b):\n    '''\n    Write a python function to identify if two numbers are permutations of each other.\n    '''\n    if len(str(a))!= len(str(b)):\n        return False\n    a = sorted(str(a))\n    b = sorted(str(b))\n    return a == b\ndef is_permutation_adv(a, b):\n    '''\n    Write a python function to identify if two numbers are permutations of each other.\n    '''\n    if len(str(a))!= len(str(b)):\n        return False\n    return sorted(str(a)) == sorted(str(b))\ndef is_pythagorean_triplet(a, b, c):\n    '''\n    Write a python function to identify if three numbers are Pythagorean Triplet.\n    '''\n    return (a * a == b * b + c * c) or (b * b == a * a + c * c) or (c * c == b * b + a * a)\ndef is_pythagorea"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n < 2):\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return True\n    elif n==2:\n        return False\n    else:\n        for i in range(2,math.ceil(math.sqrt(n))+1):\n            if n%i==0:\n                return True\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # your code here\n    if n < 2:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n == 3:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(3, math.ceil(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)==0:\n        return []\n    elif len(nums)<n:\n        return nums\n    else:\n        hq.heapify(nums)\n        return sorted(list(set(nums)),reverse=True)[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    i=0\n    while i<n:\n        print(hq.heappop(nums),end=\" \")\n        i+=1\n    print()\n    \n    \n    \n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    i=0\n    while i<n:\n        print(hq.heappop(nums),end=\" \")\n        i+=1\n    print()\n    \n    \n    \n    \ndef heap_queue_maxheapify(nums,i):\n    '''\n    Write a function to efficiently convert a given list of numbers to a heap.\n    '''\n    n = len(nums)\n    largest = i #initialize largest as root\n    left = 2*i+1 #left child\n    right = 2*i+2 #right child\n    #Find largest among root, left child and right child\n    if left<n and nums[i]<nums[left]:\n        largest = left\n    if right<n and nums[largest]<nums[right]:\n        largest = right\n    if largest!= i:\n        nums[i],nums[largest] = nums[largest],nums[i] #swap\n        heap_queue_maxheapify(nums,largest)\n        \ndef heap_queue_heapsort(nums):\n    '''\n    Write a function to efficiently sort a given list of numbers using Heap Sort.\n    '''\n    n = len(nums)\n    #Build max heap\n    for i in range(n//2-1,-1,-1):\n        heap_queue_maxheapify(nums,i)\n    #One by one extract elements\n    for i in range(n-1,0,-1):\n        nums[i],nums[0] = nums[0],nums[i] #swap\n        heap_queue_maxheapify(nums,0)\n    return nums\n    \n    \n    \n    \ndef heap_queue_buildheap(nums):\n    '''\n    Write a function to efficiently convert a given list of numbers to a heap.\n    '''\n    n = len(nums)\n    #Build max heap\n    for i in range(n//2-1,-1,-1):\n        heap_queue_maxheapify(nums,i)\n    return nums\n    \n    \n    \n    \ndef heap_queue_heapsort(nums):\n    '''\n    Write a function to efficiently sort a given list of numbers using Heap Sort.\n    '''\n    n = len(nums)\n    #Build max heap\n    for i in range(n//2-1,-1,-1):\n        heap_queue_maxheapify(nums,i)\n    #One by one extract elements\n    for i in range(n-1,0,-1):\n        nums[i],nums[0] = nums[0],nums[i] #swap\n        heap_queue_maxheapify(nums,0)\n    return nums\n    \n    \n    \n    \ndef heap_queue_heapsort(nums):\n    '''\n    Write a function to efficiently sort a given list of numbers using Heap Sort.\n    '''\n    n = len(nums)\n    #Build max heap\n    for i in range(n//2-1,-1,-1):\n        heap_queue_maxheapify(nums,i)\n    #One by one extract elements\n    for i in range(n-1,0,-1):\n        nums[i],nums[0] = nums[0],nums[i] #swap\n        heap_queue_maxheapify(nums,0)\n    return nums\n    \n    \n    \n    \ndef heap_queue_heapsort(nums):\n    '''\n    Write a function to efficiently sort a given list of numbers using Heap Sort.\n    '''\n    n = len(nums)\n    #Build max heap\n    for i in range(n//2-1,-1,-1):\n        heap_queue_maxheapify(nums,i)\n    #One by one extract elements\n    for i in range(n-1,0,-1):\n        nums[i],nums[0] = nums[0],nums[i] #swap\n        heap_queue_maxheapify(nums,0)\n    return nums\n    \n    \n    \n    \ndef heap_queue_buildheap(nums):\n    '''\n    Write a function to efficiently convert a given list of numbers to a heap.\n    '''\n    n = len(nums)\n    #Build max heap\n    for i in range(n//2-1,-1,-1):\n        heap_queue_maxheapify(nums,i)\n    return nums\n    \n    \n    \n    \ndef heap_queue_heapsort(nums):\n    '''\n    Write a function to efficiently sort a given list of numbers using Heap Sort.\n    '''\n    n = len(nums)\n    #Build max heap\n    for i in range(n//2-1,-1,-1):\n        heap_queue_maxheapify(nums,i)\n    #One by one extract elements\n    for i in range(n-1,0,-1):\n        nums[i],nums[0] = nums[0],nums[i] #swap\n        heap_queue_maxheapify(nums,0)\n    return nums\n    \n    \n    \n    \ndef heap_queue_heapsort(nums):\n    '''\n    Write a function to efficiently sort a given list of numbers using Heap Sort.\n    '''\n    n = len(nums)\n    #Build max heap\n    for i in range(n//2-1,-1,-1):\n        heap_queue_maxheapify(nums,i)\n    #One by one extract elements\n    for i in range(n-1,0,-1):\n        nums[i],nums[0] = nums[0],nums[i] #swap\n        heap_queue_maxheapify(nums,0)\n    return nums\n    \n    \n    \n    \ndef heap_queue_heapsort(nums):\n    '''\n    Write a function to efficiently sort a given list of numbers using Heap Sort.\n    '''\n    n = len(nums)\n    #Build max heap\n    for i in range(n//2-1,-1,-1):\n        heap_queue_maxheapify(nums,i)\n    #One by one extract elements\n    for i in range(n-1,0,-1):\n        nums[i],nums[0] = nums[0],nums[i] #swap\n        heap_queue_maxheapify(nums,0)\n    return nums\n    \n    \n    \n    \ndef heap_queue_heapsort(nums):\n    '''\n    Write a function to efficiently sort a given list of numbers using Heap Sort.\n    '''\n    n = len(nums)\n    #Build max heap\n    for i in range(n//2-1,-1,-1):\n        heap_queue_maxheapify(nums,i)\n    #One by one extract elements\n    for i in range(n-1,0,-1):\n        nums[i],nums[0] = nums[0],nums[i] #swap\n        heap_queue_maxheapify(nums,0)\n    return nums\n    \n    \n    \n    \ndef heap_queue_heapsort(nums):\n    '''\n    Write a function to efficiently sort a given list of numbers using Heap Sort.\n    '''\n    n = len(nums)\n    #Build max heap\n    for i in range(n//2-1,-1,-1):\n        heap_queue_maxheapify(nums,i)\n    #One by one extract elements\n    for i in range"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap,-num)\n    for i in range(n):\n        print(hq.heappop(heap),end=' ')\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    result=[]\n    for i in range(n):\n        hq.heappush(result,nums.pop())\n    for i in range(n):\n        print(hq.heappop(result))\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0:\n        return []\n    if len(nums)==0:\n        return []\n    if len(nums)<=n:\n        return nums\n    heap=[]\n    for i in nums:\n        hq.heappush(heap,i)\n    \n    nums=[]\n    for i in range(n):\n        nums.append(hq.heappop(heap))\n    return nums\ndef test_function(test_case):\n    output = heap_queue_largest(test_case[0], test_case[1])\n    print(output)\n    if output == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\ntest_case_1 = [[3, 2, 1, 5, 6, 4], 1]\ntest_function(test_case_1)\ntest_case_2 = [[3, 2, 3, 1, 2, 4, 5, 5, 6], 4]\ntest_function(test_case_2)\ntest_case_3 = [[0, 1, 2, 3, 4, 5], 0]\ntest_function(test_case_3)\ntest_case_4 = [[], 0]\ntest_function(test_case_4)\ntest_case_5 = [[2, 1, 3, 4, 5, 6, 7, 8, 9], 10]\ntest_function(test_case_5)"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    n_largest = []\n    for i in range(n):\n        n_largest.append(hq.heappop(nums))\n    return n_largest\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        return None\n    else:\n        heap_queue = []\n        for i in nums:\n            if len(heap_queue) < n:\n                hq.heappush(heap_queue,i)\n            else:\n                if i > heap_queue[0]:\n                    hq.heappop(heap_queue)\n                    hq.heappush(heap_queue,i)\n        return heap_queue\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    result=[]\n    hq.heapify(nums)\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    if n == 0:\n        return []\n    for i in nums:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for _ in range(n)]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True\n    while x!= 1: \n        if x % 2!= 0: \n            return False\n        x = x / 2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    if x &(x-1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n  \ndef is_Power_Of_Two_2(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # x & (x - 1) will set the last bit to zero if it is set already\n    # Then we check whether it is equal to x.\n    # 1 is represented as 2's complement\n    return x & (x - 1) == 0\n  \ndef is_Power_Of_Two_3(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return bin(x).count('1') == 1\n  \ndef is_Power_Of_Two_4(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x ^ (x - 1)) == 0\n  \ndef is_Power_Of_Two_5(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & ~x) == 0\n  \ndef is_Power_Of_Two_6(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & ~x) == 0\n  \ndef is_Power_Of_Two_7(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & ~x\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==0:\n        return 1\n    else:\n        while (x!=1):\n            x = x >> 1\n            if x==1:\n                return 0\n    return 1\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: \n        print(x, \"is a power of two\")\n    else: \n        print(x, \"is not a power of two\")\nis_Power_Of_Two(11)\nis_Power_Of_Two(12)\nis_Power_Of_Two(14)\nis_Power_Of_Two(15)\nis_Power_Of_Two(16)\nis_Power_Of_Two(2)\nis_Power_Of_Two(3)\nis_Power_Of_Two(4)\nis_Power_Of_Two(5)\nis_Power_Of_Two(6)\nis_Power_Of_Two(7)\nis_Power_Of_Two(8)\nis_Power_Of_Two(9)\nis_Power_Of_Two(10)\nis_Power_Of_Two(11)\nis_Power_Of_Two(12)\nis_Power_Of_Two(13)\nis_Power_Of_Two(14)\nis_Power_Of_Two(15)\nis_Power_Of_Two(16)\nis_Power_Of_Two(17)\nis_Power_Of_Two(18)\nis_Power_Of_Two(19)\nis_Power_Of_Two(20)\nis_Power_Of_Two(21)\nis_Power_Of_Two(22)\nis_Power_Of_Two(23)\nis_Power_Of_Two(24)\nis_Power_Of_Two(25)\nis_Power_Of_Two(26)\nis_Power_Of_Two(27)\nis_Power_Of_Two(28)\nis_Power_Of_Two(29)\nis_Power_Of_Two(30)\nis_Power_Of_Two(31)\nis_Power_Of_Two(32)\nis_Power_Of_Two(33)\nis_Power_Of_Two(34)\nis_Power_Of_Two(35)\nis_Power_Of_Two(36)\nis_Power_Of_Two(37)\nis_Power_Of_Two(38)\nis_Power_Of_Two(39)\nis_Power_Of_Two(40)\nis_Power_Of_Two(41)\nis_Power_Of_Two(42)\nis_Power_Of_Two(43)\nis_Power_Of_Two(44)\nis_Power_Of_Two(45)\nis_Power_Of_Two(46)\nis_Power_Of_Two(47)\nis_Power_Of_Two(48)\nis_Power_Of_Two(49)\nis_Power_Of_Two(50)\nis_Power_Of_Two(51)\nis_Power_Of_Two(52)\nis_Power_Of_Two(53)\nis_Power_Of_Two(54)\nis_Power_Of_Two(55)\nis_Power_Of_Two(56)\nis_Power_Of_Two(57)\nis_Power_Of_Two(58)\nis_Power_Of_Two(59)\nis_Power_Of_Two(60)\nis_Power_Of_Two(61)\nis_Power_Of_Two(62)\nis_Power_Of_Two(61)\nis_Power_Of_Two(60)\nis_Power_Of_Two(59)\nis_Power_Of_Two(58)\nis_Power_Of_Two(57)\nis_Power_Of_Two(56)\nis_Power_Of_Two(55)\nis_Power_Of_Two(54)\nis_Power_Of_Two(53)\nis_Power_Of_Two(52)\nis_Power_Of_Two(51)\nis_Power_Of_Two(50)\nis_Power_Of_Two(49)\nis_Power_Of_Two(48)\nis_Power_Of_Two(47)\nis_Power_Of_Two(46)\nis_Power_Of_Two(45)\nis_Power_Of_Two(44)\nis_Power_Of_Two(43)\nis_Power_Of_Two(42)\nis_Power_Of_Two(41)\nis_Power_Of_Two(40)\nis_Power_Of_Two(39)\nis_Power_Of_Two(38)\nis_Power_Of_Two(37)\nis_Power_Of_Two(36)\nis_Power_Of_Two(35)\nis_Power_Of_Two(34)\nis_Power_Of_Two(33)\nis_Power_Of_Two(32)\nis_Power_Of_Two(31)\nis_Power_Of_Two(30)\nis_Power_Of_Two(29)\nis_Power_Of_Two(28)\nis_Power_Of_Two(27)\nis_Power_Of_Two(26)\nis_Power_Of_Two(25)\nis_Power_Of_Two(24)\nis_Power_Of_Two(23)\nis_Power_Of_Two(22)\nis_Power_Of_Two(21)\nis_Power_Of_Two(20)\nis_Power_Of_Two(19)\nis_Power_Of_Two(18)\nis_Power_Of_Two(17)\nis_Power_Of_Two(16)\nis_Power_Of_Two(15)\nis_Power_Of_Two(14)\nis_Power_Of_Two(13)\nis_Power_Of_Two(12)\nis_Power_Of_Two(11)\nis_Power_Of_Two(10)\nis_Power_Of_Two(9)\nis_Power_Of_Two(8)\nis_Power_Of_Two(7)\nis_Power_Of_Two(6)\nis_Power_Of_Two(5)\nis_Power_Of_Two(4)\nis_Power_Of_Two(3)\nis_Power_Of_Two(2)\nis_Power_Of_Two(1)\nis_Power_Of_Two(0)\nis_Power_Of_Two(62)\nis_Power_Of_Two(61)\nis_Power_Of_Two(60)\nis_Power_Of_Two(59)\nis_Power_Of_Two(58)\nis_Power_Of_Two(57)\nis_Power_Of_Two(56)\nis_Power_Of_Two(55)\nis_Power_Of_Two(54)\nis_Power_Of_Two(53)\nis_Power_Of_Two(52)\nis_Power_Of_Two(51)\nis_Power_Of_Two(50)\nis_Power_Of_Two(49)\nis_Power_Of_Two(48)\nis_Power_Of_Two(47)\nis_Power_Of_Two(46)\nis_Power_Of_Two(45)\nis_Power_Of_Two(44)\nis_Power_Of_Two(43)\nis_Power_Of_Two(42)\nis_Power_Of_Two(41)\nis_Power_Of_Two(40)\nis_Power_Of_Two(39)\nis_Power_Of_Two(38)\nis_Power_Of_Two(37)\nis_Power_Of_Two(36)\nis_Power_Of_Two(35)\nis_Power_Of_Two(34)\nis_Power_Of_Two(33)\nis_Power_Of_Two(32)\nis_Power_Of_Two(31)\nis_Power_Of_Two(30)\nis_Power_Of_Two(29)\nis_Power_Of_Two(28)\nis_Power_Of_Two(27)\nis_Power_Of_Two(26)\nis_Power_Of_Two(25)\nis_Power_Of_Two(24)\nis_Power_Of_Two(23)\nis_Power_Of_Two(22)\nis_Power_Of_Two(21)\nis_Power_Of_Two(20)\nis_Power_Of_Two(19)\nis_Power_Of_Two(18)\nis_Power_Of_Two(17)\nis_Power_Of_Two(16)\nis_Power_Of_Two(15)\nis_Power_Of_Two(14)\nis_Power_Of_Two(13)\ni"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    i = 1\n    while (i < x): \n        i = i * 2\n    if i == x:\n        return True\n    else:\n        return False\n        \ndef is_Power_Of_Two_FAST (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    while (x!= 1):\n        x = x // 2\n        if x == 1:\n            return True\n    return False\n    \ndef get_set_bits(num):\n    '''\n    Write a python function to return all the set bits of a number in binary.\n    '''\n    bits = []\n    while num > 0:\n        rem = num % 2\n        bits.append(rem)\n        num = num // 2\n    bits.reverse()\n    return bits\n    \ndef get_set_bits_FAST (num):\n    '''\n    Write a python function to return all the set bits of a number in binary.\n    '''\n    if num == 0:\n        return [0]\n    bits = []\n    while (num > 0):\n        if num % 2 == 1:\n            bits.append(1)\n        else:\n            bits.append(0)\n        num = num // 2\n    bits.reverse()\n    return bits\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    while x > 2:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    if x == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile(r'\\b\\w{4,}\\b')\n    result = regex.findall(text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    l = []\n    for word in text.split(' '):\n        if len(word) >= 4:\n            l.append(word)\n    return l\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b[a-zA-Z]{4,}\\b', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\S{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\S{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = re.findall(r'\\b[A-Za-z]{4,}\\b',text)\n    return long_words\n    \ndef find_word_upper_case(text):\n    '''\n    Write a function to find all words in a given string that contain at least one capital letter.\n    '''\n    all_caps_words = re.findall(r'\\b[A-Z]{1,}\\b',text)\n    return all_caps_words\n    \ndef find_long_words(text):\n    '''\n    Write a function to find all words that are at least 7 characters long in a given string\n    '''\n    long_words = re.findall(r'\\b[A-Za-z]{7,}\\b',text)\n    return long_words\n    \ndef find_words_with_characters_3(text):\n    '''\n    Write a function to find all words that have the character \u2018e\u2019 in them.\n    '''\n    all_words_with_e = re.findall(r'\\b[a-zA-z]*[ea]\\b',text)\n    return all_words_with_e\n    \ndef find_words_with_characters_4(text):\n    '''\n    Write a function to find all words that have all vowels in them.\n    '''\n    vowels = ['a','e','i','o','u']\n    vowel_words = []\n    for word in text.split(' '):\n        if set(vowels).issubset(set(word)):\n            vowel_words.append(word)\n    return vowel_words\n    \ndef find_words_with_characters_5(text):\n    '''\n    Write a function to find all words that have no \u201ce\u201d and at least one \u201ci\u201d.\n    '''\n    words_with_i = []\n    for word in text.split(' '):\n        if word.count('i') > 0 and word.count('e') == 0:\n            words_with_i.append(word)\n    return words_with_i\n    \ndef find_words_with_characters_6(text):\n    '''\n    Write a function to find all words that have no \u201ce\u201d or \u201cs\u201d.\n    '''\n    words_with_s = []\n    for word in text.split(' '):\n        if word.count('s') == 0 and word.count('e') == 0:\n            words_with_s.append(word)\n    return words_with_s\n    \ndef find_characters_in_range(text):\n    '''\n    Write a function to find all words that are exactly 5 characters long.\n    '''\n    five_char_words = []\n    for word in text.split(' '):\n        if len(word) == 5:\n            five_char_words.append(word)\n    return five_char_words\n    \ndef find_words_with_characters_in_range(text):\n    '''\n    Write a function to find all words that are between 3 and 7 characters long inclusive.\n    '''\n    between_three_seven = []\n    for word in text.split(' '):\n        if 3 <= len(word) <= 7:\n            between_three_seven.append(word)\n    return between_three_seven\n    \ndef find_words_with_characters_exactly_2(text):\n    '''\n    Write a function to find all words that are exactly 4 characters long.\n    '''\n    exactly_four = []\n    for word in text.split(' '):\n        if len(word) == 4:\n            exactly_four.append(word)\n    return exactly_four\n    \ndef find_words_with_characters_between_2_and_4(text):\n    '''\n    Write a function to find all words that are between 2 and 4 characters long inclusive.\n    '''\n    between_two_four = []\n    for word in text.split(' '):\n        if 2 <= len(word) <= 4:\n            between_two_four.append(word)\n    return between_two_four\n    \ndef find_characters_not_in_range(text):\n    '''\n    Write a function to find all words that are not between 3 and 7 characters long inclusive.\n    '''\n    between_three_seven = []\n    for word in text.split(' '):\n        if not 3 <= len(word) <= 7:\n            between_three_seven.append(word)\n    return between_three_seven\n    \ndef find_words_not_of_length(text):\n    '''\n    Write a function to find all words that are not an exact 5 character long.\n    '''\n    not_five_char = []\n    for word in text.split(' '):\n        if len(word)!= 5:\n            not_five_char.append(word)\n    return not_five_char\n    \ndef find_words_with_characters_not_between_2_and_4(text):\n    '''\n    Write a function to find all words that are not between 2 and 4 characters long inclusive.\n    '''\n    not_between_two_four = []\n    for word in text.split(' '):\n        if not 2 <= len(word) <= 4:\n            not_between_two_four.append(word)\n    return not_between_two_four\n    \ndef find_words_with_prefix(text):\n    '''\n    Write a function to find all words that have the prefix \u201cb\u201d for example. \u201cbicycle\u201d, \u201cbiscuits\u201d\n    '''\n    b_words = []\n    for word in text.split(' '):\n        if word.startswith('b'):\n            b_words.append(word)\n    return b_words\n    \ndef find_words_with_suffix(text):\n    '''\n    Write a function to find all words that have the suffix \u201cing\u201d for example. \u201cbending\u201d, \u201cswimming\u201d\n    '''\n    ing_words = []\n    for word in text.split(' '):\n        if word.endswith('ing'):\n            ing_words.append(word)\n    return ing_words\n    \ndef find_words_with_a_in_between(text):\n    '''\n    Write a function to find all words that have a \u201ca\u201d in between two vowels for example. \u201ccaramel\u201d, \u201ccandy\u201d, \u201cbreakfast\u201d\n    '''\n    a_between = []\n    for word in text.split(' '):\n        if word.count('a') > 0:\n            if word.index('a') > 0 and word.index('a') < word.index('a') + 2:\n                a_between.append(word)\n    return a_between\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    reg = re.compile(r'\\S{4,}')\n    result = reg.findall(text)\n    print(result)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    print(nums)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i ** 2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i*i)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n*n for n in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i*i)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for x in nums:\n        result.append(x**2)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(len(str)):\n        if str[:i] + str[i:] == str[:]:\n            return len(str[:i])\n    return 0\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return (len(str) - len(str[:len(str)-1])) % len(str)\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str)-len(str[::-1])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(len(str)-1):\n        if str[i:] + str[:i] == str:\n            return len(str[:i])\n    return 0\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return (len(str) - len(str[:len(str)-1])) % len(str)\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str)-len(str[::-1])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str)-1-str[::-1].index(str)\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - str.rindex(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - str.find(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - 1-str.index(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - 1 - str.rfind(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - 1 - str.find(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - str.index(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - 1 - str[::-1].index(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - str[::-1].find(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - 1 - str.find(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - 1 - str.rfind(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - str.index(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - 1 - str[::-1].index(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - str[::-1].find(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - 1 - str.find(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - 1 - str.rfind(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - str.index(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - 1 - str[::-1].index(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - str[::-1].find(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - 1 - str.find(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - 1 - str[::-1].find(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - str.index(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - 1 - str[::-1].index(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - str[::-1].find(str[0])\n    \ndef find_Rotations(str): \n    '''\n    Writ"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # This function just returns the number of rotations to get the same string\n    \n    if str == str[::-1]: # string is already palindrome so no rotations are needed\n        return 0\n    else:\n        return len(str)-str.index(str[::-1])\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return str\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def is_substring(str1, str2): \n        '''\n        Checks if str1 is a substring of str2.\n        '''\n        if(str1 in str2):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == str[::-1]:\n        return 0\n    for i in range(1, len(str)):\n        if str[i:] + str[:i] == str[:]:\n            return i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n    rotations = 0\n    i=0\n    while str[:i+1]!= str[i::-1]:\n        i = i+1\n        rotations = rotations + 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n > 0:\n        return n % len(str)\n    return 0\n    \ndef find_Cycles(str):\n    '''\n    Write a python function to find the minimum number of cycles (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n > 0:\n        return n - find_Rotations(str)\n    return 0\n    \ndef remove_Duplicates(str):\n    '''\n    Write a python function to remove the duplicates from the given string\n    '''\n    temp = ''\n    for letter in str:\n        if letter not in temp:\n            temp += letter\n    return temp\n    \ndef shortest_palindrome(str):\n    '''\n    Write a python function to get the shortest palindrome.\n    '''\n    return str[::-1] + str\n    \ndef rotate_by_d(str, d):\n    '''\n    Write a python function to rotate the string by d units (counting starting from 0)\n    '''\n    n = len(str)\n    if n > 0:\n        return str[d:] + str[:d]\n    return str\n    \ndef rotate(str, d):\n    '''\n    Write a python function to rotate the string by d units (counting starting from 0)\n    '''\n    n = len(str)\n    if n > 0:\n        return ''.join([str[(i + d) % n] for i in range(n)])\n    return str\n    \ndef rotate_word(str, n):\n    '''\n    Write a python function to rotate the string by n units (counting starting from 0)\n    '''\n    return str[n:] + str[:n]\n    \ndef rotate_around_space(str, n):\n    '''\n    Write a python function to rotate the string by n units (counting starting from 0)\n    '''\n    word = str.split(' ')\n    n = n % len(word)\n    return''.join(word[n:] + word[:n])\n    \ndef min_rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    rotations = 0\n    for i in range(n - 1):\n        if str[i + 1 :] + str[:i + 1] == str:\n            rotations += 1\n    return rotations\n    \ndef min_rotations_manacher(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    T = '#' + '#'.join(list(str)) + '#'\n    P = [0] * len(T)\n    C = R = 0\n    for i in range(1, len(T) - 1):\n        P[i] = (R > i) and min(R - i, P[2 * C - i])\n        while T[i + 1 + P[i]] == T[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > R:\n            C = i\n            R = i + P[i]\n    return P\n    \ndef min_rotations_manacher2(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    T = '#' + '#'.join(list(str)) + '#'\n    P = [0] * len(T)\n    C = R = 0\n    for i in range(1, len(T) - 1):\n        P[i] = (R > i) and min(R - i, P[2 * C - i])\n        while T[i + 1 + P[i]] == T[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > R:\n            C = i\n            R = i + P[i]\n    return P[1]\n    \ndef min_rotations_manacher3(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    T = '#' + '#'.join(list(str)) + '#'\n    C = R = 0\n    for i in range(1, len(T) - 1):\n        while T[i + 1 + R] == T[i - 1 - R]:\n            R += 1\n        R = (R - 1) // 2\n        if i + R > R:\n            C = i\n            R = i + R\n    return R\n    \ndef longest_palindrome(str):\n    '''\n    Write a python function to get the longest palindrome from the given string\n    '''\n    n = len(str)\n    if n > 0:\n        return max(longest_palindrome(str[:i]) + longest_palindrome(str[i:]) for i in range(n))\n    return ''\n    \ndef longest_palindrome_manacher(str):\n    '''\n    Write a python function to get the longest palindrome from the given string\n    '''\n    T = '#' + '#'.join(list(str)) + '#'\n    P = [0] * len(T)\n    C = R = 0\n    for i in range(1, len(T) - 1):\n        P[i] = (R > i) and min(R - i, P[2 * C - i])\n        while T[i + 1 + P[i]] == T[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > R:\n            C = i\n            R = i + P[i]\n    #print(P)\n    return P[1]\n    \ndef longest_palindrome_manacher2(str):\n    '''\n    Write a python function to get the longest palindrome from the given string\n    '''\n    T = '#' + '#'.join(list(str)) + '#'\n    P = [0] * len(T)\n    C = R = 0\n    for i in range(1, len(T) - 1):\n        P[i] = (R > i) and min(R - i, P[2 * C - i])\n        while T[i + 1 + P[i]] == T[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > R:\n            C = i\n            R = i + P[i]\n    #print(P)\n    return P\n    \ndef longest_palindrome_manacher3(str):\n    '''\n    Write a python function to get the longest palindrome from the given string\n    '''\n    T = '#' + '#'.join(list(str)) + '#'\n    P = [0] * len(T)\n    C = R = 0\n    for i in range(1, len(T) - 1):\n        P[i] = (R > i) and min(R - i, P[2 * C - i])\n        while T[i + 1 + P[i]] == T[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > R:\n            C = i\n            R = i + P[i]\n    #print(P)\n    return P\n    \ndef find_rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n > 0:\n        return n % len(str)\n    return 0\n    \ndef find_Cycles(str):\n    '''\n    Write a python function to find the minimum number of cycles (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n > 0:\n        return n - find_Rotations(str)\n    return 0\n    \nde"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    for i in range(n):\n        if(str[i:]+str[:i]==str):\n            return i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # all strings do not have the same length\n    # so first we check whether there is more than 1 string\n    if len(str)!= len(set(str)):\n        return -1\n    # store the length of the string\n    strLen = len(str)\n    # strLen must be even \n    # as we need to swap the first two character and the last two character\n    if strLen % 2 == 0:\n        # first we will compute the substring\n        # s1 = first 2 characters\n        # s2 = last 2 characters\n        # then we will compute the maximum len substring\n        s1 = str[:2]\n        s2 = str[strLen-2:]\n        return max(len(s1), len(s2))\n    else:\n        # if the string length is odd\n        # we will only have one sub string\n        # so we take the first character\n        # and last character and compute the len\n        s1 = str[0]\n        s2 = str[strLen-1]\n        return max(len(s1), len(s2))\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #rotations = 0\n    #str = \"ABAC\"\n    print(str)\n    if len(str) == 1:\n        return 0\n    n1 = len(str)\n    #n1 = str.count(str[0])\n    print(n1)\n    i = 0\n    while i < n1:\n        #print(str[i], str[0])\n        if str[i] == str[0]:\n            break\n        i += 1\n    #print(str[i])\n    #print(str[0:i])\n    #print(str[i+1:])\n    if str[i] == str[0]:\n        return 0\n    #print(i)\n    str1 = str[i+1:] + str[0:i+1]\n    #print(str1)\n    n2 = len(str1)\n    #print(n2)\n    if str1 == str:\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")[1:-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # return the string with first and last characters removed\n    return s.replace(ch, \"\", 1).replace(ch, \"\", -1)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    string = s\n    string = string.replace(ch, '')\n    return string\n    \n    \ndef remove_Occ_only(s,ch):\n    '''\n    Write a python function to remove only the first and last occurrence of a given character from the string.\n    '''\n    string = s\n    string = string.replace(ch, '')\n    string = string.replace(ch, '')\n    return string\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\", -1)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    for i in range(len(s)):\n        if s[i]==ch:\n            s=s[:i]+s[i+1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:s.index(ch)]+s[s.rindex(ch)+1:]\n    \ns=\"abdabcdababcdcd\"\nch='d'\nprint(remove_Occ(s,ch))\n    \n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',-1)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_str = s[:s.find(ch)]+s[s.find(ch)+1:]\n    return new_str\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if not M:\n        return M\n    def sort_by_row_sum(M):\n        return sorted(M, key=sum)\n    M = sort_by_row_sum(M)\n    for row in M:\n        row.reverse()\n        row.sort()\n        row.reverse()\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    res = []\n    M.sort(key = lambda x: sum(x))\n    \n    for row in M:\n        res.append(row)\n        \n    return res\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sum_rows = []\n    for i in range(len(M)):\n        sum_rows.append(sum(M[i]))\n    return sorted(M, key=sum_rows.__getitem__)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for j in range(1, n):\n        for i in range(0, n-j):\n            if sum(M[i]) > sum(M[i+1]):\n                M[i], M[i+1] = M[i+1], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if not M:\n        return M\n    \n    # Calculate the sum of each row and sort it.\n    sorted_row_sums = sorted(sum(M, []))\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sum_row(i):\n        return sum(M[i])\n    m,n = len(M), len(M[0])\n    return sorted(M, key=sum_row)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = np.array(M)\n    M = M.T\n    M = M.tolist()\n    M = sorted(M, key = lambda x: sum(x))\n    M = np.array(M)\n    M = M.T\n    M = M.tolist()\n    M = np.array(M)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key = lambda x: sum(x))\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sum_matrix = []\n    for i in range(len(M)):\n        sum_matrix.append(sum(M[i]))\n    ind = list(range(len(M)))\n    ind.sort(key=lambda x: sum_matrix[x])\n    return [M[i] for i in ind]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rowSum = []\n    for r in range(len(M)):\n        rowSum.append(sum(M[r]))\n    rowSum.sort()\n    print(rowSum)\n    sorted_M = []\n    for row in rowSum:\n        sorted_M.append([])\n        for col in range(len(M)):\n            if row == sum(M[col]):\n                sorted_M[-1].append(M[col])\n    return sorted_M\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/2)*(l*b*h)\nprint(find_Volume(4,6,5))\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3) * l * b * h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n    \ndef find_SurfaceArea(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the surface area of a rectangular prism.\n    '''\n    return 2*(a*b+a*c+a*e+a*f+b*c+b*d+c*d+e*f)\n    \ndef find_Circumference(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the circumference of a circular shape.\n    '''\n    return 2*3.14*(a+b+c+d+e+f)\n    \ndef find_Circumference(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the perimeter of a circular shape.\n    '''\n    return 2*3.14*(a+b+c+d+e+f)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l * b * h\n    "
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * (l * b * h) \n    print(volume)\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/6)*(l*b*h)\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = l*b*h\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (l*b*h) / 3\n    return v\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'_[a-z]',text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r\"_[a-z]*[a-z]\", text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    assert type(text) == str, \"Input must be a string.\"\n    return bool(re.search(r'_[a-z]*_', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r\"([a-z])_[a-z]\", text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'^[a-z]+_[a-z]+$', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'_\\w+_', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r\"_[a-z]+_\", text.lower())!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'_+[a-z]', text))\nprint(text_lowercase_underscore(\"i_got_it\"))\nprint(text_lowercase_underscore(\"i_got_it_1\"))\nprint(text_lowercase_underscore(\"i_got_it_3\"))\nprint(text_lowercase_underscore(\"_got_it\"))\nprint(text_lowercase_underscore(\"_got_it_2\"))\nprint(text_lowercase_underscore(\"__got_it\"))\nprint(text_lowercase_underscore(\"a__a_a\"))\nprint(text_lowercase_underscore(\"_i_got_it\"))\nprint(text_lowercase_underscore(\"i_got_it_\"))\nprint(text_lowercase_underscore(\"i_got_it_\"))\nprint(text_lowercase_underscore(\"\"))\nprint(text_lowercase_underscore(\"i_got_it_3\"))\nprint(text_lowercase_underscore(\"_got_it_\"))\nprint(text_lowercase_underscore(\"__got_it_\"))\nprint(text_lowercase_underscore(\"a__a_a\"))\nprint(text_lowercase_underscore(\"_i_got_it\"))\nprint(text_lowercase_underscore(\"i_got_it_1\"))\nprint(text_lowercase_underscore(\"i_got_it_\"))\nprint(text_lowercase_underscore(\"_got_it_\"))\nprint(text_lowercase_underscore(\"__got_it_\"))\nprint(text_lowercase_underscore(\"a__a_a\"))\nprint(text_lowercase_underscore(\"_i_got_it\"))\nprint(text_lowercase_underscore(\"i_got_it_1\"))\nprint(text_lowercase_underscore(\"i_got_it_2\"))\nprint(text_lowercase_underscore(\"_i_got_it\"))\nprint(text_lowercase_underscore(\"i_got_it_\"))\nprint(text_lowercase_underscore(\"i_got_it\"))\nprint(text_lowercase_underscore(\"_i_got_it_\"))\nprint(text_lowercase_underscore(\"i_got_it_1\"))\nprint(text_lowercase_underscore(\"_i_got_it_2\"))\nprint(text_lowercase_underscore(\"i_got_it_3\"))\nprint(text_lowercase_underscore(\"a__a_a_\"))\nprint(text_lowercase_underscore(\"_i_got_it_3\"))\nprint(text_lowercase_underscore(\"i_got_it_1_\"))\nprint(text_lowercase_underscore(\"_i_got_it_2_\"))\nprint(text_lowercase_underscore(\"_i_got_it_3_\"))\nprint(text_lowercase_underscore(\"a__a_a__\"))\nprint(text_lowercase_underscore(\"_i_got_it_3_1\"))\nprint(text_lowercase_underscore(\"i_got_it_1_1\"))\nprint(text_lowercase_underscore(\"i_got_it_2_1\"))\nprint(text_lowercase_underscore(\"i_got_it_\"))\nprint(text_lowercase_underscore(\"_got_it_\"))\nprint(text_lowercase_underscore(\"__got_it_\"))\nprint(text_lowercase_underscore(\"a__a_a_\"))\nprint(text_lowercase_underscore(\"_i_got_it_\"))\nprint(text_lowercase_underscore(\"i_got_it_1_\"))\nprint(text_lowercase_underscore(\"i_got_it_2_\"))\nprint(text_lowercase_underscore(\"i_got_it_3_\"))\nprint(text_lowercase_underscore(\"a__a_a__\"))\nprint(text_lowercase_underscore(\"_i_got_it_\"))\nprint(text_lowercase_underscore(\"i_got_it_1_\"))\nprint(text_lowercase_underscore(\"i_got_it_2_\"))\nprint(text_lowercase_underscore(\"i_got_it_3_\"))\nprint(text_lowercase_underscore(\"a__a_a___\"))\nprint(text_lowercase_underscore(\"_i_got_it_1\"))\nprint(text_lowercase_underscore(\"i_got_it_1_1\"))\nprint(text_lowercase_underscore(\"i_got_it_2_1\"))\nprint(text_lowercase_underscore(\"_i_got_it_2\"))\nprint(text_lowercase_underscore(\"i_got_it_2_\"))\nprint(text_lowercase_underscore(\"i_got_it_3_\"))\nprint(text_lowercase_underscore(\"a__a_a___\"))\nprint(text_lowercase_underscore(\"_i_got_it_1\"))\nprint(text_lowercase_underscore(\"i_got_it_1_1\"))\nprint(text_lowercase_underscore(\"i_got_it_2_1\"))\nprint(text_lowercase_underscore(\"_i_got_it_2\"))\nprint(text_lowercase_underscore(\"i_got_it_2_\"))\nprint(text_lowercase_underscore(\"i_got_it_3_\"))\nprint(text_lowercase_underscore(\"a__a_a____\"))\nprint(text_lowercase_underscore(\"_i_got_it_1\"))\nprint(text_lowercase_underscore(\"i_got_it_1_1\"))\nprint(text_lowercase_underscore(\"i_got_it_2_1\"))\nprint(text_lowercase_underscore(\"_i_got_it_2\"))\nprint(text_lowercase_underscore(\"i_got_it_2_\"))\nprint(text_lowercase_underscore(\"i_got_it_3_\"))\nprint(text_lowercase_underscore(\"a__a_a_____\"))\nprint(text_lowercase_underscore(\"_i_got_it_1\"))\nprint(text_lowercase_underscore(\"i_got_it_1_1\"))\nprint(text_lowercase_underscore(\"i_got_it_2_1\"))\nprint(text_lowercase_underscore(\"_i_got_it_2\"))\nprint(text_lowercase_underscore(\"i_got_it_2_\"))\nprint(text_lowercase_underscore(\"i_got_it_3_\"))\nprint(text_lowercase_underscore(\"a__a_a______\"))\nprint(text_lowercase_underscore(\"_i_got_it_1\"))\nprint(text_lowercase_underscore(\"i_got_it_1_1\"))\nprint(text_lowercase_underscore(\"i_got_it_2_1\"))\nprint(text_lowercase_underscore(\"_i_got_it_2\"))\nprint(text_lowercase_underscore(\"i_got_it_2_\"))\nprint(text_lowercase_underscore(\"i_got_it_3_\"))\nprint(text_lowercase_underscore(\"a__a_a_______\"))\nprint(text_lowercase_underscore(\"_i_got_it_1\"))\nprint(text_lowercase_underscore(\"i_got_it_1_1\"))\nprint(text_lowercase_underscore(\"i_got_it_2_1\"))\nprint(text_lowercase_underscore(\"_i_got_it_2\"))\nprint(text_lowercase_underscore(\"i_got_it_2_\"))\nprint(text_lowercase_underscore(\"i_got_it_3_\"))\nprint(text_lowercase_underscore(\"a__a_a________\"))\nprint(text_lowercase_underscore(\"_i_got_it_1\"))\nprint(text_lowercase_underscore(\"i_got_it_1_1\"))\nprint(text_lowercase_underscore(\"i_got_it_2_1\"))\nprint(text_lowercase_underscore(\"_i_got_it_2\"))\nprint(text_lowercase_underscore(\"i_got_it_2_\"))\nprint(text_lowercase_underscore(\"i_got_it_3_\"))\nprint(text_lowercase_underscore(\"a__a_a________\"))\nprin"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    return bool(re.match(r'^[a-z_]+$',text))\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    print(4 * a)\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    print(4*a)\n    \ndef square_diagonal(a):\n    '''\n    Write a function that returns the diagonal of a square given its side length as input.\n    '''\n    print(2*(a**2))\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return 0\n    output_str = list(string[0])\n    for ch in string[1:]:\n        for i in range(len(output_str)):\n            if output_str[i] == ch:\n                output_str[i] = ''\n                break\n    return ''.join(output_str)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()\n    string = string.replace(\" \", \"\")\n    new_str = list(string)\n    return new_str\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    ans = [] \n    new = string\n    for i in string: \n        if i in new:\n            new = new.replace(i,'') \n    return new\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    chars = list(string)\n    return chars\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_1 = string[::-1]\n    string_2 = string\n    list_1 = list(string_1)\n    list_2 = list(string_2)\n    for i in list_2:\n        if i in list_1:\n            list_1.remove(i)\n    string_1 = \"\".join(list_1)\n    return string_1[::-1]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lis = list(string) \n    for i in lis: \n        if i in string1: \n            string = string.replace(i,\"\")\n    return string\nstring1 = input()\nstring2 = input()\nprint(str_to_list(string1)"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    List1 = []\n    for i in string:\n        List1.append(i)\n    List2 = []\n    for j in string:\n        List2.append(j)\n    List2 = set(List2)\n    print(List1)\n    print(List2)\n    print(len(List2))\n    \n    for x in List2:\n        if x in List1:\n            List1.remove(x)\n    print(List1)\n    List1 = \"\".join(List1)\n    print(List1)\n    return List1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    ans = [] \n    for i in string: \n        if i not in ans: \n            ans.append(i) \n    return ans \n    \ndef find_min_window(string, pattern):\n    '''\n    Write a function that finds the minimum window in a string which will contain all the characters in the pattern.\n    '''\n    # first I'll build a dictionary which maps every character in the pattern to its frequency in the pattern string.\n    # then, I'll construct a dictionary which maps the frequencies of the characters in the pattern to the number of characters of that frequency in the pattern string.\n    # in this dictionary I'll record the maximum frequency in the pattern, and in the window I'll record the maximum frequency in the window.\n    # if I found a character of the pattern which is not in the window, I'll remove that character from the dictionary.\n    # finally, I'll return the minimum length of the window (the minimum length is the minimum index of the window + 1)\n    \n    d = {}\n    for c in pattern:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n            \n    l = len(pattern)\n    \n    m = {}\n    for c in d:\n        m[d[c]] = 0\n    \n    m[d[pattern[0]]] += 1\n    \n    start = 0\n    end = len(string) - 1\n    min_window = float(\"inf\")\n    while end < len(string):\n        if d[string[end]] in m:\n            m[d[string[end]]] += 1\n        \n        while l == 0:\n            if d[string[start]] in m:\n                m[d[string[start]]] -= 1\n                if m[d[string[start]]] == 0:\n                    del m[d[string[start]]]\n            start += 1\n        \n            if end - start + 1 < min_window:\n                min_window = end - start + 1\n                print(end, start, min_window)\n        \n        end += 1\n    return min_window\n    \ndef common_characters(s1, s2):\n    '''\n    Write a function to find the longest common substring among 2 strings.\n    '''\n    if len(s1) == 0 or len(s2) == 0:\n        return \"\"\n        \n    # s1[0] in s2[0] => a\n    # s1[1] in s2[1] => i\n    # s1[2] in s2[1] => n\n    # s1[3] in s2[1] => g\n    \n    # dp[i][j] means that the longest common substring between s1[0:i] and s2[0:j] is (s1[0:i] == s2[0:j])\n    \n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    for i in range(len(s1) + 1):\n        dp[i][0] = 0\n        \n    max_i = 0\n    max_j = 0\n    \n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n                if dp[i + 1][j + 1] > max_i:\n                    max_i = dp[i + 1][j + 1]\n                    max_j = j\n                    \n    # print(dp)\n    return s1[max_i - max_i:max_i]\n    \ndef longest_palindromic_substring(string):\n    '''\n    Write a function that, given a string, returns its longest palindromic substring.\n    '''\n    # to get the longest palindromic substring of a string, I'll find all the palindromes of the string and return the longest one.\n    \n    # the first solution that comes to mind is the naive solution, which is to generate all the palindromes, then return the longest one.\n    # the naive solution is too slow, so I'll try to make it faster.\n    \n    # the solution is to consider the string as a binary string, then consider the palindrome to be a binary string as well.\n    # let's assume that the longest palindrome is a binary string, then we can consider that each prefix or suffix of the binary string is a palindrome.\n    # then, we'll construct a dictionary which maps each prefix or suffix of the binary string to its longest palindrome, then we'll iterate through the dictionary and find the longest palindrome.\n    # if we didn't find any palindrome, we'll return the empty string.\n    \n    dp = {}\n    \n    # dp[string[0:i]] means the longest palindrome string which ends at position i in the binary string.\n    # at the beginning we'll set each entry in the dictionary to an empty string.\n    for i in range(len(string)):\n        dp[string[i]] = ''\n        dp[string[i:][::-1]] = ''\n    \n    max_str = ''\n    \n    # then, we'll iterate through the dictionary, and for each entry, we'll look at its corresponding prefix or suffix to the binary string.\n    # the prefix is the substring from position i - len(p) to i, and the suffix is the substring from position i to i + len(p).\n    # we'll construct the palindrome by adding the prefix to the suffix, and we'll check if it is a palindrome, and if it is, we'll keep the palindrome.\n    # if the palindrome is not a palindrome, we'll remove the prefix from the dictionary and try the next prefix.\n    # if the dictionary is empty, that means we didn't find any palindrome.\n    for p in dp:\n        i = 0\n        j = len(dp[p]) - 1\n        \n        while i < j:\n            if dp[p][i] == dp[p][j]:\n                dp[p] = dp[p][i:j+1]\n                if len(dp[p]) > len(max_str):\n                    max_str = dp[p]\n            else:\n                break\n            i += 1\n            j -= 1\n    \n    return max_str\n    \ndef longest_prefix_suffix(string):\n    '''\n    Write a function to find the longest prefix and suffix which are palindromic strings.\n    '''\n    # consider the prefix and suffix to be palindromes.\n    # then, we'll check if the prefix and suffix are palindromes, and if they are, then we'll return the palindromes.\n    # if not, we'll remove the prefix and suffix from the string and try again.\n    \n    # dp[i][j] means that the longest prefix and suffix between s[0:i] and s[0:j] are palindromes.\n    \n    dp = [[False for _ in range(len(string))] for _ in range(len(string))]\n    \n    for i in range(len(string)):\n        dp[i][i] = True\n        \n    max_i = 0\n    max_j = 0\n    \n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            if string[i] == string[j]:\n                dp[i][j] = True\n                if j - i + 1 > max_j - max_i + 1:\n                    max_i = i\n                    max_j = j\n            else:\n                dp[i][j] = False\n                \n    return string[max_i:max_j + 1]\n    \ndef string_compression(string):\n    '''\n    Write a function to perform basic string compression using the counts of repeated characters.\n    '''\n    # we'll first count how many times each character shows up in the string and put that number in the dictionary, and then we'll create the compressed string.\n    # if we find a character which shows up more than once, we'll add the number to the compressed string, then add the character to the compressed string.\n    # after that, we'll iterate through the dictionary, and if the character shows up more than once, we'll add the number to the compressed string"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # time complexity o(n)\n    # space complexity o(n)\n    temp = ''\n    for i in string:\n        if i not in temp:\n            temp += i\n    return temp\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()\n    result = [i for i in string if i not in string[:i]]\n    return result\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    res = False\n    nums = set()\n    for n in arraynums:\n        if n in nums:\n            res = True\n            break\n        else:\n            nums.add(n)\n    return res\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        for j in arraynums[1:]:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #Time O(n) | Space O(n)\n    return len(arraynums)!= len(set(arraynums))\n    \n    \ndef test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #Time O(n) | Space O(n)\n    nums_set = set()\n    for num in arraynums:\n        if num in nums_set:\n            return True\n        else:\n            nums_set.add(num)\n    return Fals"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums) - 1):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 1:\n        return False\n    else:\n        for i in arraynums:\n            if arraynums.count(i) > 1:\n                return True\n                break\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    return len(set(arraynums))!= len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    lst = [i for i in range(1, x+1) if x % i == 0] \n    return sum(lst) == x\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    for i in s:\n        if i in \"0123456789\":\n            return False\n    if len(s) == 1:\n        return True\n    else:\n        return False\ndef is_numbers(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    for i in s:\n        if i in \"0123456789\":\n            return True\n    if len(s) == 1:\n        return True\n    else:\n        return False\ndef is_contains_same_digits(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    c = []\n    for i in s:\n        if i in \"0123456789\":\n            c.append(i)\n    if len(c) == len(set(c)):\n        return True\n    else:\n        return False\ndef is_len_is_greater(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    if len(s) > 7:\n        return True\n    else:\n        return False\ndef is_contains_same_digits(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    c = []\n    for i in s:\n        if i in \"0123456789\":\n            c.append(i)\n    if len(c) == len(set(c)):\n        return True\n    else:\n        return False\ndef is_contains_same_digits_better(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    c = []\n    for i in s:\n        if i in \"0123456789\":\n            c.append(i)\n    if len(c) == len(set(c)):\n        return True\n    else:\n        return False\ndef is_palindrome_number(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    s = s[::-1]\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome_number_better(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome_number_by_reverse_string_manipulation(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    return s == s[::-1]\ndef is_is_palindrome_number_by_builtin(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    "
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    #Start writing your code here\n    #Populate the variable sum\n    sum=0\n    while x>0:\n        rem=x%10\n        x=x//10\n        sum=sum+rem\n    \n    # Use the below given print statements to display the output\n    # Also, do not modify them for verification to work\n    if sum%2==0:\n        print(\"Number is \"+str(sum)+\"is a woodall\")\n    else:\n        print(\"Number is \"+str(sum)+\"is not a woodall\")\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    import numpy as np\n    if np.log2(x)%1 == 0:\n        return True\n    else:\n        return False\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x%7==0) and (x%5==0): \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # Base case\n    if x == 0: \n        return True\n    \n    # Check if the number is odd\n    if x % 2!= 0:\n        return False\n    \n    # Else it must be even\n    return is_woodall(x//2)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 3 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    check = False\n    if x >= 0 and x < 52:\n        check = True\n    return check\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2!=0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str=str(num)\n    rev_num_str=str(num)[::-1]\n    if num_str==rev_num_str:\n        print(\"Given number is a palindrome\")\n    else:\n        print(\"Given number is not a palindrome\")\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num%10==0 and num==num//10+(num%10)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])*2-1\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = int(num)\n    temp = num\n    rev = 0\n    while(num!= 0):\n        temp = num % 10\n        num = num // 10\n        rev = rev*10+temp\n    return(temp == (rev//2))"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    temp = num\n    while temp>0:\n        rev = (rev*10) + (temp%10)\n        temp = int(temp/10)\n    if (num == (2*rev - 1)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])*2\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = int(num)\n    num_rev = int(str(num)[::-1])\n    if num_rev == num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1]) * 2\nprint(rev(7))\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # The following line reverses the number\n    rev = int(str(num)[::-1])\n    # If the reversed number is twice its original value, then the function returns True\n    if num == 2*rev:\n        return True\n    return False\n    \n    "
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_reverse = num[::-1]\n    if num == str(int(num_reverse) + 1):\n        return True\n    else:\n        return False\n    \ndef rev_rev(num):\n    '''\n    Write a python function to check if a given number is one more than twice its reverse.\n    '''\n    num_reverse = num[::-1]\n    if num == str(int(num_reverse) + 2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    arr.sort()\n    max_num = ''\n    for i in range(n - 1, -1, -1) : \n        max_num += str(arr[i])\n    return int(max_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m = []\n    def permutation(arr, n): \n        if n == 1: \n            return [arr[0]] \n        elif n == 2: \n            return [arr[0] + arr[1], arr[1] + arr[0]]\n        else: \n            for i in range(n): \n                for p in permutation(arr[:i] + arr[i+1:n], n-1): \n                    if arr[i] not in p: \n                        m.append(arr[i] + p)\n                        m.append(p + arr[i])\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # The arr represents the list of numbers. \n    n = len(arr) \n    # Compute all sub arrays of size n \n    for i in range(0, n + 1): \n        for j in range(0, n + 1): \n            # Find the maximum value of a sub array \n            # and print it \n            print(maxSubArray(arr, i, j))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # convert the list of digits into integer \n    # convert it into string \n    # find the length of the string \n    # create a variable and initialize with the value 0\n    # traverse the string and increment the value of variable based on the values present in the list \n    # print the value of variable \n    \n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # print(arr)\n    # str_arr = str(arr)\n    # print(str_arr)\n    # print(len(str_arr))\n    # largest_num = 0\n    # for i in str_arr:\n    #     print(i)\n    #     largest_num = largest_num + int(i)\n    # print(largest_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #create a list of numbers by converting the given digits into a list\n    numbers_list = [int(x) for x in str(arr)]\n    #sort the list\n    numbers_list.sort()\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    print(arr)\n    max_number = 0\n    for i in arr :\n        temp = arr[:]\n        for j in temp:\n            if i < j:\n                temp.remove(i)\n                temp.remove(j)\n                if len(temp) == 0 :\n                    max_number = i*10 + j\n                    return max_number\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = list(map(str, arr))\n    print(arr)\n    arr = \"\".join(arr)\n    print(arr)\n    print(type(arr))\n    s = sorted(arr, reverse = True)\n    print(s)\n    return s[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #arr= [1,2,3,4,5,6,7]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Traverse all the digits and find the largest number that can be formed from them.\n    largest_number = 0\n    for i in arr:\n        # Convert the number to integer.\n        i = int(i)\n        if i > largest_number:\n            largest_number = i\n    \n    return largest_number\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x < 0 and y > 0 or x > 0 and y < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0)^(y<0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0 and y>0) or (x>0 and y<0)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<0 and y>0) or (x>0 and y<0): \n        return True\n    else: \n        return False\n    \ndef reverse_string(x): \n    '''\n    Write a python function to reverse a string\n    '''\n    y = x[::-1] \n    return y\n    \ndef sum_of_digits(x): \n    '''\n    Write a python function to sum of digits in an integer\n    '''\n    y = 0\n    while(x): \n        y += x%10 \n        x = x//10 \n    return y\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        print(\"opposite signs\")\n    else:\n        print(\"not opposite signs\")\nopposite_Signs(1,-2)\nopposite_Signs(1,0)\nopposite_Signs(1,2)\nopposite_Signs(-2,2)\nopposite_Signs(1,-2)\nopposite_Signs(1,0)\nopposite_Signs(1,2)\nopposite_Signs(-2,2)\nopposite_Signs(1,-2)\nopposite_Signs(1,0)\nopposite_Signs(1,2)\nopposite_Signs(-2,2)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0: \n        return True\n    elif x > 0 and y > 0: \n        return True\n    else: \n        return False\nopposite_Signs(-3,5)\nopposite_Signs(3,5)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        print(\"Yes, the given integers have opposite sign\")\n    else:\n        print(\"No, the given integers do not have opposite sign\")\nopposite_Signs(1,2)\nopposite_Signs(1,-2)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #print(\"\\n\")\n    #print(\"\\n\")\n    if x>0 and y<0:\n        return \"opposite\"\n    elif x<0 and y>0:\n        return \"opposite\"\n    else:\n        return \"not opposite\"\n    "
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*n*3+n*3+1\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        raise ValueError(\"Input should be an integer greater than 0\")\n    elif n == 1:\n        return 1\n    else:\n        return n + (8 * is_octagonal(n - 1))\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n*(2*n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(n):\n        i = i + 1\n        print((i * (3 * i - 1)) // 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n - 1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (n + 1)) << 1\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (8 * (n ** 2)) + (n * 6) - 3\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*octagonal_num(n-1)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # first get the length of the string\n    len_of_s = len(s)\n    if len_of_s == 0:\n        return 0\n    # take a map for each digit and count the number of substrings of that number\n    # initialize the map to 0\n    digit_map = defaultdict(int)\n    for i in range(0, 10):\n        digit_map[i] = 0\n    # store the substrings with the sum equal to their length\n    digit_substrings = defaultdict(int)\n    digit_substrings[len_of_s] = 1\n    # count the substrings for each digit\n    for i in range(0, len_of_s):\n        digit = int(s[i])\n        digit_map[digit] += 1\n        # if the sum of the substrings are equal to the length of the substring\n        if digit_substrings[len_of_s - digit_map[digit]]:\n            digit_substrings[len_of_s - digit_map[digit]] += 1\n    return sum(digit_substrings.values())\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s = list(s)\n    ans = defaultdict(int)\n    print(ans)\n    n = len(s)\n    for i in range(n):\n        for j in range(i,n):\n            ans[j - i] += 1\n    print(ans)\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    hash_ = defaultdict(int)\n    hash_[0] = 1\n    for i in range(l):\n        curr = 0\n        for j in range(i, l):\n            curr += ord(s[j]) - ord('0')\n            hash_[curr] += 1\n    return hash_[0] + hash_[1] + hash_[2] + hash_[3]\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    print(len(s))\n    total = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if len(s[i:j+1]) == len(set(s[i:j+1])):\n                total+=1\n    print(total)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # return sum([int(s[i:i+j]) in range(1, j+1) for j in range(1, len(s)+1) for i in range(len(s)-j+1)])\n    return sum(map(lambda x: len(x) == sum(map(int, x)), [' '.join(s[i:i+j]) for j in range(1, len(s)+1) for i in range(len(s)-j+1)]))\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            sum = 0\n            for k in range(i, j+1):\n                sum += int(s[k])\n            if sum == j-i+1:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    \n    # check for only one character substrings\n    if n == 1:\n        return n\n        \n    # create a dictionary that will contain the counts of all the substrings\n    sub_dict = defaultdict(int)\n    sub_dict[s[0:1]] = 1\n    \n    # iterate through the string\n    for i in range(1, n):\n        for j in range(i, n):\n            # get the substring from the string\n            substring = s[i:j+1]\n            # get the number of characters in the substring\n            length = len(substring)\n            # initialize the sum of the digits in the substring\n            digit_sum = 0\n            # iterate through the substring\n            for k in range(length):\n                # add the sum of the digits in the substring\n                digit_sum += int(substring[k])\n                # if the sum is equal to the length, increment the count\n                if digit_sum == length:\n                    sub_dict[substring] += 1\n                    \n    # return the count of substrings\n    return sum(sub_dict.values())\n    \ndef count_Substrings_recursive(s, start_index, end_index):\n    # check for no characters in the string\n    if end_index <= start_index:\n        return 0\n        \n    # get the substring\n    substring = s[start_index:end_index+1]\n    # get the number of characters in the substring\n    length = len(substring)\n    # initialize the sum of the digits in the substring\n    digit_sum = 0\n    # iterate through the substring\n    for k in range(length):\n        # add the sum of the digits in the substring\n        digit_sum += int(substring[k])\n        # if the sum is equal to the length, increment the count\n        if digit_sum == length:\n            # increment the count if all substrings in the substring with the sum of digits equal to the length are valid\n            return count_Substrings_recursive(s, start_index, end_index-1) + 1\n            \n    # return the count of substrings with the sum of digits equal to the length\n    return count_Substrings_recursive(s, start_index+1, end_index)\n    \nif __name__ == \"__main__\":\n    s = '13579'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = 'abc'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '123'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '1234'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '121212'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '12121212'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '1212121212'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '121212121212'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '12121212121212'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '1212121212121212'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '121212121212121212'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '12345'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '1234567'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '123456789'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '12345678910'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '1234567891011'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '123456789101112'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '12345678910111213'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '1234567891011121314'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '123456789101112131415'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '12345678910111213141516'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '1234567891011121314151617'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '123456789101112131415161718'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '12345678910111213141516171819'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '1234567891011121314151617181920'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '123456789101112131415161718192021'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '123456789101112131415161718192021223'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '12345678910111213141516171819202122324'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '1234567891011121314151617181920212232425'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '123456789101112131415161718192021223242526'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '12345678910111213141516171819202122324252627'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '1234567891011121314151617181920212232425262728'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '123456789101112131415161718192021223242526272829'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '12345678910111213141516171819202122324252627282930'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '12345678910111213141516171819202122324252627282930312'\n    print(count_Substrings_recursive(s, 0, len(s)-1))\n    \n    s = '1234567891011121314151617181920212232425262728293031234'\n    print(count_Substrings_re"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[0 for i in range(n)]for j in range(n)]\n    \n    for l in range(1, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if s[i] == '0':\n                dp[i][j] = 0\n            else:\n                dp[i][j] = 1\n            if i == j:\n                dp[i][j] += 1\n            elif i + 1 == j:\n                if int(s[i]) + int(s[j]) == l:\n                    dp[i][j] += 1\n            else:\n                if int(s[i]) + int(s[j]) == l:\n                    dp[i][j] += dp[i + 1][j - 1]\n                dp[i][j] += dp[i + 1][j] + dp[i][j - 1]\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    if n==0:\n        return 0\n    # Code here\n    hash_map = defaultdict(int)\n    hash_map[0] = 1\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += int(s[i])\n        hash_map[curr_sum] += 1\n        # print(hash_map)\n    # print(hash_map)\n    ans = 0\n    for i in range(n):\n        ans += hash_map[i] * hash_map[n-i]\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # if len(s) == 1:\n    #     return len(s)\n    # if len(s) == 2:\n    #     if s[0] == s[1]:\n    #         return 1\n    #     else:\n    #         return 2\n    # s_len = len(s)\n    # s_set = list(s)\n    # ans = 0\n    # for i in range(s_len):\n    #     if s[i] == s[i+1]:\n    #         j = i+2\n    #         while j < s_len:\n    #             if s[i] == s[j]:\n    #                 sum = 0\n    #                 for k in range(i,j):\n    #                     sum += int(s[k])\n    #                 if sum == j-i:\n    #                     ans += 1\n    #             j += 1\n    # return ans\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    pass\n    return 0\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\nprint(smallest_num([4,6,2,7,9]))\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = 0\n    for i in xs:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 1:\n        return None\n    \n    test_list.sort()\n    max_difference = test_list[1] - test_list[0]\n    \n    for i in range(len(test_list) - 1):\n        difference = test_list[i + 1] - test_list[i]\n        if max_difference < difference:\n            max_difference = difference\n        \n    return max_difference\n        \n    \n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # A pair is a list with 2 elements which are consecutive in the given test_list\n    pairs = []\n    for idx in range(len(test_list)):\n        if idx < len(test_list) - 1:\n            pairs.append([test_list[idx], test_list[idx+1]])\n    max_pair = [pairs[0][0], pairs[0][1]]\n    for p in pairs:\n        if abs(p[0] - p[1]) > abs(max_pair[0] - max_pair[1]):\n            max_pair = p\n    return max_pair\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # return abs(test_list[0] - test_list[1])\n    # return max(test_list) - min(test_list)\n    return max([abs(x[0] - x[1]) for x in combinations(test_list, 2)])\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # return the difference between the highest and lowest numbers in the list\n    return max(test_list) - min(test_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list)<2:\n        raise ValueError('Input should be atleast of 2')\n    return max(test_list)-min(test_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = sorted(test_list)\n    max = test_list[1] - test_list[0]\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j] - test_list[i] > max:\n                max = test_list[j] - test_list[i]\n    return max\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = [1,2,3,4,5,6]\n    test_list = [1,2,3,4,6,5]\n    test_list = [1,2,3,4,6,8,7]\n    test_list = [1,3,2,4,6,5]\n    test_list = [1,4,7,2,3,5]\n    test_list = [1,2,3,4,5,6,7,8,9,10]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i]!= test_list[j] and i < j and abs(test_list[i] - test_list[j]) > max_difference:\n                max_difference = abs(test_list[i] - test_list[j])\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max([test_list[j] - test_list[i] for i in range(len(test_list)-1) for j in range(i+1, len(test_list))])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks=sorted(subjectmarks,key=lambda x:x[1])\n    return marks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sorting_subjects(subjectmarks):\n        return subjectmarks[1]\n    sorted_list = sorted(subjectmarks, key = sorting_subjects)\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(sorted(subjectmarks, key=lambda x: x[1], reverse=True))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # print(subjectmarks)\n    subjectmarks.sort(key=lambda tup: tup[1], reverse=True)\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #initializing a list to append the tuple values\n    list_of_tuples = []\n    for i in subjectmarks:\n        list_of_tuples.append(i)\n    #sorting the list\n    list_of_tuples.sort(key = lambda x: x[1])\n    #printing the sorted list\n    print(list_of_tuples)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list)==0:\n        return 0\n    if isinstance(data_list[0], list):\n        return sum([recursive_list_sum(x) for x in data_list])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data_sum = 0\n    for element in data_list:\n        if type(element) == int:\n            data_sum += element\n        else:\n            data_sum += recursive_list_sum(element)\n    return data_sum\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #if data_list is empty, return 0\n    if data_list == []:\n        return 0\n    #if it is not empty, sum the first element and call function again for the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if isinstance(data_list[0], int):\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    n = 0\n    for i in list:\n        if i > 0:\n            n += 1\n    return n\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i]>0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for x in list:\n        if x>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for number in list:\n        if number > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos += 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter=0\n    for i in list:\n        if i>0:\n            counter+=1\n    return counter\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = []\n    for i in range(n+1):\n        bell.append(bell_n(i))\n    bell_dict = {}\n    for i in range(len(bell)):\n        bell_dict[i] = bell[i]\n    return bell_dict\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_num_list = bell_numbers(n)\n    total_ways = 0\n    for i in bell_num_list:\n        total_ways += ways(i)\n    return total_ways\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    print(\"Bell Number %d has %d ways to be partitioned.\" % (n, bell_number_helper(n)))\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = {0:1, 1:1, 2:2, 3:5}\n    if n<0:\n        return 0\n    if n in bell:\n        return bell[n]\n    else:\n        result = 0\n        for i in range(n):\n            result += bell_number(i) * bell_number(n-i-1)\n        bell[n] = result\n        return result\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_nums = [1, 1]\n    if n > 1:\n        for i in range(n-1):\n            bell_nums.append(bell_nums[-1] + bell_nums[-2])\n    return bell_nums[-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # General Idea: if we are given x bell numbers and n is greater than 0, then the number of ways to partition those numbers is the sum of the number of ways to partition x-1 bell numbers and x bell numbers\n    #             this is because we can either partition them as a sum of x-1 bell numbers and x bell numbers, or just x bell numbers, so we have that the number of ways to partition x bell numbers is the sum of the ways to partition x-1 bell numbers and x bell numbers.\n    if n == 0: \n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    return bell_number(n-1) + bell_number(n-2)\n    \ndef bell_number_rec(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers recursively.\n    '''\n    if n == 0:\n        return 1\n    \n    return bell_number_rec(n-1) + bell_number_rec(n-2)\n    \ndef bell_number_mem(n, memo):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers using memoization.\n    '''\n    if n in memo:\n        return memo[n]\n    \n    if n == 0:\n        return 1\n    \n    memo[n] = bell_number_mem(n-1, memo) + bell_number_mem(n-2, memo)\n    return memo[n]\n    \ndef bell_number_top_down(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers using top-down DP.\n    '''\n    if n == 0:\n        return 1\n    \n    dp = [None for _ in range(n+1)]\n    dp[0] = 1\n    dp[1] = 1\n    \n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n    \ndef bell_number_bottom_up(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers using bottom-up DP.\n    '''\n    if n == 0:\n        return 1\n    \n    dp = [None for _ in range(n+1)]\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    \n    for i in range(3, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n    \n    \nif __name__ == '__main__':\n    print(bell_number(5))\n    print(bell_number_rec(5))\n    print(bell_number_mem(5, {}))\n    print(bell_number_top_down(5))\n    print(bell_number_bottom_up(5)"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1,1,2,5,15,52, 203, 877, 4140, 21147, 115975, 531441, 1580504, 4514920, 241148657, 1626777235, 7919176735, 3814422653, 2990973431, 212996595, 975642541, 531441, 258416723, 15042595, 4279705390, 3395024515, 17498949747, 844294733, 36407240075, 36407240075, 36407240075, 36407240075, 36407240075, 36407240075]\n    if n > len(bells)-1:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n)"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = {0:1, 1:1, 2:2}\n    for i in range(3, n+1):\n        bells[i] = (i * (i-1)) // 2\n    return sum(bells.values())\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = []\n    for i in range(n):\n        bell.append(bell_list[i][0])\n    return bell_partition(bell, n)\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # length of the array\n    n = len(A)\n    \n    # Monotonic increasing array\n    if all(A[i] <= A[i + 1] for i in range(n - 1)): \n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            if i < len(A)-2:\n                if A[i] < A[i+2]:\n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif A[i] > A[i+1]:\n            if i < len(A)-2:\n                if A[i] > A[i+2]:\n                    continue\n                else:\n                    return False\n            else:\n                return True\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    i = 1\n    while i < len(A):\n        if A[i] > A[i-1]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A=np.array(A)\n    dif=[]\n    for i in range(len(A)-1):\n        dif.append(A[i]-A[i+1])\n    if all(x>0 for x in dif):\n        return \"Given array is monotonic\"\n    elif all(x<0 for x in dif):\n        return \"Given array is monotonic\"\n    else:\n        return \"Given array is not monotonic\"\n    \nprint(is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001])) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Write your code here\n    if A[0] < A[1]:\n        monotonic = True\n    else:\n        monotonic = False\n        return monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\nA = [6, 5, 4, 4] \nprint(is_Monotonic(A)) \nA = [1, 2, 2, 3] \nprint(is_Monotonic(A)) \nA = [6, 5, 5] \nprint(is_Monotonic(A))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n    \ndef is_Even(A):\n    '''\n    Write a Python function to check whether a number is even or not.\n    '''\n    return A%2 == 0\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    return A == sorted(A) or A == sorted(A, reverse=True)\n  \n  \n  "
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if s == l:\n        return True\n    if len(l) < len(s):\n        return False\n    if l == s[0:len(l)]:\n        return is_sublist(l[len(l)-len(s):], s[len(l):])\n    else:\n        return is_sublist(l[len(l)-len(s):], s)\n    \ndef list_update(l, s):\n    '''\n    Write a function to update a list l by adding s to it.\n    '''\n    if not l:\n        return l\n    if not s:\n        return l\n    if s == l:\n        return s\n    if len(l) < len(s):\n        return l\n    return l[0:len(l)-len(s)] + [l[len(l)-len(s):] + s]\n    \ndef list_copy(l):\n    '''\n    Write a function to copy the given list.\n    '''\n    if not l:\n        return []\n    return [l] + list_copy(l[1:])\n    \ndef list_find(l, v):\n    '''\n    Write a function to find the index of the given value v in the given list l.\n    '''\n    if not l:\n        return -1\n    if l[0] == v:\n        return 0\n    return 1 + list_find(l[1:], v)\n    \ndef list_count(l, v):\n    '''\n    Write a function to count the number of times the given value v appears in the given list l.\n    '''\n    if not l:\n        return 0\n    if l[0] == v:\n        return 1 + list_count(l[1:], v)\n    else:\n        return 0 + list_count(l[1:], v)\n    \ndef list_len(l):\n    '''\n    Write a function to count the number of elements in the given list l.\n    '''\n    if not l:\n        return 0\n    return 1 + list_len(l[1:])\n    \ndef list_len_recursive(l):\n    '''\n    Write a function to count the number of elements in the given list l.\n    '''\n    if not l:\n        return 0\n    return 1 + list_len_recursive(l[1:])\n    \ndef list_join(l, s):\n    '''\n    Write a function to join the given list l by the given separator s.\n    '''\n    if not s:\n        return s\n    if not l:\n        return ''\n    if l[0] == s:\n        return s + list_join(l[1:], s)\n    return l[0] + s + list_join(l[1:], s)\n    \ndef list_map(f, l):\n    '''\n    Write a function to map the given function f on the given list l.\n    '''\n    if not l:\n        return []\n    if not f:\n        return l\n    return [f(l[0])] + list_map(f, l[1:])\n    \ndef list_filter(f, l):\n    '''\n    Write a function to filter the given list l by the given filter f.\n    '''\n    if not l:\n        return []\n    if f(l[0]):\n        return [l[0]] + list_filter(f, l[1:])\n    return list_filter(f, l[1:])\n    \ndef list_zip(l1, l2):\n    '''\n    Write a function to zip 2 given lists.\n    '''\n    if not l1:\n        return []\n    if not l2:\n        return []\n    if len(l1) < len(l2):\n        return list_zip(l1, l2[1:])\n    if len(l2) < len(l1):\n        return list_zip(l1[1:], l2)\n    return [l1[0]] + [l2[0]] + list_zip(l1[1:], l2[1:])\n    \ndef list_zip_recursive(l1, l2):\n    '''\n    Write a function to zip 2 given lists.\n    '''\n    if not l1:\n        return []\n    if not l2:\n        return []\n    return [l1[0]] + list_zip_recursive(l1[1:], l2[1:])\n    \ndef list_reverse(l):\n    '''\n    Write a function to reverse a given list.\n    '''\n    if not l:\n        return []\n    if len(l) <= 1:\n        return l\n    return [l[0]] + list_reverse(l[1:])\n    \ndef list_reverse_recursive(l):\n    '''\n    Write a function to reverse a given list.\n    '''\n    if not l:\n        return []\n    if len(l) <= 1:\n        return l\n    return [l[0]] + list_reverse_recursive(l[1:])\n    \ndef list_contains(l, v):\n    '''\n    Write a function to check whether a given value v appears in the given list l.\n    '''\n    if not l:\n        return False\n    if l[0] == v:\n        return True\n    return list_contains(l[1:], v)\n    \ndef list_contains_recursive(l, v):\n    '''\n    Write a function to check whether a given value v appears in the given list l.\n    '''\n    if not l:\n        return False\n    if l[0] == v:\n        return True\n    return list_contains_recursive(l[1:], v)\n    \ndef list_max(l):\n    '''\n    Write a function to find the maximum element in the given list l.\n    '''\n    if not l:\n        return -1\n    if len(l) == 1:\n        return l[0]\n    if l[0] > list_max(l[1:]):\n        return l[0]\n    return list_max(l[1:])\n    \ndef list_max_recursive(l):\n    '''\n    Write a function to find the maximum element in the given list l.\n    '''\n    if not l:\n        return -1\n    if len(l) == 1:\n        return l[0]\n    if l[0] > list_max_recursive(l[1:]):\n        return l[0]\n    return list_max_recursive(l[1:])\n    \ndef list_insert_at(l, i, v):\n    '''\n    Write a function to insert a value v at index i in the given list l.\n    '''\n    if not l:\n        return []\n    if i == 0:\n        return [v] + l\n    return l[:i] + [v] + l[i:]\n    \ndef list_insert_at_recursive(l, i, v):\n    '''\n    Write a function to insert a value v at index i in the given list l.\n    '''\n    if not l:\n        return []\n    if i == 0:\n        return [v] + l\n    return l[:i] + [v] + list_insert_at_recursive(l[i:], i, v)\n    \ndef list_remove_at(l, i):\n    '''\n    Write a function to remove the ith element from the given list l.\n    '''\n    if not l:\n        return []\n    if i == 0:\n        return l[1:]\n    return l[:i] + l[i+1:]\n    \ndef list_remove_at_recursive(l, i):\n    '''\n    Write a function to remove the ith element from the given list l.\n    '''\n    if not l:\n        return []\n    if i == 0:\n        return l[1:]\n    return l[:i] + list_remove_at_recursive(l[i+1:], i-1)\n    \ndef list_pop(l):\n    '''\n    Write a function to remove the last element from the given list l.\n    '''\n    if not l"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i] == s[0]:\n            if len(s) == 1:\n                return True\n            else:\n                if is_sublist(l[i+1:],s[1:]):\n                    return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # dp_len = len(l)\n    # for i in range(dp_len - len(s) + 1):\n    #     if l[i] == s[0]:\n    #         if l[i:i+len(s)] == s:\n    #             return True\n    # return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif len(s) > len(l):\n        return False\n    else:\n        sub_list = []\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Edge case:\n    if len(s) > len(l):\n        return False\n    \n    s_copy = s[:]\n    while len(s_copy)!= 0:\n        if l.count(s_copy[0])!= s.count(s_copy[0]):\n            return False\n        s_copy.pop(0)\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return False\n    if s == []:\n        return True\n    if len(s) > len(l):\n        return False\n    return is_sublist(l[1:], s) or is_sublist(l[1:], s[1:])\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    print(\"l:\", l)\n    print(\"s:\", s)\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if s[i]!= l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l_len = len(l)\n    s_len = len(s)\n    if l_len < s_len:\n        return False\n    for i in range(l_len-s_len+1):\n        for j in range(s_len):\n            if l[i+j]!= s[j]:\n                break\n            if j == s_len-1:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i] == s[0]:\n            flag = 1\n            for j in range(1, len(s)):\n                if l[i + j]!= s[j]:\n                    flag = 0\n                    break\n            if flag == 1:\n                return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    size_list = [len(i) for i in Input]\n    return size_list.count(size_list[0]) == len(size_list)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input=Input\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if(len(Input[i])==len(Input[j])):\n                print(\"Yes\")\n            else:\n                print(\"No\")\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = list(Input)\n    length = len(Input[0])\n    flag = True\n    for i in range(len(Input)-1):\n        if len(Input[i])!= length:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = [0]\n    for i in Input:\n        if len(i)!= len(Output[0]):\n            Output = [1]\n            break\n        else:\n            Output = [0]\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = True\n    for i in range(0, len(Input) - 1):\n        for j in range(i + 1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                Output = False\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)==len(set(len(i) for i in Input)):\n        return \"All the tuples are of equal length.\"\n    else:\n        return \"Not all the tuples are of equal length.\"\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input_List = Input.split(',')\n    Input_List = [x.strip() for x in Input_List]\n    Temp = []\n    for x in Input_List:\n        Temp.append(tuple(x.split()))\n    for x in Temp:\n        if len(x)!= len(Temp[0]):\n            return False\n    return True\n    # return False if len(set([len(x) for x in Temp])) > 1 else True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if(len(set(map(len,Input)))!=1):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i) == len(Input[0]):\n            print(True)\n        else:\n            print(False)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap/shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i+gap < len(nums):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n            i += 1\n    return nums\n    \ndef bubble_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # start by assuming it's sorted\n    sorted = True\n    for i in range(len(nums)-1):\n        # looking at each item except the last\n        if nums[i] > nums[i+1]:\n            # if the next item is larger, it's not sorted\n            sorted = False\n            # swap them\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n    return nums\n    \ndef binary_search(items, elem):\n    '''\n    Write a function to search for an item in a list.\n    '''\n    # Start with the whole list\n    low = 0\n    high = len(items)-1\n    # search the list\n    while low <= high:\n        # find the middle point\n        mid = (low+high)//2\n        # does it match?\n        if items[mid] == elem:\n            return True\n        # otherwise decide whether to search the first half or the second\n        elif items[mid] < elem:\n            low = mid+1\n        else:\n            high = mid-1\n    # it's not in the list\n    return False\n    \ndef binary_search_recursive(items, elem):\n    '''\n    Write a function to search for an item in a list.\n    '''\n    # Start with the whole list\n    low = 0\n    high = len(items)-1\n    # search the list\n    return _binary_search_recursive(items, elem, low, high)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(a, b):\n        temp = nums[a]\n        nums[a] = nums[b]\n        nums[b] = temp\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    gap = length\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    len_nums = len(nums)\n    gap = len_nums\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    def pick_next_swap(nums, i):\n        if i+1 >= len(nums):\n            return False\n        elif nums[i+1] < nums[i]:\n            return True\n        return False\n    def find_next_swap(nums, i):\n        for j in range(i, len(nums)):\n            if pick_next_swap(nums, j):\n                return j\n        return False\n    def do_swap(nums, i, j):\n        swap(nums, i, j)\n        if pick_next_swap(nums, i):\n            return find_next_swap(nums, i)\n        return False\n    def comb_sort(nums):\n        '''\n        My implementation of the comb sort.\n        '''\n        def has_next(nums, i):\n            for j in range(i, len(nums)):\n                if nums[i] > nums[j]:\n                    return True\n            return False\n        def pick_next(nums, i):\n            next_swap = False\n            for j in range(i, len(nums)):\n                if nums[i] > nums[j]:\n                    next_swap = j\n                    break\n            if next_swap:\n                return next_swap\n            return False\n        def swap(nums, i, j):\n            nums[i], nums[j] = nums[j], nums[i]\n        def get_shift(nums, i):\n            shift = 1\n            while shift <= len(nums) - i:\n                shift *= 3\n            return shift\n        def do_comb(nums, i, shift):\n            if shift == 1:\n                return False\n            for j in range(i, len(nums)):\n                if nums[i] > nums[j]:\n                    swap(nums, i, j)\n                    if has_next(nums, j):\n                        return do_comb(nums, j, shift/3)\n                    elif j + shift < len(nums):\n                        return do_comb(nums, j + shift, shift/3)\n                    else:\n                        return False\n            return False\n        def do_swaps(nums):\n            i = 0\n            while True:\n                if i >= len(nums):\n                    break\n                if not has_next(nums, i):\n                    break\n                do_comb(nums, i, get_shift(nums, i))\n                i += 1\n        do_swaps(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swaps = True\n    while gap > 1 or swaps:\n        gap = max(1, int(gap / 1.25)) # minimum gap is 1\n        swaps = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                swaps = True\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    flag=0\n    for i in range(0,n//2):\n        for j in range(i+1,n//2):\n            if (n-i*i-j*j)==0:\n                flag=1\n                break\n        if flag==1:\n            break\n    if flag==1:\n        print(str(n)+\" can be represented as the difference of two squares.\")\n    else:\n        print(str(n)+\" cannot be represented as the difference of two squares.\")\n    return flag\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        for j in range(i,n):\n            if(i*i + j*j == n):\n                print(\"Difference of squares of \" + str(i) + \" and \" + str(j) + \" is \" + str(i*j))\n                return 1\n    print(\"No such pair exists\")\n    return 0\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while (i * i <= n): \n        if ((i * i) + (i * i)) == n: \n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i**2 - j**2 == n:\n                print(i,\"is the first square and\",j,\"is the second square\")\n                return True\n    print(n,\"is not represented by a pair of squares.\")\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n%2 == 0 and n >= 0:\n        if (math.sqrt(n) % 1) == 0:\n            return 1\n        else:\n            return 0\n    elif n%2!= 0 and n >= 0:\n        if (math.sqrt(n) % 1) == 0:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    i = 1\n    while (math.pow(i, 2) < abs(n)):\n        i += 1\n    if (math.pow(i, 2) == abs(n)):\n        return \"Yes, it can be represented as the difference of two squares.\"\n    else:\n        return \"No, it cannot be represented as the difference of two squares.\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    root = n ** 0.5\n    if int(root + 0.5) ** 2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    for i in range(n):\n        for j in range(n):\n            if ((i*i + j*j) == n):\n                print(i,j)\n                break\n    "
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        if (i*i + i) == n:\n            print(\"The number is a Perfect Square\")\n            break\n    else:\n        print(\"Not a Perfect Square\")\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sq = [] \n    i = 1\n    while (i * i) < n: \n        sq.append(i * i) \n        i += 1\n    sq.append(n)\n    sq.sort()\n    i = 0\n    while i < len(sq) - 1:\n        j = i + 1\n        while j < len(sq):\n            k = sq[j] - sq[i]\n            if k == n:\n                return True\n            j += 1\n        i += 1\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # determine number of unique colors\n    unique_colors = set(colors)\n    n = len(unique_colors)\n    # determine the number of patterns\n    n_patterns = len(patterns)\n    \n    # if number of patterns is different than number of unique colors, return false\n    if n_patterns!= n:\n        return False\n    \n    # if number of patterns is equal to number of unique colors, iterate through all patterns\n    # if the current pattern in the patterns is found in the unique_colors set,\n    # continue to the next pattern and return true\n    # if the pattern is not found in the set, then return false\n    for pattern in patterns:\n        if pattern not in unique_colors:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for p in patterns:\n        if p not in colors:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for index, color in enumerate(colors):\n        if index == 0:\n            if color!= patterns[index]:\n                return False\n            continue\n        if color == patterns[index]:\n            continue\n        else:\n            if color!= patterns[index - 1]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    length = len(colors)\n    if length!= len(patterns):\n        return False\n    for i in range(length):\n        if colors[i] not in patterns[i]:\n            return False\n    return True\n    \n    \ndef count_patterns(colors, patterns, n):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return len(colors)\n    else:\n        count = 0\n        for color in colors:\n            if is_samepatterns(color, patterns):\n                count += 1\n    return count\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] not in colors:\n            return False\n        colors.remove(patterns[i])\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    print('colors', colors, 'patterns', patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_count = {}\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for col in colors:\n        if not colors[col] == patterns[col]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def find_index(color, patterns):\n        for i,s in enumerate(patterns):\n            if color == s:\n                return i\n        return -1\n    # print(find_index('blue', patterns))\n    result = []\n    for color in colors:\n        result.append(find_index(color, patterns))\n    return result == [0,1,2,3,4,5,6]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] in patterns[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(x, y) for x in test_list for y in test_list if x % K == 0 and y % K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = set()\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if test_list[i][j] % K == 0:\n                tuples.add(tuple([test_list[i][j], i, j]))\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in test_list:\n        for j in i:\n            if j%K!= 0:\n                break\n        else:\n            print(i)\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return_list = []\n    for tup in test_list:\n        if all(tup[i] % K == 0 for i in range(len(tup))):\n            return_list.append(tup)\n    return return_list\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    return [t for t in test_list if sum([n for n in t]) % K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # using list comprehension\n    return list(filter(lambda tup: all([i % K == 0 for i in tup]), test_list))\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # return test_list\n    result = []\n    for i in test_list:\n        if sum([i[j] % K for j in range(len(i))]) == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(t[0], t[1]) for t in test_list if all(map(lambda x: (x%K) == 0, t))]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    found_tuples = []\n    for t in test_list:\n        if sum(t) % K == 0:\n            found_tuples.append(t)\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    l=[]\n    for i in range(len(test_list)):\n        l.append([test_list[i][0],test_list[i][1],test_list[i][0]%K,test_list[i][1]%K])\n    return l\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\nprint(is_Diff(25))\nprint(is_Diff(43))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\nn=int(input('Enter the number:'))\nprint(is_Diff(n))"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\nprint(is_Diff(27))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n    \ndef print_range(n):\n    '''\n    Write a Python program to print a specified list after removing even numbers from it.\n    Sample List : ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']\n    Expected Output : ['Black', 'Pink', 'Yellow']\n    '''\n    l1=['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']\n    l2=[]\n    for i in l1:\n        if is_even(i):\n            l2.append(i)\n    print(l2)\n    \ndef is_even(n):\n    '''\n    Write a Python program to print all even numbers from a given numbers list in the same order and stop the printing if any numbers that come after 237 in the sequence.\n    Sample numbers list :\n    numbers = [    \n    386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345, \n    399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217, \n    815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717, \n    958,743, 527]\n    '''\n    numbers = [    \n    386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345, \n    399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217, \n    815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717, \n    958,743, 527]\n    for i in range(len(numbers)):\n        if numbers[i]==237:\n            print(numbers[i])\n            break\n        elif is_even(numbers[i]):\n            print(numbers[i])\n        \ndef check_duplicate(l1,l2):\n    '''\n    Write a Python program to check a list is empty or not.\n    '''\n    if l1==[] or l2==[]:\n        print('List is empty')\n    else:\n        print('List is not empty')\n        \ndef rotate_list(l1,n):\n    '''\n    Write a Python program to rotate a list by a given amount.\n    '''\n    return l1[-n:]+l1[0:-n]\n    \ndef remove_duplicate(l1):\n    '''\n    Write a Python program to remove duplicates from a list.\n    '''\n    return list(dict.fromkeys(l1))\n    \ndef convert_strings(l1):\n    '''\n    Write a Python program to change the position of every n-th value with the (n+1)th in a list. \n    Sample list: [0,1,2,3,4,5]\n    Expected Output: [1, 0, 3, 2, 5, 4]\n    '''\n    return [l1[i+1] for i,j in enumerate(l1) if i%2==0]\n    \ndef get_records(l1):\n    '''\n    Write a Python program to get a list, sorted in increasing order by the last element in each tuple from a given list of non-empty tuples. \n    Sample List : [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]\n    Expected Result : [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]\n    '''\n    return sorted(l1,key=lambda x:x[1])\n    \ndef print_lists(l1,l2):\n    '''\n    Write a Python program to print a specified list after removing the 0th, 4th and 5th elements. \n    Sample List : ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']\n    Expected Output : ['Green', 'White', 'Black']\n    '''\n    l1=['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']\n    l2=[]\n    l2.append(l1[1])\n    l2.append(l1[3])\n    l2.append(l1[5])\n    print(l2)\n    \ndef count_occurences(l1):\n    '''\n    Write a Python function that takes a list of words and returns the length of the longest one.\n    Sample List : ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']\n    Expected Output : 6 (the longest word is 'Yellow')\n    '''\n    return max(len(i) for i in l1)\n    \ndef slice_list(l1):\n    '''\n    Write a Python program to get the difference between the two lists.\n    Sample lists: ['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']\n    Expected Output: ['Black', 'Pink', 'Yellow']\n    '''\n    return [i for i in l1[2:] if i not in l1[:2]]\n    \ndef sum_list(l1):\n    '''\n    Write a Python program to compute the product of elements in a list.\n    '''\n    return sum(l1)\n    \ndef swap_list(l1,l2):\n    '''\n    Write a Python program to change the position of every n-th value with the (n+1)th in a list. \n    Sample List: [0,1,2,3,4,5]\n    Expected Output: [1, 0, 3, 2, 5, 4]\n    '''\n    l1[0],l1[1]=l1[1],l1[0]\n    l1[2],l1[3]=l1[3],l1[2]\n    l1[4],l1[5]=l1[5],l1[4]\n    return l1\n    \ndef find_common(l1,l2):\n    '''\n    Write a Python program to print a list of words that are present in both of the lists.\n    Sample list 1: [\"Python\", \"C++\", \"Java\", \"Perl\", \"C\"]\n    Sample list 2: [\"Python\", \"Ruby\", \"Perl\", \"C++\", \"Java\"]\n    Expected Output: ['Python', 'C++', 'Perl']\n    '''\n    return [i for i in l1 if i in l2]\n    \ndef remove_item(l1,l2):\n    '''\n    Write a Python program to remove duplicates from a list.\n    '''\n    return [i for i in l1 if i not in l2]\n    \ndef flatten_list(l1):\n    '''\n    Write a Python program to flatten a given list. \n    Original list: [['Red'], ['Black'], ['Green'], ['White'], ['Black']]\n    Expected Result: ['Red', 'Black', 'Green', 'White', 'Black']\n    '''\n    return [j for i in l1 for j in i]\n    \ndef check_list(l1):\n    '''\n    Write a Python program to check whether a list contains a sublist.\n    '''\n    return 1 if set(l1) in l1 else 0\n    \ndef remove_all_occurence(l1,l2):\n    '''\n    Write a Python program to remove all duplicates from a list.\n    Sample list: [2, 4, 10, 20, 5, 2, 20, 4]\n    New List: [2, 4, 10, 20, 5]\n    '''\n    return [i for i in l1 if l1.count(i)==1]\n    \ndef capitalize_all(l1):\n    '''\n    Write a Python program to capitalize first and last letters of each word of a given string.\n    Sample string: 'i love Python and Machine Learning'\n    Expected Output: 'I Love Python and Machine Learning'\n    '''\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \nprint(is_Diff(22))\nprint(is_Diff(25))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    import math\n    n = abs(int(n))\n    return (n%2 == 0 and n%3 == 0 and n%5 == 0 and n%7 == 0 and n%11 == 0) \n    '''\n    if (n%2==0):\n        if(n%3==0):\n            if(n%5==0):\n                if(n%7==0):\n                    if(n%11==0):\n                        print(n, \"is divisible by 11\")\n                    else:\n                        print(n, \"is not divisible by 11\")\n                else:\n                    print(n, \"is not divisible by 11\")\n            else:\n                print(n, \"is not divisible by 11\")\n        else:\n            print(n, \"is not divisible by 11\")\n    else:\n        print(n, \"is not divisible by 11\")\n    '''\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef is_multiple(n):\n    '''\n    Write a Python program to print out a sequence of numbers, starting with n, then multiplying by 2 each time.\n    '''\n    for i in range(n):\n        print(i)\n        i += 1\n        n *= 2\ndef fib(n):\n    '''\n    Write a Python program to print out a sequence of numbers, starting with n, then adding 2 to the next number in the sequence.\n    '''\n    a, b = 0, 1\n    while a < n:\n        print(a, end ='')\n        a, b = b, a + b\ndef fib_recursive(n):\n    '''\n    Write a Python program to print out a sequence of numbers, starting with n, then adding 2 to the next number in the sequence.\n    '''\n    def fib_recursive(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib_recursive(n - 1) + fib_recursive(n - 2)\ndef fib_list(n):\n    '''\n    Write a Python program to print out a list of numbers, starting with n, then adding 2 to the next number in the sequence.\n    '''\n    a, b = 0, 1\n    while a < n:\n        print(a, end ='')\n        a, b = b, a + b\ndef fib_list_recursive(n):\n    '''\n    Write a Python program to print out a list of numbers, starting with n, then adding 2 to the next number in the sequence.\n    '''\n    def fib_recursive(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib_recursive(n - 1) + fib_recursive(n - 2)\n    fib_list_recursive(n)\ndef gcd(a, b):\n    '''\n    Write a Python program to find the greatest common divisor (GCD) of two numbers.\n    '''\n    while b!= 0:\n        (a, b) = (b, a % b)\n    return a\ndef fact(n):\n    '''\n    Write a Python program to calculate factorial of a number (a non-negative integer). The function accepts the number as an argument.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * fact(n - 1)\ndef reverse(s):\n    '''\n    Write a Python program to reverse a string.\n    '''\n    if len(s) == 0:\n        return s\n    else:\n        return reverse(s[1:]) + s[0]\ndef is_palindrome(s):\n    '''\n    Write a Python program to check whether a string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef is_anagram(s1, s2):\n    '''\n    Write a Python program to check whether two given strings are anagrams or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    if s1 == s2:\n        return True\n    else:\n        return False\ndef is_anagram_dict(s1, s2):\n    '''\n    Write a Python program to check whether two given strings are anagrams or not.\n    '''\n    d1 = dict()\n    d2 = dict()\n    for c in s1:\n        if c in d1:\n            d1[c] += 1\n        else:\n            d1[c] = 1\n    for c in s2:\n        if c in d2:\n            d2[c] += 1\n        else:\n            d2[c] = 1\n    if d1 == d2:\n        return True\n    else:\n        return False\ndef is_anagram_dict(s1, s2):\n    '''\n    Write a Python program to check whether two given strings are anagrams or not.\n    '''\n    d1 = dict()\n    d2 = dict()\n    for c in s1:\n        if c in d1:\n            d1[c] += 1\n        else:\n            d1[c] = 1\n    for c in s2:\n        if c in d2:\n            d2[c] += 1\n        else:\n            d2[c] = 1\n    if d1 == d2:\n        return True\n    else:\n        return False\ndef reverse_dict(d):\n    '''\n    Write a Python program to reverse a given dictionary.\n    '''\n    return {v: k for k, v in d.items()}\ndef is_pangram(s):\n    '''\n    Write a Python program to check whether a string is a pangram or not.\n    '''\n    s = set(s.lower())\n    if len(s) >= 26:\n        return True\n    else:\n        return False\ndef is_pangram_dict(s):\n    '''\n    Write a Python program to check whether a string is a pangram or not.\n    '''\n    s = set(s.lower())\n    if len(s) >= 26:\n        return True\n    else:\n        return False\ndef anagram(s1, s2):\n    '''\n    Write a Python program to find anagrams of a string.\n    '''\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    if len(s1)!= len(s2):\n        return False\n    for i in range(0, len(s1)):\n        if s1[i]!= s2[i]:\n            return False\n    return True\ndef palindrome_permutation(s):\n    '''\n    Write a Python program to check whether a given string is a permutation of a palindrome or not.\n    '''\n    s = s.lower()\n    s_dict = dict()\n    for c in s:\n        if c in s_dict:\n            s_dict[c] += 1\n        else:\n            s_dict[c] = 1\n    print(s_dict)\n    odd = 0\n    for c in s_dict:\n        if s_dict[c] % 2!= 0:\n            odd += 1\n    if len(s) % 2 == 1 and odd == 1:\n        return True\n    elif len(s) % 2 == 0 and odd == 0:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a Python program to check whether a given number is prime or not.\n    '''\n    if n == 2:\n        return True\n    elif n % 2 == 0 or n == 1:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n    return True\ndef is_prime_recursive(n):\n    '''\n    Write a Python program to check whether a given number is prime or not.\n    '''\n    if n == 2:\n        return True\n    elif n % 2 == 0 or n == 1:\n        return False\n    else:\n        return is_prime_recursive(n - 1)\ndef find_prime_factors(n):\n    '''\n    Write a Python program to find prime factors of a given number.\n    '''\n    prime_factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime(i):\n            while n % i == 0:\n                prime_factors.append(i)\n                n //= i\n            if n == 1:\n                break\n    if n > 1:\n        prime_factors.append(n)\n    return prime_factors\ndef find_prime_factors_recursive(n):\n    '''\n    Write a Python program to find prime factors of a given number.\n    '''\n    prime_factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n    "
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    len_s = len(s)\n    if len_s % 2 == 0:\n        return print(False)\n    else:\n        return print(True)\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n    \n    \n    "
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2 == 0:\n        return \"The length of the word is even\"\n    else:\n        return \"The length of the word is odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    n = len(s) \n    if (n % 2) == 0: \n        print(\"No\") \n    else: \n        print(\"Yes\") \n        \ndef string_check(s):\n    '''\n    Given a string as input. The task is to check whether the string is a palindrome or not.\n    '''\n    l = list(s)\n    l1 = []\n    for i in l:\n        l1.append(i)\n    l1.reverse()\n    s = ''.join(l1)\n    if s == s[::-1]:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if(len(s)%2==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n*tetrahedral_number(n-1)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) / 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum([1 for i in range(1, n+1) if n%i == 0])\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return n * (n - 1) // 2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n*(n+1)*(n+2)/6)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n * (n+1) * (n+2))/6)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(r)\n    return (4.0/3.0)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol_sph = (4.0/3.0) * math.pi * (r ** 3)\n    return vol_sph\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #return 4/3 * math.pi * r ** 3\n    #return 4 / 3 * 3.14 * r ** 3\n    return 4 / 3 * math.pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*(r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol_sphere = (4/3)*math.pi*(r**3)\n    return vol_sphere\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for char in strr:\n        sum=(sum+ord(char))%26\n    return sum\n    \nif __name__ == \"__main__\":\n    strr=input(\"enter the string\")\n    print(get_Char(strr))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)\n    return chr(sum%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)\n    sum=sum%26\n    return chr(sum)\nprint(get_Char(\" \"))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    a=0\n    for i in range(len(strr)):\n        a+=ord(strr[i])\n    return(chr(a%26))\n    \n    "
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    new = 0\n    for i in strr:\n        new = new + ord(i)%26\n    return new\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    new_strr = ''\n    for i in strr:\n        new_strr += str(ord(i)%26) +''\n    return new_strr\n    # return new_strr\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    final_string = \"\"\n    for chr in strr:\n        final_string += str(ord(chr) % 26)\n    return final_string\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in strr:\n        result = result + ord(i)\n    return result % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = ''  \n    for i in strr:  \n        s += chr((ord(i)%32) + 97)  \n    return s  \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 13\n    else:\n        # n = n - 5\n        return sequence(n - 4) + sequence(n - 3) + sequence(n - 2) + sequence(n - 1)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Your code here\n    return 0\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 2: return 1\n    else:\n        x = sequence(n-1)\n        return (x + 1) / 2\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 4\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return [0]\n    else:\n        return sequence(n-1) + [sum(sequence(n-2))]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    yield 0\n    yield 1\n    seen = {0: 1, 1: 2}\n    a, b = 0, 1\n    for i in range(2, n):\n        c = a + b\n        yield c\n        a, b = b, c\n        seen[c] = i\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if isinstance(r, float) or isinstance(r, int):\n        return 4*math.pi*(r**2)\n    else:\n        print(\"Error\")\n        return None\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = (4/3) * math.pi * (r**3)\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = round(4*math.pi*r**2,2)\n    return surfacearea\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r <= 0:\n        raise Exception('Error! No real number accepted!')\n    return 4*math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi*r*(r+h)\ndef surfacearea_prism(r,h):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    return 2*math.pi*r*h\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*l**2\ndef surfacearea_rectangle(b,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 2*b*h\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return 1/2*(a+b+c)*math.sqrt(a**2+b**2+c**2-2*a*b-2*b*c-2*a*c)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*r**2*h\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return l**3\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**2*h\ndef volume_prism(r,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return 1/3*math.pi*r**2*h\ndef volume_rectangle(b,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return 1/2*b*h\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return 1/3*a*b*c\ndef volume_cone_area(r,h):\n    '''\n    Write a function to find the volume of a cone with area function.\n    '''\n    return 1/3*math.pi*r**2*h\ndef volume_cube_area(l):\n    '''\n    Write a function to find the volume of a cube with area function.\n    '''\n    return l**3\ndef volume_sphere_area(r):\n    '''\n    Write a function to find the volume of a sphere with area function.\n    '''\n    return (4/3)*math.pi*r**3\ndef volume_cylinder_area(r,h):\n    '''\n    Write a function to find the volume of a cylinder with area function.\n    '''\n    return math.pi*r**2*h\ndef volume_prism_area(r,h):\n    '''\n    Write a function to find the volume of a prism with area function.\n    '''\n    return 1/3*math.pi*r**2*h\ndef volume_rectangle_area(b,h):\n    '''\n    Write a function to find the volume of a rectangle with area function.\n    '''\n    return 1/2*b*h\ndef volume_triangle_area(a,b,c):\n    '''\n    Write a function to find the volume of a triangle with area function.\n    '''\n    return 1/3*a*b*c\ndef volume_cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone with volume function.\n    '''\n    return 1/3*math.pi*r**2*h\ndef volume_cube_volume(l):\n    '''\n    Write a function to find the volume of a cube with volume function.\n    '''\n    return l**3\ndef volume_sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere with volume function.\n    '''\n    return (4/3)*math.pi*r**3\ndef volume_cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder with volume function.\n    '''\n    return math.pi*r**2*h\ndef volume_prism_volume(r,h):\n    '''\n    Write a function to find the volume of a prism with volume function.\n    '''\n    return 1/3*math.pi*r**2*h\ndef volume_rectangle_volume(b,h):\n    '''\n    Write a function to find the volume of a rectangle with volume function.\n    '''\n    return 1/2*b*h\ndef volume_triangle_volume(a,b,c):\n    '''\n    Write a function to find the volume of a triangle with volume function.\n    '''\n    return 1/3*a*b*c\ndef volume_cone_surfacearea(r,h):\n    '''\n    Write a function to find the volume of a cone with surface area function.\n    '''\n    return 1/3*math.pi*r**2*h\ndef volume_cube_surfacearea(l):\n    '''\n    Write a function to find the volume of a cube with surface area function.\n    '''\n    return l**3\ndef volume_sphere_surfacearea(r):\n    '''\n    Write a function to find the volume of a sphere with surface area function.\n    '''\n    return (4/3)*math.pi*r**3\ndef volume_cylinder_surfacearea(r,h):\n    '''\n    Write a function to find the volume of a cylinder with surface area function.\n    '''\n    return math.pi*r**2*h\ndef volume_prism_surfacearea(r,h):\n    '''\n    Write a function to find the volume of a prism with surface area function.\n    '''\n    return 1/3*math.pi*r**2*h\ndef volume_rectangle_surfacearea(b,h):\n    '''\n    Write a function to find the volume of a rectangle with surface area function.\n    '''\n    return 1/2*b*h\ndef volume_triangle_surfacearea(a,b,c):\n    '''\n    Write a function to find the volume of a triangle with surface area function.\n    '''\n    return 1/3*a*b*c\ndef volume_cone_surfacearea_surfacearea(r,h):\n    '''\n    Write a function to find the volume of a cone with surface area function.\n    '''\n    return math.pi*r**2*h\ndef volume_cube_surfacearea_surfacearea(l):\n    '''\n    Write a function to find the volume of a cube with surface area function.\n    '''\n    return l**3\ndef volume_sphere_surfacearea_surfacearea(r):\n    '''\n    Write a function to find the volume of a sphere with surface area function.\n    '''\n    return (4/3)*math.pi*r**3\ndef volume_cylinder_surfacearea_surfacearea(r,h):\n    '''\n    Write a function to find the volume of a cylinder with surface area function.\n    '''\n    return math.pi*r**2*h\ndef volume_prism_surfacearea_surfacearea(r,h):\n    '''\n    Write a function to find the volume of a prism with surface area function.\n    '''\n    return 1/3*math.pi*r**2*h\ndef volume_rectangle_surfacearea_surfacearea(b,h):\n    '''\n    Write a function to find the volume of a rectangle with surface area function.\n    '''\n    return 1/2*b*h\ndef volume_triangle_surfacearea_surfacearea(a,b,c):\n    '''\n    Write a function t"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s_area = 4 * math.pi * (r ** 2)\n    return s_area\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    result = 4*math.pi*r**2\n    return result\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sas=4*math.pi*r**2\n    return sas\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #surface_area = (4 * math.pi * r ** 2)\n    return (4 * math.pi * r ** 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 1\n    return (1 + 2 * n * (n - 1) + 2 * (n ** 2 - n) + 2 * n * (n - 1)) // 6\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return None\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    x = 1\n    i = 0\n    while True:\n        # x = x + (2 * i + 1)**2\n        x += (2 * i + 1)**2\n        if x == n:\n            return i + 1\n        if x > n:\n            return -1\n        i += 1\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 0\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return 0\n    return hexagonal_number(n) - hexagonal_number(n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if not isinstance(n, int) or n < 0:\n        return None\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return \"The input must be a positive integer\"\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    k = int(np.ceil(np.sqrt(8*n+1)/2)-1)\n    if k%2 == 1:\n        return n * ((3*k-1)*(k+1)//2)\n    return n * ((3*k+1)*(k+1)//2)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    k = 1\n    h = 1\n    while h < n:\n        h += k * 5\n        k += 1\n    return h - k * 4\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return int((1 + (2 * n) ** 0.5) / 2 * n * (3 * n - 1))\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1 = dict1.copy()\n    dict2 = dict2.copy()\n    dict3 = dict3.copy()\n    dict3.update(dict1)\n    dict3.update(dict2)\n    return dict3\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # dict1.update(dict2)\n    # dict1.update(dict3)\n    # return dict1\n    return dict1.update(dict2)\n    return dict1.update(dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    for key,value in dict2.items():\n        if key in new_dict:\n            if not isinstance(value,int):\n                new_dict[key] = [new_dict[key], value]\n            else:\n                new_dict[key] += value\n        else:\n            new_dict[key] = value\n    for key,value in dict3.items():\n        if key in new_dict:\n            if not isinstance(value,int):\n                new_dict[key] = [new_dict[key], value]\n            else:\n                new_dict[key] += value\n        else:\n            new_dict[key] = value\n    return new_dict\ndef merge_dictionaries(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    new_dict = dict1.copy()\n    for key,value in dict2.items():\n        if key in new_dict:\n            new_dict[key] += value\n        else:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # return {**dict1,**dict2,**dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1,**dict2,**dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # your code here\n    #dictionary = dict(dict1,**dict2,**dict3)\n    dictionary = dict1.copy()\n    dictionary.update(dict2)\n    dictionary.update(dict3)\n    return dictionary\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1,**dict2,**dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = {}\n    for item in list1:\n        if item in my_dict:\n            my_dict[item] += 1\n        else:\n            my_dict[item] = 1\n    return my_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for element in list1:\n        if element in dict1:\n            dict1[element] += 1\n        else:\n            dict1[element] = 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict = collections.Counter(list1)\n    return dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = collections.defaultdict(int)\n    for element in list1:\n        dict1[element] += 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # method 1 - dictionary comprehension\n    # return {item: list1.count(item) for item in list1}\n    # method 2 - dictionary comprehension\n    # dictionary = dict((item, list1.count(item)) for item in list1)\n    # return dictionary\n    # method 3 - dictionary comprehension\n    # return {item: list1.count(item) for item in list1}\n    # method 4 - dictionary comprehension\n    # return {item: list1.count(item) for item in list1}.keys()\n    # method 5 - dict comprehension\n    # return {k: v for k, v in list1.items()}.keys()\n    # method 6 - dict comprehension\n    return {item: list1.count(item) for item in list1}.keys()\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = dict()\n    for ele in list1:\n        if ele in freq:\n            freq[ele] += 1\n        else:\n            freq[ele] = 1\n    print(freq)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(list1)\n    return count\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    distance_from_n = 0\n    while n > 0:\n        n = n - 1\n        distance_from_n = distance_from_n + 1\n    return N - (distance_from_n - 1)\n    \n    \ndef sieve_of_eratosthenes(N):\n    '''\n    Return the list of prime numbers up to and including n.\n    '''\n    prime_list = []\n    max_num = N\n    is_prime = [1] * (max_num + 1)\n    is_prime[0] = 0\n    is_prime[1] = 0\n    for num in range(2, max_num + 1):\n        if is_prime[num] == 1:\n            prime_list.append(num)\n            j = 2\n            while num * j <= max_num:\n                is_prime[num * j] = 0\n                j = j + 1\n    return prime_list\n    \n    \ndef highest_product_of_three(list_of_ints):\n    '''\n    Given a list of integers, find the highest product of three integers.\n    '''\n    if len(list_of_ints) < 3:\n        return None\n    else:\n        list_of_ints.sort()\n        return list_of_ints[len(list_of_ints) - 1] * list_of_ints[len(list_of_ints) - 2] * list_of_ints[len(list_of_ints) - 3]\n    \n    \ndef distinct_integers_sum_to_target(target_number):\n    '''\n    Given a list of distinct integers and a target value,\n    find a list of integers that add up to the target value.\n    '''\n    if target_number < 0:\n        return None\n    else:\n        for n in range(0, target_number):\n            if target_number - n in list_of_ints:\n                return [target_number - n, n]\n    \n    \ndef time_series(list_of_integers):\n    '''\n    Given a list of integers, find the sum of the integers from 1 to the largest integer in the list.\n    '''\n    # return None\n    if len(list_of_integers) < 1:\n        return None\n    else:\n        return sum(list_of_integers)\n    \n    \ndef concatenate_strings(string1, string2):\n    '''\n    Given 2 strings, concatenate them together in the following order:\n    string1, string2, string1, string2,...\n    '''\n    return string1 + string2 + string1 + string2\n    \n    \ndef find_missing_number(list_of_integers):\n    '''\n    Given a list of integers, find the one that is missing from the list.\n    '''\n    return None\n    \n    \ndef find_missing_number_2(list_of_integers):\n    '''\n    Given a list of integers, find the one that is missing from the list.\n    '''\n    # return None\n    if len(list_of_integers) < 1:\n        return None\n    else:\n        return sum(list_of_integers) - sum(range(1, len(list_of_integers) + 1))\n    \n    \ndef find_missing_number_3(list_of_integers):\n    '''\n    Given a list of integers, find the one that is missing from the list.\n    '''\n    # return None\n    if len(list_of_integers) < 1:\n        return None\n    else:\n        list_of_integers.sort()\n        j = list_of_integers[0]\n        for i in range(1, len(list_of_integers)):\n            if list_of_integers[i]!= j:\n                return j\n            else:\n                j = j + 1\n    \n    \ndef find_missing_number_4(list_of_integers):\n    '''\n    Given a list of integers, find the one that is missing from the list.\n    '''\n    # return None\n    if len(list_of_integers) < 1:\n        return None\n    else:\n        list_of_integers.sort()\n        j = 1\n        for i in range(0, len(list_of_integers)):\n            if list_of_integers[i]!= j:\n                return j\n            else:\n                j = j + 1\n    \n    \ndef find_missing_number_5(list_of_integers):\n    '''\n    Given a list of integers, find the one that is missing from the list.\n    '''\n    # return None\n    if len(list_of_integers) < 1:\n        return None\n    else:\n        list_of_integers.sort()\n        i = 0\n        while i < len(list_of_integers):\n            if list_of_integers[i] == i:\n                i = i + 1\n            else:\n                return i\n    \n    \ndef find_missing_number_6(list_of_integers):\n    '''\n    Given a list of integers, find the one that is missing from the list.\n    '''\n    # return None\n    if len(list_of_integers) < 1:\n        return None\n    else:\n        return (len(list_of_integers) * (len(list_of_integers) + 1)) / 2 - sum(list_of_integers)\n    \n    \ndef find_missing_number_7(list_of_integers):\n    '''\n    Given a list of integers, find the one that is missing from the list.\n    '''\n    # return None\n    if len(list_of_integers) < 1:\n        return None\n    else:\n        list_of_integers.sort()\n        j = list_of_integers[0]\n        for i in range(1, len(list_of_integers)):\n            if list_of_integers[i] - list_of_integers[i - 1]!= 1:\n                return j\n            else:\n                j = j + 1\n    \n    \ndef find_missing_number_8(list_of_integers):\n    '''\n    Given a list of integers, find the one that is missing from the list.\n    '''\n    # return None\n    if len(list_of_integers) < 1:\n        return None\n    else:\n        list_of_integers.sort()\n        j = 0\n        for i in range(0, len(list_of_integers)):\n            if list_of_integers[i] - j!= 1:\n                return j\n            else:\n                j = j + 1\n    \n    \ndef find_missing_number_9(list_of_integers):\n    '''\n    Given a list of integers, find the one that is missing from the list.\n    '''\n    # return None\n    if len(list_of_integers) < 1:\n        return None\n    else:\n        list_of_integers.sort()\n        j = list_of_integers[0]\n        for i in range(1, len(list_of_integers)):\n            if list_of_integers[i] - list_of_integers[i - 1]!= 1:\n                return j\n            else:\n                j = j + 1\n    \n    \ndef find_missing_number_10(list_of_integers):\n    '''\n    Given a list of integers, find the one that is missing from the list.\n    '''\n    # return None\n    if len(list_of_integers) < 1:\n        return None\n    else:\n        list_of_integers.sort()\n        j = list_of_integers[0]\n        for i in range(1, len(list_of_integers)):\n            if list_of_integers[i] - list_of_integers[i - 1]!= 1:\n                return j\n            else:\n                j = j + 1\n    \n    \ndef find_missing_number_11(list_of_integers):\n    '''\n    Given a list of integers, find the one that is missing from the list.\n    '''\n    # return None\n    if len(list_of_integers) < 1:\n        return None"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return len(bin(N)) - len(bin(N-1))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #base case\n    if N <= 1:\n        return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # d = {}\n    # for i in range(1, N+1):\n    #     d[i] = i\n    # for i in range(1, N+1):\n    #     if d[i] > 1:\n    #         l = d[i] // 2\n    #         r = d[i] // 2 + 1\n    #         while l > 1:\n    #             if d[l] < r:\n    #                 d[i] = d[l]\n    #                 break\n    #             elif d[l] > r:\n    #                 d[i] = d[r]\n    #                 break\n    #             else:\n    #                 l = d[l] // 2\n    #                 r = d[r] // 2 + 1\n    # return d[N]\n    '''\n    Optimized solution:\n    '''\n    d = {}\n    for i in range(1, N+1):\n        d[i] = i\n    for i in range(1, N+1):\n        l = i // 2\n        if l > 1:\n            if d[l] < d[i]:\n                d[i] = d[l]\n        r = (i + 1) // 2\n        if r < N and d[r] < d[i]:\n            d[i] = d[r]\n    return d[N]\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    low, high = 1, N\n    while low <= high:\n        mid = (low + high) // 2\n        if is_closest(N, mid):\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input())\n    smaller = [num for num in range(n-1, 0, -1) if num < n]\n    return smaller[0]\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N + 1\n    return find_closest(n)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # 1. Implement a binary search\n    # 2. Implement a stack/queue to do it faster\n    # 3. Python already has a built-in solution\n    # 4. Binary search is more natural and we'll learn it soon\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return len([n for n in range(N, -1, -1) if n%2==0])\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #print(n)\n    #if n < 10:\n    #    return 0\n    if N < 10:\n        return N\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for x in list1:\n        list2.append(len(x))\n    return max(list2)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    return max\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for x in list1:\n        if len(x) == max(len(y) for y in list1):\n            list2.append(x)\n    return len(list2[0])\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_len = []\n    for word in list1:\n        word_len.append(len(word))\n    return word_len\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # write your code here\n    max_word_len = max(list1,key=len)\n    max_word_len_len = len(max_word_len)\n    return max_word_len_len\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    dict1 = {}\n    for word in list1:\n        if word in dict1:\n            dict1[word] += 1\n        else:\n            dict1[word] = 1\n    \n    max1 = 0\n    for key,value in dict1.items():\n        if value>max1:\n            max1 = value\n    print(max1)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    #list1 = \"We are the so-called \\\"Vikings\\\" from the north.\"\n    # print(len(list1))\n    # print(max(list1, key = len))\n    # print(min(list1, key = len))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max1=0\n    for word in list1:\n        if len(word)>max1:\n            max1=len(word)\n    return max1\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_lst = sub_str.split()\n    print(sub_str_lst)\n    len_sub_str = len(sub_str_lst)\n    print(len_sub_str)\n    str_lst = str1.split()\n    print(str_lst)\n    lst_l = len(str_lst)\n    print(lst_l)\n    for i in range(lst_l-len_sub_str+1):\n        if str_lst[i] == sub_str_lst[0]:\n            print(str_lst[i:i+len_sub_str])\n            if str_lst[i:i+len_sub_str] == sub_str_lst:\n                print(\"match\")\n                return True\n            else:\n                print(\"not match\")\n                return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if(str1[i:i+len(sub_str)] == sub_str):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word in sub_str:\n            return True\n    return False\n    # return sub_str in str1\n    \ndef main():\n    str1 = ['python', 'panagram', 'rotator']\n    sub_str = 'rotator'\n    print(find_substring(str1, sub_str))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    for i in range(len(str1) - sub_str_len + 1):\n        if str1[i:i+sub_str_len] == sub_str:\n            print('Substring found at index '+ str(i))\n            break\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i: i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count=0\n    if str1 in sub_str:\n        count+=1\n    return count\n    \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count=0\n    if str1 in sub_str:\n        count+=1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    flag = False\n    str_index = []\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            flag = True\n            str_index.append(i)\n    if flag:\n        return str_index\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in range(1, len(s)):\n        if s[i - 1] > s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (is_even(n) or is_odd(n)) and (n-get_smallest_prime_factor(n))%6==0\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    flag = 0\n    if n > 0:\n        rem = n % 10\n        rem_1 = (n % 100) // 10\n        if rem!= rem_1:\n            flag = 1\n    return flag\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    sum1=0\n    sum2=0\n    for i in range(1, n): \n        if(i%2==0): \n            sum1=sum1+i \n        else: \n            sum2=sum2+i \n    if(sum1==sum2): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    i = 0\n    sum1 = 0\n    sum2 = 0\n    while(n>0):\n        rem = n%10\n        n = n//10\n        i += 1\n        sum1 = sum1 + rem\n        sum2 = sum2 + (rem*rem)\n    if(sum1 == sum2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    rev = n % 10 \n    n = n // 10\n    while n > 0: \n        l = n % 10\n        n = n // 10\n        if ((rev % 2 == 0 and l % 2!= 0) or\n            (rev % 2!= 0 and l % 2 == 0)): \n            return False\n        rev = l \n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    s1 = s[::2]\n    s2 = s[1::2]\n    if len(s2) == 1 and s1[0] == s1[-1]:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    total = 1\n    while (n): \n        if (n % 10 == 0): \n            return False\n        else: \n            total *= n % 10\n            n = n // 10\n    return (total!= 0)\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return False\n    prev = n%10\n    curr = n%10\n    while n > 1:\n        n = n//10\n        prev = curr\n        curr = n%10\n    if curr == prev:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n): \n        d = abs(n - 2 * i * i) \n        if d == 0: \n            return False\n        if d == 4: \n            return True\n    return False\nn = int(input())\nif n < 0:\n    print(\"Input number is negative. Please enter a positive number\")\nelif n == 0:\n    print(\"Input number is Zero. Please enter a positive number\")\nelse:\n    if is_undulating(n): \n        print(\"Input number is undulating.\")\n    else: \n        print(\"Input number is not undulating.\")"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # Handle case where b is negative\n    if b < 0:\n        return 1 / power(a, -b)\n    # Handle case where b is 0\n    if b == 0:\n        return 1\n    # Handle case where b is positive\n    if b == 1:\n        return a\n    return a * power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b<0:\n        raise Exception(\"'b' cannot be negative\")\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b%2==0:\n        return power(a*a,b/2)\n    else:\n        return a*power(a*a,b/2)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\ndef gcd(a,b):\n    '''\n    Write a function to calculate the greatest common divisor of two numbers.\n    '''\n    return math.gcd(a,b)\ndef lcm(a,b):\n    '''\n    Write a function to calculate the least common multiple of two numbers.\n    '''\n    return a*b/gcd(a,b)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b == 0):\n        return 1\n    else:\n        return a * power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b % 2 == 0:\n        return power(a,b/2) * power(a,b/2)\n    return a * power(a,b/2) * power(a,b/2)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==1:\n        return a\n    if b%2==0:\n        return power(a,b//2)*power(a,b//2)\n    else:\n        return a*power(a,b//2)*power(a,b//2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b % 2 == 0:\n        return power(a, b // 2) ** 2\n    else:\n        return a * power(a, b // 2) ** 2\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_tuple = min(test_list, key=itemgetter(1))\n    return smallest_tuple[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list = sorted(test_list, key=itemgetter(1))\n    print(test_list[0])\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list, key=itemgetter(1))[1]\n    return [index for index, value in enumerate(test_list) if value[1] == min_value]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return itemgetter(0)(min(test_list,key=itemgetter(1)))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_list = []\n    for index,item in enumerate(test_list):\n        min_list.append((index,item[0],item[1]))\n    min_list = sorted(min_list, key=itemgetter(2))\n    return min_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #return tuple_list[0]\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return itemgetter(0)(min(test_list, key=itemgetter(1))[0])\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length_list = []\n    for item in lst:\n        length_list.append(len(item))\n    return min(length_list)\n    \ndef Count_Words(lst):\n    '''\n    Write a python function to count the number of words in a list of lists.\n    '''\n    words = []\n    for item in lst:\n        words += item\n    words = list(dict.fromkeys(words))\n    return len(words)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst.sort()\n    return lst[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=999999\n    for i in lst:\n        if len(i)<min_length:\n            min_length=len(i)\n    return min_length\n    \n    \ndef Remove_Duplicates(lst):\n    '''\n    Write a python function to remove all duplicates from the list of lists.\n    '''\n    new_lst=[]\n    for i in lst:\n        new_lst.append(list(set(i)))\n    return new_lst\n    \ndef Flatten(lst):\n    '''\n    Write a python function to flatten the list of list to a single list.\n    '''\n    flattened_lst=[]\n    for i in lst:\n        for j in i:\n            flattened_lst.append(j)\n    return flattened_lst\n    \ndef Find_The_Uncommon_Element(lst1,lst2):\n    '''\n    Write a python function to find the uncommon element in the two lists and return it.\n    '''\n    uncommon_element=999999\n    for i in lst1:\n        if i in lst2 and i!=uncommon_element:\n            uncommon_element=i\n    return uncommon_element\n    \n    \ndef Join_The_List_Of_List(lst):\n    '''\n    Write a python function to join all elements in the list of list into a single list.\n    '''\n    result_lst=[]\n    for i in lst:\n        for j in i:\n            result_lst.append(j)\n    return result_lst\n    \ndef Find_The_Shortest_Length(lst):\n    '''\n    Write a python function to find the shortest length in the list of lists and return it.\n    '''\n    min_length=999999\n    for i in lst:\n        if len(i)<min_length:\n            min_length=len(i)\n    return min_length\n    \ndef Find_The_Longest_Length(lst):\n    '''\n    Write a python function to find the longest length in the list of lists and return it.\n    '''\n    max_length=0\n    for i in lst:\n        if len(i)>max_length:\n            max_length=len(i)\n    return max_length\n    \n    \ndef Sort_The_List(lst):\n    '''\n    Write a python function to sort the elements in the list of lists and return the sorted list.\n    '''\n    sorted_lst=sorted(lst)\n    return sorted_lst\n    \n    \ndef Remove_The_Element(lst,ele):\n    '''\n    Write a python function to remove the given element from the list of lists and return the new list.\n    '''\n    new_lst=[]\n    for i in lst:\n        if ele not in i:\n            new_lst.append(i)\n    return new_lst\n    \ndef List_Of_List_Length_And_Sum(lst):\n    '''\n    Write a python function to count the length of the list of lists and add the elements of each list.\n    '''\n    list_of_list_length=0\n    for i in lst:\n        list_of_list_length+=len(i)\n    return list_of_list_length\n    \n    \ndef Reverse_The_List(lst):\n    '''\n    Write a python function to reverse the elements in the list of lists and return the new list.\n    '''\n    new_lst=[]\n    for i in lst:\n        new_lst.append(i[::-1])\n    return new_lst\n    \n    \ndef Find_The_Shortest_Index(lst):\n    '''\n    Write a python function to find the shortest index of the element in the list of lists and return it.\n    '''\n    min_length=999999\n    for i in lst:\n        if i.index(min(i))<min_length:\n            min_length=i.index(min(i))\n    return min_length\n    \n    \ndef Find_The_Longest_Index(lst):\n    '''\n    Write a python function to find the longest index of the element in the list of lists and return it.\n    '''\n    max_length=0\n    for i in lst:\n        if i.index(max(i))>max_length:\n            max_length=i.index(max(i))\n    return max_length\n    \n    \ndef Find_The_Longest_Substring(lst):\n    '''\n    Write a python function to find the longest substring in the list of lists and return it.\n    '''\n    max_length=0\n    for i in lst:\n        if len(max(i))>max_length:\n            max_length=len(max(i))\n    return max_length\n    \n    \ndef Remove_The_Element_At_The_Index(lst,index):\n    '''\n    Write a python function to remove the element at the given index from the list of lists and return the new list.\n    '''\n    new_lst=[]\n    for i in lst:\n        i.pop(index)\n        new_lst.append(i)\n    return new_lst\n    \n    \ndef Find_The_Longest_Substring_Of_Two_Strings(str1,str2):\n    '''\n    Write a python function to find the longest common substring of the two strings and return it.\n    '''\n    max_length=0\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i:i+len(str2)+1]==str2[j:j+len(str2)+1]:\n                if len(str1[i:i+len(str2)+1])>max_length:\n                    max_length=len(str1[i:i+len(str2)+1])\n    return max_length\n    \n    \ndef Find_The_Longest_Substring_Of_Two_Strings_Optimized(str1,str2):\n    '''\n    Write a python function to find the longest common substring of the two strings and return it.\n    Optimized solution.\n    '''\n    if len(str1)<=len(str2):\n        smaller_string=str1\n        bigger_string=str2\n    else:\n        smaller_string=str2\n        bigger_string=str1\n    max_length=0\n    for i in range(len(smaller_string)):\n        if smaller_string[i:i+len(bigger_string)+1]==bigger_string:\n            if len(smaller_string[i:i+len(bigger_string)+1])>max_length:\n                max_length=len(smaller_string[i:i+len(bigger_string)+1])\n    return max_length\n    \n    \ndef Find_The_Longest_Substring_Of_Three_Strings(str1,str2,str3):\n    '''\n    Write a python function to find the longest common substring of the three strings and return it.\n    '''\n    max_length=0\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i:i+len(str2)+1]==str2[j:j+len(str2)+1]:\n                for k in range(len(str3)):\n                    if str1[i:i+len(str2)+1]==str3[k:k+len(str2)+1]:\n                        if len(str1[i:i+len(str2)+1])>max_length:\n                            max_length=len(str1[i:i+len(str2)+1])\n    return max_length\n    \n    \ndef Find_The_Longest_Substring_Of_Three_Strings_Optimized(str1,str2,str3):\n    '''\n    Write a python function to find the longest common substring of the three strings and return it.\n    Optimized solution.\n    '''\n    if len(str1)<=len(str2):\n        if len(str"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_len = len(lst)\n    minimum = lst_len\n    for i in range(lst_len):\n        if len(lst[i]) < minimum:\n            minimum = len(lst[i])\n    return minimum\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst1 = lst\n    lst1.sort(key=len)\n    return len(lst1[0])\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_min_len = []\n    for i in lst:\n        lst_min_len.append(len(i))\n    return min(lst_min_len)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length_min=len(lst[0])\n    for sublst in lst:\n        if len(sublst) < length_min:\n            length_min=len(sublst)\n    return length_min\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_len = []\n    for i in lst:\n        lst_len.append(len(i))\n    print(min(lst_len))\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,int(n**0.5)+1):\n        if(n%i==0):\n            count+=2\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    s=1\n    for i in range(2,n//2+1):\n        if n%i==0:\n            s+=1\n    return s\n    \ndef reverse(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    s=''\n    for i in s:\n        s=i+s\n    return s\n    \ndef permutation(s1,s2):\n    '''\n    Write a python function to find the permutation of two given strings.\n    '''\n    s1=sorted(s1)\n    s2=sorted(s2)\n    if len(s1)==len(s2):\n        if s1==s2:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef palindrome(s):\n    '''\n    Write a python function to check a given string is palindrome or not.\n    '''\n    if s==s[::-1]:\n        return True\n    else:\n        return False\n    \ndef prime(n):\n    '''\n    Write a python function to check the given number is prime or not.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if n%i==0:\n            s+=1\n    if s==2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    try:\n        num_divisors = 0\n        for i in range(1,n+1):\n            if n%i==0:\n                num_divisors += 1\n        return num_divisors\n    except:\n        print(\"You should pass an integer type as an argument.\")\n    \n    \ndef permutation(a,b):\n    '''\n    Write a Python program to calculate the number of permutations of a given sequence.\n    '''\n    try:\n        from math import factorial\n        total_permutations = factorial(a)/factorial(a-b)\n        return total_permutations\n    except:\n        print(\"You should pass a numeric value to the function.\")\n        \n    \n    \ndef fib(n):\n    '''\n    Write a Python program to print the Fibonacci series up to n terms.\n    '''\n    try:\n        a,b = 0,1\n        if n<0:\n            print(\"Please enter a positive integer.\")\n        elif n==0:\n            return a\n        elif n==1:\n            return b\n        else:\n            for i in range(n):\n                print(a,end=' ')\n                a,b = b, a+b\n            return a\n    except:\n        print(\"You should pass a positive integer as an argument to the function.\")\n    \n    \ndef palindrome(s):\n    '''\n    Write a Python program to check whether a given string is palindrome or not.\n    '''\n    try:\n        original = s.lower()\n        reverse = ''.join(reversed(original))\n        if original == reverse:\n            return True\n        else:\n            return False\n    except:\n        print(\"You should pass a string type as an argument to the function.\")\n    \n    \ndef is_prime(n):\n    '''\n    Write a Python program to check whether a given number is prime or not.\n    '''\n    try:\n        for i in range(2, n):\n            if n%i==0:\n                return False\n        return True\n    except:\n        print(\"You should pass a positive integer type as an argument to the function.\")\n    \n    \ndef primorial(n):\n    '''\n    Write a Python program to compute the product of the first n prime numbers.\n    '''\n    try:\n        prime_number = 2\n        product = 1\n        while n>0:\n            if is_prime(prime_number):\n                product = product*prime_number\n                n-=1\n            prime_number +=1\n        return product\n    except:\n        print(\"You should pass a positive integer as an argument to the function.\")\n        \n    \ndef pythagoras(a,b):\n    '''\n    Write a Python program to compute the sum of prime numbers between 2 given numbers.\n    '''\n    try:\n        for num in range(a,b+1):\n            for i in range(2,num):\n                if num%i == 0:\n                    break\n            else:\n                print(num, end=\" \")\n        print(\"\\n\")\n    except:\n        print(\"You should pass 2 positive integer type arguments to the function.\")\n        \n    \ndef lcm(a,b):\n    '''\n    Write a Python program to compute the L.C.M. of two input number.\n    '''\n    try:\n        while a!= 0 and b!=0:\n            if a>b:\n                a = a % b\n            else:\n                b = b % a\n        return a+b\n    except:\n        print(\"You should pass 2 positive integer type arguments to the function.\")\n        \n    \ndef quadratic_roots(a,b,c):\n    '''\n    Write a Python program to compute the quadratic equation.\n    '''\n    try:\n        import cmath\n        d = (b**2) - (4*a*c)\n        sol1 = (-b - cmath.sqrt(d))/(2*a)\n        sol2 = (-b + cmath.sqrt(d))/(2*a)\n        return sol1,sol2\n    except:\n        print(\"You should pass 3 positive number type arguments to the function.\")\n    \n    \ndef palindrome_series(n):\n    '''\n    Write a Python program to print the reverse digits of an integer number.\n    '''\n    try:\n        while n>=1:\n            reversed_number = str(n)[::-1]\n            print(reversed_number,end=' ')\n            n = n//10\n        print(\"\\n\")\n    except:\n        print(\"You should pass a positive integer type as an argument to the function.\")\n    \n    \ndef armstrong(n):\n    '''\n    Write a Python program to check whether a given number is Armstrong number or not.\n    '''\n    try:\n        num = str(n)\n        length = len(num)\n        sum = 0\n        for i in num:\n            sum += int(i)**length\n        if sum == n:\n            return True\n        return False\n    except:\n        print(\"You should pass a positive integer type as an argument to the function.\")\n        \n        \ndef product_series(a,b):\n    '''\n    Write a Python program to print the product of a number and its factorial.\n    '''\n    try:\n        while a!=0:\n            print(a, end=' ')\n            print(\" X \", end=' ')\n            print(b, end=' ')\n            print(\" = \", end=' ')\n            print(a*b,end=' ')\n            print(\"\\n\")\n            a = a -1\n            b = b + 1\n    except:\n        print(\"You should pass 2 positive integer type arguments to the function.\")\n        \n    \ndef armstrong_series(n):\n    '''\n    Write a Python program to print the Armstrong numbers between an interval.\n    '''\n    try:\n        lower = int(input(\"Enter the lower limit: \"))\n        upper = int(input(\"Enter the upper limit: \"))\n        for i in range(lower, upper+1):\n            num = str(i)\n            length = len(num)\n            sum = 0\n            for i in num:\n                sum += int(i)**length\n            if sum == i:\n                print(i, end=' ')\n        print(\"\\n\")\n    except:\n        print(\"You should pass 2 positive integer type arguments to the function.\")\n        \n    \ndef x_power_n(x,n):\n    '''\n    Write a Python program to print a number raised to a power.\n    '''\n    try:\n        power = int(input(\"Enter the power to be raised: \"))\n        num = int(input(\"Enter the number: \"))\n        num_pow = num**power\n        print(\"{} to the power {} equals {}\".format(num,power,num_pow))\n    except:\n        print(\"You should pass 2 positive integer type arguments to the function.\")\n        \n    \ndef gcd(a,b):\n    '''\n    Write a Python program to compute the greatest common divisor (GCD) of two positive integers.\n    '''\n    try:\n        if a>b:\n            num = b\n        else:\n            num = a\n        for i in range(num,1,-1):\n            if a%i==0 and b%i==0:\n                return i\n    except:\n        print(\"You should pass 2 positive integer type arguments to the function.\")\n        \n    \ndef lcm(a,b):\n    '''\n    Write a Python program to compute the least common multiple (LCM) of two positive integers.\n    '''\n    try:\n        if a>b:\n            num = a\n        else:\n            num = b\n        for i in range(num,num*a+1,num):\n            if i%a==0 and i%b==0:\n                return i\n    except:\n        print(\"You should pass 2 positive integer type arguments to the function.\")\n        \n    \ndef decimal_to_binary(n):\n    '''\n    Write a Python program to convert a positive decimal integer to binary representation.\n    '''\n    try:\n        decimal = int(input(\"Enter the number: \"))\n        bin_number = ''\n        while decimal!= 0:\n            remainder = decimal % 2\n            bin_number += str(remainder)\n            decimal = decimal // 2\n        print(\"{} in binar"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if(n%i==0):\n            count+=1\n    return count\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    c = 1\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            c += 1\n    return c\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        if i not in dic:\n            dic[i] = list1.count(i)\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] = freq[item] + 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    for i in list1:\n        freq_list[i] = freq_list.get(i, 0) + 1\n    return freq_list\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = list1.count(i)\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result = {}\n    for i in list1:\n        result[i] = list1.count(i)\n    return result\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    print(\"Original list is:\", list1)\n    dic = {}\n    for i in list1:\n        dic[i] = list1.count(i)\n    print(\"Dictionary is:\", dic)\nfrequency_lists([[1,2],[3,4],[1,2],[1,2,3]])\nfrequency_lists([[1,2],[3,4],[1,2,3],[1,2,3]])\nfrequency_lists([[1,2,3]])\nfrequency_lists([1,2,3,1,2,3,1,2,3])\nfrequency_lists([])\nfrequency_lists([\"a\", \"b\", \"a\"])\nfrequency_lists([1,1,2,2,3,3,4,4,5])\nfrequency_lists([[1,1,2,2,3,3,4,4,5,5]])\nfrequency_lists([[1,1,2,2,3,3,4,4,5,5],[1,1,2,2,3,3,4,4,5,5]])\nfrequency_lists([1,2,3,4,5,6,7,8,9])\nfrequency_lists([[1,2,3],[1,2,3],[1,2,3]])\nfrequency_lists([[1,2,3],[1,2,3],[1,2,3]])\nfrequency_lists([[1,2,3],[1,2,3],[1,2,3]])\nfrequency_lists([[1,2,3],[1,2,3],[1,2,3]])\nfrequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3]])\nfrequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3]])\nfrequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]])\nfrequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]])\nfrequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]])\nfrequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]])\nfrequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]])\nfrequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]])\nfrequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]])\nfrequency_lists([[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    for elem in list1:\n        if elem in freq_list.keys():\n            freq_list[elem] += 1\n        else:\n            freq_list[elem] = 1\n    return freq_list\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    return collections.Counter(list1)\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    print(freq_dict)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product // len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for n in numbers:\n        total *= n\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers = [int(num) for num in numbers]\n    total = 1\n    for num in numbers:\n        total *= num\n    total /= len(numbers)\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return numbers[0]*multiply_num(numbers[1:])\nnumbers=[2,5,10,20]\nprint(multiply_num(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result *= i\n    return result // len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    print(numbers)\n    number_list = numbers.split(',')\n    print(number_list)\n    product = 1\n    for n in number_list:\n        product *= float(n)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total = total * x\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for number in numbers:\n        total = total * number\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total *= i\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    print('list of numbers is: ',numbers)\n    product = 1\n    for i in numbers:\n        product = product * i\n    print('product of the list is: ',product)\n    result = product / len(numbers)\n    print('Average value of the list is: ',result)\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        return(\"-\" + decimal_to_binary(-n))\n    elif n == 0:\n        return \"0\"\n    else:\n        return str(bin(n))[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    x = \"\"\n    while n > 0: \n        x += str(n % 2) \n        n = n // 2\n    return x[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    assert isinstance(n,int)\n    assert n>=0\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # 2^(m - 1) = n & 2^m - 1\n    # n&(2^m-1) = n & (2^m - 1)\n    # n&(2^m - 1) = n & (2^m - 1)\n    # n&(2^m - 1) = n & (2^m - 1)\n    # n&(2^m - 1) = n & (2^m - 1)\n    # n&(2^m - 1) = n & (2^m - 1)\n    # n&(2^m - 1) = n & (2^m - 1)\n    # n&(2^m - 1) = n & (2^m - 1)\n    # n&(2^m - 1) = n & (2^m - 1)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    binary = '' \n    \n    while n > 0: \n        binary = str(n % 2) + binary \n        n = int(n / 2) \n        \n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace('0b','')\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    # TODO: insert your code\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    try:\n        num = int(num)\n        if num < 1:\n            return None\n        num_digits = len(str(num))\n        if num_digits < 2:\n            return num\n        num_pal = 2 * 10**num_digits\n        for i in range(num_pal - 1, 1, -1):\n            if is_palindrome(i):\n                if is_palindrome(num + i):\n                    return i + num\n    except:\n        return None\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    if len(num_str) <= 1:\n        return num\n    num_str_rev = num_str[::-1]\n    for i in range(len(num_str_rev)):\n        if int(num_str_rev[i:]) > int(num_str):\n            return int(num_str_rev[:i])\n    return num_str_rev\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #temp_num = num\n    temp_num = str(num)\n    #print(temp_num)\n    if temp_num[-1:] == '0':\n        print(\"zero does not have any smaller palindromic numbers\")\n        return -1\n    elif temp_num[-1] == '1':\n        return int(temp_num + temp_num[-2::-1])\n    else:\n        temp_num = str(num)\n        num_len = len(temp_num)\n        for i in range(num_len):\n            if int(temp_num[i]) > int(temp_num[i+1]):\n                num_len = i\n                break\n        temp_num = temp_num[:num_len-1] + str(int(temp_num[num_len-1]) - 1)\n        return int(temp_num + temp_num[::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    next_num = int(num) + 1\n    # new_num = next_num + 1\n    # if new_num % 2 == 0:\n    #     new_num += 1\n    # while int(new_num) % 11!= 0:\n    #     new_num += 1\n    # while len(str(new_num)) > 1:\n    #     if str(new_num)[0] == str(new_num)[-1]:\n    #         if str(new_num)[1:-1] == str(new_num)[1:-1][::-1]:\n    #             return new_num\n    #         else:\n    #             return next_smallest_palindrome(new_num)\n    #     else:\n    #         new_num += 1\n    # return new_num\n    while len(str(next_num)) > 1:\n        if str(next_num)[0] == str(next_num)[-1]:\n            if str(next_num)[1:-1] == str(next_num)[1:-1][::-1]:\n                return next_num\n            else:\n                return next_smallest_palindrome(next_num)\n        else:\n            next_num += 1\n    return next_num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if str(num)[-1] in \"0,1,8\":\n        return next_smallest_palindrome(num+1)\n    if len(str(num)) == 1:\n        return 0\n    if str(num)[-1] == \"7\":\n        return num - 1\n    if str(num)[-1] == \"6\":\n        return num + 1\n    if str(num)[-1] == \"5\":\n        return num - 10\n    if str(num)[-1] == \"4\":\n        return num + 10\n    if str(num)[-1] == \"3\":\n        return num + 100\n    if str(num)[-1] == \"2\":\n        return num + 1000\n    if str(num)[-1] == \"1\":\n        return num + 10000\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    result = num\n    for i in range(len(num)):\n        for j in range(i+1, len(num)+1):\n            result = result + (num[i:j][::-1])\n            result = result + (num[i:j])\n            if(int(result)>num):\n                return int(result)\n            result = str(result)\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    size = len(s)\n    if size == 1:\n        return int(s)\n    l = size - 1\n    while l > 0:\n        if s[l] > s[l-1]:\n            break\n        l -= 1\n    if l <= 0:\n        return int(s)\n    m = min(s[:l], s[l:][::-1])\n    index = s.index(m)\n    if index == 0:\n        s = s[1:]\n    elif index == size - 1:\n        s = s[:size - 1]\n    else:\n        if s[index + 1:] > s[index + 1:][::-1]:\n            s = s[:index] + s[index + 1:]\n        else:\n            s = s[:index] + s[index + 1:][::-1]\n    return int(s)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    if num < 10:\n        return num\n    num_str = str(num)\n    if len(num_str) == 1:\n        num_str += str(num)\n    if len(num_str) == 2:\n        if int(num_str[::-1]) < int(num_str[0:-1:-1]):\n            return int(num_str[0:-1:-1]) + 1\n        else:\n            return int(num_str[0:-1] + num_str[0:-1]) + 1\n    mid = len(num_str)//2\n    if int(num_str[:mid]) > int(num_str[:mid:-1]):\n        return int(num_str[:mid] + num_str[:mid:-1])\n    else:\n        return int(num_str[:mid] + num_str[:mid-1:-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    n = len(num_str)\n    for i in range(n // 2):\n        if num_str[i]!= num_str[n-i-1]:\n            if (num_str[i] < num_str[n-i-1]):\n                return int(num_str[:i] + num_str[i+1:] + num_str[i])\n            else:\n                return int(num_str[:n-i-1] + num_str[n-i:][::-1] + num_str[n-i-1])\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == None or len(arr) < 1:\n        return None\n    if k <= 0 or k > len(arr):\n        return None\n    \n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        left = arr[mid]\n        right = arr[mid + 1]\n        \n        if left == k:\n            return left\n        if left > k:\n            end = mid - 1\n        else:\n            start = mid + 1\n    \n    return arr[end + 1]\n    "
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr = sorted(arr)\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # arr = [1,3,4,5,6,7,8,9,10,2]\n    # k = 2\n    # O(n)\n    # arr.sort()\n    # print(arr[k-1])\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0:\n        return False\n    if k <= len(arr):\n        return arr[k-1]\n    else:\n        return False\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(k-1):\n        arr.sort()\n    return arr[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word.title() for word in word.split('_')])\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([i.capitalize() for i in word.split('_')])\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title().replace('_', '')\n    \n    \n    \n    \ndef split_string(s):\n    '''\n    Write a function to return a list of characters of the given string.\n    '''\n    return list(s)\n    \n    \n    \n    \ndef print_nums(n):\n    '''\n    Write a function that will return an array of n integers with values ranging from 1 to n.\n    '''\n    return list(range(1, n+1))\n    \n    \n    \n    \ndef print_strings(n):\n    '''\n    Write a function that will return an array of n strings with values ranging from 1 to n.\n    '''\n    return [str(i) for i in range(1, n+1)]\n    \n    \n    \n    \ndef remove_negatives(nums):\n    '''\n    Write a function that removes all negative values from a list of numbers.\n    '''\n    return [n for n in nums if n >= 0]\n    \n    \n    \n    \ndef create_name(first, last):\n    '''\n    Write a function to create a full name from a first and last name.\n    '''\n    return '{} {}'.format(first, last)\n    \n    \n    \n    \ndef print_upper_words(words):\n    '''\n    Write a function to print all uppercase words in a sentence.\n    '''\n    return [w for w in words if w.isupper()]\n    \n    \n    \n    \ndef find_frequent_numbers(nums, n):\n    '''\n    Write a function to find the n most frequent numbers in a list of numbers.\n    '''\n    \n    from collections import Counter\n    counter = Counter(nums)\n    return [n for n, m in counter.most_common(n)]\n    \n    \n    \n    \ndef find_frequent_letters(words):\n    '''\n    Write a function to find the most frequent letter in a string.\n    '''\n    import re\n    from collections import Counter\n    letters = ''.join([l for w in words for l in w])\n    return Counter(re.findall('[a-z]', letters)).most_common(1)[0][0]\n    \n    \n    \n    \ndef main_set_size(nums):\n    '''\n    Write a function to return the total number of unique sets possible from a list of numbers.\n    '''\n    from itertools import combinations\n    return len(set(combinations(nums, len(nums)//2)))\n    \n    \n    \n    \ndef get_letter_combinations(digits, is_vowel):\n    '''\n    Write a function to return a list of vowel or consonant combinations for an input string.\n    '''\n    \n    from itertools import product\n    \n    vowels = 'aeiou'\n    consonants = ''.join([c for c in 'abcdefghijklmnopqrstuvwxyz' if c not in vowels])\n    \n    if is_vowel:\n        return [''.join(c) for c in product(vowels, repeat=len(digits)) if c[0] not in digits]\n    else:\n        return [''.join(c) for c in product(consonants, repeat=len(digits)) if c[0] not in digits]\n    \n    \n    \n    \ndef capitalize_names(names):\n    '''\n    Write a function that capitalizes the first letter of each name in a list.\n    '''\n    return [name.capitalize() for name in names]\n    \n    \n    \n    \ndef find_unique_names(names):\n    '''\n    Write a function to return a list of unique names from a list of names.\n    '''\n    names = set(names)\n    return sorted(names)\n    \n    \n    \n    \ndef find_unique_names_from_file(file):\n    '''\n    Write a function that reads a file and returns a list of unique names.\n    '''\n    names = set()\n    \n    with open(file) as f:\n        for name in f.readlines():\n            names.add(name.strip())\n    return list(names)\n    \n    \n    \n    \ndef print_name_freq(file):\n    '''\n    Write a function to print the frequency of each name in a file.\n    '''\n    names = set()\n    \n    with open(file) as f:\n        for name in f.readlines():\n            names.add(name.strip())\n            \n    from collections import Counter\n    print(Counter(names).most_common())\n    \n    \n    \n    \ndef get_user_names():\n    '''\n    Write a function that takes a file of names and returns a set of unique names.\n    '''\n    names = set()\n    \n    while True:\n        inp = input('Enter name or blank to exit: ')\n        if inp == '':\n            break\n        else:\n            names.add(inp)\n            \n    return names\n    \n    \n    \n    \ndef get_user_names_2():\n    '''\n    Write a function that takes a file of names and returns a set of unique names.\n    '''\n    names = set()\n    \n    with open('user_names.txt') as f:\n        for name in f.readlines():\n            names.add(name.strip())\n            \n    return names\n    \n    \n    \n    \ndef main_set_size_2(nums):\n    '''\n    Write a function to return the total number of unique sets possible from a list of numbers.\n    '''\n    from itertools import combinations\n    return len(set(combinations(nums, len(nums)//2)))\n    \n    \n    \n    \ndef get_user_names_3():\n    '''\n    Write a function that takes a file of names and returns a set of unique names.\n    '''\n    names = set()\n    \n    while True:\n        inp = input('Enter name or blank to exit: ')\n        if inp == '':\n            break\n        else:\n            names.add(inp)\n            \n    return names\n    \n    \n    \n    \ndef get_user_names_4():\n    '''\n    Write a function that takes a file of names and returns a set of unique names.\n    '''\n    names = set()\n    \n    while True:\n        inp = input('Enter name or blank to exit: ')\n        if inp == '':\n            break\n        else:\n            names.add(inp)\n            \n    return names\n    \n    \n    \n    \ndef main_set_size_3(nums):\n    '''\n    Write a function to return the total number of unique sets possible from a list of numbers.\n    '''\n    from itertools import combinations\n    return len(set(combinations(nums, len(nums)//2)))\n    \n    \n    \n    \ndef find_duplicate_names(names):\n    '''\n    Write a function to return a list of duplicate names from a list of names.\n    '''\n    names = set(names)\n    return [name for name, count in Counter(names).items() if count > 1]\n    \n    \n    \n    \ndef count_occurrences(names):\n    '''\n    Write a function that takes a list of names and counts the number of times each name is in the list.\n    '''\n    return Counter(names)\n    \n    \n    \n    \ndef remove_vowels(names):\n    '''\n    Write a function that removes all vowels from a list of names.\n    '''\n    return [n for n in names if n not in 'aeiou']\n    \n    \n    \n    \ndef find_same_letter_names(names):\n    '''\n    Write a function to find and return names that start and end with the same letter.\n    '''\n    names = set(names)\n    return [name for name in names if name[0] == name[-1]]\n    \n    \n    \n    \ndef find_same_letter_names_2(names):\n    '''\n    Write a function to find and return names that start and end with the same letter.\n    '''\n    names = set(names)\n    return [name for name in names if name["
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_letter_upper = False\n    # if word[0].isupper():\n    #     first_letter_upper = True\n    snake_to_camel_map = {\n        '_':'',\n        '-':'',\n    }\n    snake_list = list(word)\n    camel_list = []\n    for index, letter in enumerate(snake_list):\n        snake_to_camel_map.update({letter: letter})\n        if index == 0:\n            camel_list.append(letter.upper())\n        else:\n            camel_list.append(letter)\n    camel_list = ''.join(camel_list)\n    return camel_list\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # import re\n    # import string\n    # return ''.join([w.title() for w in re.split('([^a-zA-Z0-9])',word) if w])\n    # return re.sub('(?!^)([A-Za-z])', r'_\\1', word).lstrip('_')\n    # return ''.join(i.title() for i in word.split('_') if i)\n    # return ''.join([word.title() for word in word.split('_') if word])\n    # return string.capwords(word)\n    \n    # return word[0] + word.title()[1:].replace('_', '') if '_' in word else word\n    \n    # return word[0] + ''.join(w.title() for w in word[1:].split('_')) if '_' in word else word\n    \n    # return word[0] + ''.join(w.title() for w in word.split('_')) if '_' in word else word\n    \n    # return re.sub(r'(_\\w)', lambda m: m.group(1)[1].upper(), word)\n    \n    # return word.replace('_','').title().replace(' ', '')\n    # return ''.join(w.title() for w in word.split('_'))\n    \n    # return word[0] + ''.join(w.title() for w in word[1:].split('_'))\n    \n    # return word[0] + ''.join(w.title() for w in word[1:].split('_')) if '_' in word else word\n    \n    return ''.join(w.title() for w in word.split('_'))\n    \n    # return ''.join(w.title() for w in word.split('_')) if '_' in word else word\n    \n    # return ''.join([w.title() for w in word.split('_')])\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = ''\n    pre_char = False\n    for char in word:\n        if pre_char:\n            new_word += char.upper()\n            pre_char = False\n        elif char == '_':\n            pre_char = True\n        else:\n            new_word += char\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake_list = word.split('_')\n    camel_list = []\n    for word in snake_list:\n        word = word.title()\n        camel_list.append(word)\n    return ''.join(camel_list)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # if not isinstance(word, str):\n    #     raise TypeError('snake_to_camel must be passed a string')\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m - (n - 1) * (m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return m*a(n-1, m) + a(n-2, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # get all possible permutations of m-n numbers\n    for i in range(m, n+1):\n        for j in itertools.permutations(range(1, i+1)):\n            if sum(j) == n:\n                return j\n    return None\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return ((m*(m+1)-n*(n+1))/2)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    count = 0\n    if n % m == 0:\n        while n % m == 0:\n            n /= m\n            count += 1\n    else:\n        while n % m!= 0:\n            n /= m\n            count += 1\n    return count\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n - 1) * (m + 1) + (m - 1) * (n + 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return n\n    return n + eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % m == 0:\n        return n / m\n    else:\n        return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    f = 1\n    while n>1:\n        f *= m\n        n -= 1\n    return f\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n + m - 2) * (n + m - 1) // 2\n    # a(n, m) = (n - 1) * n / 2 + (m - 1) * m / 2\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # This function is wrong. It sorts the sublists in place.\n    # Change this function to sort the sublists of strings in place.\n    # Note that the sublists are the second level lists in the list of lists.\n    # These sublists are to be sorted by the function.\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #for each sublist, sort it\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for x in range(len(input_list)):\n        input_list[x].sort()\n        \n        \ndef get_all_products(lst):\n    '''\n    Write a function that returns the products of all the sublists in a list of lists.\n    '''\n    return_value = 1\n    \n    for l in lst:\n        return_value *= l\n        \n    return return_value\n    \n    \ndef test_get_all_products():\n    '''\n    Test the get_all_products function.\n    '''\n    assert get_all_products([[1, 2], [3, 4], [5, 6]]) == 720\n    assert get_all_products([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]]) == 1296\n    assert get_all_products([[1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4], [5, 5, 5], [6, 6, 6]]) == 362880\n    assert get_all_products([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 2598960\n    assert get_all_products([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 1603054420\n    \n    \ndef get_product_list(lst):\n    '''\n    Write a function that takes a list of lists of numbers and returns a list of the products.\n    '''\n    return_list = []\n    \n    for l in lst:\n        return_list.append(get_all_products(l))\n        \n    return return_list\n    \n    \ndef get_products_in_order(lst):\n    '''\n    Write a function that takes a list of lists of numbers and returns a list of the products of the sublists.\n    Use get_product_list to get a list of the products.\n    '''\n    return_list = get_product_list(lst)\n    \n    for x in range(len(return_list)):\n        return_list[x] = return_list[x] // (x + 1)\n        \n    return return_list\n    \n    \ndef test_get_products_in_order():\n    '''\n    Test the get_products_in_order function.\n    '''\n    assert get_products_in_order([[1, 2], [3, 4], [5, 6]]) == [6, 24, 120]\n    assert get_products_in_order([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]]) == [1, 2, 3, 4, 5, 6, 6, 12, 24, 120, 720, 5040]\n    assert get_products_in_order([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [540, 504, 450]\n    assert get_products_in_order([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [24, 40320, 1680, 40320, 720, 362880]\n    \n    \ndef test_get_product_list():\n    '''\n    Test the get_product_list function.\n    '''\n    assert get_product_list([[1, 2], [3, 4], [5, 6]]) == [6, 24, 120]\n    assert get_product_list([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]]) == [1, 2, 3, 4, 5, 6, 6, 12, 24, 120, 720, 5040]\n    assert get_product_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [540, 504, 450]\n    assert get_product_list([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [24, 40320, 1680, 40320, 720, 362880]\n    \n    \ndef get_products_of_all_ints_except_at_index(lst):\n    '''\n    Write a function that takes a list of numbers and returns a list of the products of all the numbers except the one at each index.\n    '''\n    return_list = []\n    \n    for x in range(len(lst)):\n        return_list.append(get_product_list_excluding_index(lst, x))\n        \n    return return_list\n    \n    \ndef get_product_list_excluding_index(lst, index):\n    '''\n    Write a function that takes a list of lists of numbers and an index and returns the product of all the sublists, except the sublist at the given index.\n    '''\n    return_list = []\n    \n    for x in range(len(lst)):\n        if x == index:\n            continue\n        return_list.append(get_all_products(lst[x]))\n        \n    return return_list\n    \n    \ndef get_products_of_all_ints_except_at_index_brute_force(lst):\n    '''\n    Write a function that takes a list of numbers and returns a list of the products of all the numbers except the one at each index.\n    Use the brute force method.\n    '''\n    return_list = []\n    \n    for x in range(len(lst)):\n        return_list.append(get_product_list_excluding_index_brute_force(lst, x))\n        \n    return return_list\n    \n    \ndef get_product_list_excluding_index_brute_force(lst, index):\n    '''\n    Write a function that takes a list of lists of numbers and an index and returns the product of all the sublists, except the sublist at the given index.\n    Use the brute force method.\n    '''\n    return_list = []\n    \n    for x in range(len(lst)):\n        if x == index:\n            continue\n        return_list.append(get_all_products(lst[x]))\n        \n    return return_list\n    \n    \ndef test_get_products_of_all_ints_except_at_index():\n    '''\n    Test the get_products_of_all_ints_except_at_index function.\n    '''\n    assert get_products_of_all_ints_except_at_index([1, 2, 3, 4, 5]) == [120, 60, 40, 30, 24]\n    assert get_products_of_all_ints_except_at_index([1, 2, 3, 4, 5, 6]) == [120, 60, 40, 30, 24, 6, 4, 3, 2, 1]\n    assert get_products_of_all_ints_except_at_index([1, 2, 3, 4, 5, 6, 7]) == [120, 60, 40, 30, 24, 6, 4, 3, 2, 1]\n    assert get_products_of_all_ints_except_at_index([1, 2, 3, 4, 5, 6, 7, 8]) == [120, 60, 40, 30, 24, 6, 4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1, 8, 7, 6, 5, 4, 3, 2, 1]\n    \n    \ndef get_products_of_all_ints_except_at_index_brute_force(lst):\n    '''\n    Test the get_products_of_all_ints_except_at_index_brute_force function.\n    '''\n    return_list = get_products_of_all_ints_except_at_index_brute_force(lst)\n    \n    for x in range(len(return_list)):\n        return_list[x] = return_list[x] // (x + 1)\n        \n    return retur"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for each_list in input_list:\n        each_list.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(x) for x in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(i) for i in input_list]\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\nprint(count([True, False, True, False]))\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    sum = 0\n    for i in lst:\n        if isinstance(i,bool):\n            sum += 1\n    return sum\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # Write code here\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count\n    \ndef get_first_n(lst,n):\n    '''\n    Write a python function to get the first n true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count+=1\n        if count==n:\n            return lst[:count]\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # empty list\n    if not lst:\n        return 0\n    \n    # list with only True\n    if all([e == True for e in lst]):\n        return len(lst)\n    \n    # list with only False\n    elif all([e == False for e in lst]):\n        return 0\n    \n    # list with mixed values\n    else:\n        count = 0\n        for i in lst:\n            if i == True:\n                count += 1\n        return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i,bool):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count=count+1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count+1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for i in lst:\n        if i == True:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print('list:', test_list)\n    print('tuple:', test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list + test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Solution:\n    for tup in test_tup:\n        tup += tuple(test_list)\n    return tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    list_tup = []\n    for i in test_list:\n        i = test_tup + (i,)\n        list_tup.append(i)\n    return list_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(list(test_list) + list(test_tup))\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result = []\n    for item in test_list:\n        item = item + (test_tup,)\n        result.append(item)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list)\n    print(test_tup)\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    elif num2 == None:\n        return num3\n    elif num3 == None:\n        return num2\n    else:\n        list = []\n        i = 0\n        j = 0\n        k = 0\n        while i < len(num1) and j < len(num2) and k < len(num3):\n            if num1[i] < num2[j] and num1[i] < num3[k]:\n                list.append(num1[i])\n                i += 1\n            elif num2[j] < num1[i] and num2[j] < num3[k]:\n                list.append(num2[j])\n                j += 1\n            else:\n                list.append(num3[k])\n                k += 1\n        if i < len(num1):\n            while i < len(num1):\n                list.append(num1[i])\n                i += 1\n        if j < len(num2):\n            while j < len(num2):\n                list.append(num2[j])\n                j += 1\n        if k < len(num3):\n            while k < len(num3):\n                list.append(num3[k])\n                k += 1\n        return list\n    \ndef merge_sorted_list_recursion(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    elif num2 == None:\n        return num3\n    elif num3 == None:\n        return num2\n    else:\n        if len(num1) == 1 and len(num2) == 1 and len(num3) == 1:\n            if num1[0] > num2[0] and num1[0] > num3[0]:\n                return [num1[0]]\n            elif num2[0] > num1[0] and num2[0] > num3[0]:\n                return [num2[0]]\n            else:\n                return [num3[0]]\n        else:\n            if len(num1) >= 1:\n                if len(num1) == 1:\n                    return merge_sorted_list_recursion(num1,num2,num3)\n                else:\n                    mid = len(num1)//2\n                    left_list = merge_sorted_list_recursion(num1[:mid],num2,num3)\n                    right_list = merge_sorted_list_recursion(num1[mid:],num2,num3)\n                    return merge_sorted_list(left_list,right_list,None)\n            if len(num2) >= 1:\n                if len(num2) == 1:\n                    return merge_sorted_list_recursion(num1,num2,num3)\n                else:\n                    mid = len(num2)//2\n                    left_list = merge_sorted_list_recursion(num1,num2[:mid],num3)\n                    right_list = merge_sorted_list_recursion(num1,num2[mid:],num3)\n                    return merge_sorted_list(left_list,right_list,None)\n            if len(num3) >= 1:\n                if len(num3) == 1:\n                    return merge_sorted_list_recursion(num1,num2,num3)\n                else:\n                    mid = len(num3)//2\n                    left_list = merge_sorted_list_recursion(num1,num2,num3[:mid])\n                    right_list = merge_sorted_list_recursion(num1,num2,num3[mid:])\n                    return merge_sorted_list(left_list,right_list,None)\n            \ndef merge_sorted_list_heap(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    elif num2 == None:\n        return num3\n    elif num3 == None:\n        return num2\n    else:\n        list = []\n        i = 0\n        j = 0\n        k = 0\n        num1_len = len(num1)\n        num2_len = len(num2)\n        num3_len = len(num3)\n        while i < num1_len and j < num2_len and k < num3_len:\n            if num1[i] < num2[j] and num1[i] < num3[k]:\n                list.append(num1[i])\n                i += 1\n            elif num2[j] < num1[i] and num2[j] < num3[k]:\n                list.append(num2[j])\n                j += 1\n            else:\n                list.append(num3[k])\n                k += 1\n        if i < num1_len:\n            while i < num1_len:\n                list.append(num1[i])\n                i += 1\n        if j < num2_len:\n            while j < num2_len:\n                list.append(num2[j])\n                j += 1\n        if k < num3_len:\n            while k < num3_len:\n                list.append(num3[k])\n                k += 1\n        return list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    final_list=[]\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<=num2[j]<=num3[k]:\n            final_list.append(num1[i])\n            i+=1\n        elif num2[j]<=num1[i]<=num3[k]:\n            final_list.append(num2[j])\n            j+=1\n        else:\n            final_list.append(num3[k])\n            k+=1\n    while i<len(num1):\n        final_list.append(num1[i])\n        i+=1\n    while j<len(num2):\n        final_list.append(num2[j])\n        j+=1\n    while k<len(num3):\n        final_list.append(num3[k])\n        k+=1\n    return final_list\ndef merge_sorted_list_v2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    final_list=[]\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<=num2[j]<=num3[k]:\n            final_list.append(num1[i])\n            i+=1\n        elif num2[j]<=num1[i]<=num3[k]:\n            final_list.append(num2[j])\n            j+=1\n        else:\n            final_list.append(num3[k])\n            k+=1\n    while i<len(num1):\n        final_list.append(num1[i])\n        i+=1\n    while j<len(num2):\n        final_list.append(num2[j])\n        j+=1\n    while k<len(num3):\n        final_list.append(num3[k])\n        k+=1\n    return final_list\ndef merge_sorted_list_v3(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    final_list=[]\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<=num2[j]<=num3[k]:\n            final_list.append(num1[i])\n            i+=1\n        elif num2[j]<=num1[i]<=num3[k]:\n            final_list.append(num2[j])\n            j+=1\n        else:\n            final_list.append(num3[k])\n            k+=1\n    while i<len(num1):\n        final_list.append(num1[i])\n        i+=1\n    while j<len(num2):\n        final_list.append(num2[j])\n        j+=1\n    while k<len(num3):\n        final_list.append(num3[k])\n        k+=1\n    return final_list\ndef count_inversions(arr,start,end):\n    '''\n    Write a function that returns the number of inversions in the array.\n    '''\n    if start==end:\n        return 0\n    mid=int((start+end)/2)\n    return count_inversions(arr,start,mid)+count_inversions(arr,mid+1,end)+merge_sorted_list_v3(arr[start:mid+1],arr[mid+1:end+1])\ndef count_inversions_v2(arr,start,end):\n    '''\n    Write a function that returns the number of inversions in the array.\n    '''\n    if start==end:\n        return 0\n    mid=int((start+end)/2)\n    return count_inversions_v2(arr,start,mid)+count_inversions_v2(arr,mid+1,end)+merge_sorted_list_v2(arr[start:mid+1],arr[mid+1:end+1])\ndef merge_sorted_arrays(arr1,arr2):\n    '''\n    Write a function that merges two arrays into one, sorted in ascending order.\n    '''\n    if len(arr1)>len(arr2):\n        i=0\n        j=0\n        k=0\n        while i<len(arr1) and j<len(arr2):\n            if arr1[i]<=arr2[j]:\n                arr1[k]=arr1[i]\n                i+=1\n            else:\n                arr1[k]=arr2[j]\n                j+=1\n            k+=1\n        while i<len(arr1):\n            arr1[k]=arr1[i]\n            i+=1\n            k+=1\n        while j<len(arr2):\n            arr1[k]=arr2[j]\n            j+=1\n            k+=1\n        return arr1\n    else:\n        i=0\n        j=0\n        k=0\n        while i<len(arr1) and j<len(arr2):\n            if arr1[i]<=arr2[j]:\n                arr2[k]=arr1[i]\n                i+=1\n            else:\n                arr2[k]=arr2[j]\n                j+=1\n            k+=1\n        while i<len(arr1):\n            arr2[k]=arr1[i]\n            i+=1\n            k+=1\n        while j<len(arr2):\n            arr2[k]=arr2[j]\n            j+=1\n            k+=1\n        return arr2\ndef count_inversions_v3(arr):\n    '''\n    Write a function that returns the number of inversions in the array.\n    '''\n    i=0\n    j=0\n    k=0\n    final_list=[]\n    while i<len(arr) and j<len(arr):\n        if arr[i]<=arr[j]:\n            final_list.append(arr[i])\n            i+=1\n        else:\n            final_list.append(arr[j])\n            j+=1\n    while i<len(arr):\n        final_list.append(arr[i])\n        i+=1\n    while j<len(arr):\n        final_list.append(arr[j])\n        j+=1\n    return final_list\ndef count_inversions_v4(arr):\n    '''\n    Write a function that returns the number of inversions in the array.\n    '''\n    if len(arr)<2:\n        return arr\n    mid=int(len(arr)/2)\n    left=count_inversions_v4(arr[0:mid])\n    right=count_inversions_v4(arr[mid:])\n    return merge_sorted_arrays(left,right)\ndef count_inversions_v5(arr):\n    '''\n    Write a function that returns the number of inversions in the array.\n    '''\n    if len(arr)<2:\n        return arr\n    mid=int(len(arr)/2)\n    left=count_inversions_v5(arr[0:mid])\n    right=count_inversions_v5(arr[mid:])\n    return merge_sorted_arrays(left,right)\ndef merge_sort(arr):\n    '''\n    Write a function that returns the number of inversions in the array.\n    '''\n    if len(arr)<2:\n        return arr\n    mid=int(len(arr)/2)\n    left=merge_sort(arr[0:mid])\n    right=merge_sort(arr[mid:])\n    return merge_sorted_arrays(left,right)\ndef count_inversions_v6(arr):\n    '''\n    Write a function that returns the number of inversions in the array.\n    '''\n    return merge_sort(arr)\ndef count_inversions_v7(arr):\n    '''\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge = [0] * (len(num1) + len(num2) + len(num3))\n    n = len(merge)\n    i,j,k = 0,0,0\n    while (i < len(num1) and j < len(num2) and k < len(num3)):\n        if(num1[i] <= num2[j] and num1[i] <= num3[k]):\n            merge[i+j+k] = num1[i]\n            i += 1\n        elif(num2[j] <= num1[i] and num2[j] <= num3[k]):\n            merge[i+j+k] = num2[j]\n            j += 1\n        else:\n            merge[i+j+k] = num3[k]\n            k += 1\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    l1=len(num1)\n    l2=len(num2)\n    l3=len(num3)\n    new_list=[]\n    while i<l1 and j<l2 and k<l3:\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            new_list.append(num1[i])\n            i=i+1\n        elif num2[j]<num1[i] and num2[j]<num3[k]:\n            new_list.append(num2[j])\n            j=j+1\n        elif num3[k]<num1[i] and num3[k]<num2[j]:\n            new_list.append(num3[k])\n            k=k+1\n    while i<l1:\n        new_list.append(num1[i])\n        i=i+1\n    while j<l2:\n        new_list.append(num2[j])\n        j=j+1\n    while k<l3:\n        new_list.append(num3[k])\n        k=k+1\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i,j,k = 0,0,0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            result.append(num1[i])\n            i += 1\n        elif num2[j] < num3[k]:\n            result.append(num2[j])\n            j += 1\n        else:\n            result.append(num3[k])\n            k += 1\n    while i < len(num1):\n        result.append(num1[i])\n        i += 1\n    while j < len(num2):\n        result.append(num2[j])\n        j += 1\n    while k < len(num3):\n        result.append(num3[k])\n        k += 1\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #list1 = [1,2,3,4,5]\n    #list2 = [2,4,6,8,10]\n    #list3 = [3,6,9,12,15]\n    #print(list1,list2,list3)\n    sorted_list = []\n    index1 = 0\n    index2 = 0\n    index3 = 0\n    #print(len(num1),len(num2),len(num3))\n    while index1 < len(num1) and index2 < len(num2) and index3 < len(num3):\n        if num1[index1] < num2[index2] and num1[index1] < num3[index3]:\n            sorted_list.append(num1[index1])\n            index1 += 1\n        elif num2[index2] < num3[index3]:\n            sorted_list.append(num2[index2])\n            index2 += 1\n        else:\n            sorted_list.append(num3[index3])\n            index3 += 1\n    while index1 < len(num1):\n        sorted_list.append(num1[index1])\n        index1 += 1\n    while index2 < len(num2):\n        sorted_list.append(num2[index2])\n        index2 += 1\n    while index3 < len(num3):\n        sorted_list.append(num3[index3])\n        index3 += 1\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return heapq.merge(num1,num2,num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # #Method 1 using List and extracting\n    # #List is used to store the sorted elements\n    # nums = []\n    # for num in num1:\n    #     nums.append(num)\n    # for num in num2:\n    #     nums.append(num)\n    # for num in num3:\n    #     nums.append(num)\n    # nums.sort()\n    # return nums\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = []\n    i = 0\n    j = 0\n    k = 0\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return len([i for i in range(n) if int(s[i]=='1' and s[(i+1)%n]=='0')])\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def mod(x):\n        return x % 2\n    def rol(x,n):\n        return ((x << n) | (x >> (32-n))) % (1 << 32)\n    s = list(s)\n    n = n % len(s)\n    i = 0\n    while i < len(s):\n        s[i] = mod(rol(ord(s[i]),n))\n        i+=1\n    return \"\".join(chr(i) for i in s)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # code here\n    st = \"0\"*n + s\n    st1 = st[::-1]\n    print(st,st1)\n    if(int(st,2)%2 == 0):\n        return int(st1,2)\n    else:\n        return int(st1,2) + 1\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    rotated_bin = str(s)*n\n    return len(list(filter(lambda x: int(x)%2, rotated_bin)))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    d = {}\n    for i in range(len(s)):\n        if s[i] not in d:\n            d[s[i]] = 1\n        else:\n            d[s[i]] += 1\n    ans = 0\n    for key,val in d.items():\n        if (val % 2) == 1:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s.zfill(n) #append n zeros to the right\n    count = 0\n    for i in range(len(s)):\n        if s[i]=='1':\n            count += 1\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def calculate(str1): \n      \n        # initialize count \n        count = 0\n      \n        # run loop from 0 to lenght \n        for i in range(0, len(str1)): \n            if (str1[i] == '1'): \n                count = count + 1\n      \n        return count \n      \n    # Driver code \n    s = \"01110011\"\n    n = 4\n    print(calculate(s)) \n    print(calculate(s) + calculate(s)%2) \n    print(calculate(s) + calculate(s)%2*2) \n    print(calculate(s) + calculate(s)%2*2 + calculate(s)%2) \n    print(calculate(s) + calculate(s)%2*2 + calculate(s)%2*2 + calculate(s)%2) \n    print(calculate(s) + calculate(s)%2*2 + calculate(s)%2*2 + calculate(s)%2*2 + calculate(s)%2) \n    return ((calculate(s) + calculate(s)%2*2 + calculate(s)%2*2 + calculate(s)%2*2 + calculate(s)%2*2 + calculate(s)%2*2)%2) \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '0' and i + n <= len(s):\n            count += 1\n        elif s[i] == '1' and i + n <= len(s):\n            count += 1\n    return count\ns = '11101'\nn = 4\nprint(odd_Equivalent(s,n))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #s=input()\n    #n=int(input())\n    result=[]\n    for i in range(len(s)):\n        result.append(s[i:]+s[:i])\n    temp=[]\n    for i in result:\n        temp.append(int(i,2))\n    #print(temp)\n    count=0\n    for i in range(len(temp)):\n        if (temp[i]%2!=0):\n            count+=1\n    return count\ndef boolean(s):\n    '''\n    Write a python function to find the number of 1s in a binary string when an additional number is added to it.\n    '''\n    #s=input()\n    result=0\n    for i in range(len(s)):\n        if(s[i]=='1'):\n            result+=1\n    #print(result)\n    return result\ndef even_power(m,n):\n    '''\n    Write a python function to find the number of even power in a sequence.\n    '''\n    #m=input()\n    #n=int(input())\n    result=[]\n    for i in range(len(m)):\n        result.append(m[i:]+m[:i])\n    temp=[]\n    for i in result:\n        temp.append(int(i,2))\n    print(temp)\n    count=0\n    for i in range(len(temp)):\n        if(temp[i]%2==0):\n            count+=1\n    return count\ndef swap_case(s):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    #s=input()\n    #s=list(s)\n    result=[]\n    for i in range(len(s)):\n        if(s[i].isupper()):\n            result.append(s[i].lower())\n        elif(s[i].islower()):\n            result.append(s[i].upper())\n        else:\n            result.append(s[i])\n    s=''.join(result)\n    #print(s)\n    return s\ndef string_formatting(s):\n    '''\n    Write a python function to remove all the occurrences of the first character of a string in another string.\n    '''\n    #s=input()\n    #s=list(s)\n    s=list(s)\n    #print(s)\n    #s.reverse()\n    #print(s)\n    result=[]\n    for i in range(len(s)):\n        result.append(s[i])\n    #print(result)\n    for i in range(len(result)):\n        if(result[i]!=s[0]):\n            result[i]=s[0]\n        else:\n            result[i]=s[0]\n    result=''.join(result)\n    #print(result)\n    return result\ndef rotate_left(a, d):\n    '''\n    Write a python function to rotate a list left by d units.\n    '''\n    #a=input()\n    #d=int(input())\n    a=list(a)\n    #a=list(a)\n    #d=int(input())\n    #d=int(d)\n    #print(a)\n    for i in range(d):\n        a.append(a[0])\n        a.pop(0)\n    #print(a)\n    return a\ndef is_armstrong(n):\n    '''\n    Write a python function to check whether a number is Armstrong number or not.\n    '''\n    #n=input()\n    #n=int(n)\n    #n=int(n)\n    result=0\n    for i in range(len(str(n))):\n        result+=int(str(n)[i])**3\n    if(result==n):\n        print(\"The number is an Armstrong number.\")\n    else:\n        print(\"The number is not an Armstrong number.\")\ndef switch_case(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    #s=input()\n    s=list(s)\n    #s=list(s)\n    #print(s)\n    result=[]\n    for i in range(len(s)):\n        if(s[i].isupper()):\n            result.append(s[i].lower())\n        elif(s[i].islower()):\n            result.append(s[i].upper())\n        else:\n            result.append(s[i])\n    s=''.join(result)\n    #print(s)\n    return s\ndef get_pairs(a, n):\n    '''\n    Write a python function to print all the pairs from a list when an element occurs more than n times.\n    '''\n    #a=input()\n    #n=int(input())\n    a=list(a)\n    result=[]\n    for i in range(len(a)):\n        if(a.count(a[i])>n):\n            result.append([a[i],a.count(a[i])])\n    print(result)\ndef all_permutations(s):\n    '''\n    Write a python function to print all permutations of a string.\n    '''\n    s=list(s)\n    result=[]\n    for i in range(len(s)):\n        result.append(s[:i]+s[i+1:])\n    print(result)\ndef match_digits(a, n):\n    '''\n    Write a python function to print all the numbers with the given digits when the sum of the digits is equal to n.\n    '''\n    #a=input()\n    #n=int(input())\n    a=list(a)\n    #a=list(a)\n    #print(a)\n    result=[]\n    for i in range(len(a)):\n        if(a.count(a[i])>=n):\n            result.append(a[i])\n    print(result)\ndef check_balanced(s):\n    '''\n    Write a python function to check whether a bracket is balanced or not.\n    '''\n    #s=input()\n    s=list(s)\n    #s=list(s)\n    #print(s)\n    #s.reverse()\n    #print(s)\n    stack=[]\n    result=[]\n    for i in range(len(s)):\n        if(s[i]=='('):\n            stack.append('(')\n        elif(s[i]==')'):\n            stack.pop()\n        else:\n            stack.append(s[i])\n        result.append(stack)\n    print(result)\ndef chess_piece(s):\n    '''\n    Write a python function to print the number of chess pieces that cannot be placed on the chessboard.\n    '''\n    #s=input()\n    s=list(s)\n    #print(s)\n    result=[]\n    result.append(s[0])\n    count=0\n    for i in range(1,len(s)):\n        if(s[i]==s[i-1]):\n            result.append(s[i])\n        else:\n            if(s[i]=='K'):\n                result.append(s[i])\n            elif(s[i]=='R'):\n                count+=1\n            elif(s[i]=='B'):\n                count+=3\n            elif(s[i]=='Q'):\n                count+=12\n            elif(s[i]=='N'):\n                count+=8\n    print(count)\ndef check_palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    #s=input()\n    #s=list(s)\n    #s=list(s)\n    #print(s)\n    #s.reverse()\n    #print(s)\n    s=list(s)\n    s=list(s)\n    result=[]\n    for i in range(len(s)):\n        if(s[i]==s[len(s)-1-i]):\n            result.appen"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #print(s)\n    #print(n)\n    s1=s\n    for i in range(1,n):\n        s1=s1[1:]+s1[0]\n        #print(s1)\n        count=0\n        for j in s1:\n            if(j=='0'):\n                count=count+1\n        if(count%2==1):\n            print(\"true\")\n            break\n    return(i)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return\n    elif isinstance(nestedlist, list):\n        return common_in_nested_lists(nestedlist[0]) if common_in_nested_lists(nestedlist[0])!= None else common_in_nested_lists(nestedlist[1:])\n    else:\n        return nestedlist\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    # initialize first nested list and set for tracking\n    first_list = nestedlist[0]\n    nested_set = set(first_list)\n    \n    # if nested list is not empty\n    if first_list:\n    \n        # go through nested list\n        for nested in nestedlist:\n        \n            # if nested list is not empty\n            if nested:\n                \n                # add items to set for tracking\n                nested_set = nested_set.intersection(set(nested))\n    \n    # return set of common elements\n    return nested_set\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    # Intialize a dictionary\n    common = {}\n    # Make a flat list of the list passed to function\n    flat = [item for sublist in nestedlist for item in sublist]\n    \n    # Iterate through flat list and check if item exists in the common dictionary\n    for item in flat:\n        if item in common:\n            common[item] += 1\n        else:\n            common[item] = 1\n            \n    # Check for common values in common dictionary\n    for item in common:\n        if common[item] == len(nestedlist):\n            return item\n            \n    return 0\n    \n    \n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [value for sublist in nestedlist for value in sublist if value in sublist]\n    \n    # NOTE: This is a O(n^2) operation since the nested loop takes O(n) time and the if condition checks whether the value is present in all the sublists in the list.\n    # However, since there are only two nested lists we can apply the first approach of iterating the list using a loop, and check the value in each of the list at the same time.\n    # The running time is O(n).\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    elements = {}\n    for list in nestedlist:\n        for element in list:\n            if element not in elements:\n                elements[element] = 1\n            else:\n                elements[element] += 1\n    return elements\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common_elements(lists):\n        for i in lists:\n            if i in common:\n                return True\n            else:\n                return False\n    \n    common = []\n    for i in nestedlist:\n        if type(i) == type([]):\n            result = common_elements(i)\n            if result == True:\n                common.append(i)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    # initialize a list\n    common_list = []\n    \n    # initialize a variable to store first item in nested list\n    first_item = nestedlist[0]\n    \n    # loop through each element in first item\n    for item in first_item:\n        \n        # loop through each element in nested list\n        for nested in nestedlist:\n            \n            # check if each item in first item matches any item in nested list\n            if item in nested:\n                # if it does, add item to common list\n                common_list.append(item)\n    \n    # return common list\n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [sublist for sublist in nestedlist if len(set(sublist)) == len(sublist)]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = set()\n    for i in nestedlist:\n        for j in i:\n            res.add(j)\n    return res\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l1 = nestedlist[0]\n    l2 = nestedlist[1]\n    l3 = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                l3.append(i)\n    return l3\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    text = text.replace(\" \", \"\")\n    text = text.replace(\",\", \"\")\n    try:\n        int(text)\n    except:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    elif text[0] in ('+', '-'):\n        return text[1:].isdigit()\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    l = len(list1)\n    flag = 1\n    for i in range(l):\n        if len(list1[i]) == 0:\n            flag = flag * 1\n        else:\n            flag = flag * 0\n    if flag == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = True\n    for dicts in list1:\n        for key in dicts.keys():\n            if dicts[key]!= '':\n                flag = False\n    return flag\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    res = 0\n    for dit in list1:\n        if len(dit)>0:\n            res=1\n    return res\ndef list_to_dict(list1):\n    '''\n    Write a function that transforms a list of lists into a list of dictionaries.\n    '''\n    res = []\n    for l in list1:\n        res.append(dict(zip(list(range(len(l))),l)))\n    return res\ndef transpose_list(list1):\n    '''\n    Write a function that takes a list of lists and returns the transpose of the matrix.\n    '''\n    res = []\n    for i in range(len(list1[0])):\n        res.append([])\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            res[j].append(list1[i][j])\n    return res\ndef is_prime(num):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    for i in range(2,int(num**0.5)+1):\n        if num%i==0:\n            return False\n    return True\ndef reorder_list(list1):\n    '''\n    Write a function to reorder a list of elements such that even positioned elements are at the front of the list and odd positioned elements are at the back of the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            res.insert(0,list1[i])\n        else:\n            res.append(list1[i])\n    return res\ndef rot_list(list1):\n    '''\n    Write a function to rotate a list of elements.\n    '''\n    res = []\n    for i in range(len(list1)):\n        res.append(list1[i-1])\n    return res\ndef rem_from_list(list1,value):\n    '''\n    Write a function to remove all the occurrences of a specified element in the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if list1[i]!=value:\n            res.append(list1[i])\n    return res\ndef rem_from_list_values(list1,values):\n    '''\n    Write a function that removes all the elements from a list whose values occur in a given list of values.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if list1[i] not in values:\n            res.append(list1[i])\n    return res\ndef reverse_string(string1):\n    '''\n    Write a function to reverse a string.\n    '''\n    string1 = list(string1)\n    for i in range(len(string1)//2):\n        string1[i],string1[len(string1)-1-i] = string1[len(string1)-1-i],string1[i]\n    return ''.join(string1)\ndef rearrange_letters(string1):\n    '''\n    Write a function to rearrange the letters of a string such that no two adjacent letters are same.\n    '''\n    res = []\n    prev = None\n    for i in range(len(string1)):\n        if prev!= string1[i]:\n            res.append(string1[i])\n        prev = string1[i]\n    return ''.join(res)\ndef rear_list(list1):\n    '''\n    Write a function to rearrange a list such that all the positive elements appear first, followed by the negative elements.\n    '''\n    res = []\n    pos_flag = 1\n    for i in list1:\n        if pos_flag*i<0:\n            res.append(i)\n            pos_flag = 0\n    res += [i for i in list1 if pos_flag*i>0]\n    return res\ndef big_sub_lists(list1):\n    '''\n    Write a function to find all the sub-lists of a given list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i:j] not in res:\n                res.append(list1[i:j])\n    return res\ndef common_member(list1,list2):\n    '''\n    Write a function to find the common members of two lists.\n    '''\n    res = []\n    for i in list1:\n        if i in list2:\n            res.append(i)\n    return res\ndef find_common(list1,list2):\n    '''\n    Write a function to find the common elements of two lists.\n    '''\n    res = []\n    for i in list1:\n        if i in list2:\n            res.append(i)\n    return res\ndef flatten_list(list1):\n    '''\n    Write a function to flatten a list.\n    '''\n    res = []\n    for i in list1:\n        if type(i) == list:\n            res += i\n        else:\n            res.append(i)\n    return res\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    res = []\n    for i in list1:\n        if i not in res:\n            res.append(i)\n    return res\ndef get_even_index(list1):\n    '''\n    Write a function to get all the even index values from a list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if i%2==0:\n            res.append(list1[i])\n    return res\ndef get_odd_index(list1):\n    '''\n    Write a function to get all the odd index values from a list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if i%2!=0:\n            res.append(list1[i])\n    return res\ndef get_negative_index(list1):\n    '''\n    Write a function to get all the negative index values from a list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if list1[i]<0:\n            res.append(list1[i])\n    return res\ndef get_positive_index(list1):\n    '''\n    Write a function to get all the negative index values from a list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if list1[i]>0:\n            res.append(list1[i])\n    return res\ndef index_list(list1,value):\n    '''\n    Write a function to find the first index of a value in a list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if list1[i]==value:\n            res.append(i)\n    return res\ndef get_positive_index_diff(list1):\n    '''\n    Write a function to get all the negative index values from a list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if list1[i]>0:\n            res.append(list1[i])\n    return res\ndef find_occurrences(list1,value):\n    '''\n    Write a function to find the number of occurrences of a specified element in the list.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        if list1[i]==value:\n            res += 1\n    return res\ndef list_count(list1,value):\n    '''\n    Write a function to count the number of occurrences of a specified element in the list.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        if list1[i]==value:\n            res += 1\n    return res\ndef rotate_list(list1):\n    '''\n    Write a function to rotate a list of elements.\n    '''\n    res = []\n    for i in range(len(list1)):\n        res.append(list1[i%len(lis"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    #pass\n    # Your code here\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    a=True\n    for i in list1:\n        if i=={}:\n            a=False\n            break\n    return a\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(list(map(str, nums))))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = ''\n    for i in nums:\n        res += str(i)\n    return int(res)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_list = []\n    for i in range(len(nums)):\n        num_list.append(str(nums[i]))\n    num_list.sort()\n    num_str = ''.join(num_list)\n    num_int = int(num_str)\n    return num_int\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    nums.sort()\n    return int(''.join(str(x) for x in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(x) for sublist in test_list for x in sublist]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_to_float_list = []\n    for i in test_list:\n        try:\n            list_to_float_list.append(float(i))\n        except ValueError:\n            pass\n    return list_to_float_list\n    \ndef float_to_list(test_float):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_to_list_list = []\n    try:\n        for i in test_float:\n            float_to_list_list.append([float(i)])\n    except ValueError:\n        pass\n    return float_to_list_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, l in enumerate(test_list):\n        if isinstance(l, list):\n            list_to_float(l)\n        else:\n            try:\n                test_list[i] = float(l)\n            except ValueError:\n                continue\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        for i in range(len(test_list)):\n            test_list[i] = float(test_list[i])\n    except Exception as e:\n        print(e)\n        print(\"You entered a non-numeric value in list. Please try again.\")\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        float_list = [float(elem) for elem in test_list]\n        return float_list\n    except ValueError:\n        return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # convert all the lists to floats\n    for index in range(len(test_list)):\n        try:\n            test_list[index] = float(test_list[index])\n        except:\n            pass\n    return test_list\n    \ndef plot_graphs(p_name, data_list):\n    '''\n    Write a function to plot all the lists in data_list.\n    '''\n    import matplotlib.pyplot as plt\n    import numpy as np\n    \n    for index in range(len(data_list)):\n        plt.plot(np.linspace(0,5,len(data_list[index])), data_list[index])\n    plt.title(p_name)\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Displacement\")\n    plt.legend([\"N=\"+str(n) for n in range(len(data_list))])\n    plt.show()\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sub_list in test_list:\n        sub_list = [float(i) for i in sub_list]\n        float_list.append(sub_list)\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split(' '))\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # your code here\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    #list_of_strings = string.split()\n    list_of_strings = []\n    for i in range(len(string)):\n        if string[i] == \" \":\n            list_of_strings.append(string[0:i])\n            string = string[i+1:len(string)]\n    list_of_strings.append(string)\n    return list_of_strings\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l = string.split()\n    return l\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split(' '))\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split(\" \"))\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if type(string)!= str:\n        return \"Input string is not a string.\"\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if len(arr)==1:\n        return arr[0]\n    if len(arr)>1:\n        #find the first element\n        for i in range(len(arr)):\n            if arr[i]==arr[0]:\n                continue\n            else:\n                break\n        #find the element that appears only once\n        for i in range(i,len(arr)):\n            if arr[i]==arr[0]:\n                continue\n            else:\n                return arr[0]\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if sorted_arr[i]!= sorted_arr[i+1]:\n            return sorted_arr[i]\n    return sorted_arr[-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    s_arr = sorted(arr)\n    d_arr = dict.fromkeys(s_arr)\n    s_arr = sorted(d_arr.keys())\n    return s_arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i, j = 0, len(arr)-1\n    while i < j:\n        if arr[i] == arr[j]:\n            i += 1\n            j -= 1\n        else:\n            return arr[i]\n    return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None or len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    i = 0\n    j = len(arr)-1\n    while i<j:\n        if arr[i] == arr[j]:\n            return arr[i]\n        else:\n            i += 1\n            j -= 1\n    return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i<j:\n        mid = (i + j) // 2\n        if arr[mid] == arr[mid+1]:\n            if arr[mid] == arr[mid-1]:\n                if mid == 0 or mid == len(arr)-1:\n                    return arr[mid]\n                i = mid\n            else:\n                i = mid + 1\n        else:\n            j = mid\n    return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i]!= arr[i+1]:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    index=0\n    while index<len(arr)-1:\n        if arr[index]==arr[index+1]:\n            index+=2\n        else:\n            break\n    return arr[index]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i]!= arr[i + 1]:\n                print(arr[i])\n                break\n        elif i == len(arr) - 1:\n            if arr[i]!= arr[i - 1]:\n                print(arr[i])\n                break\n        else:\n            if arr[i]!= arr[i + 1] and arr[i]!= arr[i - 1]:\n                print(arr[i])\n                break\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    a = []\n    b = []\n    if len(list1) % 2 == 0:\n        for i in list1:\n            if len(i) == 2:\n                a.append(i[0])\n                b.append(i[1])\n    else:\n        for i in list1:\n            if len(i) == 2:\n                a.append(i[0])\n                b.append(i[1])\n            else:\n                a.append(i[0])\n                b.append(i[1])\n    prod = []\n    for i in range(0, len(a), 2):\n        prod.append(a[i]*a[i+1])\n    prod_b = []\n    for i in range(0, len(b), 2):\n        prod_b.append(b[i]*b[i+1])\n    prod_c = []\n    for i in range(0, len(prod_b)):\n        prod_c.append(prod[i]*prod_b[i])\n    return(max(prod_c))\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        raise Exception('Not enough input elements.')\n    \n    product_pairs = [tuple(sorted(tuple_pair)) for tuple_pair in zip(list1, list1[1:])]\n    max_tuple_product = max(product_pairs, key=lambda x: abs(x[0] * x[1]))\n    \n    return max_tuple_product\n    "
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort()\n    max_prod = list1[0] * list1[1]\n    for i in range(0,len(list1) - 1, 2):\n        current_prod = list1[i] * list1[i+1]\n        if current_prod > max_prod:\n            max_prod = current_prod\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_prod = 0\n    for i in list1:\n        if i[0] < 0 and i[1] < 0:\n            max_abs_prod = max(max_abs_prod, (i[0]*i[1])*(-1))\n        elif i[0] < 0 or i[1] < 0:\n            max_abs_prod = max(max_abs_prod, (i[0]*i[1]))\n        else:\n            max_abs_prod = max(max_abs_prod, (i[0]*i[1]))\n    return max_abs_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2=[]\n    list3=[]\n    for i in list1:\n        if len(i)>1:\n            list2.append(i)\n    for i in list2:\n        list3.append(max(i))\n    return(max(list3))\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][1]) > abs(list1[i][1]*list1[j][0]):\n                new_list.append((list1[i], list1[j]))\n    return new_list\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def max_product(tuple):\n        return max(tuple) * min(tuple)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for a in list1:\n        for b in list1:\n            if a < b:\n                if b*b > a*a:\n                    if b*b > max:\n                        max = b*b\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max([abs(list1[i]*list1[i+1]) for i in range(len(list1)-1)])\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for index, number in enumerate(list1):\n        if len(list1) > index + 1:\n            list2.append(list1[index] * list1[index + 1])\n        else:\n            list2.append(0)\n    max_value = max(list2)\n    index_max = list2.index(max_value)\n    return list1[index_max - 1], list1[index_max], list1[index_max + 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        a, b = sum_divisors(i)\n        if a!= b and is_amicable(i, b) and is_amicable(i, a):\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_divisors(n):\n        divisors = []\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    from math import sqrt\n    amicable_nums = []\n    for num in range(1, limit):\n        divisor_sum = 0\n        for divisor in range(1, int(sqrt(num)) + 1):\n            if num % divisor == 0:\n                divisor_sum += divisor\n        if divisor_sum > num:\n            divisor_sum = 0\n            for divisor in range(1, int(sqrt(num)) + 1):\n                if num % divisor == 0:\n                    divisor_sum += divisor\n        if divisor_sum == num and num!= divisor_sum:\n            amicable_nums.append(num)\n            amicable_nums.append(divisor_sum)\n    return sum(amicable_nums)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_divisors(num):\n        divisors = []\n        for i in range(1,num):\n            if num%i == 0:\n                divisors.append(i)\n        return sum(divisors)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    print(f'The sum of all amicable numbers from 1 to {limit} is {sum(amicable_numbers(limit))}.')\n    \n    \ndef amicable_numbers(limit):\n    '''\n    Write a function to return all amicable numbers up to a specified limit.\n    '''\n    \n    amicable_numbers = []\n    for num in range(1, limit):\n        if num < amicable_numbers(num):\n            if (sum(amicable_numbers(num)) - sum(amicable_numbers(num) < num)) == num:\n                amicable_numbers.append(num)\n    return amicable_numbers\n    \n    \ndef amicable_numbers_sum_recursive(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    def amicable_numbers_recursive(num):\n        if num < amicable_numbers(num):\n            if (sum(amicable_numbers_recursive(num)) - sum(amicable_numbers_recursive(num) < num)) == num:\n                return num\n    \n    return sum(amicable_numbers_recursive(limit))\n    \n    \nif __name__ == '__main__':\n    \n    amicable_numbers_sum(10000)\n    print('')\n    amicable_numbers_sum_recursive(10000)\n    print('')\n    print(amicable_numbers(10000))\n    \n    \n    \n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_number_sum = 0\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_divisors(num):\n        '''\n        Find the sum of divisors of a number, using a list comprehension.\n        '''\n        return sum([i for i in range(1, num) if num % i == 0])\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        a = sum_factors(i)\n        b = sum_factors(a)\n        if i == b and a!= i:\n            amicable_numbers.add(i)\n            amicable_numbers.add(a)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = []\n    for i in range(2, limit + 1):\n        if i % 2!= 0:\n            for j in range(2, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    numbers.append(i)\n                    break\n    # print(numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        sum += sum_amicable_numbers(i)\n    return sum\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a=complex(a)\n    b=complex(b)\n    angle = cmath.phase(b/a)\n    return angle\n    "
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef angle_complex_v2(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return math.atan2(b,a)\ndef angle_complex_v3(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 0\n    if (b>=0 and a>=0):\n        angle = math.atan2(b,a)\n    elif (b<0 and a<0):\n        angle = 2*(math.pi) + math.atan2(-b,-a)\n    elif (b<0 and a>=0):\n        angle = math.pi + math.atan2(-b,a)\n    elif (b>=0 and a<0):\n        angle = math.pi + math.atan2(b,a)\n    return angle\ndef angle_complex_v4(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 0\n    if (b>=0 and a>=0):\n        angle = math.atan(b/a)\n    elif (b<0 and a<0):\n        angle = math.pi + math.atan(b/a)\n    elif (b<0 and a>=0):\n        angle = math.pi + math.atan(b/a)\n    elif (b>=0 and a<0):\n        angle = 2*(math.pi) + math.atan(b/a)\n    return angle\ndef angle_complex_v5(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if (b>0 and a>0):\n        angle = math.atan(b/a)\n    elif (b<0 and a<0):\n        angle = math.pi + math.atan(b/a)\n    elif (b<0 and a>0):\n        angle = math.pi + math.atan(b/a)\n    elif (b>0 and a<0):\n        angle = 2*(math.pi) + math.atan(b/a)\n    return angle\ndef angle_complex_v6(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 0\n    if (b>=0):\n        angle = math.atan(b/a)\n    elif (b<0):\n        angle = math.pi + math.atan(b/a)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a/b)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if isinstance(a,complex) and isinstance(b,complex):\n        return cmath.phase(a/b)\n    elif isinstance(a,complex) and not isinstance(b,complex):\n        return cmath.phase(a/complex(0,b))\n    elif not isinstance(a,complex) and isinstance(b,complex):\n        return cmath.phase(complex(a,b)/b)\n    else:\n        return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (math.atan(b/a))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0 and b == 0:\n        print(\"Division by zero error\")\n    elif a == 0 and b!= 0:\n        print(\"No angle\")\n    else:\n        return cmath.phase(complex(a,b))\n        \ndef circle_area(r):\n    '''\n    Write a function to get the area of a circle.\n    '''\n    return cmath.pi * r ** 2\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to get the perimeter of a circle.\n    '''\n    return 2 * cmath.pi * r\n    \ndef tri_area(b,h):\n    '''\n    Write a function to get the area of a triangle.\n    '''\n    return 0.5 * b * h\n    \ndef tri_perimeter(b,h):\n    '''\n    Write a function to get the perimeter of a triangle.\n    '''\n    return b + h + cmath.sqrt((b ** 2 + h ** 2) / 2)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = complex(a)\n    b = complex(b)\n    return cmath.phase(a / b)\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0, count_1 = 0, 0\n    max_difference = 0\n    for char in string:\n        if char == '1':\n            count_1 += 1\n        else:\n            count_0 += 1\n        difference = count_1 - count_0\n        if difference > max_difference:\n            max_difference = difference\n    return max_difference\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    maximum = 0\n    for i in range(len(string)):\n        s = string[i:]\n        count_0 = 0\n        count_1 = 0\n        for c in s:\n            if c == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n        if abs(count_0 - count_1) > maximum:\n            maximum = abs(count_0 - count_1)\n    return maximum\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    curr_diff = 0\n    for i in string:\n        if i == '1':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        max_diff = max(max_diff,curr_diff)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string) \n    # Create two arrays to store count of 0s and count of 1s respectively \n    count0 = [0 for i in range(n + 1)] \n    count1 = [0 for i in range(n + 1)] \n    # Traverse the given string and update count of 0s and count of 1s in the array \n    for i in range(n): \n        if string[i] == '0': \n            count0[i + 1] = count0[i] + 1\n            count1[i + 1] = count1[i] \n        else: \n            count0[i + 1] = count0[i] \n            count1[i + 1] = count1[i] + 1\n    # Initialize maximum difference between number of 0s and number of 1s as 0 \n    maximumDifference = 0\n    # Traverse the array and find the maximum difference between count of 0s and count of 1s \n    for i in range(1, n + 1): \n        maximumDifference = max(maximumDifference, count0[i] - count1[i]) \n    return maximumDifference"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string)==0:\n        return 0\n    if len(string)==1:\n        if string[0]==\"0\":\n            return 0\n        else:\n            return 1\n    d=[]\n    for i in range(len(string)):\n        if string[i]==\"0\":\n            d.append(i)\n    d.append(len(string))\n    ans=[]\n    for i in range(len(d)-1):\n        temp=d[i+1]-d[i]\n        ans.append(temp)\n    return(max(ans))\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # create a variable to keep track of the length of longest string\n    length = 0 \n    # create a variable to keep track of the maximum difference\n    max_difference = 0\n    # iterate through the binary string\n    for i in range(len(string)):\n        # create a variable to count the number of 0s\n        count0 = 0\n        # create a variable to count the number of 1s\n        count1 = 0\n        # iterate through the binary string\n        for j in range(i, len(string)):\n            # if the character is a 0, add one to the 0 count variable\n            if string[j] == '0':\n                count0 += 1\n            # if the character is a 1, add one to the 1 count variable\n            else:\n                count1 += 1\n        # if the count0 variable is greater than the count1 variable\n        if count0 > count1:\n            # add the difference to the max_difference variable\n            difference = count0 - count1\n            if difference > max_difference:\n                max_difference = difference\n        # if the count1 variable is greater than the count0 variable\n        elif count0 < count1:\n            # add the difference to the max_difference variable\n            difference = count1 - count0\n            if difference > max_difference:\n                max_difference = difference\n    # return the max_difference variable\n    return max_difference\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    curr_length = 0\n    for char in string:\n        if char == '0':\n            curr_length = curr_length + 1\n        else:\n            curr_length = 0\n        if curr_length > max_length:\n            max_length = curr_length\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    import re\n    string = re.sub('[^0-1]', '', string)\n    ans = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            ans += 1\n        else:\n            ans -= 1\n        if ans < 0:\n            return i + 1\n    return len(string)\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zeros = 0\n    ones = 0\n    max_length = 0\n    for char in string:\n        if char == '0':\n            zeros += 1\n        else:\n            ones += 1\n        max_length = max(max_length, zeros, ones)\n    return max_length\nprint(find_length
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max(map(lambda string: string.count('0') - string.count('1'), string.split('0')))\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # The function should return the sum of common divisors of two numbers.\n    a, b = int(a), int(b)\n    a1, b1 = a, b\n    d, i, j = 0, 1, 0\n    while i <= a1:\n        if a1 % i == 0:\n            j = i\n            while j <= b1:\n                if b1 % j == 0:\n                    d += j\n                    j += i\n                j += i\n        i += 1\n    return d\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return sum(b,a%b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a<b:\n        a,b=b,a\n    l=[]\n    for i in range(1,a+1):\n        if (a%i==0 and b%i==0):\n            l.append(i)\n    return sum(l)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    list_of_common_divisors = []\n    for i in range(1, min(a,b)+1): \n        if a % i == 0 and b % i == 0: \n            list_of_common_divisors.append(i)\n    return sum(list_of_common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i=1 \n    sum=0\n    while i<=b: \n        if a%i==0 and b%i==0: \n            sum=sum+i\n        i+=1\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=[]\n    for i in range(1,a+1):\n        if a%i==0:\n            c.append(i)\n    d=[]\n    for j in range(1,b+1):\n        if b%j==0:\n            d.append(j)\n    for f in c:\n        if f in d:\n            g=f\n    return g \n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a < 0 or b < 0:\n        return None\n    else:\n        return sum_of_common_divisors(a,b)\n        \ndef sum_of_common_divisors(a, b):\n    if a==0 or b==0:\n        return None\n    else:\n        common_divisors = []\n        for i in range(1, min(a,b) + 1):\n            if a % i == 0 and b % i == 0:\n                common_divisors.append(i)\n        return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a, b): \n        if a == 0: \n            return b \n        return gcd(b % a, a) \n    return gcd(a,b) \ndef convertToDecimal(a, b, n): \n    '''\n    Write a python function to convert a given number to decimal representation.\n    '''\n    r = 0\n    while(b!= 0): \n        r = r * 10 + a % b \n        a = a // b \n        b = b // 10\n    return r \ndef isPalindrome(n): \n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    rev = 0\n    temp = n \n    while(n > 0): \n        r = n % 10\n        rev = rev * 10 + r \n        n = n // 10\n    return rev == temp \ndef isPrime(n): \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 1: \n        return False\n    for i in range(2,n): \n        if n % i == 0: \n            return False\n    return True\ndef findPrimeFactors(n): \n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    l = []\n    while n % 2 == 0: \n        l.append(2) \n        n = n / 2\n    for i in range(3,int(math.sqrt(n))+1,2): \n        while n % i== 0: \n            l.append(i) \n            n = n / i \n    if n > 2: \n        l.append(n)\n    return l \ndef findGCD(a, b): \n    '''\n    Write a python function to find the greatest common divisor (GCD) of two given numbers.\n    '''\n    if a == 0: \n        return b \n    return findGCD(b % a, a) \ndef findLCM(a, b): \n    '''\n    Write a python function to find the least common multiple (LCM) of two given numbers.\n    '''\n    return (a*b) / findGCD(a, b) \ndef findLCMofArray(arr): \n    '''\n    Write a python function to find the least common multiple (LCM) of all the elements of the array.\n    '''\n    res = arr[0] \n    for i in range(1, len(arr)): \n        res = findLCM(res, arr[i]) \n    return res \ndef generate_abundant_numbers(n): \n    '''\n    Write a python function to generate all the abundant numbers between 1 and n.\n    '''\n    abundant = []\n    s = 0\n    for i in range(1, n+1):\n        if findSumOfFactors(i) > i:\n            abundant.append(i)\n    return abundant\ndef isAbundantNumber(n): \n    '''\n    Write a python function to check whether a given number is abundant or not.\n    '''\n    if findSumOfFactors(n) > n: \n        return True\n    return False\ndef isDivisibleByAbundantNumber(n): \n    '''\n    Write a python function to check whether a given number is divisible by any abundant number.\n    '''\n    for i in abundant:\n        if n % i == 0: \n            return True\n    return False\ndef findAllDivisors(n): \n    '''\n    Write a python function to find all the divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1, n+1): \n        if n % i == 0: \n            divisors.append(i)\n    return divisors\ndef isDivisibleByAllAbundantNumbers(n): \n    '''\n    Write a python function to check whether a given number is divisible by all abundant numbers.\n    '''\n    for i in abundant:\n        if n % i!= 0: \n            return False\n    return True\ndef generateAllAbundantNumbers(n): \n    '''\n    Write a python function to generate all the abundant numbers between 1 and n.\n    '''\n    abundant = []\n    s = 0\n    for i in range(1, n+1):\n        if findSumOfFactors(i) > i:\n            abundant.append(i)\n    return abundant\ndef findAmicableNumber(n): \n    '''\n    Write a python function to find the amicable pair of a given number.\n    '''\n    l = []\n    for i in range(1, n+1): \n        sum1 = findSumOfFactors(i) \n        if sum1 == i: \n            continue\n        sum2 = findSumOfFactors(sum1) \n        if sum2 == i: \n            l.append((i, sum1))\n    return l \ndef findAmicableNumbers(n): \n    '''\n    Write a python function to find all amicable pairs between 1 and n.\n    '''\n    l = []\n    for i in range(1, n+1): \n        sum1 = findSumOfFactors(i) \n        if sum1 == i: \n            continue\n        sum2 = findSumOfFactors(sum1) \n        if sum2 == i: \n            l.append((i, sum1))\n    return l \ndef isAmicable(n1, n2): \n    '''\n    Write a python function to check whether two given numbers are amicable or not.\n    '''\n    sum1 = findSumOfFactors(n1) \n    sum2 = findSumOfFactors(n2) \n    return sum1 == n2 and sum2 == n1 \ndef findGCD_of_2numbers(a,b): \n    '''\n    Write a python function to find the greatest common divisor (GCD) of two given numbers.\n    '''\n    if a == 0: \n        return b \n    return findGCD_of_2numbers(b % a, a) \ndef findLCM_of_2numbers(a,b): \n    '''\n    Write a python function to find the least common multiple (LCM) of two given numbers.\n    '''\n    return (a*b) / findGCD_of_2numbers(a, b) \ndef findLCM_of_3numbers(a,b,c): \n    '''\n    Write a python function to find the least common multiple (LCM) of 3 given numbers.\n    '''\n    return (a*b*c) / findGCD_of_3numbers(a,b,c)\ndef generate_amicable_numbers(n): \n    '''\n    Write a python function to generate all the amicable numbers between 1 and n.\n    '''\n    amicable = []\n    for i in range(1, n+1): \n        sum1 = findSumOfFactors(i) \n        if sum1 == i: \n            continue\n        sum2 = findSumOfFactors(sum1) \n        if sum2 == i: \n            amicable.append(i)\n    return amicable\ndef findLCM_of_5numbers(a,b,c,d,e): \n    '''\n    Write a python function to find the least common multiple (LCM) of 5 given numbers.\n    '''\n    return (a*b*c*d*e) / findGCD_of_5numbers(a,b,c,d,e)\ndef findLCM_of_6numbers(a,b,c,d,e,f): \n    '''\n    Write a python function to find the least common multiple (LCM) of 6 given numbers.\n    '''\n    return (a*b*c*d*e*f) / findGCD_of_6numbers(a,b,c,d,e,f)\ndef findLCM_of_7numbers(a,b,c,d,e,f,g): \n    '''\n    Write a python function to find the least common multiple (LCM) of 7 given numbers.\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 1\n    for i in range(2, min(a, b)+1):\n        if a%i == 0 and b%i == 0:\n            sum *= i\n    return sum\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n    \ndef multiply_int_print(x, y):\n    print(x * y)\n    \ndef sum_list(a, b, c):\n    return a + b + c\n    \ndef sum_list_print(a, b, c):\n    print(a + b + c)\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    #return [i for i in str if len(i) > n]\n    return [i for i in str if len(i) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into individual words using the split function\n    list = str.split()\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    for word in words:\n        if len(word) > n:\n            print(word)\n    return None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    #your code here\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    return [word for word in words if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    string = str.split(\" \")\n    output = []\n    for word in string:\n        if len(word) > n:\n            output.append(word)\n    return output\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str.split() if len(x) > n]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    columns = []\n    rows = []\n    #initialize columns, rows, and sum\n    col_index = 0\n    row_index = 0\n    sum_cols = 0\n    sum_rows = 0\n    sum = 0\n    while row_index < len(my_matrix):\n        rows.append(my_matrix[row_index])\n        row_index = row_index + 1\n    while col_index < len(my_matrix[0]):\n        columns.append(my_matrix[0][col_index])\n        col_index = col_index + 1\n    #iterate through the rows, and add each value to the sum\n    for row in rows:\n        for i in range(len(row)):\n            sum = sum + row[i]\n    #iterate through the columns, and add each value to the sum\n    for col in columns:\n        for i in range(len(col)):\n            sum = sum + col[i]\n    #iterate through the 2x2 sub-matrix, and add each value to the sum\n    sub_matrix_x = 0\n    sub_matrix_y = 0\n    sub_matrix_rows = []\n    sub_matrix_cols = []\n    while sub_matrix_x < 2:\n        sub_matrix_cols = []\n        while sub_matrix_y < 2:\n            for i in range(sub_matrix_x, sub_matrix_x + 2):\n                for j in range(sub_matrix_y, sub_matrix_y + 2):\n                    sub_matrix_cols.append(my_matrix[i][j])\n            sub_matrix_y = sub_matrix_y + 1\n        for i in range(len(sub_matrix_cols)):\n            sum = sum + sub_matrix_cols[i]\n        sub_matrix_x = sub_matrix_x + 1\n    #return if the sum is equal to the total number of values in the matrix\n    return sum == len(my_matrix) * len(my_matrix[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    print(my_matrix)\n    sum1 = 0\n    sum2 = 0\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[i])):\n            sum1 = sum1 + my_matrix[i][j]\n        for j in range(0, len(my_matrix[i])):\n            sum2 = sum2 + my_matrix[i][j]\n    sum3 = 0\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[i])):\n            sum3 = sum3 + my_matrix[j][i]\n    sum4 = 0\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[i])):\n            sum4 = sum4 + my_matrix[j][j]\n    sum5 = 0\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[i])):\n            sum5 = sum5 + my_matrix[(len(my_matrix)-1)-i][(len(my_matrix)-1)-j]\n    print(sum1, sum2, sum3, sum4, sum5)\n    if sum1 == sum2 == sum3 == sum4 == sum5:\n        return True\n    else:\n        return False\n    \ndef min_max_test(my_list):\n    '''\n    Write a function to test if the list contains a minimum and maximum.\n    '''\n    if len(my_list) == 1:\n        return True\n    else:\n        my_list.sort()\n        if my_list[0] == my_list[len(my_list)-1]:\n            return True\n        else:\n            return False\n    \ndef binary_search(my_list, item):\n    '''\n    Write a function to test if an item is in the list.\n    '''\n    my_list.sort()\n    low = 0\n    high = len(my_list)-1\n    while low <= high:\n        mid = (low+high)//2\n        guess = my_list[mid]\n        if guess == item:\n            return True\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n    \ndef create_list(length):\n    '''\n    Write a function to create a list of random numbers.\n    '''\n    import random\n    my_list = []\n    for i in range(0, length):\n        my_list.append(random.randint(0, length))\n    return my_list\n    \ndef count_matches(my_list1, my_list2):\n    '''\n    Write a function to count the number of matches between two lists.\n    '''\n    count = 0\n    for i in range(0, len(my_list1)):\n        if binary_search(my_list2, my_list1[i]):\n            count = count + 1\n    return count\n    \ndef find_sum_of_digits(my_number):\n    '''\n    Write a function to return the sum of the digits in the number.\n    '''\n    sum = 0\n    while my_number > 0:\n        sum = sum + my_number%10\n        my_number = my_number//10\n    return sum\n    \ndef reverse_string(my_string):\n    '''\n    Write a function to return a string in reverse order.\n    '''\n    string = ''\n    for i in range(len(my_string)-1, -1, -1):\n        string = string + my_string[i]\n    return string\n    \ndef test_function(test_case):\n    s = test_case[0]\n    t = test_case[1]\n    \n    if reverse_string(s) == t:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n        \ns = \"water\"\nt = \"terw\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"racecar\"\nt = \"racecar\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"demons\"\nt = \"neims\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"shadowers\"\nt = \"erawer\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"mole\"\nt = \"lemo\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"Hello World\"\nt = \"dlrow olleH\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"Sauce\"\nt = \"ueces\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"vegetable\"\nt = \"bleget\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"animal\"\nt = \"emina\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"danger\"\nt = \"gniad\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"what?\"\nt = \"hat?\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"what\"\nt = \"who\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"what\"\nt = \"what?\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"what?\"\nt = \"what?\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"what!\"\nt = \"what?\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"what!\"\nt = \"what!\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"what\"\nt = \"what!\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"what?\"\nt = \"what!\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"what!\"\nt = \"what!\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"qwert\"\nt = \"qwert\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"qwert\"\nt = \"qwerty\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"qwert\"\nt = \"qwerty!\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"qwert\"\nt = \"qwert!\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"qwert!\"\nt = \"qwert!\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"qwert\"\nt = \"qwer\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"qwert\"\nt = \"qwer\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"qwert\"\nt = \"qwer\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"qwert\"\nt = \"qwer\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"qwert\"\nt = \"qwer\"\ntest_case = [s, t]\ntest_function(test_case)\n        \ns = \"qwert\"\nt = \"qwer\"\ntest_cas"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check for:\n    # 1. A magic square is a square matrix of n numbers, where the sum of each row, column and diagonal sum is equal to the same number.\n    # 2. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 3. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 4. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 5. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 6. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 7. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 8. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 9. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 10. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 11. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 12. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 13. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 14. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 15. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 16. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 17. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 18. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 19. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 20. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 21. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 22. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 23. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 24. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 25. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 26. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 27. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 28. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 29. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 30. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 31. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 32. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 33. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 34. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 35. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 36. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 37. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 38. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 39. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 40. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 41. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 42. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 43. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 44. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 45. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 46. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 47. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 48. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 49. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 50. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 51. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 52. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 53. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 54. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 55. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 56. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 57. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 58. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 59. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 60. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 61. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 62. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 63. A magic square is an n x n matrix in which the sum of each ro"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_row = set([0,1,2])\n    magic_col = set([0,1,2])\n    magic_diag = set([0,1,2])\n    \n    for row in range(len(my_matrix)):\n        for col in range(len(my_matrix)):\n            if (my_matrix[row][col] in magic_row or\n                my_matrix[row][col] in magic_col or \n                my_matrix[row][col] in magic_diag):\n                return False\n            \n    return True\n            \n            \n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #list of magic numbers\n    magic_numbers = [\n        [8, 1, 6, 3, 5, 7, 4, 9, 2],\n        [6, 1, 8, 7, 5, 3, 2, 9, 4],\n        [4, 9, 2, 3, 5, 7, 8, 1, 6],\n        [2, 9, 4, 7, 5, 3, 6, 1, 8],\n        [8, 3, 4, 1, 5, 9, 6, 7, 2],\n        [4, 3, 8, 9, 5, 1, 2, 7, 6],\n        [6, 7, 2, 1, 5, 9, 8, 3, 4],\n        [2, 7, 6, 9, 5, 1, 4, 3, 8]\n    ]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #import pdb; pdb.set_trace()\n    matrix_sum = sum(my_matrix)\n    sums = [None] * 3\n    for i in range(0,3):\n        sums[0] += my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2]\n        sums[1] += my_matrix[0][i] + my_matrix[1][i] + my_matrix[2][i]\n        sums[2] += my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    if matrix_sum!= sum(sums):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    result = []\n    for row in my_matrix:\n        result.append(sum(row))\n    result.append(sum(my_matrix[0])+my_matrix[1][1]-my_matrix[1][0])\n    \n    for r in range(0,len(my_matrix)-1):\n        result.append(my_matrix[0][r]+my_matrix[r+1][0])\n        \n    for c in range(0,len(my_matrix)):\n        result.append(my_matrix[0][c]+my_matrix[0][c+1])\n        \n    return(sum(result)==(sum(my_matrix[0]))**2)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #first, we'll create a helper function to ensure the matrix is a square.\n    def matrix_square_check(matrix):\n        #check to see that the first row matches the length of the matrix\n        if len(matrix) == len(matrix[0]):\n            return True\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not len(my_matrix)==len(my_matrix[0]):\n        return False\n    rows = [row for row in my_matrix]\n    columns = [column for column in zip(*my_matrix)]\n    diagonals = [my_matrix[i][i] for i in range(len(my_matrix))]\n    anti_diagonals = [my_matrix[i][-i-1] for i in range(len(my_matrix))]\n    return sum(rows) == sum(columns) == sum(diagonals) == sum(anti_diagonals)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #check rows\n    for row in my_matrix:\n        sumRow = sum(row)\n        if sumRow!= 45:\n            return False\n    #check cols\n    for col in zip(*my_matrix):\n        sumCol = sum(col)\n        if sumCol!= 45:\n            return False\n    #check diag\n    diag1 = 0\n    diag2 = 0\n    for i in range(0,len(my_matrix)):\n        diag1 += my_matrix[i][i]\n        diag2 += my_matrix[i][len(my_matrix)-i-1]\n    if diag1!= 45 or diag2!= 45:\n        return False\n    return True\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    max_count = max(dict.values())\n    print(max_count)\n    return [(key, value) for key, value in dict.items() if value == max_count]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # using default dict.\n    # using dict.get method, if no key is present it will return a value given to it\n    # using default dict.get(key, default_value) method.\n    # dict.get(key, default_value) will return the value if key is present in the dict.\n    # otherwise it will return the default value.\n    # Eg: dict.get(key, default_value)\n    dict_nums = defaultdict(int)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_num = max(d, key=d.get)\n    return max_num\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Dict with frequency of each item.\n    dict = defaultdict(int)\n    # Map of each item with its frequency\n    dict2 = dict.fromkeys(nums,0)\n    # Counting frequency of each item\n    for i in nums:\n        dict[i] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(int)\n    max_freq = 0\n    for i in range(len(nums)):\n        dict[nums[i]] += 1\n        if dict[nums[i]] > max_freq:\n            max_freq = dict[nums[i]]\n    return max_freq\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    my_dict = defaultdict(int)\n    for i in nums:\n        my_dict[i] += 1\n    max_count = 0\n    max_item = None\n    for key, value in my_dict.items():\n        if value > max_count:\n            max_count = value\n            max_item = key\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_num = {}\n    list_num = []\n    for num in nums:\n        if num in dict_num:\n            dict_num[num] += 1\n        else:\n            dict_num[num] = 1\n    for key,value in dict_num.items():\n        list_num.append(value)\n    return max(list_num)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_item = None\n    count_dict = defaultdict(int)\n    for item in nums:\n        count_dict[item] += 1\n        if count_dict[item] > max_count:\n            max_item = item\n            max_count = count_dict[item]\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    item = None\n    for num in nums:\n        if nums.count(num) > max_count:\n            max_count = nums.count(num)\n            item = num\n    return item\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    vowel_indices = [i for i, ch in enumerate(str1) if ch in vowels]\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowel_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_str = vowel_str + str1[i]\n    return vowel_str[::-1]\n    \ndef check_pangram(str1, alphabet='abcdefghijklmnopqrstuvwxyz'):\n    '''\n    Write a python function to check whether a given string is a pangram or not (a pangram is a sentence using every letter of the alphabet at least once).\n    '''\n    str1 = str1.lower()\n    for i in alphabet:\n        if i not in str1:\n            return False\n    return True\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    str1 = str1.lower()\n    vowels_in_str1 = [s for s in str1 if s in vowels]\n    vowels_in_str1.reverse()\n    return \"\".join(vowels_in_str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a','e','i','o','u','A','E','I','O','U')\n    vowel_indices = []\n    for i, c in enumerate(str1):\n        if c in vowels:\n            vowel_indices.append(i)\n    return ''.join([c if i not in vowel_indices else c.upper() for i, c in enumerate(str1)])\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel_index=[]\n    vowel_chars=[]\n    for i in range(len(str1)):\n        if str1[i] in \"aeiouAEIOU\":\n            vowel_index.append(i)\n            vowel_chars.append(str1[i])\n    for i in range(len(vowel_index)):\n        str1=str1[0:vowel_index[i]]+vowel_chars[i]+str1[vowel_index[i]+1:len(str1)]\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowels_list = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_list.append(i)\n    str_vowels_list = vowels_list[::-1]\n    for i in range(len(str_vowels_list)):\n        str1 = str1[:str_vowels_list[i]] + str1[str_vowels_list[i]] + str1[str_vowels_list[i] + 1:]\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = ['a','e','i','o','u','A','E','I','O','U']\n    str_list = list(str1)\n    vowel_list = []\n    for s in str1:\n        if s in vowel:\n            vowel_list.append(s)\n    print(vowel_list)\n    vowel_list.reverse()\n    print(vowel_list)\n    i = 0\n    j = 0\n    for s in str_list:\n        if s in vowel:\n            str_list[i] = vowel_list[j]\n            j+=1\n        i+=1\n    return ''.join(str_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    str2 = list(str1)\n    i = 0\n    j = len(str2) - 1\n    while i < j:\n        if str2[i].lower() not in vowels:\n            i += 1\n        elif str2[j].lower() not in vowels:\n            j -= 1\n        else:\n            str2[i], str2[j] = str2[j], str2[i]\n            i += 1\n            j -= 1\n    return ''.join(str2)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowels = [i for i in vowels]\n    vowels_list = [i for i in vowels]\n    vowels_list.reverse()\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowels_in_str = ''.join(c for c in str1 if c in vowels)\n    reversed_vowels_in_str = vowels_in_str[::-1]\n    return str1.replace(vowels_in_str, reversed_vowels_in_str)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for char in tup1:\n        str1 += char\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    my_str = ''\n    for item in tup1:\n        my_str += item\n    return my_str\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    assert isinstance(tup1, tuple), 'Input is not a tuple'\n    tup_str = ''.join(tup1)\n    return tup_str\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1 = ''.join(tup1)\n    return tup1\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = \"(\"\n    for i in tup1:\n        s += str(i) + \" \"\n    s = s[0:-1]\n    s += \")\"\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for n in nums:\n        if n < 0:\n            s += n\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # 1st solution\n    # total = 0\n    # for num in nums:\n    #     if num < 0:\n    #         total += num\n    # return total\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for i in nums:\n        if i < 0:\n            count += i\n    return count\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for num in nums:\n        if num < 0:\n            s += num\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return None\n    elif len(nums) == 1:\n        return nums[0] if nums[0] < 0 else 0\n    else:\n        n = 0\n        for i in nums:\n            if i < 0:\n                n += i\n        return n\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    list_negativenum=[]\n    for i in nums:\n        if i<0:\n            list_negativenum.append(i)\n    print(f\"The negative numbers in the list are {list_negativenum}\")\n    print(f\"The sum of the negative numbers is {sum(list_negativenum)}\")\n    \ndef list_num():\n    '''\n    Write a program to append the sum of the elements of a list to itself.\n    '''\n    num=[1,2,3,4,5]\n    print(f\"The original list is {num}\")\n    print(f\"The appended list is {[num+num]}\")\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2*n - 1))\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\ndef sum_digits(n):\n    '''\n    Write a function that returns the sum of the digits of N\n    '''\n    return sum([int(x) for x in str(n)])\ndef sum_difference(n):\n    '''\n    Write a function that returns the difference between the sum of the digits of N and the sum of the digits of N in hexagonal notation\n    '''\n    return hexagonal_num(n)-sum_digits(n)\ndef print_hexagonal_index(n):\n    '''\n    Write a function that prints the hexagonal number for the given index n\n    '''\n    print(hexagonal_num(n))\ndef compute_triangular_index(n):\n    '''\n    Write a function that returns the nth triangular number, where n is a positive integer.\n    '''\n    return n*(n+1)/2\ndef print_triangular_number(n):\n    '''\n    Write a function that prints the nth triangular number, where n is a positive integer.\n    '''\n    print(compute_triangular_index(n))\ndef compute_pentagonal_index(n):\n    '''\n    Write a function that returns the nth pentagonal number, where n is a positive integer.\n    '''\n    return n*(3*n-1)/2\ndef print_pentagonal_number(n):\n    '''\n    Write a function that prints the nth pentagonal number, where n is a positive integer.\n    '''\n    print(compute_pentagonal_index(n))\ndef compute_hexagonal_index(n):\n    '''\n    Write a function that returns the nth hexagonal number, where n is a positive integer.\n    '''\n    return n*(2*n-1)\ndef print_hexagonal_number(n):\n    '''\n    Write a function that prints the nth hexagonal number, where n is a positive integer.\n    '''\n    print(compute_hexagonal_index(n))\ndef compute_triangular_index(n):\n    '''\n    Write a function that returns the nth triangular number, where n is a positive integer.\n    '''\n    return n*(n+1)/2\ndef print_triangular_number(n):\n    '''\n    Write a function that prints the nth triangular number, where n is a positive integer.\n    '''\n    print(compute_triangular_index(n))\ndef compute_pentagonal_index(n):\n    '''\n    Write a function that returns the nth pentagonal number, where n is a positive integer.\n    '''\n    return n*(3*n-1)/2\ndef print_pentagonal_number(n):\n    '''\n    Write a function that prints the nth pentagonal number, where n is a positive integer.\n    '''\n    print(compute_pentagonal_index(n))\ndef compute_hexagonal_index(n):\n    '''\n    Write a function that returns the nth hexagonal number, where n is a positive integer.\n    '''\n    return n*(2*n-1)\ndef print_hexagonal_number(n):\n    '''\n    Write a function that prints the nth hexagonal number, where n is a positive integer.\n    '''\n    print(compute_hexagonal_index(n))\ndef compute_triangular_index(n):\n    '''\n    Write a function that returns the nth triangular number, where n is a positive integer.\n    '''\n    return n*(n+1)/2\ndef print_triangular_number(n):\n    '''\n    Write a function that prints the nth triangular number, where n is a positive integer.\n    '''\n    print(compute_triangular_index(n))\ndef compute_pentagonal_index(n):\n    '''\n    Write a function that returns the nth pentagonal number, where n is a positive integer.\n    '''\n    return n*(3*n-1)/2\ndef print_pentagonal_number(n):\n    '''\n    Write a function that prints the nth pentagonal number, where n is a positive integer.\n    '''\n    print(compute_pentagonal_index(n))\ndef compute_hexagonal_index(n):\n    '''\n    Write a function that returns the nth hexagonal number, where n is a positive integer.\n    '''\n    return n*(2*n-1)\ndef print_hexagonal_number(n):\n    '''\n    Write a function that prints the nth hexagonal number, where n is a positive integer.\n    '''\n    print(compute_hexagonal_index(n))\ndef compute_triangular_index(n):\n    '''\n    Write a function that returns the nth triangular number, where n is a positive integer.\n    '''\n    return n*(n+1)/2\ndef print_triangular_number(n):\n    '''\n    Write a function that prints the nth triangular number, where n is a positive integer.\n    '''\n    print(compute_triangular_index(n))\ndef compute_pentagonal_index(n):\n    '''\n    Write a function that returns the nth pentagonal number, where n is a positive integer.\n    '''\n    return n*(3*n-1)/2\ndef print_pentagonal_number(n):\n    '''\n    Write a function that prints the nth pentagonal number, where n is a positive integer.\n    '''\n    print(compute_pentagonal_index(n))\ndef compute_hexagonal_index(n):\n    '''\n    Write a function that returns the nth hexagonal number, where n is a positive integer.\n    '''\n    return n*(2*n-1)\ndef print_hexagonal_number(n):\n    '''\n    Write a function that prints the nth hexagonal number, where n is a positive integer.\n    '''\n    print(compute_hexagonal_index(n))\ndef compute_triangular_index(n):\n    '''\n    Write a function that returns the nth triangular number, where n is a positive integer.\n    '''\n    return n*(n+1)/2\ndef print_triangular_number(n):\n    '''\n    Write a function that prints the nth triangular number, where n is a positive integer.\n    '''\n    print(compute_triangular_index(n))\ndef compute_pentagonal_index(n):\n    '''\n    Write a function that returns the nth pentagonal number, where n is a positive integer.\n    '''\n    return n*(3*n-1)/2\ndef print_pentagonal_number(n):\n    '''\n    Write a function that prints the nth pentagonal number, where n is a positive integer.\n    '''\n    print(compute_pentagonal_index(n))\ndef compute_hexagonal_index(n):\n    '''\n    Write a function that returns the nth hexagonal number, where n is a positive integer.\n    '''\n    return n*(2*n-1)\ndef print_hexagonal_number(n):\n    '''\n    Write a function that prints the nth hexagonal number, where n is a positive integer.\n    '''\n    print(compute_hexagonal_index(n))\ndef compute_triangular_index(n):\n    '''\n    Write a function that returns the nth triangular number, where n is a positive integer.\n    '''\n    return n*(n+1)/2\ndef print_triangular_number(n):\n    '''\n    Write a function that prints the nth triangular number, where n is a positive integer.\n    '''\n    print(compute_triangular_index(n))\ndef compute_pentagonal_index(n):\n    '''\n    Write a function that returns the nth pentagonal number, where n is a positive integer.\n    '''\n    return n*(3*n-1)/2\ndef print_pentagonal_number(n):\n    '''\n    Write a function that prints the nth pentagonal number, where n is a positive integer.\n    '''\n    print(compute_pentagonal_index(n))\ndef compute_hexagonal_index(n):\n    '''\n    Write a function that returns the nth hexagonal number, where n is a positive integer.\n    '''\n    return n*(2*n-1)\ndef print_hexagona"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # hexagonal number = (2(n-1) + 1)/3\n    # nth hexagonal number = (2(n-1) + 1) / 3 + n / 2 - 1\n    \n    if n == 1:\n        return 1\n    else:\n        return (2*(n-1) + 1)//3 + n // 2 - 1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    \n    \n    def hex_nums(n):\n        if n == 1:\n            return 1\n        return n * 6 * (2 * n - 1)\n    \n    def find_n(n):\n        count = 0\n        hex_num = hex_nums(count)\n        while hex_num <= n:\n            count += 1\n            hex_num = hex_nums(count)\n        return count\n    \n    return hex_nums(find_n(n))\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_non_zeroes += 1\n            \n    return num_zeroes / num_non_zeroes\n    \ndef zero_count_alt(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #Initialize zeroes and non-zeroes to 0\n    zeroes = 0\n    non_zeroes = 0\n    \n    #Loop through list\n    for num in nums:\n        #Check if the current number is a zero\n        if num == 0:\n            #Increment the number of zeroes\n            zeroes += 1\n        else:\n            #Increment the number of non-zeroes\n            non_zeroes += 1\n            \n    #Return the ratio of zeroes to non-zeroes\n    return zeroes / non_zeroes\n    \ndef is_array_identical(nums1, nums2):\n    '''\n    Write a function to determine if two arrays are identical.\n    '''\n    #Initialize identity to False\n    identity = False\n    \n    #Loop through array 1\n    for num in nums1:\n        #Loop through array 2\n        for num2 in nums2:\n            #Check if the current number in array 2 is the same as the current number in array 1\n            if num == num2:\n                #Update the identity to True if it is\n                identity = True\n    \n    #Return the identity\n    return identity\n    \ndef is_array_identical_alt(nums1, nums2):\n    '''\n    Write a function to determine if two arrays are identical.\n    '''\n    #Initialize identity to False\n    identity = False\n    \n    #Loop through array 1\n    for num in nums1:\n        #Check if the current number in array 2 is the same as the current number in array 1\n        if num in nums2:\n            #Update the identity to True if it is\n            identity = True\n        else:\n            #If the number is not the same, return false\n            return False\n    \n    #Return the identity\n    return identity\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Solution 1:\n    # Using Counters\n    # num_0 = 0\n    # num_1 = 0\n    # for n in nums:\n    #     if n == 0:\n    #         num_0 += 1\n    #     else:\n    #         num_1 += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return sum(nums)/sum([1 for x in nums if x == 0])\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    number_zeros = 0\n    number_non_zeros = 0\n    for number in nums:\n        if number == 0:\n            number_zeros += 1\n        else:\n            number_non_zeros += 1\n    return number_zeros / number_non_zeros\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n    for x in nums:\n        if x == 0:\n            zeros += 1\n        else:\n            nonzeros += 1\n    return zeros/nonzeros\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n        else:\n            count += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = 0\n    num_nonzeros = 0\n    for num in nums:\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_nonzeros += 1\n    ratio = num_zeros / num_nonzeros\n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nz = 0\n    nz_num = 0\n    for i in nums:\n        if i == 0:\n            nz += 1\n            nz_num += 1\n    nz_num -= 1\n    return nz,nz_num\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n=0\n    for i in nums:\n        if i==0:\n            n=n+1\n    return n\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 1\n    while (2 ** i) <= n: \n        if (2 ** i == n):\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n < 1): \n        return 0\n    ans = 0\n    while (n > 0): \n        ans = ans + (n & 1) \n        n = n >> 1\n    return ans\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            return \"Yes\"\n        i+=1\n    return \"No\"\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0:\n        # print(bin(n), n)\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            break\n    return n == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize the powers of 2 and powers of 2 minus one. \n    # Initialize sum = 0. \n    # Traverse the given number from right to left.\n    # If bit is 1, then update power = power + 1.\n    # If bit is 0, then update power = power - 1. \n    # If sum is equal to number, then return True. \n    # Else return False. \n    power = 1\n    sum = 0\n    while power:\n        if (1 & n) == 1:\n            sum += power\n        power = power << 1\n        n = n >> 1\n    return n == sum\n  "
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    while n % 2 == 0:\n        n = n / 2\n    if n == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return(n&(n-1)) == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n % 2 == 0: \n        n = n / 2\n    return n == 1\n    \nprint(is_Sum_Of_Powers_Of_Two(8)) # True\nprint(is_Sum_Of_Powers_Of_Two(64)) # Fals"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n<0):\n        return False\n    n_bin = bin(n)\n    total = 0\n    count = 0\n    for i in range(len(n_bin)-1, 1, -1):\n        if n_bin[i] == '1':\n            total += 2**count\n        count += 1\n    return total == n\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    x=int(n)\n    if(x>0):\n        return (x==0 or (x%2==0 and is_Sum_Of_Powers_Of_Two(x/2)))\n    else:\n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return(2*3.14*r)\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # r = float(input('Radius: '))\n    c = 2 * 3.14159265358979323846 * r\n    print('Circumference: ', c)\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * 3.14 * r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return math.pi * 2 * r\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    res = []\n    for el in test_list:\n        for el_1 in el:\n            res.append(el_1)\n    return res\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output_list = []\n    for element in test_list:\n        if isinstance(element, list):\n            output_list += extract_singly(element)\n        else:\n            output_list.append(element)\n    return output_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return(list(chain.from_iterable(test_list)))\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        if type(i) == list:\n            result.extend(extract_singly(i))\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    list_of_lists = []\n    for item in test_list:\n        if isinstance(item, list):\n            list_of_lists += item\n        else:\n            list_of_lists.append(item)\n    return list_of_lists\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly = set()\n    for i in test_list:\n        singly.update(i)\n    return singly\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    flip_indices = []\n    if len(nums) < 2:\n        return nums\n    # stop when we have reached the beginning of the list.\n    while len(nums) > 1:\n        # find the index of the largest element\n        max_index = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # flip the largest element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        # add the index of the flipped element to flip_indices\n        flip_indices.append(max_index)\n        # pop the largest element\n        nums.pop(max_index)\n        # if the list is now empty, break\n        if len(nums) == 0:\n            break\n    # return flip_indices\n    return flip_indices\n    \ndef pancake_sort2(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    flip_indices = []\n    if len(nums) < 2:\n        return nums\n    # stop when we have reached the beginning of the list.\n    while len(nums) > 1:\n        # find the index of the largest element\n        max_index = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # flip the largest element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        # add the index of the flipped element to flip_indices\n        flip_indices.append(max_index)\n        # pop the largest element\n        nums.pop(max_index)\n        # if the list is now empty, break\n        if len(nums) == 0:\n            break\n        # find the index of the next largest element\n        max_index = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # flip the largest element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        # add the index of the flipped element to flip_indices\n        flip_indices.append(max_index)\n        # pop the largest element\n        nums.pop(max_index)\n    # return flip_indices\n    return flip_indices\n        \ndef pancake_sort3(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    flip_indices = []\n    if len(nums) < 2:\n        return nums\n    # stop when we have reached the beginning of the list.\n    while len(nums) > 1:\n        # find the index of the largest element\n        max_index = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # flip the largest element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        # add the index of the flipped element to flip_indices\n        flip_indices.append(max_index)\n        # pop the largest element\n        nums.pop(max_index)\n        # if the list is now empty, break\n        if len(nums) == 0:\n            break\n        # find the index of the next largest element\n        max_index = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # flip the largest element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        # add the index of the flipped element to flip_indices\n        flip_indices.append(max_index)\n        # pop the largest element\n        nums.pop(max_index)\n    # return flip_indices\n    return flip_indices\n    \ndef pancake_sort4(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    flip_indices = []\n    if len(nums) < 2:\n        return nums\n    # stop when we have reached the beginning of the list.\n    while len(nums) > 1:\n        # find the index of the largest element\n        max_index = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # flip the largest element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        # add the index of the flipped element to flip_indices\n        flip_indices.append(max_index)\n        # pop the largest element\n        nums.pop(max_index)\n        # if the list is now empty, break\n        if len(nums) == 0:\n            break\n        # find the index of the next largest element\n        max_index = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # flip the largest element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        # add the index of the flipped element to flip_indices\n        flip_indices.append(max_index)\n        # pop the largest element\n        nums.pop(max_index)\n    # return flip_indices\n    return flip_indices\n        \ndef pancake_sort5(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    flip_indices = []\n    if len(nums) < 2:\n        return nums\n    # stop when we have reached the beginning of the list.\n    while len(nums) > 1:\n        # find the index of the largest element\n        max_index = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # flip the largest element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        # add the index of the flipped element to flip_indices\n        flip_indices.append(max_index)\n        # pop the largest element\n        nums.pop(max_index)\n        # if the list is now empty, break\n        if len(nums) == 0:\n            break\n        # find the index of the next largest element\n        max_index = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # flip the largest element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        # add the index of the flipped element to flip_indices\n        flip_indices.append(max_index)\n        # pop the largest element\n        nums.pop(max_index)\n    # return flip_indices\n    return flip_indices\n        \ndef pancake_sort6(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    flip_indices = []\n    if len(nums) < 2:\n        return nums\n    # stop when we have reached the beginning of the list.\n    while len(nums) > 1:\n        # find the index of the largest element\n        max_index = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # flip the largest element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        # add the index of the flipped element to flip_indices\n        flip_indices.append(max_index)\n        # pop the largest element\n        nums.pop(max_index)\n        # if the list is now empty"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1, 0, -1):\n        max_pos = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_pos]:\n                max_pos = j\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n - 1, -1, -1):\n        pancake_sort_helper(nums, i)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pancake_sort_helper(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n    else:\n        max_num = max(nums)\n        max_num_index = nums.index(max_num)\n        first_half = nums[:max_num_index+1]\n        second_half = nums[max_num_index+1:]\n        second_half.reverse()\n        return first_half + second_half\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #temp = []\n    #for i in range(len(nums)):\n    #    temp.append(nums[i])\n    #nums = temp\n    #sorted = []\n    #for i in range(len(nums)):\n    #    if nums[i] == min(nums):\n    #        sorted.append(nums.pop(i))\n    #        sorted.insert(0, min(nums))\n    #return sorted\n    \n    #My attempt:\n    '''\n    This is a tail-first approach, because in the first loop I'm trying to find the index of the min.\n    Then I find the min value in the list.\n    '''\n    #reverse = nums[::-1]\n    #sorted = []\n    #for i in range(len(reverse)):\n    #    index_min = reverse.index(min(reverse))\n    #    sorted.append(reverse.pop(index_min))\n    #    sorted.insert(0, min(reverse))\n    #return sorted\n    \n    #Short version:\n    '''\n    This is a tail-first approach, because in the first loop I'm trying to find the index of the min.\n    Then I find the min value in the list.\n    '''\n    reverse = nums[::-1]\n    sorted = []\n    for i in range(len(reverse)):\n        index_min = reverse.index(min(reverse))\n        sorted.append(reverse.pop(index_min))\n        sorted.insert(0, min(reverse))\n    return sorted\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    for i in range(len(nums)-1, 0, -1):\n        cur_max = -1\n        cur_max_idx = -1\n        for j in range(i+1):\n            if cur_max < nums[j]:\n                cur_max = nums[j]\n                cur_max_idx = j\n        nums[cur_max_idx] = nums[cur_max_idx+1]\n        nums[cur_max_idx+1] = cur_max\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums_len = len(nums)\n    for i in range(nums_len // 2 + 1):\n        pancake_sort_util(nums, nums_len - i)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        max_index = 0\n        for j in range(len(nums)-1, len(nums)-i+1, -1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    return sum([list1[i]==list2[i]==list3[i] for i in range(len(list1))])\n    # OR\n    return len([list1[i] for i in range(len(list1)) if list1[i]==list2[i]==list3[i]])\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    i=0\n    j=0\n    k=0\n    count=0\n    while i<len(list1) and j<len(list2) and k<len(list3):\n        if list1[i]==list2[i] and list2[j]==list3[i] and list3[k]==list1[i]:\n            count+=1\n            i+=1\n            j+=1\n            k+=1\n        else:\n            if list1[i]<list2[j]:\n                i+=1\n            elif list2[j]<list3[k]:\n                j+=1\n            else:\n                k+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    count = 0\n    if len(list1)!= len(list2)!= len(list3):\n        print(\"All three lists must have equal length\")\n        return False\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    cnt=0\n    if len(list1)==len(list2)==len(list3):\n        for i in range(len(list1)):\n            if list1[i]==list2[i]==list3[i]:\n                cnt+=1\n    return cnt\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if not (len(list1) == len(list2) and len(list1) == len(list3) and len(list2) == len(list3)):\n        raise ValueError('Lists are not of the same size.')\n    same_num_list = []\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            same_num_list.append(list1[i])\n    return same_num_list\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_list = [list1[i] for i in range(len(list1)) if list1[i] == list2[i] == list3[i]]\n    return len(same_list)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            samepair += 1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for a in range(len(list1)):\n        if list1[a]==list2[a]==list3[a]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_of_lists = []\n    for i in range(len(Input)):\n        list_of_lists.append(type(Input[i]) == list)\n    return len(list_of_lists)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for ele in Input:\n        if type(ele) == list: \n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return (Input.count(list))\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if type(i) == type([]): \n            count+= 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    a = str(Input)\n    b = a.replace(\"(\",\"\")\n    b = b.replace(\")\",\"\")\n    c = b.replace(\",\",\"\")\n    d = c.split()\n    return len(d)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = list(Input)\n    count=0\n    for i in Input:\n        if type(i) == type([]):\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = list(Input)\n    for i in range(len(Input)): \n        Input[i] = list(Input[i])\n    count = 0\n    for j in range(len(Input)):\n        if type(Input[j][0]) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] - arr[j] > max_diff): \n                max_diff = arr[i] - arr[j] \n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    m = arr[0]\n    for i in range(0, len(arr)-1): \n        if abs(arr[i] - arr[i + 1]) > abs(m): \n            m = arr[i] - arr[i + 1] \n    return m\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if abs(arr[i] - arr[j]) > maxDiff:\n                maxDiff = abs(arr[i] - arr[j])\n    return maxDiff \nprint(max_Abs_Diff([10, 4, 1, 2, -10, -20, 15]))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -1 \n    for i in range(len(arr)): \n        for j in range(len(arr)): \n            if (i!= j) and (abs(arr[i] - arr[j]) > max_diff): \n                max_diff = abs(arr[i] - arr[j]) \n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            max_diff = max(max_diff, arr[j] - arr[i])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[len(arr)-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (abs(arr[i] - arr[j]) > max_diff):\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    #Initialize the maximum difference as None \n    max_diff = None\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # arr = list(map(int, input(\"Enter the array :\\n\").split()))\n    min_num = arr[0]\n    max_num = arr[0]\n    max_diff = 0\n    for num in arr:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    for num in arr:\n        if abs(num-min_num) > max_diff:\n            max_diff = abs(num-min_num)\n        if abs(num-max_num) > max_diff:\n            max_diff = abs(num-max_num)\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return (1, 1)\n    x = find_solution(n, b, n-b)\n    if x == None:\n        return None\n    return (x[0], n//b)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #n is always an integer, so the divisor will always be an integer\n    #Check if there are multiple solutions or if no solution exists\n    if n % 2 == 0:\n        if n % a == 0:\n            if n % b == 0:\n                if a == b:\n                    return a,b\n                return None\n            return None\n        if a > n:\n            return None\n        if a < n:\n            return a,n//a\n        return None\n    #No other conditions met\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if n % 2 == 0:\n        while x * a + y * b!= n:\n            y += 1\n            if a * x + y * b == n:\n                break\n        return x, y\n    else:\n        while x * a + y * b!= n:\n            x += 1\n            if a * x + y * b == n:\n                break\n        return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    for x in range(1, n):\n        for y in range(1, n):\n            if (a * x) + (b * y) == n:\n                return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        for y in range(n):\n            if x*a+y == n:\n                return (x, y)\n    return None\n    \ndef is_prime(n):\n    '''\n    Write a function that takes an integer and returns True if that integer is prime, and False if it is not prime.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef print_all_primes_between(a, b):\n    '''\n    Write a function that prints all the prime numbers between two given integers.\n    '''\n    for n in range(a, b):\n        if is_prime(n):\n            print(n)\n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the given string is a palindrome, and False otherwise.\n    '''\n    if s == s[::-1]:\n        return True\n    return False\n    \ndef is_antipalindrome(s):\n    '''\n    Write a function that returns True if the given string is an antipalindrome, and False otherwise.\n    '''\n    if s == s[::-1]:\n        return False\n    for i in range(len(s)):\n        if s[i] == s[-(i+1)]:\n            pass\n        else:\n            return False\n    return True\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function that returns True if the given strings are anagrams, and False otherwise.\n    '''\n    if sorted(s1) == sorted(s2):\n        return True\n    return False\n    \ndef all_pairs(n):\n    '''\n    Write a function that returns all the pairs of integers in a list that have the difference of their sums being equal to 0.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if i+j == 0:\n                print(i, j)\n    \ndef factorial(n):\n    '''\n    Write a function that returns the factorial of a given integer n.\n    '''\n    if n < 0:\n        return None\n    if n < 2:\n        return 1\n    else:\n        return n*factorial(n-1)\n        \ndef fibonacci(n):\n    '''\n    Write a function that returns the nth Fibonacci number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n    \ndef sum_of_digits(n):\n    '''\n    Write a function that returns the sum of the digits in the given integer.\n    '''\n    if n < 0:\n        return None\n    if n < 10:\n        return n\n    return n%10 + sum_of_digits(n//10)\n    \ndef count_evens(n):\n    '''\n    Write a function that returns the number of even integers in a given list.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    if n%2 == 0:\n        return 1 + count_evens(n-1)\n    else:\n        return count_evens(n-1)\n        \ndef sum_floats(l):\n    '''\n    Write a function that returns the sum of the floating point numbers in a given list.\n    '''\n    if l == []:\n        return 0\n    return l[0] + sum_floats(l[1:])\n    \ndef number_of_evens(l):\n    '''\n    Write a function that returns the number of even integers in a given list.\n    '''\n    if l == []:\n        return 0\n    if l[0]%2 == 0:\n        return 1 + number_of_evens(l[1:])\n    return number_of_evens(l[1:])\n    \ndef number_of_ints(l):\n    '''\n    Write a function that returns the number of non-negative integers in a given list.\n    '''\n    if l == []:\n        return 0\n    if l[0] < 0:\n        return 0 + number_of_ints(l[1:])\n    return 1 + number_of_ints(l[1:])\n    \ndef has_n(s, n):\n    '''\n    Write a function that returns True if the given string contains the given integer n.\n    '''\n    if n == 0:\n        return True\n    if n in s:\n        return True\n    else:\n        return has_n(s, n-1)\n    \ndef starts_with(s, w):\n    '''\n    Write a function that returns True if the given string starts with the given prefix, and False otherwise.\n    '''\n    if s[:len(w)] == w:\n        return True\n    else:\n        return False\n        \ndef is_substring(s1, s2):\n    '''\n    Write a function that returns True if the given string contains the given substring, and False otherwise.\n    '''\n    if s2 in s1:\n        return True\n    return False\n    \ndef string_to_dict(s):\n    '''\n    Write a function that converts the given string into a dictionary of letter-count pairs.\n    '''\n    d = {}\n    for c in s:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    return d\n    \ndef dict_to_string(d):\n    '''\n    Write a function that converts the given dictionary of letter-count pairs into a string.\n    '''\n    s = ''\n    for i in d:\n        s += i * d[i]\n    return s\n    \ndef score_words(words):\n    '''\n    Write a function that scores the words in a given list. The function should return a list of tuples, in which the first element is the word and the second element is the score.\n    '''\n    scores = []\n    for word in words:\n        word_score = 0\n        for l in word:\n            word_score += score_l(l)\n        scores.append((word, word_score))\n    return scores\n    \ndef score_l(l):\n    if l in 'aeiou':\n        return 1\n    if l in 'dg':\n        return 2\n    if l in 'bcmp':\n        return 3\n    if l in 'fhvwy':\n        return 4\n    if l in 'k':\n        return 5\n    if l in 'jx':\n        return 8\n    if l in 'qz':\n        return 10\n    return 0\n    \ndef anagrams(word, words):\n    '''\n    Write a function that returns all the anagrams of a given word from a given list of words.\n    '''\n    new_words = []\n    for w in words:\n        if is_anagram(word, w) and word!= w:\n            new_words.append(w)\n    return new_words\n    \ndef substrings(s):\n    '''\n    Write a function that returns all the possible substrings of a given string.\n    '''\n    if s == '':\n        return []\n    else:\n        return [s] + substrings(s[1:])\n        \ndef anagrams_of_palindromes(s):\n    '''\n    Write a function that returns all the anagrams of a given palindrome from a given list of strings.\n    '''\n    return anagrams(s, palindromes)\n    \ndef primes_less_than(n):\n    '''\n    Write a function that returns all the prime numbers less than the given integer n.\n    '''\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n%2 == 0:\n        return primes_less_than(n-1)\n    else:\n        return [2] + primes_less_than(n-1)\n        \nde"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # print(a, b, n)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 1:\n        return 1, 0\n    for i in range(n):\n        remainder = n - (i*a)\n        if remainder in b:\n            x = i\n            y = b.index(remainder)\n            return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # If one of the values is 0, return the other\n    if n == 0:\n        return (0, 0)\n    if a == 0:\n        return (n // b, 0)\n    if b == 0:\n        return (0, n // a)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y, r = 0, 0, n\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [item for item in list1 if item not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    result = [elem for elem in list1 if elem not in list2]\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    while len(list2) > 0:\n        for i in list2:\n            if i in list1:\n                list1.remove(i)\n        list2.clear()\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = list1[:]\n    for elem in list2:\n        while elem in list3:\n            list3.remove(elem)\n    return list3\n    \n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if list1 == [] or list2 == []:\n        return []\n    else:\n        if list1[0] in list2:\n            return remove_elements(list1[1:], list2)\n        else:\n            return [list1[0]] + remove_elements(list1[1:], list2)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for ele in list1:\n        if ele not in list2:\n            new_list.append(ele)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        while element in list1:\n            list1.remove(element)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    print(\"Original list 1 : \", list1)\n    print(\"Original list 2 : \", list2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(1, n//2 + 1):\n            sum += (n - 2 * i)\n        return sum\n    \n    \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(n):\n            sum += (n - 2*i)\n        return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return \"I am not that smart\"\n    elif n == 0:\n        return 0\n    else:\n        # calculate the sum of the series\n        sum = 0\n        for i in range(1, n // 2 + 1):\n            sum = sum + (n - (2 * i))\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return n\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return (n + sum_series(n-2))\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(0, n//2 + 1):\n        s += n - 2*i\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def sum_series_recursion(n):\n        if n == 0:\n            return 0\n        else:\n            return n + sum_series_recursion(n-2)\n    def sum_series_iterative(n):\n        if n == 0:\n            return 0\n        else:\n            total = 0\n            for i in range(0, n//2+1):\n                total += n - 2*i\n            return total\n    print(sum_series_recursion(n))\n    print(sum_series_iterative(n))\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n):\n        sum += n - 2 * i\n    return sum\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2 * tan(pi/l))/4\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l/2) * (s/(2*tan(pi/l)))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s ** 2 * l / (4 * tan(pi / l)))\n    print(f'Area of polygon is {area:.3f}')\n    return area\n    \n    \ndef perimeter_polygon(l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length of its sides.\n    '''\n    perimeter = l * l\n    print(f'Perimeter of polygon is {perimeter:.3f}')\n    return perimeter\n    \n    \ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the length of its radius.\n    '''\n    area = pi * r ** 2\n    print(f'Area of circle is {area:.3f}')\n    return area\n    \n    \ndef circumference_circle(r):\n    '''\n    Write a function to calculate the circumference of a circle given the length of its radius.\n    '''\n    circumference = 2 * pi * r\n    print(f'Circumference of circle is {circumference:.3f}')\n    return circumference\n    \n    \ndef area_semi_circle(r):\n    '''\n    Write a function to calculate the area of a semi-circle given the length of its radius.\n    '''\n    area = r ** 2 / 2\n    print(f'Area of semi circle is {area:.3f}')\n    return area\n    \n    \ndef circumference_semi_circle(r):\n    '''\n    Write a function to calculate the circumference of a semi-circle given the length of its radius.\n    '''\n    circumference = 2 * pi * r\n    print(f'Circumference of semi circle is {circumference:.3f}')\n    return circumference\n    \n    \ndef area_ellipse(r, a):\n    '''\n    Write a function to calculate the area of an ellipse given the length of its radius and one of its axes.\n    '''\n    area = pi * r * a\n    print(f'Area of ellipse is {area:.3f}')\n    return area\n    \n    \ndef circumference_ellipse(r, a):\n    '''\n    Write a function to calculate the circumference of an ellipse given the length of its radius and one of its axes.\n    '''\n    circumference = pi * r * 2 * a\n    print(f'Circumference of ellipse is {circumference:.3f}')\n    return circumference\n    \n    \ndef area_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given the length of its side and one of its sides.\n    '''\n    area = a * b\n    print(f'Area of rectangle is {area:.3f}')\n    return area\n    \n    \ndef circumference_rectangle(a, b):\n    '''\n    Write a function to calculate the circumference of a rectangle given the length of its side and one of its sides.\n    '''\n    circumference = 2 * a + 2 * b\n    print(f'Circumference of rectangle is {circumference:.3f}')\n    return circumference\n    \n    \ndef area_square(a):\n    '''\n    Write a function to calculate the area of a square given the length of one of its sides.\n    '''\n    area = a ** 2\n    print(f'Area of square is {area:.3f}')\n    return area\n    \n    \ndef circumference_square(a):\n    '''\n    Write a function to calculate the circumference of a square given the length of one of its sides.\n    '''\n    circumference = 4 * a\n    print(f'Circumference of square is {circumference:.3f}')\n    return circumference\n    \n    \ndef area_triangle(a, b):\n    '''\n    Write a function to calculate the area of a triangle given the length of one of its sides and the other two.\n    '''\n    area = 0.5 * a * b\n    print(f'Area of triangle is {area:.3f}')\n    return area\n    \n    \ndef circumference_triangle(a, b):\n    '''\n    Write a function to calculate the circumference of a triangle given the length of one of its sides and the other two.\n    '''\n    circumference = a + b + (2 * a * b * tan(pi / 5)) ** 0.5\n    print(f'Circumference of triangle is {circumference:.3f}')\n    return circumference\n    \n    \ndef area_parallelogram(a, b):\n    '''\n    Write a function to calculate the area of a parallelogram given the length of one of its sides and the other two.\n    '''\n    area = a * b\n    print(f'Area of parallelogram is {area:.3f}')\n    return area\n    \n    \ndef circumference_parallelogram(a, b):\n    '''\n    Write a function to calculate the circumference of a parallelogram given the length of one of its sides and the other two.\n    '''\n    circumference = 2 * a + 2 * b\n    print(f'Circumference of parallelogram is {circumference:.3f}')\n    return circumference\n    \n    \ndef area_rhombus(a, b):\n    '''\n    Write a function to calculate the area of a rhombus given the length of one of its sides and the other two.\n    '''\n    area = 0.5 * a * b\n    print(f'Area of rhombus is {area:.3f}')\n    return area\n    \n    \ndef circumference_rhombus(a, b):\n    '''\n    Write a function to calculate the circumference of a rhombus given the length of one of its sides and the other two.\n    '''\n    circumference = 2 * a + 2 * b\n    print(f'Circumference of rhombus is {circumference:.3f}')\n    return circumference\n    \n    \ndef area_trapezoid(a, b, c):\n    '''\n    Write a function to calculate the area of a trapezoid given the lengths of its sides and the height of its base.\n    '''\n    area = 0.5 * (a + b) * c\n    print(f'Area of trapezoid is {area:.3f}')\n    return area\n    \n    \ndef circumference_trapezoid(a, b, c):\n    '''\n    Write a function to calculate the circumference of a trapezoid given the lengths of its sides and the height of its base.\n    '''\n    circumference = a + b + 2 * c\n    print(f'Circumference of trapezoid is {circumference:.3f}')\n    return circumference\n    \n    \ndef area_kite(a, b):\n    '''\n    Write a function to calculate the area of a kite given the lengths of its sides.\n    '''\n    area = a * b / 2\n    print(f'Area of kite is {area:.3f}')\n    return area\n    \n    \ndef circumference_kite(a, b):\n    '''\n    Write a function to calculate the circumference of a kite given the lengths of its sides.\n    '''\n    circumference = a * 3 + b * 3 + 2 * (a + b)\n    print(f'Circumference of kite is {circumference:.3f}')\n    return circumference\n    \n    \ndef area_ellipsoid(r, a, b, c):\n    '''\n    Write a function to calculate the area of an ellipsoid given the radius of its axes, as well as three of its sides.\n    '''\n    area = (4 * pi * r ** 2) * (a * b * c) / (4 * pi * a ** 2 * c)\n    print(f'Area of ellipsoid is {area:.3f}')\n    return area\n    \n    \ndef circumference_ellipsoid(r, a, b, c):\n    '''\n    Write a function to calculate the circumference of an ellipsoid given the radius of its axes, as well as three of its sides.\n    '''\n    circumference = 2 * pi * r * (a * b * c) ** 0.5\n    print(f'Circumference of el"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l / (2 * tan(pi / l))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2)/(4*tan(pi/l))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2*tan(pi/l))/(4*tan(pi/l))\n    return area\n    \ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the length of its radius.\n    '''\n    area = pi*(r**2)\n    return area\n    \ndef area_rectangle(l, w):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    area = l*w\n    return area\n    \ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    area = (b*h)/2\n    return area\n    \ndef area_parallelogram(b, h):\n    '''\n    Write a function to calculate the area of a parallelogram given its base and height.\n    '''\n    area = b*h\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    def area(s, l):\n        return (0.25*s**2*tan(pi/n))/(tan(pi/n))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s == 1:\n        return l\n    else:\n        return (l**2)*(3.141592)/(4*tan(pi/s))\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1=0\n    sum2=0\n    if n==1:\n        return 1\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            if n/i==i:\n                sum1+=i\n            else:\n                sum1+=i\n                sum2+=n/i\n    if sum1==sum2:\n        return 1\n    else:\n        return 0\ndef count_steps(n):\n    '''\n    Write a function to determine the number of steps in the first n steps of a fibonacci sequence\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    return 1+count_steps(n-1)\ndef count_pythag(n):\n    '''\n    Write a function to determine the number of different ways of writing n as a sum of 2 squares\n    '''\n    if n<0:\n        return 0\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    return count_pythag(n-1)+count_pythag(n-2)\ndef permutation_helper(a,b,c):\n    '''\n    Write a function to determine the number of permutations of a list in a given order\n    '''\n    if a==1:\n        return b\n    if a>1:\n        return b+permutation_helper(a-1,b,c)\ndef permutation(a,b):\n    '''\n    Write a function to determine the number of permutations of a list in a given order\n    '''\n    if a<=1:\n        return b\n    else:\n        return permutation(a-1,b)+permutation(a-1,b+1)\ndef palindrome(a):\n    '''\n    Write a function to determine if a number is palindrome\n    '''\n    if a<0:\n        return False\n    if a<10:\n        return True\n    else:\n        if a==int(str(a)[::-1]):\n            return True\n        else:\n            return False\ndef main():\n    print(div_sum(36))\n    print(div_sum(26))\n    print(div_sum(15))\n    print(div_sum(1))\n    print(div_sum(1))\n    print(count_pythag(7))\n    print(count_pythag(5))\n    print(count_pythag(3))\n    print(count_pythag(4))\n    print(count_pythag(5))\n    print(count_pythag(6))\n    print(count_pythag(7))\n    print(count_pythag(8))\n    print(count_pythag(9))\n    print(count_pythag(10))\n    print(count_pythag(11))\n    print(count_pythag(12))\n    print(count_pythag(13))\n    print(count_pythag(14))\n    print(count_pythag(15))\n    print(count_pythag(16))\n    print(count_pythag(17))\n    print(count_pythag(18))\n    print(count_pythag(19))\n    print(count_pythag(20))\n    print(count_pythag(21))\n    print(count_pythag(22))\n    print(count_pythag(23))\n    print(count_pythag(24))\n    print(count_pythag(25))\n    print(count_pythag(26))\n    print(count_pythag(27))\n    print(count_pythag(28))\n    print(count_pythag(29))\n    print(count_pythag(30))\n    print(count_pythag(31))\n    print(count_pythag(32))\n    print(count_pythag(33))\n    print(count_pythag(34))\n    print(count_pythag(35))\n    print(count_pythag(36))\n    print(count_pythag(37))\n    print(count_pythag(38))\n    print(count_pythag(39))\n    print(count_pythag(40))\n    print(count_pythag(41))\n    print(count_pythag(42))\n    print(count_pythag(43))\n    print(count_pythag(44))\n    print(count_pythag(45))\n    print(count_pythag(46))\n    print(count_pythag(47))\n    print(count_pythag(48))\n    print(count_pythag(49))\n    print(count_pythag(50))\n    print(count_pythag(51))\n    print(count_pythag(52))\n    print(count_pythag(53))\n    print(count_pythag(54))\n    print(count_pythag(55))\n    print(count_pythag(56))\n    print(count_pythag(57))\n    print(count_pythag(58))\n    print(count_pythag(59))\n    print(count_pythag(60))\n    print(count_pythag(61))\n    print(count_pythag(62))\n    print(count_pythag(63))\n    print(count_pythag(64))\n    print(count_pythag(65))\n    print(count_pythag(66))\n    print(count_pythag(67))\n    print(count_pythag(68))\n    print(count_pythag(69))\n    print(count_pythag(70))\n    print(count_pythag(71))\n    print(count_pythag(72))\n    print(count_pythag(73))\n    print(count_pythag(74))\n    print(count_pythag(75))\n    print(count_pythag(76))\n    print(count_pythag(77))\n    print(count_pythag(78))\n    print(count_pythag(79))\n    print(count_pythag(80))\n    print(count_pythag(81))\n    print(count_pythag(82))\n    print(count_pythag(83))\n    print(count_pythag(84))\n    print(count_pythag(85))\n    print(count_pythag(86))\n    print(count_pythag(87))\n    print(count_pythag(88))\n    print(count_pythag(89))\n    print(count_pythag(90))\n    print(count_pythag(91))\n    print(count_pythag(92))\n    print(count_pythag(93))\n    print(count_pythag(94))\n    print(count_pythag(95))\n    print(count_pythag(96))\n    print(count_pythag(97))\n    print(count_pythag(98))\n    print(count_pythag(99))\n    print(count_pythag(100))\n    print(count_pythag(101))\n    print(count_pythag(102))\n    print(count_pythag(103))\n    print(count_pythag(104))\n    print(count_pythag(105))\n    print(count_pythag(106))\n    print(count_pythag(107))\n    print(count_pythag(108))\n    print(count_pythag(109))\n    print(count_pythag(110))\n    print(count_pythag(111))\n    print(count_pythag(112))\n    print(count_pythag(113))\n    print(count_pythag(114))\n    print(count_pythag(115))\n    print(count_pythag(116))\n    print(count_pythag(117))\n    print(count_pythag(118))\n    print(count_pythag(119))\n    print(count_pythag(120)"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # total divisors\n    divisors = [1]\n    \n    # sum of divisors\n    div_sum = 0\n    \n    # upper limit of number of divisors\n    upper_limit = int(math.sqrt(n)) + 1\n    \n    for i in range(2, upper_limit):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(int(n/i))\n    \n    for divisor in divisors:\n        div_sum += divisor\n    \n    return div_sum\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    list_div = []\n    for i in range(1,n):\n        if n%i == 0:\n            list_div.append(i)\n    #print(list_div)\n    sum_list_div = sum(list_div)\n    if n%sum_list_div == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1, int(n/2 + 1)): \n        if n % i == 0: \n            s += i \n    return int(s + n) == int(n*(n + 1)/2) \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0 \n    n_sqrt = math.sqrt(n) \n    for i in range(1, math.ceil(n_sqrt)): \n        if n % i == 0: \n            div_sum += i + n/i \n    return div_sum \ndef div_check(n): \n    '''\n    Write a function to determine if two integers, a and b, have the same divisors.\n    '''\n    return div_sum(n) == div_sum(div_sum(n))\ndef prime_check(n): \n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n % 2 == 0 and n > 2: \n        return False \n    return all(n % i for i in range(3, math.floor(math.sqrt(n))+1, 2)) \ndef prime_factor(n): \n    '''\n    Write a function to determine all the prime factors of a positive integer. \n    '''\n    prime_factors = [] \n    for i in range(2, math.floor(n**0.5)+1): \n        while n % i == 0: \n            prime_factors.append(i) \n            n //= i \n    if n > 1: \n        prime_factors.append(n) \n    return prime_factors \ndef primes(n): \n    '''\n    Write a function to determine if a positive integer n is prime.\n    '''\n    return len(prime_factor(n)) == 1\ndef get_primes(n): \n    '''\n    Write a function to determine all the prime numbers less than or equal to n. \n    '''\n    primes = [] \n    i = 0 \n    while i < n: \n        i += 1 \n        if primes_check(i): \n            primes.append(i) \n    return primes \ndef primes_check(n): \n    '''\n    Write a function to determine if a number is prime. \n    '''\n    return len(prime_factor(n)) == 1 \ndef pyth_triples(n): \n    '''\n    Write a function to determine if a number, n, is a pythagorean triple.\n    '''\n    triples = [] \n    for a in range(1, n): \n        for b in range(a, n): \n            c = math.sqrt(a**2 + b**2) \n            if c % 1 == 0: \n                triples.append((a, b, c)) \n    return triples \ndef fib_sum(n): \n    '''\n    Write a function to determine the sum of the first n Fibonacci numbers.\n    '''\n    fib = [] \n    fib.append(0) \n    fib.append(1) \n    while len(fib) <= n: \n        fib.append(fib[-1] + fib[-2]) \n    return sum(fib[0:n+1])\ndef fib_check(n): \n    '''\n    Write a function to determine if the sum of the first n Fibonacci numbers is a perfect square.\n    '''\n    return math.floor(fib_sum(n)) ** 2 == fib_sum(n)\ndef get_primes_2(n): \n    '''\n    Write a function to determine all the prime numbers less than or equal to n. \n    '''\n    primes = [] \n    i = 2 \n    while i <= n: \n        primes.append(i) \n        i += 1 \n        while True: \n            if all(i % j!= 0 for j in primes): \n                primes.append(i) \n                break \n            if i == n: \n                break \n            i += 1 \n    return primes \ndef get_primes_3(n): \n    '''\n    Write a function to determine all the prime numbers less than or equal to n. \n    '''\n    primes = [2] \n    i = 3 \n    while i <= n: \n        if all(i % j!= 0 for j in primes): \n            primes.append(i) \n        i += 2 \n    return primes \ndef palindrome_check(n): \n    '''\n    Write a function to determine if a number is palindrome.\n    '''\n    return str(n) == str(n)[::-1] \ndef palindrome_perm(n): \n    '''\n    Write a function to determine if a number n is a permutation of a palindrome. \n    '''\n    n = str(n) \n    if len(n) < 2: \n        return True \n    if len(n) % 2 == 0: \n        odd = False \n    else: \n        odd = True \n    for i in range(0, len(n)): \n        for j in range(i+1, len(n)): \n            if str(n[i]) == str(n[j]): \n                odd = not odd \n    return odd \ndef palindrome_perm_2(n): \n    '''\n    Write a function to determine if a number n is a permutation of a palindrome. \n    '''\n    n = str(n) \n    return len(n) % 2 == len(set(n)) \ndef palindrome_perm_3(n): \n    '''\n    Write a function to determine if a number n is a permutation of a palindrome. \n    '''\n    n = str(n) \n    return len(n) % 2 == len(set(n)) \ndef palindrome_perm_4(n): \n    '''\n    Write a function to determine if a number n is a permutation of a palindrome. \n    '''\n    n = str(n) \n    n_set = set(n) \n    n_set.remove('0') \n    if len(n_set) == 0: \n        return False \n    for i in n_set: \n        if n.count(i) % 2!= 0: \n            return False \n    return True \ndef palindrome_perm_5(n): \n    '''\n    Write a function to determine if a number n is a permutation of a palindrome. \n    '''\n    n = str(n) \n    n_set = set(n) \n    n_set.remove('0') \n    if len(n_set) == 0: \n        return False \n    for i in n_set: \n        if n.count(i) % 2!= 0: \n            return False \n    return True \ndef palindrome_perm_6(n): \n    '''\n    Write a function to determine if a number n is a permutation of a palindrome. \n    '''\n    n = str(n) \n    n_set = set(n) \n    n_set.remove('0') \n    if len(n_set) == 0: \n        return False \n    return all(n.count(i) % 2 == 0 for i in n_set) \ndef palindrome_perm_7(n): \n    '''\n    Write a function to determine if a number n is a permutation of a palindrome. \n    '''\n    n = str(n) \n    n_set = set(n) \n    n_set.remove('0') \n    if len(n_set) == 0: \n        return False \n    return all(n.count(i) % 2 == 0 for i in n_set) \ndef palindrome_perm_8(n): \n    '''\n    Write a function to determine if a number n is a permutation of a palindrome. \n    '''\n    n = str(n) \n    n_set = set(n) \n    n_set.remove('0') \n    if len(n_set) == 0: \n        return False \n    return all(n.count(i) % 2 == 0 for i in n_set) \ndef palindrome_perm_9(n): \n    '"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    def find_divisors(n):\n        divisors=[]\n        for i in range(1,int(math.sqrt(n))+1):\n            if n%i==0:\n                divisors.append(i)\n                if i!=n/i:\n                    divisors.append(n/i)\n        divisors.sort()\n        return divisors\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = 0\n    for x in range(1, int(math.sqrt(n) + 1)):\n        if n % x == 0:\n            sum_of_divisors += x\n            if x!= n / x:\n                sum_of_divisors += n / x\n    return sum_of_divisors \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    l=[]\n    for i in range(1,n//2+1): \n        if n%i==0: \n            l.append(i)\n    sum1=sum(l)\n    return sum1==n\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # List containing all of the divisors of n. \n    divs = []\n    # Finds all of the divisors of n by iterating through the integers between 1 and n and checking if the remainder of n/i is 0. \n    for i in range(1,n+1): \n        # If i is a factor of n, then it is added to the divisors list. \n        if n%i == 0: \n            divs.append(i) \n    # If the sum of all of the divisors of n are the same, then the number is called a perfect number. \n    if sum(divs) == n: \n        return True\n    # If the sum of all of the divisors of n are not the same, then the number is not called a perfect number. \n    else: \n        return False\n        \ndef num_divisors(n): \n    '''\n    Write a function to determine how many divisors a positive integer has.\n    '''\n    # Initialize the number of divisors to 0. \n    divisors = 0\n    # Calculate the number of divisors of n by counting all of the positive integers between 1 and sqrt(n). \n    for i in range(1, int(math.sqrt(n))+1): \n        # If i is a factor of n, then it is added to the divisors list. \n        if n%i == 0: \n            divisors += 1\n    # If the number of divisors is even, then n is a perfect number. \n    if divisors%2 == 0: \n        return True\n    # If the number of divisors is odd, then n is not a perfect number. \n    else: \n        return False\n        \ndef pythag_triplet(a,b): \n    '''\n    Write a function that finds the hypotenuse of a right triangle given the lengths of the other two sides.\n    '''\n    # Find the length of the hypotenuse of the right triangle. \n    c = math.sqrt(a**2 + b**2) \n    # Return the length of the hypotenuse. \n    return c\n    \ndef gcd(a,b): \n    '''\n    Write a function that finds the greatest common divisor of two integers.\n    '''\n    # Initialize the gcd to 0. \n    gcd = 0 \n    # If b is greater than or equal to a, then b is set equal to a. \n    if b >= a: \n        b = a \n    # Find the remainder of a/b. \n    remainder = a%b \n    # If the remainder is 0, then the gcd is set to b. \n    if remainder == 0: \n        gcd = b \n    # If the remainder is not 0, then a is set equal to b and the process is repeated with a/b. \n    else: \n        a = b \n        b = remainder \n    # Return the greatest common divisor. \n    return gcd\n        \ndef mult_pairs(n): \n    '''\n    Write a function to return a list of all positive integers that have the same number of factors.\n    '''\n    # Initialize a list to hold the integers that are valid. \n    valid_ints = []\n    # Initialize an integer to count the number of divisors of n. \n    count = 0 \n    # Calculate the number of divisors of n by counting all of the positive integers between 1 and sqrt(n). \n    for i in range(1, int(math.sqrt(n))+1): \n        # If i is a factor of n, then it is added to the divisors list. \n        if n%i == 0: \n            count += 1 \n    # If the number of divisors is even, then n is a perfect number. \n    if count%2 == 0: \n        # For every positive integer i between 1 and n, if i has the same number of divisors as n, then i is added to the list of valid integers. \n        for i in range(1, n+1): \n            if num_divisors(i) == count: \n                valid_ints.append(i) \n    # If the number of divisors is odd, then n is not a perfect number. \n    else: \n        # For every positive integer i between 1 and n, if i has the same number of divisors as n, then i is added to the list of valid integers. \n        for i in range(1, n+1): \n            if num_divisors(i) == count: \n                valid_ints.append(i) \n    # Return the list of valid integers. \n    return valid_ints\n        \ndef palindrome(s): \n    '''\n    Write a function to determine if a string is a palindrome.\n    '''\n    # Initialize a boolean variable to hold the value of whether s is a palindrome. \n    palindrome = True \n    # For each character in s, if the character is not the same as the character in the reverse of s, then palindrome is set to False. \n    for i in s: \n        if i!= s[len(s)-(1+len(s))]: \n            palindrome = False \n    # Return the value of palindrome. \n    return palindrome\n        \ndef palindrome_list(s): \n    '''\n    Write a function to determine if the input is a palindrome using a list.\n    '''\n    # Initialize a list to hold the characters in s. \n    palindrome = [] \n    # For each character in s, append the character to the palindrome list. \n    for i in s: \n        palindrome.append(i) \n    # Initialize a variable to hold the reverse of s. \n    reverse = '' \n    # Initialize a variable to hold the length of s. \n    n = len(s) \n    # Initialize a variable to hold the length of the palindrome list. \n    m = len(palindrome) \n    # For each character in the reverse of s, add the character to reverse. \n    for i in range(0, n): \n        reverse += s[n-1-i] \n    # If reverse is the same as s, then s is a palindrome. \n    if reverse == s: \n        return True \n    # If reverse is not the same as s, then s is not a palindrome. \n    else: \n        return False \n        \ndef palindrome_pythonic(s): \n    '''\n    Write a function to determine if the input is a palindrome using python.\n    '''\n    # If the length of s is even, then s is made to be the middle two characters in s. \n    if len(s)%2 == 0: \n        # Initialize a variable to hold the middle two characters in s. \n        s = s[len(s)//2-1:len(s)//2+1] \n    # Initialize a variable to hold the reversed version of s. \n    reverse = '' \n    # For each character in s, add the character to reverse. \n    for i in s: \n        reverse = i + reverse \n    # If reverse is the same as s, then s is a palindrome. \n    if reverse == s: \n        return True \n    # If reverse is not the same as s, then s is not a palindrome. \n    else: \n        return False \n        \ndef palindrome_while(s): \n    '''\n    Write a function to determine if the input is a palindrome using a while loop.\n    '''\n    # Initialize a variable to hold the reversed version of s. \n    reverse = '' \n    # For each character in s, add the character to reverse. \n    for i in s: \n        reverse = i + reverse \n    # If reverse is the same as s, then s is a palindrome. \n    if reverse == s: \n        return True \n    # If reverse is not the same as s, then s is not a palindrome. \n    else: \n        return False \n        \ndef palindrome_for(s): \n    '''\n    Write a function to determine if the input is "
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # get all the divisors from 1 to n/2\n    divisors = [i for i in range(1, int(n/2)+1) if n % i == 0]\n    \n    # sum the divisors\n    sum_div = sum(divisors)\n    # print(sum_div)\n    \n    # get the second divisor\n    # convert to list to remove the duplicate\n    divisors = list(set(divisors))\n    # print(divisors)\n    \n    # check if sum_div is in divisors\n    # if so return True\n    # else return False\n    if sum_div in divisors:\n        return True\n    else:\n        return False\n    \ndef sum_div(n):\n    '''\n    Write a function that determines whether the sum of divisors is the same as the original number.\n    '''\n    \n    # get all the divisors from 1 to n/2\n    divisors = [i for i in range(1, int(n/2)+1) if n % i == 0]\n    \n    # sum the divisors\n    sum_div = sum(divisors)\n    # print(sum_div)\n    \n    if sum_div == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in range(97, 123):\n        count += str1.count(chr(i))\n    return count\n    \ndef vowel_count(str1): \n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in str1:\n        if i in vowels:\n            count += 1\n    return count\n    \ndef reverse(str1): \n    '''\n    Write a function to return the reverse of a string.\n    '''\n    return str1[::-1]\n    \ndef is_palindrome(str1): \n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\n    \ndef check_pangram(str1): \n    '''\n    Write a function to check whether a given string is PANGRAM or not.\n    Pangrams are words or sentences containing every letter of the alphabet at least once.\n    For example : \"The quick brown fox jumps over the lazy dog\"\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in str1:\n        if i in vowels:\n            return False\n    return True\n    \ndef check_anagram(str1, str2): \n    '''\n    Write a function to check whether two given strings are ANAGRAM or not.\n    Anagrams are words or sentences containing same letters, but the order of letters can be different.\n    For example : \"silent\" is an anagram of \"listen\"\n    '''\n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False\n    \ndef get_unique_chars(str1): \n    '''\n    Write a function to get the unique characters of a given string.\n    '''\n    return list(set(str1))\n    \ndef count_vowels(str1): \n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in str1:\n        if i in vowels:\n            count += 1\n    return count\n    \ndef count_digits(str1): \n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i.isdigit():\n            count += 1\n    return count\n    \ndef count_words(str1): \n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    return len(str1.split())\n    \ndef is_pangram(str1): \n    '''\n    Write a function to check whether a given string is PANGRAM or not.\n    Pangrams are words or sentences containing every letter of the alphabet at least once.\n    For example : \"The quick brown fox jumps over the lazy dog\"\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in str1:\n        if i in vowels:\n            return False\n    return True\n    \ndef calculate_levenshtein_distance(str1, str2): \n    '''\n    Write a function to calculate the Levenshtein Distance between two strings.\n    '''\n    return len(str1) + len(str2) - 2 * levenshtein_distance(str1, str2)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    str2 = \"\"\n    for char in str1:\n        if char.isalpha():\n            str2 = str2 + char\n    print(len(set(str2)))\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_position = 0\n    char_list = []\n    for char in str1:\n        char_lower = char.lower()\n        char_list.append(char_lower)\n    for char in char_list:\n        if char_list.count(char) > 1:\n            char_position += 1\n    print(char_position)\n    return char_position\ncount_char_position('This is a test string') # 3\ncount_char_position('aBc') # 1\ncount_char_position('aBa') # 2\ncount_char_position('x') # 0\ncount_char_position('This is a test') # 5\ncount_char_position('ThisIsATest') # 3\ncount_char_position('ThisIsATest123') # 6\ncount_char_position('ThisIsATest123') # 6\ncount_char_position('abc') # 0\ncount_char_position('abcdef') # 0\ncount_char_position('abcABC') # 1\ncount_char_position('abcABCD') # 1\ncount_char_position('aBcde') # 2\ncount_char_position('aBcDe') # 3\ncount_char_position('aBcDeF') # 4\ncount_char_position('abcde') # 5\ncount_char_position('abcdefg') # 6\ncount_char_position('abcdefgh') # 7\ncount_char_position('abcdefghi') # 8\ncount_char_position('abcdefghiJ') # 9\ncount_char_position('abcdefghiJK') # 10\ncount_char_position('abcdefghijk') # 11\ncount_char_position('abcdefghijkl') # 12\ncount_char_position('abcdefghijkL') # 12\ncount_char_position('abcdefghijklm') # 13\ncount_char_position('abcdefghijklmn') # 14\ncount_char_position('abcdefghijklmnp') # 15\ncount_char_position('abcdefghijklmnop') # 16\ncount_char_position('abcdefghijklmnopq') # 17\ncount_char_position('abcdefghijklmnopqr') # 18\ncount_char_position('abcdefghijklmnopqrs') # 19\ncount_char_position('abcdefghijklmnopqrst') # 20\ncount_char_position('abcdefghijklmnopqrstu') # 21\ncount_char_position('abcdefghijklmnopqrstuv') # 22\ncount_char_position('abcdefghijklmnopqrstuw') # 23\ncount_char_position('abcdefghijklmnopqrstuvw') # 24\ncount_char_position('abcdefghijklmnopqrstuvwx') # 25\ncount_char_position('abcdefghijklmnopqrstuvwxy') # 26\ncount_char_position('abcdefghijklmnopqrstuvwxyz') # 27\ncount_char_position('abcdefghijklmnopqrstuvwxyz1') # 28\ncount_char_position('abcdefghijklmnopqrstuvwxyz12') # 29\ncount_char_position('abcdefghijklmnopqrstuvwxyz123') # 30\ncount_char_position('abcdefghijklmnopqrstuvwxyz1234') # 31\ncount_char_position('abcdefghijklmnopqrstuvwxyz12345') # 32\ncount_char_position('abcdefghijklmnopqrstuvwxyz123456') # 33\ncount_char_position('abcdefghijklmnopqrstuvwxyz1234567') # 34\ncount_char_position('abcdefghijklmnopqrstuvwxyz123456789') # 35\ncount_char_position('abcdefghijklmnopqrstuvwxyz12345678910') # 36\ncount_char_position('abcdefghijklmnopqrstuvwxyz1234567891011') # 37\ncount_char_position('abcdefghijklmnopqrstuvwxyz123456789101112') # 38\ncount_char_position('abcdefghijklmnopqrstuvwxyz12345678910111213') # 39\ncount_char_position('abcdefghijklmnopqrstuvwxyz1234567891011121314') # 40\ncount_char_position('abcdefghijklmnopqrstuvwxyz123456789101112131415') # 41\ncount_char_position('abcdefghijklmnopqrstuvwxyz12345678910111213141516') # 42\ncount_char_position('abcdefghijklmnopqrstuvwxyz1234567891011121314151617') # 43\ncount_char_position('abcdefghijklmnopqrstuvwxyz123456789101112131415161718') # 44\ncount_char_position('abcdefghijklmnopqrstuvwxyz12345678910111213141516171819') # 45\ncount_char_position('abcdefghijklmnopqrstuvwxyz1234567891011121314151617181920') # 46\ncount_char_position('abcdefghijklmnopqrstuvwxyz123456789101112131415161718192021') # 47\ncount_char_position('abcdefghijklmnopqrstuvwxyz12345678910111213141516171819202122') # 48\ncount_char_position('abcdefghijklmnopqrstuvwxyz123456789101112131415161718192021223') # 49\ncount_char_position('abcdefghijklmnopqrstuvwxyz1234567891011121314151617181920212224') # 50\ncount_char_position('abcdefghijklmnopqrstuvwxyz123456789101112131415161718192021222425') # 51\ncount_char_position('abcdefghijklmnopqrstuvwxyz12345678910111213141516171819202122242526') # 52\ncount_char_position('abcdefghijklmnopqrstuvwxyz1234567891011121314151617181920212224252627') # 53\ncount_char_position('abcdefghijklmnopqrstuvwxyz123456789101112131415161718192021222425262728') # 54\ncount_char_position('abcdefghijklmnopqrstuvwxyz12345678910111213141516171819202122242526272829') # 55\ncount_char_position('abcdefghijklmnopqrstuvwxyz123456789101112131415161718192021222425262728292') # 56\ncount_char_position('abcdefghijklmnopqrstuvwxyz1234567891011121314151617181920212224252627282931') # 57\ncount_char_position('abcdefghijklmnopqrstuvwxyz12345678910111213141516171819202122242526272829313132') # 58\ncount_char_position('abcdefghijklmnopqrstuvwxyz123456789101112131415161718192021222425262728293131323334') # 59\ncount_char_position('abcdefghijklmnopqrstuvwxyz1234567891011121314151617181920212224252627282931313233343536') # 60\ncount_char_position('abcdefghijklmnopqrstuvwxyz123456789101112131415161718192021222425262728293131323334353637') # 61\ncount_char_position('abcdefghijklmnopqrstuvwxyz12345678910111213141516171819202122242526272829313132333435363738') "
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #1. make the letters uppercase, remove any non-letters\n    str2 = str1.upper()\n    str3 = ''\n    for l in str2:\n        if l.isalpha():\n            str3 += l\n    #print(str3)\n    #2. make a dictionary of all the letters and their positions\n    dict_letters = {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'H': 8, 'I': 9, 'J': 10, 'K': 11, 'L': 12, 'M': 13, 'N': 14, 'O': 15, 'P': 16, 'Q': 17, 'R': 18, 'S': 19, 'T': 20, 'U': 21, 'V': 22, 'W': 23, 'X': 24, 'Y': 25, 'Z': 26}\n    #3. create a list of the positions for each letter\n    positions = []\n    for letter in dict_letters:\n        positions.append(dict_letters[letter])\n    #print(positions)\n    #4. create a dictionary of the letters and their positions in the string\n    dict_letter_positions = {}\n    for letter in str3:\n        if letter in dict_letter_positions:\n            dict_letter_positions[letter] += 1\n        else:\n            dict_letter_positions[letter] = 1\n    #print(dict_letter_positions)\n    #5. use the dictionary of letter positions to compare to the dictionary of the string positions\n    count = 0\n    for letter in dict_letter_positions:\n        if dict_letter_positions[letter] in positions:\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    my_dict = {}\n    str1 = str1.lower()\n    \n    for ch in str1:\n        if ch.isalpha():\n            my_dict[ch] = str1.count(ch)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    result = {}\n    for i in range(len(str1)):\n        char = str1[i]\n        if char.isalpha():\n            if char in result:\n                result[char] += 1\n            else:\n                result[char] = 1\n    print(\"Number of character that occur in same position as in English alphabet: \", end=\"\")\n    print(result)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    dict = {i : 0 for i in range(26)}\n    for c in str1:\n        if c.isalpha():\n            dict[ord(c) - ord('a')] += 1\n    print(dict)\n    return sum(dict.values())\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([ch for ch in str1 if str1.lower().index(ch) == chr(ord(ch) - ord('a') + ord('a'))])\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for char in str1.lower():\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    print(\"Number of Character is {}\".format(len(char_count)))\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if not str1:\n        return None\n    str2 = str1.lower()\n    char_dict = {}\n    for char in str2:\n        if char in char_dict.keys():\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if not A:\n        return None\n    else:\n        B = [x^2 for x in A]\n        C = []\n        for x in B:\n            if x in C:\n                return True\n            else:\n                C.append(x)\n    return False\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Counts the number of even pairs\n    even_count = 0\n    for num1 in A:\n        for num2 in A:\n            if num1 ^ num2 == 0:\n                even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i + 1, len(A)): \n            if (A[i] ^ A[j] ) % 2 == 0: \n                count += 1\n    return count \n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n    seen = set()\n    for a in A:\n        if a % 2 == 0:\n            evens = set([a])\n            for b in A:\n                if b % 2 == 0:\n                    evens.add(b)\n                x = a ^ b\n                if x % 2 == 0 and x in evens:\n                    seen.add((a, x))\n    return len(seen)\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 0:\n        return 0\n    if len(A) == 1:\n        if A[0] == 0:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for num in A:\n        if num % 2 == 0:\n            for num2 in A:\n                if (num2 ^ num) % 2 == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for num in A:\n        for num2 in A:\n            if(num ^ num2 == 0):\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(n) space complexity\n    sum = 0\n    for item in A:\n        sum ^= item\n    return sum // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(1) space complexity\n    sum = 0\n    for item in A:\n        sum ^= item\n    return sum // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(1) space complexity\n    return sum([i for i in A if i % 2 == 0]) // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(n) space complexity\n    sum = 0\n    A.sort()\n    for i, item in enumerate(A):\n        if i % 2 == 0:\n            sum ^= item\n    return sum // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(n) space complexity\n    sum = 0\n    for i, item in enumerate(A):\n        if i % 2 == 0:\n            sum ^= item\n    return sum // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(n) space complexity\n    return sum([i for i in A if i % 2 == 0]) // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(1) space complexity\n    return sum([item % 2 == 0 for item in A]) // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(n) space complexity\n    sum = 0\n    for item in A:\n        if item % 2 == 0:\n            sum += 1\n    return sum // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(n) space complexity\n    sum = 0\n    for item in A:\n        if item & 1 == 0:\n            sum += 1\n    return sum // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(1) space complexity\n    return sum([item % 2 == 0 for item in A]) // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(1) space complexity\n    return sum([item & 1 == 0 for item in A]) // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(1) space complexity\n    sum = 0\n    for item in A:\n        if item & 1:\n            sum += 1\n    return sum // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(1) space complexity\n    return sum([item & 1 == 0 for item in A]) // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(1) space complexity\n    return sum([item & 1 for item in A]) // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(1) space complexity\n    return sum([item % 2 == 0 for item in A]) // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(1) space complexity\n    return sum([item & 1 for item in A]) // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(1) space complexity\n    return sum([item % 2 == 0 for item in A]) // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(1) space complexity\n    return sum([item & 1 == 0 for item in A]) // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(n) space complexity\n    sum = 0\n    for item in A:\n        sum += item & 1\n    return sum // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(n) space complexity\n    sum = 0\n    for i, item in enumerate(A):\n        sum += item & 1\n    return sum // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(n) space complexity\n    return sum([item & 1 == 0 for item in A]) // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(1) space complexity\n    return sum([item & 1 for item in A]) // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(1) space complexity\n    return sum([item & 1 for item in A]) // 2\n    \ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time complexity\n    # O(n) space complexity\n    sum = 0\n    for item in A:\n        if item & 1 == 0:\n            sum += "
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    evens = []\n    for i in A:\n        if i % 2 == 0:\n            evens.append(i)\n    return evens\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # code goes here\n    pass\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2**(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n > 0:\n        if n & n - 1 == 0:\n            return n\n        else:\n            return n + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 0:\n        return -1\n    return 1 << (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n: \n        i = i << 1\n    return i\n  \ndef next_greater_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = n\n    while i > 1: \n        i = i >> 1\n    return (1 << i)\n  \ndef is_power_of_2(n):\n    '''\n    Write a python function to check whether the given number n is power of 2 or not.\n    '''\n    if n < 0:\n        return False\n    while n > 1:\n        if n%2!= 0:\n            return False\n        n = n // 2\n    return True\n  \ndef is_power_of_2_v2(n):\n    '''\n    Write a python function to check whether the given number n is power of 2 or not.\n    '''\n    return n > 0 and n&(n-1) == 0\n  \ndef is_power_of_2_v3(n):\n    '''\n    Write a python function to check whether the given number n is power of 2 or not.\n    '''\n    return n > 0 and n & n-1 == 0\n  \ndef is_power_of_2_v4(n):\n    '''\n    Write a python function to check whether the given number n is power of 2 or not.\n    '''\n    return n > 0 and n % 2 == 0\n  "
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n is None:\n        return None\n    n = abs(n)\n    if n == 0:\n        return 1\n    if n > 0:\n        if n & (n - 1) == 0:\n            return n\n        else:\n            return 2**(n.bit_length()-1)\n    if n < 0:\n        n = -n\n        if n & (n - 1) == 0:\n            return -n\n        else:\n            return -2**(n.bit_length()-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** (n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2**(n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 0\n    if n >= 0:\n        while n >= 2**power:\n            power += 1\n        return power\n    else:\n        power = 1\n        while n < 2**power:\n            power += 1\n        return power\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if x == i:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = 0\n    for i in a:\n        if i == x:\n            c += 1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if x == i:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n + 1):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) < n or len(list1) < m:\n        return \"Not enough items in list\"\n    total = 0\n    for i in range(m, n):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Method 1\n    # if m > n:\n    #     temp = m\n    #     m = n\n    #     n = temp\n    # return sum(list1[m:n])\n    \n    # Method 2\n    return sum(list1[m:n])\n    \n    # Method 3\n    # return sum(list1[m:n])\n    \n    # Method 4\n    # return sum([list1[m], list1[n]])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    sum_total
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in range(m, n + 1):\n        sum1 = sum1 + list1[i]\n    return sum1\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m <= n:                                                                                                                                                                                                                        \n        return sum(list1[m:n])                                                                                                                                                                                                                        \n    elif m > n:                                                                                                                                                                                                                        \n        return -1                                                                                                                                                                                                                        \n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum([i for i in list1 if m <= i <= n])\n    \n    \ndef rotate_list(list1, n):\n    '''\n    Write a function to rotate a list by a specified amount, positive for left and negative for right. \n    '''\n    return list1[n:] + list1[:n]\n    \n    \ndef rotate_string(string1, n):\n    '''\n    Write a function to rotate characters in a string.\n    '''\n    return string1[n:] + string1[:n]\n    \n    \ndef sum_digits(n):\n    '''\n    Write a function to sum all the digits of a number.\n    '''\n    if n < 10: return n\n    return n%10 + sum_digits(n/10)\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n == 1: return False\n    for i in range(2, n):\n        if n % i == 0: return False\n    return True\n    \n    \ndef find_primes(n):\n    '''\n    Write a function to find all prime numbers up to n.\n    '''\n    return [i for i in range(2, n) if is_prime(i)]\n    \n    \ndef print_primes_between(m, n):\n    '''\n    Write a function to print all the prime numbers between two numbers.\n    '''\n    for i in range(m, n):\n        if is_prime(i): print i\n    \n    \ndef print_only_primes(n):\n    '''\n    Write a function to print all the prime numbers up to n.\n    '''\n    for i in range(2, n):\n        if is_prime(i): print i\n    \n    \ndef print_prime_factors(n):\n    '''\n    Write a function to print all the prime factors of a number.\n    '''\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i): print i\n    \n    \ndef print_non_prime_factors(n):\n    '''\n    Write a function to print all the non-prime factors of a number.\n    '''\n    for i in range(2, n):\n        if n % i!= 0 and is_prime(i): print i\n    \n    \ndef print_prime_factors_up_to_n(n):\n    '''\n    Write a function to print all the prime factors of a number, up to and including n.\n    '''\n    for i in range(2, n+1):\n        if n % i == 0 and is_prime(i): print i\n    \n    \ndef print_non_prime_factors_up_to_n(n):\n    '''\n    Write a function to print all the non-prime factors of a number, up to and including n.\n    '''\n    for i in range(2, n+1):\n        if n % i!= 0 and is_prime(i): print i\n    \n    \ndef print_multiples_of_prime_factors(n, pf):\n    '''\n    Write a function to print all the multiples of prime factors up to n.\n    '''\n    if is_prime(pf):\n        for i in range(1, n+1):\n            if i % pf == 0: print i\n    \n    \ndef sum_of_multiples_of_prime_factors(n, pf):\n    '''\n    Write a function to find the sum of all the multiples of prime factors up to n.\n    '''\n    if is_prime(pf):\n        return (n/pf + n/pf)*pf\n    \n    \ndef print_prime_factors_of_factorial(n):\n    '''\n    Write a function to print all the prime factors of the factorial of a number.\n    '''\n    from math import factorial\n    print_prime_factors_up_to_n(factorial(n))\n    \n    \ndef print_non_prime_factors_of_factorial(n):\n    '''\n    Write a function to print all the non-prime factors of the factorial of a number.\n    '''\n    from math import factorial\n    print_non_prime_factors_up_to_n(factorial(n))\n    \n    \ndef print_all_factors_of_factorial(n):\n    '''\n    Write a function to print all the factors of the factorial of a number.\n    '''\n    from math import factorial\n    print_prime_factors_of_factorial(n)\n    print_non_prime_factors_of_factorial(n)\n    \n    \ndef print_fibonacci(n):\n    '''\n    Write a function to print the first n Fibonacci numbers.\n    '''\n    if n == 0: return []\n    elif n == 1: return [0]\n    elif n == 2: return [0, 1]\n    else:\n        a, b = 0, 1\n        fibs = [0, 1]\n        for i in range(2, n):\n            a, b = b, a + b\n            fibs.append(b)\n        return fibs\n        \n        \ndef print_fibonacci_recursive(n):\n    '''\n    Write a function to print the first n Fibonacci numbers.\n    '''\n    from math import sqrt\n    def fibonacci_helper(a, b, n):\n        if n == 0: return a\n        if n == 1: return b\n        return fibonacci_helper(b, a + b, n - 1)\n    \n    if n == 0: return []\n    if n == 1: return [0]\n    if n == 2: return [0, 1]\n    else:\n        a, b = 0, 1\n        fibs = [0, 1]\n        while len(fibs) < n:\n            a, b = b, a + b\n            fibs.append(b)\n        return fibs\n        \ndef sum_of_square_digits(n):\n    '''\n    Write a function to sum all the digits of the squares of the first n natural numbers.\n    '''\n    return sum([int(d)**2 for d in str(n**2)])\n    \n    \ndef find_largest_palindrome_product(n):\n    '''\n    Write a function to find the largest palindrome product of two 3-digit numbers.\n    '''\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    largest = 0\n    for i in range(999, 99, -1):\n        for j in range(999, 99, -1):\n            if is_palindrome(i * j) and i * j > largest:\n                largest = i * j\n    return largest\n    \n    \ndef find_largest_palindrome_product_with_product_greater_than(n):\n    '''\n    Write a function to find the largest palindrome product of two 3-digit numbers, where the product is greater than a given integer.\n    '''\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    largest = 0\n    for i in range(999, 99, -1):\n        for j in range(999, 99, -1):\n            if is_palindrome(i * j) and i * j > n:\n                largest = i * j\n    return largest\n    \n    \ndef sum_of_squares_of_digits(n):\n    '''\n    Write a function to sum the squares of the digits of a number.\n    '''\n    return sum([int(d)**2 for d in str(n)])\n    \n    \ndef find_largest_product_of_consecutive_digits(n):\n    '''\n    Write a function to find the largest product of consecutive digits of a number.\n    '''\n    largest = 0\n    for i in range(1, n):\n        product = 1\n        for j in range(i, n + 1):\n            product *= int(str(j)[-1])\n            if product > largest:\n            "
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # For this function, we will assume that the list is not sorted. \n    # We will also assume that the list has both positive and negative numbers. \n    # Therefore, the first step is to find the index of the smallest value in the list. \n    # This value will be the value of the index of the first positive number in the list. \n    # In this case, it will be the index of the smallest value of the list. \n    # The next step is to iterate over the list from the index of the smallest value to the index of the second smallest value (we will assume that the indices are the same, since the list is not sorted). \n    # We will add the sum of the values from the current index to the index of the next smallest value. \n    # We will add this sum to the sum variable and increment the current index. \n    # Lastly, we will return the sum variable.\n    # We will also assume that we will not encounter duplicate values in the list.\n    # We will also assume that the list is not empty.\n    if len(list1) == 0:                                                                                                                                                                                                                \n        return 'error'\n    index_of_smallest_value = 0\n    for i in range(0, len(list1)):                                                                                                                                                                                                                        \n        if list1[i] < list1[index_of_smallest_value]:                                                                                                                                                                                                    \n            index_of_smallest_value = i                                                                                                                                                                                                                \n    sum = 0                                                                                                                                                                                                                                        \n    current_index = index_of_smallest_value                                                                                                                                                                                                            \n    while current_index < len(list1):                                                                                                                                                                                                                        \n        sum = sum + list1[current_index]                                                                                                                                                                                                                        \n        current_index = current_index + 1                                                                                                                                                                                                                        \n    return sum                                                                                                                                                                                                                                        "
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (a * 5)\n    return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/5))\n    return area\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = (a * 6)\n    return perimeter\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from its radius.\n    '''\n    area = (a ** 2) * math.sqrt(3) / 2\n    return area\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    perimeter = (a * 7)\n    return perimeter\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/7))\n    return area\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = (a * 8)\n    return perimeter\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/8))\n    return area\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = (a * 9)\n    return perimeter\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/9))\n    return area\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    perimeter = (a * 10)\n    return perimeter\ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/10))\n    return area\ndef perimeter_undecagon(a):\n    '''\n    Write a function to find the perimeter of a regular undecagon from the length of its sides.\n    '''\n    perimeter = (a * 11)\n    return perimeter\ndef area_undecagon(a):\n    '''\n    Write a function to find the area of a regular undecagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/11))\n    return area\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    perimeter = (a * 12)\n    return perimeter\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a regular dodecagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/12))\n    return area\ndef perimeter_tredecagon(a):\n    '''\n    Write a function to find the perimeter of a regular tredecagon from the length of its sides.\n    '''\n    perimeter = (a * 13)\n    return perimeter\ndef area_tredecagon(a):\n    '''\n    Write a function to find the area of a regular tredecagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/13))\n    return area\ndef perimeter_quattuordecagon(a):\n    '''\n    Write a function to find the perimeter of a regular quattuordecagon from the length of its sides.\n    '''\n    perimeter = (a * 14)\n    return perimeter\ndef area_quattuordecagon(a):\n    '''\n    Write a function to find the area of a regular quattuordecagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/14))\n    return area\ndef perimeter_quindecagon(a):\n    '''\n    Write a function to find the perimeter of a regular quindecagon from the length of its sides.\n    '''\n    perimeter = (a * 15)\n    return perimeter\ndef area_quindecagon(a):\n    '''\n    Write a function to find the area of a regular quindecagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/15))\n    return area\ndef perimeter_quinceagon(a):\n    '''\n    Write a function to find the perimeter of a regular quinceagon from the length of its sides.\n    '''\n    perimeter = (a * 16)\n    return perimeter\ndef area_quinceagon(a):\n    '''\n    Write a function to find the area of a regular quinceagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/16))\n    return area\ndef perimeter_sedecagon(a):\n    '''\n    Write a function to find the perimeter of a regular sedecagon from the length of its sides.\n    '''\n    perimeter = (a * 17)\n    return perimeter\ndef area_sedecagon(a):\n    '''\n    Write a function to find the area of a regular sedecagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/17))\n    return area\ndef perimeter_septendecagon(a):\n    '''\n    Write a function to find the perimeter of a regular septendecagon from the length of its sides.\n    '''\n    perimeter = (a * 18)\n    return perimeter\ndef area_septendecagon(a):\n    '''\n    Write a function to find the area of a regular septendecagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/18))\n    return area\ndef perimeter_octodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular octodecagon from the length of its sides.\n    '''\n    perimeter = (a * 19)\n    return perimeter\ndef area_octodecagon(a):\n    '''\n    Write a function to find the area of a regular octodecagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/19))\n    return area\ndef perimeter_novemdecagon(a):\n    '''\n    Write a function to find the perimeter of a regular novemdecagon from the length of its sides.\n    '''\n    perimeter = (a * 20)\n    return perimeter\ndef area_novemdecagon(a):\n    '''\n    Write a function to find the area of a regular novemdecagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/20))\n    return area\ndef perimeter_vigintedenegagon(a):\n    '''\n    Write a function to find the perimeter of a regular vigintedenegagon from the length of its sides.\n    '''\n    perimeter = (a * 21)\n    return perimeter\ndef area_vigintedenegagon(a):\n    '''\n    Write a function to find the area of a regular vigintedenegagon from its radius.\n    '''\n    area = (a ** 2) * (math.sin(math.pi/21))\n    return area\ndef perimeter_centumdecagon(a):\n    '''\n    Write a function to find the perimeter of a regular centumdecagon from the length of its sides.\n    '''\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return(perimeter)\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    area = 5 * (a ** 2) / (4 * math.tan(math.pi / 5))\n    return area\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = 6 * a\n    return perimeter\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    area = 6 * (a ** 2) / (3 * math.tan(math.pi / 6))\n    return area\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = 8 * a\n    return perimeter\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    area = 8 * (a ** 2) / (3 * math.tan(math.pi / 8))\n    return area\ndef perimeter_annulus(a,b):\n    '''\n    Write a function to find the perimeter of a regular annulus from the length of its outer and inner radius.\n    '''\n    perimeter = 2 * (a + b)\n    return perimeter\ndef area_annulus(a,b):\n    '''\n    Write a function to find the area of a regular annulus from the length of its outer and inner radius.\n    '''\n    area = 2 * math.pi * (a ** 2) - 2 * math.pi * (b ** 2)\n    return area\ndef perimeter_circle(a):\n    '''\n    Write a function to find the perimeter of a regular circle from the length of its radius.\n    '''\n    perimeter = 2 * math.pi * a\n    return perimeter\ndef area_circle(a):\n    '''\n    Write a function to find the area of a regular circle from the length of its radius.\n    '''\n    area = math.pi * (a ** 2)\n    return area\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the length of its sides.\n    '''\n    perimeter = 2 * (a + b)\n    return perimeter\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from the length of its sides.\n    '''\n    area = a * b\n    return area\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its side.\n    '''\n    perimeter = 4 * a\n    return perimeter\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its side.\n    '''\n    area = a ** 2\n    return area\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    perimeter = a + b + c\n    return perimeter\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    semi_perimeter = (a + b + c) / 2\n    area = math.sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c))\n    return area\ndef perimeter_parallelogram(a,b):\n    '''\n    Write a function to find the perimeter of a regular parallelogram from the length of its sides.\n    '''\n    perimeter = 2 * (a + b)\n    return perimeter\ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a regular parallelogram from the length of its sides.\n    '''\n    area = a * b\n    return area\ndef perimeter_kite(a,b):\n    '''\n    Write a function to find the perimeter of a regular kite from the length of its sides.\n    '''\n    perimeter = a + b + math.sqrt(a ** 2 + b ** 2)\n    return perimeter\ndef area_kite(a,b):\n    '''\n    Write a function to find the area of a regular kite from the length of its sides.\n    '''\n    area = (a * b) / 2\n    return area\ndef perimeter_rhombus(a,b):\n    '''\n    Write a function to find the perimeter of a regular rhombus from the length of its sides.\n    '''\n    perimeter = 4 * math.sqrt(2) * (a ** 2)\n    return perimeter\ndef area_rhombus(a,b):\n    '''\n    Write a function to find the area of a regular rhombus from the length of its sides.\n    '''\n    area = 1 / 4 * math.sqrt(2) * (a ** 2) * b\n    return area\ndef perimeter_trapezoid(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular trapezoid from the length of its sides.\n    '''\n    perimeter = a + b + c\n    return perimeter\ndef area_trapezoid(a,b,c):\n    '''\n    Write a function to find the area of a regular trapezoid from the length of its sides.\n    '''\n    area = ((a + b) / 2) * c\n    return area\ndef perimeter_equilateral_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular equilateral triangle from the length of its side.\n    '''\n    perimeter = 3 * a\n    return perimeter\ndef area_equilateral_triangle(a):\n    '''\n    Write a function to find the area of a regular equilateral triangle from the length of its side.\n    '''\n    area = math.sqrt(3) / 4 * a ** 2\n    return area\ndef perimeter_square_pyramid(a,b):\n    '''\n    Write a function to find the perimeter of a regular square pyramid from the length of its sides.\n    '''\n    perimeter = 4 * a + 4 * b\n    return perimeter\ndef area_square_pyramid(a,b):\n    '''\n    Write a function to find the area of a regular square pyramid from the length of its sides.\n    '''\n    area = 2 * (a ** 2) + (b ** 2)\n    return area\ndef perimeter_rectangle_pyramid(a,b):\n    '''\n    Write a function to find the perimeter of a regular rectangle pyramid from the length of its sides.\n    '''\n    perimeter = 4 * (a + b)\n    return perimeter\ndef area_rectangle_pyramid(a,b):\n    '''\n    Write a function to find the area of a regular rectangle pyramid from the length of its sides.\n    '''\n    area = 2 * (a * b)\n    return area\ndef perimeter_rhombus_pyramid(a,b):\n    '''\n    Write a function to find the perimeter of a regular rhombus pyramid from the length of its sides.\n    '''\n    perimeter = 4 * (math.sqrt(2) * a + b)\n    return perimeter\ndef area_rhombus_pyramid(a,b):\n    '''\n    Write a function to find the area of a regular rhombus pyramid from the length of its sides.\n    '''\n    area = math.sqrt(2) * (a * b)\n    return area\ndef perimeter_hexagon_pyramid(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon pyramid from the length of its side.\n    '''\n    perimeter = 6 * a\n    return perimeter\ndef area_hexagon_pyramid(a):\n    '''\n    Write a function to find the area of a regular hexagon pyramid from the length of its side.\n    '''\n    area = math.sqrt(3) / 2 * (a ** 2)\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\ndef area_triangle(b,h):\n    '''\n    Write a function to calculate the area of a triangle from the length of its sides.\n    '''\n    return 0.5*b*h\ndef area_rectangle(a,b):\n    '''\n    Write a function to calculate the area of a rectangle from the length of its sides.\n    '''\n    return a*b\ndef area_parallelogram(a,b):\n    '''\n    Write a function to calculate the area of a parallelogram from the length of its sides.\n    '''\n    return a*b\ndef area_square(a):\n    '''\n    Write a function to calculate the area of a square from the length of its sides.\n    '''\n    return a**2\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to calculate the area of a trapezium from the length of its sides.\n    '''\n    return 1/2*(a+b)*h\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle from the length of its radius.\n    '''\n    return math.pi*r**2\ndef area_ellipse(a,b):\n    '''\n    Write a function to calculate the area of an ellipse from the length of its axes.\n    '''\n    return math.pi*a*b\ndef area_rhombus(a,b):\n    '''\n    Write a function to calculate the area of a rhombus from the length of its sides.\n    '''\n    return a*b\ndef area_pentagon(a):\n    '''\n    Write a function to calculate the area of a pentagon from the length of its sides.\n    '''\n    return 1/2*a*a*math.tan(math.pi/5)\ndef perimeter_trapezium(a,b,h):\n    '''\n    Write a function to find the perimeter of a trapezium from the length of its sides.\n    '''\n    return a+b+h\ndef perimeter_kite(a,b):\n    '''\n    Write a function to find the perimeter of a kite from the length of its sides.\n    '''\n    return a+b+a\ndef perimeter_rhombus(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus from the length of its sides.\n    '''\n    return 2*a+2*b\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from the length of its sides.\n    '''\n    return 4*a\ndef perimeter_parallelogram(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle from the length of its radius.\n    '''\n    return 2*math.pi*r\ndef perimeter_ellipse(a,b):\n    '''\n    Write a function to find the perimeter of an ellipse from the length of its axes.\n    '''\n    return 2*math.pi*(a+b)\ndef perimeter_trapezoid(a,b,h):\n    '''\n    Write a function to find the perimeter of a trapezoid from the length of its sides.\n    '''\n    return a+b+h\ndef perimeter_kite(a,b):\n    '''\n    Write a function to find the perimeter of a kite from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle from the length of its radius.\n    '''\n    return 2*math.pi*r\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_parallelogram(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from the length of its sides.\n    '''\n    return 4*a\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle from the length of its sides.\n    '''\n    return a+b+c\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from the length of its sides.\n    '''\n    return 4*a\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_parallelogram(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_kite(a,b):\n    '''\n    Write a function to find the perimeter of a kite from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a pentagon from the length of its sides.\n    '''\n    return 5*a\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle from the length of its radius.\n    '''\n    return 2*math.pi*r\ndef perimeter_ellipse(a,b):\n    '''\n    Write a function to find the perimeter of an ellipse from the length of its axes.\n    '''\n    return 2*math.pi*(a+b)\ndef perimeter_rhombus(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle from the length of its sides.\n    '''\n    return a+b+c\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from the length of its sides.\n    '''\n    return 4*a\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_parallelogram(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_kite(a,b):\n    '''\n    Write a function to find the perimeter of a kite from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a pentagon from the length of its sides.\n    '''\n    return 5*a\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle from the length of its radius.\n    '''\n    return 2*math.pi*r\ndef perimeter_ellipse(a,b):\n    '''\n    Write a function to find the perimeter of an ellipse from the length of its axes.\n    '''\n    return 2*math.pi*(a+b)\ndef perimeter_rhombus(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus from the length of its sides.\n    '''\n    return 2*(a+b)\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle from the length of its sides.\n    '''\n    return a+b+c\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from the length of it"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = []\n    for side in range(0, 5):\n        sides.append(int(input(f'Enter side #{side + 1} for pentagon: ')))\n    perimeter = 0\n    for side in sides:\n        perimeter += side\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return 5*a*a/4*math.tan(math.pi/5)\ndef right_triangle_perimeter(a, b):\n    '''\n    Write a function to find the perimeter of a right triangle from the length of its sides.\n    '''\n    return a+b+math.sqrt(a*a+b*b)\ndef right_triangle_area(a, b):\n    '''\n    Write a function to find the area of a right triangle from the length of its sides.\n    '''\n    return math.sqrt(a*a+b*b)/2\ndef slope_of_a_line(x1, y1, x2, y2):\n    '''\n    Write a function to find the slope of a line from the coordinates of two points on that line.\n    '''\n    return (y2-y1)/(x2-x1)\ndef distance_between_two_points(x1, y1, x2, y2):\n    '''\n    Write a function to calculate the distance between two points on a plane.\n    '''\n    return math.sqrt((x2-x1)**2+(y2-y1)**2)\ndef avg_of_2_nums(a, b):\n    '''\n    Write a function to find the average of two numbers.\n    '''\n    return (a+b)/2\ndef avg_of_3_nums(a, b, c):\n    '''\n    Write a function to find the average of three numbers.\n    '''\n    return (a+b+c)/3\ndef avg_of_4_nums(a, b, c, d):\n    '''\n    Write a function to find the average of four numbers.\n    '''\n    return (a+b+c+d)/4\ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    if n==1:\n        return 1\n    return n*factorial(n-1)\ndef perfect_number(n):\n    '''\n    Write a function to check if a number is perfect or not.\n    '''\n    if n<0:\n        return 'Invalid Input'\n    elif n==0:\n        return 'Invalid Input'\n    s=0\n    for i in range(1, n):\n        if n%i==0:\n            s+=i\n    if s==n:\n        return 'Perfect'\n    else:\n        return 'Not Perfect'\ndef prime_number(n):\n    '''\n    Write a function to check if a number is a prime number or not.\n    '''\n    if n<0:\n        return 'Invalid Input'\n    elif n==0:\n        return 'Invalid Input'\n    elif n==1:\n        return 'Not Prime'\n    elif n==2:\n        return 'Prime'\n    else:\n        for i in range(2, n):\n            if n%i==0:\n                return 'Not Prime'\n        return 'Prime'\ndef f_to_c(f):\n    '''\n    Write a function to convert temperature from Fahrenheit to Celsius.\n    '''\n    return 5/9*(f-32)\ndef c_to_f(c):\n    '''\n    Write a function to convert temperature from Celsius to Fahrenheit.\n    '''\n    return c*(9/5)+32\ndef speed_of_sound(p, t):\n    '''\n    Write a function to calculate the speed of sound given its pressure and temperature.\n    '''\n    return p/(.37*t)\ndef is_triangle(a, b, c):\n    '''\n    Write a function to check if the sides of a triangle have a specific sum or not.\n    '''\n    return a+b>c and a+c>b and b+c>a\ndef is_parallelogram(a, b, c, d):\n    '''\n    Write a function to check if the sides of a parallelogram have a specific sum or not.\n    '''\n    return a+b==c+d\ndef is_square(a, b, c, d):\n    '''\n    Write a function to check if a parallelogram or square has a specific area or not.\n    '''\n    return a==b==c==d\ndef triangle_area(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return a*b*c/2\ndef square_area(a):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return a**2\ndef rectangle_area(a, b):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return a*b\ndef parallelogram_area(a, b, c):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return a*b*c\ndef rectangle_perimeter(a, b):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef triangle_perimeter(a, b, c):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    return a+b+c\ndef square_perimeter(a):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    return 4*a\ndef parallelogram_perimeter(a, b, c):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    return 2*(a+b)\ndef is_right_angled(a, b, c):\n    '''\n    Write a function to check if a triangle is a right-angled triangle.\n    '''\n    return math.sqrt(math.pow(a, 2)+math.pow(b, 2))==c\ndef perimeter_of_parallelogram(a, b, c):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    return a+b+c\ndef sq_perimeter(a):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    return 4*a\ndef sq_area(a):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return a**2\ndef triangle_area(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return a*b*c/2\ndef sq_area(a):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return a**2\ndef sq_perimeter(a):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    return 4*a\ndef parallelogram_perimeter(a, b, c):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    return a+b+c\ndef is_triangle(a, b, c):\n    '''\n    Write a function to check if the sides of a triangle have a specific sum or not.\n    '''\n    return a+b>c and a+c>b and b+c>a\ndef is_parallelogram(a, b, c, d):\n    '''\n    Write a function to check if the sides of a parallelogram have a specific sum or not.\n    '''\n    return a+b==c+d\ndef is_square(a, b, c, d):\n    '''\n    Write a function to check if a parallelogram or square has a specific area or not.\n    '''\n    return a==b==c==d\ndef triangle_area(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return a*b*c/2\ndef square_area(a):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return a**2\ndef rectangle_area(a, b):\n    '''\n    Write "
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (5 * a)\n    return(perimeter)\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Input: side length of a pentagon\n    # Output: perimeter of a pentagon\n    # Method:\n    #     Find the sum of the length of a pentagon's sides\n    #     Multiply the sum by 5\n    #     Subtract the length of its side (assuming the length of each side is the same)\n    #     Add the result to the sum of the length of each side\n    #     Multiply the sum of the length of each side by 2\n    #     Subtract the length of the pentagon\n    return 5*sum(a) - a[0]*2\n    \ndef area_hexagon(a):\n    '''\n    Write a function to calculate the area of a regular hexagon from the length of its sides.\n    '''\n    # Input: side length of a hexagon\n    # Output: area of a hexagon\n    # Method:\n    #     Find the perimeter of a hexagon\n    #     Multiply the perimeter by 3\n    #     Divide the perimeter by 2\n    #     Multiply the result by 6\n    #     Subtract the length of the hexagon\n    return 6*perimeter_hexagon(a)\n    \ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    # Input: side length of a hexagon\n    # Output: perimeter of a hexagon\n    # Method:\n    #     Find the sum of the length of a hexagon's sides\n    #     Multiply the sum by 3\n    #     Divide the sum by 2\n    return 3*sum(a)\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #Use the formula for the perimeter of a regular polygon.\n    #Create a list of the sides and pass the value of the side to the function to calculate the perimeter.\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    #loop through the string\n    for i in range(len(s)):\n        #check if the string'std' is in the string's'\n        if s[i:i+3] =='std':\n            #return the number of occurances\n            return i+1\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    #return len(s.split('std')) - 1\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == \"std\":\n            count += 1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    return all([isinstance(i, type(test_tuple[0])) for i in test_tuple])\n    \ndef check_range(test_tuple, start, end):\n    '''\n    Write a function to check if all the elements in tuple are within the given range.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    return all([i in range(start, end) for i in test_tuple])\n    \ndef check_length(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple are of equal length or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    return all([len(i) == len(test_tuple[0]) for i in test_tuple])\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    result = False\n    if len(test_tuple) > 0:\n        first_element = test_tuple[0]\n        for item in test_tuple:\n            if first_element!= item:\n                result = True\n                break\n    return result\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(\"Tuple to check for same data type:\", test_tuple)\n    if(len(test_tuple) == 0):\n        print(\"At least one element in tuple is missing.\")\n        return False\n    first_type = type(test_tuple[0])\n    for i in test_tuple:\n        if(type(i)!= first_type):\n            print(\"Not all elements in tuple are of same type.\")\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        type(test_tuple[0])\n        if type(test_tuple[0]) == type(test_tuple[1]) == type(test_tuple[2]):\n            print(\"All elements have same data type: \", type(test_tuple[0]))\n        else:\n            raise TypeError\n    except TypeError:\n        print(\"One or more elements do not have same data type.\")\n    return\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    lst = []\n    for i in test_tuple:\n        if type(i) in (int, float, complex):\n            lst.append(type(i))\n        else:\n            print(f'{i} has a data type of {type(i)}')\n    if len(set(lst))!= 1:\n        print('different')\n    else:\n        print('all same')\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    list_of_types = set()\n    for i in test_tuple:\n        list_of_types.add(type(i))\n    if len(list_of_types) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return type(test_tuple[0]) == type(test_tuple[1]) == type(test_tuple[2]) == type(test_tuple[3])\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i])!= type(test_tuple[i - 1]):\n                return False\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple[0]) == type(test_tuple[1]) == type(test_tuple[2]) == type(test_tuple[3]):\n        print(\"It's a tuple\")\n    else:\n        print(\"It's not a tuple\")\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return False if arr[0] == x else True\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    if x not in arr:\n        return False\n    else:\n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n        return True if count > n/2 else False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    #using the binary search algorithm\n    #iterate over the array until either the right or left pointer equals the middle index\n    left = 0\n    right = n-1\n    while left < right:\n        middle = (left+right)//2\n        if arr[middle] < x:\n            left = middle + 1\n        else:\n            right = middle\n    if arr[left] == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return 0\n    if x == arr[n//2]:\n        return 1\n    elif x == arr[n//2+1]:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == x and arr[1] == x\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return False\n    if arr[0] == x and arr[n-1] == x:\n        return True\n    elif arr[0] == x:\n        return is_majority(arr[1:], n-1, x)\n    elif arr[n-1] == x:\n        return is_majority(arr[:n-1], n-1, x)\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    counter = 0\n    for i in arr:\n        if i == x:\n            counter += 1\n    if counter > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1') "
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    while (n): \n        set_bits += n & 1\n        n >>= 1\n    return set_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    while n: \n        c += 1\n        n &= (n-1)\n    return c\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n-1\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\n  \ndef find_missing_element(arr1, arr2): \n  \n    '''\n    Write a python function to find the missing element in two sorted arrays of integers. \n    '''\n    for num in arr1 + arr2: \n        if num not in arr1 or num not in arr2: \n            return num\n          \ndef find_missing_element_set(arr1, arr2): \n  \n    '''\n    Write a python function to find the missing element in two sorted arrays of integers.\n    '''\n    i, j = 0, 0\n  \n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] > arr2[j]: \n            j += 1\n        elif arr2[j] > arr1[i]: \n            i += 1\n        else: \n            return arr1[i] \n  \n    return arr1[i] if i < len(arr1) else arr2[j]\n  \ndef find_missing_element_set_bit(arr1, arr2): \n  \n    '''\n    Write a python function to find the missing element in two sorted arrays of integers.\n    '''\n    i, j = 0, 0\n    n1, n2 = len(arr1), len(arr2)\n    while i < n1 and j < n2: \n      \n        if arr1[i] > arr2[j]: \n            j += 1\n        elif arr2[j] > arr1[i]: \n            i += 1\n        else: \n          \n            # Remove the values from the set. \n            # Also increment i and j. \n            i += 1\n            j += 1\n          \n    # If we reach here, then either \n    # a) We have processed all \n    # elements of array1 or \n    # b) We have processed all \n    # elements of array2. \n    return arr1[i] if i < n1 else arr2[j]\n          "
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while n!=0:\n        count+=n&1\n        n>>=1\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    ans = \"\"\n    for i in range(len(str)):\n        if i%2==0:\n            ans += str[i]\n    return ans\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    s=str\n    lis=[]\n    for i in range(0,len(s)):\n        if i%2==0:\n            lis.append(s[i])\n    print(\"The given string is :\",s)\n    print(\"The string after removing the characters at odd index values :\",''.join(lis))\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = \"Welcome to GeeksforGeeks\"\n    a = \"\"\n    for i in range(len(str)):\n        if i%2 == 0:\n            a = a + str[i]\n    return a\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = []\n    for i, val in enumerate(str):\n        if i%2==0:\n            lst.append(val)\n    \n    return \"\".join(lst)\nprint(odd_values_string('Python'))\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if not str or len(str)==0:\n        return ''\n    return str[0::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n    \nprint(odd_values_string(\"pynative\"))\nprint(odd_values_string(\"Python\"))\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result.append(str[i])\n    return ''.join(result)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # list1 = []\n    # for i in range(len(str)):\n    #     if i % 2 == 0:\n    #         list1.append(str[i])\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n    \ndef odd_values_list(str_list):\n    '''\n    Write a python function to remove the characters which have odd index values of a given list of strings.\n    '''\n    result = []\n    for i in str_list:\n        result.append(odd_values_string(i))\n    return result\n    \ndef odd_values_dict(str_dict):\n    '''\n    Write a python function to remove the characters which have odd index values of a given list of strings.\n    '''\n    result = {}\n    for i in str_dict:\n        result[i] = odd_values_string(str_dict[i])\n    return result\n    \ndef odd_values_set(str_set):\n    '''\n    Write a python function to remove the characters which have odd index values of a given list of strings.\n    '''\n    result = set()\n    for i in str_set:\n        result.add(odd_values_string(i))\n    return result\n        \n    \nodd_values_string(\"abc\")\nodd_values_list([\"abc\", \"xyz\", \"aba\", \"1221\"])\nodd_values_dict({\"1\": \"wxyz\", \"2\": \"1221\"})\nodd_values_set({\"1\": \"wxyz\", \"2\": \"1221\"})\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = a\n    if minimum > b:\n        minimum = b\n    if minimum > c:\n        minimum = c\n    return minimum\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min = a\n    if b < min:\n        min = b\n    if c < min:\n        min = c\n    return min\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        print('Minimum number is :',a)\n    elif b < a and b < c:\n        print('Minimum number is :',b)\n    else:\n        print('Minimum number is :',c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a < b) and (a < c):\n        return a\n    elif (b < a) and (b < c):\n        return b\n    else:\n        return c\nprint(min_of_three(7,5,4))\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if(a<b):\n        if(b<c):\n            return(b)\n        else:\n            return(c)\n    else:\n        if(a<c):\n            return(a)\n        else:\n            return(c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_number = a if a<b and a<c else b if b<c else c \n    return min_number\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a < b and a < c):\n        return a\n    elif (b < a and b < c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #this is the method to solve the problem\n    return not(n&~(l^r))\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    all_bits_unset = 1\n    for i in range(l,r+1):\n        all_bits_unset = all_bits_unset & n\n        n = n >> 1\n        \n    if all_bits_unset == 0:\n        return True\n    else:\n        return False\n    \n    \nprint(all_Bits_Set_In_The_Given_Range(10,0,4))\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    s=0\n    for i in range(l,r+1):\n        s=s|i\n    return (2**n)-1-s\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if n&i:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    if (n&(n-1)) == 0:\n        return False\n    for i in range(l,r):\n        if (n&(1<<i))!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if not is_bit_set(n,i):\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = bin(l)\n    r = bin(r)\n    l = l[2:]\n    r = r[2:]\n    l = str(l)\n    r = str(r)\n    print(l)\n    print(r)\n    if len(l)>len(r):\n        for i in range(len(l)-len(r)):\n            r = \"0\"+r\n    if len(l)<len(r):\n        for i in range(len(r)-len(l)):\n            l = \"0\"+l\n    print(l)\n    print(r)\n    for i in range(len(l)):\n        if l[i]=='1':\n            if r[i]=='0':\n                return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (n & i):\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if n & i:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    set_ = 0\n    for i in range(l,r+1):\n        set_ = set_ + (1<<i)\n    if set_ == n:\n        return 1\n    return 0\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    for i in range(0, n):\n        for j in range(i, n):\n            if arr[j] < 0 and arr[i] > 0:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two arrays to store positive and negative values\n    positive_vals = []\n    negative_vals = []\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    p, n = 0, 0\n    while n < len(arr) and p < len(arr):\n        if arr[p] < 0 and arr[n] > 0:\n            arr[p], arr[n] = arr[n], arr[p]\n            p += 1\n        elif arr[p] < 0:\n            p += 1\n        elif arr[n] > 0:\n            n += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # loop through array\n    # for every element in array\n        # if element is positive\n            # then insert before it\n            # then set it to negative\n        # otherwise\n            # then insert after it\n            # then set it to positive\n    \n    # return array\n    \n    # the negative numbers must be sorted first in descending order so that we can always insert the negative number before the positive one.\n    # I would like to go with a merge sort because it's going to be nlogn\n    # I'm going to do it with a stack and an in-place sorting algorithm\n    \n    # create a stack\n    # create two indexes\n    # loop through arr\n        # if stack is empty\n            # push the first element\n        # if the first element of the stack is > the current element\n            # push it to the stack\n        # if the current element is < 0\n            # pop the element from the stack\n        # if the stack is empty\n            # then push the current element to the stack\n        # if the current element is < 0\n            # then push it to the stack\n        # if the current element is >= 0\n            # then pop the element from the stack\n            # then push it to the stack\n    \n    # set the negative numbers to the first n elements\n    \n    # if the stack is not empty\n        # pop the element from the stack\n        # push it to the array\n    \n    # return the array\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_copy = arr[:n]\n    for i in range(n):\n        if arr[i] < 0:\n            arr_copy[i] = arr[i]\n            arr[i] = arr[n]\n        else:\n            arr[i] = arr[i]\n    return arr_copy\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    left = 0\n    right = n - 1\n    while left < right:\n        #if arr[left] < 0 and arr[right] < 0:\n        if arr[left] < 0 and arr[right] < 0:\n            left += 1\n        elif arr[left] < 0 and arr[right] > 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] > 0 and arr[right] < 0:\n            right -= 1\n        elif arr[left] > 0 and arr[right] > 0:\n            left += 1\n        else:\n            left += 1\n            right -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize empty array\n    neg_arr = []\n    pos_arr = []\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = 0\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low_index = 0\n    high_index = len(arr) - 1\n    while low_index < high_index:\n        if arr[low_index] < 0 and arr[high_index] >= 0:\n            temp = arr[low_index]\n            arr[low_index] = arr[high_index]\n            arr[high_index] = temp\n            low_index += 1\n            high_index -= 1\n        elif arr[low_index] >= 0:\n            low_index += 1\n        else:\n            high_index -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    first = 0\n    last = n - 1\n    i = n - 1\n    while i >= 0:\n        if arr[i] < 0:\n            if arr[i] > arr[last]:\n                temp = arr[first]\n                arr[first] = arr[i]\n                arr[i] = temp\n                i -= 1\n            else:\n                first += 1\n                i -= 1\n        else:\n            last -= 1\n            i -= 1\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"{}\".format(char))\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n    # Write your code here\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(' ', char)\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for char in str1:\n        if char =='':\n            str1 = str1.replace(char,char.upper())\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\")\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char == \"\":\n        raise ValueError\n    str2 = list(str1)\n    for i in range(len(str2)):\n        if str2[i] == \" \":\n            str2[i] = char\n    str3 = ''.join(str2)\n    return str3\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n    \n    \ndef print_range(num1,num2,step):\n    '''\n    Write a function that prints all numbers from num1 to num2 with a step of step.\n    '''\n    return range(num1,num2,step)\n    \n    \ndef print_list(a_list):\n    '''\n    Write a function that prints out all elements in a list.\n    '''\n    for i in a_list:\n        print(i)\n    return a_list\n    \n    \ndef add_all_together(a_list):\n    '''\n    Write a function that adds all the elements of a list together and returns the sum.\n    '''\n    sum = 0\n    for i in a_list:\n        sum += i\n    return sum\n    \n    \ndef remove_last(a_list):\n    '''\n    Write a function that removes the last element from a list.\n    '''\n    return a_list.pop()\n    \n    \ndef remove_last_n(a_list, n):\n    '''\n    Write a function that removes the last n elements from a list.\n    '''\n    return a_list[-n:]\n    \n    \ndef sum_all_up_to(a_list, num):\n    '''\n    Write a function that sums all elements up to and including num.\n    '''\n    sum = 0\n    for i in a_list:\n        sum += i\n        if i > num:\n            break\n    return sum\n    \n    \ndef sum_all_between(a_list, num1, num2):\n    '''\n    Write a function that returns the sum of all numbers between num1 and num2, INCLUSIVE of endpoints.\n    '''\n    sum = 0\n    for i in a_list:\n        if i > num1 and i < num2:\n            sum += i\n        elif i == num1 or i == num2:\n            sum += i\n    return sum\n    \n    \ndef print_evens(a_list):\n    '''\n    Write a function that prints out all even numbers in a list.\n    '''\n    for i in a_list:\n        if i%2 == 0:\n            print(i)\n    \n    \ndef print_all_names(a_list, n):\n    '''\n    Write a function that prints out the first n elements of a list.\n    '''\n    for i in range(n):\n        print(a_list[i])\n    \n    \ndef print_all_names_uppercase(a_list, n):\n    '''\n    Write a function that prints out the first n elements of a list in uppercase.\n    '''\n    for i in range(n):\n        print(a_list[i].upper())\n    \n    \ndef print_all_names_with_index(a_list, n):\n    '''\n    Write a function that prints out the first n elements of a list along with their index in brackets.\n    '''\n    for i in range(n):\n        print(\"[\" + str(i) + \"]\" + \" \" + a_list[i])\n    \n    \ndef print_all_names_reversed(a_list, n):\n    '''\n    Write a function that prints out the last n elements of a list in reverse order.\n    '''\n    for i in range(len(a_list)-1, len(a_list)-n, -1):\n        print(a_list[i])\n    \n    \ndef print_all_names_reversed_with_index(a_list, n):\n    '''\n    Write a function that prints out the last n elements of a list in reverse order along with their index in brackets.\n    '''\n    for i in range(len(a_list)-1, len(a_list)-n, -1):\n        print(\"[\" + str(i) + \"]\" + \" \" + a_list[i])\n    \n    \ndef find_first_even_number(a_list):\n    '''\n    Write a function that returns the first element that is an even number in a list.\n    '''\n    for i in a_list:\n        if i%2 == 0:\n            return i\n    \n    \ndef find_first_odd_number(a_list):\n    '''\n    Write a function that returns the first element that is an odd number in a list.\n    '''\n    for i in a_list:\n        if i%2!= 0:\n            return i\n    \n    \ndef sum_all_even_numbers(a_list):\n    '''\n    Write a function that sums all the even numbers in a list.\n    '''\n    sum = 0\n    for i in a_list:\n        if i%2 == 0:\n            sum += i\n    return sum\n    \n    \ndef sum_all_odd_numbers(a_list):\n    '''\n    Write a function that sums all the odd numbers in a list.\n    '''\n    sum = 0\n    for i in a_list:\n        if i%2!= 0:\n            sum += i\n    return sum\n    \n    \ndef sum_all_positive_numbers(a_list):\n    '''\n    Write a function that sums all positive numbers in a list.\n    '''\n    sum = 0\n    for i in a_list:\n        if i > 0:\n            sum += i\n    return sum\n    \n    \ndef sum_all_negative_numbers(a_list):\n    '''\n    Write a function that sums all negative numbers in a list.\n    '''\n    sum = 0\n    for i in a_list:\n        if i < 0:\n            sum += i\n    return sum\n    \n    \ndef remove_all_evens(a_list):\n    '''\n    Write a function that removes all even numbers in a list.\n    '''\n    for i in a_list:\n        if i%2 == 0:\n            a_list.remove(i)\n            \n    return a_list\n    \n    \ndef remove_all_odds(a_list):\n    '''\n    Write a function that removes all odd numbers in a list.\n    '''\n    for i in a_list:\n        if i%2!= 0:\n            a_list.remove(i)\n            \n    return a_list\n    \n    \ndef remove_all_positive_numbers(a_list):\n    '''\n    Write a function that removes all positive numbers in a list.\n    '''\n    for i in a_list:\n        if i > 0:\n            a_list.remove(i)\n            \n    return a_list\n    \n    \ndef remove_all_negative_numbers(a_list):\n    '''\n    Write a function that removes all negative numbers in a list.\n    '''\n    for i in a_list:\n        if i < 0:\n            a_list.remove(i)\n            \n    return a_list\n    \n    \ndef remove_all_even_numbers(a_list):\n    '''\n    Write a function that removes all even numbers in a list.\n    '''\n    for i in a_list:\n        if i%2 == 0:\n            a_list.remove(i)\n            \n    return a_list\n    \n    \ndef remove_all_odd_numbers(a_list):\n    '''\n    Write a function that removes all odd numbers in a list.\n    '''\n    for i in a_list:\n        if i%2!= 0:\n            a_list.remove(i)\n            \n    return a_list\n    \n    \ndef find_greatest_number(a_list):\n    '''\n    Write a function that finds the greatest number in a list.\n    '''\n    largest = a_list[0]\n    for i in a_list:\n        if i > largest:\n            largest = i\n    return largest\n    \n    \ndef print_greatest_number(a_list):\n    '''\n    Write a function that prints the greatest number in a list.\n    '''\n    print(find_greatest_number(a_list))\n    \n    \ndef print_greatest_number_index(a_list):\n    '''\n    Write a function that prints the index of the greatest number in a list.\n    '''\n    prin"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \",char)\n    return new_str\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=list1[:]\n    list2=[]\n    while len(list1)>n:\n        list2.append(heapq.heappop(list1))\n    return list2"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # print(n)\n    # print(list1)\n    # print(max(list1))\n    # print(list1[n-1])\n    # # print(list1[n])\n    # # print(len(list1))\n    # list1.sort()\n    # print(list1)\n    # print(list1[n-1])\n    # print(list1[n])\n    # print(list1[n+1])\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest=[]\n    for i in range(0,n):\n        largest.append(max(list1))\n        list1.remove(max(list1))\n    return largest\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Your code here\n    list2 = []\n    for i in range(n):\n        list2.append(max(list1))\n        list1.remove(max(list1))\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #returns a list of the n largest items from the list\n    heap = []\n    for i in range(n):\n        if len(list1)!= 0:\n            heapq.heappush(heap, -list1[0])\n            heapq.heappop(list1)\n        else:\n            return heap\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n<=0:\n        return []\n    else:\n        heapq._heapify_max(list1)\n        l=[]\n        for i in range(n):\n            l.append(heapq._heappop_max(list1))\n        return l\n    \n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)\n    \ndef unique_vals(list1):\n    '''\n    Write a function that takes in a list and returns a list containing only the unique values in that list.\n    '''\n    list2 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l=[]\n    for i in list1:\n        l.append(-i)\n    heapq.heapify(l)\n    heapq.heapreplace(l,-list1[0])\n    for i in range(n-1):\n        x=heapq.heappop(l)\n        heapq.heappush(l, -list1[i])\n    return l\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[:n]\n    \ndef larg_nnum1(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list2=[]\n    for i in range(n):\n        list2.append(list1[-1*(i+1)])\n    return list2\n    \ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    list1=list1[:n]\n    return list1\n    \n    \ndef larg_nnum3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list1=list1[len(list1)-n:]\n    return list1\n    \n    \ndef larg_nnum4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    list1=list1[:n]\n    return list1\n    \n    \ndef larg_nnum5(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    heapq.heapify(list1)\n    for i in range(n):\n        list1.pop(0)\n    return list1\n    \n    \ndef larg_nnum6(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    list1.sort()\n    list2=[]\n    for i in range(n):\n        list2.append(heapq.heappop(list1))\n    return list2\n    \n    \ndef larg_nnum7(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    heapq.heapify(list1)\n    list1=heapq.nlargest(n,list1)\n    return list1\n    \ndef larg_nnum8(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    list1=list1[::-1]\n    heapq.heapify(list1)\n    list1=heapq.nlargest(n,list1)\n    return list1[::-1]\n    \n    \ndef larg_nnum9(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    list1=list1[::-1]\n    heapq.heapify(list1)\n    list1=heapq.nlargest(n,list1)\n    return list1[::-1]\n    \ndef larg_nnum10(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    heapq.heapify(list1)\n    list1=heapq.nlargest(n,list1)\n    return list1\n    \ndef larg_nnum11(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    list1=list1[::-1]\n    heapq.heapify(list1)\n    list1=heapq.nlargest(n,list1)\n    return list1[::-1]\n    \ndef larg_nnum12(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    heapq.heapify(list1)\n    list1=heapq.nlargest(n,list1)\n    return list1\n    \ndef larg_nnum13(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    list1=list1[::-1]\n    heapq.heapify(list1)\n    list1=heapq.nlargest(n,list1)\n    return list1[::-1]\n    \ndef larg_nnum14(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    list1=list1[::-1]\n    heapq.heapify(list1)\n    list1=heapq.nlargest(n,list1)\n    return list1[::-1]\n    \ndef larg_nnum15(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    list1=list1[::-1]\n    heapq.heapify(list1)\n    list1=heapq.nlargest(n,list1)\n    return list1[::-1]\n    \ndef larg_nnum16(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    list1=list1[::-1]\n    heapq.heapify(list1)\n    list1=heapq.nlargest(n,list1)\n    return list1\n    \ndef larg_nnum17(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    list1=list1[::-1]\n    heapq.heapify(list1)\n    list1=heapq.nlargest(n,list1)\n    return list1[::-1]\n    \ndef larg_nnum18(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    list1=list1[::-1]\n    heapq.heapify(list1)\n    list1=heapq.nlargest(n,list1)\n    return list1\n    \ndef larg_nnum19(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    list1=list1[::-1]\n    heapq.heapify(list1)\n    list1=heapq.nlargest(n,list1)\n    return list1\n    \ndef larg_nnum20(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    import heapq\n    list1=list1[::-1]\n    heapq.heapify(list1)\n    list1=heapq.nlargest(n,list1)\n    return list1[::-1]\n    \ndef larg_nnum21(list1,n):\n    '"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*r*h\ndef lateralsurface_rectangular_prism(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism.\n    '''\n    return 2*l*w+2*l*h+2*w*h\ndef lateralsurface_square_pyramid(s):\n    '''\n    Write a function to find the lateral surface area of a square pyramid.\n    '''\n    return 0.5*s**2+s*1.5\ndef lateralsurface_triangular_prism(s,a):\n    '''\n    Write a function to find the lateral surface area of a triangular prism.\n    '''\n    return 0.5*s*a+s*math.sin(math.radians(a))"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    print((math.pi*r*r+2*math.pi*r*h))\n    return r*r+2*math.pi*r*h\nr=float(input(\"Enter the radius of the cylinder: \"))\nh=float(input(\"Enter the height of the cylinder: \"))\nlateralsuface_cylinder(r,h)"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    return 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #A cylinder has a lateral surface area of (2*pi*r*h) + (2*pi*r^2)\n    return(2*pi*r*h) + (2*pi*r**2)\n    \ndef find_sum_of_first_n_terms(x):\n    '''\n    Write a function to find the sum of the first n terms of a summation.\n    '''\n    #In mathematics, a summation is a series of numbers added together.\n    #For example: 1 + 1/2 + 1/3 + 1/4 +... 1/n\n    #The sum of the first n terms of this series is given by n(n+1)/2\n    #You can find the sum of the first n terms of any sequence by\n    #looking at the sum of the first n natural numbers.\n    \n    return(n*(n+1)/2)\n    \ndef find_sum_of_n_terms(x):\n    '''\n    Write a function to find the sum of the first n terms of a summation.\n    '''\n    #In mathematics, a summation is a series of numbers added together.\n    #For example: 1 + 1/2 + 1/3 + 1/4 +... 1/n\n    #The sum of the first n terms of this series is given by n(n+1)/2\n    #You can find the sum of the first n terms of any sequence by\n    #looking at the sum of the first n natural numbers.\n    \n    return(n*(n+1)/2)\n    \ndef find_sum_of_n_terms(x):\n    '''\n    Write a function to find the sum of the first n terms of a summation.\n    '''\n    #In mathematics, a summation is a series of numbers added together.\n    #For example: 1 + 1/2 + 1/3 + 1/4 +... 1/n\n    #The sum of the first n terms of this series is given by n(n+1)/2\n    #You can find the sum of the first n terms of any sequence by\n    #looking at the sum of the first n natural numbers.\n    \n    return(n*(n+1)/2)\n    \ndef find_sum_of_first_n_terms(x):\n    '''\n    Write a function to find the sum of the first n terms of a summation.\n    '''\n    #In mathematics, a summation is a series of numbers added together.\n    #For example: 1 + 1/2 + 1/3 + 1/4 +... 1/n\n    #The sum of the first n terms of this series is given by n(n+1)/2\n    #You can find the sum of the first n terms of any sequence by\n    #looking at the sum of the first n natural numbers.\n    \n    return(n*(n+1)/2)\n    \ndef find_sum_of_first_n_terms(x):\n    '''\n    Write a function to find the sum of the first n terms of a summation.\n    '''\n    #In mathematics, a summation is a series of numbers added together.\n    #For example: 1 + 1/2 + 1/3 + 1/4 +... 1/n\n    #The sum of the first n terms of this series is given by n(n+1)/2\n    #You can find the sum of the first n terms of any sequence by\n    #looking at the sum of the first n natural numbers.\n    \n    return(n*(n+1)/2)\n    \ndef calculate_sum_of_first_n_terms(n):\n    '''\n    Write a function to calculate the sum of the first n terms of a summation.\n    '''\n    return(n*(n+1)/2)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159\n    s = 2*pi*r*(h+r)\n    return s\n    \nprint(lateralsuface_cylinder(4,6))\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A=2*math.pi*r*h\n    return A\nprint(lateralsuface_cylinder(5,2))"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a=2*3.14*r*h\n    return a\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral = 3.14*r*r + 2*r*3.14*h\n    return lateral\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi * (r*r) + 2 * math.pi * r * h\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return int(l * l * l)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(l * l * l)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(f'The volume of a cube of side {l} is {l**3}.')\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l**3)\n    print(volume)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if type(l)!= int:\n        raise ValueError(\"Please enter an integer value\")\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Using bin() to convert decimal to binary\n    # Using [2:] to remove the 0b part and convert it to string\n    # Using list comprehension to generate the required list\n    return [int(x) for x in bin(n)[2:].zfill(32)] \n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    assert(n>0)\n    return n & (n-1)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(0,32):\n        bit_val = (1<<i)\n        if (n & bit_val)!= 0:\n            print(i)\n            break\n    return \n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n | (n >> 1)\n    n = n & ~(n >> 2)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n >> 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ ((n >> 1) & 0x55555555)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # use bit shift to set even bits\n    return n << 1  \n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences_dict = {}\n    for item in test_list:\n        if item in occurences_dict:\n            occurences_dict[item] += 1\n        else:\n            occurences_dict[item] = 1\n    return occurences_dict\nprint(check_occurences(['cat','dog', 'dog', 'dog', 'elephant','cat']))\nprint(check_occurences([('a','b'), ('a','b'), ('a','c'),('a','d'), ('d','e'),('d','e')]))\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [('a','a',1),('a',2,1),('a',1,3),('a',2,5),('a',2,4),('a',1,5),('b',1,5),('b',5,1)]\n    print(check_occurences(test_list))\n    '''\n    Expected output:\n    {('a',1): 3, ('a',2): 2, ('a',2,4): 1, ('a',1,3): 1, ('a',2,5): 1, ('b',1): 2, ('b',5): 1}\n    '''\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = dict(Counter(test_list))\n    return occurences\n    pass\nprint(check_occurences([(1, 3), (2, 3), (3, 4), (4, 4), (4, 5), (5, 6), (4, 6)]))\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique = Counter(test_list)\n    return dict(unique)\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [('a', 1), ('b', 2), ('c', 1), ('d', 2), ('e', 1), ('a', 1), ('b', 2), ('c', 1), ('d', 2), ('e', 1)]\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n    # check_occurences([('a', 1), ('b', 2), ('a', 3)]) == {('a', 1): 1, ('b', 2): 2, ('a', 3): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    tup_list = []\n    for item in test_list:\n        if item[0] not in tup_list:\n            tup_list.append(item[0])\n        if item[1] not in tup_list:\n            tup_list.append(item[1])\n    tup_list.sort()\n    unique_list = list(set(tup_list))\n    tup_dict = {}\n    for item in unique_list:\n        tup_dict[item] = 0\n    for item in tup_list:\n        tup_dict[item] += 1\n    return tup_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    if not isinstance(test_list,list) or not all(isinstance(item,tuple) for item in test_list):\n        return f'The input {test_list} is not a list of tuples'\n    if not test_list:\n        return f'The input {test_list} is empty'\n    c = Counter(test_list)\n    return c\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    num = 0\n    n = len(str) \n    for i in range(n): \n        for j in range(i, n): \n            if (isSubstring(str, i, j)): \n                num = num + 1\n    return num \n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str) == 0:\n        return 0\n    elif len(str) == 1:\n        return 1\n    else:\n        return number_of_substrings(str[:-1]) + number_of_substrings(str[1:])\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    non_empty_substrings = [str[i:j] for i in range(len(str)) \n                for j in range(i + 1, len(str) + 1) if not str[i:j].isspace()]\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            if str[i:j] == \"\":\n                break\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    for i in range(0, len(str)): \n        for j in range(i, len(str)): \n            if str[i:j + 1]!= '': \n                count += 1\n    return count \n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def get_substrings(input_str, n, start=0):\n        if n == 0:\n            return set([input_str[start:]])\n        return set(input_str[start:i+1] for s in get_substrings(input_str, n-1, start) for i in range(len(s)+1) if s[:i] == s[i:])\n    return len(get_substrings(str, len(str)))\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    if len(str) < 1:\n        return 0\n    \n    count = 0\n    for i in range(0, len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(len(str), i, -1): \n            if len(str[i:j])!= 0: \n                count += 1\n    return count \ndef palindrome(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    Return True if it is palindrome, else False.\n    Note: A palindrome is a word, phrase, or sequence that reads the same backward as forward, e.g., madam or nurses run.\n    '''\n    return str[::-1].lower() == str.lower() \ndef palindrome_sentence(sentence):\n    '''\n    Write a python function to reverse a given sentence.\n    '''\n    return sentence[::-1].replace(\" \", \"\")\ndef sum_of_negative(numbers):\n    '''\n    Write a python function to sum all the negative numbers in a given list of numbers. \n    Return 0 if no negative number found in the list.\n    '''\n    return sum(list(filter(lambda x: x < 0, numbers)))\ndef even_odd_position(str):\n    '''\n    Write a python function to return a string containing every other char of a given string starting with the first, so \"abc\" yields \"ace\"\n    '''\n    return ''.join([str[i] for i in range(0, len(str), 2)]) \ndef reverse_list(nums):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return nums[::-1]\ndef reverse_words_in_string(str):\n    '''\n    Write a python function to reverse the order of words in a given string.\n    '''\n    return \" \".join([word[::-1] for word in str.split()])\ndef remove_duplicates(nums):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return list(dict.fromkeys(nums))\ndef find_difference(str1, str2):\n    '''\n    Write a python function to find the difference between two given strings\n    '''\n    return list(filter(lambda x: x not in str1, str2))\ndef remove_duplicate_letters(str):\n    '''\n    Write a python function to remove duplicate letters from a given string.\n    Return the string with duplicate letters removed.\n    '''\n    return ''.join(set(str))\ndef find_occurence(str):\n    '''\n    Write a python function to return the number of occurences of each character in the given string.\n    Return a dictionary with character as the key and occurence as value.\n    '''\n    return {i:str.count(i) for i in str}\ndef remove_duplicate_words(str):\n    '''\n    Write a python function to remove duplicate words from a given string.\n    Return the string with duplicate words removed.\n    '''\n    return''.join([i for i in str.split(' ') if i not in str.split(' ')[::2]])\ndef find_minimum(nums):\n    '''\n    Write a python function to find minimum value in a given list of numbers.\n    Return a tuple with index of minimum value and the minimum value itself.\n    '''\n    return min(enumerate(nums), key=lambda x: x[1]) \ndef count_occurences_of_each_word(sentence):\n    '''\n    Write a python function to return the count of each word in a given string.\n    Return the dictionary with word as key and count as value.\n    '''\n    return {i:sentence.split().count(i) for i in sentence.split()}\ndef swap_case(str):\n    '''\n    Write a python function to swap lowercase to uppercase and vice versa of a given string.\n    Return the string after swapping.\n    '''\n    return str.swapcase()\ndef repeated_string(str, n):\n    '''\n    Write a python function to return the number of occurrences of a given substring in the given string.\n    '''\n    return str.count(str[:n])\ndef add_two_strings(str1, str2):\n    '''\n    Write a python function to return the sum of two given strings.\n    '''\n    return str1 + str2\ndef reverse_numeric(nums):\n    '''\n    Write a python function to reverse all the digits of a given string.\n    Return the string after reversing the digits.\n    '''\n    return int(''.join(list(reversed(str(nums)))))\ndef check_palindrome_permutation(str):\n    '''\n    Write a python function to check whether a given string is palindrome permutation or not.\n    Return True if it is palindrome permutation, else False.\n    '''\n    l = [i.lower() for i in str.split(' ')]\n    return len(set(l)) <= 1\ndef longest_word(sentence):\n    '''\n    Write a python function to return the longest word of a given sentence.\n    '''\n    return max(sentence.split(' '), key=len)\ndef longest_word_in_dictionary(dict):\n    '''\n    Write a python function to return the longest word in a given dictionary.\n    '''\n    return max(dict, key=dict.get)\ndef merge_two_strings(str1, str2):\n    '''\n    Write a python function to merge two given strings into one, as follows:\n    Given:\n    s1 = \"abc\"\n    s2 = \"123\"\n    Output:\n    \"abc123\"\n    '''\n    return str1 + str2\ndef add_strings(str1, str2):\n    '''\n    Write a python function to add two given strings.\n    Return the sum of two given strings.\n    '''\n    return str1 + str2\ndef to_swap(nums):\n    '''\n    Write a python function to find the minimum number in a given list of numbers.\n    Return the index of minimum number.\n    '''\n    return min(enumerate(nums), key=lambda x: x[1])[0]\ndef convert_to_words(numbers):\n    '''\n    Write a python function to convert a given string of numbers to words.\n    Return the string after conversion.\n    '''\n    return [str(i) for i in range(0, 10)] + ['one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen','sixteen','seventeen', 'eighteen', 'nineteen']\ndef find_missing_letter(str):\n    '''\n    Write a python function to return the missing letter in a given string.\n    '''\n    return chr(ord(str[0])+1) if str[0]!= 'z' else 'a'\ndef find_missing_letter_alternative(str):\n    '''\n    Write a python function to return the missing letter in a given string.\n    '''\n    return ''.join(sorted(set(''.join(str.split()))))[1]\ndef count_substring(str, sub):\n    '''\n    Write a python function to count the number of occurrences of a given substring in a given string.\n    '''\n    return str.count(sub)\ndef count_substring_alternative(str, sub):\n    '''\n    Write a python function to count the number of occurrences of a given substring in a given string.\n    '''\n    return sum([1 for i in range(0, len(str) - len(sub) + 1) if str[i:i+len(sub)] == sub])\ndef print_words_in_sentence(str):\n    '''\n    Write a python function to print all the words in a given sentence.\n    '''\n    return''.join([i for i in str.split(' ') if i])\ndef print_words_in_sentence_alternative(str):\n    '''\n    Write a python function to print all the words in a given sentence.\n    '''\n    return ''.join([i for i in str if i])\ndef check_permutation(st"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def count_substr(st):\n        n=len(st)\n        s=set(st)\n        for i in range(n):\n            for j in range(i+1,n+1):\n                if ''.join(st[i:j]) in s:\n                    print(''.join(st[i:j]))\n    count_substr(str)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if j - i > 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Let's take an example of m = 10 and n = 3:\n    # There are 5 possible sequences.\n    # 1, 3, 5, 7, 9\n    # 2, 4, 6, 8, 10\n    # If we ignore the constraints of the integers being greater than or equal to twice the previous element, we can see that the total number of sequences is (5 choose n) * (m choose n)\n    # The total number of sequences is (5 choose n) * (m choose n)\n    # We can solve this problem in O(n) time using dynamic programming.\n    # We can create a 2D array of size m+1 and n+1, and initially populate it with 0. Then we will have a base case where the value of our 2D array at m and n is 0. \n    # Then we will iterate over each value of the 2D array, starting from the top right to the bottom left. \n    # Each entry of the 2D array represents the number of sequences of length n starting at element i,j.\n    # So let's say we're at (1,3), and we have 3 sequences starting at 1, 2, 3. \n    # Then we can add to the total number of sequences the number of sequences starting at (2,3) and ending in (1,3) = 5 + 5 = 10. \n    # This is because we can create 10 sequences by taking elements from the sequences in (2,3).\n    # So what does this look like:\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   0   0\n    # 0   0   0   0   "
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    if m == 2:\n        return m+n-1\n    \n    return m*get_total_number_of_sequences(m-1,n) + get_total_number_of_sequences(m,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return(m*(m-1)//2 - m*(m-1)//2 + n)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if (n==1):\n        return m\n    else:\n        return get_total_number_of_sequences(m,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    possible_sequences = []\n    def get_total_number_of_sequences_helper(current_sequence, m, n): \n        if len(current_sequence) == n: \n            if sum(current_sequence) >= 2*current_sequence[0]-1 and sum(current_sequence) <= m:\n                possible_sequences.append(current_sequence)\n        else:\n            get_total_number_of_sequences_helper(current_sequence + [1], m, n)\n            get_total_number_of_sequences_helper(current_sequence + [2], m, n)\n    get_total_number_of_sequences_helper([],m,n)\n    return len(possible_sequences)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m**n\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_total_number_of_sequences_helper(m,n,result):\n        # base case: if n == 0, number of sequences is 1\n        if n == 0:\n            return 1\n        # recursive case: if n > 0, we can choose a number between 1 and m\n        # and multiply that number with the number of sequences of n-1\n        # before we can multiply that number by m. We then add that number\n        # to our result. \n        # note: we can't choose 0 because that would result in a sequence\n        # that is less than the previous sequence\n        # note: we also can't choose m since that would result in a sequence\n        # that is greater than the previous sequence\n        return get_total_number_of_sequences_helper(m,n-1,result) + (m-1)*get_total_number_of_sequences_helper(m,n-1,result)\n    result = 0\n    # loop through all numbers from 1 to m\n    for i in range(1,m+1):\n        # add the number of sequences of length n-1, where n-1 is the\n        # length of our current sequence. \n        result += get_total_number_of_sequences_helper(m,n-1,result)\n    return result\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    assert m > 0, \"AssertionError: m must be positive\"\n    assert n >= 0, \"AssertionError: n must be non-negative\"\n    if n == 1:\n        return m\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m >= n:\n        raise ValueError(\"m cannot be greater than or equal to n.\")\n    return m**n\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    if m == 2:\n        return m - 1 + m * n\n    return (m - 1) + get_total_number_of_sequences(m - 1,n - 1)\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # This was the correct answer.\n    #return list1[:-1] + list2\n    # I had a hard time coming up with this code.\n    # The first list has to be the longer list.\n    # The second list has to be a one element list.\n    return list1[:-1]+[list2[0]]\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0:]\n    print(list1)\nreplace_list([1,2,3,4,5], [6,7])\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_element = list1[-1]\n    list1.pop()\n    for i in list2:\n        list1.append(i)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[0] = list2[0:]\n    print(list1)\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Your code here\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    d = {}\n    for c in str1:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    \n    str1 = \"Amit Sharma\"\n    # for i in str1:\n    #     count +=1\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if len(str1) == 0:\n        return 0\n    else:\n        count = 0\n        for i in str1:\n            count += 1\n        return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    result = len(str1)\n    return result\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac = 0\n    for i in str1:\n        charac += 1\n    return charac\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count+1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # start with the number 1 and then traverse the square\n    # for example: input: 16 --> output: 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400\n    \n    # Brute Force (Time Complexity: O(sqrt(n))\n    # for i in range(N+1):\n    #     if i**2 == N:\n    #         return i\n    #     elif i**2 > N:\n    #         return i-1\n    \n    # Binary Search (Time Complexity: O(log(n))\n    start = 1\n    end = N\n    while start <= end:\n        mid = (start + end)//2\n        if mid**2 == N:\n            return mid\n        elif mid**2 > N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return end + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt = math.sqrt(N)\n    if sqrt.is_integer(): \n        return (int(sqrt) + 1) ** 2\n    else: \n        return -1\ndef count_digits(N): \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    count = 0\n    if N >= 0: \n        while (N > 0): \n            count = count + 1\n            N = N // 10\n    return count\ndef count_letters(word): \n    '''\n    Write a python function to count the number of letters in a string.\n    '''\n    count = 0\n    for i in word: \n        if i.isalpha(): \n            count = count + 1\n    return count\ndef word_stats(s): \n    '''\n    Write a python function to print the following statistics about a given string.\n    a. Number of letters\n    b. Number of digits\n    c. Average number of letters per word\n    d. Average number of digits per word\n    '''\n    print(\"Number of letters in your string are: \", count_letters(s))\n    print(\"Number of digits in your string are: \", count_digits(s))\n    print(\"Average number of letters per word in your string is: \", count_letters(s)/len(s.split()))\n    print(\"Average number of digits per word in your string is: \", count_digits(s)/len(s.split()))\ndef palindrome(s): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    reverse = s[::-1]\n    if s == reverse: \n        return True\n    else: \n        return False\ndef reverse_number(n): \n    '''\n    Write a python function to reverse a number.\n    '''\n    reverse = 0\n    while n > 0: \n        remainder = n % 10\n        reverse = reverse * 10 + remainder\n        n = n // 10\n    return reverse\ndef minmax(arr): \n    '''\n    Write a python function to find the minimum and maximum of a list.\n    '''\n    max = arr[0]\n    min = arr[0]\n    for i in arr: \n        if i > max: \n            max = i\n        if i < min: \n            min = i\n    return max, min\ndef find_duplicates(arr): \n    '''\n    Write a python function to find all the duplicates in a given list.\n    '''\n    duplicates = []\n    for i in range(len(arr)): \n        if arr[i]!= i: \n            if arr[i] == arr[arr[i]]: \n                duplicates.append(arr[i])\n    return duplicates\ndef find_duplicates_mod(arr): \n    '''\n    Write a python function to find all the duplicates in a given list in O(n) time using hashing.\n    '''\n    hash_table = {}\n    duplicates = []\n    for i in range(len(arr)): \n        if arr[i] in hash_table: \n            hash_table[arr[i]] = i\n        else: \n            hash_table[arr[i]] = i\n    for i in hash_table: \n        if hash_table[i]!= i: \n            if arr[hash_table[i]] == arr[i]: \n                duplicates.append(arr[i])\n    return duplicates\ndef circular_shift(arr, shift): \n    '''\n    Write a python function to circular shift an array.\n    '''\n    for i in range(shift): \n        temp = arr[0]\n        for j in range(len(arr)-1): \n            arr[j] = arr[j+1]\n        arr[len(arr)-1] = temp\n    return arr\ndef count_of_unique_char(s): \n    '''\n    Write a python function to count the number of unique characters in a string.\n    '''\n    temp = {}\n    for i in s: \n        if i in temp: \n            temp[i] = temp[i] + 1\n        else: \n            temp[i] = 1\n    return len(temp)\ndef check_permutation(str1, str2): \n    '''\n    Write a python function to check if two strings are permutation of each other.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2): \n        return False\n    else: \n        temp = {}\n        for i in str1: \n            if i in temp: \n                temp[i] = temp[i] + 1\n            else: \n                temp[i] = 1\n        for j in str2: \n            if j in temp: \n                temp[j] = temp[j] - 1\n            else: \n                return False\n        for k in temp: \n            if temp[k]!= 0: \n                return False\n    return True\ndef rotations_of_a_string(s): \n    '''\n    Write a python function to generate all the possible rotations of a string.\n    '''\n    s = s.lower()\n    length = len(s)\n    rotations = []\n    for i in range(length): \n        temp = s[i:] + s[:i]\n        rotations.append(temp)\n    return rotations\ndef check_pangram(s): \n    '''\n    Write a python function to check whether a string is pangram or not.\n    '''\n    temp = {}\n    for i in s: \n        if i in temp: \n            temp[i] = temp[i] + 1\n        else: \n            temp[i] = 1\n    for j in temp: \n        if temp[j] == 1: \n            return False\n    return True\ndef sorted_matrix(matrix): \n    '''\n    Write a python function to sort a matrix.\n    '''\n    temp = []\n    for i in matrix: \n        temp.append(i)\n    temp.sort()\n    for i in range(len(matrix)): \n        for j in range(len(matrix)): \n            matrix[i][j] = temp[i][j]\n    return matrix\ndef sum_of_sorted_matrix(matrix): \n    '''\n    Write a python function to sum the elements of a matrix.\n    '''\n    temp = 0\n    for i in matrix: \n        temp = temp + sum(i)\n    return temp\ndef unique_elements_in_matrix(matrix): \n    '''\n    Write a python function to find the unique elements in a matrix.\n    '''\n    temp = []\n    for i in matrix: \n        for j in i: \n            if j not in temp: \n                temp.append(j)\n    return temp\ndef sub_lists(list1): \n    '''\n    Write a python function to print all the possible sublists of a given list.\n    '''\n    temp = []\n    for i in range(len(list1)): \n        for j in range(i+1, len(list1)): \n            temp.append(list1[i:j])\n    return temp\ndef duplicate_elements(arr): \n    '''\n    Write a python function to print duplicate elements of an array.\n    '''\n    temp = []\n    for i in range(len(arr)): \n        if arr[i] not in temp: \n            temp.append(arr[i])\n        else: \n            print(arr[i])\ndef circular_array_rotation(arr, k): \n    '''\n    Write a python function to rotate an array by k.\n    '''\n    for i in range(k): \n        temp = arr[0]\n        for j in range(len(arr)-1): \n            arr[j] = arr[j+1]\n        arr[len(arr)-1] = temp\n    return arr\ndef find_the_greatest_element_in_array(arr): \n    '''\n    Write a python function to find the greatest element in an array.\n    '''\n    max = ar"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root.is_integer():\n        return (int(root) + 1) ** 2\n    else:\n        return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    assert N > 0, \"Invalid Input\"\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    if (math.sqrt(N) - math.floor(math.sqrt(N)) == 0): \n        return (math.floor(math.sqrt(N)) + 1) ** 2\n        \n    else: \n        return (math.floor(math.sqrt(N)) + 1) ** 2\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Base case \n    if (math.sqrt(N) - math.floor(math.sqrt(N)) == 0): \n        return (math.floor(math.sqrt(N)) + 1)**2 \n    else: \n        return (math.floor(math.sqrt(N)) + 1)**2 + 1\n    \n    "
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return (math.ceil(math.sqrt(N))**2) \n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt=math.sqrt(N)\n    if sqrt.is_integer():\n        return (int(sqrt) + 1)**2\n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    s=int(math.sqrt(N)) \n    return s**2\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Base case \n    if (N <= 1): \n        return 2\n    return (((N) // 2) + 1) if(((N % 2) == 0)) else (((N) + 1) // 2) \n  "
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        # Return the maximum of the following two:\n        # 1) Maximum subarray sum in an array in a bitonic subarray (increasing followed by decreasing).\n        # 2) Maximum subarray sum in a bitonic subarray with the second part as the increasing part.\n        return max(max_sum_bitonic_subarray(arr), max_sum_bitonic_subarray(arr[::-1]))\n        \ndef max_sum_bitonic_subarray(arr):\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        # This is the same as Problem 19, but with a few minor changes.\n        max_ending_here = 0\n        max_so_far = 0\n        for i in range(0, len(arr)):\n            max_ending_here = max_ending_here + arr[i]\n            if max_ending_here < 0:\n                max_ending_here = 0\n            elif max_so_far < max_ending_here:\n                max_so_far = max_ending_here\n        return max_so_far\n    \n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr) \n    max_sum = 0\n    for i in range(0, n-1): \n        curr_sum = arr[i] \n        for j in range(i+1, n): \n            if arr[j] >= arr[j-1]: \n                curr_sum += arr[j] \n            else: \n                break\n        if curr_sum > max_sum: \n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return get_bitonic_sum(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(len(arr)):\n        max_ending_here += arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Code here\n    n = len(arr)\n    max_sum = 0\n    for i in range(n-1):\n        sum1 = 0\n        sum2 = 0\n        for j in range(i,n):\n            sum1 += arr[j]\n            if sum1 > sum2:\n                sum2 = sum1\n        for j in range(i,0,-1):\n            sum1 -= arr[j]\n            if sum1 > sum2:\n                sum2 = sum1\n        if sum2 > max_sum:\n            max_sum = sum2\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    size = len(arr)\n    max_sum = arr[0]\n    curr_sum = 0\n    for i in range(1, size-1):\n        curr_sum = max(arr[i], arr[i+1]) + curr_sum\n        max_sum = max(curr_sum, max_sum)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr)-1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    maxSum = float('-inf')\n    currentSum = 0\n    for i in range(n - 2):\n        currentSum = arr[i] + arr[i+1] + arr[i+2]\n        if currentSum > maxSum:\n            maxSum = currentSum\n        currentSum = 0\n    \n    for i in range(n - 1):\n        currentSum = arr[i] + arr[i+1]\n        if currentSum > maxSum:\n            maxSum = currentSum\n        currentSum = 0\n        \n    return maxSum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = float('-inf')\n    n = len(arr)\n    for i in range(1, n - 1):\n        max_sum = max(max_sum, max_sum_of_subsequence(arr, 0, i - 1), max_sum_of_subsequence(arr, i, n - 1))\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    global_max = arr[0]\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        local_max = arr[i]\n        sum = local_max\n        for j in range(0, i):\n            local_max = max(local_max, arr[j])\n            sum += local_max\n            if(sum > global_max):\n                global_max = sum\n    print(global_max)\n    return global_max\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    n = 1\n    while True:\n        n = (n + number/n) / 2\n        if n == number/n:\n            break\n    return n\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number + 1) / 2\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + number/x) / 2\n    while abs(y - x) >= 0.00001:\n        x = y\n        y = (x + number/x) / 2\n    return y\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2\n    y = (number / 2) + 1\n    while abs(x - y) > 1:\n        x = y\n        y = (number / y) + x\n    return y\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    approx = 0\n    guess = number/2.0\n    diff = guess**2 - number\n    while diff!= 0:\n        approx = guess\n        guess = (approx + number/approx)/2.0\n        diff = guess**2 - number\n    return approx\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def calc_next_estimate(previous_estimate, iteration_number):\n        next_estimate = (previous_estimate + number / previous_estimate) / 2\n        return next_estimate\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    for i in range(1, number + 1):\n        x = (x + number/x) / 2\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number / 2) + 1\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number/2)+1\n    while True:\n        y = (number/y)+y\n        if y == x:\n            print(y)\n            break\n        if y > x:\n            print(y)\n            break\n        \ndef sqrt(number):\n    '''\n    Write a function for computing square roots using the Babylonian method.\n    '''\n    x = number\n    y = (number/2)+1\n    while True:\n        y = (number/y)+y\n        if y == x:\n            print(y)\n            break\n        if y > x:\n            print(y)\n            break\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number / 2\n    while True:\n        better = (approx + number / approx) / 2\n        if better == approx:\n            return better\n        approx = better\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a table to store results of subproblems \n    L = [[0 for x in range(n)]for y in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    lps = [None]*n\n    cnt=0\n    for i in range(0, n):\n        cnt=0\n        for j in range(0, i+1):\n            if (str[i] == str[j]):\n                if(i-j < 2):\n                    lps[i] = j\n                    break\n                elif (str[i] == str[j] and lps[j+1] > 0):\n                    lps[i] = j+1\n                    break\n                else:\n                    cnt=cnt+1\n        if(cnt == i+1):\n            lps[i] = 0\n    max_len=0\n    for i in range(0, n):\n        if(lps[i]!= 0):\n            max_len=max_len+1\n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for _ in range(n)] for _ in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)]for y in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            if (i == j or str[i] == str[j]):\n                dp[i][j] = 1\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[False]*n for _ in xrange(n)]\n    for i in xrange(n):\n        l[i][i] = True\n    for j in xrange(1, n):\n        for i in xrange(j):\n            if str[i] == str[j]:\n                l[i][j] = l[i+1][j-1]\n            else:\n                l[i][j] = False\n    return max(map(max, l)) + 1\n    \ndef lps_dp(str): \n    '''\n    Write an efficient function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[False]*n for _ in xrange(n)]\n    for i in xrange(n):\n        l[i][i] = True\n    for j in xrange(1, n):\n        for i in xrange(j):\n            if str[i] == str[j]:\n                l[i][j] = l[i+1][j-1]\n            else:\n                l[i][j] = False\n    for i in xrange(1, n):\n        for j in xrange(1, n):\n            if str[j] == str[i]:\n                l[i][j] = l[i-1][j+1] or l[i][j-1]\n            else:\n                l[i][j] = False\n    return max(map(max, l)) + 1\n    \ndef lps_dp_tab(str): \n    '''\n    Write an efficient function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[False]*n for _ in xrange(n)]\n    max_len = 0\n    for i in xrange(n):\n        l[i][i] = True\n        max_len = 1\n    for j in xrange(1, n):\n        for i in xrange(j):\n            if str[i] == str[j]:\n                l[i][j] = l[i+1][j-1]\n            else:\n                l[i][j] = False\n    for i in xrange(1, n):\n        for j in xrange(1, n):\n            if str[j] == str[i]:\n                l[i][j] = l[i-1][j+1] or l[i][j-1]\n            else:\n                l[i][j] = False\n    return max(map(max, l)) + 1\n    \ndef lps_memo(str): \n    '''\n    Write an efficient function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[0]*n for _ in xrange(n)]\n    for i in xrange(n):\n        l[i][i] = 1\n    for j in xrange(1, n):\n        for i in xrange(j):\n            if str[i] == str[j]:\n                l[i][j] = l[i+1][j-1] + 2\n            else:\n                l[i][j] = max(l[i][j-1], l[i+1][j])\n    return l[0][n-1]\n    \ndef lps_tab(str): \n    '''\n    Write an efficient function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[0]*n for _ in xrange(n)]\n    max_len = 0\n    for i in xrange(n):\n        l[i][i] = 1\n        max_len = 1\n    for j in xrange(1, n):\n        for i in xrange(j):\n            if str[i] == str[j]:\n                l[i][j] = l[i+1][j-1] + 2\n            else:\n                l[i][j] = max(l[i][j-1], l[i+1][j])\n    return l[0][n-1]\n    \ndef lps_tab2(str): \n    '''\n    Write an efficient function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[0]*n for _ in xrange(n)]\n    max_len = 0\n    for i in xrange(n):\n        l[i][i] = 1\n        max_len = 1\n    for j in xrange(1, n):\n        for i in xrange(j):\n            if str[i] == str[j]:\n                l[i][j] = l[i+1][j-1] + 2\n            else:\n                l[i][j] = max(l[i][j-1], l[i+1][j])\n    return l[0][n-1]\n    \ndef lps_tab3(str): \n    '''\n    Write an efficient function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[0]*n for _ in xrange(n)]\n    max_len = 0\n    for i in xrange(n):\n        l[i][i] = 1\n        max_len = 1\n    for j in xrange(1, n):\n        for i in xrange(j):\n            if str[i] == str[j]:\n                l[i][j] = l[i+1][j-1] + 2\n            else:\n                l[i][j] = max(l[i][j-1], l[i+1][j])\n    return l[0][n-1]\n    \ndef lps_tab4(str): \n    '''\n    Write an efficient function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[0]*n for _ in xrange(n)]\n    max_len = 0\n    for i in xrange(n):\n        l[i][i] = 1\n        max_len = 1\n    for j in xrange(1, n):\n        for i in xrange(j):\n            if str[i] == str[j]:\n                l[i][j] = l[i+1][j-1] + 2\n            else:\n                l[i][j] = max(l[i][j-1], l[i+1][j])\n    return l[0][n-1]\n    \ndef lps_tab5(str): \n    '''\n    Write an efficient function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[0]*n for _ in xrange(n)]\n    max_len = 0\n    for i in xrange(n):\n        l[i][i] = 1\n        max_len = 1\n    for j in xrange(1, n):\n        for i in xrange(j):\n            if str[i] == str[j]:\n                l[i][j] = l[i+1][j-1] + 2\n            else:\n                l[i][j] = max(l[i][j-1], l[i+1][j])\n    return l[0][n-1]\n    \ndef lps_tab6(str): \n    '''\n    Write an efficient function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[0]*n for _ in xrange(n)]\n    max_len = 0\n    for i in xrange(n):\n        l[i][i] = 1\n        max_len = 1\n    for j in xrange(1, n):\n        for i in xrange(j):\n            if str[i] == str[j]:\n                l[i][j] = l[i+1][j-1] + 2\n            else:\n                l[i][j] = max(l[i][j-1], l"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n    print(L)\n    return L[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    t = [[0 for x in range(n)] for x in range(n)] \n    # table[i][j] will be storing the length of LPS of substring str[i..j] \n    for i in range(n): \n        t[i][i] = 1\n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                t[i][j] = 2\n            elif str[i] == str[j]: \n                t[i][j] = t[i + 1][j - 1] + 2\n            else: \n                t[i][j] = max(t[i][j - 1], t[i + 1][j]); \n    return t[0][n - 1] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    # Fill table in bottom up manner \n    for i in range(n): \n        for j in range(n): \n            if i == j: \n                L[i][j] = 1\n    for i in range(2, n+1): \n        for j in range(n): \n            k = j + 1\n            if k >= n: \n                continue\n            if str[j] == str[k]: \n                L[j][k] = L[j + 1][k - 1] + 2\n            else: \n                L[j][k] = max(L[j][k-1], L[j+1][k]) \n    return L[0][n-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    t = [[0 for x in range(n)] for y in range(n)]\n    max_length = 1\n    i = 0\n    while i < n:\n        t[i][i] = 1\n        i = i + 1\n    max_length = 1\n    i = 0\n    while i < n - 1:\n        if str[i] == str[i + 1]:\n            t[i][i + 1] = 2\n            max_length = 2\n        else:\n            t[i][i + 1] = 0\n        i = i + 1\n    k = 3\n    while k <= n:\n        i = 0\n        while i < (n - k + 1):\n            j = i + k - 1\n            if str[i] == str[j] and t[i + 1][j - 1] == k - 2:\n                t[i][j] = k\n                if k > max_length:\n                    max_length = k\n            else:\n                t[i][j] = 0\n            i = i + 1\n        k = k + 1\n    return max_length\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += 1 / n\n        n -= 1\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Time: O(n) | Space: O(1)\n    if n == 0:\n        return 0\n    return (1 + harmonic_sum(n-1))\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + sum([1/i for i in range(1,n)])\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1/k for k in range(1, n))\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + sum([1/num for num in range(1, n)])\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1.0/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 1\n    for x in range(1, n):\n        total += 1/x\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    # initialize sum\n    harmonic_sum = 0\n    \n    # add 1/1, 1/2, 1/3,... 1/n to sum\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    \n    # return sum\n    return harmonic_sum\n    \n    "
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    list1 = set(array_nums1)\n    list2 = set(array_nums2)\n    if(len(list1) < len(list2)):\n        list1, list2 = list2, list1\n    return [x for x in list1 if x in list2]\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array1 = set(array_nums1)\n    array2 = set(array_nums2)\n    return array1.intersection(array2)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [x for x in array_nums1 if x in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for x in array_nums1:\n        if x in array_nums2:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    arr1 = sorted(array_nums1)\n    arr2 = sorted(array_nums2)\n    \n    i, j, intersection_arr = 0, 0, []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr2[j] < arr1[i]:\n            j += 1\n        else:\n            intersection_arr.append(arr2[j])\n            i += 1\n            j += 1\n    return intersection_arr\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #set to hold the intersection\n    set_nums = set()\n    #loop through the first array\n    for i in range(0,len(array_nums1)):\n        #check to see if the current number is in the second array\n        if array_nums1[i] in array_nums2:\n            #add it to the set\n            set_nums.add(array_nums1[i])\n    #loop through the second array\n    for i in range(0,len(array_nums2)):\n        #check to see if the current number is in the first array\n        if array_nums2[i] in array_nums1:\n            #add it to the set\n            set_nums.add(array_nums2[i])\n    #return the set\n    return set_nums\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    array_nums1.sort()\n    array_nums2.sort()\n    i = 0\n    j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            result.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #my_dict = {}\n    #for i in range(len(array_nums1)):\n    #    my_dict[array_nums1[i]] = array_nums1.count(array_nums1[i])\n    #    if my_dict[array_nums1[i]] >= 2:\n    #        print(array_nums1[i],my_dict[array_nums1[i]])\n    #for i in range(len(array_nums2)):\n    #    if array_nums2[i] in my_dict.keys():\n    #        print(array_nums2[i])\n    #return my_dict\n    return [i for i in array_nums1 if i in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    hash_map = {}\n    for num in array_nums1:\n        hash_map[num] = hash_map.get(num,0) + 1\n    \n    for num in array_nums2:\n        if num in hash_map and hash_map[num] > 0:\n            result.append(num)\n            hash_map[num] = hash_map.get(num) - 1\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1 = set(array_nums1)\n    nums2 = set(array_nums2)\n    return list(nums1.intersection(nums2))\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x_count = 0\n    for element in tup:\n        if element == x:\n            x_count += 1\n    return x_count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\nprint(count_X((\"a\", \"b\", \"c\", \"c\", \"d\", \"e\", \"e\", \"e\", \"e\"), \"e\"))\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup_count=0\n    for y in tup:\n        if x==y:\n            tup_count+=1\n    return tup_count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    t = list(tup)\n    return t.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x_count = 0\n    for item in tup:\n        if item == x:\n            x_count += 1\n    return x_count \n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = list.copy()\n    for i in range(len(list)):\n        new_list.insert(i,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]+[list[0]]+list[1:]\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #iterate through the list and add the element to the front\n    #list[0] = element\n    #list.insert(0, element)\n    #return list\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(i)\n        new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # check to see if element is in list\n    if element not in list:\n        print(\"The element you passed in is not in the list!\")\n        return list\n    # append element to list before each element\n    index = 0\n    while index < len(list):\n        list.insert(index,element)\n        index += 2\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for elem in list:\n        new_list.append(element)\n        new_list.append(elem)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        return [element]\n    else:\n        return [element] + insert_element(list[1:],element)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    print(list)\n    index = list.index(element)\n    list.insert(index, element)\n    print(list)\n    \ninsert_element([1,3,5,7], 2)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers = list(numbers)\n    temp = []\n    for i in numbers:\n        a = complex(i)\n        temp.append((a.real, a.imag))\n    print('The complex numbers are: ', temp)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_list = []\n    for i in numbers:\n        temp = cmath.polar(i)\n        polar_list.append(temp)\n    return polar_list\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #initializing complex variables\n    a = 0\n    b = 0\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers = complex(numbers)\n    polar_number = cmath.polar(numbers)\n    print(\"The given complex number is : \",numbers)\n    print(\"The magnitude of the given complex number is : \",polar_number[0])\n    print(\"The phase of the given complex number is : \",polar_number[1])\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_list=[]\n    for number in numbers:\n        temp=number.replace('i','')\n        num,denom=temp.split('/')\n        polar_list.append(cmath.polar(complex(num,denom)))\n    return polar_list\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a=numbers\n    a=complex(a)\n    c=cmath.phase(a)\n    d=abs(a)\n    if d==0:\n        print(\"0+0j\")\n    else:\n        print(d,\"+\",c)\n    return\nnumbers=input()\nconvert(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = numbers.real\n    i = numbers.imag\n    print(\"real part:\",r)\n    print(\"imaginary part:\",i)\n    print(\"converted to polar coordinates:\")\n    print(\"radius:\",abs(numbers))\n    print(\"phase(in degrees):\",cmath.phase(numbers)*(180/3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249533938163017021475425049060001836976089986390050079031896369948504038169624042056903159052009080296946102276659832768211637543258468950602103156092237883157921585143809703628112589955881076115298928089577667628953937998910823794694165651291522090777162853707829273239538619078155166626831411357277214839984374656608478820875805758071813908790035544088593106628429969619227868622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\"\n    )\ndef complex_number_sum(complex1, complex2):\n    '''\n    Write a python function to sum two complex numbers.\n    '''\n    a1=complex1[0]\n    b1=complex1[1]\n    a2=complex2[0]\n    b2=complex2[1]\n    print(\"real part:\",a1+a2)\n    print(\"imaginary part:\",b1+b2)\n    print(\"sum of two complex numbers is:\")\n    print(a1+a2, b1+b2)\n    print(\"sum of two complex numbers in polar coordinates:\")\n    print(\"radius:\",abs(complex1+complex2))\n    print(\"phase(in degrees):\",cmath.phase(complex1+complex2)*(180/3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249533938163017021475425049060001836976089986390050079031896369948504038169624042056903159052009080296946102276659832768211637543258468950602103156092237883157921585143809703628112589955881076115298928089577667628953937998910823794694165651291522090777162853707829273239538619078155166626831411357277214839984374656608478820875805758071813908790035544088593106628429969619227868622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\n    )\ndef complex_number_diff(complex1, complex2):\n    '''\n    Write a python function to subtract two complex numbers.\n    '''\n    a1=complex1[0]\n    b1=complex1[1]\n    a2=complex2[0]\n    b2=complex2[1]\n    print(\"real part:\",a1-a2)\n    print(\"imaginary part:\",b1-b2)\n    print(\"difference of two complex numbers is:\")\n    print(a1-a2, b1-b2)\n    print(\"difference of two complex numbers in polar coordinates:\")\n    print(\"radius:\",abs(complex1-complex2))\n    print(\"phase(in degrees):\",cmath.phase(complex1-complex2)*(180/3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z = complex(numbers)\n    r = cmath.polar(z)[0]\n    phi = cmath.polar(z)[1]\n    if phi < 0:\n        phi = phi + 360\n    phi = phi * (180/3.14)\n    # print(r, phi)\n    return r, phi\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = numbers.split(\",\")\n    a1 = float(a[0])\n    a2 = float(a[1])\n    a1 = complex(a1,a2)\n    #polar = cmath.polar(a1)\n    #print(polar)\n    return a1\n    \n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = cmath.polar(numbers)[0]\n    t = cmath.polar(numbers)[1]\n    return (r, t)\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i) == int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if type(x) == int:\n            count += 1\n    return count\n    \n    \ndef count_floating(list1):\n    '''\n    Write a python function that returns the number of floating point elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if type(x) == float:\n            count += 1\n    return count\n    \n    \ndef sum_of_list(list1):\n    '''\n    Write a python function that returns the sum of all the elements in a given list.\n    '''\n    sum1 = 0\n    for x in list1:\n        sum1 = sum1 + x\n    return sum1\n    \n    \ndef mult_of_list(list1):\n    '''\n    Write a python function that returns the multiplication of all the elements in a given list.\n    '''\n    mult = 1\n    for x in list1:\n        mult = mult * x\n    return mult\n    \n    \ndef avg_of_list(list1):\n    '''\n    Write a python function that returns the average of all the elements in a given list.\n    '''\n    avg = sum_of_list(list1)/len(list1)\n    return avg\n    \n    \ndef max_of_list(list1):\n    '''\n    Write a python function that returns the maximum value in a given list.\n    '''\n    return max(list1)\n    \n    \ndef min_of_list(list1):\n    '''\n    Write a python function that returns the minimum value in a given list.\n    '''\n    return min(list1)\n    \n    \ndef abs_max_list(list1):\n    '''\n    Write a python function that returns the absolute maximum value in a given list.\n    '''\n    return max(list1) - min(list1)\n    \n    \ndef is_only_one_in_list(list1):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains only one element, and False otherwise.\n    '''\n    if len(list1) == 1:\n        return True\n    else:\n        return False\n        \n        \ndef is_only_zero_in_list(list1):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains only zeroes, and False otherwise.\n    '''\n    for x in list1:\n        if x!= 0:\n            return False\n    return True\n    \n    \ndef is_greater_than(list1, value):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains only elements greater than the given value, and False otherwise.\n    '''\n    for x in list1:\n        if x < value:\n            return False\n    return True\n    \n    \ndef is_greater_than_or_equal(list1, value):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains only elements greater than or equal to the given value, and False otherwise.\n    '''\n    for x in list1:\n        if x < value:\n            return False\n    return True\n    \n    \ndef is_greater_than_list(list1, value):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains elements greater than the given value, and False otherwise.\n    '''\n    for x in list1:\n        if x < value:\n            return True\n    return False\n    \n    \ndef is_greater_than_or_equal_list(list1, value):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains elements greater than or equal to the given value, and False otherwise.\n    '''\n    for x in list1:\n        if x < value:\n            return True\n    return False\n    \n    \ndef is_less_than(list1, value):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains only elements less than the given value, and False otherwise.\n    '''\n    for x in list1:\n        if x > value:\n            return False\n    return True\n    \n    \ndef is_less_than_or_equal(list1, value):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains only elements less than or equal to the given value, and False otherwise.\n    '''\n    for x in list1:\n        if x > value:\n            return False\n    return True\n    \n    \ndef is_less_than_list(list1, value):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains elements less than the given value, and False otherwise.\n    '''\n    for x in list1:\n        if x > value:\n            return True\n    return False\n    \n    \ndef is_less_than_or_equal_list(list1, value):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains elements less than or equal to the given value, and False otherwise.\n    '''\n    for x in list1:\n        if x > value:\n            return True\n    return False\n    \n    \ndef is_equal(list1, value):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains only elements equal to the given value, and False otherwise.\n    '''\n    for x in list1:\n        if x!= value:\n            return False\n    return True\n    \n    \ndef is_equal_list(list1, value):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains elements equal to the given value, and False otherwise.\n    '''\n    for x in list1:\n        if x!= value:\n            return False\n    return True\n    \n    \ndef is_equal_or_greater_than(list1, value):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains elements greater than or equal to the given value, and False otherwise.\n    '''\n    for x in list1:\n        if x < value:\n            return False\n    return True\n    \n    \ndef is_equal_or_less_than(list1, value):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains elements less than or equal to the given value, and False otherwise.\n    '''\n    for x in list1:\n        if x > value:\n            return False\n    return True\n    \n    \ndef is_between_inclusive(list1, value1, value2):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains elements between the two given values (inclusive), and False otherwise.\n    '''\n    for x in list1:\n        if x >= value1 and x <= value2:\n            return True\n    return False\n    \n    \ndef is_between_exclusive(list1, value1, value2):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains elements between the two given values (exclusive), and False otherwise.\n    '''\n    for x in list1:\n        if x >= value1 and x < value2:\n            return True\n    return False\n    \n    \ndef is_between_list(list1, value1, value2):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains elements between the two given values (inclusive), and False otherwise.\n    '''\n    for x in list1:\n        if x >= value1 and x < value2:\n            return True\n    return False\n    \n    \ndef is_between_or_equal_inclusive(list1, value1, value2):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains elements between the two given values (inclusive), and False otherwise.\n    '''\n    for x in list1:\n        if x >= value1 or x <= value2:\n            return True\n    return False\n    \n    \ndef is_between_or_equal_exclusive(list1, value1, value2):\n    '''\n    Write a python function that returns a boolean value, True if the given list contains elements between the two given values (exclusive), and False otherwise"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if type(x) is int])\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if num%1==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    integer_count = 0\n    for element in list1:\n        if isinstance(element, int):\n            integer_count += 1\n    return integer_count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if isinstance(i,int):\n            count+=1\n    return count\nprint(count_integer([1,2,'a','5','b']))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i, int)])\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 2))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # sort the list to keep the output deterministic\n    l = sorted(l)\n    # initialize empty list\n    l_out = []\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    all_combs = []\n    \n    # Iterate for all possible combination of numbers\n    for x in combinations_with_replacement(l, n): \n        # Convert tuple to list\n        combination = list(x)\n        # Check if it is unique\n        if combination not in all_combs:\n            all_combs.append(combination)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    return [x for x in combinations_with_replacement(l, n) if sum(x) == 0]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 1:\n        return l\n    if len(l) == n:\n        return [tuple(l)]\n    if len(l) < n:\n        return []\n    return [tuple(t) for t in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(x,) for x in l if len(x) == n]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if l[i]==l[j] or l[j]==l[k] or l[k]==l[i]:\n                    continue\n                elif i==j or j==k or k==i:\n                    continue\n                else:\n                    yield tuple(l[i]+l[j]+l[k])\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(0, len(l)):\n        a = l[i]\n        b = []\n        for j in range(0, len(l)):\n            b.append(l[j])\n            if j > i:\n                b.remove(l[j])\n        for j in range(0, n):\n            result.append((a, b[j]))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return combinations_with_replacement(l,n)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if (n==0 or n==1):\n        return 0\n    else:\n        count=0\n        for i in range(2,n):\n            if (n%i!=0):\n                count+=1\n        return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    prime_nums = [2]\n    for i in range(3,n,2):\n        prime = True\n        for prime_num in prime_nums:\n            if i % prime_num == 0:\n                prime = False\n        if prime:\n            prime_nums.append(i)\n    return len(prime_nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #Check for 0 or 1 input, if 0 or 1 then function should return 0\n    if n < 2:\n        return 0\n    #Otherwise count the primes up to the given number\n    num_primes = 0\n    for i in range(2, n + 1):\n        #Set the current number as a prime\n        num_primes += 1\n        #Find all multiples of the current number\n        for j in range(i * 2, n + 1, i):\n            #If any multiple is not a prime number, set it to 0 and break out of the loop\n            num_primes -= 1\n            if num_primes == 0:\n                break\n    return num_primes\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<3:\n        return 0\n    num = 2\n    count = 1\n    for i in range(2, n):\n        for j in range(2, i):\n            if i%j==0:\n                break\n        else:\n            count = count + 1\n    return count\n    # code goes here\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(n):\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1,n):\n        if isPrime(i) == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # edge cases\n    if n <= 1:\n        return 0\n    # init a list with all the numbers less than n\n    nums_list = [x for x in range(0, n)]\n    # mark all the numbers less than n that are not prime as not prime\n    for num in nums_list:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                # if all the numbers less than num is prime, then mark them as prime\n                nums_list[num-1] = 1\n    # return the number of the prime numbers\n    return nums_list.count(1)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    #base case\n    if n < 2:\n        return 0\n    \n    #create the list of prime numbers\n    prime_list = [2]\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(num):\n        if num==1:\n            return False\n        for i in range(2,int(num**0.5)+1):\n            if num%i==0:\n                return False\n        return True\n    \n    prime_count=0\n    for num in range(1,n+1):\n        if is_prime(num):\n            prime_count+=1\n    return prime_count\n    \n    \n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if(n<2):\n        return 0\n    count = 0\n    for i in range(1,n):\n        for j in range(1,i+1):\n            if(i%j==0):\n                count+=1\n        if(count==2):\n            count=0\n            continue\n        else:\n            count=0\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_nums = []\n    for num in range(2, n+1):\n        #if num is prime\n        if is_prime(num):\n            prime_nums.append(num)\n    return len(prime_nums)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    new_tuple = (b,a)\n    return new_tuple\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    print('a',a,'b',b)\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # Your code here\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return \"Error, non-integers\"\n    a,b = b,a\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_list1 = [0 for _ in range(len(test_tup1))]\n    max_list2 = [0 for _ in range(len(test_tup2))]\n    for index, (element1, element2) in enumerate(zip(test_tup1, test_tup2)):\n        if element1 >= element2:\n            max_list1[index] = element1\n            max_list2[index] = element2\n        else:\n            max_list1[index] = element2\n            max_list2[index] = element1\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # maximum is test_tup1 if it is greater than test_tup2\n    # otherwise, maximum is test_tup2\n    return test_tup1 if (len(test_tup1) > len(test_tup2)) else test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #Tuple 1\n    max_tup1 = ()\n    for index, element in enumerate(test_tup1):\n        if index == 0:\n            max_tup1 = (max(test_tup1),)\n            continue\n        if max_tup1[0] < element:\n            max_tup1 = (element,)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # list1 = list(test_tup1)\n    # list2 = list(test_tup2)\n    # i = len(test_tup1)\n    # j = len(test_tup2)\n    # k = 0\n    # list3 = []\n    # while k < i and k < j:\n    #     if list1[k] > list2[k]:\n    #         list3.append(list1[k])\n    #         k += 1\n    #     elif list1[k] < list2[k]:\n    #         list3.append(list2[k])\n    #         k += 1\n    #     elif list1[k] == list2[k]:\n    #         list3.append(list1[k])\n    #         k += 1\n    # while k < i:\n    #     list3.append(list1[k])\n    #     k += 1\n    # while k < j:\n    #     list3.append(list2[k])\n    #     k += 1\n    # return tuple(list3)\n    \n    # return sorted(test_tup1+test_tup2, reverse=True)\n    return tuple(sorted(list(test_tup1)+list(test_tup2), reverse=True))\n    # return max(test_tup1+test_tup2, key=lambda x: x[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] * test_tup2[1] > test_tup1[1] * test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_of_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_of_tup = max_of_tup + (test_tup1[i],)\n        else:\n            max_of_tup = max_of_tup + (test_tup2[i],)\n    return max_of_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        new_tup = ()\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                new_tup = new_tup + (test_tup1[i],)\n            else:\n                new_tup = new_tup + (test_tup2[i],)\n        return new_tup\n    else:\n        return ()\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    l1 = []\n    l2 = []\n    l1.append(test_tup1[0])\n    l1.append(test_tup1[1])\n    l1.append(test_tup1[2])\n    l2.append(test_tup2[0])\n    l2.append(test_tup2[1])\n    l2.append(test_tup2[2])\n    l1.sort()\n    l2.sort()\n    print(l1)\n    print(l2)\n    if l1[2] > l2[2]:\n        return l1\n    else:\n        return l2\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(max(tuple1, tuple2) for tuple1, tuple2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    sum1, sum2 = 0, 0\n    max_sum = []\n    for i in test_tup1:\n        sum1 += i\n    for j in test_tup2:\n        sum2 += j\n    max_sum.append(sum1)\n    max_sum.append(sum2)\n    return max(max_sum)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize p and q values to 1\n    p = 1\n    q = 1\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return False\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert n >= 1, 'Input to newman_prime() must be an integer greater than or equal to 1'\n    if n == 1:\n        return 2\n    else:\n        x = 3\n        k = 1\n        while k < n:\n            x += 1\n            s = 0\n            for i in range(1, x):\n                if x % i == 0:\n                    s += 1\n            if s == 1:\n                k += 1\n        return x\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        raise ValueError('Newman\u2013Shanks\u2013Williams\\'s primality test requires that n be a positive integer.')\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return None\n    if n <= 2:\n        return 2\n    else:\n        primes = [2]\n        p = 2\n        while len(primes) < n:\n            p = next_prime(p)\n            primes.append(p)\n        return primes[-1]\n        \ndef next_prime(p):\n    p += 1\n    while not is_prime(p):\n        p += 1\n    return p\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 2\n    d = 1\n    while (d!= 0):\n        p = 2\n        d = (n - 1) % p\n        if (d == 0):\n            a = a\n        else:\n            while (d % 2 == 0):\n                p += 1\n                d /= 2\n            if (p > a):\n                a = p\n            n = n\n        return a\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def sieve(n):\n        '''\n        A prime is a natural number greater than 1 that is not divisible by any\n        natural number other than 1 and itself.\n        So, we will first generate a list of all prime numbers less than the\n        specified limit using the sieve of Eratosthenes.\n        '''\n        is_prime = [True]*n\n        is_prime[0] = False\n        is_prime[1] = False\n        is_prime[2] = True\n        limit = int(n**0.5)\n        for i in range(3,limit,2):\n            if is_prime[i]:\n                for j in range(i*i,n,i):\n                    is_prime[j] = False\n        prime = [2]\n        for i in range(3,n,2):\n            if is_prime[i]:\n                prime.append(i)\n        return prime\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = sympy.nextprime(n)\n    while len(factor(p))!= 1:\n        p = sympy.nextprime(p)\n    return p\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    if n == 0:\n        return 2\n    \n    # generate even primes using the sieve of Eratosthenes\n    sieve_size = n\n    sieve = np.ones((sieve_size,), dtype=bool)\n    sieve[0] = False\n    sieve[1] = False\n    for i in range(2, int(np.sqrt(sieve_size)) + 1):\n        if sieve[i]:\n            sieve[i*i::2*i] = False\n    \n    # find the nth newman\u2013shanks\u2013williams prime number\n    prime_list = [2]\n    for i in range(3, sieve_size):\n        if sieve[i]:\n            prime_list.append(i)\n            if len(prime_list) == n:\n                return prime_list[-1]"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if type(test_tup1) is not tuple or type(test_tup2) is not tuple:\n        return \"Only Tuples\"\n    elif len(test_tup1)!= len(test_tup2):\n        return \"Not the same size\"\n    else:\n        return tuple(map(lambda x,y: x/y, test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([x/y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for index in range(len(test_tup1)):\n        result += ((test_tup1[index] / test_tup2[index]),)\n    return result\n    \ndef division_lists(test_list1, test_list2):\n    '''\n    Write a function that takes in two lists and performs mathematical division operation element-wise across the given lists.\n    '''\n    result = []\n    for index in range(len(test_list1)):\n        result.append(test_list1[index] / test_list2[index])\n    return result\n    \ndef division_strings(test_str1, test_str2):\n    '''\n    Write a function that takes in two strings and performs mathematical division operation element-wise across the given strings.\n    '''\n    result = \"\"\n    for index in range(len(test_str1)):\n        result += (test_str1[index] / test_str2[index])\n    return result\n    \ndef division_tuples_lists_strings(test_tup1, test_tup2, test_list1, test_list2, test_str1, test_str2):\n    '''\n    Write a function that takes in three tuples and four lists and performs mathematical division operation element-wise across the given tuples and lists and strings.\n    '''\n    tup_result = ()\n    list_result = []\n    str_result = \"\"\n    for index in range(len(test_tup1)):\n        tup_result += ((test_tup1[index] / test_tup2[index]),)\n    for index in range(len(test_list1)):\n        list_result.append(test_list1[index] / test_list2[index])\n    for index in range(len(test_str1)):\n        str_result += (test_str1[index] / test_str2[index])\n    return tup_result, list_result, str_result\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Get lengths of tuple 1 and tuple 2\n    tuple1_length = len(test_tup1)\n    tuple2_length = len(test_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        assert isinstance(test_tup1, tuple)\n        assert isinstance(test_tup2, tuple)\n        assert len(test_tup1) == len(test_tup2)\n    except AssertionError:\n        return 'Input parameters are not valid'\n    else:\n        return tuple(map(lambda x,y: x/y, test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if (len(test_tup1) == len(test_tup2)):\n        result = ()\n        for x in range(len(test_tup1)):\n            result += ((test_tup1[x] / test_tup2[x]),)\n        return result\n    else:\n        print(\"The lengths of two tuples are not equal\")\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result += (test_tup1[i] / test_tup2[i],)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(zip(*(map(lambda x, y: round(x/y,2), test_tup1, test_tup2))))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i]/test_tup2[i]),)\n    return result\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # base case\n    if L == 0:\n        return [], list1\n    elif len(list1) <= L:\n        return list1[:L], list1[L:]\n    else:\n        return split_two_parts(list1[:L], L) + split_two_parts(list1[L:], L)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_list = []\n    second_list = []\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    L1 = L\n    L2 = L\n    first_part = list1[0:L]\n    L1 = L1 - 1\n    second_part = list1[L1:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n    \ndef length_and_value(aDict, L):\n    '''\n    Write a function that takes in a dictionary and an integer L and returns a list of the keys of the dictionary, each key followed by its associated value, if the key's length is equal to L.\n    '''\n    return [key + '-' + str(value) for key, value in aDict.items() if len(key) == L]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #Use a slice to split the list into two parts\n    return(list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # code goes here\n    return (list1[0:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = []\n    list3 = []\n    if len(list1) > L:\n        while len(list2) < L:\n            list2.append(list1.pop(0))\n        while len(list3) < len(list1):\n            list3.append(list1.pop(0))\n    return list2, list3\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[0:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 0:\n        first_list = list1[:L]\n        second_list = list1[L:]\n    else:\n        first_list = list1[:L]\n        second_list = list1[L+1:]\n    return (first_list, second_list)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return print(\"Error: Please input a positive number.\")\n    else:\n        return print(h_age*7)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    # 1 dog year = 10 human years\n    \n    # years = h_age * 10\n    # return years\n    return h_age * 10\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print(\"Age must be positive.\")\n    else:\n        if h_age == 1:\n            print(\"The dog's age is\", h_age, \"year.\")\n        elif h_age < 4:\n            print(\"The dog's age is\", h_age * 10.5, \"years.\")\n        else:\n            print(\"The dog's age is\", (h_age - 2) * 4 + 21, \"years.\")\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # There are 15 years for each human year.\n    dog_age = h_age * 15\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 6\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7.2\n    return dog_age\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    for i in range(0, len(S), step):\n        print(S[i])\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new = []\n    index = 0\n    for i in range(len(S)):\n        if i % step == 0:\n            new.append(S[index:i+1])\n            index = i+1\n    return new\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def list_split(S, ste"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = S\n    return [L[x:x + step] for x in range(0, len(L), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def split(S, step):\n        if step < 1:\n            return []\n        elif step == 1:\n            return [S]\n        else:\n            i = 0\n            L = []\n            while i < len(S):\n                L.append(S[i::step])\n                i += step\n            return L\n    return split\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i + step] for i in range(0, len(S), step)]\n    # breakpoint()\n    # result = []\n    # for i in range(0, len(S), step):\n    #     result.append(S[i:i + step])\n    # return result\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    return new_list\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2*6\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # SOLUTION\n    side = int(l)\n    return 6 * side * side\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l ** 2\n    return s\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import numpy as np\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Base function works for cubes of length 1 to 100\n    if l <= 1:\n        return l ** 2\n    if l > 1:\n        return (6 * l) + (2 * l ** 3)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + pow(i, 2)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def sum_of_squares(n):\n        return int(n*(n+1)*(2*n+1)/6)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1,2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x**2 for x in range(n) if x%2!= 0])\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return ((n ** 2) + (square_Sum(n-1)))\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n = int(n)\n    s = 0\n    for i in range(1, n + 1, 2):\n        s += i ** 2\n    return s\n    \ndef square_Sum_for(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i ** 2 for i in range(1, n + 1, 2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += (i * i + i)\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i**2 for i in range(n) if i%2!=0)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(x**2 for x in range(1,n+1) if x%2!= 0)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n):\n        sum=sum+(i*i)\n    return sum\n    \ndef harmonic_series(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the reciprocals of the first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+(1/i)\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: return 1\n    return 1 + 3 * (n - 1) + find_star_num(n - 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def stars(num):\n        stars = ''\n        while num > 0:\n            stars += '*'\n            num -= 1\n        return stars\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for num in range(1, n+1):\n        #print(\"{:2d} : {:b}\".format(num, num))\n        print(bin(num))\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    current = 1\n    for i in range(1, n):\n        current *= 3\n        current += 1\n    return current\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(n * (n + 1) / 2)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # n=5\n    star_num_list = [1,2,4,8,9]\n    star_num = star_num_list[n-1]\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    star_num = 1\n    for i in range(0, n):\n        star_num += i + 1\n    return star_num\n    \nif __name__ == '__main__':\n    print(find_star_num(12)) # 171\n    print(find_star_num(1)) # 1\n    print(find_star_num(2)) # 3\n    print(find_star_num(3)) # 6\n    print(find_star_num(4)) # 10\n    print(find_star_num(5)) # 15\n    print(find_star_num(6)) # 21\n    print(find_star_num(7)) # 28\n    print(find_star_num(8)) # 36\n    print(find_star_num(9)) # 45\n    print(find_star_num(10)) # 55\n    print(find_star_num(11)) # 69\n    print(find_star_num(12)) # 9"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (n**2+n)//2\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    ans = 0\n    for i in range(n):\n        ans += int(i**2 + i + 1)\n    return ans\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    return n * find_star_num(n - 1) + 1\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    #print(ord(k))\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # write your code here\n    return None\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if(k.isalpha()):\n        return ord(k)\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    for i in range(97,123):\n        if chr(i) == k:\n            return i\n    return None\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    return k\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_numbers_at_even_position = 0\n    for item in arr:\n        if (item % 2 == 0) and (arr.index(item) % 2 == 0):\n            even_numbers_at_even_position += item\n    return even_numbers_at_even_position\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in arr:\n        if (i % 2) == 0:\n            even_sum += i\n            even_index += 1\n    return even_sum, even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    l = list()\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            l.append(arr[i])\n    return sum(l)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # initialize a variable\n    total = 0\n    # check if the given list is empty\n    if arr:\n        # iterate over the list using enumerate() to loop through each position in the list\n        for index, item in enumerate(arr):\n            # check if the index is even and the item is even\n            if index % 2 == 0 and item % 2 == 0:\n                # add the item to the total variable\n                total += item\n    else:\n        # return the total variable\n        return total\n    # return the total variable\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    sum_even_index = 0\n    for index, value in enumerate(arr):\n        if index % 2 == 0:\n            sum_even_index += value\n        else:\n            sum_even += value\n    return sum_even, sum_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    if arr:\n        for i in range(len(arr)):\n            if i % 2 == 0 and arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for index in range(len(arr)):\n        if index % 2 == 0:\n            result += arr[index]\n    return result\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_position = 0\n    sum_even = 0\n    for i in range(0,len(arr)):\n        if i % 2 == 0:\n            sum_even_position += arr[i]\n    for j in range(0,len(arr)):\n        if j % 2 == 0:\n            sum_even += arr[j]\n    return sum_even\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def sum_of_square_powers(n):\n        '''\n        The function sum_of_square_powers() takes in an integer n and uses recursion to return the sum of the first n even natural numbers that are raised to the fifth power.\n        '''\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return n + sum_of_square_powers(n-1)\n    \n    sum = 0\n    for i in range(1, n+1):\n        sum += sum_of_square_powers(i)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    num_sum = 0\n    for i in range(n):\n        num_sum += ((i+1)**5)\n    return num_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def power_sum(n):\n        a = 0\n        for i in range(1, n+1):\n            if i%2 == 0:\n                a += i**5\n        return a\n    return power_sum(n)\nprint(even_Power_Sum(5))\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Handle edge cases\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 2\n    else:\n        return 2 + even_Power_Sum(n-1)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(i**5 for i in range(1, n+1) if i%2 == 0)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(i**5 for i in range(1,n+1) if i%2==0)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #Printing the formula \n    print(\"The sum of the first \" + str(n) + \" even numbers raised to the fifth power is: \" + str(5**n))\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(i**5 for i in range(1,n+1) if i%2==0)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    e = [] #even numbers\n    for i in range(2,n+1):\n        if i % 2 == 0:\n            e.append(i)\n    sum = 0\n    for i in e:\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum( [x**5 for x in range(n) if x % 2 == 0])\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for tuple in test_list:\n        return_list.append(tuple[1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for t in test_list:\n        rear_list.append(t[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [test_list[i][-1] for i in range(len(test_list))]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for x in test_list:\n        rear_list.append(x[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # for item in test_list:\n    #     print(item[1])\n    test_list = [('A', 'B'), ('C', 'D')]\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    for x in range(len(test_list)):\n        rear = test_list[x][1]\n        test_list[x] = rear\n    return test_list\nprint(rear_extract([(1, 2), (2, 3), (3, 4)]))\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_element = []\n    for i in test_list:\n        rear_element.append(i[1])\n    return rear_element\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert substract_elements((3,2,1,0), (1,1,1)) == (2,0,0,0)\n    assert substract_elements((2,3), (1,2)) == (1,1)\n    assert substract_elements((1,0,3,2), (0,1,2,3)) == (1,2,1,2)\n    assert substract_elements((5,6,2), (1,4,2)) == (4,4,0)\n    assert substract_elements((2,1,0,3), (4,1,2)) == (3,0,1,0)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #initalize empty list\n    list_to_return = []\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup3 = ()\n    for i in range(len(test_tup1)):\n        test_tup3 += (test_tup1[i] - test_tup2[i],)\n    return test_tup3\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        test_tup3 = ()\n        for i in range(len(test_tup1)):\n            test_tup3 += (test_tup1[i] - test_tup2[i],)\n        return test_tup3\n    else:\n        return -1\n    \n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple( [x - y for x,y in zip(test_tup1, test_tup2)] )\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(0, len(test_tup1)):\n        result = result + (test_tup1[i] - test_tup2[i],)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    try:\n        index = 0\n        while index < len(test_tup1) or index < len(test_tup2):\n            test_tup1[index] -= test_tup2[index]\n            index += 1\n        return test_tup1\n    except:\n        print('Tuples must be of the same size.')\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    result = ()\n    for index in range(0,len(test_tup1)):\n        result = result + (test_tup1[index] - test_tup2[index],)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum([int(math.factorial(n)/(math.factorial(k)*math.factorial(n-k))) for k in range(0,int(n/2)+1)])\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0: \n        return 0\n    else: \n        x = n % 2\n        y = n // 2\n        return (int(math.factorial(x+y)/(math.factorial(x)*math.factorial(y))))\ndef even_binomial_Coeff_Sum_TopDown(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 2\n    else: \n        return (int(math.factorial(n)/(math.factorial(1)*math.factorial(n-2))))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_list = [0 for x in range(n+1)] \n    binomial_list[0] = 0\n    binomial_list[1] = 1\n    for i in range(2, n+1): \n        binomial_list[i] = binomial_list[i-1] + binomial_list[i-2] \n    return (binomial_list[n]) \ndef binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients.\n    '''\n    binomial_list = [0 for x in range(n+1)] \n    binomial_list[0] = 0\n    binomial_list[1] = 1\n    for i in range(2, n+1): \n        binomial_list[i] = binomial_list[i-1] + binomial_list[i-2] \n    return (binomial_list[n]) \ndef even_Binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_list = [0 for x in range(n+1)] \n    binomial_list[0] = 0\n    binomial_list[1] = 1\n    for i in range(2, n+1): \n        if i%2==0:\n            binomial_list[i] = binomial_list[i-1] + binomial_list[i-2] \n        else:\n            binomial_list[i] = binomial_list[i-1] \n    return (binomial_list[n]) \ndef Odd_Binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    binomial_list = [0 for x in range(n+1)] \n    binomial_list[0] = 0\n    binomial_list[1] = 1\n    for i in range(2, n+1): \n        if i%2!=0:\n            binomial_list[i] = binomial_list[i-1] + binomial_list[i-2] \n        else:\n            binomial_list[i] = binomial_list[i-1] \n    return (binomial_list[n]) \ndef get_Primes(x):\n    '''\n    Write a python function that takes in a positive integer x and finds all the prime numbers up to x.\n    '''\n    list_of_primes = [0 for x in range(x+1)]\n    list_of_primes[0] = 1\n    list_of_primes[1] = 1\n    for i in range(2,x+1):\n        if list_of_primes[i] == 0:\n            list_of_primes[i] = 1\n            for j in range(i*i,x+1,i):\n                list_of_primes[j] = 0\n    return list_of_primes \ndef is_prime(x):\n    '''\n    Write a python function that takes in a positive integer x and returns True if x is prime and False otherwise.\n    '''\n    if x == 1:\n        return False\n    if x == 2:\n        return True\n    else:\n        for i in range(2,int(math.sqrt(x))+1):\n            if x%i==0:\n                return False\n        return True\ndef get_factors(x):\n    '''\n    Write a python function that takes in a positive integer x and finds the factors of x.\n    '''\n    if x == 1:\n        return 0\n    if x == 2:\n        return 1\n    if x == 3:\n        return 2\n    elif is_prime(x):\n        return 1\n    else:\n        count = 0\n        for i in range(1,int(math.sqrt(x))+1):\n            if x%i==0:\n                count = count + 2\n        return count \ndef get_primes_below(x):\n    '''\n    Write a python function that takes in a positive integer x and finds all the prime numbers below x.\n    '''\n    list_of_primes = [0 for x in range(x+1)]\n    list_of_primes[0] = 1\n    list_of_primes[1] = 1\n    for i in range(2,x+1):\n        if list_of_primes[i] == 0:\n            list_of_primes[i] = 1\n            for j in range(i*i,x+1,i):\n                list_of_primes[j] = 0\n    return list_of_primes\ndef get_factors_below(x):\n    '''\n    Write a python function that takes in a positive integer x and finds the factors below x.\n    '''\n    if x == 1:\n        return 0\n    if x == 2:\n        return 1\n    if x == 3:\n        return 2\n    elif is_prime(x):\n        return 1\n    else:\n        count = 0\n        for i in range(1,int(math.sqrt(x))+1):\n            if x%i==0:\n                count = count + 2\n        return count \ndef get_hcf(x, y):\n    '''\n    Write a python function that takes in two positive integers x and y and returns the highest common factor of the two numbers.\n    '''\n    if x == 1 or y == 1:\n        return 1\n    if x == y:\n        return x\n    elif x > y:\n        z = x % y\n        return get_hcf(y, z)\n    else:\n        z = y % x\n        return get_hcf(x, z)\ndef get_gcd(x, y):\n    '''\n    Write a python function that takes in two positive integers x and y and returns the gcd of the two numbers.\n    '''\n    if x == 1 or y == 1:\n        return 1\n    elif x == y:\n        return x\n    elif x > y:\n        z = x % y\n        return get_gcd(y, z)\n    else:\n        z = y % x\n        return get_gcd(x, z)\ndef get_gcd_of_list(x_list):\n    '''\n    Write a python function that takes in a list of positive integers x and returns the gcd of all the numbers in the list.\n    '''\n    y = x_list[0]\n    for i in range(1, len(x_list)):\n        y = get_gcd(y, x_list[i])\n    return y\ndef get_lcm_of_list(x_list):\n    '''\n    Write a python function that takes in a list of positive integers x and returns the lcm of all the numbers in the list.\n    '''\n    y = x_list[0]\n    for i in range(1, len(x_list)):\n        y = get_lcm(y, x_list[i])\n    return y\ndef get_lcm(x, y):\n    '''\n    Write a python function that takes in two positive integers x and y and returns the lcm of the two numbers.\n    '''\n    if x == 1 or y == 1:\n        return 1\n    elif x == y:\n        return x\n    elif x > y:\n        z = x % y\n        while z!= 0:\n            x = y\n            y = z\n            z = x % y\n        return y\n    else:\n        z = y % x\n        while z!= 0:\n            x = y\n            y = z\n            z = x % y\n        return y\ndef get_lcm_of_list(x_list):\n    '''\n    Write a python function that takes in a list of positive integers x and returns the lcm of all the numbers in the list.\n    '''\n    y = x_list[0]\n    for i in range(1, len(x_list)):\n        y = get_lcm(y, x_list[i])\n    return "
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Function to find sum of even index \n    # binomial coefficeint. \n    def binomial(n, k): \n        return math.factorial(n) // (math.factorial(k) * \n                                math.factorial(n - k)) \n    \n    # Returns sum of even index \n    # binomial coefficeint. \n    def sum(n): \n        sum = 0\n        for i in range(n): \n            if (i % 2 == 0): \n                sum += binomial(n, i) \n        return sum \n    return sum(n) \n  \nn = 2\nprint(even_binomial_Coeff_Sum(n))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += math.factorial(n)/(math.factorial(i) * math.factorial(n - i))\n    return result\ndef double_slash( x):\n    '''\n    Write a python function that takes in a number x and returns the number x/2 or 2x if x is an even number.\n    '''\n    if x % 2 == 0:\n        return x / 2\n    else:\n        return 2*x\ndef fizz_buzz( n):\n    '''\n    Write a python function that takes in a positive integer n and returns a string with the fizzbuzz sequence up to n.\n    '''\n    result = ''\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            result = result + 'fizz buzz'\n        elif i % 3 == 0:\n            result = result + 'fizz'\n        elif i % 5 == 0:\n            result = result + 'buzz'\n        else:\n            result = result + str(i)\n    return result\ndef monte_carlo_pi( n):\n    '''\n    Write a python function that takes in a positive integer n and returns the value of pi using the monte carlo simulation method.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        x = math.sqrt(math.pow(-1, i+1))\n        y = math.sqrt(math.pow(-1, i))\n        if x % 2 == 0:\n            result += 1\n        else:\n            result += 0\n        if y % 2 == 0:\n            result += 1\n        else:\n            result += 0\n    return 4 * (result/n)\ndef is_prime( n):\n    '''\n    Write a python function that takes in a positive integer n and returns a boolean True if n is prime and False if n is not prime.\n    '''\n    prime_check = False\n    for i in range(2, n):\n        if n % i == 0:\n            prime_check = False\n            break\n        else:\n            prime_check = True\n    return prime_check\ndef find_smallest_number(n, d):\n    '''\n    Write a python function that takes in a positive integer n and a positive integer d and returns the dth smallest integer in the range 0 < n < 2^(d+1)-1 that is divisible by n.\n    '''\n    x = 1\n    power_of_two = math.pow(2, d+1)\n    while True:\n        if math.pow(2, d) -1 > n:\n            break\n        else:\n            x += 1\n    if x % n == 0:\n        return x\n    else:\n        return x + n - math.pow(2, d)\ndef greatest_common_divisor( a, b):\n    '''\n    Write a python function that takes in two positive integers and returns the greatest common divisor of the two integers.\n    '''\n    for i in range(b, 1, -1):\n        if a % i == 0 and b % i == 0:\n            return i\ndef is_palindrome( s):\n    '''\n    Write a python function that takes in a string s and returns True if s is a palindrome and False if s is not a palindrome.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef is_pangram( s):\n    '''\n    Write a python function that takes in a string s and returns True if s is a pangram and False if s is not a pangram. A pangram is a sentence where every letter is used at least once.\n    '''\n    if len(s) > 26:\n        return False\n    for i in range(26):\n        if i == 25:\n            if s.count(chr(ord('a')+i)) == 0:\n                return False\n        else:\n            if s.count(chr(ord('a')+i)) == 0:\n                return False\n    return True\ndef is_valid( s):\n    '''\n    Write a python function that takes in a string s and returns True if s is a valid postal code and False if s is not a valid postal code.\n    '''\n    if len(s)!= 6 or (not s[0].isalpha()) or (not s[1].isdigit()) or (not s[2].isalpha()) or (not s[3].isdigit()) or (not s[4].isalpha()) or (not s[5].isdigit()):\n        return False\n    else:\n        return True\ndef is_balanced( s):\n    '''\n    Write a python function that takes in a string s and returns True if s is a balanced parenthesis.\n    '''\n    result = 0\n    for i in s:\n        if i == '(':\n            result += 1\n        if i == ')':\n            result -= 1\n        if result < 0:\n            return False\n    return result == 0\ndef is_anagram( s1, s2):\n    '''\n    Write a python function that takes in two strings s1 and s2 and returns True if s1 and s2 are anagrams and False if s1 and s2 are not anagrams.\n    '''\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False\ndef is_credit_card_valid( s):\n    '''\n    Write a python function that takes in a string s and returns True if s is a valid credit card number and False if s is not a valid credit card number.\n    '''\n    if len(s)!= 16:\n        return False\n    else:\n        for i in range(15):\n            if not s[i].isdigit():\n                return False\n        for i in range(15):\n            if i % 2 == 0:\n                if not s[i].isdigit():\n                    return False\n            else:\n                if not s[i].isalpha():\n                    return False\n        return True\ndef prime_factors( n):\n    '''\n    Write a python function that takes in a positive integer n and returns a list of all prime factors of n.\n    '''\n    result = []\n    for i in range(2,n+1):\n        while n % i == 0:\n            result.append(i)\n            n = n/i\n    return result\ndef find_non_duplicates(nums):\n    '''\n    Write a python function that takes in a list of positive integers and returns a list of all the non duplicated elements of the list in the same order as they appear in the list.\n    '''\n    result = []\n    for i in nums:\n        if i not in result:\n            result.append(i)\n    return result\ndef evaluate_polynomial( coeffs, x):\n    '''\n    Write a python function that takes in a list of integers coeffs and a number x and returns the polynomial evaluated at x.\n    '''\n    result = 0\n    for i in range(len(coeffs)):\n        result += coeffs[i] * math.pow(x, i)\n    return result\ndef count_characters( s, c):\n    '''\n    Write a python function that takes in a string s and a character c and returns the number of times c appears in s.\n    '''\n    result = 0\n    for i in s:\n        if i == c:\n            result += 1\n    return result\ndef count_capital_consonant_substrings( s):\n    '''\n    Write a python function that takes in a string s and returns the number of capital consonants that appear in the string.\n    '''\n    result = 0\n    for i in s:\n        if i.isalpha() and i.isupper():\n            result += 1\n    return result\ndef greatest_common_prefix( strs):\n    '''\n    Write a python function that takes in a list of strings and returns the longest string that is a prefix of all the strings in the list.\n    '''\n    prefix = ''\n    for i in strs:\n        prefix = common_prefix( prefix, i)\n    return prefix\ndef common_prefix( str1, str2):\n    '''\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum([((-1)**(i+1))*(n/2)**i for i in range(0, int(math.sqrt(n)))])\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(0,n+1):\n        s += math.factorial(n)/((math.factorial(i)*math.factorial(n-i)))\n    return s\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(1,n+1):\n        binomial_coeff = math.factorial(n) / (math.factorial(n-i) * math.factorial(i))\n        coeff_sum += binomial_coeff\n    return coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    odd_coeffs = []\n    for i in range(0, n):\n        odd_coeffs.append(math.factorial(2 * i) / (math.factorial(i) * math.factorial(i + 2)))\n    return sum(odd_coeffs)\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return math.factorial(2*n) // (math.factorial(n) * math.factorial(n))\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    if r < 0 or h < 0:\n        return \"Invalid Input\"\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return math.pi*r*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    if type(r) not in [int, float] or type(h) not in [int, float]:\n        return 'Invalid input. Please try again by entering numbers only.'\n    if r < 0 or h < 0:\n        return 'Invalid input. Please try again by entering positive numbers only.'\n    return (3.14*r*r*h)\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi=3.14\n    volume = pi * r ** 2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.141592 * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*r*3.14*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.141592653*r**2*h)\n    \n    \n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filter_out = {}\n    for key,value in dict.items():\n        if value >= n:\n            filter_out[key] = value\n    return filter_out\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for (k, v) in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict1 = {\n    \"a\": 10,\n    \"b\": 12,\n    \"c\": 8,\n    \"d\": 9,\n    \"e\": 10,\n    }\n    if dict1['a'] >= n:\n        dict1['a'] = n\n    return dict1\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #create a new empty dictionary\n    dict1 = {}\n    #iterate through the dictionary using items\n    for key, value in dict.items():\n        #if the value is greater than or equal to n, add that value to the new dictionary\n        if value >= n:\n            dict1[key] = value\n    #return the new dictionary\n    return dict1\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {x:y for x,y in dict.items() if y>=n}\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    def find_num(test_tup):\n        '''\n        Write a function to return the first element of a tuple in the tuple.\n        '''\n        test_tup = str(test_tup)\n        length = len(test_tup)\n        first_elem = test_tup[0:1]\n        return first_elem\n    def find_num_count(test_tup):\n        '''\n        Write a function to return the number of elements that occur before the tuple element in the given tuple.\n        '''\n        length = len(test_tup)\n        index = 0\n        count = 0\n        while index < length:\n            first_elem = find_num(test_tup)\n            index = index + len(first_elem)\n            count = count + 1\n        return count\n    return find_num_count(test_tup)\n    \ntest_tup = ('G', 'F', 'E', 'E', 'G', 'E', 'E', 'G', 'F', 'G')"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    numbers = [i for i in test_tup]\n    start = numbers[0]\n    end = numbers[1]\n    count = 0\n    if test_tup[0] < test_tup[1]:\n        for i in range(0, len(numbers)):\n            if start < numbers[i]:\n                count += 1\n            else:\n                start = numbers[i]\n                break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # TODO: Implement this function\n    #pass\n    count = 0\n    for x in test_tup:\n        if(test_tup.index(x) == 0):\n            count = count+1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            break\n        count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_list = []\n    for i in test_tup:\n        test_list.append(i[0])\n    print(test_list)\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup_len = len(test_tup)\n    lst_of_tuples = []\n    for i in range(tup_len):\n        if i == 0:\n            lst_of_tuples.append((test_tup[i],0))\n        else:\n            num = test_tup[i]\n            num_of_previous_elements = 0\n            for j in range(i):\n                if test_tup[j] == num:\n                    num_of_previous_elements += 1\n            lst_of_tuples.append((num,num_of_previous_elements))\n    return lst_of_tuples\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    try:\n        test_tup = tuple(test_tup)\n        print(test_tup)\n    except:\n        print(\"Please enter a tuple of integers.\")\n        return\n    n = len(test_tup)\n    #my_dict = {}\n    #count = 0\n    #for i in range(n):\n    #    if test_tup[i] in my_dict:\n    #        my_dict[test_tup[i]] += 1\n    #    else:\n    #        my_dict[test_tup[i]] = 1\n    #for j in my_dict:\n    #    if my_dict[j] == 1:\n    #        count += 1\n    #return count\n    #print(my_dict)\n    count = 0\n    for i in range(n):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    print(test_tup)\n    print(len(test_tup))\n    count_dict = {}\n    for num in test_tup:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    print(count_dict)\n    for key, val in count_dict.items():\n        print(key, val)\n        for index, num in enumerate(test_tup):\n            if num == key:\n                print(index)\n                break\n            else:\n                print(index)\n                continue\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(n+8)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def num_to_list(num):\n        return list(str(num))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n * (9 * n - 14) / 2 + 1)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def d(n):\n        return int(n*(10*n-n+1)/2)\n    return d(n) == n\nprint(is_num_decagonal(23))\nprint(is_num_decagonal(42))\nprint(is_num_decagonal(70))\nprint(is_num_decagonal(93))\nprint(is_num_decagonal(217))\nprint(is_num_decagonal(3856))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Your code here\n    if n > 0:\n        return int(n*(n+1)/2)\n    elif n == 0:\n        return 0\n    else:\n        return -1\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = int(n)\n    n = n - a\n    x = (a*(10**2)) + ((9*(10**2)) - n*10) \n    if n>0:\n        return x + is_num_decagonal(n)\n    else:\n        return x\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    # Base cases\n    if(n == 1):\n        return(10)\n    if(n == 2):\n        return(12)\n    if(n == 3):\n        return(22)\n    if(n == 4):\n        return(32)\n    if(n == 5):\n        return(42)\n    \n    # Recursive case\n    return((n*10)-10 + is_num_decagonal(n-1))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    nth = (0.5*n**2 + n + 1)*n\n    return nth\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    def f(i, n):\n        return i*(i+1)//2 + n - i*i\n        \n    def g(i):\n        return i*(i+1)//2\n        \n    i = 1\n    while True:\n        n = f(i, n)\n        if g(i) == n:\n            return n\n        i += 1\n    \n    return False\n    \ndef problem2(n):\n    '''\n    Write a function that returns the number of divisors of a positive integer.\n    '''\n    \n    def divisors(n):\n        '''\n        Returns the list of divisors of n.\n        '''\n        divs = [1]\n        for i in range(2,int(n**0.5)+1):\n            if n%i == 0:\n                divs.extend([i, n//i])\n        return list(set(divs))\n        \n    divs = divisors(n)\n    return len(divs)\n    \ndef problem3(n):\n    '''\n    Write a function that returns a list of all numbers up to and including n that are divisible by d.\n    '''\n    \n    def all_divisible(n, d):\n        '''\n        Returns a list of all numbers up to and including n that are divisible by d.\n        '''\n        if n<0:\n            return []\n        elif n==0:\n            return [0]\n        else:\n            return [n*d**i for i in range(int(log(n, d))+1)]\n    \n    return all_divisible(n, 3)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # only odd numbers are decagonals\n    if n % 2 == 0:\n        return False\n    dec_num = int(n*(3*n-1)/2)\n    if dec_num < 0:\n        return False\n    return True\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # implement linear search\n    # loop over all elements in array\n    # if the element is found return true and the index\n    # if the element is not found return false and -1\n    pos = -1\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            pos = i\n            break\n    return found, pos\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Start at the beginning of the list\n    index = 0\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    i = 0\n    while i < len(dlist) and dlist[i]!= item:\n        i += 1\n    return(True if i < len(dlist) else False, i if i < len(dlist) else -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for index, d in enumerate(dlist):\n        if d == item:\n            pos = index\n            break\n    return (pos >= 0, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if item == value:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    def seq_search(arr, element):\n        pos = -1\n        for i in range(len(arr)):\n            if arr[i] == element:\n                return (True, i)\n        return (False, pos)\n    return seq_search(dlist, item)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Check the index of element if in array\n    index_pos = []\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index_pos.append(i)\n    if index_pos == []:\n        return False, -1\n    else:\n        return True, index_pos\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # In Python, there is a built-in data structure called a set which is similar to a list,\n    # but with only unique values.\n    # We can use this to perform the test in a more efficient way.\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #Convert list to set\n    unique_set = set(test_list)\n    #Convert set to list\n    unique_list = list(unique_set)\n    #Sort list\n    unique_list.sort()\n    #Compare with original list\n    if len(unique_list) == len(test_list):\n        print(\"The list is unique\")\n    else:\n        print(\"The list is not unique\")\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    new_list = []\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list)):\n            if i == j:\n                break\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # test_list = [1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5]\n    print(\"The given list is:\", test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    for i in test_list:\n        if test_list.count(i)>1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    result_set = set(test_list)\n    if len(result_set) == len(test_list):\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    test_list_2 = []\n    for item in test_list:\n        if item not in test_list_2:\n            test_list_2.append(item)\n        else:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # unique_list = []\n    # for num in test_list:\n    #     if num not in unique_list:\n    #         unique_list.append(num)\n    #     else:\n    #         return False\n    # return True\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    ans=[]\n    for i in range(len(nums1)):\n        ans.append(nums1[i]-nums2[i])\n    return ans\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    list_nums1 = list(nums1)\n    list_nums2 = list(nums2)\n    for i in range(len(list_nums2)):\n        list_nums1[i] -= list_nums2[i]\n    return list_nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num2-num1 for num2,num1 in zip(nums2,nums1)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1-num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        for i in range(len(nums2)):\n            nums1[i] -= nums2[i]\n    else:\n        for i in range(len(nums1)):\n            nums1[i] -= nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1 = list(nums1)\n    nums2 = list(nums2)\n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i] - nums2[i])\n    return sub_list\n    \nnums1 = [1,2,3,4]\nnums2 = [5,6,7,8]\nprint(sub_list(nums1,nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    s=[]\n    for i in range(0,len(nums1)):\n        s.append(nums1[i]-nums2[i])\n    return s\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)>len(nums2):\n        nums1,nums2=nums2,nums1\n    # return [nums1[i]-nums2[i] for i in range(len(nums1))]\n    # print([i for i in range(len(nums1))])\n    # return [nums1[i]-nums2[i] for i in range(len(nums1))]\n    return [nums1[i]-nums2[i] for i in range(len(nums1)) if nums1[i]-nums2[i]>0]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for i in range(0,len(nums1)):\n        sub_list.append(nums1[i]-nums2[i])\n    return sub_list\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = dict()\n    for i in n:\n        d[i] = d.get(i,0) + 1\n        if d[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n<=0:\n        return False\n    else:\n        d={}\n        for i in range(len(str(n))):\n            if str(n)[i] not in d:\n                d[str(n)[i]]=1\n            else:\n                d[str(n)[i]]+=1\n        for i in range(len(str(n))):\n            if int(str(n)[i]) > d[str(n)[i]]:\n                return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for i in n:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for key,val in freq.items():\n        if val > key:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict={}\n    for i in range(n):\n        if n[i] in dict:\n            dict[n[i]]+=1\n        else:\n            dict[n[i]]=1\n    if max(dict.values())>1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    counter = [0] * 10\n    for i in str(n):\n        counter[int(i)] += 1\n    return all(num <= counter[i] for i, num in enumerate(counter))\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    for i in range(len(n)):\n        if int(n[i]) > int(n[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    import re\n    dict={}\n    string=re.split('', str(n))\n    for i in string:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    for key,value in dict.items():\n        if value>int(key):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq_list = {}\n    for i in str(n):\n        if i not in freq_list:\n            freq_list[i] = 1\n        else:\n            freq_list[i] += 1\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize an empty dictionary\n    count = {}\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    d = [0] * 10\n    while n:\n        d[n % 10] += 1\n        n //= 10\n    for i in range(10):\n        if d[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # 1.\n    # for item in list:\n    #     if item!= element:\n    #         return False\n    # return True\n    \n    # 2.\n    # for item in list:\n    #     if item == element:\n    #         return False\n    # return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(list[i]==element for i in range(len(list)))\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for x in list:\n        if x == element:\n            count += 1\n    if count == len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}', text):\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r\"a.{2,3}b\", text):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r\"ab{2,3}\",text)\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    p = re.compile(r'ab{2,3}?')\n    m = p.match(text)\n    if m is None:\n        print(False)\n    else:\n        print(True)\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text == None:\n        return False\n    #Regular Expression\n    # r = re.compile(\"ab{2,3}\")\n    # result = r.search(text)\n    # if result == None:\n    #     return False\n    # else:\n    #     return True\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = re.compile(r\"ab{2,3}\")\n    result = regex.search(text)\n    return result!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba\\b{2}|\\ba\\b{3}'\n    matches = re.finditer(pattern, text)\n    return [match.group() for match in matches]\nprint(text_match_two_three(\"catcat\"))\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = '\\w{0,}(a)\\w{0,}(b){1,2}'\n    result = re.search(pattern, text)\n    return result\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\nprint(text_match_two_three('abba')) # True\nprint(text_match_two_three('abbbbbbb')) # True\nprint(text_match_two_three('ab')) # False\nprint(text_match_two_three('aabb')) # False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = text.lower()\n    print(x)\n    if 'ab' in x:\n        print('True')\n    else:\n        print('False')\n    if 'abc' in x:\n        print('True')\n    else:\n        print('False')\n    if 'abbc' in x:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # This problem can also be solved using Kadane's Algorithm.\n    # In Kadane's algorithm, we keep track of the sum of all the subarrays (say subarray_sum) which are formed by adding the maximum element of the array to the sum of the previous subarrays.\n    # Let's say we have an array: [1,2,3,4,5,6,7,8,9]\n    # For the first sum subarray, we start with adding the first element, i.e. 1. We can add 1 as the maximum element of the subarray.\n    # Now we have [1,2,3,4,5,6,7,8,9] -> [2,3,4,5,6,7,8,9]\n    # For the second sum subarray, we start with adding the element at index 1, i.e. 2. The maximum element of the subarray is 2, so we add 2 to sum.\n    # Now we have [2,3,4,5,6,7,8,9] -> [3,4,5,6,7,8,9]\n    # For the third sum subarray, we start with adding the element at index 2, i.e. 3. The maximum element of the subarray is 3, so we add 3 to sum.\n    # Now we have [3,4,5,6,7,8,9] -> [4,5,6,7,8,9]\n    # For the fourth sum subarray, we start with adding the element at index 3, i.e. 4. The maximum element of the subarray is 4, so we add 4 to sum.\n    # Now we have [4,5,6,7,8,9] -> [5,6,7,8,9]\n    # For the fifth sum subarray, we start with adding the element at index 4, i.e. 5. The maximum element of the subarray is 5, so we add 5 to sum.\n    # Now we have [5,6,7,8,9] -> [6,7,8,9]\n    # For the sixth sum subarray, we start with adding the element at index 5, i.e. 6. The maximum element of the subarray is 6, so we add 6 to sum.\n    # Now we have [6,7,8,9] -> [7,8,9]\n    # For the seventh sum subarray, we start with adding the element at index 6, i.e. 7. The maximum element of the subarray is 7, so we add 7 to sum.\n    # Now we have [7,8,9] -> [8,9]\n    # For the eighth sum subarray, we start with adding the element at index 7, i.e. 8. The maximum element of the subarray is 8, so we add 8 to sum.\n    # Now we have [8,9] -> [9]\n    # For the ninth sum subarray, we start with adding the element at index 8, i.e. 9. The maximum element of the subarray is 9, so we add 9 to sum.\n    # Now we have [9] -> [9]\n    # The sum of all the subarrays is: [1,2,3,4,5,6,7,8,9]\n    # The sum of the largest subarray is 9.\n    \n    # If we repeat the given array k times, we end up with the original array.\n    # Let's say we have the array [1,2,3,4,5,6,7,8,9]\n    # If we repeat the given array, we end up with the array [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9]\n    # Now we can say that the sum of all the subarrays in the modified array is sum_of_all_subarrays.\n    # The sum of the largest subarray in the modified array is sum_of_largest_subarray.\n    # sum_of_all_subarrays = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n    # sum_of_largest_subarray = 9\n    # The difference between the two is the sum of all the subarrays - sum of the largest subarray.\n    # So, we need to find the sum of all the subarrays and the sum of the largest subarray.\n    \n    # Lets say we have the array [1,2,3,4,5,6,7,8,9]\n    # First we have to find the sum of all the subarrays, i.e. 1+2+3+4+5+6+7+8+9 = 45.\n    # The sum of all the subarrays is 45, now we can find the sum of the largest subarray, 9.\n    \n    # To get the largest sum of a contiguous array in a modified array, we can use the same algorithm as we used for the max subarray problem.\n    # The only difference is that we have to find the sum of the largest subarray.\n    # So we can use the max subarray problem with the above logic and apply it here.\n    # The only thing that we need to add is that we have to keep track of the index of the max element.\n    # The max element of the modified array, i.e. 9, is at index 8.\n    \n    # Approach 1:\n    \n    # We can use a similar approach as in the max subarray problem.\n    # We can keep a track of the maximum element and the maximum element's index in the max_so_far array.\n    # Now to get the sum of the largest subarray, we can simply get the sum of all subarrays - the sum of the max subarray.\n    # This problem is similar to the max subarray problem.\n    \n    # Approach 2:\n    \n    # We can again use the same algorithm as we used for the max subarray problem.\n    # The only difference is that we have to keep track of the sum of the max subarray and the index of the max element.\n    # We can keep a track of the maximum element and the maximum element's index in the max_so_far array.\n    # No"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # creating a copy of array.\n    a = a[:]\n    # Finding max_subarray_sum_k_times\n    sums = []\n    # Initialize max_sum to 0\n    max_sum = 0\n    for i in range(n):\n        sums.append(sum(a[:i+1]))\n    for i in range(n):\n        for j in range(i+1,n+1):\n            # loop through each sum possible\n            curr_sum = sums[j] - sums[i]\n            if curr_sum == k:\n                # if the current sum is equal to k, we have a subarray\n                max_sum = max(max_sum, sum(a[i:j]))\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if (k == 0): \n        return 0\n    if (n == 1): \n        return a[0]\n    temp_sum = max_sum_k_times(a, n, k) \n    max_sum = temp_sum\n    for i in range(1, k + 1): \n        temp_sum = temp_sum + max_sub_array_sum_repeated(a, n, k - i) \n        if (temp_sum >= max_sum): \n            max_sum = temp_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # code here\n    maxSum = float('-inf')\n    sum = 0\n    for i in range(0,n):\n        sum += a[i]\n        if (i + 1) % k == 0:\n            sum -= a[i - (k - 1)]\n        if maxSum < sum:\n            maxSum = sum\n    return maxSum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    curr_max = 0\n    for i in range(0, n): \n        curr_max += a[i] \n        a[i] = curr_max \n    \n    sum = 0\n    for i in range(0, n): \n        sum += a[i] - (k * a[i]) \n    \n    return sum \n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    elif k < 0:\n        raise Exception(\"k should be positive\")\n    else:\n        a_max = sum(a)\n        s = max_sub_array_sum(a, n)\n        t = k * max_sub_array_sum(a, n)\n        return max(a_max, t)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    global_max_sum = -2 ** 31\n    sum_so_far = 0\n    for i in range(0, n): \n        sum_so_far = sum_so_far + a[i] \n        if (k > 0): \n            sum_so_far = sum_so_far + a[i] \n            k = k - 1\n        if (sum_so_far > global_max_sum): \n            global_max_sum = sum_so_far \n    return global_max_sum \ndef maxSubArraySum(a, size): \n    \n    max_so_far = a[0] \n    curr_max = a[0] \n    for i in range(1, size): \n        curr_max = max(a[i], curr_max + a[i]) \n        max_so_far = max(max_so_far, curr_max) \n    return max_so_far \ndef maxSubArraySum2(a, size): \n    max_so_far = 0\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    curr_sum = 0\n    max_sum = 0\n    i = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if(n == 0):\n        return 0\n    sum = 0\n    max_sum = 0\n    for i in range(n):\n        sum = sum + a[i]\n        if sum == k:\n            max_sum = max(max_sum, sum)\n        if sum - k in a[i+1:] and max_sum == 0:\n            max_sum = max(max_sum, sum - k)\n    \n    if max_sum == 0:\n        max_sum = max(max_sum, sum)\n    \n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    curr_max_sum = 0\n    max_sum = 0\n    for i in range(0, n*k):\n        curr_max_sum = max(a[i%n], curr_max_sum+a[i%n])\n        max_sum = max(max_sum, curr_max_sum)\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #base case\n    if n == 0:\n        return 0\n    #iterative case\n    else:\n        return n**2 + square_Sum(n-1)\n    \n    \ndef validate_Subsequence(str1, str2):\n    '''\n    Write a python function takes in two strings and returns True if str1 is a subsequence of str2. False otherwise. \n    '''\n    #base case\n    if str1 == '':\n        return True\n    #recursive case\n    elif str2 == '':\n        return False\n    #check if first character of str1 is in str2\n    elif str1[0] == str2[0]:\n        return validate_Subsequence(str1[1:], str2[1:])\n    #if str1 is not in str2, check if str1 is a subsequence of str2 by excluding the first character\n    else:\n        return validate_Subsequence(str1, str2[1:])\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(2,n+1,2):\n        sum+=i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    while n > 0:\n        s += (n%2)**2\n        n -= 1\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s=0\n    for i in range(2,n+1,2):\n        s+=i**2\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    Sum = 0\n    if n > 0:\n        for i in range(0, n):\n            if i % 2 == 0:\n                Sum = Sum + i * i\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total += i ** 2\n    return total\n    #pass\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #initialize sum\n    sum = 0\n    #convert input integer n to string, then to int\n    n = int(str(n))\n    #loop through each even number between 0 and n, adding the square to sum\n    for i in range(0,n):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n    \n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    Sum = 0\n    for i in range(2, n+1, 2):\n        Sum += i**2\n    return Sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # your code goes here\n    if n < 0:\n        return -1\n    elif n == 1:\n        return 1\n    else:\n        return (n**2) + square_Sum(n-1)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lst=[]\n    max=0\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    for i in list1:\n        if len(i)==max:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = len(max(list1, key=len))\n    lst = []\n    for i in list1:\n        if len(i) == l:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = max(list1,key = lambda x : len(x))\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    for i in list1:\n        if(len(i)>max_length):\n            max_length=len(i)\n    print(max_length)\n    \n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    longest = []\n    for i in range(len(list1)):\n        if len(list1[i]) >= len(longest):\n            longest = list1[i]\n    return longest\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # list of lists\n    list_max = [max(i, key=len) for i in list1]\n    return list_max\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n    \ndef unique_elements(list1):\n    '''\n    Write a function to find the unique elements in a list of lists.\n    '''\n    unique_list = []\n    for i in list1:\n        for j in i:\n            if j not in unique_list:\n                unique_list.append(j)\n    return unique_list\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(map(len, list1))\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=0\n    for i in list1:\n        if len(i)>max_len:\n            max_len=len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return [len(i) for i in list1].index(max([len(i) for i in list1]))\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    colors = k\n    fence = [0] * n \n    # This array represents the number of ways of painting the fence\n    # such that at most two adjacent posts have the same color.\n    \n    count = [0] * colors\n    # There is only one way of painting a fence with only one\n    # post and that post can be of only one color\n    count[0] = 1\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        if k == 2:\n            return 1\n        else:\n            return k\n    if n == 3:\n        if k == 2:\n            return 2\n        else:\n            return k*(k-1)\n    if n == 4:\n        return k*(k-1)*(k-2)\n    if n == 5:\n        return k*(k-1)*(k-2)*(k-3)\n    dp = [0]*(n+1)\n    dp[1] = k\n    dp[2] = k*(k-1)\n    dp[3] = k*(k-1)*(k-2)\n    dp[4] = k*(k-1)*(k-2)*(k-3)\n    for i in range(5, n+1):\n        dp[i] = k*(k-1)*(k-2)*(k-3)*(k-4)\n    return dp[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0: \n        return 0\n    if n == 1: \n        return k \n    if k == 1: \n        return n \n  \n    # create a table to store the number of ways for \n    # subproblems \n    table = [0 for i in range(k + 1)] \n  \n    # initialize the 0th row as 0 \n    table[0] = 0\n    # initialize the 0th column with 1 \n    # 1 since the fence cannot be of 0 color. \n    table[1] = k \n  \n    # Fill the entries for 2, 3..k in the table \n    # for the given n. \n    for i in range(2, k + 1): \n        for j in range(n): \n            if j == 0: \n                table[i] += 1\n            else: \n                table[i] += table[i - 1] \n  \n    return table[k] \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 0 or k < 0: \n        return -1\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    k_1 = k - 1\n    dp = [0 for x in range(k+1)]\n    dp[0] = 1\n    for i in range(1, n+1):\n        for j in range(k_1, 0, -1):\n            dp[j] += dp[j - 1]\n    return dp[k_1]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][1] = 1\n    for i in range(1, k+1):\n        dp[1][i] = i\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # If number of posts is less than 2, return 0\n    if n < 2: \n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for _ in range(k)] for _ in range(n)]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 0 or k <= 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        if k >= 3: \n            return 0\n        else: \n            return k \n    arr = [[0 for _ in range(k)] for _ in range(n)] \n    for i in range(k): \n        arr[0][i] = 1\n    for i in range(1, n): \n        arr[i][0] = arr[i - 1][1] \n    for i in range(1, n): \n        for j in range(1, k): \n            arr[i][j] = arr[i - 1][j] + arr[i][j - 1] \n    return arr[n - 1][k - 1] \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    colors = n\n    max_ways = (n * (n-1)) // 2\n    if k <= 1:\n        return 0\n    if k == colors:\n        return 1\n    if k == 2*colors:\n        return 2\n    if k > max_ways:\n        return 0\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k-2)\n    \ndef count_no_of_ways_dp(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    colors = n\n    max_ways = (n * (n-1)) // 2\n    if k <= 1:\n        return 0\n    if k == colors:\n        return 1\n    if k == 2*colors:\n        return 2\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][1] = 1\n        dp[i][0] = 1\n    for j in range(k+1):\n        dp[1][j] = 1\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2]\n    return dp[n][k]\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    \ndef sum(a,b):\n    '''\n    Write a python function to sum up two numbers.\n    '''\n    return a+b\n    \ndef product(a,b):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a*b\n    \ndef find_sqrt(a):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    return a**0.5\n    \ndef find_cbrt(a):\n    '''\n    Write a python function to find the cubic root of a number.\n    '''\n    return a**(1/3)\n    \ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef sum_of_digits(n):\n    '''\n    Write a python function to find sum of digits of a number.\n    '''\n    return sum([int(x) for x in str(n)])\ndef is_divisible_by_9(n):\n    '''\n    Write a python function to check if a number is divisible by 9.\n    '''\n    return True if n%9 == 0 else False\ndef count_letters(word):\n    '''\n    Write a python function to count letters of a string.\n    '''\n    return len([x for x in word if x.isalpha()])\ndef reverse(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return string[::-1]\ndef palindrome(n):\n    '''\n    Write a python function to check if a number is palindrome.\n    '''\n    return str(n) == reverse(str(n))\ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate a matrix by 90 degrees (clockwise).\n    '''\n    return [list(x) for x in zip(*matrix[::-1])]\ndef is_power_of_two(n):\n    '''\n    Write a python function to check if a number is power of two.\n    '''\n    return True if n and not(n & (n-1)) else False\ndef is_power_of_three(n):\n    '''\n    Write a python function to check if a number is power of three.\n    '''\n    return True if n and not(n & (n-1)) and not(n & ~-n) else False\ndef fibonacci(n):\n    '''\n    Write a python function to generate the fibonacci series up to n terms.\n    '''\n    a,b = 0,1\n    while a<n:\n        yield a\n        a,b = b,a+b\ndef is_perfect_square(n):\n    '''\n    Write a python function to check if a number is perfect square.\n    '''\n    return n**0.5 == int(n**0.5)\ndef is_square(n):\n    '''\n    Write a python function to check if a number is square.\n    '''\n    return True if n and int(n**0.5)**2 == n else False\ndef get_factors(n):\n    '''\n    Write a python function to get all the factors of a number.\n    '''\n    l = []\n    for i in range(1,int(n**0.5)+1):\n        if n%i == 0:\n            l.append(i)\n            if n//i!= i:\n                l.append(n//i)\n    return l\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    return True if len(get_factors(n)) == 2 else False\ndef reverse_digit(n):\n    '''\n    Write a python function to reverse a digit of a number.\n    '''\n    return int(str(n)[::-1])\ndef swap_case(s):\n    '''\n    Write a python function to swap case of a string.\n    '''\n    return s.swapcase()\ndef capitalize(s):\n    '''\n    Write a python function to capitalize a string.\n    '''\n    return s.capitalize()\ndef to_camel_case(s):\n    '''\n    Write a python function to convert a string to camel case.\n    '''\n    s = s.split('_')\n    return s[0] + ''.join(x.title() for x in s[1:])\ndef find_missing_number(arr):\n    '''\n    Write a python function to find missing number from an array of 1 to n.\n    '''\n    return sum(range(1,len(arr)+1)) - sum(arr)\ndef is_majority_element(arr):\n    '''\n    Write a python function to check if majority element exists in an array.\n    '''\n    return True if arr.count(arr[0]) > len(arr)//2 else False\ndef find_min_rotation(arr):\n    '''\n    Write a python function to find minimum rotation of array in order to sort it.\n    '''\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted(arr):\n            return i\n    return 0\ndef minimum_index_sum(nums):\n    '''\n    Write a python function to find sum of first n-1 numbers.\n    '''\n    return sum(nums[:len(nums)-1])\ndef last_occurence(arr,value):\n    '''\n    Write a python function to find last occurence of an element in an array.\n    '''\n    return arr[::-1].index(value)\ndef find_missing_number_2(nums):\n    '''\n    Write a python function to find missing number from an array of 1 to n.\n    '''\n    return sum(range(1,len(nums)+1)) - sum(nums)\ndef find_missing_number_3(arr):\n    '''\n    Write a python function to find missing number from an array of 1 to n.\n    '''\n    return sum(range(1,len(arr)+1)) - sum(arr)\ndef is_rotation(str1,str2):\n    '''\n    Write a python function to check if str2 is rotation of str1.\n    '''\n    return True if str1+str1 == str2 else False\ndef get_missing_element(arr1,arr2):\n    '''\n    Write a python function to find missing element in an array.\n    '''\n    return set(arr1) - set(arr2)\ndef sum_of_digits_in_number(n):\n    '''\n    Write a python function to get sum of digits of a number.\n    '''\n    return sum([int(x) for x in str(n)])\ndef max_contiguos_sum(arr):\n    '''\n    Write a python function to find max contiguos sum.\n    '''\n    current_sum, max_sum = 0, 0\n    for i in arr:\n        current_sum += i\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum\ndef find_missing_number_4(arr):\n    '''\n    Write a python function to find missing number from an array of 1 to n.\n    '''\n    return sum(range(1,len(arr)+1)) - sum(arr)\ndef count_bits(n):\n    '''\n    Write a python function to count 1's in number.\n    '''\n    return bin(n).count('1')\ndef is_leap_year(year):\n    '''\n    Write a python function to check if a year is a leap year.\n    '''\n    return True if year%400 == 0 else False if year%4 == 0 and year%100!= 0 else False\ndef remove_duplicates(arr):\n    '''\n    Write a python function to remove duplicates from an array.\n    '''\n    return list(dict.fromkeys(arr))\ndef check_balanced_brackets(str):\n    '''\n    Write a python function to check if brackets are balanced.\n    '''\n    brackets = ['(',')','[',']','{','}']\n    stack = []\n    for char in str:\n        if char in brackets:\n            if char == ')' and stack and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    return not stack\ndef factorial_of_digits(n):\n    '''\n    Write a python function to compute factorial of digits of a number.\n    '''\n    return n*factorial_of_digits(n-1) if n else 1\ndef is_rotated(str1,str2):\n    '''"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n > m:\n        quotient = n / m\n        return int(quotient)\n    else:\n        quotient = m / n\n        return int(quotient)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if n < m:\n        return n\n    else:\n        return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Error: Divide by zero!\"\n    else:\n        return n/m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    num1 = int(input(\"Enter the first number: \"))\n    num2 = int(input(\"Enter the second number: \"))\n    result = (num1/num2)\n    print(\"Quotient: \"+str(result))\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n // m\n    return(q)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    a, b = n, m \n    q = a // b\n    return q\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (n%m == 0):\n        return (n//m)\n    else:\n        return (n//m+1)\n    return None\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return None\n    else:\n        return math.sqrt(w**2+h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w\n    b = h\n    c = math.sqrt(a**2+b**2)\n    return c\n    # pass\n    # Modify the function to accept two parameters, the first being the length of the first side, and the second being the length of the other side.\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w\n    b = h\n    c = math.sqrt(a**2+b**2)\n    return c\n    # pass\n    # Modify the function to accept two parameters, the first being the length of the first side, and the second being the length of the other side.\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return int(math.sqrt((w ** 2) + (h ** 2)) * 2)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    t=math.sqrt(w**2 + h**2)\n    return t\n    \ndef area_of_triangle(s1,s2,s3):\n    '''\n    Write a function to find the area of triangle by the length of it's side.\n    '''\n    t=(s1+s2+s3)/2\n    area=math.sqrt(t*(t-s1)*(t-s2)*(t-s3))\n    return area\n    \ndef area_of_trapezium(a1,a2,h):\n    '''\n    Write a function to find the area of trapezium by the length of it's side.\n    '''\n    area=a1*a2/2 + a1*h\n    return area\n    \ndef area_of_rectangle(a,b):\n    '''\n    Write a function to find the area of rectangle by the length of it's side.\n    '''\n    area=a*b\n    return area\n    \ndef area_of_parallelogram(a,b):\n    '''\n    Write a function to find the area of parallelogram by the length of it's side.\n    '''\n    area=a*b\n    return area\n    \ndef area_of_circle(r):\n    '''\n    Write a function to find the area of circle by the radius of it.\n    '''\n    area=math.pi*r**2\n    return area\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w**2)+(h**2))\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w*h)/2\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    return math.sqrt((x2-x1)**2 + (y2-y1)**2)\ndef hypotenuse(x1,y1,x2,y2):\n    '''\n    Write a function to find the length of the hypotenuse of a right angled triangle.\n    '''\n    return math.sqrt(((x2-x1)**2) + ((y2-y1)**2))\ndef find_area(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return w*h\ndef find_perimeter(w,h):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(w+h)\ndef find_circumference(w,h):\n    '''\n    Write a function to find the circumference of a rectangle.\n    '''\n    return 2*(w+h)\ndef find_circumference_squared(w,h):\n    '''\n    Write a function to find the circumference of a rectangle.\n    '''\n    return w*h\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef circumference_of_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\ndef find_circumference_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\ndef circumference_of_circle_squared(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*(r**2)\ndef area_of_circle_squared(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef find_area_of_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef find_volume_of_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a**3\ndef find_volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\ndef find_volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi)*(r**2)*h\ndef find_volume_of_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*(math.pi)*(r**2)*h\ndef find_volume_of_pyramid(a,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (1/3)*(a**2)*h\ndef find_volume_of_cylinder_sphere_intersection(r,h):\n    '''\n    Write a function to find the volume of a cylinder and a sphere intersection.\n    '''\n    return (math.pi)*(r**2)*h\ndef find_volume_of_cylinder_sphere_union(r,h):\n    '''\n    Write a function to find the volume of a cylinder and a sphere union.\n    '''\n    return (math.pi)*(r**2)*h\ndef find_volume_of_cylinder_sphere_difference(r,h):\n    '''\n    Write a function to find the volume of a cylinder and a sphere difference.\n    '''\n    return (math.pi)*(r**2)*h\ndef find_volume_of_rectangular_prism(w,h,l):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return w*h*l\ndef find_volume_of_rectangular_prism_sphere_intersection(w,h,l):\n    '''\n    Write a function to find the volume of a rectangular prism and a sphere intersection.\n    '''\n    return w*h*l\ndef find_volume_of_rectangular_prism_sphere_union(w,h,l):\n    '''\n    Write a function to find the volume of a rectangular prism and a sphere union.\n    '''\n    return w*h*l\ndef find_volume_of_rectangular_prism_sphere_difference(w,h,l):\n    '''\n    Write a function to find the volume of a rectangular prism and a sphere difference.\n    '''\n    return w*h*l\ndef find_area_of_rectangle(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return w*h\ndef find_area_of_rectangle_sphere_intersection(w,h):\n    '''\n    Write a function to find the area of a rectangle and a sphere intersection.\n    '''\n    return w*h\ndef find_area_of_rectangle_sphere_union(w,h):\n    '''\n    Write a function to find the area of a rectangle and a sphere union.\n    '''\n    return w*h\ndef find_area_of_rectangle_sphere_difference(w,h):\n    '''\n    Write a function to find the area of a rectangle and a sphere difference.\n    '''\n    return w*h\ndef find_volume_of_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    s=(a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**(1/2)\ndef find_volume_of_triangle_sphere_intersection(a,b,c):\n    '''\n    Write a function to find the volume of a triangle and a sphere intersection.\n    '''\n    s=(a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**(1/2)\ndef find_volume_of_triangle_sphere_union(a,b,c):\n    '''\n    Write a function to find the volume of a triangle and a sphere union.\n    '''\n    s=(a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**(1/2)\ndef find_volume_of_triangle_sphere_difference(a,b,c):\n    '''\n    Write a function to find the volume of a triangle and a sphere difference.\n    '''\n    s=(a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**(1/2)\ndef find_volume_of_cube_intersection(a):\n    '''\n    Write a function to find the volume of a cube and a sphere intersection.\n    '''\n    return a**3\ndef find_volume_of_cube_union(a):\n    '''\n    Write a function to find the volume of a cube and a sphere union.\n    '''\n    return a**3\ndef find_volume_of_cube_difference(a):\n    '''\n    Write a function to find the volume of a cube and a sphere difference.\n    '''\n    return a**3\ndef find_volume_of_cone_intersection(a):\n    '''\n    Write a function to find the volume of a cone and a sphere intersection.\n    '''\n    return (1/3)*(a**2)*math.pi\ndef fin"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    otherside = math.sqrt(w**2 + h**2)\n    return otherside\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(\"input dimension w:{}, h:{}\".format(w,h))\n    a = w**2 + h**2\n    a = math.sqrt(a)\n    return a\ndef otherside_hypotenuse(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(\"input dimension a:{}, b:{}\".format(a,b))\n    a = a**2 + b**2\n    a = math.sqrt(a)\n    return a\ndef angle_of_triangle(w,h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    print(\"input dimension w:{}, h:{}\".format(w,h))\n    c = w**2 + h**2\n    c = math.sqrt(c)\n    a = math.atan(w/h)\n    return a\ndef hypotenuse_length(a,b):\n    '''\n    Write a function to find the hypotenuse length of a right angled triangle.\n    '''\n    print(\"input dimension a:{}, b:{}\".format(a,b))\n    a = math.sqrt(a**2 + b**2)\n    return a\ndef angle_of_triangle_v1(w,h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    print(\"input dimension w:{}, h:{}\".format(w,h))\n    c = w**2 + h**2\n    c = math.sqrt(c)\n    a = math.acos(w/c)\n    return a\ndef hypotenuse_length_v1(a,b):\n    '''\n    Write a function to find the hypotenuse length of a right angled triangle.\n    '''\n    print(\"input dimension a:{}, b:{}\".format(a,b))\n    a = math.sqrt(a**2 + b**2)\n    return a\ndef angle_of_triangle_v2(w,h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    print(\"input dimension w:{}, h:{}\".format(w,h))\n    c = w**2 + h**2\n    c = math.sqrt(c)\n    a = math.asin(h/c)\n    return a\ndef hypotenuse_length_v2(a,b):\n    '''\n    Write a function to find the hypotenuse length of a right angled triangle.\n    '''\n    print(\"input dimension a:{}, b:{}\".format(a,b))\n    a = math.sqrt(a**2 + b**2)\n    return a\ndef angle_of_triangle_v3(w,h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    print(\"input dimension w:{}, h:{}\".format(w,h))\n    c = w**2 + h**2\n    c = math.sqrt(c)\n    a = math.acos((w**2 + c**2 - h**2)/(2*w*c))\n    return a\ndef hypotenuse_length_v3(a,b):\n    '''\n    Write a function to find the hypotenuse length of a right angled triangle.\n    '''\n    print(\"input dimension a:{}, b:{}\".format(a,b))\n    a = math.sqrt(a**2 + b**2)\n    return a\ndef angle_of_triangle_v4(w,h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    print(\"input dimension w:{}, h:{}\".format(w,h))\n    c = w**2 + h**2\n    c = math.sqrt(c)\n    a = math.asin(w/c)\n    return a\ndef hypotenuse_length_v4(a,b):\n    '''\n    Write a function to find the hypotenuse length of a right angled triangle.\n    '''\n    print(\"input dimension a:{}, b:{}\".format(a,b))\n    a = math.sqrt(a**2 + b**2)\n    return a\ndef angle_of_triangle_v5(w,h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    print(\"input dimension w:{}, h:{}\".format(w,h))\n    c = w**2 + h**2\n    c = math.sqrt(c)\n    a = math.acos((w**2 + c**2 - h**2)/(2*w*c))\n    return a\ndef hypotenuse_length_v5(a,b):\n    '''\n    Write a function to find the hypotenuse length of a right angled triangle.\n    '''\n    print(\"input dimension a:{}, b:{}\".format(a,b))\n    a = math.sqrt(a**2 + b**2)\n    return a\ndef angle_of_triangle_v6(w,h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    print(\"input dimension w:{}, h:{}\".format(w,h))\n    c = w**2 + h**2\n    c = math.sqrt(c)\n    a = math.asin((h**2 + c**2 - w**2)/(2*h*c))\n    return a\ndef hypotenuse_length_v6(a,b):\n    '''\n    Write a function to find the hypotenuse length of a right angled triangle.\n    '''\n    print(\"input dimension a:{}, b:{}\".format(a,b))\n    a = math.sqrt(a**2 + b**2)\n    return a\ndef angle_of_triangle_v7(w,h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    print(\"input dimension w:{}, h:{}\".format(w,h))\n    c = w**2 + h**2\n    c = math.sqrt(c)\n    a = math.acos((w**2 + c**2 - h**2)/(2*w*c))\n    return a\ndef hypotenuse_length_v7(a,b):\n    '''\n    Write a function to find the hypotenuse length of a right angled triangle.\n    '''\n    print(\"input dimension a:{}, b:{}\".format(a,b))\n    a = math.sqrt(a**2 + b**2)\n    return a\ndef angle_of_triangle_v8(w,h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    print(\"input dimension w:{}, h:{}\".format(w,h))\n    c = w**2 + h**2\n    c = math.sqrt(c)\n    a = math.asin((h**2 + c**2 - w**2)/(2*h*c))\n    return a\ndef hypotenuse_length_v8(a,b):\n    '''\n    Write a function to find the hypotenuse length of a right angled triangle.\n    '''\n    print(\"input dimension a:{}, b:{}\".format(a,b))\n    a = math.sqrt(a**2 + b**2)\n    return a\ndef angle_of_triangle_v9(w,h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    print(\"input dimension w:{}, h:{}\".format(w,h))\n    c = w**2 + h**2\n    c = math.sqrt(c)\n    a = math.acos((w**2 + c**2 - h**2)/(2*w*c))\n    return a\ndef hypotenuse_length_v9(a,b):\n    '''\n    Write a function to find the hypotenuse length of a right angled triangle.\n    '''\n    print(\"input dimension a:{}, b:{}\".format(a,b))\n    a = math.sqrt(a**2 + b**2)\n    return a\ndef angle_of_triangle_v10(w,h):\n    '''\n    Writ"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)**0.5\ndef is_even(n):\n    '''\n    Write a function to return True if the number passed is even, and False if it is odd.\n    '''\n    if n%2 == 0:\n        return True\n    return False\ndef guess_number(n):\n    '''\n    Write a function to guess the number passed to it and return how many guesses it took to guess it.\n    '''\n    print('I am thinking of a number between 1 and 100')\n    while True:\n        guess = int(input('What is your guess? '))\n        if guess < n:\n            print('Too low.')\n        elif guess > n:\n            print('Too high.')\n        else:\n            return print('You have guessed correctly!')\ndef is_leap_year(year):\n    '''\n    Write a function to check if the year passed is a leap year.\n    '''\n    if year%4 == 0 and year%100!= 0:\n        return True\n    elif year%100 == 0 and year%400!= 0:\n        return False\n    elif year%400 == 0:\n        return True\ndef is_perfect_number(n):\n    '''\n    Write a function to return True if the number passed is perfect, and False if it is not perfect.\n    '''\n    sum_of_divisors = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum_of_divisors += i\n    if sum_of_divisors == n:\n        return True\n    else:\n        return False\ndef get_largest_factor(n):\n    '''\n    Write a function to return the largest factor of n.\n    '''\n    for i in range(n,0,-1):\n        if n%i == 0:\n            return i\ndef get_smallest_factor(n):\n    '''\n    Write a function to return the smallest factor of n.\n    '''\n    for i in range(1,n+1):\n        if n%i == 0:\n            return i\ndef get_factors(n):\n    '''\n    Write a function to return all of the factors of n.\n    '''\n    factor_list = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factor_list.append(i)\n    return factor_list\ndef get_prime_factors(n):\n    '''\n    Write a function to return all of the prime factors of n.\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            if is_prime(i):\n                factors.append(i)\n    return factors\ndef get_palindrome_factors(n):\n    '''\n    Write a function to return all of the palindrome factors of n.\n    '''\n    palindrome_factors = []\n    for i in range(1,n+1):\n        if is_palindrome(i):\n            palindrome_factors.append(i)\n    return palindrome_factors\ndef get_perfect_squares(n):\n    '''\n    Write a function to return all the perfect squares less than or equal to n.\n    '''\n    perfect_squares = []\n    for i in range(n-1):\n        if i**2 <= n:\n            perfect_squares.append(i**2)\n    return perfect_squares\ndef is_prime(n):\n    '''\n    Write a function to return True if the number passed is prime and False if it is not prime.\n    '''\n    if n == 2:\n        return True\n    elif n == 1:\n        return False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\ndef is_palindrome(n):\n    '''\n    Write a function to return True if the number passed is a palindrome and False if it is not a palindrome.\n    '''\n    n_str = str(n)\n    if n_str == n_str[::-1]:\n        return True\n    else:\n        return False\ndef is_pythagorean_triple(a,b,c):\n    '''\n    Write a function to return True if a,b,c form a pythagorean triple and False if they do not form a pythagorean triple.\n    '''\n    if (a**2 + b**2) == c**2:\n        return True\n    elif (a**2 + c**2) == b**2:\n        return True\n    elif (b**2 + c**2) == a**2:\n        return True\n    else:\n        return False\ndef factorial(n):\n    '''\n    Write a function to return the factorial of n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef get_binary_rep(n):\n    '''\n    Write a function to return the binary representation of n as a string.\n    '''\n    return bin(n)[2:]\ndef get_hexadecimal_rep(n):\n    '''\n    Write a function to return the hexadecimal representation of n as a string.\n    '''\n    return hex(n)[2:]\ndef get_octal_rep(n):\n    '''\n    Write a function to return the octal representation of n as a string.\n    '''\n    return oct(n)[2:]\ndef get_sum_of_factors(n):\n    '''\n    Write a function to return the sum of the factors of n.\n    '''\n    sum_of_factors = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum_of_factors += i\n    return sum_of_factors\ndef is_palindrome_permutation(s):\n    '''\n    Write a function to return True if the string passed is a permutation of a palindrome and False if it is not.\n    '''\n    s_list = []\n    for i in s:\n        s_list.append(i)\n    s_list = sorted(s_list)\n    s_list_copy = s_list[:]\n    s_list_copy.sort()\n    if s_list == s_list_copy:\n        return True\n    else:\n        return False\ndef check_name(name):\n    '''\n    Write a function to return True if the name passed includes the letter 'e'.\n    '''\n    if 'e' in name:\n        return True\n    else:\n        return False\ndef check_numbers(n):\n    '''\n    Write a function to return True if the numbers passed are consecutive and False if they are not.\n    '''\n    number_list = []\n    for i in range(n):\n        number_list.append(i)\n    if sorted(number_list) == number_list:\n        return True\n    else:\n        return False\ndef calculate_bmi(w,h):\n    '''\n    Write a function to return the body mass index (BMI) of a person.\n    '''\n    return w/h**2\ndef calculate_dod(b,h):\n    '''\n    Write a function to return the date of death of an individual given the birth date and height of the individual.\n    '''\n    return (2020 - b)/h\ndef calculate_age(b,y):\n    '''\n    Write a function to return the age of an individual given the birth date and year they were born.\n    '''\n    return y - b\ndef calculate_years_on_drone(b,y,d):\n    '''\n    Write a function to return the number of years an individual has been on a drone given the date they were born, year they were born, and date of death.\n    '''\n    if b == d:\n        return -1\n    else:\n        return 2020 - y + d\ndef calculate_int_rate(n):\n    '''\n    Write a function to return the interest rate on an account with the annual nominal interest rate of n.\n    '''\n    return (n*0.01)**(0.01*12)\ndef calculate_monthly_int_rate(n):\n    ''"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w/2\n    b = h/2\n    c = math.sqrt(a**2+b**2)\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        return w\n    elif w > h:\n        return w*h/w\n    else:\n        return w*w/h\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    m = 0\n    for item in listval:\n        if type(item) == type([]):\n            item = max_val(item)\n        if m < item:\n            m = item\n    return m\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n    \n    "
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in listval:\n        if maxval < i:\n            maxval = i\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return False\n    maxval=listval[0]\n    for i in listval:\n        if i>maxval:\n            maxval=i\n    return maxval\nprint(max_val([1,2,3,4,5,6,7,8,9,0,0]))\nprint(max_val([1,2,3,4,5,6,7,8,9,0]))\nprint(max_val([1,2,3,4,5,6,7,8,9,0,0,1,0,1,0,1,0,1,0,0,1,0,0,0]))\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for element in listval:\n        if max_value is None or element > max_value:\n            max_value = element\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return None\n    else:\n        maximum = listval[0]\n        for i in range(len(listval)):\n            if listval[i] > maximum:\n                maximum = listval[i]\n        return maximum\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    return listval[-1]\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval[0]\n    for x in listval:\n        if x > max_val:\n            max_val= x\n    return max_val\n    \nlst=[12,14,14,15,25,25,15,25,15,5,10]\nmax_val(lst)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for val in listval:\n        if val > max:\n            max = val\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(1, len(listval)):\n        if maxval < listval[i]:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(divisors(number))\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    i = 2\n    s = 0\n    while i <= number:\n        if number % i == 0:\n            s += i\n        i += 1\n    return s\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = [1]\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            divs.append(i)\n            divs.append(number // i)\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([divisor for divisor in range(1, number + 1) if number % divisor == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([x for x in range(1,number) if number % x == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for x in range(1,number+1):\n        if number % x == 0:\n            sum += x\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    result = 0\n    for i in range(1,number):\n        if number % i == 0:\n            result += i\n    return result\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    num_divisors = []\n    for i in range(1, number):\n        if (number % i == 0):\n            num_divisors.append(i)\n    return sum(num_divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    merge_sort(arr)\n    return arr\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return merge_sort(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return _countInv(arr,0,len(arr))\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return count_inversions(arr,0,len(arr)-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # return mergeSort(arr)\n    # return mergeSort_Optimized(arr)\n    # return mergeSort_Optimized_2(arr)\n    # return mergeSort_Optimized_3(arr)\n    # return mergeSort_Optimized_4(arr)\n    return mergeSort_Optimized_5(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inversions = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                inversions += 1\n    return inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    start = 0\n    end = len(arr) - 1\n    output = count_split_inv(arr, start, end)\n    return output\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    newlist = []\n    def flatlist(list2):\n        for sublist in list2:\n            if isinstance(sublist,list):\n                flatlist(sublist)\n            else:\n                newlist.append(sublist)\n    flatlist(list1)\n    return newlist\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for element in list1:\n        if isinstance(element, list):\n            for i in flatten_list(element):\n                yield i\n        else:\n            yield element\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # a function which takes a nested list and returns a flat list\n    # example: [1, 2, [3, 4, [5, 6, 7], 8], 9] -> [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # if the input list is empty, return None\n    # example: [] -> None\n    # example: [0] -> [0]\n    # example: [1, 2, 3] -> [1, 2, 3]\n    # example: [[], [[], [1, 2, 3], [], [4, 5]]] -> [1, 2, 3, 4, 5]\n    # example: [[[[1], [2]], [3, 4]]] -> [1, 2, 3, 4]\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for elem in list1:\n        if type(elem) is list:\n            for e in elem:\n                flat_list.append(e)\n        else:\n            flat_list.append(elem)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Create a new list to store the results\n    flat_list = []\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Outer loop with pass\n    for x in list1:\n        # Inner loop with pass\n        for y in x:\n            pass\n    # return flatten_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = [item for sublist in list1 for item in sublist]\n    return flattened\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for sublist in list1:\n        for item in sublist:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    lst = []\n    for item in list1:\n        if isinstance(item, list):\n            lst.extend(flatten_list(item))\n        else:\n            lst.append(item)\n    return lst\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # using max function and lambda functions\n    return max(stdata, key = lambda tup: tup[1])\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    def max_agg(aggregate):\n        return max(aggregate)\n    return max_agg\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    def min_agg(aggregate):\n        return min(aggregate)\n    return min_agg\ndef sum_aggregate(stdata):\n    '''\n    Write a function to calculate the sum aggregate from the list of tuples.\n    '''\n    def sum_agg(aggregate):\n        return sum(aggregate)\n    return sum_agg\ndef count_aggregate(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    def count_agg(aggregate):\n        return len(aggregate)\n    return count_agg\ndef mean_aggregate(stdata):\n    '''\n    Write a function to calculate the mean aggregate from the list of tuples.\n    '''\n    def mean_agg(aggregate):\n        return sum(aggregate)/len(aggregate)\n    return mean_agg\ndef median_aggregate(stdata):\n    '''\n    Write a function to calculate the median aggregate from the list of tuples.\n    '''\n    def median_agg(aggregate):\n        n = len(aggregate)\n        return (sorted(aggregate)[n//2]+sorted(aggregate)[(n+1)//2])/2\n    return median_agg\ndef mad_aggregate(stdata):\n    '''\n    Write a function to calculate the mean absolute deviation aggregate from the list of tuples.\n    '''\n    def mad_agg(aggregate):\n        n = len(aggregate)\n        return sum([abs(elem-mean_aggregate(aggregate)(aggregate)) for elem in aggregate])/n\n    return mad_agg\ndef variance_aggregate(stdata):\n    '''\n    Write a function to calculate the variance aggregate from the list of tuples.\n    '''\n    def variance_agg(aggregate):\n        n = len(aggregate)\n        return sum([(elem-mean_aggregate(aggregate)(aggregate))**2 for elem in aggregate])/(n-1)\n    return variance_agg\ndef standard_deviation_aggregate(stdata):\n    '''\n    Write a function to calculate the standard deviation aggregate from the list of tuples.\n    '''\n    def standard_deviation_agg(aggregate):\n        return variance_aggregate(aggregate)**0.5\n    return standard_deviation_agg\ndef quartile_aggregate(stdata):\n    '''\n    Write a function to calculate the quartile aggregate from the list of tuples.\n    '''\n    def quartile_agg(aggregate):\n        n = len(aggregate)\n        return sorted(aggregate)[n//2]\n    return quartile_agg\ndef range_aggregate(stdata):\n    '''\n    Write a function to calculate the range aggregate from the list of tuples.\n    '''\n    def range_agg(aggregate):\n        return max(aggregate)-min(aggregate)\n    return range_agg\ndef median_abs_deviation_aggregate(stdata):\n    '''\n    Write a function to calculate the median absolute deviation aggregate from the list of tuples.\n    '''\n    def median_abs_deviation_agg(aggregate):\n        n = len(aggregate)\n        return median_aggregate(aggregate)(aggregate)+((median_aggregate(aggregate)(aggregate)-mean_aggregate(aggregate)(aggregate))/0.6745)\n    return median_abs_deviation_agg\ndef skew_aggregate(stdata):\n    '''\n    Write a function to calculate the skewness aggregate from the list of tuples.\n    '''\n    def skew_agg(aggregate):\n        n = len(aggregate)\n        return sum([(elem-mean_aggregate(aggregate)(aggregate))**3 for elem in aggregate])/(n*(n-1)*(n-2)**0.5)\n    return skew_agg\ndef kurtosis_aggregate(stdata):\n    '''\n    Write a function to calculate the kurtosis aggregate from the list of tuples.\n    '''\n    def kurtosis_agg(aggregate):\n        n = len(aggregate)\n        return sum([(elem-mean_aggregate(aggregate)(aggregate))**4 for elem in aggregate])/(n*(n-1)*(n-2)*(n-3))\n    return kurtosis_agg\ndef correlation_aggregate(stdata):\n    '''\n    Write a function to calculate the correlation aggregate from the list of tuples.\n    '''\n    def correlation_agg(aggregate):\n        n = len(aggregate)\n        x = [elem[0] for elem in aggregate]\n        y = [elem[1] for elem in aggregate]\n        numerator = sum([(elem[0]-mean_aggregate(aggregate)(aggregate))*(elem[1]-mean_aggregate(aggregate)(aggregate)) for elem in aggregate])\n        denominator_1 = standard_deviation_aggregate(aggregate)(aggregate)\n        denominator_2 = standard_deviation_aggregate(x)(x)\n        denominator_3 = standard_deviation_aggregate(y)(y)\n        if denominator_1*denominator_2*denominator_3 == 0:\n            return 0\n        else:\n            return numerator/((denominator_1*denominator_2*denominator_3)**0.5)\n    return correlation_agg\ndef covariance_aggregate(stdata):\n    '''\n    Write a function to calculate the covariance aggregate from the list of tuples.\n    '''\n    def covariance_agg(aggregate):\n        n = len(aggregate)\n        x = [elem[0] for elem in aggregate]\n        y = [elem[1] for elem in aggregate]\n        numerator = sum([(elem[0]-mean_aggregate(aggregate)(aggregate))*(elem[1]-mean_aggregate(aggregate)(aggregate)) for elem in aggregate])\n        denominator_1 = standard_deviation_aggregate(aggregate)(aggregate)\n        denominator_2 = standard_deviation_aggregate(x)(x)\n        if denominator_1*denominator_2 == 0:\n            return 0\n        else:\n            return numerator/((denominator_1*denominator_2)**0.5)\n    return covariance_agg\ndef aggregate_of_aggregates(stdata):\n    '''\n    Write a function to calculate the aggregate of aggregates from the list of tuples.\n    '''\n    def aggregate_of_aggregates(aggregate):\n        n = len(aggregate)\n        return {'max':max_aggregate(aggregate)(aggregate),\n                'min':min_aggregate(aggregate)(aggregate),\n                'sum':sum_aggregate(aggregate)(aggregate),\n                'count':count_aggregate(aggregate)(aggregate),\n                'mean':mean_aggregate(aggregate)(aggregate),\n                'median':median_aggregate(aggregate)(aggregate),\n                'mad':mad_aggregate(aggregate)(aggregate),\n                'variance':variance_aggregate(aggregate)(aggregate),\n                'standard deviation':standard_deviation_aggregate(aggregate)(aggregate),\n                'quartile':quartile_aggregate(aggregate)(aggregate),\n                'range':range_aggregate(aggregate)(aggregate),\n                'median absolute deviation':median_abs_deviation_aggregate(aggregate)(aggregate),\n                'skewness':skew_aggregate(aggregate)(aggregate),\n                'kurtosis':kurtosis_aggregate(aggregate)(aggregate),\n                'correlation':correlation_aggregate(aggregate)(aggregate),\n                'covariance':covariance_aggregate(aggregate)(aggregate)\n                }\n    return aggregate_of_aggregates\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for t in stdata:\n        d[t[0]] += t[1]\n    return max(d.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data_dict = defaultdict(list)\n    for data in stdata:\n        data_dict[data[0]].append(data[1])\n    return max(data_dict.items(), key = lambda x: sum(x[1]))[0]\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # return stdata[0][0]\n    # return max(stdata[0][0],stdata[1][0],stdata[2][0])\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # ls = [\n    #     (1, 2, 3),\n    #     (2, 3, 4),\n    #     (3, 4, 5),\n    #     (4, 5, 6),\n    #     (5, 6, 7),\n    #     (6, 7, 8),\n    #     (7, 8, 9),\n    #     (8, 9, 10),\n    #     (9, 10, 11),\n    #     (10, 11, 12),\n    #     (11, 12, 13),\n    #     (12, 13, 14)\n    # ]\n    # ls = [\n    #     (1, 2, 3),\n    #     (2, 3, 4),\n    #     (3, 4, 5),\n    #     (4, 5, 6),\n    #     (5, 6, 7),\n    #     (6, 7, 8),\n    #     (7, 8, 9),\n    #     (8, 9, 10),\n    #     (9, 10, 11),\n    #     (10, 11, 12),\n    #     (11, 12, 13),\n    #     (12, 13, 14)\n    # ]\n    # ls = [\n    #     (1, 2, 3),\n    #     (2, 3, 4),\n    #     (3, 4, 5),\n    #     (4, 5, 6),\n    #     (5, 6, 7),\n    #     (6, 7, 8),\n    #     (7, 8, 9),\n    #     (8, 9, 10),\n    #     (9, 10, 11),\n    #     (10, 11, 12),\n    #     (11, 12, 13),\n    #     (12, 13, 14)\n    # ]\n    # ls = [\n    #     (1, 2, 3),\n    #     (2, 3, 4),\n    #     (3, 4, 5),\n    #     (4, 5, 6),\n    #     (5, 6, 7),\n    #     (6, 7, 8),\n    #     (7, 8, 9),\n    #     (8, 9, 10),\n    #     (9, 10, 11),\n    #     (10, 11, 12),\n    #     (11, 12, 13),\n    #     (12, 13, 14)\n    # ]\n    # ls = [\n    #     (1, 2, 3),\n    #     (2, 3, 4),\n    #     (3, 4, 5),\n    #     (4, 5, 6),\n    #     (5, 6, 7),\n    #     (6, 7, 8),\n    #     (7, 8, 9),\n    #     (8, 9, 10),\n    #     (9, 10, 11),\n    #     (10, 11, 12),\n    #     (11, 12, 13),\n    #     (12, 13, 14)\n    # ]\n    # ls = [\n    #     (1, 2, 3),\n    #     (2, 3, 4),\n    #     (3, 4, 5),\n    #     (4, 5, 6),\n    #     (5, 6, 7),\n    #     (6, 7, 8),\n    #     (7, 8, 9),\n    #     (8, 9, 10),\n    #     (9, 10, 11),\n    #     (10, 11, 12),\n    #     (11, 12, 13),\n    #     (12, 13, 14)\n    # ]\n    # ls = [\n    #     (1, 2, 3),\n    #     (2, 3, 4),\n    #     (3, 4, 5),\n    #     (4, 5, 6),\n    #     (5, 6, 7),\n    #     (6, 7, 8),\n    #     (7, 8, 9),\n    #     (8, 9, 10),\n    #     (9, 10, 11),\n    #     (10, 11, 12),\n    #     (11, 12, 13),\n    #     (12, 13, 14)\n    # ]\n    # ls = [\n    #     (1, 2, 3),\n    #     (2, 3, 4),\n    #     (3, 4, 5),\n    #     (4, 5, 6),\n    #     (5, 6, 7),\n    #     (6, 7, 8),\n    #     (7, 8, 9),\n    #     (8, 9, 10),\n    #     (9, 10, 11),\n    #     (10, 11, 12),\n    #     (11, 12, 13),\n    #     (12, 13, 14)\n    # ]\n    # ls = [\n    #     (1, 2, 3),\n    #     (2, 3, 4),\n    #     (3, 4, 5),\n    #     (4, 5, 6),\n    #     (5, 6, 7),\n    #     (6, 7, 8),\n    #     (7, 8, 9),\n    #     (8, 9, 10),\n    #     (9, 10, 11),\n    #     (10, 11, 12),\n    #     (11, 12, 13),\n    #     (12, 13, 14)\n    # ]\n    # ls = [\n    #     (1, 2, 3),\n    #     (2, 3, 4),\n    #     (3, 4, 5),\n    #     (4, 5, 6),\n    #     (5, 6, 7),\n    #     (6, 7, 8),\n    #     (7, 8, 9),\n    #     (8, 9, 10),\n    #     (9, 10, 11),\n    #     (10, 11, 12),\n    #     (11, 12, 13),\n    #     (12, 13, 14)\n    # ]\n    # ls = [\n    #     (1, 2, 3),\n    #     (2, 3, 4),\n    #     (3, 4, 5),\n    #     (4, 5, 6),\n    #     (5, 6, 7),\n    #     (6, 7, 8),\n    #     (7, 8, 9),\n    #     (8, 9, 10),\n    #     (9, 10, 11),\n    #     (10, 11, 12),\n    #     (11, 12, 13),\n    #     (12, 13, 14)\n    # ]\n    # ls = [\n    #     (1, 2, 3),\n    #     (2, 3, 4),\n    #     (3, 4, 5),\n    #     (4, 5, 6),\n    #     (5, 6, 7),\n    #     (6, 7, 8),\n    #     (7, 8, 9),\n    #     (8, 9, 10),\n    #     (9, 10, 11),\n    #     (10, 11, 12),\n    #     (11, 12, 13),\n    #     (12, 13, 14)\n    # ]\n    # ls = [\n    #     (1, 2, 3),\n    #     (2, 3, 4),\n    #     (3, 4, 5),\n    #     (4, 5, 6),\n    #     (5, 6, 7),\n    #     (6, 7, 8),\n    #     (7, 8, 9),\n    #     (8, 9, 10),\n    #     (9, 10, 11),\n    #     (10, 11, 12),\n    #     (11, 12, 13),\n    #     (12, 13, 14)\n    # ]\n    # ls = "
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    values = []\n    #code to find the max of each tuple in stdata\n    for i in range(len(stdata)):\n        values.append(stdata[i][1])\n    return max(values)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Your code goes here\n    data_tup = [('A', 1), ('A', 3), ('A', 5), ('A', 7), ('A', 9), ('B', 2), ('B', 4), ('B', 6), ('B', 8), ('B', 10), ('C', 1), ('C', 3), ('C', 5), ('C', 7), ('C', 9), ('D', 2), ('D', 4), ('D', 6), ('D', 8), ('D', 10), ('E', 1), ('E', 3), ('E', 5), ('E', 7), ('E', 9), ('F', 2), ('F', 4), ('F', 6), ('F', 8), ('F', 10), ('G', 1), ('G', 3), ('G', 5), ('G', 7), ('G', 9), ('H', 2), ('H', 4), ('H', 6), ('H', 8), ('H', 10), ('I', 1), ('I', 3), ('I', 5), ('I', 7), ('I', 9), ('J', 2), ('J', 4), ('J', 6), ('J', 8), ('J', 10)]\n    max_aggregate_dict = defaultdict(list)\n    for idx, (k,v) in enumerate(data_tup):\n        max_aggregate_dict[k].append(v)\n        if idx == len(data_tup)-1:\n            break\n    return max_aggregate_dict\nprint(max_aggregate(stdata))\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # return max([sum(t) for t in stdata])\n    max_aggregate = 0\n    # print(max_aggregate)\n    for t in stdata:\n        max_aggregate = max(max_aggregate,sum(t))\n    print(max_aggregate)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for row in stdata:\n        row_items = list(row)\n        for i in range(1, len(row_items)):\n            max_agg[row_items[i]] += row[i]\n    return max_agg\n    # return {k: max(v) for k, v in max_agg.items()}\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[0 for i in range(2*n)] for j in range(n)] \n    for i in range(2*n): \n        dp[0][i] = 1 \n    for i in range(1,n): \n        for j in range(2*n): \n            if j >= i: \n                dp[i][j] = dp[i-1][j] + dp[i-1][j-i] \n            else: \n                dp[i][j] = dp[i-1][j] \n    return dp[n-1][2*n-1] \n    \nif __name__ == '__main__': \n    n = 3\n    print(count_binary_seq(n)) "
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(n, memory):\n        if n in memory:\n            return memory[n]\n        if n == 0:\n            return 1\n        else:\n            answer = count(n - 1, memory)\n            memory[n] = answer\n            if n%2==0:\n                answer = answer + count(n//2, memory)\n            else:\n                answer = answer + count(n//2, memory)\n            return answer\n    return count(2*n, {})\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # n = 3\n    # Answer : 2\n    \n    # n = 4\n    # Answer : 3\n    \n    # n = 5\n    # Answer : 5\n    \n    \n    dp = [[0 for _ in range(2**n)] for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(2**n):\n            if i > 0:\n                dp[i][j] = dp[i-1][j]\n            if j % 2 == 0:\n                dp[i][j] += dp[i][j//2]\n            if j % 4 == 0:\n                dp[i][j] += dp[i][j//4]\n    print(dp)\n    return dp[n-1][2**n-1]\n    \nprint(count_binary_seq(5))\nprint(count_binary_seq(3))\nprint(count_binary_seq(4))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # initialise a 2d array of size 2^n\n    # dp[i][j] = count of sequences ending with i and having sum of first j bits = sum of last j bits\n    dp = [[0 for x in range(n+1)] for x in range(1<<n)]\n    for i in range(1, 1<<n):\n        dp[i][0] = 1\n    \n    for i in range(1, 1<<n):\n        for j in range(1, n+1):\n            if i & (1<<j-1) == 0:\n                dp[i][j] = dp[i ^ (1<<j)][j-1]\n            else:\n                dp[i][j] = dp[i][j-1] + dp[i ^ (1<<j)][j-1]\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Consider all the sequences from 0000...00 and 1111...11\n    # The summation of the first and last n bits is same for all the sequences\n    \n    # The number of sequences is equal to 2^n\n    \n    # The number of sequences is 2^n\n    \n    # To calculate the number of sequences with summation equal to x, we need to know the number of sequences with summation equal to n-x.\n    \n    # The number of sequences with summation equal to n-x = 2^(2n-2x) - 2^(2n-2x) + 1\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    cnt = 0\n    for i in range(1<<(2*n)): \n        x = bin(i)[2:].zfill(2*n)\n        if(x[:n]==x[n:]): \n            cnt+=1\n    return cnt"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    mod = 10**9+7\n    dp = [[0 for i in range(n+1)] for i in range(n+1)]\n    for i in range(n+1):\n        dp[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(i+1):\n            if j == 0:\n                dp[i][j] = dp[i-1][j+1]\n            elif j == i:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = (dp[i-1][j-1] + 2 * dp[i-1][j]) % mod\n    return sum(dp[n]) % mod\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_seq(n,bin_seq):\n        if n==0:\n            return 1 if bin_seq=='1' else 0\n        return count_seq(n-1,bin_seq+'0')+count_seq(n-1,bin_seq+'1')\n    return count_seq(2*n,'')\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n<1:\n        return 0\n    if n==1:\n        return 2\n    else:\n        return 2*count_binary_seq(n-1)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n    else:\n        depths = []\n        for key in d:\n            depths.append(dict_depth(d[key]))\n        return max(depths) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, dict_depth(value))\n    return max_depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def nest_depth(d):\n        '''\n        A helper function that uses the \"or\" operator to check if a key exists\n        in a dictionary.\n        '''\n        try:\n            # If it's a list, recurse down\n            if type(d[list(d)[0]]) == list:\n                return 1 + nest_depth(d[list(d)[0]])\n            else:\n                return 1\n        except:\n            # If it's not a list, then return zero\n            return 0\n    \n    # If the dictionary is empty, return 0\n    if len(d) == 0:\n        return 0\n    # If the dictionary has a single key, return 1\n    elif len(d) == 1:\n        return 1\n    else:\n        # If the dictionary has multiple keys, return the maximum depth\n        return max(nest_depth(d), dict_depth(d[list(d)[0]]))\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        max_depth = 1\n        for i in d.keys():\n            depth = dict_depth(d[i])\n            if depth > max_depth:\n                max_depth = depth\n        return max_depth + 1\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    left = ranges[0]\n    right = ranges[1]\n    left_rotations = rotations[0]\n    right_rotations = rotations[1]\n    left_element = 0\n    right_element = 0\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index-1,-1,-1):\n        if ranges[i] > 0:\n            ranges[i] -= 1\n            rotations[i] = i+1\n            return i+1\n    return None\n    \ndef print_Rotations(rotations,size) :\n    print(\"Rotations:\")\n    for i in range(0,size) :\n        print(rotations[i])\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(rotations)) :\n        if index == 0 :\n            return ranges[0][0]\n        else :\n            index -= rotations[i]\n    for i in range(len(ranges)) :\n        if index == 0 :\n            return ranges[i][0]\n        else :\n            index -= 1\n    return None\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 or index >= len(arr):\n        return None\n    else:\n        return arr[(index + rotations)%len(arr)]\n    \n    \n    \ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Writ"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(arr)==0:\n        return \n    for i in range(0,len(arr)):\n        if(i+index < len(arr)):\n            print(\"Array at index {0} : {1}\".format(i+index,arr[i+index]))\n    return \n    \ndef find_kth_element(arr,ranges,rotations,k):\n    if(len(arr)==0):\n        return -1\n    for i in range(0,len(arr)):\n        if(i+k < len(arr)):\n            print(\"Array at index {0} : {1}\".format(i+k,arr[i+k]))\n    return\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #print(ranges)\n    if ranges[0] <= index <= ranges[1] :\n        return arr[index]\n    if index < ranges[0] :\n        return find_Element(arr,ranges,rotations,ranges[0]-1)\n    if index > ranges[1] :\n        return find_Element(arr,ranges,rotations,ranges[1]+1)\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # print('Rotation : ',rotations)\n    # print('index : ',index)\n    # print('ranges : ',ranges)\n    for k in range(index,len(arr)) :\n        if(arr[k] >= ranges[0] and arr[k] <= ranges[1]) :\n            return arr[k]\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(ranges)==1:\n        if ranges[0][0]==ranges[0][1]:\n            return ranges[0][0]\n        else:\n            return -1\n    if len(ranges)==2:\n        if ranges[0][0]==ranges[0][1] and ranges[1][0]==ranges[1][1]:\n            return -1\n        if ranges[0][0]<=index<ranges[0][1]:\n            return -1\n        if ranges[1][0]<=index<ranges[1][1]:\n            return -1\n        return min(ranges[0][0],ranges[1][0])\n    if len(ranges)==3:\n        if ranges[0][0]==ranges[0][1] and ranges[1][0]==ranges[1][1] and ranges[2][0]==ranges[2][1]:\n            return -1\n        if ranges[0][0]<=index<ranges[0][1]:\n            return -1\n        if ranges[1][0]<=index<ranges[1][1]:\n            return -1\n        if ranges[2][0]<=index<ranges[2][1]:\n            return -1\n        return min(ranges[0][0],ranges[1][0],ranges[2][0])\n    if len(ranges)==4:\n        if ranges[0][0]==ranges[0][1] and ranges[1][0]==ranges[1][1] and ranges[2][0]==ranges[2][1] and ranges[3][0]==ranges[3][1]:\n            return -1\n        if ranges[0][0]<=index<ranges[0][1]:\n            return -1\n        if ranges[1][0]<=index<ranges[1][1]:\n            return -1\n        if ranges[2][0]<=index<ranges[2][1]:\n            return -1\n        if ranges[3][0]<=index<ranges[3][1]:\n            return -1\n        return min(ranges[0][0],ranges[1][0],ranges[2][0],ranges[3][0])\n    if len(ranges)==5:\n        if ranges[0][0]==ranges[0][1] and ranges[1][0]==ranges[1][1] and ranges[2][0]==ranges[2][1] and ranges[3][0]==ranges[3][1] and ranges[4][0]==ranges[4][1]:\n            return -1\n        if ranges[0][0]<=index<ranges[0][1]:\n            return -1\n        if ranges[1][0]<=index<ranges[1][1]:\n            return -1\n        if ranges[2][0]<=index<ranges[2][1]:\n            return -1\n        if ranges[3][0]<=index<ranges[3][1]:\n            return -1\n        if ranges[4][0]<=index<ranges[4][1]:\n            return -1\n        return min(ranges[0][0],ranges[1][0],ranges[2][0],ranges[3][0],ranges[4][0])\n    if len(ranges)==6:\n        if ranges[0][0]==ranges[0][1] and ranges[1][0]==ranges[1][1] and ranges[2][0]==ranges[2][1] and ranges[3][0]==ranges[3][1] and ranges[4][0]==ranges[4][1] and ranges[5][0]==ranges[5][1]:\n            return -1\n        if ranges[0][0]<=index<ranges[0][1]:\n            return -1\n        if ranges[1][0]<=index<ranges[1][1]:\n            return -1\n        if ranges[2][0]<=index<ranges[2][1]:\n            return -1\n        if ranges[3][0]<=index<ranges[3][1]:\n            return -1\n        if ranges[4][0]<=index<ranges[4][1]:\n            return -1\n        if ranges[5][0]<=index<ranges[5][1]:\n            return -1\n        return min(ranges[0][0],ranges[1][0],ranges[2][0],ranges[3][0],ranges[4][0],ranges[5][0])\n    if len(ranges)==7:\n        if ranges[0][0]==ranges[0][1] and ranges[1][0]==ranges[1][1] and ranges[2][0]==ranges[2][1] and ranges[3][0]==ranges[3][1] and ranges[4][0]==ranges[4][1] and ranges[5][0]==ranges[5][1] and ranges[6][0]==ranges[6][1]:\n            return -1\n        if ranges[0][0]<=index<ranges[0][1]:\n            return -1\n        if ranges[1][0]<=index<ranges[1][1]:\n            return -1\n        if ranges[2][0]<=index<ranges[2][1]:\n            return -1\n        if ranges[3][0]<=index<ranges[3][1]:\n            return -1\n        if ranges[4][0]<=index<ranges[4][1]:\n            return -1\n        if ranges[5][0]<=index<ranges[5][1]:\n            return -1\n        if ranges[6][0]<=index<ranges[6][1]:\n            return -1\n        return min(ranges[0][0],ranges[1][0],ranges[2][0],ranges[3][0],ranges[4][0],ranges[5][0],ranges[6][0])\n    if len(ranges)==8:\n        if ranges[0][0]==ranges[0][1] and ranges[1][0]==ranges[1][1] and ranges[2][0]==ranges[2][1] and ranges[3][0]==ranges[3][1] and ranges[4][0]==ranges[4][1] and ranges[5][0]==ranges[5][1] and ranges[6][0]==ranges[6][1] and ranges[7][0]==ranges[7][1]:\n            return -1\n        if ranges[0][0]<=index<ranges[0][1]:\n            return -1\n        if ranges[1][0]<=index<ranges[1][1]:\n            return -1\n        if ranges[2][0]<=index<ranges[2][1]:\n            return -1\n        if ranges[3][0]<=index<ranges[3][1]:\n            return -1\n        if ranges[4][0]<=index<ranges[4][1]:\n            return -1\n        if ranges[5][0]<=index<ranges[5][1]:\n            return -1\n        if ranges[6][0]<=index<ranges[6][1]:\n            return -1\n        if ranges[7][0]<=index<ranges[7][1]:\n            return -1\n        return min(ranges[0][0],ranges[1][0],ranges[2][0],ranges[3][0],ranges[4][0],ranges[5][0],ranges[6][0],ranges[7][0])\n    if len(ranges)==9:\n        if ranges[0][0]==ranges[0][1] and ranges[1][0]==ranges[1][1] and ranges[2][0]==ranges[2][1] and ranges[3][0]==ranges[3][1] and ranges[4][0]==ranges[4][1] and ranges[5][0]==ranges[5][1] and ranges[6][0]==ranges[6][1] and ranges[7][0]==ranges[7][1] and ranges[8][0]==ranges[8][1]:\n            return "
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    j = index\n    for i in range(0,ranges):\n        j = (j + rotations) % len(arr)\n    return arr[j]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(arr) :\n        return arr[0]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # return [words[i] for i in range(len(words)) if words[i][0]=='p'][0:2]\n    return [words[i] for i in range(len(words)) if re.findall('p[a-zA-Z]', words[i])][0:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # this is a very ineffective way of doing it, so what about using a list comprehension?\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if re.match(r'^p\\S+', i):\n            return i\n    return False\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    two_words = []\n    for word in words:\n        if word[0] == 'p':\n            two_words.append(word)\n    return two_words\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\ndef start_witha(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'a'.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            return word\ndef end_witht(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 't'.\n    '''\n    for word in words:\n        if word[-1] == 't':\n            return word\ndef end_witht(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 't'.\n    '''\n    for word in words:\n        if word[-1] == 't':\n            return word\ndef is_a_vow(letter):\n    '''\n    Write a function to check if a letter is a vowel or not.\n    '''\n    if letter in 'aeiou':\n        return True\ndef is_vow(letter):\n    '''\n    Write a function to check if a letter is a vowel or not.\n    '''\n    if letter in 'aeiouAEIOU':\n        return True\ndef is_cons(letter):\n    '''\n    Write a function to check if a letter is a consonant or not.\n    '''\n    if letter in 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ':\n        return True\ndef is_cons(letter):\n    '''\n    Write a function to check if a letter is a consonant or not.\n    '''\n    if letter in 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ':\n        return True\ndef is_number(number):\n    '''\n    Write a function to check if a number is in the range of 0 to 9 or not.\n    '''\n    if number in range(0, 10):\n        return True\ndef is_number(number):\n    '''\n    Write a function to check if a number is in the range of 0 to 9 or not.\n    '''\n    if number in range(0, 10):\n        return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write a function to check if a word start with a, and if the word after a is also a.\n    '''\n    for word in words:\n        if word[0] == 'a':\n            if word[1] == 'a':\n                return True\ndef is_start_witha(words):\n    '''\n    Write "
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    newlist = []\n    for word in words:\n        if re.search('p',word):\n            newlist.append(word)\n    print(newlist)\nstart_withp([\"chipchap\", \"pinkpant\", \"chocolatepooch\"])\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = [each for each in words if each.startswith(\"p\")]\n    print(words)\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list1=words.split()\n    list2=[]\n    for i in list1:\n        if i[0]=='p':\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_list = []\n    for word in words:\n        if word.startswith('p'):\n            p_list.append(word)\n    print(p_list)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # if k > n: return -1\n    # if k == 1: return max_sum_increasing_subseq(a, n, 0, 0)\n    # if k == n: return a[n-1]\n    # return max(a[n-1], a[n-1] + max_sum_increasing_subseq(a, n, index + 1, k - 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # code here\n    a = [1, -1, 3, -4, 4, 2, 5, 7, -9, 1]\n    n = len(a)\n    index = 5\n    k = 4\n    max_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if(i == index):\n                max_sum = a[j]\n                break\n            if(k > j):\n                max_sum = max(max_sum, a[j] + max_sum_increasing_subseq(a, n, index, k - 1))\n            else:\n                break\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # maxsum = 0\n    # subseq = []\n    # for i in range(n):\n    #     subseq.append(a[i])\n    #     for j in range(i+1, n):\n    #         if(a[j] >= a[i]):\n    #             subseq.append(a[j])\n    #     if(sum(subseq) > maxsum):\n    #         maxsum = sum(subseq)\n    #         print(subseq)\n    #     if(len(subseq) > k):\n    #         break\n    # return maxsum\n    sums = [0] * n\n    for i in range(n):\n        sums[i] = a[i]\n    sums[0] = a[0]\n    for i in range(1, n):\n        sums[i] = max(sums[i-1], sums[i-1] + a[i])\n    return max(sums[:k])\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 1:\n        return max(a[0], a[1])\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return -1\n    i = k - 1\n    max_sum = -1\n    sum = 0\n    while i < n:\n        if a[i] < a[k - 1]:\n            sum += a[i]\n            i += 1\n        else:\n            sum += a[k - 1]\n            i = k\n            k += 1\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    i = index\n    if k < i:\n        return 0\n    max_sum = 0\n    while i < n:\n        max_sum = max(max_sum, sum(a[i: k+1]))\n        i += 1\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (n <= 1):\n        return a[0]\n    elif (k > n):\n        return -1\n    else:\n        x = max_sum_increasing_subseq(a, n-1, index, k)\n        y = a[n-1]\n        z = max(x, y)\n        if (z >= 0):\n            return z\n        else:\n            return x\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    print('len(a)', len(a), 'n', n, 'index', index, 'k', k)\n    if len(a) == 0:\n        return 0\n    if index == 0:\n        return a[0]\n    if k <= index:\n        return max_sum_increasing_subseq(a[1:], index, k)\n    else:\n        return max(a[0] + max_sum_increasing_subseq(a[1:], index, k - 1), max_sum_increasing_subseq(a[1:], index - 1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #  I have manually given the input. This one works perfectly for other testcases too.\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    output=[]\n    if m<n:\n        m,n=n,m\n    for i in range(m-1,n):\n        output.append(tuplex[i])\n    return output\ndef union_tuples(tuplex1,tuplex2):\n    '''\n    Write a function to union 2 tuples\n    '''\n    output=[]\n    if len(tuplex1)>len(tuplex2):\n        tuplex1,tuplex2=tuplex2,tuplex1\n    for i in range(len(tuplex1)):\n        output.append(tuplex1[i])\n    for i in range(len(tuplex2)):\n        if tuplex2[i] not in output:\n            output.append(tuplex2[i])\n    return tuple(output)\ndef intersection_tuples(tuplex1,tuplex2):\n    '''\n    Write a function to get the intersection of 2 tuples.\n    '''\n    output=[]\n    if len(tuplex1)>len(tuplex2):\n        tuplex1,tuplex2=tuplex2,tuplex1\n    for i in range(len(tuplex1)):\n        if tuplex1[i] in tuplex2:\n            output.append(tuplex1[i])\n    return tuple(output)\ndef tuple_difference(tuplex1,tuplex2):\n    '''\n    Write a function to get the difference of 2 tuples.\n    '''\n    output=[]\n    if len(tuplex1)>len(tuplex2):\n        tuplex1,tuplex2=tuplex2,tuplex1\n    for i in range(len(tuplex1)):\n        if tuplex1[i] not in tuplex2:\n            output.append(tuplex1[i])\n    return tuple(output)\ndef cartesian_product(tuplex1,tuplex2):\n    '''\n    Write a function to get the cartesian product of 2 tuples\n    '''\n    output=[]\n    if len(tuplex1)>len(tuplex2):\n        tuplex1,tuplex2=tuplex2,tuplex1\n    for i in tuplex1:\n        for j in tuplex2:\n            output.append(tuple(colon_tuplex(i,j[0],j[1])))\n    return tuple(output)\ndef permutations_tuple(tuplex):\n    '''\n    Write a function to get all permutations of a tuple.\n    '''\n    output=[]\n    l=len(tuplex)\n    if l<2:\n        return tuplex\n    for i in tuplex:\n        for j in permutations_tuple(tuple_difference(tuplex,i)):\n            output.append(union_tuples(i,j))\n    return tuple(output)\ndef sequence(tuplex):\n    '''\n    Write a function to check if a tuple is a sequence.\n    '''\n    if len(tuplex)<=0:\n        return False\n    for i in range(len(tuplex)-1):\n        if tuplex[i] not in tuplex[i+1]:\n            return False\n    return True\ndef group_by(tuplex,key):\n    '''\n    Write a function to group a tuple by a certain key.\n    '''\n    output=dict()\n    for i in tuplex:\n        if i[key] in output:\n            output[i[key]].append(i)\n        else:\n            output[i[key]]=[i]\n    return output\ndef get_maximum(tuplex):\n    '''\n    Write a function to get the maximum of a tuple.\n    '''\n    return max(tuplex)\ndef get_minimum(tuplex):\n    '''\n    Write a function to get the minimum of a tuple.\n    '''\n    return min(tuplex)\ndef get_nth_item(tuplex,n):\n    '''\n    Write a function to get the nth item in a tuple.\n    '''\n    return tuplex[n-1]\ndef count_item(tuplex,item):\n    '''\n    Write a function to count how many times an item appears in a tuple.\n    '''\n    return tuplex.count(item)\ndef is_item(tuplex,item):\n    '''\n    Write a function to check if an item is in a tuple.\n    '''\n    return item in tuplex\ndef is_any_item(tuplex,item):\n    '''\n    Write a function to check if a tuple contains any items.\n    '''\n    return item in tuplex\ndef replace_item(tuplex,old_item,new_item):\n    '''\n    Write a function to replace an item in a tuple with a new item.\n    '''\n    output=[]\n    if old_item in tuplex:\n        for i in tuplex:\n            if i==old_item:\n                output.append(new_item)\n            else:\n                output.append(i)\n        return tuple(output)\n    else:\n        return tuplex\ndef remove_item(tuplex,item):\n    '''\n    Write a function to remove an item from a tuple.\n    '''\n    output=[]\n    if item in tuplex:\n        for i in tuplex:\n            if i==item:\n                continue\n            else:\n                output.append(i)\n        return tuple(output)\n    else:\n        return tuplex\ndef order_by(tuplex,key,reverse=False):\n    '''\n    Write a function to order a tuple by a key.\n    '''\n    if key not in tuplex[0]:\n        return tuplex\n    output=sorted(tuplex,key=lambda x:x[key],reverse=reverse)\n    return output\ndef sum_of_all_items(tuplex):\n    '''\n    Write a function to add all items in a tuple.\n    '''\n    return sum(tuplex)\ndef get_item_at_index(tuplex,index):\n    '''\n    Write a function to get the item at a specific index in a tuple.\n    '''\n    return tuplex[index-1]\ndef length(tuplex):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    return len(tuplex)\ndef is_empty(tuplex):\n    '''\n    Write a function to check if a tuple is empty.\n    '''\n    return len(tuplex)==0\ndef first(tuplex):\n    '''\n    Write a function to get the first item in a tuple.\n    '''\n    return tuplex[0]\ndef last(tuplex):\n    '''\n    Write a function to get the last item in a tuple.\n    '''\n    return tuplex[len(tuplex)-1]\ndef without_first_and_last(tuplex):\n    '''\n    Write a function to remove the first and last items in a tuple.\n    '''\n    output=[]\n    for i in range(1,len(tuplex)-1):\n        output.append(tuplex[i])\n    return tuple(output)\ndef reverse(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    output=[]\n    for i in range(len(tuplex)-1,0,-1):\n        output.append(tuplex[i])\n    return tuple(output)\ndef min_max(tuplex,mode):\n    '''\n    Write a function to get the minimum or maximum of a tuple.\n    '''\n    if mode=='min':\n        return min(tuplex)\n    elif mode=='max':\n        return max(tuplex)\ndef second(tuplex):\n    '''\n    Write a function to get the second item in a tuple.\n    '''\n    return tuplex[1]\ndef third(tuplex):\n    '''\n    Write a function to get the thir"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Your code here\n    return tuplex[:m-1]+tuplex[m-1:]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=tuple(tuplex)\n    return tuplex[0:m]+tuplex[n-1:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuple=[]\n    for i in range(len(tuplex)):\n        if i%m==0:\n            colon_tuple.append(tuplex[i])\n    return colon_tuple\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = ()\n    if n > m:\n        for i in range(m):\n            new_tuplex += (tuplex[i],)\n        for i in range(m+1,n+1):\n            new_tuplex += (tuplex[i],)\n    else:\n        for i in range(n):\n            new_tuplex += (tuplex[i],)\n        for i in range(n+1,m+1):\n            new_tuplex += (tuplex[i],)\n    return new_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    listx = list(tuplex)\n    new_tuplex = tuple(listx[:m]) + tuple(listx[m:n]) + tuple(listx[n:])\n    return new_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0:m],tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m-1:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[i:i+n] for i in range(0,m,n))\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x,y=tuplex\n    return [y[i] for i in range(m,m+n) ]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N >= len(nums1) or N >= len(nums2):\n        raise ValueError('Inputs list is too short to generate the requested number of largest products.')\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    products = []\n    for i in range(N):\n        products.append(nums1[i] * nums2[i])\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 0:\n        return []\n    elif N == 1:\n        return max(nums1 + nums2)\n    nums1.sort()\n    nums2.sort()\n    # largest product will be the first N elements of nums1 or nums2\n    largest_product = nums1[-N:] + nums2[-N:]\n    return largest_product\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pass\n    return sorted(nums1*nums2, reverse=True)[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    greatest_product = 0\n    greatest_index = []\n    for i in range(N):\n        product = 1\n        for j in range(N):\n            product *= min(nums1[j], nums2[j])\n        if product > greatest_product:\n            greatest_product = product\n            greatest_index = [i, j]\n    return greatest_product, greatest_index\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1 or not nums2:\n        return []\n    result = []\n    nums1.sort()\n    nums2.sort()\n    i = 0\n    j = 0\n    k = 0\n    while i < N and j < N:\n        if nums1[i] < nums2[j]:\n            result.append(nums1[i])\n            i += 1\n        else:\n            result.append(nums2[j])\n            j += 1\n        k += 1\n    if i < N:\n        result += nums1[i:]\n    if j < N:\n        result += nums2[j:]\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    import heapq\n    min_heap = []\n    max_heap = []\n    min_heap_size = 0\n    max_heap_size = 0\n    output = []\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_product = 0\n    for n1 in range(N):\n        for n2 in range(N):\n            if nums1[n1] * nums2[n2] > largest_product:\n                largest_product = nums1[n1] * nums2[n2]\n    return largest_product\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    for i in range(N):\n        temp_1 = nums1[i]\n        temp_2 = nums2[i]\n        res.append(temp_1 * temp_2)\n    return max(res)\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    i, j = 0, 0\n    largest_product = 0\n    while largest_product < N:\n        if nums1[i] * nums2[j] > largest_product:\n            largest_product = nums1[i] * nums2[j]\n            # print('{} * {} = {}'.format(nums1[i], nums2[j], largest_product))\n        if i == len(nums1) - 1:\n            i = 0\n            j += 1\n        else:\n            i += 1\n    return largest_product\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # First sort the arrays (nums1 and nums2) so that the largest number is the first in each array.\n    # Then multiply the factors in nums1 and nums2.\n    # Sort the resulting array in ascending order, and return the first n elements.\n    \n    # Convert to positive\n    nums1 = [abs(num) for num in nums1]\n    nums2 = [abs(num) for num in nums2]\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n    \n    \ndef power(a,b):\n    '''\n    Write a python function to find power of a number.\n    '''\n    return a**b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a > b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max = a if a>b else b\n    return max\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = a if a<b else b\n    return min\ndef swap(a,b):\n    '''\n    Write a python function to swap two numbers\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\ndef absval(x):\n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    if x <0:\n        x *= -1\n    return x\ndef f1(x,y):\n    '''\n    Write a python function to calculate f(x,y) = x^2 + y^2\n    '''\n    f = x**2 + y**2\n    return f\ndef f2(x):\n    '''\n    Write a python function to calculate f(x) = e^x\n    '''\n    f = math.exp(x)\n    return f\ndef f3(x,y):\n    '''\n    Write a python function to calculate f(x,y) = x^2 + y^2 + 2xy\n    '''\n    f = (x**2) + (y**2) + (2*x*y)\n    return f\ndef f4(x,y):\n    '''\n    Write a python function to calculate f(x,y) = x^2 + y^2 + 2xy\n    '''\n    f = ((x**2) + (y**2)) * 2\n    return f\ndef f5(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f6(x,y):\n    '''\n    Write a python function to calculate f(x,y) = x^2 + y^2 + 2xy\n    '''\n    f = ((x**2) + (y**2)) * 2\n    return f\ndef f7(x,y):\n    '''\n    Write a python function to calculate f(x,y) = x^2 + y^2 + 2xy\n    '''\n    f = ((x**2) + (y**2)) * 2\n    return f\ndef f8(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f9(x,y):\n    '''\n    Write a python function to calculate f(x,y) = x^2 + y^2 + 2xy\n    '''\n    f = ((x**2) + (y**2)) * 2\n    return f\ndef f10(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f11(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f12(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f13(x,y):\n    '''\n    Write a python function to calculate f(x,y) = x^2 + y^2 + 2xy\n    '''\n    f = ((x**2) + (y**2)) * 2\n    return f\ndef f14(x,y):\n    '''\n    Write a python function to calculate f(x,y) = x^2 + y^2 + 2xy\n    '''\n    f = ((x**2) + (y**2)) * 2\n    return f\ndef f15(x,y):\n    '''\n    Write a python function to calculate f(x,y) = x^2 + y^2 + 2xy\n    '''\n    f = ((x**2) + (y**2)) * 2\n    return f\ndef f16(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f17(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f18(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f19(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f20(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f21(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f22(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f23(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f24(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f25(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f26(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f27(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f28(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f29(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f30(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f31(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f32(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f33(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f34(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f35(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef f36(x):\n    '''\n    Write a python function to calculate f(x) = x^2 + x\n    '''\n    f = (x**2) + x\n    return f\ndef "
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n    \ndef maximum(a,b,c):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    if(a>b):\n        if (a>c):\n            return a\n        else:\n            return c\n    else:\n        if(b>c):\n            return b\n        else:\n            return c\n    \ndef maximum(a,b,c,d):\n    '''\n    Write a python function to find the maximum of four numbers.\n    '''\n    if(a>b):\n        if(a>c):\n            if(a>d):\n                return a\n            else:\n                return d\n        else:\n            if(c>d):\n                return c\n            else:\n                return d\n    else:\n        if(b>c):\n            if(b>d):\n                return b\n            else:\n                return d\n        else:\n            if(c>d):\n                return c\n            else:\n                return d\n    \ndef maximum(a,b,c,d,e):\n    '''\n    Write a python function to find the maximum of five numbers.\n    '''\n    if(a>b):\n        if(a>c):\n            if(a>d):\n                if(a>e):\n                    return a\n                else:\n                    return e\n            else:\n                if(d>e):\n                    return d\n                else:\n                    return e\n        else:\n            if(c>d):\n                if(c>e):\n                    return c\n                else:\n                    return e\n            else:\n                if(d>e):\n                    return d\n                else:\n                    return e\n    else:\n        if(b>c):\n            if(b>d):\n                if(b>e):\n                    return b\n                else:\n                    return e\n            else:\n                if(d>e):\n                    return d\n                else:\n                    return e\n        else:\n            if(c>d):\n                if(c>e):\n                    return c\n                else:\n                    return e\n            else:\n                if(d>e):\n                    return d\n                else:\n                    return e\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        print(f'{a} is maximum')\n    elif a < b:\n        print(f'{b} is maximum')\n    else:\n        print(f'Both {a} and {b} are equal')\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = []\n    for char in str1:\n        tup.append(char)\n    tup = tuple(tup)\n    return tup\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst=list(str1)\n    t=tuple(lst)\n    return t\nprint(string_to_tuple('tuple to string'))\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.replace(',', '')\n    str1 = str1.replace(' ', '')\n    str1 = str1.split('-')\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if i == len(str1)-1:\n            str2 += str1[i]\n        else:\n            str2 += str1[i]+\",\"\n    return tuple(str2)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if str1 == None:\n        return None\n    elif str1 == \"\":\n        return tuple(\"\")\n    else:\n        return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.strip()\n    new_tuple = tuple(str1)\n    return new_tuple\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = ~n \n    n = n + 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n^(n >> 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n | n>>1\n    n = n & -n\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = ((n >> 1) & ~n)\n    print(n)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    result = n & ~(n+1)\n    return result\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # if n < 0, make it positive\n    # first check if it is already positive\n    if n >= 0:\n        return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit = 0\n    while (n & 1 == 0) and (bit < 32): \n        n = n >> 1\n        bit += 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    m = n | (n >> 1)\n    return n ^ m\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x = n & ~(n-1)\n    return x\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Reverses bits using AND operator\n    return n ^ (n & (n - 1))\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r**2) * (h/3)\n    print(f'The volume of a cone of radius {r} and height {h} is {volume}')\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=(1/3)*math.pi*math.pow(r,2)*h\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=2*math.pi*math.pow(r,2)*h\n    return v\ndef volume_pyramid(l,w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=(1/3)*math.pow(l,2)*w*h\n    return v\ndef perimeter_rectangle(l,w):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    perimeter=2*(l+w)\n    return perimeter\ndef area_rectangle(l,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area=l*w\n    return area\ndef area_square(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area=math.pow(l,2)\n    return area\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area=0.5*b*h\n    return area\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area=math.pi*math.pow(r,2)\n    return area\ndef area_parallelogram(l,w):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area=l*w\n    return area\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    area=0.5*(a+b)*h\n    return area\ndef area_circle_sector(r,angle):\n    '''\n    Write a function to find the area of a circle sector.\n    '''\n    area=math.pi*math.pow(r,2)*angle/360\n    return area\ndef area_ellipse(r1,r2):\n    '''\n    Write a function to find the area of a ellipse.\n    '''\n    area=math.pi*math.pow(r1,2)*math.pow(r2,2)\n    return area\ndef area_rhombus(d1,d2):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    area=d1*d2*math.sqrt(2)\n    return area\ndef area_kite(s1,s2):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    area=0.5*s1*s2\n    return area\ndef area_heptagon(s1,s2,s3,s4):\n    '''\n    Write a function to find the area of a heptagon.\n    '''\n    area=0.5*s1*s2+s2*s3+s3*s4+s4*s1\n    return area\ndef area_octagon(s1,s2,s3,s4,s5,s6,s7):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    area=0.5*s1*s2+s2*s3+s3*s4+s4*s5+s5*s6+s6*s7+s7*s1\n    return area\ndef area_equilateral_triangle(a):\n    '''\n    Write a function to find the area of an equilateral triangle.\n    '''\n    area=math.sqrt(3)*a*a/4\n    return area\ndef area_triangle_of_sides(a,b,c):\n    '''\n    Write a function to find the area of a triangle of sides.\n    '''\n    s=(a+b+c)/2\n    area=math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\ndef area_parallelogram_of_sides(a,b):\n    '''\n    Write a function to find the area of a parallelogram of sides.\n    '''\n    area=a*b\n    return area\ndef area_triangle_of_base_and_height(b,h):\n    '''\n    Write a function to find the area of a triangle of base and height.\n    '''\n    area=0.5*b*h\n    return area\ndef area_trapezium_of_sides(a,b,h):\n    '''\n    Write a function to find the area of a trapezium of sides.\n    '''\n    area=0.5*(a+b)*h\n    return area\ndef area_kite_of_sides(a,b):\n    '''\n    Write a function to find the area of a kite of sides.\n    '''\n    area=a*b\n    return area\ndef area_circle_of_diameter(d):\n    '''\n    Write a function to find the area of a circle of diameter.\n    '''\n    area=math.pi*d\n    return area\ndef area_circle_of_radius(r):\n    '''\n    Write a function to find the area of a circle of radius.\n    '''\n    area=math.pi*math.pow(r,2)\n    return area\ndef area_ellipse_of_diameter(d):\n    '''\n    Write a function to find the area of an ellipse of diameter.\n    '''\n    area=math.pi*math.pow(d/2,2)\n    return area\ndef area_ellipse_of_radius(r):\n    '''\n    Write a function to find the area of an ellipse of radius.\n    '''\n    area=math.pi*math.pow(r,2)\n    return area\ndef area_rhombus_of_diagonal(d1,d2):\n    '''\n    Write a function to find the area of a rhombus of diagonals.\n    '''\n    area=math.sqrt(2)*d1*d2\n    return area\ndef area_rectangle_of_diagonal(d1,d2):\n    '''\n    Write a function to find the area of a rectangle of diagonals.\n    '''\n    area=d1*d2\n    return area\ndef area_square_of_diagonal(d):\n    '''\n    Write a function to find the area of a square of diagonals.\n    '''\n    area=d*d\n    return area\ndef area_square_of_diagonal_and_base(d,b):\n    '''\n    Write a function to find the area of a square of diagonal and base.\n    '''\n    area=d*b\n    return area\ndef area_rectangle_of_diagonal_and_base(d,b):\n    '''\n    Write a function to find the area of a rectangle of diagonal and base.\n    '''\n    area=d*b\n    return area\ndef area_square_of_diagonal_and_height(d,h):\n    '''\n    Write a function to find the area of a square of diagonal and height.\n    '''\n    area=d*h\n    return area\ndef area_rhombus_of_diagonal_and_height(d1,d2,h):\n    '''\n    Write a function to find the area of a rhombus of diagonal and height.\n    '''\n    area=0.5*d1*d2*h\n    return area\ndef area_rectangle_of_diagonal_and_height(d1,d2,h):\n    '''\n    Write a function to find the area of a rectangle of diagonal and height.\n    '''\n    area=0.5*d1*d2*h\n    return area\ndef area_square_of_diagonal_and_base_and_height(d1,d2,b,h):\n    '''\n    Write a function to find the area of a square of diagonal, base and height.\n    ''"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((math.pi)*(r**2)*(h/3))\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    s = (pi * r**2) * h\n    return s\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    import math\n    s = math.pi * r**2 * (h/3)\n    print(s)\n    return s\nvolume_cone(3,5)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    import math\n    volume = math.pi * (r**2) * h / 3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*r*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    try:\n        pi = math.pi\n        r = float(r)\n        h = float(h)\n        V = (1/3) * pi * (r**2) * h\n        return round(V,3)\n    except ValueError:\n        print(\"Please enter a valid number.\")\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume= math.pi*r**2*h/3\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while True:\n        if (n & 1) == 0:\n            n >>= 1\n        else:\n            return n\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power_of_2 = 0\n    while highest_power_of_2 < n:\n        highest_power_of_2 = highest_power_of_2 * 2\n    return highest_power_of_2\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 0\n    while (highest_power <= n): \n        highest_power *= 2\n    return highest_power / 2\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #base case\n    if (n == 0): \n        return 0; \n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    return 1 if (n == 1) else highest_Power_of_2(n // 2) + 1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return -1\n    if n == 1:\n        return 1\n    for i in range(n//2,1,-1):\n        if n%i == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n & n-1: \n        n &= n-1\n    return n \n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize result \n    result = 0\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # return p\n    # for p in range(n):\n    #     p = 2**p\n    #     if p <= n:\n    #         return p\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # number = bin(n)\n    # return 2**(int(number[::-1][1:len(number[::-1])])+1)\n    # print(n)\n    # print(2**n)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # if n == 0:\n    #     return 2\n    # elif n == 1:\n    #     return 1\n    # else:\n    #     return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [2, 1]\n    for i in range(2, n):\n        lucas.append(lucas[i-2] + lucas[i-1])\n    return lucas[n-1]\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Variable to store lucas number at index n\n    lucas_number = 0\n    # Variable to store lucas number at index n - 1\n    lucas_number_minus_one = 2\n    # Loop from 1 to n\n    for i in range(1, n + 1):\n        # Add lucas number at index i to lucas number at index i - 1\n        lucas_number = lucas_number_minus_one + lucas_number\n        # Update lucas number at index i - 1\n        lucas_number_minus_one = lucas_number\n    return lucas_number\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # The code below finds the nth Lucas number\n    # using the formula 2 * n + 1\n    if n == 0:\n        return 2\n    else:\n        return (find_lucas(n - 1) + find_lucas(n - 2))\n    \ndef main():\n    # Prompt the user to enter a number\n    num = int(input(\"Enter a number: \"))\n    # Display the number of 2's in the decimal expansion of num\n    print(\"2 appears in the decimal expansion of\", num, \"times.\")\n    # Display the number of Lucas numbers in the range 2..num\n    print(\"The number of Lucas numbers in the range 2 to\", num, \"is:\")\n    print(find_lucas(num))\n    "
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def iterative_lucas_seq(n):\n        lucas_seq = [2,1]\n        while len(lucas_seq) <= n:\n            lucas_seq.append(lucas_seq[-1] + lucas_seq[-2])\n        return lucas_seq[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 1:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    # creating first two lucas numbers\n    lucas_numbers = [2, 1]\n    \n    # creating list of numbers to be added\n    add_numbers = range(n - 2)\n    \n    # adding elements to the list\n    for i in add_numbers:\n        lucas_numbers.append(lucas_numbers[i] + lucas_numbers[i + 1])\n    \n    return lucas_numbers[n - 1]\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    def apply_format_string(list_, format_string):\n        '''\n        Write a function to apply a given format string to all of the elements in a list.\n        '''\n        return [format_string.format(elem) for elem in list_]\n    return apply_format_string(list_, string)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if type(list_) == list:\n        new_list = []\n        for i in list_:\n            new_list.append(format(i, string))\n        return new_list\n    else:\n        return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    pass # TODO Implement\n    \ndef add_format_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    \n    Hint: Use the add_string() function above.\n    '''\n    \n    pass # TODO Implement\n    \ndef list_matrix_multiplication(list_a, list_b):\n    '''\n    Write a function to multiply two matrices using nested loops.\n    '''\n    \n    pass # TODO Implement\n    \ndef list_matrix_transpose(list_a):\n    '''\n    Write a function to compute the matrix transpose of a given list of lists.\n    '''\n    \n    pass # TODO Implement\n    \ndef list_matrix_determinant(list_a):\n    '''\n    Write a function to compute the determinant of a given list of lists.\n    '''\n    \n    pass # TODO Implement\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = ['%.2f' % elem for elem in list_]\n    list_ = ['%s' % elem for elem in list_]\n    return ','.join(list_)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = {}\n    for x in l1:\n        res[x] = {}\n        for y in l2:\n            res[x][y] = {}\n            for z in l3:\n                res[x][y][z] = {}\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict(zip(l1, l2))\n    d2 = dict(zip(l2, l3))\n    d3 = {k : {kk: kkk for kkk, vvv in vv.items()} for k, vv in d1.items()}\n    d3.update(d2)\n    return d3\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic = {}\n    for i in range(0, len(l1)):\n        dic[l1[i]] = {}\n        for j in range(0, len(l2)):\n            dic[l1[i]][l2[j]] = l3[j]\n    return dic\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Init dictionary\n    d1 = dict(zip(l1,l2))\n    d2 = dict(zip(l1,l3))\n    d3 = {}\n    # For each key in d1, use a for loop to compare d2 and d3\n    for k in d1.keys():\n        d3[k] = d1[k]\n        # If d2 and d3 have the same key value\n        if d2[k] == d3[k]:\n            continue\n        # If d2 has a key that does not exist in d3\n        elif d2[k] not in d3.keys():\n            # Use append to add it to the d3 list\n            d3[k].append(d2[k])\n        # If d2 does not have the key that is in d3\n        else:\n            # Use append to add it to the d3 list\n            d3[k].append(d2[k])\n    return d3\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    list_of_dict = []\n    for i in range(len(l1)):\n        my_dict = {}\n        my_dict['item'] = l1[i]\n        my_dict['quantity'] = l2[i]\n        my_dict['price'] = l3[i]\n        list_of_dict.append(my_dict)\n    return list_of_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{l1[i]: l2[i], l3[i]: l4} for i in range(len(l1))]\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [dict(zip(l1, i)) for i in zip(l2, l3)]\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    list_dictionary = {}\n    for i,v in enumerate(l1):\n        list_dictionary[v] = {}\n        for j,x in enumerate(l2):\n            list_dictionary[v][l3[j]] = l2[j]\n    return list_dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic = {}\n    \n    for x in range(len(l1)):\n        dic[l1[x]] = {l2[x]:l3[x]}\n    \n    print(dic)\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # print(l1)\n    # print(l2)\n    # print(l3)\n    l1_len = len(l1)\n    l2_len = len(l2)\n    l3_len = len(l3)\n    if l1_len > l2_len and l1_len > l3_len:\n        print(\"Length of list 1: {}\".format(l1_len))\n        max_len = l1_len\n    elif l2_len > l1_len and l2_len > l3_len:\n        print(\"Length of list 2: {}\".format(l2_len))\n        max_len = l2_len\n    else:\n        print(\"Length of list 3: {}\".format(l3_len))\n        max_len = l3_len\n    dict = {}\n    for i in range(max_len):\n        # print(i)\n        # print(l1[i])\n        # print(l2[i])\n        # print(l3[i])\n        dict[l1[i]] = {l2[i]: l3[i]}\n    # print(dict)\n    return dict\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 0:\n        return 'Incorrect Input.'\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    import sys\n    def calculate_fibonacci_numbers(n, fibonacci_cache):\n        if n == 0 or n == 1:\n            return n\n        if fibonacci_cache[n]!= 0:\n            return fibonacci_cache[n]\n        fibonacci_cache[n] = calculate_fibonacci_numbers(n-1, fibonacci_cache) + calculate_fibonacci_numbers(n-2, fibonacci_cache)\n        return fibonacci_cache[n]\n    def find_max_sum(n):\n        fibonacci_cache = [0] * n\n        fibonacci_cache[0] = 0\n        fibonacci_cache[1] = 1\n        max_sum = calculate_fibonacci_numbers(n, fibonacci_cache)\n        return max_sum\n    return find_max_sum(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 0:\n        return -1\n    else:\n        return max( (get_max_sum(int(n/2)) + get_max_sum(int(n/3)) + get_max_sum(int(n/4)) + get_max_sum(int(n/5))), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    nums = [i for i in range (1,n+1)]\n    if n <= 0:\n        return 0\n    max_sum = max(\n        max(f(n/2), f(n/3)),\n        max(f(n/4), f(n/5))\n        )\n    for i in range (n+1, 2*n+1):\n        if i % 2 == 0:\n            if i == 2*n:\n                nums[i] = max_sum\n            else:\n                nums[i] = f(i/2)\n        else:\n            nums[i] = f(i/3)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return n if n < 2 else max(get_max_sum(n//2) + n, get_max_sum(n//3) + n, get_max_sum(n//4) + n, get_max_sum(n//5) + n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    pass\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    for i in range(n):\n        print(i)\n        if i == 0:\n            break\n        else:\n            print(\"F(%d) = max(%d, %d, %d, %d)\" % (i, i/2, i/3, i/4, i/5))\n            print(\"F(%d) = max(%d + %d, %d + %d, %d + %d, %d + %d)\" % (i, (i/2), (i/2), (i/3), (i/3), (i/4), (i/4), (i/5), (i/5)))\n            if i % 2 == 0:\n                print(\"F(%d) = %d\" % (i, (i/2)))\n            elif i % 3 == 0:\n                print(\"F(%d) = %d\" % (i, (i/3)))\n            elif i % 4 == 0:\n                print(\"F(%d) = %d\" % (i, (i/4)))\n            elif i % 5 == 0:\n                print(\"F(%d) = %d\" % (i, (i/5)))\n            if i > 0:\n                print(\"Max is %d\" % (max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range (1, n):\n        f_n = max((f(i/2) + f(i/3) + f(i/4) + f(i/5)), i)\n        if f_n > max_sum:\n            max_sum = f_n\n    return max_sum\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    length_list.append(len(input_list))\n    for i in range(len(input_list)):\n        length_list.append(len(input_list[i]))\n    max_length = max(length_list)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = []\n    for i in input_list:\n        length.append(len(i))\n    return input_list[length.index(max(length))]\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = 0\n    for item in input_list:\n        length = len(item) if length < len(item) else length\n    return length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    for x in range(len(input_list)):\n        if len(input_list[x]) > max:\n            max = len(input_list[x])\n    return max\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key = len)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    #initialize the variables\n    max_length = 0\n    output_list = []\n    \n    #calculate the length\n    for each_list in input_list:\n        if len(each_list) > max_length:\n            max_length = len(each_list)\n            output_list = each_list\n    \n    return output_list\n    \nprint(max_length_list(input_list))\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    length = 0\n    for i in input_list:\n        if isinstance(i, list):\n            i = max_length_list(i)\n        length = len(i)\n        if length > max_length:\n            max_length = length\n    return max_length\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # hint: what would be the length of a tuple with only unique values?\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = tuple(test_tup)\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set()\n    for i in test_tup:\n        if i in test_set:\n            return False\n        test_set.add(i)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = list(test_tup)\n    for i in range(len(test_tup)-1):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = dict()\n    for i in range(0, len(str1)):\n        if str1[i] in char_dict:\n            char_dict[str1[i]][1] += 1\n        else:\n            char_dict[str1[i]] = [i, 1]\n    for i in range(0, len(str1)):\n        if char_dict[str1[i]][1] == 1:\n            return char_dict[str1[i]][0]\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] in str2:\n            continue\n        else:\n            str2 += str1[i]\n    print(str2)\n    for i in range(len(str2)):\n        if str1[i]!= str2[i]:\n            print(i)\n            return str1[i]\n    return \"_\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for i in str1:\n        if i in dict:\n            dict[i] = dict[i] + 1\n        else:\n            dict[i] = 1\n    print(dict)\n    for i in str1:\n        if dict[i] == 1:\n            return i\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    non_repeated = set()\n    for letter in str1:\n        if letter not in non_repeated:\n            non_repeated.add(letter)\n        else:\n            non_repeated.remove(letter)\n    for index, letter in enumerate(str1):\n        if letter in non_repeated:\n            return index\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return chr(ord(list(str1)[0]) + ord(set(str1).difference(set(str1)).pop()))\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    from collections import OrderedDict\n    d=OrderedDict()\n    for i in str1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for k,v in d.items():\n        if v==1:\n            return k\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for index, value in enumerate(str1):\n        if str1.count(value) == 1:\n            return str1[index]\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        dict1[i] = dict1.get(i,0)+1\n    \n    for i in str1:\n        if dict1[i] == 1:\n            return i\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    non_repeated_character = ''\n    for char in str1:\n        if char not in non_repeated_character:\n            non_repeated_character += char\n        else:\n            non_repeated_character = non_repeated_character.replace(char, '')\n    return non_repeated_character\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_index = {}\n    for i,c in enumerate(str1):\n        if c in char_index:\n            char_index[c].append(i)\n        else:\n            char_index[c] = [i]\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string) is None: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string) \n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string): \n        return'same character'\n    else:\n        return 'different character'\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # remove whitespaces from string\n    string = string.strip()\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if bool(re.match(regex, string)) and bool(re.match(regex, string[::-1])):\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # return True or False\n    if re.search(regex, string):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if string[0]==string[-1] else False\ndef check_char_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    check_char(string) \n    return True if string[0]==string[-1] else False"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    # sort a,b,c\n    if a > b:\n        big = a\n        small = b\n    else:\n        big = b\n        small = a\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a<c:\n            if b>c:\n                return b\n            elif b<c:\n                return c\n        else:\n            return a\n    else:\n        if a<c:\n            if b>c:\n                return b\n            elif b<c:\n                return c\n        else:\n            return a\n            \ndef find_median(num_list):\n    '''\n    Write a function to find the median of a list of numbers.\n    '''\n    num_list.sort()\n    middle_index = int(len(num_list)/2)\n    if len(num_list)%2==1:\n        return num_list[middle_index]\n    elif len(num_list)%2==0:\n        return (num_list[middle_index]+num_list[middle_index-1])/2\n    \ndef find_second_largest(num_list):\n    '''\n    Write a function to find the second largest number in a list of numbers.\n    '''\n    if len(num_list)==0:\n        return None\n    elif len(num_list)==1:\n        return None\n    else:\n        num_list.sort()\n        if num_list[-1]==num_list[-2]:\n            return num_list[-2]\n        else:\n            return num_list[-2]\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    num_list = [a,b,c]\n    num_list.sort()\n    return num_list[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = [a,b,c]\n    median.sort()\n    if (median[1] == a or median[1] == b or median[1] == c):\n        return(median[1])\n    else:\n        return(median[2])\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers\n    if a > b:\n        a,b = b,a\n    if a > c:\n        a,c = c,a\n    if b > c:\n        b,c = c,b\n    # Find the median\n    if a == b and b == c:\n        median = a\n    elif a == b:\n        median = a\n    elif a < b and b == c:\n        median = a\n    elif b < a and a == c:\n        median = b\n    elif b < c and b == a:\n        median = b\n    elif c < a and c == b:\n        median = c\n    else:\n        median = b\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x = a\n    y = b\n    z = c\n    if a>b:\n        if a>c:\n            x=a\n            y=c\n            z=b\n        else:\n            x=c\n            y=b\n            z=a\n    else:\n        if b>c:\n            x=b\n            y=a\n            z=c\n        else:\n            x=c\n            y=a\n            z=b\n    if z>y:\n        if z>x:\n            if x>y:\n                return x\n            else:\n                return y\n        else:\n            return z\n    else:\n        if y>x:\n            if y>z:\n                return y\n            else:\n                return z\n        else:\n            if x>z:\n                return x\n            else:\n                return z\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numlist = [a,b,c]\n    numlist.sort()\n    return numlist[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a,b,c]\n    nums.sort()\n    median = nums[1]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            median=b\n        elif a>c:\n            median=c\n        else:\n            median=a\n    elif a>c:\n        median=a\n    elif b>c:\n        median=c\n    else:\n        median=b\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    lst=[a,b,c]\n    lst.sort()\n    if len(lst)%2==0:\n        return (lst[int(len(lst)/2)]+lst[int(len(lst)/2)-1])/2\n    else:\n        return lst[int((len(lst)+1)/2)]\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if type(nums) == list:\n        if type(nums[0]) == int:\n            total = 0\n            for x in nums:\n                total += int(x)\n            return total\n        else:\n            return \"The input is invalid\"\n    else:\n        return \"The input is invalid\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for n in nums:\n        result += sum(int(x) for x in str(n))\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += sum_of_digits_recursive(num)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    lst = []\n    for num in nums:\n        num_sum = 0\n        while num!= 0:\n            num_sum += num % 10\n            num //= 10\n        lst.append(num_sum)\n    return lst\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += sum_of_digits_helper(num)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    num_lst = []\n    for num in nums:\n        num_lst.append(sum(int(i) for i in str(num)))\n    return num_lst\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(num) for num in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for n in nums:\n        sum = sum + int(n)\n    return sum\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup3 = ()\n    for i in range(len(test_tup1)):\n        test_tup3 += ((test_tup1[i] ^ test_tup2[i]),)\n    return test_tup3\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return [x ^ y for x, y in zip(test_tup1, test_tup2)]\n    # or\n    # return test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1], test_tup1[2] ^ test_tup2[2]\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tup = ()\n    for i, j in zip(test_tup1, test_tup2):\n        xor_tup += (i^j,)\n    return xor_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return(tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2)))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([item1 ^ item2 for item1, item2 in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda a, b: a ^ b, test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x ^ y for x,y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # iterate over each tuple and perform the binary xor\n    xor_tuple = ()\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        xor_tuple += (tup1 ^ tup2, )\n    return xor_tuple\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = [1, 1, 3, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 2, 2, 1, 1, 2, 2, 3, 4, 4]\n    # remove duplicate from the list\n    test_list = list(dict.fromkeys(test_list))\n    freq = []\n    for i in test_list:\n        freq.append(test_list.count(i))\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for item in test_list:\n        if type(item) == tuple:\n            count += 1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = list(set(tuple(sorted(test_list[i])) for i in range(len(test_list))))\n    print(\"The list with unique tuples:\", unique_list)\n    return unique_list\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Converts the list into a tuple\n    test_list = tuple(test_list)\n    # Sets the first element of the tuple to the list\n    test_list = set([test_list[0]])\n    # Loops through the list\n    for x in test_list:\n        # Checks if the list element is not in the set\n        if x not in test_list:\n            # Adds the element to the set\n            test_list.add(x)\n    # Returns the set of unique tuples\n    return test_list\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return test_list[0]\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(i) for i in test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    num_tuples = len(test_list)\n    counter = Counter(test_list)\n    freq_list = [counter[i] for i in range(num_tuples)]\n    return freq_list\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # your code goes here\n    # set of tuples\n    tup = set(tuple(t) for t in test_list)\n    return len(tup)"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for i in range(len(test_list)):\n        if test_list[i] not in freq_list:\n            freq_list.append(test_list[i])\n    return len(freq_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] + test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    output = []\n    for i in range(len(test_tup1)):\n        output.append(test_tup1[i] + test_tup2[i])\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    sum_tup = ()\n    for i in range(len(test_tup1)):\n        sum_tup += (test_tup1[i] + test_tup2[i],)\n    return sum_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(sum(x) for x in zip(test_tup1, test_tup2))\n    \ndef nested_tuples_sum(test_tup):\n    '''\n    Write a function to sum up the elements of a given tuple of tuples\n    '''\n    return sum([sum(x) for x in test_tup])\n    \ndef nested_tuples_multiplication(test_tup):\n    '''\n    Write a function to multiply the elements of a given tuple of tuples.\n    '''\n    return functools.reduce(operator.mul, [functools.reduce(operator.mul, x) for x in test_tup])\n    \ndef tuples_are_equal(tup1, tup2):\n    '''\n    Write a function to check if two given tuples are equal or not.\n    '''\n    return tup1 == tup2\n    \ndef tuples_are_distinct(tup1, tup2):\n    '''\n    Write a function to check if two given tuples are distinct or not.\n    '''\n    return not tuples_are_equal(tup1, tup2)\n    \ndef sum_of_tuples(tup):\n    '''\n    Write a function to return the sum of elements of a given tuple.\n    '''\n    return sum(tup)\n    \ndef get_unique_values(tup):\n    '''\n    Write a function to get unique values in a tuple\n    '''\n    return list(set(tup))\n    \ndef get_uncommon_values(tup1, tup2):\n    '''\n    Write a function to get uncommon values between two tuples.\n    '''\n    return get_unique_values(tup1) + get_unique_values(tup2)\n    \ndef get_missing_values(tup1, tup2):\n    '''\n    Write a function to get the missing values between two tuples.\n    '''\n    return get_unique_values(tup1 + tup2)\n    \ndef get_common_values(tup1, tup2):\n    '''\n    Write a function to get common values between two tuples.\n    '''\n    return get_unique_values(tup1) + get_unique_values(tup2)\n    \ndef get_symmetric_difference(tup1, tup2):\n    '''\n    Write a function to get the symmetric difference of two tuples.\n    '''\n    return get_unique_values(tup1) + get_unique_values(tup2)\n    \ndef all_tuples_equal(tup):\n    '''\n    Write a function to check if all tuple elements are equal or not.\n    '''\n    return len(set(tup)) == 1\n    \ndef all_tuples_distinct(tup):\n    '''\n    Write a function to check if all tuple elements are distinct or not.\n    '''\n    return len(set(tup)) == len(tup)\n    \ndef compare_tuples(tup1, tup2):\n    '''\n    Write a function to compare two tuples.\n    '''\n    if(all_tuples_equal(tup1) and all_tuples_equal(tup2)):\n        return 'Both tuples are same'\n    elif(all_tuples_equal(tup1) or all_tuples_equal(tup2)):\n        return 'Atleast one of the tuple is same'\n    elif(all_tuples_distinct(tup1) and all_tuples_distinct(tup2)):\n        return 'Both tuples are distinct'\n    elif(all_tuples_distinct(tup1) or all_tuples_distinct(tup2)):\n        return 'Atleast one of the tuple is distinct'\n    else:\n        return 'Both tuples have some values in common'\n    \ndef sort_tuples(tup):\n    '''\n    Write a function to sort a given tuple by ascending order.\n    '''\n    return sorted(tup)\n    \ndef sort_by_reverse_tuples(tup):\n    '''\n    Write a function to sort a given tuple by descending order.\n    '''\n    return sorted(tup, reverse=True)\n    \ndef reverse_tuples(tup):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tup[::-1]\n    \ndef get_length_of_tuples(tup):\n    '''\n    Write a function to return the length of a given tuple.\n    '''\n    return len(tup)\n    \ndef is_tuple_empty(tup):\n    '''\n    Write a function to check if a given tuple is empty or not.\n    '''\n    return tup == ()\n    \ndef get_max_value_from_tuple(tup):\n    '''\n    Write a function to get the maximum value from a given tuple.\n    '''\n    return max(tup)\n    \ndef get_min_value_from_tuple(tup):\n    '''\n    Write a function to get the minimum value from a given tuple.\n    '''\n    return min(tup)\n    \ndef get_index_of_max_value(tup):\n    '''\n    Write a function to get the index of the maximum value from a given tuple.\n    '''\n    return tup.index(max(tup))\n    \ndef get_index_of_min_value(tup):\n    '''\n    Write a function to get the index of the minimum value from a given tuple.\n    '''\n    return tup.index(min(tup))\n    \ndef get_sliced_tuple(tup, start, end):\n    '''\n    Write a function to get the sliced tuple of the given start and end indices.\n    '''\n    return tup[start:end]\n    \ndef get_sliced_tuple_reversed(tup, start, end):\n    '''\n    Write a function to get the reversed sliced tuple of the given start and end indices.\n    '''\n    return tup[start:end][::-1]\n    \ndef get_tuples_sliced_without_start_or_end(tup, start, end):\n    '''\n    Write a function to get the sliced tuple without start or end indices.\n    '''\n    if(start == 0 and end == len(tup)):\n        return tup[1:-1]\n    elif(start == 0):\n        return tup[1:]\n    elif(end == len(tup)):\n        return tup[:-1]\n    else:\n        return tup[start:end]\n        \ndef get_tuples_sliced_without_start_or_end_or_indices(tup):\n    '''\n    Write a function to get the sliced tuple without start or end indices.\n    '''\n    return tup[1:-1]\n    \ndef get_tuples_sliced_by_skip_value(tup, skip):\n    '''\n    Write a function to get the sliced tuple with given skip value.\n    '''\n    return tup[::skip]\n    \ndef get_tuples_sliced_by_skip_value_reverse(tup, skip):\n    '''\n    Write a function to get the sliced tuple with given skip value in the reversed order.\n    '''\n    return tup[::skip][::-1]\n    \ndef get_tuples_sliced_by_skip_value_without_start_or_end(tup, skip):\n    '''\n    Write a function to get the sliced tuple with given skip value without start or end indices.\n    '''\n    return tup[1:-1][::skip]\n    \ndef get_tuples_sliced_by_skip_value_without_start_or_end_or_indices(tup, skip):\n    '''\n    Write a function to get the sliced tuple with given skip value without start or end indices.\n    '''\n    return tup[1:-1][::skip]\n    \ndef remove_nth_index_from_tuple(tup, index):\n    ''"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return [(a+b) for a, b in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(i[0] + i[1] for i in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # if test_tup1 == None or test_tup2 == None:\n    #     return None\n    # for i in range(len(test_tup1)):\n    #     test_tup1[i] += test_tup2[i]\n    # return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    return tuple(tuple(i + j for j in k) for i, k in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(tup[i] + tup[i] for i in range(len(tup1)))\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return(a)\n    else:\n        return(b)\nprint(minimum(1,2))\nprint(minimum(2,1))\nprint(minimum(2,2))\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return(a)\n    else:\n        return(b)\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return(a)\n    else:\n        return(b)\n    \n    \ndef pow(a,b):\n    '''\n    Write a python function to calculate power.\n    '''\n    return(a**b)\n    \n    \n    \ndef root(a,b):\n    '''\n    Write a python function to calculate root.\n    '''\n    return(a**(1/b))\n    \n    \n    \ndef divisible(a,b):\n    '''\n    Write a python function to check whether the first number is divisible by the second number or not.\n    '''\n    return(a%b==0)\n    \n    \n    \ndef find_factorial(a):\n    '''\n    Write a python function to find factorial.\n    '''\n    ans=1\n    for i in range(1,a+1):\n        ans=ans*i\n    return(ans)\n    \n    \n    \ndef sum_digits(a):\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    s=0\n    while(a):\n        s=s+a%10\n        a=a//10\n    return(s)\n    \n    \n    \ndef find_smallest_number(a):\n    '''\n    Write a python function to find smallest number from a list.\n    '''\n    mn=a[0]\n    for i in range(1,len(a)):\n        mn=minimum(mn,a[i])\n    return(mn)\n    \n    \n    \ndef sum_of_squares(a):\n    '''\n    Write a python function to calculate sum of squares of a number.\n    '''\n    ans=0\n    while(a):\n        ans=ans+(a%10)**2\n        a=a//10\n    return(ans)\n    \n    \n    \ndef greatest_common_divisor(a,b):\n    '''\n    Write a python function to calculate greatest common divisor of two numbers.\n    '''\n    if(a%b==0):\n        return(b)\n    else:\n        return(greatest_common_divisor(b,a%b))\n        \n        \n    \ndef find_fibonacci(a):\n    '''\n    Write a python function to calculate the nth fibonacci number.\n    '''\n    if(a<=1):\n        return(a)\n    else:\n        return(find_fibonacci(a-1)+find_fibonacci(a-2))\n        \n        \n        \ndef palindrome(a):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if(a[::-1]==a):\n        return(True)\n    else:\n        return(False)\n    \n    \n    \ndef sum_of_digits_squared(a):\n    '''\n    Write a python function to calculate the sum of squares of digits of a number.\n    '''\n    s=0\n    while(a):\n        s=s+((a%10)**2)\n        a=a//10\n    return(s)\n    \n    \n    \ndef sum_of_digits_squared_v2(a):\n    '''\n    Write a python function to calculate the sum of squares of digits of a number.\n    '''\n    s=0\n    for i in str(a):\n        s+=int(i)**2\n    return(s)\n    \n    \n    \ndef is_prime(a):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if(a==1):\n        return(False)\n    elif(a==2):\n        return(True)\n    else:\n        for i in range(2,a//2+1):\n            if(a%i==0):\n                return(False)\n        return(True)\n    \n    \n    \ndef is_prime_v2(a):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if(a<=1):\n        return(False)\n    elif(a<=3):\n        return(True)\n    else:\n        if(a%2==0 or a%3==0):\n            return(False)\n        i=5\n        while(i*i<=a):\n            if(a%i==0 or a%(i+2)==0):\n                return(False)\n            i+=6\n        return(True)\n    \n    \n    \ndef count_digits(a):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    return(len(str(a)))\n    \n    \n    \ndef sum_of_digits_and_sum_of_squares(a):\n    '''\n    Write a python function to calculate sum of digits and sum of squares of digits of a number.\n    '''\n    s1=0\n    s2=0\n    while(a):\n        s1=s1+a%10\n        s2=s2+((a%10)**2)\n        a=a//10\n    return(s1,s2)\n    \n    \n    \ndef sum_of_digits_and_sum_of_squares_v2(a):\n    '''\n    Write a python function to calculate sum of digits and sum of squares of digits of a number.\n    '''\n    s1=0\n    s2=0\n    for i in str(a):\n        s1+=int(i)\n        s2+=int(i)**2\n    return(s1,s2)\n    \n    \n    \ndef count_and_sum_of_digits_and_sum_of_squares(a):\n    '''\n    Write a python function to calculate sum of digits and sum of squares of digits of a number.\n    '''\n    s1=0\n    s2=0\n    while(a):\n        s1=s1+a%10\n        s2=s2+((a%10)**2)\n        a=a//10\n    return(s1,s2)\n    \n    \n    \ndef count_and_sum_of_digits_and_sum_of_squares_v2(a):\n    '''\n    Write a python function to calculate sum of digits and sum of squares of digits of a number.\n    '''\n    s1=0\n    s2=0\n    for i in str(a):\n        s1+=int(i)\n        s2+=int(i)**2\n    return(s1,s2)\n    \n    \n    \ndef check_prime(a):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if(a<=1):\n        return(False)\n    elif(a<=3):\n        return(True)\n    else:\n        if(a%2==0 or a%3==0):\n            return(False)\n        i=5\n        while(i*i<=a):\n            if(a%i==0 or a%(i+2)==0):\n                return(False)\n            i+=6\n        return(True)\n    \n    \n    \ndef prime_factors(a):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    l=[]\n    while(a):\n        if(check_prime(a)):\n            l.append(a)\n            a=0\n        else:\n            a=a//a\n    return(l)\n    \n    \n    \ndef prime_factors_v2(a):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    l=[]\n    while(a):\n        if(is_prime(a)):\n            l.append(a)\n            a=0\n        else:\n            a=a//a\n    return(l)\n    \n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a < b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a < b):\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef minimum2(a,b,c):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    if a<b:\n        return minimum(a,b)\n    else:\n        return minimum(b,c)\ndef minimum3(a,b,c):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    return minimum2(minimum(a,b),c)\ndef minimum4(a,b,c,d):\n    '''\n    Write a python function to find the minimum of four numbers.\n    '''\n    return minimum3(minimum(a,b),c,d)\ndef minimum5(a,b,c,d,e):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return minimum4(minimum(a,b),c,d,e)\ndef minimum6(a,b,c,d,e,f):\n    '''\n    Write a python function to find the minimum of six numbers.\n    '''\n    return minimum5(minimum(a,b),c,d,e,f)\ndef minimum7(a,b,c,d,e,f,g):\n    '''\n    Write a python function to find the minimum of seven numbers.\n    '''\n    return minimum6(minimum(a,b),c,d,e,f,g)\ndef minimum8(a,b,c,d,e,f,g,h):\n    '''\n    Write a python function to find the minimum of eight numbers.\n    '''\n    return minimum7(minimum(a,b),c,d,e,f,g,h)\ndef minimum9(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a python function to find the minimum of nine numbers.\n    '''\n    return minimum8(minimum(a,b),c,d,e,f,g,h,i)\ndef minimum10(a,b,c,d,e,f,g,h,i,j):\n    '''\n    Write a python function to find the minimum of ten numbers.\n    '''\n    return minimum9(minimum(a,b),c,d,e,f,g,h,i,j)\ndef minimum11(a,b,c,d,e,f,g,h,i,j,k):\n    '''\n    Write a python function to find the minimum of eleven numbers.\n    '''\n    return minimum10(minimum(a,b),c,d,e,f,g,h,i,j,k)\ndef minimum12(a,b,c,d,e,f,g,h,i,j,k,l):\n    '''\n    Write a python function to find the minimum of twelve numbers.\n    '''\n    return minimum11(minimum(a,b),c,d,e,f,g,h,i,j,k,l)\ndef minimum13(a,b,c,d,e,f,g,h,i,j,k,l,m):\n    '''\n    Write a python function to find the minimum of thirteen numbers.\n    '''\n    return minimum12(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m)\ndef minimum14(a,b,c,d,e,f,g,h,i,j,k,l,m,n):\n    '''\n    Write a python function to find the minimum of fourteen numbers.\n    '''\n    return minimum13(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n)\ndef minimum15(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o):\n    '''\n    Write a python function to find the minimum of fifteen numbers.\n    '''\n    return minimum14(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o)\ndef minimum16(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p):\n    '''\n    Write a python function to find the minimum of sixteen numbers.\n    '''\n    return minimum15(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p)\ndef minimum17(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q):\n    '''\n    Write a python function to find the minimum of seventeen numbers.\n    '''\n    return minimum16(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p,q)\ndef minimum18(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r):\n    '''\n    Write a python function to find the minimum of eighteen numbers.\n    '''\n    return minimum17(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r)\ndef minimum19(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s):\n    '''\n    Write a python function to find the minimum of nineteen numbers.\n    '''\n    return minimum18(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s)\ndef minimum20(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t):\n    '''\n    Write a python function to find the minimum of twenty numbers.\n    '''\n    return minimum19(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t)\ndef minimum21(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u):\n    '''\n    Write a python function to find the minimum of twenty one numbers.\n    '''\n    return minimum20(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u)\ndef minimum22(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v):\n    '''\n    Write a python function to find the minimum of twenty two numbers.\n    '''\n    return minimum21(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v)\ndef minimum23(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w):\n    '''\n    Write a python function to find the minimum of twenty three numbers.\n    '''\n    return minimum22(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w)\ndef minimum24(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x):\n    '''\n    Write a python function to find the minimum of twenty four numbers.\n    '''\n    return minimum23(minimum(a,b),c,d,e,f,g,h,i,j,k,"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = list(tuplex)\n    tuple1 = list(tuple1)\n    for i in range(len(tuplex)):\n        for j in range(len(tuple1)):\n            if tuplex[i] == tuple1[j]:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)): \n        if tuplex[i] == tuple1: \n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuple1: \n        if i==tuplex: \n            return True \n    return False \n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    return tuple1 in tuplex\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(tuplex,tuple):\n        if tuple1 in tuplex:\n            return True\n        else:\n            return False\n    else:\n        raise TypeError(\"Only tuples are allowed\")\n    \ndef check_type(tuplex):\n    '''\n    Write a function that takes a tuple as an input and returns \n    the number of items in the tuple.\n    '''\n    return len(tuplex)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if any(item in tuplex for item in tuple1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(tuplex,tuple) and isinstance(tuple1,tuple):\n        if not isinstance(tuple1,tuple):\n            return True\n        else:\n            return any(item in tuplex for item in tuple1)\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if any(val in tuple1 for val in tuplex):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = 0\n    if (x % 2 == 0): \n        return 1\n    else: \n        return 0\n    \n    \ndef find_EvenOdd(x): \n    '''\n    Write a python function to find whether the even or odd of a given number is odd.\n    '''\n    y = x % 2\n    if y == 0: \n        return 0\n    else: \n        return 1\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2) \n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x:\n        parity = ~parity\n        x = x & (x - 1)\n    return(parity)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return [x % 2 == 0, x % 2!= 0][x % 2 == 0]\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd_count = 0\n    for i in range(2,x):\n        if x % i == 0:\n            odd_count += 1\n    if odd_count % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x%2==0):\n        return \"Even\"\n    else:\n        return \"Odd\"\n    pass\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    sum = 0\n    while(x):\n        sum += x & 1\n        x >>= 1\n    return sum\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #\n    # Write the code\n    #\n    a = str(x)\n    if len(a) % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(x) for x in str(n)]\n    digits.sort(reverse=True)\n    bigger = int(''.join([str(x) for x in digits]))\n    return bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    list_of_digits = []\n    for i in range(0, len(str(n))):\n        list_of_digits.append(int(str(n)[i]))\n    swap_num = sorted(list_of_digits, reverse=True)\n    for i in range(len(list_of_digits)):\n        list_of_digits[i] = swap_num[i]\n    return int(''.join(map(str, list_of_digits)))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return [int(i) for i in str(n) if int(i) > 0] + ([0] * (len(str(n)) - len(rearrange_bigger(n))))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    l = [int(i) for i in str(n)]\n    m = []\n    for i in range(len(l)):\n        k = i\n        for j in range(i+1,len(l)):\n            if l[j] > l[k]:\n                k = j\n        m.append(l[k])\n        l[k] = l[i]\n    if l == m:\n        return -1\n    else:\n        return int(''.join([str(i) for i in l]))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    print(n)\n    n_list = [int(i) for i in str(n)]\n    \n    if len(n_list) == 1:\n        return n_list\n    else:\n        rearranged = []\n        i = 0\n        while len(n_list) > 0:\n            print(n_list)\n            temp = n_list[0]\n            rearranged.append(n_list[0])\n            n_list.pop(0)\n            i += 1\n            if len(n_list)!= 0:\n                while len(n_list) > 0 and temp < n_list[0]:\n                    n_list.pop(0)\n                if len(n_list) == 0:\n                    break\n        print(rearranged)\n        \nrearrange_bigger(1234)\n        \n    "
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    import itertools\n    n = list(str(n))\n    n = list(map(int, n))\n    for x in range(len(n)-1, 0, -1):\n        for i in itertools.combinations(n, x):\n            if list(i)!= sorted(list(i), reverse=True):\n                continue\n            else:\n                return int(''.join(list(map(str, sorted(list(i), reverse=True)))))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    lst = [int(x) for x in str(n)]\n    lst.sort()\n    if lst == sorted(lst):\n        return -1\n    else:\n        j = len(lst) - 1\n        while lst[j] == 9:\n            j -= 1\n        lst[j] += 1\n        for i in range(j + 1, len(lst)):\n            lst[i] = 0\n        lst = [str(x) for x in lst]\n        return int(\"\".join(lst))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    if s==s[::-1]:\n        return -1\n    else:\n        res = ''\n        for i in range(1,len(s)):\n            if s[i] < s[i-1]:\n                res += s[i-1]\n                res += s[i]\n                for j in range(i+1,len(s)):\n                    if s[j] < s[i-1]:\n                        res += s[j]\n                        for k in range(j+1, len(s)):\n                            if s[k] < s[j]:\n                                res += s[k]\n                                return int(res)\n    return -1\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    result = []\n    for i in range(len(n)):\n        max_ = 0\n        for j in range(len(n)):\n            if int(n[i]) < int(n[j]):\n                max_ = int(n[j])\n        result.append(max_)\n    return int(''.join(str(x) for x in result))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    l = []\n    a = []\n    for i in range(len(n)):\n        if n[i]!= '9':\n            l.append(n[i])\n    l.sort()\n    for i in range(len(l)):\n        if i == len(l) - 1:\n            a.append(l[i])\n        else:\n            a.append(l[i])\n            a.append('9')\n    print(''.join(a))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create heap that will keep track of the k smallest pairs\n    heap = []\n    # Use two for loops to iterate through the two arrays\n    for n1 in nums1:\n        for n2 in nums2:\n            # Create a tuple of the two elements\n            tup = (n1, n2)\n            # Append the tuple to the heap\n            heapq.heappush(heap, tup)\n    # Loop through the heap\n    result = []\n    for i in range(k):\n        # Pop off the smallest element from the heap\n        result.append(heapq.heappop(heap))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in nums1:\n        for j in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (-(i+j), (i, j)))\n            else:\n                heapq.heappushpop(heap, (-(i+j), (i, j)))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    return [heapq.heappop(heap)[1:] for _ in range(k)][::-1]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    for i in range(0,len(nums1)):\n        for j in range(0,len(nums2)):\n            heapq.heappush(h,(nums1[i]+nums2[j],i,j))\n            if len(h)>k:\n                heapq.heappop(h)\n    r = []\n    for x in h:\n        r.append((nums1[x[1]],nums2[x[2]]))\n    return r\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0:\n        return []\n    if k == 1:\n        return [[i, j] for i in nums1 for j in nums2 if i < j]\n    else:\n        k_small_pairs = []\n        nums1 = nums1 + nums2\n        heapq.heapify(nums1)\n        for i in range(0, k):\n            k_small_pairs.append(heapq.heappop(nums1))\n    return k_small_pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) * len(nums2) < k:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < min_heap[0][0]:\n                    break\n                else:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap)[1:])\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if k == 0:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i == 0 or j == 0:\n                heapq.heappush(heap, (nums1[i]+nums2[j], i, j))\n            else:\n                heapq.heappush(heap, (nums1[i]+nums2[j], i, j))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return [(heapq.heappop(heap))[1:] for _ in range(k)]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 is None or nums2 is None:\n        return None\n    if k < 0 or k > len(nums1) * len(nums2):\n        return None\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    min_product = None\n    for i in range(n):\n        for j in range(i+1, n):\n            if (min_product is None) or (list1[i][1] * list1[j][1] < min_product):\n                min_product = list1[i][1] * list1[j][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min([list1[i][0]*list1[i][1] for i in range(len(list1))])\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_value = 1\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i == j:\n                continue\n            else:\n                min_value = min(min_value,list1[i][0]*list1[j][1])\n    return min_value\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pairs = []\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            pairs.append((list1[i], list1[j]))\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for a, b in list1:\n        if not min_product or min_product > a*b:\n            min_product = a*b\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    min_prod = list1[0][0]*list1[0][1]\n    for tup in list1[1:]:\n        min_prod = min(min_prod, tup[0]*tup[1])\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list_of_tuples = [(a, b) for a in list1 for b in list1 if a!= b]\n    list_of_values = [j for i in list_of_tuples for j in i]\n    return min(list_of_values)\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_tuple = min(list1, key=lambda t: t[0] * t[1])\n    return min_tuple\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    first_item=list1[0][0]\n    last_item=list1[-1][1]\n    if first_item<last_item:\n        min_tuple=(list1[0][0],list1[-1][1])\n    else:\n        min_tuple=(list1[0][1],list1[-1][0])\n    return min_tuple\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(list(map(lambda x: min(x), list1)))\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1,len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    mv=listval[0]\n    for i in listval:\n        if i<mv:\n            mv=i\n    return mv\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    def _min_val(listval,min_val=None):\n        if min_val is None:\n            min_val = listval[0]\n            for ele in listval:\n                if ele < min_val:\n                    min_val = ele\n        return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    minval = listval[0]\n    for ele in listval:\n        if ele < minval:\n            minval = ele\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min=listval[0]\n    for i in listval:\n        if i < min:\n            min=i\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    smallest=None\n    for element in listval:\n        if smallest is None:\n            smallest=element\n        elif smallest > element:\n            smallest = element\n    return smallest\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    result=[]\n    for x in listval:\n        if isinstance(x, int) or isinstance(x, float):\n            result.append(x)\n        elif isinstance(x, str):\n            result.append(x.lower())\n    return min(result)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'_','', word)\n    return word.title()\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # if not word:\n    #     return word\n    # if word == '_':\n    #     return ''\n    # camel = ''\n    # for letter in word:\n    #     if letter.isupper():\n    #         camel += letter\n    #     else:\n    #         camel += letter.upper()\n    # if word[0].islower():\n    #     camel = word[0].lower() + camel[1:]\n    # print(camel)\n    # return camel\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    lst = word.split(\"_\")\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + ''.join(x.title() for x in lst[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.title().replace(\"_\",\"\")\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_([a-z])', lambda m: m.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(map(lambda x: x.title(), word.split('_')))\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()\ndef snake_to_pascal(word):\n    '''\n    Write a function to convert the given snake case string to Pascal case string.\n    '''\n    return re.sub(r'_(\\w)', lambda x: x.group(1).upper(), word)\ndef pascal_to_snake(word):\n    '''\n    Write a function to convert the given Pascal case string to snake case string.\n    '''\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()\ndef snake_to_kebab(word):\n    '''\n    Write a function to convert the given snake case string to kebab case string.\n    '''\n    return re.sub(r'_', '-', word)\ndef kebab_to_snake(word):\n    '''\n    Write a function to convert the given kebab case string to snake case string.\n    '''\n    return re.sub(r'(-)(?=[A-Z])', '_', word)\ndef snake_to_title(word):\n    '''\n    Write a function to convert the given snake case string to title case string.\n    '''\n    return word.title()\ndef title_to_snake(word):\n    '''\n    Write a function to convert the given title case string to snake case string.\n    '''\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()\ndef snake_to_all_cases(word):\n    '''\n    Write a function to convert the given snake case string to camel case string,\n    pascal case string, kebab case string, and title case string.\n    '''\n    return {'camel': snake_to_camel(word), 'pascal': pascal_to_snake(word), 'kebab': snake_to_kebab(word), 'title': snake_to_title(word)}\ndef all_cases_to_snake(word):\n    '''\n    Write a function to convert the given camel case string, pascal case string,\n    kebab case string, and title case string to snake case string.\n    '''\n    return {'camel': camel_to_snake(word), 'pascal': pascal_to_snake(word), 'kebab': kebab_to_snake(word), 'title': title_to_snake(word)}\ndef snake_to_constant(word):\n    '''\n    Write a function to convert the given snake case string to all upper case string.\n    '''\n    return word.upper()\ndef constant_to_snake(word):\n    '''\n    Write a function to convert the given all upper case string to snake case string.\n    '''\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()\ndef snake_to_constant_with_first_upper(word):\n    '''\n    Write a function to convert the given snake case string to all upper case string\n    with first letter upper case.\n    '''\n    return ''.join([word[0].upper(), word[1:]])\ndef constant_with_first_upper_to_snake(word):\n    '''\n    Write a function to convert the given all upper case string with first letter upper case\n    to snake case string.\n    '''\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word[1:])\ndef snake_to_all_upper_with_underscore(word):\n    '''\n    Write a function to convert the given snake case string to all upper case string\n    with underscore.\n    '''\n    return re.sub(r'_', '_', word).upper()\ndef all_upper_with_underscore_to_snake(word):\n    '''\n    Write a function to convert the given all upper case string with underscore to\n    snake case string.\n    '''\n    return re.sub(r'_', '_', word[1:]).lower()\ndef snake_to_pascal_with_first_upper(word):\n    '''\n    Write a function to convert the given snake case string to Pascal case string\n    with first letter upper case.\n    '''\n    return ''.join([word[0].upper(), word[1:]])\ndef pascal_with_first_upper_to_snake(word):\n    '''\n    Write a function to convert the given Pascal case string with first letter upper case\n    to snake case string.\n    '''\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word[1:]).lower()\ndef pascal_to_snake_with_first_upper(word):\n    '''\n    Write a function to convert the given Pascal case string to snake case string\n    with first letter upper case.\n    '''\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()\ndef snake_to_pascal_with_first_upper_and_without_underscore(word):\n    '''\n    Write a function to convert the given snake case string to Pascal case string\n    with first letter upper case and without underscore.\n    '''\n    return re.sub(r'_', '', word[1:]).upper()\ndef pascal_with_first_upper_and_without_underscore_to_snake(word):\n    '''\n    Write a function to convert the given Pascal case string with first letter upper case\n    and without underscore to snake case string.\n    '''\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word[1:]).lower()\ndef pascal_to_snake_with_first_upper_and_without_underscore(word):\n    '''\n    Write a function to convert the given Pascal case string to snake case string\n    with first letter upper case and without underscore.\n    '''\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()\ndef snake_to_kebab_with_first_upper(word):\n    '''\n    Write a function to convert the given snake case string to kebab case string\n    with first letter upper case.\n    '''\n    return re.sub(r'_', '-', word[1:])\ndef kebab_with_first_upper_to_snake(word):\n    '''\n    Write a function to convert the given kebab case string with first letter upper case\n    to snake case string.\n    '''\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word[1:])\ndef kebab_to_snake_with_first_upper(word):\n    '''\n    Write a function to convert the given kebab case string to snake case string\n    with first letter upper case.\n    '''\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()\ndef kebab_to_snake_with_first_upper_and_without_hyphen(word):\n    '''\n    Write a function to convert the given kebab case string to snake case string\n    with first letter upper case and without hyphen.\n    '''\n    return re.sub(r'[-]', '_', word[1:])\ndef kebab_to_snake_with_first_upper_and_without_hyphen_to_snake(word):\n    '''\n    Write a function to convert the given kebab case string to snake case string\n    with first letter upper case and without hyphen to snake case string.\n    '''\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word[1:]).lower()\ndef kebab_to_snake(word):\n    '''\n    Write a function to convert the given kebab case string t"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    words = [x.title() for x in words]\n    return ''.join(words)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the string into words by underscore\n    snake_case_string = word.split(\"_\")\n    # Make the first letter of each word in the list upper case\n    for i in range(0, len(snake_case_string)):\n        snake_case_string[i] = snake_case_string[i].title()\n    # Join the list of words and return\n    return \"\".join(snake_case_string)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('_','', word)\n    return camel_case.title().replace(' ', '')\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # check whether it is valid or not\n    if word is None:\n        return None\n    # if it is not valid, return None\n    if not re.match(r'^[a-z]+(_[a-z])+$', word):\n        return None\n    # add _ to the end of the word\n    # since the first character is _, it can just add _ to the first character\n    # it can't add _ to the second character, so we have to loop through the word\n    word = word.replace('_', '')\n    # initialize a variable to store the result\n    camelWord = ''\n    # loop through the word\n    for i in range(len(word)):\n        # if it is the first character\n        if i == 0:\n            # add the first character to the camel word\n            camelWord += word[i].upper()\n        # if it is not the first character\n        else:\n            # add the first character\n            camelWord += word[i]\n            # if it is uppercase\n            if word[i].isupper():\n                # set it to lowercase\n                word[i] = word[i].lower()\n                # add the dash\n                camelWord += '-'\n        # add the rest characters\n        camelWord += word[i + 1:]\n    # return the camel case word\n    return camelWord\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2!=0:\n            l.remove(i)\n    return l\n    \ndef remove_odd_alt(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i]%2!=0:\n            l.remove(l[i])\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1 = []\n    for item in l:\n        if item%2 == 0:\n            l1.append(item)\n    return l1\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for item in l:\n        if item % 2 == 0:\n            l.remove(item)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1 = [x for x in l if x % 2!= 0]\n    print(l1)\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2!=0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for x in l:\n        if x%2!=0:\n            l.remove(x)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = [x for x in l if x%2==0]\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x:x%2==0,l))\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2 == 1:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(zip(*list1))[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return \"The input must be smaller than the length of the given list\"\n    else:\n        return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Your code here\n    return list(map(lambda tup: tup[n], list1))\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n] for x in list1]\n    \ndef remove_nth_element(list1, n):\n    '''\n    Write a function to remove the nth element from a given list of tuples.\n    '''\n    return [tuple(x for i,x in enumerate(x) if i!= n) for x in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    nth_element = []\n    for i in list1:\n        nth_element.append(i[n])\n    return nth_element\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n]\n    except IndexError:\n        return None\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return (list1[n-1])\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    element = []\n    for i in list1:\n        element.append(i[n])\n    return element\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result=False\n    for x in list1:\n        for y in list2:\n            if x==y:\n                result=True\n                return result\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1.extend(list2)\n    return set(list1)\n    #return len(set(list1))\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    new_list=[]\n    for i in list1:\n        for j in list2:\n            if i==j:\n                new_list.append(i)\n    if new_list==[]:\n        print(\"overlapping: The lists are not overlapping!\")\n    else:\n        print(\"overlapping: The lists are overlapping!\")\n    return new_list\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(v in list2 for v in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) >= len(list2):\n        long_list = list1\n        short_list = list2\n    else:\n        long_list = list2\n        short_list = list1\n    result = False\n    for i in short_list:\n        if i in long_list:\n            result = True\n    return result\nprint(overlapping([1,2,3,4,5,6],[2,4,6]))\nprint(overlapping([1,2,3,4,5,6],[2,4,6,8]))\nprint(overlapping([1,2,3,4,5,6],[2,4]))\nprint(overlapping([1,2,3,4,5,6],[2,4,6,8,10,12]))\nprint(overlapping([1,2,3,4,5,6],[2,4,6,8,10,12,18]))\nprint(overlapping([1,2,3,4,5,6],[2,4,6,8,10,12,18,22]))\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # list1 = [1, 2, 3, 4] \n    # list2 = [4, 5, 6, 7]\n    # new_list = []\n    # for i in list1:\n    #     if i not in new_list:\n    #         new_list.append(i)\n    # for i in list2:\n    #     if i not in new_list:\n    #         new_list.append(i)\n    # return new_list\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    list3=[]\n    for i in list1:\n        if i in list2:\n            list3.append(i)\n    print(list3)\n    \n    if len(list3)==0:\n        print(\"No element in the list1 is also in list2.\")\n    else:\n        print(\"List1 has:\",len(list3),\" elements, which are also in list2.\")\n    \n    \n    \n    \n    \n    \nlist1=[]\nlist2=[]\nno=int(input(\"Enter no of elements in list1:\"))\nfor i in range(0,no):\n    i=input(\"Enter an element:\")\n    list1.append(i)\nprint(\"list1 is:\",list1)\nno=int(input(\"Enter no of elements in list2:\"))\nfor i in range(0,no):\n    i=input(\"Enter an element:\")\n    list2.append(i)\nprint(\"list2 is:\",list2)\nprint(\"If there is any element in the list1, which is also in the list2, then the element is:\")\noverlapping(list1,list2)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort(reverse=True)\n    max_product = arr[0] * arr[1]\n    return max_product\n    \ndef max_Product_n(arr,n):\n    '''\n    Write a python function to find the maximum product of n consecutive elements in a given array.\n    '''\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    return prod\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    n = len(arr)\n    for i in range(0, n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                p1 = i\n                p2 = j\n    print(arr[p1], arr[p2])\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pro = arr[0] * arr[1] \n    n = len(arr) \n    for i in range(0, n-1): \n        for j in range(i + 1, n): \n            if arr[i] * arr[j] > max_pro: \n                max_pro = arr[i] * arr[j] \n    return max_pro\narr = [10, 3, 5, 6, 20] \nprint(max_Product(arr)) \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    def maxProduct(arr):\n        #find the largest and smallest element in the array\n        max_value = 0\n        min_value = 0\n        for i in range(0, len(arr)):\n            if arr[i] > max_value:\n                max_value = arr[i]\n            if arr[i] < min_value:\n                min_value = arr[i]\n        #Find the largest and smallest product of two integers in the array\n        max_product = max_value * min_value\n        #print(\"Max_value:\", max_value)\n        #print(\"Min_value:\", min_value)\n        #print(\"Max_product:\", max_product)\n        for i in range(0, len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i]*arr[j] > max_product:\n                    max_product = arr[i]*arr[j]\n        #print(\"Max_product:\", max_product)\n        return max_product\n    print(max_Product(arr))\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n < 2:\n        return -1\n    max_product = arr[0] * arr[1]\n    if max_product < 0:\n        max_product = arr[0] * arr[1]\n    elif max_product >= 0:\n        max_product = arr[0] * arr[1]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if max_product < arr[i] * arr[j]:\n                max_product = arr[i] * arr[j]\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    pair_list = []\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair_list.append((arr[i],arr[j]))\n    return pair_list\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[1]\n    max3 = arr[2]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max1 * max2:\n                max1 = arr[i]\n                max2 = arr[j]\n    print(\"The pair with maximum product is {0} and {1}\".format(max1,max2))\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if (len(arr) < 2):\n        print(\"Please input the array of at least 2 integers\")\n        return\n    \n    if (len(arr) == 2):\n        print(\"The two integers are:\", arr[0], \"and\", arr[1])\n        return\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #print(arr)\n    if len(arr) == 0: \n        return []\n    if len(arr) == 1: \n        return [arr[0]]\n    if len(arr) == 2: \n        return [arr[0],arr[1]]\n    max_pair = []\n    first_pair = [arr[0], arr[1]]\n    second_pair = [arr[0], arr[1]]\n    for i in range(2,len(arr)): \n        if arr[i] > arr[i-1] and arr[i] > arr[i-2]: \n            second_pair = [arr[i-1], arr[i]]\n        elif arr[i] < arr[i-1] and arr[i] < arr[i-2]: \n            first_pair = [arr[i-1], arr[i]]\n        else: \n            continue\n    if max(first_pair) * max(second_pair) > max(max_pair): \n        max_pair = [first_pair,second_pair]\n    return max_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maxProduct = -1\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i]*arr[j]\n            if product>maxProduct:\n                maxProduct = product\n                maxProductIndex = [i,j]\n    return maxProduct,maxProductIndex\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input = [('alex', 'jessica'), ('alex', 'jessica'), ('alex', 'jessica'), ('alex', 'jessica'), ('alex', 'jessica')]\n    # Output: ('alex', 'jessica')\n    set_tuple = set(Input)\n    first = set_tuple.pop()\n    return first\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input, key=itemgetter(0))\n    for i, j in zip(Input,Input[1:]):\n        if i[0] == j[0]:\n            yield i[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    length = len(Input) \n    if length > 0:\n        # sort list of tuple on first element\n        Input.sort(key=lambda x:x[0])\n        # first element of first tuple\n        first_element = Input[0][0]\n        # group tuples based on first element\n        group = {first_element:[]}\n        for tup in Input:\n            group[first_element].append(tup)\n        return group\n    return Input\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Input = [(1, 1, 2), (2, 2, 3), (3, 3, 4)]\n    #Output = [1, 2, 3]\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Get the first element from each tuple.\n    common = list(map(lambda x:x[0], Input))\n    return common\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for x in range(0, len(Input)): \n        Output.append(Input[x][0])\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input = [(1,2),(3,4),(5,6),(7,8),(9,10)]\n    # Output = [1,3,5,7,9]\n    Output = []\n    for x in range(len(Input)):\n        for y in range(len(Input[x])):\n            if Input[x][y] not in Output:\n                Output.append(Input[x][y])\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for k in range(0,len(Input)):\n        Input[k] = list(Input[k])\n    # print(Input)\n    group_dict = {}\n    for item in Input:\n        if group_dict.get(item[0]) is None:\n            group_dict[item[0]] = []\n            group_dict[item[0]].append(item)\n        else:\n            group_dict[item[0]].append(item)\n    # print(group_dict)\n    for key, val in group_dict.items():\n        if len(val) > 1:\n            for items in val:\n                Input.remove(items)\n    # print(Input)\n    return Input\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    new_list = []\n    for i in Input:\n        new_list.append(i[0])\n    common = max(set(new_list), key = new_list.count)\n    print(common)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #print(Input)\n    group_list = []\n    for i in Input:\n        if i[0] not in group_list:\n            group_list.append(i[0])\n    return group_list\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if max_len < len(lst[i]):\n            max_len = len(lst[i])\n    for j in range(len(lst)):\n        if len(lst[j]) == max_len:\n            print(lst[j])\n            break\n    \nif __name__ == \"__main__\":\n    lst = ['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg']\n    Find_Max(lst)\n    \n    \n    "
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(len(i))\n    return lst1.index(max(lst1))\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst,key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max1 = 0\n    for x in lst:\n        if len(x) > max1:\n            max1 = len(x)\n    return max1\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(i) for i in lst) \n    return max_len\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=-1\n    for i in lst:\n        if len(i)>max:\n            max=len(i)\n            max_str=i\n    print(max_str)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for item in lst:\n        if len(item) > max:\n            max = len(item)\n    for item in lst:\n        if len(item) == max:\n            return item\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i]) == max:\n            return(lst[i])\n    return(None)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for item in lst:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_element = item\n    return max_element\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    n = len(list1)\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(\"Sum of \" + str(n) + \" numbers = \" + str(total))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [round(number, 1) for number in list1]\n    print(list1)\n    print(round(sum(list1), 1) * len(list1))\nround_and_sum([1.234, 5.6789, 0.0001, -0.25, 0.75, 123.456])\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Your code here\n    for num in range(len(list1)):\n        list1[num] = round(list1[num], 1)\n    print(sum(list1))\n    print(len(list1))\n    print(sum(list1) * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    tot_sum = 0\n    for num in list1:\n        rounded = round(num)\n        tot_sum += rounded\n        print(rounded)\n    print(tot_sum * len(list1))\n    return tot_sum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for x in list1:\n        sum1 += round(x)\n    print(sum1*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += round(i)\n    print(sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum = sum + round(i)\n    print(sum*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i], 3)\n        sum1 = sum1 + list1[i]\n    print(list1)\n    print(sum1)\n    return sum1 * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for x in range(len(list1)):\n        list1[x] = round(list1[x], 2)\n        sum1 += list1[x]\n    return sum1 * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list_length = len(list1)\n    total = 0\n    for i in list1:\n        total += round(i, 2)\n    return total * list_length\n    \n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum+=i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    summation=0\n    for i in range(n):\n        summation += i**3\n    return summation\nprint(cube_Sum(10))\nprint(cube_Sum(12))\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if(i%2==0):\n            sum = sum + (i*i*i)\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return int(sum([i**3 for i in range(1, n+1, 2)]))\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1) if i%2==0])\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i ** 3 for i in range(1, n+1, 2)])\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    print(n)\n    return sum([i**3 for i in range(1,n+1) if i%2 == 0])\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(n): \n        s += i**3\n    return s\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    list = []\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup[i])):\n            list.append(test_tup[i][j])\n    return list\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup_str = ''\n    for i in test_tup:\n        tup_str += i + '-'\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += i\n    print(result)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_tup = test_tup[0]\n    test_str = \"\"\n    for element in test_tup:\n        test_str += element\n    return test_str\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    final_string = ''\n    for x in test_tup:\n        final_string += str(x)\n        final_string += \"-\"\n    return final_string[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delim.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    print(*test_tup, sep=\", \")\n    print(\"\")\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**3\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/(n*n*n)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes=[]\n    for i in range(n):\n        cubes.append(i**3)\n    return sum(cubes)/len(cubes)\n    \nprint(find_Average_Of_Cube(5))\nprint(find_Average_Of_Cube(10))\nprint(find_Average_Of_Cube(100))\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n<=0:\n        return 'Enter a positive number!'\n    else:\n        sum=0\n        for i in range(1,n+1):\n            sum+=i**3\n        avg=sum/n\n        return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #Code here\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return n*(n+1)**2 / 4\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    a = 0\n    for i in range(1,n+1):\n        a += i*i*i\n    return a\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    average=0\n    for i in range(1,n+1):\n        average=average+i**3\n    return average/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)])//n\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    return [i[-1] for i in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Take tuple input\n    # Extract tuple list\n    # Create a new tuple from the list\n    # Return the tuple list\n    # Example: (\"hi\", \"a\", \"b\", \"c\") will return (\"b\", \"c\")\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # your code here\n    return [i[-1] for i in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    list_words = test_tuple.split(\" \")\n    list_words.pop(0)\n    return \" \".join(list_words)\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[::-1]\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1: \n        if x in item: \n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if list1[i] == x:\n                count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sub in list1:\n        if x in sub:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for element in list1:\n        if x in element:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda num: num % 2 == 1, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers=[]\n    for i in nums:\n        if i%2!=0:\n            odd_numbers.append(i)\n    return odd_numbers\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # return list(filter(lambda x: x%2!= 0, nums))\n    return [x for x in nums if x%2!= 0]\n    \ndef count_evennumbers(nums):\n    '''\n    Write a function to count even numbers in a list.\n    '''\n    return len([x for x in nums if x%2 == 0])\n    \ndef count_uppercase_characters(str):\n    '''\n    Write a function to count uppercase characters in a string.\n    '''\n    return len([x for x in str if x.isupper()])\n    \ndef capitalize_strings(str):\n    '''\n    Write a function to capitalize all characters in a string.\n    '''\n    # return str.capitalize()\n    return ''.join([x.upper() if x.islower() else x for x in str])\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates in a list.\n    '''\n    return list(set(nums))\n    \ndef make_upper_case(str):\n    '''\n    Write a function to convert a string to uppercase.\n    '''\n    return str.upper()\n    \ndef sort_list(nums):\n    '''\n    Write a function to sort a list in a non-decreasing order.\n    '''\n    return sorted(nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums\nprint(filter_oddnumbers([1,2,3,4,5,6,7,8,9]))\nprint(filter_oddnumbers([0,2,4,6,8]))\nprint(filter_oddnumbers([1,3,5,7,9])"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # new_nums = []\n    # for num in nums:\n    #     if num % 2 == 0:\n    #         new_nums.append(num)\n    # return new_nums\n    return [num for num in nums if num % 2 == 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = list()\n    for n in nums:\n        if n % 2!= 0:\n            odd_nums.append(n)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num%2==1]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filter_list = []\n    for num in nums:\n        if num % 2 == 1:\n            filter_list.append(num)\n    return filter_list\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = re.sub(\"-\",\"\",dt)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = dt[::-1]\n    return '-'.join(dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(\"[-]\",\"/\",dt)\ndef change_date_format2(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.replace(\"-\",\"/\")\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_list = dt.split('-')\n    date = ''\n    for item in dt_list:\n        date += item\n    return date[6:] + '-' + date[3:5] + '-' + date[:2]\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        day,month,year = match.groups()\n        day = day[2:]\n        return '{}-{}-{}'.format(day,month,year)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_list=dt.split(\"-\")\n    dt_list[0],dt_list[1],dt_list[2]=dt_list[2],dt_list[1],dt_list[0]\n    return \"-\".join(dt_list)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return \"-\".join(dt.split(\"-\"))\n    \ndef add_char(string, add):\n    '''\n    Write a function to add a character (add) before each character of the string\n    '''\n    return \"\".join(add + c for c in string)\n    \ndef remove_all(string, remove):\n    '''\n    Write a function to remove all occurences of a character (remove) from a string\n    '''\n    return \"\".join(c for c in string if c!= remove)\n    \ndef remove_spaces(string):\n    '''\n    Write a function to remove all spaces from a string\n    '''\n    return string.replace(\" \", \"\")\n    \ndef capitalize(string):\n    '''\n    Write a function to capitalize first letter of every word of a string\n    '''\n    return \" \".join([word.capitalize() for word in string.split(\" \")])\n    \ndef palindrome_permutation(string):\n    '''\n    Write a function to check if a given string is a permutation of a palindrome.\n    '''\n    return len(set(string.lower())) == 1\n    \ndef reverse_words(string):\n    '''\n    Write a function to reverse the words of a string.\n    '''\n    return \" \".join([word[::-1] for word in string.split(\" \")])\n    \ndef make_sentences(string):\n    '''\n    Write a function to convert a string to a list of sentences.\n    '''\n    string = string.split(\" \")\n    return [word for word in string if word]\n    \ndef is_leap_year(year):\n    '''\n    Write a function to check if a year is a leap year.\n    '''\n    return (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0)\n    \ndef luhn_checksum(card_number):\n    '''\n    Write a function to check if a credit card number is valid.\n    '''\n    def digits_of(n):\n        return [int(d) for d in str(n)]\n    digits = digits_of(card_number)\n    odd_digits = digits[-1::-2]\n    even_digits = digits[-2::-2]\n    checksum = 0\n    checksum += sum(odd_digits)\n    for d in even_digits:\n        checksum += sum(digits_of(d*2))\n    return checksum % 10\n    \ndef is_credit_card_valid(card_number):\n    '''\n    Write a function to check if a credit card number is valid.\n    '''\n    return luhn_checksum(card_number) == 0\n    \ndef next_greater_element_to_right(arr):\n    '''\n    Write a function to find the next greater element to the right for each element in an array.\n    The Next Greater Element (NGE) for any element arr[i] is the first greater element on the right side of arr[i] in array.\n    '''\n    output = [0 for i in range(len(arr))]\n    stack = [arr[i] for i in range(len(arr)-1,-1,-1)]\n    for i in range(len(arr)-2,-1,-1):\n        while len(stack)>0 and arr[i] >= stack[-1]:\n            stack.pop()\n        if len(stack)==0:\n            output[i] = -1\n        else:\n            output[i] = stack[-1]\n        stack.append(arr[i])\n    return output\n    \ndef find_missing_number(arr):\n    '''\n    Write a function to find the smallest positive missing number in an unsorted array.\n    '''\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] > i:\n            return i\n    return len(arr)\n    \ndef is_palindrome_permutation(string):\n    '''\n    Write a function to check if a given string is a permutation of a palindrome.\n    '''\n    string = string.lower()\n    string = remove_spaces(string)\n    char_counts = {}\n    odd_chars = 0\n    for c in string:\n        if c in char_counts:\n            char_counts[c] += 1\n        else:\n            char_counts[c] = 1\n        if char_counts[c] % 2 == 1:\n            odd_chars += 1\n        else:\n            odd_chars -= 1\n    return odd_chars <= 1\n    \ndef binary_search(arr, elem):\n    '''\n    Write a function to search an element in a sorted array using binary search.\n    '''\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == elem:\n            return mid\n        elif arr[mid] > elem:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n    \ndef is_valid_coordinates(coordinates):\n    '''\n    Write a function to check if the given coordinates are valid.\n    '''\n    valid = re.compile('[-+]?[0-9]+[.]?[0-9]*[, ]+[0-9]+[.]?[0-9]*')\n    return valid.match(coordinates)\n    \ndef find_closest_value_in_bst(tree, target):\n    '''\n    Write a function to find the closest value to a given target in a binary search tree.\n    '''\n    def closest_value_in_bst(tree, target):\n        if not tree:\n            return None\n        if abs(target - tree.value) < abs(target - closest_value_in_bst(tree.left, target)):\n            closest_value = closest_value_in_bst(tree.left, target)\n        else:\n            closest_value = tree.value\n        return closest_value\n    return closest_value_in_bst(tree, target)\n    \ndef longest_consecutive_sequence(arr):\n    '''\n    Write a function to return the length of the longest subsequence of consecutive elements.\n    '''\n    arr.sort()\n    longest_length = 1\n    current_length = 1\n    for i in range(len(arr)-1):\n        if arr[i+1] == arr[i] + 1:\n            current_length += 1\n        else:\n            longest_length = max(longest_length, current_length)\n            current_length = 1\n    return max(longest_length, current_length)\n    \ndef missing_element(arr):\n    '''\n    Write a function to find the smallest positive missing number in an unsorted array.\n    '''\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] > i:\n            return i\n    return len(arr)\n    \ndef is_unique_chars(string):\n    '''\n    Write a function to check if a string contains only unique characters.\n    '''\n    return len(set(string)) == len(string)\n    \ndef is_unique_char_mappings(string):\n    '''\n    Write a function to check if a string contains only unique character mappings.\n    '''\n    dictionary = {}\n    for c in string:\n        if c in dictionary:\n            return False\n        else:\n            dictionary[c] = 1\n    return True\n    \ndef is_unique_chars_set(string):\n    '''\n    Write a function to check if a string contains only unique characters.\n    '''\n    return len(set(string)) == len(string)\n    \ndef is_valid_parenthesis(string):\n    '''\n    Write a function to check if a string is a valid parenthesis.\n    '''\n    stack = []\n    for c in string:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n    \ndef reverse_words_in_string"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n    \n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = str(dt)\n    dt = date.replace(\"-\", \"/\")\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    a = dt.split('-')\n    ans = '-'.join(a[::-1])\n    return ans\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #create sub lists of the list\n    sublist_count = len(my_list)//2\n    while sublist_count > 0:\n        #iterate through the list and compare values\n        for start in range(sublist_count):\n            #creating a sublist of values to compare\n            sublist = my_list[start:len(my_list)-1]\n            #comparison\n            #python 3.9.5 uses insertion_sort, insertionsort was introduced in 3.4\n            #insertion_sort seems to be a better performing sort method for this particular use\n            #therefore, this sort method has been deprecated for this version\n            insertion_sort(sublist)\n            #put the sublist into the main list in the correct position\n            position = start\n            while position < (len(my_list) - sublist_count):\n                if sublist[0] > my_list[position]:\n                    my_list[position], my_list[position + sublist_count] = my_list[position + sublist_count], my_list[position]\n                    position += sublist_count\n                else:\n                    position += 1\n        #divide the list into smaller sub lists for the next iteration\n        sublist_count = sublist_count//2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            #shift the item, if needed\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length//2\n    while gap > 0:\n        for i in range(gap, length):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap//2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    length = len(my_list)\n    gap = length // 2\n    \n    while gap > 0:\n        for i in range(gap, length):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Initialize the gap\n    gap = len(my_list) // 2\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(item1 & item2 for item1, item2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(a and b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 for tup1, tup2 in zip(test_tup1,test_tup2) if tup1==tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup_and = ()\n    for x in range(len(test_tup1)):\n        if test_tup1[x] == 1 and test_tup2[x] == 1:\n            test_tup_and = test_tup_and + (1,)\n        else:\n            test_tup_and = test_tup_and + (0,)\n    return test_tup_and\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    print(set(list(test_tup1) + list(test_tup2)))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #Create a variable for the result\n    result = ()\n    #Check if the tuples are the same size\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples are not of the same size\"\n    #else\n    #if the tuples are of the same size, create a new tuple with the and elementwise comparison\n    else:\n        result = tuple(i and j for i, j in zip(test_tup1, test_tup2))\n        return result\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for x in range(0, len(test_tup1)):\n        if test_tup1[x] == test_tup2[x]:\n            result += (test_tup1[x],)\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tuple1 = test_tup1\n    tuple2 = test_tup2\n    tuple3 = ()\n    for i in range(len(tuple1)):\n        tuple3 = tuple3 + ((tuple1[i] and tuple2[i]),)\n    return tuple3\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1 & test_tup2)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0 and b == 0:\n        if c == 0:\n            print('The parabola does not have any real solution.')\n        else:\n            print('The parabola has infinite number of solution.')\n    else:\n        print('The equation of the parabola is:', 'y = {}x^2 + {}x + {}'.format(a,b,c))\n        print('The directrix of the parabola is:', '{}'.format(-b/(2*a)))\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    import math\n    def quadratic_equation(a, b, c):\n        if a == 0 and b == 0 and c == 0:\n            print('The equation is non-existent')\n        elif a == 0 and b == 0 and c!= 0:\n            print('The equation is a vertical line')\n        elif a == 0 and b!= 0:\n            x = -c/b\n            print('x = ', x)\n        else:\n            x1 = (-b + math.sqrt(b**2 - 4*a*c))/(2*a)\n            x2 = (-b - math.sqrt(b**2 - 4*a*c))/(2*a)\n            print('x1 = ', x1,'x2 = ', x2)\n    quadratic_equation(a, b, c)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculating discriminant \n    D = b * b - 4 * a * c \n    \n    if D > 0: \n        print(\"Given parabola has two distinct real roots.\") \n        print(\"The first root is:\") \n        x1 = (-b + math.sqrt(D)) / (2 * a) \n        print(x1) \n        print(\"The second root is:\") \n        x2 = (-b - math.sqrt(D)) / (2 * a) \n        print(x2) \n        \n    elif D == 0: \n        print(\"Given parabola has one double root.\") \n        print(\"The double root is:\") \n        x1 = -b / (2 * a) \n        print(x1) \n    else: \n        print(\"Given parabola has no real roots.\") \n    return\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b*b - 4*a*c\n    x_1 = (-b + d**(1/2))/(2*a)\n    x_2 = (-b - d**(1/2))/(2*a)\n    return(x_1, x_2)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    if a == 0:\n        print(\"Error: a can not be 0.\")\n        return None\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Solve for x using quadratic equation ax^2 + bx + c = 0\n    # a = 1\n    # b = -4\n    # c = 1\n    \n    D = b**2 - 4*a*c # discriminant\n    \n    if D < 0:\n        # Complex roots\n        return None\n    elif D == 0:\n        # Real and unique solution\n        return (-b/(2*a))\n    else:\n        # Real and 2 solutions\n        return ( (-b - math.sqrt(D))/(2*a), (-b + math.sqrt(D))/(2*a))\n    \n    \ndef parabola_vertex(a, b, c):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    \n    # Solve for x using quadratic equation ax^2 + bx + c = 0\n    # a = 1\n    # b = -4\n    # c = 1\n    \n    if a == 0:\n        # Vertical parabola\n        return None\n    else:\n        # Vertex is a1 = -b/(2a)\n        return (-b/(2*a))\n    \n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    from math import sqrt\n    def f(x):\n        return a*x**2 + b*x + c\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b+(b**2-4*a*c)**(1/2))/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate discriminant and find 2 solutions\n    d = (b**2) - (4*a*c)\n    \n    if d < 0: \n        return False\n    elif d == 0: \n        return [(-b)/(2*a)]\n    else: \n        return [(-b - d**0.5)/(2*a), (-b + d**0.5)/(2*a)]\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # y = ax^2 + bx + c\n    D = b ** 2 - 4 * a * c\n    return (0.5 * D) / (a)\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if set(list1) & set(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if not len(list1) or not len(list2):\n        return False\n    for element1 in list1:\n        for element2 in list2:\n            if element1 == element2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        for element in list1:\n            if element in list2:\n                return True\n    else:\n        for element in list2:\n            if element in list1:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        for element2 in list2:\n            if element == element2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return list1.intersection(list2)!= set()\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # The brute force solution:\n    # lst = list1 + list2\n    # for elem in lst:\n    #     if elem in list1 and elem in list2:\n    #         return True\n    # return False\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n    \ndef main():\n    print('The area of the trapezium is'+ str(median_trapezium(6,8,6)))\n    \nmain()\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1+base2)*height/2\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2+height)\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    base1=float(base1)\n    base2=float(base2)\n    height=float(height)\n    \n    median_length=0.0\n    \n    median_length=(base1+base2)*height/2\n    \n    return median_length\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1+base2)/2\n    median *= height/2\n    return median\n    \n    \ndef main():\n    base1 = input(\"What is the base of one of the trapezium sides?\\n\")\n    base2 = input(\"What is the base of the other trapezium side?\\n\")\n    height = input(\"What is the height of the trapezium?\\n\")\n    median = median_trapezium(float(base1),float(base2),float(height))\n    print(f\"The median length of the trapezium is {median:.2f}\")\n    \n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2)/2) * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if type(arr)!= list:\n        raise TypeError\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > max(arr):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    print(\"Please enter a number to compare with the elements of the array\")\n    num = int(input())\n    for i in range(0, len(arr)):\n        if num > arr[i]:\n            print(\"The entered number is greater than\", arr[i])\n        elif num < arr[i]:\n            print(\"The entered number is lesser than\", arr[i])\n        elif num == arr[i]:\n            print(\"The entered number is equal to\", arr[i])\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr_greater = []\n    for i in range(len(arr)):\n        if arr[i] > number:\n            arr_greater.append(arr[i])\n    return arr_greater\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i < number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for num in arr:\n        if num > number:\n            greater = True\n    return greater\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Write your code here\n    for i in arr:\n        if number <= i:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] <= number:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for n in arr:\n        if n > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > max(arr)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab+', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a.*b+\"\n    if re.search(regex,text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\nprint(text_match_one(\"ac\"))\nprint(text_match_one(\"abc\"))\nprint(text_match_one(\"abbc\"))\nprint(text_match_one(\"abbccc\"))\nprint(text_match_one(\"abccccc\"))\nprint(text_match_one(\"aacccccc\"))\nprint(text_match_one(\"aaccccccaaa\"))\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # initialize match\n    # match = re.search(\"ab+\", text)\n    match = re.search(\"a.+b{1,}\", text)\n    # if match:\n    #     print(match.group())\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found!\")\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('ab*')\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.findall('ab*?', text)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    test_patterns = [r'a.', r'ab*']\n    test_string = 'ababaabaaabaaabaaaabaaabaabaaaaa'\n    results = []\n    for pattern in test_patterns:\n        result = re.search(pattern, test_string)\n        if result:\n            results.append(result)\n    print(results)\n    return results\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab*?')\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # return re.search(r'ab*', text)\n    if text.find('ab') > -1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.findall(r'ab+',text)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'ab+'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if(n < 0) :\n        return 0\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # your code here\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if type(n)!= int :\n        return \"Please enter integer value\"\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n<0 :\n        n*=-1\n    s=str(n)\n    return int(s[len(s)-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return abs(n)%10\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #New List to store the Negative numbers in the list.\n    result = []\n    #Iterate over the elements in the list to get the Negative numbers.\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_of_nos = list1.copy()\n    negative_nos = []\n    for num in list_of_nos:\n        if num < 0:\n            negative_nos.append(num)\n    return negative_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = [1, 2, -4, 5, -10, 0, -3]\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    print(list2)\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list=[]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg_list.append(list1[i])\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_numbers = [n for n in list1 if n < 0]\n    return neg_numbers\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\nprint(neg_nos([2, -7, 5, 64, -14]))\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for i in list1:\n        if i < 0:\n            neg_nos.append(i)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x: x<0, list1))\n    \n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list_of_chars = list(str1)\n    index = 0\n    while index < len(list_of_chars):\n        if list_of_chars[index] % 2 == 1:\n            list_of_chars.pop(index)\n            index -= 1\n        index += 1\n    new_str = ''.join(list_of_chars)\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i not in ['[', ']', ':', ',','', '\\n']:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([ch for ch in str1 if ch%2==0])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # if len(str1)%2 == 0:\n    #     return False\n    # else:\n    #     even = \"\"\n    #     for char in str1:\n    #         if str1.count(char)%2 == 0:\n    #             even+=char\n    #     return even\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if ord(str1[i])%2==1:\n            str1.pop(i)\n    return ''.join(str1)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    newstr = ''\n    for char in str1:\n        if char in \"1234567890\":\n            newstr = newstr + char\n    return newstr\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    print(\"This function removes the odd characters in a string\")\n    list1 = [str(i) for i in str1]\n    list1 = [i for i in list1 if int(i)%2==0]\n    return ''.join(list1)\n    \ndef remove_even(str1):\n    '''\n    Write a function to remove even characters in a string.\n    '''\n    print(\"This function removes the even characters in a string\")\n    list1 = [str(i) for i in str1]\n    list1 = [i for i in list1 if int(i)%2!=0]\n    return ''.join(list1)\n    \ndef count_odd_even(str1):\n    '''\n    Write a function to count the odd and even characters in a string.\n    '''\n    print(\"This function counts the odd and even characters in a string\")\n    count_odd = sum([1 for i in str1 if int(i)%2==1])\n    count_even = sum([1 for i in str1 if int(i)%2==0])\n    return \"Odd Characters: \"+str(count_odd)+\"\\nEven Characters: \"+str(count_even)\n    \ndef main():\n    str1 = input(\"Enter a string: \")\n    print(remove_odd(str1))\n    print(remove_even(str1))\n    print(count_odd_even(str1))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str_list = list(str1)\n    for char in str_list:\n        if not str_list.index(char) % 2:\n            str_list.remove(char)\n    return ''.join(str_list)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([c for c in str1 if c%2==0])\nprint(remove_odd('mikey'))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                counter += 1\n    return counter\n    \ndef main():\n    '''\n    Main function for testing.\n    '''\n    test_list = [\n        (1, 3), (3, 1),\n        (1, 4), (2, 4),\n        (2, 3), (3, 2),\n        (4, 5), (5, 6),\n        (6, 4)\n    ]\n    print(count_bidirectional(test_list))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    res = set()\n    # print(test_list)\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                res.add(test_list[i])\n                res.add(test_list[j])\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # count = 0\n    # for i in range(len(test_list)):\n    #     for j in range(i+1, len(test_list)):\n    #         if (test_list[i], test_list[j]) in test_list:\n    #             count += 1\n    # return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pair_count = 0\n    for i in range(0, len(test_list)-1):\n        if test_list[i][0] == test_list[i+1][1] and test_list[i+1][1] == test_list[i][0]:\n            pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list = list(set(test_list))\n    uniq_list = []\n    for i in test_list:\n        if i not in uniq_list:\n            uniq_list.append(i)\n    #print(uniq_list)\n    cnt = 0\n    for i in range(0,len(uniq_list)-1):\n        for j in range(i+1,len(uniq_list)):\n            if (uniq_list[i][0] == uniq_list[j][1] and uniq_list[i][1] == uniq_list[j][0]) or (uniq_list[i][0] == uniq_list[j][0] and uniq_list[i][1] == uniq_list[j][1]):\n                cnt +=1\n    return cnt\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0, len(test_list)):\n        if test_list[i][0] == test_list[i][1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward_dict = {}\n    for elem in test_list:\n        if elem[0] in forward_dict:\n            forward_dict[elem[0]] += 1\n        else:\n            forward_dict[elem[0]] = 1\n        if elem[1] in forward_dict:\n            forward_dict[elem[1]] += 1\n        else:\n            forward_dict[elem[1]] = 1\n    bidirectional_count = 0\n    for key in forward_dict:\n        if key in forward_dict:\n            bidirectional_count += forward_dict[key] * forward_dict[key]\n    return bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    freq = 0\n    for i in range(len(test_list)):\n        if i + 1 < len(test_list):\n            if test_list[i][0] == test_list[i+1][1] and test_list[i+1][0] == test_list[i][1]:\n                freq += 1\n    return freq\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join([str(x) for x in L]))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = ''\n    for i in range(len(L)):\n        s += str(L[i])\n    return int(s)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    if len(L) == 1:\n        return L[0]\n    else:\n        return L[0]*(10**(len(L)-1)) + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = [str(x) for x in L]\n    return int(''.join(L))\n    \nprint(multiple_to_single([1,2,3,4,5]))"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    S = ''\n    for i in L:\n        S = S + str(i)\n    return int(S)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # way 1\n    # return int(''.join(map(str, L)))\n    # way 2\n    return int(''.join([str(item) for item in L]))\n    # way 3\n    # return int(''.join([str(item) for item in L[::-1]]))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    str1 = \"\"\n    for num in L:\n        str1 += str(num)\n    return int(str1)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    else:\n        return int(''.join([str(item) for item in L]))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #list_to_str = \"\".join(str(i) for i in L)\n    #return int(list_to_str)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions = []\n    adverbs = ['lazily', 'eagerly', 'jog', 'walk','slowly', 'quicker', 'fast']\n    for word in text.split():\n        if word.lower() in adverbs:\n            positions.append(text.split().index(word.lower()))\n    return positions\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = re.compile(r'\\s(?=.*(?i)ADVERB)')\n    #find all adverbs\n    adverbs = re.findall(regex,text)\n    #convert the output list to a dictionary with key=adverbs and values=positions\n    adverbs_positions = dict(zip(adverbs,range(len(adverbs))))\n    return adverbs_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.findall(r'[Aa]d[^Aa]*', text)\n    if result:\n        return result[0]\n    return None\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos = [m.start(0) for m in re.finditer(r'\\b(?=[MDCLXVI])M*(C|D|M)*(X|XL|L?X*)(I|V|X){0,1}(I{0,1}(X|XL|L?X*))\\b',text)]\n    return pos\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_positions = []\n    adverb_pattern = re.compile(r'(?<=\\s)(\\b\\w+\\b)(?:\\W+)')\n    adverb_list = adverb_pattern.finditer(text)\n    for adverb in adverb_list:\n        adverb_positions.append(adverb.span())\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # input: text\n    # output:\n    #        a list of tuples: (adverb, index, position)\n    #        position: 1 if first position, 2 if second position and so on.\n    #        index:  1 if the index is 0 or 1, 2 if the index is 2 or 3 and so on.\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    text = text.strip()\n    text_regex = re.compile(r'\\b((?:ADV\\b)*)')\n    result = text_regex.findall(text)\n    return result\ndef parse_text(text):\n    '''\n    Write a function that returns a dictionary where the key is the first adverb in the sentence, and the value is the sentence.\n    '''\n    result = {}\n    text = text.strip()\n    text_regex = re.compile(r'((?:ADV\\b)*)')\n    text_result = text_regex.findall(text)\n    for item in text_result:\n        if item:\n            split_item = item.split(maxsplit=1)\n            result[split_item[0]] = split_item[1]\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pass\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = []\n    sentence = []\n    adverb_position = []\n    sentence = text.split(' ')\n    for i in range(0,len(sentence)):\n        if (re.match(r'(m\u1ed7i)(.*)(ng\u00e0y)',sentence[i]) or re.match(r'(m\u1ed7i)(.*)(s\u1edbm)',sentence[i]) or re.match(r'(m\u1ed7i)(.*)(ng\u00e0y)',sentence[i]) or re.match(r'(m\u1ed7i)(.*)(s\u1edbm)',sentence[i])):\n            adverb.append(sentence[i])\n    for i in range(0,len(sentence)):\n        if(sentence[i] in adverb):\n            adverb_position.append(i)\n    print(\"Th\u1eddi gian: \",adverb_position[0])\n    print(\"Ti\u00eau \u0111\u1ec1: \",adverb_position[len(adverb_position)-1])\n    print(\"Nh\u1eefng \u0111i\u1ec1u ki\u1ec7n: \",sentence[adverb_position[0]])\n    print(\"Nh\u1eefng \u0111i\u1ec1u ki\u1ec7n: \",sentence[adverb_position[len(adverb_position)-1]])\n    return adverb_position\ndef find_adverb_position_by_object(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence by object.\n    '''\n    adverb = []\n    sentence = []\n    adverb_position = []\n    sentence = text.split(' ')\n    for i in range(0,len(sentence)):\n        if (re.match(r'(m\u1ed7i)(.*)(d\u1ec5)',sentence[i]) or re.match(r'(m\u1ed7i)(.*)(kh\u00f3)',sentence[i])):\n            adverb.append(sentence[i])\n    for i in range(0,len(sentence)):\n        if(sentence[i] in adverb):\n            adverb_position.append(i)\n    print(\"Ti\u00eau \u0111\u1ec1: \",adverb_position[0])\n    print(\"Nh\u1eefng \u0111i\u1ec1u ki\u1ec7n: \",sentence[adverb_position[0]])\n    return adverb_position\ndef find_location_position(text):\n    '''\n    Write a function to find the first location and their positions in a given sentence.\n    '''\n    location = []\n    sentence = []\n    location_position = []\n    sentence = text.split(' ')\n    for i in range(0,len(sentence)):\n        if (re.match(r'(trong)(.*)',sentence[i])):\n            location.append(sentence[i])\n    for i in range(0,len(sentence)):\n        if(sentence[i] in location):\n            location_position.append(i)\n    print(\"Th\u1eddi gian: \",location_position[0])\n    print(\"Ti\u00eau \u0111\u1ec1: \",location_position[len(location_position)-1])\n    return location_position\ndef find_location_position_by_object(text):\n    '''\n    Write a function to find the first location and their positions in a given sentence by object.\n    '''\n    location = []\n    sentence = []\n    location_position = []\n    sentence = text.split(' ')\n    for i in range(0,len(sentence)):\n        if (re.match(r'(trong)(.*)',sentence[i])):\n            location.append(sentence[i])\n    for i in range(0,len(sentence)):\n        if(sentence[i] in location):\n            location_position.append(i)\n    print(\"Ti\u00eau \u0111\u1ec1: \",location_position[0])\n    print(\"Nh\u1eefng \u0111i\u1ec1u ki\u1ec7n: \",sentence[location_position[0]])\n    return location_position\ndef find_conjunction_position(text):\n    '''\n    Write a function to find the first conjunction and their positions in a given sentence.\n    '''\n    conjunction = []\n    sentence = []\n    conjunction_position = []\n    sentence = text.split(' ')\n    for i in range(0,len(sentence)):\n        if (re.match(r'(v\u00e0)(.*)',sentence[i])):\n            conjunction.append(sentence[i])\n    for i in range(0,len(sentence)):\n        if(sentence[i] in conjunction):\n            conjunction_position.append(i)\n    print(\"Th\u1eddi gian: \",conjunction_position[0])\n    print(\"Ti\u00eau \u0111\u1ec1: \",conjunction_position[len(conjunction_position)-1])\n    return conjunction_position\ndef find_conjunction_position_by_object(text):\n    '''\n    Write a function to find the first conjunction and their positions in a given sentence by object.\n    '''\n    conjunction = []\n    sentence = []\n    conjunction_position = []\n    sentence = text.split(' ')\n    for i in range(0,len(sentence)):\n        if (re.match(r'(v\u00e0)(.*)',sentence[i])):\n            conjunction.append(sentence[i])\n    for i in range(0,len(sentence)):\n        if(sentence[i] in conjunction):\n            conjunction_position.append(i)\n    print(\"Ti\u00eau \u0111\u1ec1: \",conjunction_position[0])\n    print(\"Nh\u1eefng \u0111i\u1ec1u ki\u1ec7n: \",sentence[conjunction_position[0]])\n    return conjunction_position\ndef find_punctuation_position(text):\n    '''\n    Write a function to find the first punctuation and their positions in a given sentence.\n    '''\n    punctuation = []\n    sentence = []\n    punctuation_position = []\n    sentence = text.split(' ')\n    for i in range(0,len(sentence)):\n        if (re.match(r'[\\.\\!\\?\\;\\:\\,\\)\\(\\<\\>\\\"\\']',sentence[i])):\n            punctuation.append(sentence[i])\n    for i in range(0,len(sentence)):\n        if(sentence[i] in punctuation):\n            punctuation_position.append(i)\n    print(\"Th\u1eddi gian: \",punctuation_position[0])\n    print(\"Ti\u00eau \u0111\u1ec1: \",punctuation_position[len(punctuation_position)-1])\n    return punctuation_position\ndef find_punctuation_position_by_object(text):\n    '''\n    Write a function to find the first punctuation and their positions in a given sentence by object.\n    '''\n    punctuation = []\n    sentence = []\n    punctuation_position = []\n    sentence = text.split(' ')\n    for i in range(0,len(sentence)):\n        if (re.match(r'[\\.\\!\\?\\;\\:\\,\\)\\(\\<\\>\\\"\\']',sentence[i])):\n            punctuation.append(sentence[i])\n    for i in range(0,len(sentence)):\n        if(sentence[i] in punctuation):\n            punctuation_position.append(i)\n    print(\"Ti\u00eau \u0111\u1ec1: \",punctuation_position[0])\n    print(\"Nh\u1eefng \u0111i\u1ec1u ki\u1ec7n: \",sentence[punctuation_position[0]])\n    return punctuation_position\ndef find_preposition_position(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    preposition = []\n    sentence = []\n    preposition_positio"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #define a regular expression to find adverbs in the text\n    adverb_regex = r'(?:([0-9]+\\s){0,1}[A-Za-z]*[\\s\\-]+)([a-z]+)[\\s\\-]+((?:[0-9]+\\s){0,1}[A-Za-z]*[\\s\\-]*)(?:\\s){0,1}((?:[0-9]+\\s){0,1}[A-Za-z]*[\\s\\-]*)(?:\\s){0,1}((?:[0-9]+\\s){0,1}[A-Za-z]*[\\s\\-]*)(?:\\s){0,1}([0-9]+)'\n    #find all adverbs in the text\n    adverbs = re.findall(adverb_regex, text, re.MULTILINE | re.IGNORECASE)\n    #print(adverbs)\n    if(adverbs == []):\n        return(\"No adverbs\")\n    #iterate over the list of adverbs to find the first adverb\n    for i, adverb in enumerate(adverbs):\n        if(adverb[0]!= ''):\n            return(\"Adverb found at position \" + adverb[0])\n    return(\"No adverb found\")\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    l = int(l)\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6*l**2\n    return s\n    "
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = l**2\n    print(s)\n    return(s)\nsurfacearea_cube(5)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6 * l * l)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums = array('i', nums)\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    number_of_positive = 0\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            number_of_positive += 1\n    return number_of_positive / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len(list(filter(lambda x: x > 0, nums))) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Your code here\n    cnt = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            cnt = cnt + 1\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = []\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n    return len(positive)/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return (sum(1 for x in nums if x > 0)) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i>0:\n            count = count+1\n    return count/len(nums)\nprint(positive_count([0,1,2,3,4,5,6,-1]))"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i>0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max1 = 0\n    for num in list1:\n        if num < 0 and num > max1:\n            max1 = num\n    return max1\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    pos=0\n    neg=0\n    for i in list1:\n        if i<0:\n            neg=i\n        else:\n            pos=i\n    if neg>pos:\n        return neg\n    else:\n        return pos\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort(reverse=True)\n    for i in list1:\n        if i < 0:\n            return i\n    return None\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = -999999\n    for x in list1:\n        if x < 0 and x > largest_neg:\n            largest_neg = x\n    return largest_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg_num = None\n    for num in list1:\n        if (num < 0 and (max_neg_num == None or num > max_neg_num)):\n            max_neg_num = num\n    return max_neg_num\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = [5, 2, -6, -4, 3]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[j]>list1[i]:\n                list1[j],list1[i]=list1[i],list1[j]\n    for i in range(len(list1)):\n        if list1[i]<0:\n            return list1[i]\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1 == []:\n        return -1\n    if list1[0] < 0:\n        return list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            return list1[i]\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = [int(x) for x in list1]\n    for i in range(len(list1)):\n        list1[i] = int(list1[i])\n    print(list1)\n    largest_num = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > largest_num:\n                largest_num = list1[i]\n    print(largest_num)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_negative = 0\n    for n in list1:\n        if n < 0 and n > max_negative:\n            max_negative = n\n    return max_negative\n    \ndef smallest_neg(list1): \n    '''\n    Write a python function to find the smallest negative number from the given list.\n    '''\n    min_negative = list1[0]\n    for n in list1:\n        if n < 0 and n < min_negative:\n            min_negative = n\n    return min_negative\n    \ndef largest_pos(list1): \n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    max_positive = 0\n    for n in list1:\n        if n > 0 and n > max_positive:\n            max_positive = n\n    return max_positive\n    \ndef smallest_pos(list1): \n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    min_positive = list1[0]\n    for n in list1:\n        if n > 0 and n < min_positive:\n            min_positive = n\n    return min_positive\n    \ndef smallest_even(list1): \n    '''\n    Write a python function to find the smallest even number from the given list.\n    '''\n    min_even = list1[0]\n    for n in list1:\n        if n % 2 == 0 and n < min_even:\n            min_even = n\n    return min_even\n    \ndef largest_even(list1): \n    '''\n    Write a python function to find the largest even number from the given list.\n    '''\n    max_even = list1[0]\n    for n in list1:\n        if n % 2 == 0 and n > max_even:\n            max_even = n\n    return max_even\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # return max(list1)\n    # return min(list1)\n    return sorted(list1)[0]"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # * Solution:\n    # use map()\n    return list(map(lambda x: tuple(x[:K]) if len(x) > K else x, test_list))\n    \n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    test_tuple = test_list[0]\n    return [ tuple(test_tuple[:K]) ] + list(map(lambda t : tuple(t[:K]), test_list[1:]))\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # test_list = [(1,2,3,4,5,6,7,8), (9,10,11,12,13,14,15,16), (17,18,19,20,21,22,23,24), (25,26,27,28,29,30,31,32)]\n    # K = 3\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple[K:] for tuple in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for e in test_list:\n        if len(e) > K:\n            result.append(e[:K])\n        else:\n            result.append(e)\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(test_list[i][:K]) for i in range(len(test_list))]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(test_list[i][:K]) for i in range(len(test_list))]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    res = []\n    for (x, y, z) in test_list:\n        if len(x) > K or len(y) > K or len(z) > K:\n            continue\n        res.append((x, y, z))\n    return res\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list)==0:\n        return []\n    elif len(test_list)<K:\n        return test_list\n    else:\n        res=[]\n        for tup in test_list:\n            res.append(tup[:K])\n        return res\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tuple in test_list:\n        new_list.append(tuple[K:])\n    return new_list\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for idx in range(len(test_tup1)):\n        result.append(test_tup1[idx] * test_tup2[idx])\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index = 0\n    new_tup = ()\n    while index < len(test_tup1):\n        mul_value = test_tup1[index] * test_tup2[index]\n        new_tup += (mul_value,)\n        index += 1\n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i]*test_tup2[i],)\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    \n    for idx in range(0, len(test_tup1)):\n        test_tup1[idx] = test_tup1[idx]*test_tup2[idx]\n    \n    return tuple(test_tup1)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    mul_tup = ()\n    for i in range(len(test_tup1)):\n        mul_tup += (test_tup1[i]*test_tup2[i],)\n    return mul_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    length = min(len(test_tup1), len(test_tup2))\n    output_tup = ()\n    for index in range(length):\n        output_tup += (test_tup1[index]*test_tup2[index],)\n    return output_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + ((test_tup1[i] * test_tup2[i]),)\n    return result_tup\n    "
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return_tup = ()\n    for i, j in zip(test_tup1, test_tup2):\n        return_tup += ((i*j),)\n    return return_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple(tup1*tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n    print(result)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = Counter(lst)\n    #counts = {item:lst.count(item) for item in set(lst)}\n    for elem in tup:\n        if elem in counts:\n            print (elem, counts[elem])\n        else:\n            print (elem, \"0\")\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    for i in tup: \n        if i in count:\n            count[i] -= 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    for i in tup: \n        print(count[i], end = \" \") \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for ele in lst: \n        count = tup.count(ele)\n        print(ele, \"=\", count) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dct = dict() \n    for item in lst: \n        dct[item] = dct.get(item, 0) + 1\n    \n    return dct\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup2 = tuple(lst) \n    # print(tup2)\n    # print(tup)\n    # print(tup2.count(tup))\n    # tup2 = tuple(set(lst))\n    tup3 = [] \n    for i in tup: \n        if i in tup2: \n            tup3.append(tup2.index(i))\n        else: \n            tup3.append(0)\n    return tup3\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup) == Counter(lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup) \n    for i in lst:\n        print(i + \" Occurrences: \" + str(c[i])) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup1 = []\n    for i in tup: \n        tup1.append(i) \n    \n    tup2 = []\n    for j in lst: \n        tup2.append(j) \n    \n    # print(tup2)\n    # print(tup1)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = []\n    for t in tup:\n        for e in t:\n            if e not in lst:\n                lst.append(e)\n    print(lst)\n    count = 0\n    for el in lst:\n        count += tup.count(el)\n    print(count)\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = list()\n    for num in nums:\n        result.append(num ** 3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = [num**3 for num in nums]\n    return cube_nums\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube = num ** 3\n        cube_list.append(cube)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return cal_sum(n-1) + cal_sum(n-2)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # use the formula sum = 1/2 (n*(n+1)) - n\n    return 1/2 * (n*(n+1)) - n\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if (i % 6 == 0) or (i % 10 == 0):\n            total += i\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for x in range(1,n+1):\n        result += perrin(x)\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    return n + cal_sum(n-2) if n > 1 else 2\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 7\n    elif n == 3:\n        return 18\n    elif n == 4:\n        return 34\n    elif n == 5:\n        return 55\n    elif n == 6:\n        return 89\n    elif n == 7:\n        return 144\n    elif n == 8:\n        return 233\n    elif n == 9:\n        return 377\n    else:\n        return n * (2 + 7 + 18 + 34 + 55 + 89 + 144 + 233 + 377)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 2 + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    while n>0:\n        sum+=n%10\n        n=n//10\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*n+1-2*(n-1)*cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    import random\n    index_list = random.sample(range(l), k=l//10)\n    for i in index_list:\n        str.insert(i, \"\".join(random.choices(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", k=random.randint(1, 10))))\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    size = l\n    result = []\n    for s in str:\n        if len(s) == l:\n            result.append(s)\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # print(\"Input String: {}\".format(str))\n    # print(\"List of string: {}\".format(l))\n    # print(\"String Size: {}\".format(len(str)))\n    # print(\"List Size: {}\".format(len(l)))\n    output = []\n    for i in range(len(l)):\n        # print(\"String in list: {}\".format(l[i]))\n        # print(\"String Size: {}\".format(len(l[i])))\n        # print(\"String size in String: {}\".format(str.index(l[i])))\n        if len(l[i]) == len(str):\n            output.append(l[i])\n    print(output)\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    while i < l:\n        print(str[i:i+l])\n        i += l\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    str_list = []\n    while i < l:\n        temp_string = ''\n        count = 0\n        while str[i]!= ',' and str[i]!='':\n            temp_string += str[i]\n            i += 1\n            count += 1\n        str_list.append(temp_string)\n        i += 1\n    return str_list\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Write your code here.\n    #print(l[1:3])\n    #for i in range(0,len(l)):\n        #print(l[i])\n    #for x in l:\n    for i in range(0,len(l)):\n        if len(l[i]) == l[i]:\n            l.pop(i)\n    return l\n    #return l[:l[0]]\n    \n    #return l[:3]\n    #return l[:2]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(l)):\n        l[i] = l[i][:l[i]]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[l] for x in str]\n    #return [x[l] for x in str if len(x) == l]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    #print(str[l:l+20])\n    return str[l:l+20]\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\"\\s+\", \"\", text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1\n    print(''.join(text.split()))\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 =''.join(text1.split())\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \", \"\")\n    # return re.sub(r\"\\s+\", \"\", text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ', '')\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    regex = re.compile('\\s+')\n    text1 = regex.sub(' ', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','',text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r\"\\s+\")\n    text1 = pattern.sub(\"\",text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=re.sub(\"\\s+\", \"\",text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    try:\n        text1.replace(\" \",\"\")\n    except:\n        pass\n    return text1\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        return 0\n    else:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #actual_cost = 1000\n    #sale_amount = 1009\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n    else:\n        loss = 0\n    return loss\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount=actual_cost-sale_amount\n    if loss_amount>0:\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n    \n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n        \ndef loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount-actual_cost if sale_amount>actual_cost else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount-actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if (n % i == 0):\n            if (i % 2 == 0):\n                sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1) :\n        if (n % i == 0) :\n            if (i % 2 == 0):\n                s += i\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            result += i\n            if i == int(n/i):\n                result -= i\n    return result\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n    return sum\ndef sumofFactors2(n) :\n    '''\n    Write a python function to find the sum of odd factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            if i%2!= 0:\n                sum += i\n    return sum\ndef sumofFactors3(n) : \n    '''\n    Write a python function to find the sum of factors of a number in a range of number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            sum += i\n    return sum\ndef sumofFactors4(n) :\n    '''\n    Write a python function to find the sum of factors of a number in a range of number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum += i\n    return sum\ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef isPrime2(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = False\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i == 0:\n                flag = True\n    if flag == True:\n        return False\n    else:\n        return True\ndef isPrime3(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = False\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime4(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = True\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime5(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = True\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime6(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = True\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime7(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = True\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime8(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = True\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime9(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = True\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime10(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = True\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime11(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = True\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime12(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = True\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime13(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = True\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime14(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = True\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime15(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = True\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime16(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = True\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime17(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = True\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime18(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    flag = True\n    if n == 1 :\n        flag = False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                flag = False\n                break\n            else:\n                flag = True\n    return flag\ndef isPrime19(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    print(\"n= \",n)\n    sum = 0\n    for i in range(1,n):\n        print(\"i= \",i)\n        if (n % i == 0):\n            print(\"n%i= \",n%i)\n            if (i % 2 == 0):\n                sum += i\n                print(\"sum+=i\")\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = 0\n    for i in range(1, n+1) : \n        if n % i == 0 and (i % 2 == 0) : \n            result = result + i \n    return result\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if (n%i == 0):\n            if (i%2==0):\n                sum+=i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n//2+1):\n        if(n % i == 0):\n            sum = sum + i \n    return sum\n    \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for "
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                sum = sum + i \n            else : \n                sum = sum + (i + n / i) \n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,(int)(math.sqrt(n))+1) : \n        if (n % i == 0) : \n            if (i % 2 == 0) : \n                sum += i \n            if (i!= n // i) : \n                if (n // i % 2 == 0) : \n                    sum += n // i \n    return sum \n    \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    for i in range(2,(int)(math.sqrt(n))+1) : \n        if n % i == 0 : \n            return 0\n    return 1\n    \ndef isFibonacci(n) : \n    '''\n    Write a python function to check whether a number is Fibonacci or not.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n == sumofFactors(i) : \n            return 1\n        else : \n            sum = sumofFactors(i)\n    return 0\n    \ndef isPerfect(n) : \n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1, n) : \n        if n % i == 0 : \n            sum += i\n    if sum == n : \n        return 1\n    return 0\n    \ndef isHarmonic(n) : \n    '''\n    Write a python function to check whether a number is harmonic or not.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            sum += 1 / i\n    if math.floor(sum) == sum : \n        return 1\n    return 0\n    \ndef isAbundant(n) : \n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    sum = 0\n    for i in range(1, n) : \n        if n % i == 0 : \n            sum += i\n    if sum > n : \n        return 1\n    return 0\n    \ndef isOdd(n) : \n    '''\n    Write a python function to check whether a number is odd or not.\n    '''\n    if n % 2 == 1 : \n        return 1\n    return 0\n    \ndef isEven(n) : \n    '''\n    Write a python function to check whether a number is even or not.\n    '''\n    if n % 2 == 0 : \n        return 1\n    return 0\n    \ndef isPalindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    temp = n \n    rev = 0\n    while(temp!= 0) : \n        rev = rev * 10 + temp % 10\n        temp = temp // 10\n    if rev == n : \n        return 1\n    return 0\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = 'This is a test to match a word containing z'\n    match = re.search('[a-zA-Z]*z[a-zA-Z]*', text)\n    if match:\n        print(match.group())\n    else:\n        print('Match not found')\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search(r'\\w*z\\w*', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pass\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(\"\\w*z\\w*\", text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('[a-zA-Z0-9]*z[a-zA-Z0-9]*', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(\"\\w*z\\w*\", text) is not None\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match_word = re.search(r'[a-zA-Z]+z[a-zA-Z]+', text)\n    if match_word:\n        return match_word.group()\n    else:\n        return ''\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    matches = re.finditer(r'\\B\\w*z\\w*\\B', text, re.MULTILINE)\n    return [match.group() for match in matches]\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    patterns = '\\w*z\\w*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n    \ndef text_match_word(text):\n    '''\n    Write a function that matches 'word' or 'words'.\n    '''\n    patterns = '\\w+\\s+word\\s+\\w+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = re.compile(r\"\\b[a-zA-Z]*z[a-zA-Z]*\\b\")\n    return regex.findall(text)\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print('This month contains 31 days')\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print('This month contains 30 days')\n    elif monthnum2 == 2:\n        print('This month contains 28 days')\n    else:\n        print('Wrong month number')\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return 28\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 0 and monthnum2 < 13:\n        if monthnum2 == 2:\n            return True if (monthnum2 % 4 == 0 and monthnum2 % 100!= 0) or monthnum2 % 400 == 0 else False\n        elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum2)\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return None\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_number_31 = {'01','03','05','07','08','10','12'}\n    return monthnum2 in month_number_31\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # month_num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    month_num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    if monthnum2 in month_num:\n        return True\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = int(monthnum2)\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 % 2 == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        return 31\n    elif monthnum2 == 4 or 6 or 9 or 11:\n        return 30\n    else:\n        return 0\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        return 31\n    elif monthnum2 == 4 or 6 or 9 or 11:\n        return 30\n    else:\n        return 28\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedlist = list()\n    for word in stringlist:\n        reversedlist.append(word[::-1])\n    return reversedlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [str[::-1] for str in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_stringlist.append(reversed_string)\n    return reversed_stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    reversed_stringlist = [x[::-1] for x in stringlist]\n    return reversed_stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # print(stringlist)\n    # print(reversed(stringlist))\n    # return [s[::-1] for s in stringlist]\n    return [i[::-1] for i in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [reverse(x) for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for i in range(0, len(stringlist)):\n        newlist.append(stringlist[i][::-1])\n    return newlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # if len(stringlist) == 0:\n    #     return []\n    # return list(reversed(stringlist))\n    return [x[::-1] for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if not isinstance(stringlist, list):\n        raise ValueError('Input must be a list')\n    else:\n        reversedlist = []\n        for item in stringlist:\n            reversedlist.append(item[::-1])\n        return reversedlist\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Split the list into two\n    # find the minimum sublist and return it\n    lst1 = lst[:len(lst)//2]\n    lst2 = lst[len(lst)//2:]\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_lst = [list(x) for x in set(tuple(x) for x in lst)]\n    sub_lst.sort(key = lambda x: len(x))\n    return sub_lst[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    a=len(lst)\n    sub_lst=[]\n    for i in range(a):\n        for j in range(i,a):\n            sub_lst.append(lst[i:j+1])\n    sub_lst.sort(key=len)\n    return sub_lst[0]\n    \n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst2 = list(map(int,lst))\n    m = len(lst2)\n    n = m - 1\n    lst3 = sorted(lst2)\n    while n >= 0:\n        if lst2[n] == lst3[0]:\n            n = n - 1\n        else:\n            break\n    return n+1\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_lst = [] \n    for i in range(len(lst)): \n        for j in range(i, len(lst)): \n            sub_lst.append(lst[i:j+1]) \n    return min(sub_lst, key = len) \n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    return lst[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    list_length = len(lst)\n    min_length = 1\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst1=[]\n    min_len=len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i])<min_len:\n            lst1=[lst[i]]\n            min_len=len(lst[i])\n        elif len(lst[i])==min_len:\n            lst1.append(lst[i])\n    print(\"Minimum length sublist is :\", lst1)\n    return lst1\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst = lst[0]\n    for sublist in lst:\n        if len(sublist) < len(min_lst):\n            min_lst = sublist\n    return min_lst\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(f\"{l} x {b} = {area}\")\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area=l*b\n    print(area)\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area= l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n    "
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #code here\n    result=''\n    for i in range(len(str1)):\n        if str1[i].islower():\n            result+=str1[i]\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # for i in str1:\n    #     if i.isupper():\n    #         str1 = str1.replace(i, '')\n    # return str1\n    return re.sub('[A-Z]','',str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join(str1.split(' '))\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str_list = []\n    str_list.append(str1)\n    str_list.append(str1.lower())\n    str_list.append(str1.title())\n    str_list.append(str1.upper())\n    new_list = [str(i) for i in str_list if i!= str1]\n    return new_list\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    print(str1)\n    new_str = re.sub('[A-Z]', '', str1)\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = str1.split()\n    for word in new_str:\n        word = word.strip()\n        if re.match(\"[A-Z]+\", word):\n            str1 = re.sub(word, word.lower(), str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.findall(r'[A-Z][a-z]*', str1)\n    str3 = ''.join(str2)\n    return str3\nprint(remove_uppercase('ABCDEFG'))\nprint(remove_uppercase('PYTHON'))\nprint(remove_uppercase('12345'))\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pat = re.compile(r'\\b[A-Z]{1,}\\b')\n    uppercase_matches = uppercase_pat.findall(str1)\n    print(uppercase_matches)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = []\n    for char in str1:\n        if char not in result:\n            result.append(char)\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\nprint(Extract([[1, 2], [3, 4], [5, 6, 7]]))\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\ndef Extract_all(lst): \n    '''\n    Write a python function to get all the elements of each sublist.\n    '''\n    return [i for i in lst]\ndef Sum_all(lst): \n    '''\n    Write a python function to sum up all the elements of a list.\n    '''\n    return sum(lst)\ndef Average(lst): \n    '''\n    Write a python function to calculate the average of all the elements of a list.\n    '''\n    return sum(lst)/len(lst)\ndef Length(lst): \n    '''\n    Write a python function to count the number of elements in a list.\n    '''\n    return len(lst)\ndef Sorting(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    return sorted(lst)\ndef Sorting_des(lst): \n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    return sorted(lst, reverse = True)\ndef Selection_sort(lst): \n    '''\n    Write a python function to sort a list by selection.\n    '''\n    for j in range(0,len(lst)):\n        min_value = lst[j]\n        min_index = j\n        for i in range(j+1,len(lst)):\n            if lst[i] < min_value:\n                min_value = lst[i]\n                min_index = i\n        lst[j], lst[min_index] = lst[min_index], lst[j]\n    return lst\ndef Insertion_sort(lst): \n    '''\n    Write a python function to sort a list by insertion.\n    '''\n    for i in range(1,len(lst)):\n        item = lst[i]\n        j = i-1\n        while j >= 0 and lst[j] > item:\n            lst[j+1] = lst[j]\n            j -= 1\n        lst[j+1] = item\n    return lst\ndef Bubble_sort(lst): \n    '''\n    Write a python function to sort a list by bubble.\n    '''\n    for i in range(0,len(lst)):\n        for j in range(0,len(lst)-1-i):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\ndef Shell_sort(lst): \n    '''\n    Write a python function to sort a list by shell.\n    '''\n    inc = len(lst)//2\n    while inc:\n        for i, j in enumerate(lst):\n            while i >= inc and lst[i-inc] > j:\n                lst[i] = lst[i-inc]\n                i -= inc\n            lst[i] = j\n        inc = 1 if inc == 2 else int(inc*5/11)\n    return lst\ndef Merge_sort(lst): \n    '''\n    Write a python function to sort a list by merge.\n    '''\n    def merge(left, right):\n        result = []\n        while left and right:\n            if left[0] <= right[0]:\n                result.append(left.pop(0))\n            else:\n                result.append(right.pop(0))\n        if left:\n            result.extend(left)\n        if right:\n            result.extend(right)\n        return result\n    length = len(lst)\n    if length <= 1:\n        return lst\n    mid = length // 2\n    return merge(Merge_sort(lst[:mid]), Merge_sort(lst[mid:]))\ndef Quick_sort(lst): \n    '''\n    Write a python function to sort a list by quick.\n    '''\n    def partition(lst, low, high):\n        i = (low-1)\n        pivot = lst[high]\n        for j in range(low, high):\n            if lst[j] <= pivot:\n                i += 1\n                lst[i], lst[j] = lst[j], lst[i]\n        lst[i+1], lst[high] = lst[high], lst[i+1]\n        return (i+1)\n    def quick(lst, low, high):\n        if low < high:\n            pi = partition(lst, low, high)\n            quick(lst, low, pi-1)\n            quick(lst, pi+1, high)\n    quick(lst, 0, len(lst)-1)\n    return lst\ndef Heap_sort(lst): \n    '''\n    Write a python function to sort a list by heap.\n    '''\n    def heapify(lst, n, i):\n        max = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and lst[max] < lst[l]:\n            max = l\n        if r < n and lst[max] < lst[r]:\n            max = r\n        if max!= i:\n            lst[i], lst[max] = lst[max], lst[i]\n            heapify(lst, n, max)\n    n = len(lst)\n    for i in range(n//2, -1, -1):\n        heapify(lst, n, i)\n    for i in range(n-1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n    return lst\ndef Dijkstra_sort(lst): \n    '''\n    Write a python function to sort a list by dijkstra.\n    '''\n    def Dijkstra(lst, s):\n        import heapq\n        pq = []\n        dist = [float(\"inf\")] * len(lst)\n        dist[s] = 0\n        heapq.heappush(pq, (0, s))\n        while pq:\n            (cost, v) = heapq.heappop(pq)\n            for e in lst[v]:\n                if dist[e[0]] > dist[v] + e[1]:\n                    dist[e[0]] = dist[v] + e[1]\n                    heapq.heappush(pq, (dist[e[0]], e[0]))\n        return dist\n    return Dijkstra(lst, 0)\ndef Shell_sort_2(lst): \n    '''\n    Write a python function to sort a list by shell_sort2.\n    '''\n    def insert(lst, item):\n        if len(lst) == 0:\n            return [item]\n        index = len(lst)\n        for i in range(len(lst)):\n            if item <= lst[i]:\n                index = i\n                break\n        return lst[:index] + [item] + lst[index:]\n    length = len(lst)\n    if length <= 1:\n        return lst\n    inc = length//2\n    while inc:\n        for i, j in enumerate(lst):\n            while i >= inc and lst[i-inc] > j:\n                lst[i] = lst[i-inc]\n                i -= inc\n            lst[i] = j\n        inc = 1 if inc == 2 else int(inc*5/11)\n    return lst\ndef Quick_sort_2(lst): \n    '''\n    Write a python function to sort a list by quick_sort2.\n    '''\n    def partition(lst, low, high):\n        i = low-1\n        pivot = lst[high]\n        for j in range(low, high):\n            if lst[j] <= pivot:\n                i += 1\n                lst[i], lst[j] = lst[j], lst[i]\n        lst[i+1], lst[high] = lst[high], lst"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst] \n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [element[0] for element in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [[lst[0]] + ele for ele in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum([1 for c in str if c.isupper()])\n    \nprint(upper_ctr('GeekUph'))\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([x for x in str if x.isupper()])\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for i in str:\n        if i.isupper():\n            upper_ctr += 1\n    return upper_ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if ch.isupper():\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(c.isupper() for c in str)\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for ch in str:\n        if ch.isupper():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(map(str.isupper, str))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    return [list(a) for a in itertools.combinations(list1, 2)]\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1, 2))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    #list1 = list(combinations_list)\n    #list1.sort()\n    list1 = list(dict.fromkeys(list1))\n    list1.sort()\n    n = len(list1)\n    for i in range(n):\n        for j in range(i + 1, n):\n            combinations.append(list1[i] + list1[j])\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    list2 = list(combinations(list1, n))\n    print(list2)\n    \ncombinations_list([1,2,3])\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return list(itertools.combinations(list1, 3))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l = []\n    for i in range(0, len(list1)):\n        for j in range(i, len(list1)):\n            l.append(list1[i:j + 1])\n    return l\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #Your code here\n    from itertools import combinations\n    return list(combinations(list1, 3))\nprint(combinations_list([1, 2, 3, 4, 5]))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb = []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    for i in range(len(list1)):\n        temp = list1[i]\n        list1.pop(i)\n        for x in combinations_list(list1):\n            comb.append([temp] + x)\n        list1.insert(i,temp)\n    return comb\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l=[]\n    for i in list1:\n        l.append(i)\n    result=[]\n    # if len(l)==0:\n    #     return result\n    if len(l)==1:\n        result.append(l)\n    else:\n        for i in range(len(l)):\n            for j in combinations_list(l[:i]+l[i+1:]):\n                result.append(l[i]+j)\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    prod = 1\n    max_prod = -1\n    start = 0\n    end = 0\n    for i in range(n):\n        prod = prod * arr[i]\n        if prod > max_prod:\n            max_prod = prod\n            start = i\n            end = i\n        if prod == 0:\n            start = i+1\n            end = i+1\n            max_prod = 1\n    print(f\"Maximum product is {max_prod} obtained from the subarray {arr[start:end+1]}\")\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # input: arr[0:4] = [2, 3, -2, 4]\n    # output: 2 * 3 * -2 = 6\n    \n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    \n    max_start = 0\n    max_end = 1\n    max_sum = arr[0] * arr[1]\n    for i in range(2, n):\n        if max_sum <= 0:\n            max_start = i\n            max_sum = arr[i]\n        else:\n            max_sum = max_sum * arr[i]\n        if max_sum > arr[i]:\n            max_end = i\n            max_start = i - 1\n    return max_sum, max_start, max_end\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    result = float('-inf')\n    curr_max = 1\n    curr_min = 1\n    for num in arr:\n        if num == 0:\n            curr_max = 1\n            curr_min = 1\n        else:\n            curr_max *= num\n            curr_min *= num\n            if curr_max > result:\n                result = curr_max\n            if curr_min < 0:\n                curr_min = 1\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # brute force approach to solve the problem, which is O(n^3)\n    # (find the max subarray of size k, k = 1, 2,..., n/2 and then compare these subarrays with the max subarray of size 2k and 2k + 1)\n    # The time complexity is O(n^3)\n    max_so_far = -float('inf')\n    max_ending_here = -float('inf')\n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = 1\n    prod = 1\n    \n    for i in range(len(arr)):\n        prod *= arr[i]\n        if prod > max_prod:\n            max_prod = prod\n        if prod < 0:\n            prod = 1\n    \n    print('Maximum product subarray is {}'.format(max_prod))\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_prod = min(arr)\n    min_prod = max(arr)\n    max_prod = max(max_prod, min_prod)\n    \n    for i in range(1, len(arr)):\n        if arr[i - 1] > 0:\n            arr[i] *= arr[i - 1]\n        else:\n            arr[i] = 0\n        max_prod = max(max_prod, arr[i])\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = 1\n    max_ending_here = 1\n    start = 0\n    end = 0\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    if len(arr) == 0:\n        return 0\n    \n    max_prod = 1\n    min_prod = 1\n    max_so_far = 1\n    \n    i = 0\n    while i < len(arr):\n        max_so_far = max(arr[i], max_so_far * arr[i])\n        min_prod = min(arr[i], min_prod * arr[i])\n        max_prod = max(max_prod, max_so_far)\n        i += 1\n    \n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global_max = float(\"-inf\")\n    local_max = float(\"-inf\")\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    result = False\n    for i in range(n):\n        if(dict[i] == dict[i+1]):\n            result = True\n        else:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict[n]\n    for n in dict:\n        if dict[n]!= value:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # create a list with only one element\n    my_list = list(dict.values())\n    # check if list has only one element\n    if len(my_list) == 1:\n        return True\n    # check if all elements are same\n    for i in range(1, len(my_list)):\n        if my_list[0]!= my_list[i]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    print(dict.values())\n    if n == len(set(dict.values())):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    print('The value of {} is {}'.format(n, dict[n]))\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    first_key = dict[0].keys()\n    for key in first_key:\n        if key == 'last_name':\n            if dict[0][key] == dict[1][key]:\n                if dict[1][key] == dict[2][key]:\n                    return 'All values are same'\n                else:\n                    return 'Not all values are same'\n            else:\n                return 'Not all values are same'\n        else:\n            if dict[0][key] == dict[1][key] == dict[2][key]:\n                return 'All values are same'\n            else:\n                return 'Not all values are same'\n                \nprint(check_value({\"first_name\": \"Waqar\", \"middle_name\": \"Raza\", \"last_name\": \"Shah\"}, 3))\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    val = set(dict.values())\n    if len(val) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for v in dict.values():\n        if v!= n:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {i:v for i, v in dict1.items() if v!=''}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v!= ''}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {key: val for key, val in dict1.items() if val}\n    return result\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1:\n        if len(dict1[item])==0:\n            del dict1[item]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {i: dict1[i] for i in dict1 if dict1[i] is not None}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if not dict1[key]:\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1_clean = dict()\n    for key in dict1:\n        if dict1[key]!= '':\n            dict1_clean[key] = dict1[key]\n    return dict1_clean\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = [0, 1, 2, 3, 4, 5]\n    print(max_product(arr))\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Time complexity O(n^2)\n    # Space complexity O(n)\n    # Approach: Sort the array, then keep track of the minimum product formed by multiplying the last three elements.\n    \n    res = float('-inf')\n    curr_min_prod = 1\n    for i in range(len(arr)):\n        curr_min_prod *= arr[i]\n        res = max(res, curr_min_prod)\n        curr_min_prod = min(curr_min_prod, arr[i])\n    curr_min_prod = 1\n    for i in range(len(arr)-1, -1, -1):\n        curr_min_prod *= arr[i]\n        res = max(res, curr_min_prod)\n        curr_min_prod = min(curr_min_prod, arr[i])\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    length = len(arr)\n    if length < 2:\n        return None\n    max_product = 0\n    for i in range(length):\n        for j in range(i, length):\n            product = 1\n            for k in range(i, j + 1):\n                product *= arr[k]\n            max_product = max(max_product, product)\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return None\n    # i, j, k are pointers\n    i = 0\n    j = 1\n    k = 2\n    max_product = 0\n    while k < len(arr):\n        if arr[k] - arr[j] == 1:\n            # max_product = max(max_product, (arr[k] * arr[j] * arr[i]))\n            j = k\n            i = j - 1\n            k = j + 1\n        else:\n            k += 1\n    # max_product = max(max_product, (arr[i] * arr[j] * arr[k]))\n    return arr[i] * arr[j] * arr[k]\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] >= arr[i]:\n                result = max(result, arr[i] * arr[j])\n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_val = 1\n    if len(arr)==0:\n        return 0\n    for i in range(len(arr)):\n        max_val = max(arr[i],max_val*arr[i])\n    return max_val\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return 0\n    inc, dec = 0, 0\n    max_inc, max_dec = arr[0], arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] > max_inc:\n            inc = 1\n            max_inc = arr[i]\n        elif arr[i] == max_inc:\n            inc += 1\n        elif arr[i] < max_inc:\n            inc = 1\n        \n        if arr[i] < max_dec:\n            dec = 1\n            max_dec = arr[i]\n        elif arr[i] == max_dec:\n            dec += 1\n        elif arr[i] > max_dec:\n            dec = 1\n        \n        if inc > dec:\n            max_prod = max_inc\n        else:\n            max_prod = max_dec\n    \n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    \n    for i in range(1, n):\n        dp[i] = max(arr[i], arr[i] * dp[i-1])\n    \n    max_product = dp[n-1]\n    \n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n <= 1: return -1\n    max_prod = 1\n    min_prod = 1\n    for i in range(n):\n        max_prod = max(max_prod, min_prod * arr[i])\n        min_prod = min(min_prod, arr[i])\n    return max_prod\n    \narr = [1,2,3,4,5]"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    prod = 1\n    max_prod = 1\n    for i in range(0, len(arr)):\n        prod *= arr[i]\n        if arr[i] < 0:\n            prod = 1\n            max_prod = max(max_prod, prod)\n        else:\n            max_prod = max(max_prod, prod)\n    return max_prod\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        if i == 0:\n            result = result + (test_tup[i] + test_tup[i+1],)\n        elif i == len(test_tup) - 1:\n            result = result + (test_tup[i] + test_tup[i-1],)\n        else:\n            result = result + (test_tup[i] + test_tup[i+1] + test_tup[i-1],)\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return ()\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if i!= j:\n                result.append(test_tup[i] + test_tup[j])\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # result = None\n    # #Fill the right side of the test_tup\n    # test_tup.append(0)\n    # print(test_tup)\n    # for index in range(1, len(test_tup)):\n    #     result = test_tup[index] + test_tup[index -1]\n    #     test_tup[index] = result\n    # print(test_tup)\n    # return result\n    return test_tup[2] + test_tup[1] + test_tup[0]\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    for i in range(len(test_tup)):\n        res.append(test_tup[i] + test_tup[i+1])\n    return res\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum = []\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            break\n        else:\n            add = test_tup[i] + test_tup[i+1]\n            sum.append(add)\n    return sum\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #i have to make an assumption that the tuple is actually ordered\n    #so if it's not ordered it'll throw an exception when trying to zip\n    try:\n        pair_list = list(zip(test_tup[:-1], test_tup[1:]))\n    except TypeError:\n        return None\n    print(pair_list)\n    sum_list = []\n    for pair in pair_list:\n        sum_list.append(sum(pair))\n    print(sum_list)\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = None\n    # First solution\n    # result = tuple(a+b for a, b in zip(test_tup[:-1], test_tup[1:]))\n    # Second solution\n    result = test_tup[:-1] + tuple(a+b for a, b in zip(test_tup[1:], test_tup[:-1]))\n    # Third solution\n    # result = test_tup[1:] + tuple(a+b for a, b in zip(test_tup[:-1], test_tup[1:]))\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1]\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for x in arr: \n        prod = (prod * x) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr_length = len(arr) \n    prod = 1\n    for i in range(0, arr_length): \n        prod = (prod * arr[i]) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1; \n    for i in range(n): \n        prod = prod * (arr[i] % n) \n    return prod % n; \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    #Initialize the product to 1 \n    product = 1\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Multiplication of all elements \n    mult = 1\n    for i in range(n): \n        mult = (mult * arr[i]) % n \n    print(\"mult: \", mult) \n    \n    # Initialize result \n    result = mult \n    \n    # If mult is equal to n. Then no further \n    # multiplication is required. \n    if mult == n: \n        return 0\n    \n    # Find all primes <= n \n    primes = find_prime(n) \n    \n    # Find the prime factors of mult \n    # in the prime array. \n    prime_factors = find_prime_factors(mult, primes) \n    \n    # Find the product of all prime factors. \n    for factor in prime_factors: \n        # If number is prime, then multiply \n        # with it's corresponding prime. \n        if primes[factor] == factor: \n            result = (result * factor) % n \n        else: \n            # If number is not prime then \n            # recursively call the same function \n            # with new parameters. \n            result = find_remainder(primes[factor], n) \n            \n            result = (result * factor) % n \n            \n    return result \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    ans = 1\n    for ele in arr: \n        ans = (ans * ele) % n\n    return ans\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for ele in arr:\n        product = (product * ele) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # code here \n    # return product \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i \n        prod %= n\n    return prod \n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i+1] == l[i]+1: \n            pass\n        else: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9])) \nprint(check_Consecutive([-1,2,3,4,5,6,7,8,9])) \nprint(check_Consecutive([1,2,3,4,5,6,7,8,11])) \nprint(check_Consecutive([1,2,3,4,5,6,7,8,11]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,10]))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return False\n    l.sort()\n    diff = l[0] - 0\n    for i in range(len(l) - 1):\n        if l[i + 1]!= l[i] + 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (l == sorted(l))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        if i+1 < len(l):\n            if l[i] + 1 == l[i+1]:\n                return True\n            else:\n                return False\n        else:\n            break\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    result = False\n    if len(l) < 2:\n        result = False\n    else:\n        for i in range(len(l)-1):\n            if l[i+1] == l[i]+1:\n                result = True\n            else:\n                result = False\n                break\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l: \n        return True\n    if len(l) == 1: \n        return True\n    if sorted(l)!= l: \n        return False\n    if len(l) > 1: \n        if l[1] - l[0]!= 1: \n            return False\n        return check_Consecutive(l[1:]) \n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0, len(l) - 1):\n        if l[i+1] == l[i] + 1:\n            return True\n    return False\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert tuples into set\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n    # Find intersection of the two sets\n    return tuple(test_list1.intersection(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for tup in test_list1:\n        if tup in test_list2:\n            intersection_list.append(tup)\n    return intersection_list\n    \n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    try:\n        return list(set(test_list1) & set(test_list2))\n    except:\n        return None\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for i in test_list1:\n        if i in test_list2:\n            new_list.append(i)\n    return tuple(new_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if not test_list1 or not test_list2:\n        return []\n    result = set(test_list1[0]).intersection(*test_list1[1:], *test_list2[1:])\n    return list(result)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list3 = []\n    for x in range(len(test_list1)):\n        for y in range(len(test_list2)):\n            if test_list1[x] == test_list2[y] and test_list1[x] not in test_list3:\n                test_list3.append(test_list1[x])\n    return test_list3\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    my_dict = {}\n    for i in test_list1:\n        my_dict[i] = 1\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    intersect_list = list(set(test_list1).intersection(set(test_list2)))\n    intersect_tuple = tuple(intersect_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    temp_set1 = set()\n    temp_set2 = set()\n    for i in test_list1:\n        temp_set1.add(tuple(i))\n    for i in test_list2:\n        temp_set2.add(tuple(i))\n    return list(temp_set1 & temp_set2)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr += newch\n        else:\n            newstr += str1[i]\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = list(str1)\n    print(str2)\n    for i in range(len(str2)):\n        if ch == str2[i]:\n            str2[i] = newch\n    print(str2)\n    str3 = ''.join(str2)\n    print(str3)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    string_to_change = str1\n    result = \"\"\n    for ch in string_to_change:\n        if ch == ch:\n            result = result + newch\n        else:\n            result = result + ch\n    return result\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # for i in range(0,len(str1)):\n    #     if str1[i] == ch:\n    #         str1 = str1[:i]+newch+str1[i+1:]\n    # return str1\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    print(str1)\n    return(str1)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(0,len(str1)):\n        if str1[i] == ch:\n            str1[i] = newch\n    str1 = ''.join(str1)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1[i] = newch\n    return ''.join(str1)\n    \nif __name__ == \"__main__\":\n    import sys\n    print(replace_char(sys.argv[1],sys.argv[2],sys.argv[3]))\n    \n    \n    \n'''\nOUTPUT\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_list = sorted(dict1.items(), key=lambda kv: kv[1], reverse=True)\n    sort_dict = dict()\n    for i in sort_list:\n        sort_dict[i[0]] = i[1]\n    return sort_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {}\n    sorted_list = sorted(dict1, key=dict1.get, reverse=True)\n    for i in sorted_list:\n        sorted_dict[i] = dict1[i]\n    print(sorted_dict)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    print(dict(sorted(dict1.items(), key=lambda item: item[1])))\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))\n    \n    \ndef group_counter(dict1):\n    '''\n    Write a function to group a dictionary by value.\n    '''\n    #print(dict1)\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))\n    \n    \ndef invert_dict(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    return dict(zip(dict1.values(), dict1.keys()))\n    \n    \ndef invert_dict_2(dict1):\n    '''\n    Write a function to invert a dictionary using a list comprehension.\n    '''\n    dict_inv = {value:key for key, value in dict1.items()}\n    return dict_inv\n    \n    \ndef invert_dict_3(dict1):\n    '''\n    Write a function to invert a dictionary using the keys.\n    '''\n    dict_inv = {value:key for key, value in dict1.items()}\n    return dict_inv\n    \n    \ndef invert_dict_4(dict1):\n    '''\n    Write a function to invert a dictionary using a list comprehension.\n    '''\n    dict_inv = {value:key for key, value in dict1.items()}\n    return dict_inv\n    \n    \ndef dict_from_lists(list1, list2):\n    '''\n    Write a function that creates a dictionary from two lists containing\n    keys and values.\n    '''\n    return {list1[i]: list2[i] for i in range(len(list1))}\n    \n    \ndef dict_from_lists_2(list1, list2):\n    '''\n    Write a function that creates a dictionary from two lists containing\n    keys and values.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = list2[i]\n    return d\n    \n    \ndef dict_from_lists_3(list1, list2):\n    '''\n    Write a function that creates a dictionary from two lists containing\n    keys and values.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = list2[i]\n    return d\n    \n    \ndef dict_from_lists_4(list1, list2):\n    '''\n    Write a function that creates a dictionary from two lists containing\n    keys and values.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = list2[i]\n    return d\n    \n    \ndef dict_from_lists_5(list1, list2):\n    '''\n    Write a function that creates a dictionary from two lists containing\n    keys and values.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = list2[i]\n    return d\n    \n    \ndef dict_from_lists_6(list1, list2):\n    '''\n    Write a function that creates a dictionary from two lists containing\n    keys and values.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = list2[i]\n    return d\n    \n    \ndef unique_vals(dict1):\n    '''\n    Write a function that takes a dictionary and returns a list of keys\n    that are uniquely contained in the dictionary.\n    '''\n    return list(dict1.keys())\n    \n    \ndef unique_vals_2(dict1):\n    '''\n    Write a function that takes a dictionary and returns a list of keys\n    that are uniquely contained in the dictionary.\n    '''\n    return list(dict1.values())\n    \n    \ndef unique_vals_3(dict1):\n    '''\n    Write a function that takes a dictionary and returns a list of keys\n    that are uniquely contained in the dictionary.\n    '''\n    return set(dict1.keys())\n    \n    \ndef unique_vals_4(dict1):\n    '''\n    Write a function that takes a dictionary and returns a list of keys\n    that are uniquely contained in the dictionary.\n    '''\n    return list(set(dict1.keys()))\n    \n    \ndef unique_vals_5(dict1):\n    '''\n    Write a function that takes a dictionary and returns a list of keys\n    that are uniquely contained in the dictionary.\n    '''\n    keys = []\n    for i in range(len(dict1)):\n        keys.append(dict1[i])\n    return keys\n    \n    \ndef unique_vals_6(dict1):\n    '''\n    Write a function that takes a dictionary and returns a list of keys\n    that are uniquely contained in the dictionary.\n    '''\n    return list(set(dict1.values()))\n    \n    \ndef common_vals(dict1, dict2):\n    '''\n    Write a function that takes two dictionaries and returns a list of\n    keys that are shared between the two dictionaries.\n    '''\n    return list(set(dict1.keys()).intersection(set(dict2.keys())))\n    \n    \ndef common_vals_2(dict1, dict2):\n    '''\n    Write a function that takes two dictionaries and returns a list of\n    keys that are shared between the two dictionaries.\n    '''\n    return list(set(dict1.keys()).intersection(set(dict2.keys())))\n    \n    \ndef common_vals_3(dict1, dict2):\n    '''\n    Write a function that takes two dictionaries and returns a list of\n    keys that are shared between the two dictionaries.\n    '''\n    return list(set(dict1.keys()).intersection(set(dict2.keys())))\n    \n    \ndef common_vals_4(dict1, dict2):\n    '''\n    Write a function that takes two dictionaries and returns a list of\n    keys that are shared between the two dictionaries.\n    '''\n    return list(set(dict1.keys()).intersection(set(dict2.keys())))\n    \n    \ndef common_vals_5(dict1, dict2):\n    '''\n    Write a function that takes two dictionaries and returns a list of\n    keys that are shared between the two dictionaries.\n    '''\n    return list(set(dict1.keys()).intersection(set(dict2.keys())))\n    \n    \ndef common_vals_6(dict1, dict2):\n    '''\n    Write a function that takes two dictionaries and returns a list of\n    keys that are shared between the two dictionaries.\n    '''\n    return list(set(dict1.keys()).intersection(set(dict2.keys())))\n    \n    \ndef list_from_dict(dict1):\n    '''\n    Write a function that takes a dictionary and returns a list of keys\n    that are shared between the two dictionaries.\n    '''\n    return list(set(dict1.keys()))\n    \n    \ndef list_from_dict_2(dict1):\n    '''\n    Write a function that takes a dictionary and returns a list of keys\n    that are shared between the two dictionaries.\n    '''\n    return list(set(dict1.keys()))\n    \n    \ndef list_from_dict_3(dict1):\n    '''\n    Write a function that takes a dictionary and returns a list of keys\n    that are shared between the two dictionaries.\n    '''\n    return list(set(dict1.keys()))\n    \n    \ndef list_from_dict_4(dict1):\n    '''\n    Write a function that takes a dictionary and returns a list of keys\n    that are shared between the two dictionaries.\n    '''\n    return list(set(dict1.keys()))\n    \n    \ndef list_from_dict_5(dict1):\n    '''\n    Write a function that takes a dictionary and returns a list of keys\n    that are shared between the two dictionaries.\n    '''\n    return list(set(dict1.keys()))\n    \n    \ndef list_from_dict_"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # initialize empty list to store sorted elements in\n    sorted_list = []\n    # loop through each item in the dictionary\n    for k, v in dict1.items():\n        # append the value to the list as many times as it appears in the dict\n        sorted_list += [k] * v\n    return sorted_list\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return \"The largest sum is \" + str(max(nums)) + \" and the smallest sum is \" + str(min(nums)) + \" the sum is \" + str(sum) + \".\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    maxi = -1\n    mini = -1\n    for num in nums:\n        if num > maxi:\n            maxi = num\n        if num < mini:\n            mini = num\n    print(\"Sum of largest and smallest values in a given array is: \", maxi + mini)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[:2])\n    \ndef char_frequency(sentence):\n    '''\n    Write a python function to find the frequency of each character in a given string.\n    '''\n    return {i:sentence.count(i) for i in sentence}\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    result = sum(nums) - min(nums) - max(nums)\n    return result\nprint(big_sum([1, 2, 3, 4, 5, 6, 7]))\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum_max = 0\n    sum_min = 0\n    for num in nums:\n        if num > sum_max:\n            sum_max = num\n        if num < sum_min:\n            sum_min = num\n    return sum_max + sum_min\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums) - min(nums) - max(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return sum(nums[:-1])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val=0\n    min_val=0\n    for val in nums:\n        if val>max_val:\n            max_val=val\n        if val<min_val:\n            min_val=val\n    return max_val+min_val\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(sum(sorted(nums)[0:2]))\n    return sum(sorted(nums)[0:2])\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.split(' ')\n    for i in range(len(str1)):\n        str1[i] = re.sub(r'[a-z]', '', str1[i])\n    return''.join(str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    regex = re.compile(r'[a-z]*')\n    match = regex.search(str1)\n    print(match.group())\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    ans = ''\n    for letter in str1:\n        if letter.isupper():\n            ans += letter\n    return ans\nprint(remove_lowercase('THe quick Brow Fox'))\nprint(remove_lowercase('i dont know what is this'))\nprint(remove_lowercase('the quick Brow Fox'))\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = []\n    for i in str1:\n        if i.isupper():\n            result.append(i)\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    print(\"\\n--- Problem 1 ---\")\n    print(\"Input: str1 = 'anjaISagMA'\")\n    print(\"Output: Remove lowercase substrings from the given string\")\n    print(\"Expected: {anja, ama}\")\n    print(\"Actual  : \", end=\"\")\n    lst = re.sub('[a-z]','',str1).split(' ')\n    print(lst)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = re.sub('[a-z]', '', str1)\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Create an empty list\n    result_list = []\n    # Iterate through the string\n    for i in str1:\n        # If substring is not lowercase\n        if i.islower() == False:\n            # Append to the list\n            result_list.append(i)\n    # Join the list elements to form a string\n    str2 = ''.join(result_list)\n    # Return the string\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('[a-z]', '', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\nprint(\"\\n\")\nprint(\"Test First Digit:\")\nprint(first_Digit(56))\nprint(first_Digit(100))\nprint(first_Digit(235))\nprint(first_Digit(123456789))\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    while n >= 10 : \n        n = n // 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n /= 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 :\n        n = n * -1\n    first_digit = int(n / 10) % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10 :\n        n = n/10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n < 0):\n        return -1\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while (n>0) : \n        return n%10\n        n=n//10\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    for i in range(len(str(n))) :\n        print(n[i])\n        break\n        \n    return 0\n    \n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return (n // 10 ** 0) % 10\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = [i for i in list if i%2 == 1]\n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for x in list:\n        if x % 2!= 0:\n            odd.append(x)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # initialize an empty list\n    result = []\n    # iterate through the list\n    for i in list:\n        # if the item is odd\n        if i % 2 == 1:\n            # append it to the resulting list\n            result.append(i)\n    # return the resulting list\n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==0:\n            pass\n        else:\n            odd.append(i)\n    return odd\n    \ndef Product(list):\n    '''\n    Write a python function to multiply all numbers in a list together.\n    '''\n    product=1\n    for i in list:\n        product=product*i\n    return product\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2!=0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n    "
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    a = []\n    for i in list:\n        if i % 2 == 1:\n            a.append(i)\n    return a\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\nprint(Split([1,2,3,4,5,6,7]))\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #return a list of all the odd values from the given list.\n    return [x for x in list if x%2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!=0]\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1=0\n    sum2=0\n    for i in range(n+1):\n        sum1+=i**3\n        sum2+=i\n    return sum1-sum2\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    l = []\n    for i in range(1,n+1) :\n        l.append(i**3)\n    return abs(sum(l)**2 - sum(l))\nprint(difference(10))\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_squares = 0\n    sum_of_cubes = 0\n    for i in range(n+1):\n        sum_of_squares = sum_of_squares + i**2\n        sum_of_cubes = sum_of_cubes + i**3\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    x = 0\n    for i in range(n+1):\n        x = x + (i**3)\n    y = 0\n    for i in range(n+1):\n        y = y + i\n    return x - y**2\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = (n * (n + 1) * (2 * n + 1)) / 6\n    sum_of_numbers = n * (n + 1) / 2\n    return sum_of_cubes - sum_of_numbers\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1) :\n        sum1 = sum1 + i**3\n        sum2 = sum2 + i\n    return abs(sum1-sum2)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)]) - sum([i for i in range(1,n+1)])\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #sum_of_cubes_of_n = 0\n    #sum_of_n = 0\n    #for i in range(1,n+1):\n    #    sum_of_cubes_of_n += i*i*i\n    #    sum_of_n += i\n    #return sum_of_cubes_of_n - sum_of_n\n    return 2*n*n - (2*n)*(n+1)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print(sum(i**3 for i in range(1,n+1))-sum(i for i in range(1,n+1)))\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = 0\n    sum_of_cubes = 0\n    for i in range(n+1) :\n        total += i**3\n        sum_of_cubes += i\n    return total**2 - sum_of_cubes**2\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    C = {}\n    for i in range(1, N+1) : \n        for j in range(i+1, N+1) : \n            key = i^j\n            if key not in C : \n                C[key] = 0\n            C[key] += 1\n    \n    return len([key for key in C if C[key]%2 == 1])\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if((A[i] ^ A[j]) & 1) :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if((A[i]^A[j])%2==1) : \n                count += 1\n    return count\nA = [ 2, 3, 9, 6, 4, 7, 8 ]\nN = 7\nprint(find_Odd_Pair(A, N))\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            count += (A[i]^A[j])&1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A.sort()\n    count = 0\n    for i in range(0, N) :\n        for j in range(i+1, N) :\n            if((A[i] ^ A[j]) & 1) :\n                count = count+1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #Input : list of integers A, size N\n    #Output : number of pairs whose xor value is odd\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    C = {}\n    for i in range(N) : \n        for j in range(i,N) :\n            key = str(A[i] ^ A[j])\n            if key not in C : \n                C[key] = 0\n            C[key] += 1\n    \n    for key,value in C.items() :\n        if value % 2!= 0 :\n            print(key,value)\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor = 0\n    count = 0\n    for i in range(0, N) : \n        for j in range(i + 1, N) : \n            xor = A[i] ^ A[j] \n            if (xor % 2 == 0) : \n                continue\n            count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if((A[i]^A[j])%2 == 1) : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(0, N):\n        for j in range(i+1, N):\n            if A[i]^A[j]%2!=0:\n                count+=1\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    lowercase_string = \"\"\n    uppercase_string = \"\"\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # option 1\n    # return string.swapcase()\n    # option 2\n    return ''.join(ch.swapcase() for ch in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    print(string.swapcase())\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    result = ''\n    for char in string:\n        if char.isupper():\n            char = char.lower()\n        else:\n            char = char.upper()\n        result += char\n    \n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Loop through each character in the string\n    # and replace each character with its opposite case\n    # This assumes that every character is in ASCII and is in lowercase\n    for char in string:\n        if char.isupper():\n            string = string.replace(char, char.lower())\n        elif char.islower():\n            string = string.replace(char, char.upper())\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Solution:\n    # 1. Make a dictionary to map upper to lower and lower to upper\n    # 2. Iterate through the string and check the dictionary and flip the case\n    # 3. Return the changed string\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    low = string.lower()\n    up = string.upper()\n    return low + up\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '':\n        return ''\n    new_string = []\n    for char in string:\n        new_string.append(char.swapcase())\n    return ''.join(new_string)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n    \ndef print_list(l):\n    '''\n    Write a function to print all elements of a list.\n    '''\n    for element in l:\n        print(element)\n        \ndef print_string(string):\n    '''\n    Write a function to print all characters of a string.\n    '''\n    for character in string:\n        print(character)\n        \ndef print_dictionary(d):\n    '''\n    Write a function to print all values of a dictionary.\n    '''\n    for key in d:\n        print(d[key])\n        \ndef print_tuple(t):\n    '''\n    Write a function to print all elements of a tuple.\n    '''\n    for element in t:\n        print(element)\n        \ndef print_set(s):\n    '''\n    Write a function to print all values of a set.\n    '''\n    for element in s:\n        print(element)\n        \ndef print_frozen_set(s):\n    '''\n    Write a function to print all values of a frozenset.\n    '''\n    for element in s:\n        print(element)\n        \ndef reverse_tuple(t):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return t[::-1]\n    \ndef reverse_list(l):\n    '''\n    Write a function to reverse a list.\n    '''\n    return l[::-1]\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\n    \ndef reverse_dictionary(d):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    return {key: value for (value, key) in d.items()}\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(x) - int(y)) for x, y in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(sum([int(x) for x in str(n1)]) - sum([int(x) for x in str(n2)]))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    #step 1 - split up both numbers and create a list of each\n    split_number1 = list(str(n1))\n    split_number2 = list(str(n2))\n    #step 2 - loop through the split number list, and print each item (except the last one)\n    for i in range(len(split_number1) - 1):\n        print(split_number1[i])\n    #step 3 - loop through the split number list, and print each item (except the last one)\n    for j in range(len(split_number2) - 1):\n        print(split_number2[j])\n    #step 4 - print the last item\n    print(split_number1[-1])\n    print(split_number2[-1])\n    #step 5 - subtract the two items and print the answer\n    difference = abs(int(split_number1[-1]) - int(split_number2[-1]))\n    print(difference)\n    return difference\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(a-b) for a,b in zip(str(n1),str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n    digit_diff = 0\n    for digit in n1_str:\n        digit_diff += abs(int(digit) - int(n2_str[n1_str.index(digit)]))\n    return digit_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def sum_of_digit_diff(n1, n2):\n        if n1 == n2:\n            return 0\n        else:\n            diff = abs(n1-n2)\n            return sum(map(int,str(diff)))\n    \n    return sum_of_digit_diff(n1, n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    #print(n1,n2)\n    s1 = str(n1)\n    s2 = str(n2)\n    d1 = len(s1)\n    d2 = len(s2)\n    #print(d1,d2)\n    diff = abs(d1-d2)\n    #print(diff)\n    if diff==0:\n        d = 0\n        for i in range(0,d1):\n            diff = abs(s1[i] - s2[i])\n            d+=diff\n    else:\n        for i in range(0,min(d1,d2)):\n            diff = abs(s1[i] - s2[i])\n            d+=diff\n    return d\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s1 = str(n1)\n    s2 = str(n2)\n    d1 = dict()\n    d2 = dict()\n    for i in range(len(s1)):\n        if s1[i] in d1:\n            d1[s1[i]] += 1\n        else:\n            d1[s1[i]] = 1\n        if s2[i] in d2:\n            d2[s2[i]] += 1\n        else:\n            d2[s2[i]] = 1\n    s = 0\n    for i in d1.keys():\n        if i in d2:\n            s += abs(d1[i] - d2[i])\n        else:\n            s += d1[i]\n    for i in d2.keys():\n        if i not in d1:\n            s += d2[i]\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = str(n1)\n    num2 = str(n2)\n    diff = 0\n    for i in range(0, len(num1)):\n        diff += abs(int(num1[i]) - int(num2[i]))\n    return diff\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) < 1:\n        return None\n    max_sum = current_sum = a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    for i in range(size):\n        current_sum = 0\n        for j in range(i, size):\n            current_sum += a[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    s = 0\n    for x in range(size):\n        s += a[x]\n        if s > max_sum:\n            max_sum = s\n        elif s < 0:\n            s = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    for i in range(size):\n        sum += a[i]\n    for i in range(size):\n        for j in range(i, size):\n            sum = sum - a[i] + a[j]\n            if sum > max:\n                max = sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1,size):\n        if (current_sum < 0):\n            current_sum = a[i]\n        else:\n            current_sum += a[i]\n        if (current_sum > max_sum):\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    global_max = -10000000\n    max_sum = 0\n    start_index = 0\n    end_index = 0\n    \n    # This is a hack to force the iteration to go from the second index to the last index.\n    if size <= 0:\n        size = len(a)\n    if size < 0:\n        size = 0\n    if len(a) < size:\n        size = len(a)\n    \n    for start_index in range(size):\n        for end_index in range(start_index, size):\n            max_sum = sum(a[start_index : end_index + 1])\n            if max_sum > global_max:\n                global_max = max_sum\n                start_index = start_index\n                end_index = end_index\n    print(\"The sum of the maximum contiguous sublist is: {}.\\nThe start index is: {} and end index is {}.\".format(global_max, start_index, end_index))\n    return global_max\n    \nif __name__ == '__main__':\n    max_sub_array_sum([2, 4, -5, -1, 6, -3, -10, 7, -4, -2, 1], 8)\n    max_sub_array_sum([5, -3, -1, 2, 5], 4)\n    max_sub_array_sum([2, -3, -1, 2, 5], 4)\n    max_sub_array_sum([5, -3, -1, 2, 5], 2)\n    max_sub_array_sum([-5, -3, -1, 2, 5], 4)\n    max_sub_array_sum([-5, -3, -1, 2, 5], 2)\n    max_sub_array_sum([5, -3, -1, 2, 5], 1)\n    max_sub_array_sum([5, -3, -1, 2, 5], 0)\n    max_sub_array_sum([], 0)\n    max_sub_array_sum([-3, -1, -2, -3, -1, -2, -3], 6)\n    max_sub_array_sum([-3, -1, -2, -3, -1, -2, -3], 5)\n    max_sub_array_sum([-3, -1, -2, -3, -1, -2, -3], 4)\n    max_sub_array_sum([-3, -1, -2, -3, -1, -2, -3], 3)\n    max_sub_array_sum([-3, -1, -2, -3, -1, -2, -3], 2)\n    max_sub_array_sum([-3, -1, -2, -3, -1, -2, -3], 1)\n    max_sub_array_sum([-3, -1, -2, -3, -1, -2, -3], 0)\n    max_sub_array_sum([1], 1)\n    max_sub_array_sum([1, -3, -1, 2, 5], 4)\n    max_sub_array_sum([1, -3, -1, 2, 5], 2)\n    max_sub_array_sum([1, -3, -1, 2, 5], 1)\n    max_sub_array_sum([1, -3, -1, 2, 5], 0)\n    max_sub_array_sum([1, -3, -1, 2, 5], -1)\n    max_sub_array_sum([1, -3, -1, 2, 5], -2)\n    max_sub_array_sum([1, -3, -1, 2, 5], -3)\n    max_sub_array_sum([1, -3, -1, 2, 5], -4)\n    max_sub_array_sum([1, -3, -1, 2, 5], -5)\n    max_sub_array_sum([1, -3, -1, 2, 5], -6)\n    max_sub_array_sum([1, -3, -1, 2, 5], -7)\n    max_sub_array_sum([1, -3, -1, 2, 5], -8)\n    max_sub_array_sum([1, -3, -1, 2, 5], -9)\n    max_sub_array_sum([1, -3, -1, 2, 5], -10)\n    max_sub_array_sum([1, -3, -1, 2, 5], -11)\n    max_sub_array_sum([1, -3, -1, 2, 5], -12)\n    max_sub_array_sum([1, -3, -1, 2, 5], -13)\n    max_sub_array_sum([1, -3, -1, 2, 5], -14)\n    max_sub_array_sum([1, -3, -1, 2, 5], -15)\n    max_sub_array_sum([1, -3, -1, 2, 5], -16)\n    max_sub_array_sum([1, -3, -1, 2, 5], -17)\n    max_sub_array_sum([1, -3, -1, 2, 5], -18)\n    max_sub_array_sum([1, -3, -1, 2, 5], -19)\n    max_sub_array_sum([1, -3, -1, 2, 5], -20)\n    max_sub_array_sum([1, -3, -1, 2, 5], -21)\n    max_sub_array_sum([1, -3, -1, 2, 5], -22)\n    max_sub_array_sum([1, -3, -1, 2, 5], -23)\n    max_sub_array_sum([1, -3, -1, 2, 5], -24)\n    max_sub_array_sum([1, -3, -1, 2, 5], -25)\n    max_sub_array_sum([1, -3, -1, 2, 5], -26)\n    max_sub_array_sum([1, -3, -1, 2, 5], -27)\n    max_sub_array_sum([1, -3, -1, 2, 5], -28)\n    max_sub_array_sum([1, -3, -1, 2, 5], -29)\n    max_sub_array_sum([1, -3, -1, 2, 5], -30)\n    max_sub_array_sum([1, -3, -1, 2, 5], -31)\n    max_sub_array_sum([1, -3, -1, 2, 5], -32)\n    max_sub_array_sum([1, -3, -1, 2, 5], -33)\n    max_sub_array_sum([1, -3, -1, 2, 5], -34)\n    max_sub_array_sum([1, -3, -1, 2, 5], -35)\n    max_sub_array_sum([1, -3, -1, 2, 5], -36)\n    max_sub_array_sum([1, -3, -1, 2, 5], -37)\n    max_sub_array_sum([1, -3, -1, 2, 5], -38)\n    max_sub_array_sum([1, -3, -1, 2, 5], -39)\n    max_sub_array_sum([1, -3, -1, 2, 5], -40)\n    max_sub_array_sum([1, -3, -1, 2, 5], -41)\n    max_sub_array_sum([1, -3, -1, 2, 5], -42)\n    max_sub_array_sum([1, -3, -1, 2, 5], -43)\n    max_sub_array_sum([1, -3, -1, 2, 5], -44)\n    max_sub_array_sum([1, -3, -1, 2, 5], -45)\n    max_sub_array_sum([1, -3, -1, 2, 5], -46)\n    max_sub_array_sum([1, -3, -1, 2, 5], -47)\n    max_sub_array_sum([1, -3, -1, "
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    sum = 0\n    for i in range(size):\n        sum += a[i]\n        if sum > max_sum:\n            max_sum = sum\n        if sum < 0:\n            sum = 0\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = max_so_far = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    list1 = []\n    list2 = []\n    for i in test_tup1:\n        list1.append(i)\n    for i in test_tup2:\n        list2.append(i)\n    list3 = list1 + list2\n    sorted_list3 = sorted(list3)\n    print(sorted_list3)\n    return sorted_list3\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = ()\n    for i in test_tup1:\n        if i not in union_tup:\n            union_tup += (i,)\n    for i in test_tup2:\n        if i not in union_tup:\n            union_tup += (i,)\n    return(sorted(union_tup))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(list(set(test_tup1 + test_tup2))))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return list(set(test_tup1) | set(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) >= len(test_tup2):\n        longer_tup = test_tup1\n        short_tup = test_tup2\n    else:\n        longer_tup = test_tup2\n        short_tup = test_tup1\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in result:\n            result.append(test_tup1[i])\n    for i in range(len(test_tup2)):\n        if test_tup2[i] not in result:\n            result.append(test_tup2[i])\n    return sorted(result)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return(sorted(list(set(test_tup1).union(set(test_tup2)))))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elements = []\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set_1 = set(test_tup1)\n    set_2 = set(test_tup2)\n    union_set = set_1.union(set_2)\n    union_list = list(union_set)\n    union_list.sort()\n    return tuple(union_list)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max = 0\n    for sublist in lst:\n        if len(sublist)>max:\n            max = len(sublist)\n    return max\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        if(len(i) > max_len):\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst == []:\n        return 0\n    else:\n        return max(Find_Max_Length(lst[1:]), Find_Max_Length(lst[:-1])) + 1\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return [len(i) for i in lst]\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    temp_list = []\n    for index in range(len(lst)):\n        if type(lst[index]) is list:\n            temp_list.append(lst[index])\n        else:\n            if len(temp_list) > max_len:\n                max_len = len(temp_list)\n            temp_list = []\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for x in range(len(lst)):\n        count = 0\n        for y in range(len(lst)):\n            if lst[x] == lst[y]:\n                count += 1\n                if count > max_len:\n                    max_len = count\n            else:\n                count = 0\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max = 0\n    for list in lst:\n        if len(list)> max:\n            max = len(list)\n    return max\nprint(Find_Max_Length([[1,2], [1,2,3], [1,2,3,4], [1,2,3,4,5]]))\nprint(Find_Max_Length([[1,2,3,4], [1,2,3], [1,2,3,4,5]]))\nprint(Find_Max_Length([[1,2,3,4,5], [1,2,3,4], [1,2,3,4,5]]))\nprint(Find_Max_Length([[1,2,3], [2,3]]))\nprint(Find_Max_Length([[1,2], [2,3]]))\nprint(Find_Max_Length([[1,2], [2,3], [1,2,3,4,5]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6], [5,6,7,8,9]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6], [5,6,7,8,9]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6], [5,6,7,8,9], [6,7,8,9,10]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6], [5,6,7,8,9], [6,7,8,9,10], [7,8,9,10,11]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6], [5,6,7,8,9], [6,7,8,9,10], [7,8,9,10,11], [8,9,10,11,12]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6], [5,6,7,8,9], [6,7,8,9,10], [7,8,9,10,11], [8,9,10,11,12], [9,10,11,12,13]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6], [5,6,7,8,9], [6,7,8,9,10], [7,8,9,10,11], [8,9,10,11,12], [9,10,11,12,13], [10,11,12,13,14]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6], [5,6,7,8,9], [6,7,8,9,10], [7,8,9,10,11], [8,9,10,11,12], [9,10,11,12,13], [10,11,12,13,14], [11,12,13,14,15]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6], [5,6,7,8,9], [6,7,8,9,10], [7,8,9,10,11], [8,9,10,11,12], [9,10,11,12,13], [10,11,12,13,14], [11,12,13,14,15], [12,13,14,15,16]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6], [5,6,7,8,9], [6,7,8,9,10], [7,8,9,10,11], [8,9,10,11,12], [9,10,11,12,13], [10,11,12,13,14], [11,12,13,14,15], [12,13,14,15,16], [13,14,15,16,17]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6], [5,6,7,8,9], [6,7,8,9,10], [7,8,9,10,11], [8,9,10,11,12], [9,10,11,12,13], [10,11,12,13,14], [11,12,13,14,15], [12,13,14,15,16], [13,14,15,16,17], [14,15,16,17,18]]))\nprint(Find_Max_Length([[1,2,3,4,5], [2,3,4], [2,3,4,5], [3,4,5], [2,3,4,5,6], [5,6,7,8,9], [6,7,8,9,10], [7,8,9,10,11], [8,9,10,11,12], [9,10,11,12,13], [10,11,12,13,14], [11,12,13,14,15], [12,13,14,15,16], [13,14,15,16,17], [14,15,16,17,18], [15,16,17,18,19]]))\nprint(Find_Max_Length([[1,"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # using recursive function\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return 1\n    max_length = 1\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    lst2 = []\n    for i in lst:\n        lst2.append(len(i))\n    return max(lst2)\n    \nprint(Find_Max_Length([[1,2,3,4],[1,2,3],[1,2,3]]))\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = []\n    for i in range(0,len(lst)):\n        length.append(len(lst[i]))\n    print(length)\n    return max(length)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if isinstance(text, str):\n        return re.findall(r'\"(.*?)\"', text)\n    else:\n        return 'The input is not a string'\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # print(re.search(\"(?<=text=\\\").+(?=\\\")\",text))\n    # return re.findall('(?<=text=\").+?(?=\")',text)\n    return re.search('(?<=text=\").+?(?=\")',text).group(0)\n    # return re.findall('(?<=text=\").+?(?=\")',text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.search(r'\"(.*)\"', text)\n    if match:\n        return match.group(1)\n    return None\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #regex = re.compile('\\\"(.*)\\\"')\n    #print(regex.search(text))\n    #print(regex.search(text).group(0))\n    #print(regex.search(text).group(1))\n    \n    regex = re.compile('\\\"(.*)\\\"')\n    return regex.search(text).group(1)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall(r'\"([^\"]*)\"', text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    ret = re.findall('\"[^\"]*\"', text)\n    return ret\n    \n    \ndef get_upper_words(words):\n    '''\n    Write a function that takes a list of words and returns a new list of words where all of the words are in uppercase.\n    '''\n    ret = []\n    for word in words:\n        ret.append(word.upper())\n    return ret\n    \n    \ndef get_words_and_numbers(text):\n    '''\n    Write a function that takes a string of text and returns a list of each word in the string and the number of characters in each word.\n    '''\n    ret = re.findall('[a-zA-Z]*[0-9]*', text)\n    return ret\n    \n    \ndef get_unique_characters(words):\n    '''\n    Write a function that takes a list of words and returns a new list of words where all of the duplicates have been removed.\n    '''\n    ret = []\n    for word in words:\n        if word not in ret:\n            ret.append(word)\n    return ret\n    \n    \ndef reverse_string(text):\n    '''\n    Write a function that reverses a string.\n    '''\n    ret = text[::-1]\n    return ret\n    \n    \ndef replace_character(text, character, new_character):\n    '''\n    Write a function that takes a string and replaces a character with a new character.\n    '''\n    ret = text.replace(character, new_character)\n    return ret\n    \n    \ndef is_palindrome(text):\n    '''\n    Write a function that checks whether a given string is a palindrome or not.\n    '''\n    ret = text[::-1]\n    return ret == text\n    \n    \ndef replace_non_alphanumerics(text):\n    '''\n    Write a function that takes a string and replaces all non-alphanumerics with an empty space.\n    '''\n    ret = re.sub('[^0-9a-zA-Z]','', text)\n    return ret\n    \n    \ndef find_and_replace(text, old_word, new_word):\n    '''\n    Write a function that takes a text, a word, and a replacement word.\n    Replaces all occurrences of the old word with the replacement word.\n    '''\n    ret = text.replace(old_word, new_word)\n    return ret\n    \n    \ndef split_text(text, delimiter):\n    '''\n    Write a function that takes a string, a delimiter character, and outputs a list of substrings that are delimited by the delimiter.\n    '''\n    ret = text.split(delimiter)\n    return ret\n    \n    \ndef find_words_of_length(text, length):\n    '''\n    Write a function that takes a string, a length, and outputs a list of words that are that length.\n    '''\n    ret = []\n    for word in text.split():\n        if len(word) == length:\n            ret.append(word)\n    return ret\n    \n    \ndef count_words_in_text(text, word):\n    '''\n    Write a function that takes a string and a word and returns the number of times that word occurs in the text.\n    '''\n    ret = 0\n    for w in text.split():\n        if w == word:\n            ret += 1\n    return ret\n    \n    \ndef is_word_in_text(text, word):\n    '''\n    Write a function that takes a string and a word and returns True or False depending on whether the word is in the text.\n    '''\n    ret = False\n    for w in text.split():\n        if w == word:\n            ret = True\n    return ret\n    \n    \ndef get_frequency_of_word(text, word):\n    '''\n    Write a function that takes a string and a word and returns the frequency of that word in the text.\n    '''\n    ret = 0\n    for w in text.split():\n        if w == word:\n            ret += 1\n    return ret\n    \n    \ndef get_index_of_word(text, word):\n    '''\n    Write a function that takes a string and a word and returns the index of that word in the text.\n    '''\n    ret = -1\n    for i in range(0, len(text)):\n        if text[i] == word[0]:\n            if text[i:i+len(word)] == word:\n                ret = i\n                break\n    return ret\n    \n    \ndef get_index_of_word_ignore_case(text, word):\n    '''\n    Write a function that takes a string and a word and returns the index of that word in the text.\n    Ignore the case of the word.\n    '''\n    ret = -1\n    word = word.lower()\n    for i in range(0, len(text)):\n        if text[i].lower() == word[0]:\n            if text[i:i+len(word)].lower() == word:\n                ret = i\n                break\n    return ret\n    \n    \ndef get_index_of_word_ignore_case_and_reg(text, word):\n    '''\n    Write a function that takes a string and a word and returns the index of that word in the text.\n    Ignore the case of the word and treat the word as a regular expression.\n    '''\n    ret = -1\n    word = re.compile(word, re.IGNORECASE)\n    for i in range(0, len(text)):\n        if text[i] == word[0]:\n            if text[i:i+len(word)] == word:\n                ret = i\n                break\n    return ret\n    \n    \ndef get_all_indexes_of_word_ignore_case(text, word):\n    '''\n    Write a function that takes a string and a word and returns all of the indexes of that word in the text.\n    Ignore the case of the word.\n    '''\n    ret = []\n    word = word.lower()\n    for i in range(0, len(text)):\n        if text[i].lower() == word[0]:\n            if text[i:i+len(word)].lower() == word:\n                ret.append(i)\n    return ret\n    \n    \ndef get_all_indexes_of_word_ignore_case_and_reg(text, word):\n    '''\n    Write a function that takes a string and a word and returns all of the indexes of that word in the text.\n    Ignore the case of the word and treat the word as a regular expression.\n    '''\n    ret = []\n    word = re.compile(word, re.IGNORECASE)\n    for i in range(0, len(text)):\n        if text[i] == word[0]:\n            if text[i:i+len(word)].lower() == word:\n                ret.append(i)\n    return ret\n    \n    \ndef get_all_indexes_of_word(text, word):\n    '''\n    Write a function that takes a string and a word and returns all of the indexes of that word in the text.\n    '''\n    ret = []\n    for i in range(0, len(text)):\n        if text[i] == word[0]:\n            if text[i:i+len(word)] == word:\n                ret.append(i)\n    return ret\n    \n    \ndef get_all_indexes_of_word_ignore_case(text, word):\n    '''\n    Write a function that takes a string and a word and returns all of the indexes of that word in the text.\n    Ignore the case of the word.\n    '''\n    ret = []\n    word = word.lower()\n    for i in range(0, len(text)):\n        if text[i].lower() == word[0]:\n            if text[i:i+len(word)].lower() == word:\n                ret.append(i)\n    return ret\n    \n    \ndef get_all_indexes_of_word_ignore_case_and_reg(text, word):\n    '''\n    Write a function that takes a string and a word and returns all of the indexes of that word in the text.\n    Ignore the case of the word and treat the word as a regular expression.\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pass\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return [re.search(\"'(.+)'\",text).group(1)]\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = re.findall(r'\\\"(.*)\\\"',text)\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = re.compile('\".*?\"')\n    extracted_values = re.findall(regex, text)\n    return extracted_values\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n    \n    \ndef is_Pair(arr, n): \n    '''\n    Write a python function to check if a list of n numbers can be partitioned into two parts where both parts have equal sum.\n    '''\n    s = sum(arr)\n    if s % 2!= 0:\n        return False\n    s = s / 2\n    #print(s)\n    visited = [0]*n\n    return subset_sum(arr,n,visited,s)\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    import itertools\n    comb = itertools.combinations(arr, 2)\n    counter = 0\n    for pair in list(comb):\n        if pair[0]!= pair[1]:\n            counter += 1\n    return counter\n        \n    \n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    sum=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                sum+=1\n    return sum\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    m = dict()\n    for i in arr:\n        if i in m.keys():\n            m[i] = m[i] + 1\n        else:\n            m[i] = 1\n    count = 0\n    for i in m.keys():\n        if m[i] == 1:\n            count += 1\n    count_pairs = n*(n-1)//2 - count\n    return count_pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pair=0\n    arr.sort()\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                pair+=1\n    return pair\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    ans = 0\n    for i in range(len(arr)): \n        ans += arr[i] - i - 1\n    return ans\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    total = 0\n    arr.sort()\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                total+=1\n    print(total)\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    res = 0\n    for i in range(n):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            if arr[i]!= arr[left] and arr[i]!= arr[right]:\n                res += 1\n                left += 1\n                right -= 1\n            else:\n                if arr[i] == arr[left]:\n                    left += 1\n                if arr[i] == arr[right]:\n                    right -= 1\n    return res\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digits = []\n    while n:\n        digits.append(n % 10)\n        n //= 10\n    return sum(digits)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] >= list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    flag=False\n    if len(list1)==0:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i]<list1[i+1]:\n            flag=True\n        else:\n            flag=False\n    return flag\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0, len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1.sort()\n    if list1 == list1:\n        return True\n    return False\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # time complexity is O(n)\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #Checks if list1 is sorted ascending\n    if sorted(list1) == list1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    if list1[0] > list1[1]:\n        return False\n    return issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] <= list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    try:\n        l1 = len(list1)\n        for i in range(0, l1 - 1):\n            if list1[i] > list1[i + 1]:\n                return False\n        return True\n    except TypeError:\n        return \"Invalid Input.\"\n    except Exception:\n        return \"Error!\"\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list = []\n    for i in range(length):\n        list.append({})\n    return list\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(length):\n        my_list.append({})\n    return my_list\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length == None:\n        print(\"ERROR: You must pass in a value for length.\")\n        return None\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2=list1[:]\n    for l in list1:\n        l.sort()\n    i=0\n    while i<len(list1):\n        list1[i]=sorted(list1[i])\n        i+=1\n    list1.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # take care of empty lists\n    if len(list1) == 0:\n        return []\n    else:\n        # create a new list to store results\n        new_list = []\n        # iterate through each sublist in list1\n        for x in list1:\n            # sort the sublist\n            new_list.append(sorted(x))\n        # return sorted list\n        return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for i in list1:\n        i.sort()\n        list2.append(i)\n    return list2\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for x in list1:\n        x.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #print(list1)\n    #input()\n    list_of_lists = []\n    for i in range(len(list1)):\n        list_of_lists.append(sorted(list1[i]))\n    #print(list_of_lists)\n    #input()\n    return list_of_lists\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1_sorted = []\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n        list1_sorted.append(list1[i])\n    return list1_sorted\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort(key=len)\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1)\n    "
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in nums:\n        nums[i] = set(nums[i])\n    return len(nums[nums.keys()[0]])\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #print(nums)\n    num_list = [n for n in nums if n not in set(nums)]\n    return num_list\n    \n    \ndef two_unique_nums_list(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    num_list = [item for item in nums if nums.count(item) == 1]\n    return num_list\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for nums in nums:\n        unique_nums.add(nums)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # TODO: Implement this function!\n    # The function accepts an array of arrays, nums, and removes any duplicates from nums.\n    # It should return a new array of arrays that do not have any duplicates.\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return(list(set(nums)))\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # nums = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]\n    # nums = [[1, 2], [3, 4], [5, 6]]\n    # nums = [[1, 2], [2, 3], [3, 4]]\n    # nums = [[1, 2], [2, 3], [2, 4]]\n    # nums = [[1, 2], [2, 3], [2, 3, 4]]\n    # nums = [[1, 2, 3], [3, 4], [4, 5], [5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4], [4, 5], [5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3, 4, 5], [4, 5, 6, 7]]\n    # nums = [[1, 2, 3, 4, 5], [3"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #create a set and add elements of the list\n    result = set()\n    for i in nums:\n        result.update(i)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for each in nums:\n        if each not in result:\n            result.append(each)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    uniq_nums = []\n    for num in nums:\n        if num not in uniq_nums:\n            uniq_nums.append(num)\n    return uniq_nums\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [3,4,3,5,2,2,1,1,7,2,3,3,4,2,6,7,6,3,7,6,9,4,4,2,5,6,7,9]\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_number = []\n    product_list = []\n    # write code here\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1, 2, 2, 3, 3, 4, 4, 4]\n    unique = []\n    for element in list_data:\n        if element not in unique:\n            unique.append(element)\n    result = 1\n    for element in unique:\n        result = result * element\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    x = set(list_data)\n    y = 1\n    for i in x:\n        y = y * i\n    return y\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # The function should return the product of the unique numbers in the list.\n    return reduce(lambda x, y: x * y, list(set(list_data)))\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_data = set(list_data)\n    return functools.reduce(lambda x, y: x * y, unique_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = set(list_data)\n    unique_list = list(unique_list)\n    product = 1\n    for num in unique_list:\n        product = product*num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for each in unique_list:\n        product = product*each\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    numbers = list(list_data)\n    numbers = set(numbers)\n    result = 1\n    for number in numbers:\n        result *= number\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = list_data\n    # print(set(list_data))\n    return len(set(list_data))\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi*r**2*h+2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*pi*r*h) + (2*pi*r**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    import math\n    \n    \n    r=int(r)\n    h=int(h)\n    \n    surfacearea=2*math.pi*r*(r+h)\n    \n    surfacearea=round(surfacearea,2)\n    \n    print('The surface area of a cylinder is: ')\n    print(surfacearea)\n    \n    \ndef surfacearea_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    \n    import math\n    \n    \n    a=int(a)\n    \n    surfacearea=6*a**2\n    \n    surfacearea=round(surfacearea,2)\n    \n    print('The surface area of a cube is: ')\n    print(surfacearea)\n    \n    \ndef surfacearea_rectangle(l,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    \n    import math\n    \n    \n    l=int(l)\n    b=int(b)\n    \n    surfacearea=l*b\n    \n    surfacearea=round(surfacearea,2)\n    \n    print('The surface area of a rectangle is: ')\n    print(surfacearea)\n    \n    \ndef perimeter_parallelogram(l,b):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    \n    import math\n    \n    \n    l=int(l)\n    b=int(b)\n    \n    perimeter=l*2+b*2\n    \n    perimeter=round(perimeter,2)\n    \n    print('The perimeter of a parallelogram is: ')\n    print(perimeter)\n    \n    \ndef perimeter_triangle(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    \n    import math\n    \n    \n    b=int(b)\n    h=int(h)\n    \n    perimeter=b*3+h*3\n    \n    perimeter=round(perimeter,2)\n    \n    print('The perimeter of a triangle is: ')\n    print(perimeter)\n    \n    \ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    \n    import math\n    \n    \n    a=int(a)\n    \n    perimeter=a*4\n    \n    perimeter=round(perimeter,2)\n    \n    print('The perimeter of a square is: ')\n    print(perimeter)\n    \n    \ndef perimeter_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the perimeter of a trapezoid.\n    '''\n    \n    import math\n    \n    \n    b1=int(b1)\n    b2=int(b2)\n    h=int(h)\n    \n    perimeter=b1+b2+h\n    \n    perimeter=round(perimeter,2)\n    \n    print('The perimeter of a trapezoid is: ')\n    print(perimeter)\n    \n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    \n    import math\n    \n    \n    l=int(l)\n    w=int(w)\n    h=int(h)\n    \n    volume=l*w*h\n    \n    volume=round(volume,2)\n    \n    print('The volume of a cuboid is: ')\n    print(volume)\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    \n    import math\n    \n    \n    r=int(r)\n    h=int(h)\n    \n    volume=math.pi*r**2*h\n    \n    volume=round(volume,2)\n    \n    print('The volume of a cylinder is: ')\n    print(volume)\n    \n    \ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    \n    import math\n    \n    \n    a=int(a)\n    \n    volume=a**3\n    \n    volume=round(volume,2)\n    \n    print('The volume of a cube is: ')\n    print(volume)\n    \n    \ndef volume_rectangle(l,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    \n    import math\n    \n    \n    l=int(l)\n    b=int(b)\n    \n    volume=l*b\n    \n    volume=round(volume,2)\n    \n    print('The volume of a rectangle is: ')\n    print(volume)\n    \n    \ndef volume_parallelogram(l,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    \n    import math\n    \n    \n    l=int(l)\n    b=int(b)\n    \n    volume=l*b\n    \n    volume=round(volume,2)\n    \n    print('The volume of a parallelogram is: ')\n    print(volume)\n    \n    \ndef volume_triangle(b,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    \n    import math\n    \n    \n    b=int(b)\n    h=int(h)\n    \n    volume=1/3*b*h\n    \n    volume=round(volume,2)\n    \n    print('The volume of a triangle is: ')\n    print(volume)\n    \n    \ndef volume_square(a):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    \n    import math\n    \n    \n    a=int(a)\n    \n    volume=a**3\n    \n    volume=round(volume,2)\n    \n    print('The volume of a square is: ')\n    print(volume)\n    \n    \ndef volume_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    \n    import math\n    \n    \n    b1=int(b1)\n    b2=int(b2)\n    h=int(h)\n    \n    volume=1/2*(b1+b2)*h\n    \n    volume=round(volume,2)\n    \n    print('The volume of a trapezoid is: ')\n    print(volume)\n    \n    \ndef area_parallelogram(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    \n    import math\n    \n    \n    l=int(l)\n    b=int(b)\n    \n    area=l*b\n    \n    area=round(area,2)\n    \n    print('The area of a parallelogram is: ')\n    print(area)\n    \n    \ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    \n    import math\n    \n    \n    b=int(b)\n    h=int(h)\n    \n    area=b*h/2\n    \n    area=round(area,2)\n    \n    print('The area of a triangle is: ')\n    print(area)\n    \n    \ndef area_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    \n    import math\n    \n    \n    a=int(a)\n    \n    area=a**2\n    \n    area=round(area,2)\n    \n    print('The area of a square is: ')\n    print(area)\n    \n    \ndef area_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    \n    import math\n    \n    \n    b1=int(b1)\n    b2=int(b2)\n    h=int(h"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return round(2*3.14*(r*r) + 2*3.14*r*h,2)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2*3.14*r*h + 2*3.14*r**2\n    return sa\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol = 3.14*r**2*h\n    return vol\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    sa = 3.14*r*(r+h)\n    return sa\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = 1/3*3.14*r**2*h\n    return vol\n    \ndef main():\n    r = float(input('Enter the radius of the sphere: '))\n    h = float(input('Enter the height of the sphere: '))\n    print(f'The surface area of the sphere is {surfacearea_sphere(r,h)}')\n    print(f'The volume of the sphere is {volume_sphere(r,h)}')\n    print()\n    r = float(input('Enter the radius of the cylinder: '))\n    h = float(input('Enter the height of the cylinder: '))\n    print(f'The surface area of the cylinder is {surfacearea_cylinder(r,h)}')\n    print(f'The volume of the cylinder is {volume_cylinder(r,h)}')\n    print()\n    r = float(input('Enter the radius of the cone: '))\n    h = float(input('Enter the height of the cone: '))\n    print(f'The surface area of the cone is {surfacearea_cone(r,h)}')\n    print(f'The volume of the cone is {volume_cone(r,h)}')\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea=2*(3.14*r*(r+h))+2*(3.14*r**2)\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2*(pi*r*(r+h)) + 2*pi*r**2\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return 2 * math.pi * r * h + math.pi * r ** 2\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*3.14*(r**2) + 2*3.14*r*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*r*h + 2*math.pi*r**2\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag = False\n    for i in range(0,len(A)):\n        for j in range(0,len(B)):\n            if A[i:i+len(B)] == B:\n                flag = True\n    return flag\n    \ndef Smallest_Subarray_Sum(A,B):\n    '''\n    Write a Python program to find the smallest subarray with sum greater than a given value. \n    Input : A = [2, 1, 5, 2, 3, 2], B = 7 \n    Output : 2\n    Explanation : The smallest subarray with \n    sum greater than '7' is [5, 2].\n    '''\n    left = 0\n    right = 0\n    window_sum = 0\n    min_len = sys.maxsize\n    \n    while right < len(A):\n        window_sum += A[right]\n        while window_sum >= B:\n            min_len = min(min_len,right-left+1)\n            window_sum -= A[left]\n            left += 1\n        right += 1\n    if min_len == sys.maxsize:\n        return 0\n    else:\n        return min_len\n        \ndef Sum_of_Permutation(A):\n    '''\n    Write a Python program to find the sum of all the permutations of a given list of integers.\n    '''\n    n = len(A)\n    sum = 0\n    permutation = list(itertools.permutations(A))\n    for i in range(0,len(permutation)):\n        sum += int(''.join(str(j) for j in permutation[i]))\n    return sum\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(x in A for x in B)\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if B[i] == A[0]:\n                if A[0:] == B[i:len(A)]:\n                    return True\n                else:\n                    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    # To store the positions of the A in B\n    pos = []\n    \n    # Check if the sizes of A and B are same\n    if len(A) == len(B):\n        # Using the brute force method to check for the Sub Array\n        for i in range(len(B)):\n            if A == B[i:i + len(A)]:\n                pos.append(i)\n    \n    # If they are not equal, return false\n    if len(pos) == 0:\n        return False\n        \n    # Return true if the lists have common element at the same position\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    x = False\n    j = 0\n    for i in range(len(B)):\n        if(A == B[i:len(A)+i]):\n            x = True\n            j = i\n    return x,j\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    c = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i] == B[j]:\n                c+=1\n                break\n    if c == len(A):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # A = [1,2,3,4,5]\n    # B = [3,4,5]\n    # B = [3,4,5,6]\n    # B = [4,5]\n    # B = [4,5,1]\n    # B = [4,5,6,7]\n    # B = [4,5,6,7,8,9]\n    if len(A) > len(B):\n        return False\n    else:\n        for i in range(len(B)):\n            if B[i] == A[i]:\n                pass\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(len(A)>=len(B)): \n        result=False\n        for i in range(0,len(B)):\n            if A[i:i+len(B)]==B:\n                result=True\n                break\n        return result\n    else:\n        result=False\n        return result\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A:\n            return True\n        return False\n    \n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whethe"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A = [1, 3, 4, 5, 7] \n    B = [1, 3, 6] \n    flag = False\n    for i in range(len(B)): \n        if A[i] == B[i]: \n            flag = True\n        else: \n            flag = False\n            break\n    return flag \n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n > 1: \n        return n * last_Digit_Factorial(n - 1) \n    else: \n        return n \n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def factorial(n):\n        if n == 1:\n            return 1\n        return n * factorial(n-1)\n    last_digit = str(factorial(n))[-1]\n    return int(last_digit)\n    \ndef last_Digit_Sum_of_Digits(n):\n    '''\n    Write a Python function that finds the last digit of a factorial of a given number\n    '''\n    def sum_of_digits(n):\n        if n == 0:\n            return 0\n        return n % 10 + sum_of_digits(int(n / 10))\n    last_digit = str(sum_of_digits(n))[-1]\n    return int(last_digit)\n    \ndef reverse_num(n):\n    '''\n    Write a Python function to return the reverse of a given number.\n    '''\n    n = str(n)\n    return int(n[::-1])\n    \ndef palindrome(n):\n    '''\n    Write a Python function that checks whether the given number is palindrome or not. Return True if it is palindrome, else False.\n    '''\n    n = str(n)\n    return n == n[::-1]\n    \ndef fibonacci_number(n):\n    '''\n    Write a Python function to calculate the value of nth number in a fibonacci series. The first two numbers are 0 and 1.\n    '''\n    def fibonacci_series(n):\n        if n <= 1:\n            return n\n        return fibonacci_series(n-1) + fibonacci_series(n-2)\n    return fibonacci_series(n)\n    \ndef fibonacci_number_with_memoization(n,memo):\n    '''\n    Write a Python function to calculate the value of nth number in a fibonacci series. The first two numbers are 0 and 1.\n    Use memoization to store the values and use that to calculate the value.\n    '''\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    memo[n] = fibonacci_number_with_memoization(n-1,memo) + fibonacci_number_with_memoization(n-2,memo)\n    return memo[n]\n    \ndef fibonacci_number_with_tabulation(n):\n    '''\n    Write a Python function to calculate the value of nth number in a fibonacci series. The first two numbers are 0 and 1.\n    Use Tabulation (Bottom-Up Dynamic Programming) to store the values in an array and then use the array to calculate the value.\n    '''\n    if n <= 1:\n        return n\n    dp = [None] * (n+1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2,n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n    \ndef fibonacci_number_with_tabulation_with_optimization(n):\n    '''\n    Write a Python function to calculate the value of nth number in a fibonacci series. The first two numbers are 0 and 1.\n    Use Tabulation (Bottom-Up Dynamic Programming) to store the values in an array and then use the array to calculate the value.\n    Optimize the function to O(n) time complexity.\n    '''\n    if n <= 1:\n        return n\n    prev = 0\n    curr = 1\n    for i in range(2,n+1):\n        temp = prev + curr\n        prev = curr\n        curr = temp\n    return curr\n    \ndef stock_price_prediction(daily_closing_prices, no_of_days):\n    '''\n    Given an array of n numbers that represent the daily closing price of a stock, and an integer k, find out the maximum profit you can make from k transactions. You can make at most k transactions.\n    '''\n    def max_profit(k,d_prices):\n        if k <= 0 or len(d_prices) <= 1:\n            return 0\n        if k >= len(d_prices)/2:\n            profit = 0\n            for i in range(1,len(d_prices)):\n                if d_prices[i] > d_prices[i-1]:\n                    profit += d_prices[i] - d_prices[i-1]\n            return profit\n        profits = [None]*(k+1)\n        for i in range(1,k+1):\n            profits[i] = -max(d_prices)\n            for j in range(1,len(d_prices)):\n                profits[i] = max(profits[i],profits[i-1] + d_prices[j])\n        return profits[-1]\n    return max_profit(no_of_days,daily_closing_prices)\n    \ndef stock_price_prediction_dp(daily_closing_prices, no_of_days):\n    '''\n    Given an array of n numbers that represent the daily closing price of a stock, and an integer k, find out the maximum profit you can make from k transactions. You can make at most k transactions.\n    Use a dynamic programming approach to solve the problem.\n    '''\n    if no_of_days <= 1:\n        return 0\n    profit = [0]*(no_of_days+1)\n    max_profit = 0\n    for i in range(1,len(daily_closing_prices)):\n        profit[i] = max(profit[i-1] + daily_closing_prices[i] - daily_closing_prices[i-1],0)\n        max_profit = max(max_profit,profit[i])\n    return max_profit\n    \ndef find_duplicate(arr):\n    '''\n    Write a Python program to find and return the first duplicate element in a given array of integers. Return -1 if there is no such element.\n    '''\n    for i in range(len(arr)):\n        if arr[abs(arr[i])] >= 0:\n            arr[abs(arr[i])] = -arr[abs(arr[i])]\n        else:\n            return abs(arr[i])\n    return -1\n    \ndef count_set_bits(n):\n    '''\n    Write a Python program to count the number of set bits in a given number.\n    '''\n    def count_set_bits_dp(n):\n        if n == 0:\n            return 0\n        n = str(bin(n))[2:]\n        count = 0\n        for i in n:\n            if i == '1':\n                count += 1\n        return count\n    return count_set_bits_dp(n)\n    \ndef count_set_bits_1(n):\n    '''\n    Write a Python program to count the number of set bits in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = (n - 1) & n\n    return count\n    \ndef find_missing_num(arr,n):\n    '''\n    Write a Python program to find the smallest positive integer that is missing from a given array.\n    '''\n    arr.sort()\n    for i in range(1,n):\n        if arr[i]!= arr[i-1] + 1:\n            return arr[i-1] + 1\n    return arr[-1] + 1\n    \ndef find_missing_num_1(arr,n):\n    '''\n    Write a Python program to find the smallest positive integer that is missing from a given array.\n    '''\n    for i in range(1,n+2):\n        if i not in arr:\n            return i\n    return n+1\n    \ndef max_subarray(arr,n):\n    '''\n    Write a Python program to find the maximum sum of contiguous subarray within a one-dimensional array of numbers\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum = current_sum + arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Your code here\n    num = 1\n    for i in range(1,n+1):\n        num *= i\n    return num%10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #base case\n    if n == 0:\n        return 1\n    #recursive case\n    else:\n        return n*last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact=1\n    while n>0:\n        fact=fact*n\n        n-=1\n    return fact%10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact=1\n    for i in range(n):\n        fact=fact*(i+1)\n    \n    return fact % 10 \n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = n\n    while n >= 10:\n        result = result * (n % 10)\n        n = n / 10\n    result = result * (n % 10)\n    return result\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0: \n        return 0\n    if n<=1: \n        return n \n    else: \n        return n%10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    num=0\n    while n!=0:\n        num=num+int(n%10)\n        n=int(n/10)\n    return num\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n + 1): \n        fact = fact * i \n    return str(fact)[len(str(fact)) - 1] \n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved = [x for t in zip(list1,list2,list3) for x in t]\n    return interleaved\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    output = []\n    output.extend(list1)\n    output.extend(list2)\n    output.extend(list3)\n    return output\n    \ndef split_list(list_to_split):\n    '''\n    Write a function to split a list into two halves.\n    '''\n    half = len(list_to_split) // 2\n    first_half = list_to_split[:half]\n    second_half = list_to_split[half:]\n    return first_half, second_half\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for item in zip(list1,list2,list3)]\n    \nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [i for pair in zip(list1,list2,list3) for i in pair]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) == len(list2) and len(list1) == len(list3):\n        return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n    else:\n        return False\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_l = list1 + list2 + list3\n    return list_l\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = [element for tuple in zip(list1,list2,list3) for element in tuple]\n    return flat_list\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    assert isinstance(test_tup1, tuple)\n    assert isinstance(test_tup2, tuple)\n    assert len(test_tup1) == len(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                result.append(i)\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return set(test_tup1).union(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i,j in zip(test_tup1,test_tup2):\n        if i!= j:\n            dissimilar.append((i,j))\n    print(dissimilar)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Your code here\n    dissimilar = []\n    for i, x in enumerate(test_tup1):\n        if x!= test_tup2[i]:\n            dissimilar.append(x)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    return [i for i in set(test_tup1) if i not in set(test_tup2)]\n    \nprint(find_dissimilar([1,2,3,5,6], [2,4,3,5,6]))"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = []\n    for i, j in zip(test_tup1, test_tup2):\n        if i!= j:\n            res.append(i)\n            res.append(j)\n    return res\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #raise NotImplementedError\n    dissimilar_list = []\n    for i in test_tup1:\n        if not i in test_tup2:\n            dissimilar_list.append(i)\n    for i in test_tup2:\n        if not i in test_tup1:\n            dissimilar_list.append(i)\n    return dissimilar_list\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have same length\")\n    dissimilar = []\n    for x, y in zip(test_tup1, test_tup2):\n        if x!= y:\n            dissimilar.append(x)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar.append(i)\n    for j in test_tup2:\n        if j not in test_tup1:\n            dissimilar.append(j)\n    return dissimilar\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_list = [elem for elem in test_tuple if even_fnc(elem)]\n    return tuple(test_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        return even_ele(test_tuple[0],even_fnc) + even_ele(test_tuple[1:],even_fnc)\n    else:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = ()\n    for t in test_tuple: \n        if len(t) > 0 and even_fnc(t): \n            result += (tuple(list(t)[0::2]), )\n        elif len(t) > 0: \n            result += (tuple(t), )\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_fnc(i)\n        elif isinstance(i, list):\n            even_fnc(i)\n        else:\n            continue\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_list = []\n    for t in test_tuple:\n        if isinstance(t, tuple):\n            test_list.append(even_ele(t, even_fnc))\n        else:\n            test_list.append(t)\n    return tuple(test_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    result = () \n    \n    for ele in test_tuple: \n        \n        if ele % 2 == 0: \n            result = result + (ele,)\n            \n        elif isinstance(ele, tuple): \n            result = result + even_ele(ele, even_fnc)\n            \n    return result \n    \n    \n    \ndef main(): \n    test_tuple = (1,2,3,4,5,6,7,8,9,10) \n    result = even_ele(test_tuple, lambda x: x % 2) \n    \n    print(result) \n    \n    \nif __name__ == '__main__': \n    main() \n    \n    \n'''\nsample input\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_list = [x for x in test_tuple if even_fnc(x)]\n    return tuple(result_list)\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # test_tuple = (1, 2, ('d', 4, 'v'), (3, ), (5, 6, 7, 8, 9), 9)\n    # even_fnc = lambda x: x % 2 == 0\n    \n    def even_ele_extract(nested_tuple):\n        '''\n        Extracts elements that fulfill the given predicate. \n        '''\n        if isinstance(nested_tuple, tuple):\n            for element in nested_tuple:\n                yield from (elem for elem in even_ele_extract(element) if elem)\n        else:\n            if even_fnc(nested_tuple):\n                yield nested_tuple\n    \n    return list(even_ele_extract(test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_tuple = ()\n    for i in test_tuple: \n        if isinstance(i, tuple):\n            j = even_ele(i, even_fnc)\n        elif even_fnc(i):\n            j = i\n        else:\n            j = None\n        if j:\n            result_tuple += (j, )\n    return result_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    print(\"Original tuple is: \",test_tuple)\n    test_tuple = tuple(filter(even_fnc, test_tuple))\n    print(\"Tuple with even elements is: \",test_tuple)\n    return\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s*2 + b*(s-2)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*b)*(s+s)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    p = (b*b + b*s + s*s) ** 0.5\n    return round((0.25*b*s*(b+s+p)),2)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area= b*s*0.5\n    print(surface_area)\n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #function to find the surface area of a square pyramid with a given base edge and height.\n    surface_area = (1/2)*b*s\n    return surface_area\nprint(surface_Area(3,4))\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_Area = ((b*s)*(s+b))/2\n    return surface_Area\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b * b) * s\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Base area = b^2\n    #Side Area = 2*b^2+2*b*s\n    #S = a + a/2 + a/2 + a/2 + a + a + a + a/2 + a/2 + a/2\n    \n    base = pow(b,2)\n    side = 2*pow(b,2) + 2*b*s\n    S = base + side + side + side + base + side + side + side + base + side + side\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    l = [b,b,s]\n    return (sum(l)*2) + b\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s*1.5\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        print('empty')\n    else:\n        print('Not empty')\n    return True\ndef my_dict_check(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\ndef my_function_check(x,y):\n    '''\n    Write a function to check if 2 variables are equal\n    '''\n    if x==y:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('dictionary is empty')\n    else:\n        print('dictionary is not empty')\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not any(dict1)\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_string(string):\n    '''\n    Write a function to check if a string is empty\n    '''\n    if string == '':\n        return True\n    else:\n        return False\n        \ndef my_tuple(tuple1):\n    '''\n    Write a function to check if a tuple is empty\n    '''\n    if len(tuple1) == 0:\n        return True\n    else:\n        return False\n        \ndef my_float(float1):\n    '''\n    Write a function to check if a float is empty\n    '''\n    if float1 == 0:\n        return True\n    else:\n        return False\n        \ndef my_bool(bool1):\n    '''\n    Write a function to check if a bool is empty\n    '''\n    if bool1 == False:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n        return True\n    else:\n        print(\"Dictionary is not empty\")\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \nprint(my_dict({}))\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty!\")\n    else:\n        print(\"The dictionary is not empty\")\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n    else:\n        return catalan_number(num-1) * (4*num - 2*num*(num-1))//(num+1)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if(num<=1):\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)*2\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return factorial(2*num)//(factorial(num) * factorial(num+1))\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 2:\n        return 1\n    elif num == 2:\n        return 2\n    elif num > 2:\n        c = [1,2]\n        for i in range(num-2):\n            c.append(c[-1]*(4*c[-2]-c[-3])//(2*c[-2]+1))\n        return c[-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) * (4 * num - 2) // (num + 1)\n    \n    \ndef factorial(n):\n    '''\n    Write a function which takes positive integer n and returns n!.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n        \n        \ndef fibonacci(n):\n    '''\n    Write a function which takes positive integer n and returns nth fibonacci number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    \n    \ndef add_elements(list_of_elems):\n    '''\n    Write a function which adds all the elements of a list.\n    '''\n    if len(list_of_elems) == 0:\n        return 0\n    else:\n        return list_of_elems[0] + add_elements(list_of_elems[1:])\n        \n        \ndef swap(lst, i, j):\n    '''\n    Write a function which swaps 2 elements of a list.\n    '''\n    lst[i], lst[j] = lst[j], lst[i]\n    return lst\n    \n    \ndef shift_all_elements(lst, k):\n    '''\n    Write a function which shifts all the elements of a list.\n    '''\n    lst = lst[k:] + lst[:k]\n    return lst\n    \n    \ndef make_list(string):\n    '''\n    Write a function which takes a string and returns a list of its characters.\n    '''\n    return list(string)\n    \n    \ndef count_occurrences(lst, elem):\n    '''\n    Write a function which takes a list lst of integers and an integer elem and returns the number of occurrences of elem in lst.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        if lst[0] == elem:\n            return 1 + count_occurrences(lst[1:], elem)\n        else:\n            return count_occurrences(lst[1:], elem)\n            \n            \ndef get_occurrences(lst, elem):\n    '''\n    Write a function which takes a list lst of integers and an integer elem and returns the list of occurrences of elem in lst.\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        if lst[0] == elem:\n            return [0] + get_occurrences(lst[1:], elem)\n        else:\n            return get_occurrences(lst[1:], elem)\n        \n        \ndef permutations(lst):\n    '''\n    Write a function which takes a list lst and returns a list of all permutations of this list.\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return [lst]\n    else:\n        return permutations(lst[1:]) + [lst[0:1] + x for x in permutations(lst[1:])]\n        \n        \ndef permutations_with_replacement(lst):\n    '''\n    Write a function which takes a list lst and returns a list of all permutations of this list.\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return [lst]\n    else:\n        return permutations_with_replacement(lst[1:]) + [x + lst[0:1] for x in permutations_with_replacement(lst[1:])]\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function which takes a string s and returns whether this string is a palindrome.\n    '''\n    if len(s) == 0 or len(s) == 1:\n        return True\n    else:\n        return s[0] == s[len(s) - 1] and is_palindrome(s[1:len(s) - 1])\n    \n    \ndef generate_palindromes(s):\n    '''\n    Write a function which takes a string s and returns a list of all palindromes of this string.\n    '''\n    if len(s) == 0 or len(s) == 1:\n        return [s]\n    else:\n        return [s[0] + x + s[0] for x in generate_palindromes(s[1:])] + generate_palindromes(s[1:])\n        \n        \ndef generate_palindromes_v2(s):\n    '''\n    Write a function which takes a string s and returns a list of all palindromes of this string.\n    '''\n    if len(s) == 0 or len(s) == 1:\n        return [s]\n    else:\n        return [s[0] + x + s[0] for x in generate_palindromes_v2(s[1:])] + generate_palindromes_v2(s[1:])\n        \n        \ndef all_subsets(lst):\n    '''\n    Write a function which takes a list lst and returns a list of all subsets of this list.\n    '''\n    if len(lst) == 0:\n        return [[]]\n    else:\n        return all_subsets(lst[1:]) + [lst[0:1] + x for x in all_subsets(lst[1:])]\n    \n    \ndef all_subsets_with_replacement(lst):\n    '''\n    Write a function which takes a list lst and returns a list of all subsets of this list.\n    '''\n    if len(lst) == 0:\n        return [[]]\n    else:\n        return all_subsets_with_replacement(lst[1:]) + [lst[0:1] + x for x in all_subsets_with_replacement(lst[1:])]\n    \n    \ndef powerset(lst):\n    '''\n    Write a function which takes a list lst and returns a list of all subsets of this list.\n    '''\n    if len(lst) == 0:\n        return [[]]\n    else:\n        return powerset(lst[1:]) + [lst[0:1] + x for x in powerset(lst[1:])] + [[lst[0]] + x for x in powerset(lst[1:])]\n    \n    \ndef count_occurrences_in_list(lst, elem):\n    '''\n    Write a function which takes a list lst and an integer elem and returns the number of occurrences of elem in lst.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        if lst[0] == elem:\n            return 1 + count_occurrences_in_list(lst[1:], elem)\n        else:\n            return count_occurrences_in_list(lst[1:], elem)\n            \n            \ndef count_occurrences_v2(lst, elem):\n    '''\n    Write a function which takes a list lst and an integer elem and returns the number of occurrences of elem in lst.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        if lst[0] == elem:\n            return 1 + count_occurrences_v2(lst[1:], elem)\n        else:\n            return count_occurrences_v2(lst[1:], elem)\n            \ndef get_occurrences_v2(lst, elem):\n    '''\n    Write a function which takes a list lst and an integer elem and returns the list of occurrences of elem in lst.\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        if lst[0] == el"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return ((2*num - 1) * catalan_number(num - 1)) // (num + 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num<=1:\n        return 1\n    res = 0\n    for n in range(num):\n        res+= catalan_number(n)*catalan_number(num-n-1)\n    return res\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    res = 1\n    for i in range(0, num):\n        res = res * (2 * i + 1) // (i + 2)\n    return res\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # it is the exact match\n    pattern1 = r\"(adverb[a-z]+)(ly)\"\n    # it is an adverb + ly but not as the first word\n    pattern2 = r\"([a-z]+)(adverb[a-z]+)(ly)\"\n    # it is a word followed by an adverb + ly\n    pattern3 = r\"(adverb[a-z]+)([a-z]+)(ly)\"\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile(r'\\b[a-z]*ly\\b')\n    matches = regex.findall(text)\n    if matches:\n        return matches\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #finds the adverbs by matching the text after ly to the adverb list \n    #if no adverbs found, returns None\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb=re.compile(r'\\w+ly\\b')\n    print(adverb.findall(text))\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb=re.compile(r\"\\w+ly$\")\n    result=re.finditer(adverb, text)\n    \n    result_list=[]\n    for i in result:\n        result_list.append(i.group(0))\n    \n    return result_list\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    match = re.findall(r'\\w+ly', text)\n    if not match:\n        return \"no adverb found\"\n    else:\n        return match[0]\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall('[a-z]ly', text)\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # mydict={}\n    # for word in text.split():\n    #     if word.endswith(\"ly\"):\n    #         mydict[word] = mydict.get(word,text.find(word))\n    # print(mydict)\n    # return mydict.values()\n    \n    return re.findall(r'ly\\b',text)"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    start_pattern = r'(?<=\\w)ly(?=\\w)'\n    end_pattern = r'(?<=\\w)ly(?=\\w)'\n    matches = re.findall(start_pattern, text)\n    if not matches:\n        return 'No adverbs ending with ly found'\n    else:\n        matches = list(map(lambda match: match[0], matches))\n        for match in matches:\n            start_positions = re.finditer(start_pattern, text)\n            end_positions = re.finditer(end_pattern, text)\n            for start, end in zip(start_positions, end_positions):\n                start_index = start.start()\n                end_index = end.start()\n                print(f'{match} starts at position {start_index} and ends at position {end_index}')\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    adverb_list = []\n    adverb_list = re.findall('ly$',text)\n    if adverb_list:\n        result.append(adverb_list[0])\n        result.append(text.index(adverb_list[0]))\n        return result\n    return \"no adverb\"\n    \n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    def by_price(item):\n        return item[1]\n    most_expensive_items = heapq.nlargest(n,items,key=by_price)\n    return most_expensive_items\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n, items, key=lambda x: x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    sorted_items = {}\n    # Use a max heap to store the n most expensive items\n    max_heap = []\n    for item, price in items:\n        sorted_items[item] = price\n    # Push the first n items onto the heap\n    for i in range(n):\n        heapq.heappush(max_heap, (-sorted_items[item], item))\n    print(max_heap)\n    # Use a while loop to pop off the next expensive item off the heap\n    # Add the next expensive item on the heap\n    # Add the item's price to the running total\n    total = 0\n    while max_heap:\n        price, item = heapq.heappop(max_heap)\n        print('Popped item: {}, price: {}'.format(item, -price))\n        total += -price\n    return total\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    item_counter=dict()\n    for item in items:\n        item_counter[item]=0\n    for item in items:\n        item_counter[item]+=1\n    heap_list=[]\n    for i in range(n):\n        heapq.heappush(heap_list,(-1*item_counter[i],i))\n    top_n_list=[]\n    for i in range(n):\n        top_n_list.append(heapq.heappop(heap_list)[1])\n    return top_n_list\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #O(nlogn)\n    #heapq.heapify(items)\n    #return [heapq.heappop(items) for i in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Your code here\n    # Create a max-heap data structure to store the items.\n    max_heap = []\n    for i in range(len(items)):\n        # Insert the item into the max-heap data structure.\n        heapq.heappush(max_heap, (-1*items[i], items[i]))\n        # Remove the top element from the max-heap data structure and return it.\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Extract the top items from the max-heap and return them.\n    return [item[1] for item in max_heap]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(reverse=True)\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Your code here\n    # Note: Implementing Heap data structure can be tricky.\n    #       Here is some info that might help:\n    #       1. Think about in which order you want to compare the values when adding an item in the heap\n    #       2. By default, python implements a min-heap. This means that the smallest/root element is at the bottom of the tree\n    #       3. The way you remove an element is also by default the smallest/root. \n    #       4. Keep that in mind when writing the code\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,-items[i])\n    for i in range(n,len(items)):\n        if -items[i]>heap[0]:\n            heapq.heapreplace(heap, -items[i])\n    for i in range(n):\n        print(-heap[i])\nitems=[2,100,4,55,8]\nn=2\nexpensive_items(items,n)\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # O(n) where n is the number of items\n    # O(n log n) where n is the number of items\n    # O(n log n + n) where n is the number of items\n    # O(n log n + n log n) where n is the number of items\n    \n    # heapq.nlargest(n,items)\n    # heapq.nsmallest(n,items)\n    \n    # O(n log n) where n is the number of items\n    return heapq.nlargest(n,items,key=lambda x:x[1])\n    \n    # O(n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n) where n is the number of items\n    # O(n log n) where n is the number of items\n    # O(n log n + n) where n is the number of items\n    # O(n log n + n log n) where n is the number of items\n    \n    # O(n log n) where n is the number of items\n    return sorted(items,key=lambda x:x[1])[:n]\n    \n    # O(n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n log n) where n is the number of items\n    return sorted(items,key=lambda x:x[1])[:n]\n    \n    # O(n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n) where n is the number of items\n    # O(n log n) where n is the number of items\n    # O(n log n + n) where n is the number of items\n    # O(n log n + n log n) where n is the number of items\n    \n    # O(n log n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n) where n is the number of items\n    # O(n log n) where n is the number of items\n    # O(n log n + n) where n is the number of items\n    # O(n log n + n log n) where n is the number of items\n    \n    # O(n log n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n log n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n) where n is the number of items\n    # O(n log n) where n is the number of items\n    # O(n log n + n) where n is the number of items\n    # O(n log n + n log n) where n is the number of items\n    \n    # O(n log n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n log n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n) where n is the number of items\n    # O(n log n) where n is the number of items\n    # O(n log n + n) where n is the number of items\n    # O(n log n + n log n) where n is the number of items\n    \n    # O(n) where n is the number of items\n    # O(n log n) where n is the number of items\n    # O(n log n + n) where n is the number of items\n    # O(n log n + n log n) where n is the number of items\n    \n    # O(n log n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n log n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n) where n is the number of items\n    # O(n log n) where n is the number of items\n    # O(n log n + n) where n is the number of items\n    # O(n log n + n log n) where n is the number of items\n    \n    # O(n) where n is the number of items\n    # O(n log n) where n is the number of items\n    # O(n log n + n) where n is the number of items\n    # O(n log n + n log n) where n is the number of items\n    \n    # O(n log n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n log n) where n is the number of items\n    # O(n^2) where n is the number of items\n    # O(n^2 + n) where n is the number of items\n    # O(n^2 + n log n) where n is the number of items\n    \n    # O(n log n) where n is the number of items\n    # O(n^2) where "
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    def list_split(l, n):\n        try:\n            return l[:n] + l[n+1:]\n        except IndexError:\n            return l[:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split_Arr = l[:n]\n    split_Arr.extend(l[n:])\n    return split_Arr\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    result = l[:n]\n    print(result)\n    return result + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    output_list = []\n    for i in range(0,len(l),n):\n        output_list.append(l[i:i+n])\n    return output_list\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l[n:] = l[:n]\n    l[:n] = []\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n==0:\n        return l\n    else:\n        return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[:n]\n    l2 = l[n:]\n    l1.extend(l2)\n    return l1\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[:n]\n    l2 = l[n:]\n    l2.append(l1)\n    return l2\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple1 = tuple(listx)\n    return tuple1\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in nums:\n        if largest < i:\n            largest = i\n        if smallest > i:\n            smallest = i\n    print('Largest number is ',largest,' and Smallest number is ',smallest)\n    difference = largest-smallest\n    print('Difference between largest and smallest is ',difference)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min = nums[0]\n    max = nums[0]\n    for i in nums:\n        if i < min:\n            min = i\n        elif i > max:\n            max = i\n    return max - min\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_ = nums[0]\n    min_ = nums[0]\n    for num in nums:\n        if num > max_:\n            max_ = num\n        elif num < min_:\n            min_ = num\n    return max_ - min_\n    #return max(nums)-min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    \ndef average_of_list(nums):\n    '''\n    Write a python function to calculate the average of all elements in a list.\n    '''\n    return sum(nums)/len(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n    \n    \ndef zero_matrix(matrix):\n    '''\n    Write a python function to check if the given matrix is a zero matrix or not. A zero matrix is a matrix in which all the elements are zero.\n    '''\n    for row in matrix:\n        if sum(row)!= 0:\n            return False\n    return True\n    \n    \ndef odd_occurrences_counter(num_list):\n    '''\n    Write a python function to find the number of odd occurrences in a given list.\n    '''\n    return len([i for i in num_list if num_list.count(i) % 2!= 0])\n    \n    \ndef find_missing_number(num_list):\n    '''\n    Write a python function to find the missing number from the given list. The missing number is the number that is absent in the given list.\n    '''\n    return list(set(range(0, len(num_list)+1)) - set(num_list))\n    \n    \ndef find_missing_letter(word):\n    '''\n    Write a python function to find the missing letter in the given word. You will be provided with the alphabet for your convinience.\n    For example :\n    For word = \"cde\"\n    Then the output should be \"e\"\n    Note : There is only one missing letter in the word.\n    '''\n    return ''.join([chr(ord(word[i])+1) if ord(word[i]) < 122 else chr(ord(word[i])+2) for i in range(len(word))])\n    \n    \ndef find_missing_number_recursive(nums):\n    '''\n    Write a python function to find the missing number from the given list. The missing number is the number that is absent in the given list.\n    '''\n    def find_missing_recursive(start, end):\n        if start > end:\n            return None\n        mid = (start+end)//2\n        if nums[mid] == mid:\n            return find_missing_recursive(start, mid-1)\n        return find_missing_recursive(mid+1, end)\n    return find_missing_recursive(0, len(nums)-1)\n    \n    \ndef sum_of_n_numbers(n):\n    '''\n    Write a python function to find the sum of the first n numbers.\n    '''\n    def sum_recursive(n):\n        if n == 1:\n            return 1\n        return n + sum_recursive(n-1)\n    return sum_recursive(n)\n    \n    \ndef sum_of_n_numbers_iterative(n):\n    '''\n    Write a python function to find the sum of the first n numbers.\n    '''\n    return n*(n+1)//2\n    \n    \ndef find_first_and_last_occurrence(num_list, num):\n    '''\n    Write a python function to find the first and last occurrence of the given number in the given list. Return a tuple of first and last occurrence.\n    '''\n    return (num_list.index(num), len(num_list)-num_list[::-1].index(num))\n    \n    \ndef find_sum_of_n_numbers(n):\n    '''\n    Write a python function to find the sum of the first n numbers.\n    '''\n    return int(n*(n+1)*(2*n+1)/6)\n    \n    \ndef palindrome_counter(num_list):\n    '''\n    Write a python function to count the number of palindromes in a given list.\n    '''\n    return len([i for i in num_list if str(i) == str(i)[::-1]])\n    \n    \ndef max_of_list_iterative(num_list):\n    '''\n    Write a python function to find the largest number in a given list.\n    '''\n    return max(num_list)\n    \n    \ndef max_of_list_recursive(num_list):\n    '''\n    Write a python function to find the largest number in a given list.\n    '''\n    def max_recursive(nums):\n        if len(nums) == 0:\n            return -1\n        else:\n            return max(nums[0], max_recursive(nums[1:]))\n    return max_recursive(num_list)\n    \n    \ndef reverse_string_iterative(s):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    return ''.join(s[i] for i in range(len(s)-1, -1, -1))\n    \n    \ndef reverse_string_recursive(s):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    def reverse_recursive(s, index):\n        if index == len(s)//2:\n            return s\n        else:\n            return reverse_recursive(s[:index]+s[index+1:], index+1)\n    return reverse_recursive(s, 0)\n    \n    \ndef is_sublist(sublist, list):\n    '''\n    Write a python function to check if the given list is a sublist of the given main list.\n    '''\n    def is_sub_recursive(sl, l):\n        if not l:\n            return True\n        if len(l) < len(sl):\n            return False\n        return is_sub_recursive(sl, l[1:]) if l[0] == sl[0] else is_sub_recursive(sl, l[1:])\n    return is_sub_recursive(sublist, list)\n    \n    \ndef reverse_each_word_in_string(string):\n    '''\n    Write a python function to reverse each word in a given string.\n    '''\n    return''.join(i[::-1] for i in string.split())\n    \n    \ndef sum_of_numbers_from_string(string):\n    '''\n    Write a python function to find the sum of all the numbers present in the given string.\n    '''\n    return sum(int(i) for i in string.split())\n    \n    \ndef vowel_counter(string):\n    '''\n    Write a python function to count the number of vowels in a given string.\n    '''\n    return sum(i in 'aeiou' for i in string)\n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to compute the nth Fibonacci number.\n    '''\n    def fibonacci_recursive(n):\n        if n <= 1:\n            return n\n        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n    return fibonacci_recursive(n)\n    \n    \ndef fibonacci_iterative(n):\n    '''\n    Write a python function to compute the nth Fibonacci number.\n    '''\n    a, b = 0, 1\n    if n <= 0:\n        return 0\n    for i in range(n):\n        a, b = b, a+b\n    return a\n    \n    \ndef main_fun(num_list):\n    '''\n    Write a python function to sort the given list of numbers in ascending order.\n    '''\n    return sorted(num_list)\n    \n    \ndef find_smallest_number_in_list(num_list):\n    '''\n    Write a python function to find the smallest number in a given list.\n    '''\n    return min(num_list)\n    \n    \ndef find_biggest_number_in_list(num_list):\n    '''\n    Write a python function to find the biggest number in a given list.\n    '''\n    return max(num_list)\n    \n    \ndef sum_of_natural_number(n):\n    '''\n    Write a python function to find the sum of first n natural numbers.\n    '''\n    return (n*(n+1))/2\n    \n    \ndef sum_of_squares_of_natural_number(n):\n    '''\n    Write a python function to find the sum of squares of first n natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)/6\n    \n    \nde"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_num = 0\n    max_num = 0\n    diff = 0\n    for i in nums:\n        if(i < min_num or min_num == 0):\n            min_num = i\n        if(i > max_num):\n            max_num = i\n        diff = max_num - min_num\n    return diff\n    \nprint(big_diff([10, 5, 1, 2, 3, 6, 8, 9, 4]))\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    i = int(sqrt(a))\n    j = int(sqrt(b))\n    return list(range(i**2, j**2+1, i))\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    num1 = a\n    num2 = b\n    if num1 < num2:\n        print('The first number is smaller')\n        return\n    elif num1 > num2:\n        print('The first number is larger')\n        return\n    else:\n        print('Both numbers are equal')\n        return\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        print('a must be less than b')\n        return\n    arr = []\n    for i in range(a, b+1):\n        s = i * i\n        if s in arr:\n            continue\n        arr.append(s)\n    return sorted(arr)\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Brute Force Algorithm\n    # Time Complexity: O(n^2)\n    # Space Complexity: O(1)\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i*i for i in range(a, b+1) if i*i<=b and i*i>=a]"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Your code here\n    res = []\n    for i in range(a, b + 1):\n        k = 0\n        for j in range(1, i + 1):\n            if j * j == i:\n                k += 1\n        if k == 1:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    i = a ** 0.5\n    while i <= b:\n        if i ** 2 <= b:\n            squares.append(i ** 2)\n        i += 1\n    return squares\n    \ndef least_difference(a, b, c):\n    '''\n    Write a function that takes 3 numbers, and returns the smallest difference between any 2 of them.\n    '''\n    difference = []\n    for i in a, b, c:\n        if i < 0:\n            i = -i\n        difference.append(i)\n    difference.sort()\n    return difference[1] - difference[0]\n    \ndef is_member(a, b):\n    '''\n    Write a function that takes a string and a list of strings, and that returns true if the string is a member of the list\n    '''\n    if a in b:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # print('a', a, 'b', b)\n    # squares = []\n    # for i in range(a, b + 1):\n    #     squares.append(i * i)\n    # print(squares)\n    # return len(set(squares))\n    return sum(set(map(lambda x: x*x, range(a,b+1))))\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a,b+1):\n        if is_perfect_square(num):\n            result.append(num)\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [(i, i ** 2) for i in range(a, b + 1) if i ** 0.5 == i ** 0.5]\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect=(x*math.cos(y),x*math.sin(y))\n    return rect\n    \n    \ndef cartesian_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    polar=(x**2+y**2)**(1/2)\n    angle=math.atan(y/x)\n    return (polar,angle)\n    \n    \ndef complex_sum(z1,z2):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    z3=(z1[0]+z2[0],z1[1]+z2[1])\n    return z3\n    \n    \ndef complex_diff(z1,z2):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    z3=(z1[0]-z2[0],z1[1]-z2[1])\n    return z3\n    \n    \ndef complex_product(z1,z2):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    z3=(z1[0]*z2[0]-z1[1]*z2[1],z1[0]*z2[1]+z1[1]*z2[0])\n    return z3\n    \n    \ndef complex_quotient(z1,z2):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    denom=(z2[0]**2+z2[1]**2)**(1/2)\n    z3=(z1[0]*z2[0]+z1[1]*z2[1])/denom\n    return z3\n    \n    \ndef complex_conjugate(z1):\n    '''\n    Write a function to find the conjugate of a complex number.\n    '''\n    z2=(z1[0],-z1[1])\n    return z2\n    \n    \ndef complex_modulus(z1):\n    '''\n    Write a function to find the modulus of a complex number.\n    '''\n    z2=(z1[0]**2+z1[1]**2)**(1/2)\n    return z2\n    \n    \ndef complex_argument(z1):\n    '''\n    Write a function to find the argument of a complex number.\n    '''\n    angle=math.atan(z1[1]/z1[0])\n    if angle<0:\n        angle=angle+cmath.pi\n    return angle\n    \n    \ndef complex_polar(z1):\n    '''\n    Write a function to convert a complex number to polar coordinates.\n    '''\n    polar=(z1[0]**2+z1[1]**2)**(1/2)\n    angle=math.atan(z1[1]/z1[0])\n    if angle<0:\n        angle=angle+cmath.pi\n    return (polar,angle)\n    \n    \ndef complex_rect(z1):\n    '''\n    Write a function to convert a complex number to rectangular coordinates.\n    '''\n    rect=(z1[0]*math.cos(z1[1]),z1[0]*math.sin(z1[1]))\n    return rect\n    \n    \ndef complex_exp(z1):\n    '''\n    Write a function to compute the exponent of a complex number.\n    '''\n    n=math.exp(z1[0])\n    exponent=math.exp(z1[0]*z1[1])\n    return (n,exponent)\n    \n    \ndef complex_log(z1):\n    '''\n    Write a function to compute the natural log of a complex number.\n    '''\n    log=(math.log(z1[0]),z1[1]/math.log(z1[0]))\n    return log\n    \n    \ndef complex_conjugate_exp(z1):\n    '''\n    Write a function to compute the conjugate, exponent, and logarithm of a complex number.\n    '''\n    z2=complex_conjugate(z1)\n    z3=complex_exp(z1)\n    z4=complex_log(z1)\n    z5=(z2,z3,z4)\n    return z5\n    \n    \ndef complex_add_mult(z1,z2,z3):\n    '''\n    Write a function to add and multiply two complex numbers.\n    '''\n    z4=(z1[0]*z2[0]-z1[1]*z2[1],z1[0]*z2[1]+z1[1]*z2[0])\n    z5=(z3[0]*z4[0]-z3[1]*z4[1],z3[0]*z4[1]+z3[1]*z4[0])\n    return z5\n    \n    \ndef complex_div_mult(z1,z2,z3):\n    '''\n    Write a function to multiply and divide two complex numbers.\n    '''\n    z4=(z1[0]*z2[0]-z1[1]*z2[1],z1[0]*z2[1]+z1[1]*z2[0])\n    z5=(z3[0]*z4[0]-z3[1]*z4[1],z3[0]*z4[1]+z3[1]*z4[0])\n    z6=complex_quotient(z5,z3)\n    return z6\n    \n    \ndef complex_inverse(z1):\n    '''\n    Write a function to compute the inverse of a complex number.\n    '''\n    z2=complex_quotient((z1[0]*z1[0]+z1[1]*z1[1]),(z1[0]**2+z1[1]**2))\n    z3=complex_product((z1[0],-z1[1]),z2)\n    return z3\n    \n    \ndef complex_derivative(z1):\n    '''\n    Write a function to compute the derivative of a complex function.\n    '''\n    z2=(z1[0]*complex_exp(z1)[0],z1[1]*complex_exp(z1)[0])\n    return z2\n    \n    \ndef complex_integral(z1):\n    '''\n    Write a function to compute the integral of a complex function.\n    '''\n    z2=(z1[0]*complex_log(z1)[0],z1[1]*complex_log(z1)[0])\n    return z2\n    \n    \ndef complex_derivative_integral(z1):\n    '''\n    Write a function to compute the derivative and the integral of a complex function.\n    '''\n    z2=complex_derivative(z1)\n    z3=complex_integral(z1)\n    z4=(z2,z3)\n    return z4\n    \n    \ndef complex_derivative_integral_exp(z1):\n    '''\n    Write a function to compute the derivative, the integral, and the exponent of a complex function.\n    '''\n    z2=complex_derivative(z1)\n    z3=complex_integral(z1)\n    z4=complex_exp(z1)\n    z5=(z2,z3,z4)\n    return z5\n    \n    \ndef complex_derivative_integral_conj_log(z1):\n    '''\n    Write a function to compute the derivative, the integral, and the conjugate and logarithm of a complex function.\n    '''\n    z2=complex_derivative(z1)\n    z3=complex_integral(z1)\n    z4=complex_conjugate(z1)\n    z5=complex_log(z1)\n    z6=(z2,z3,z4,z5)\n    return z6\n    \n    \ndef complex_derivative_integral_pow_conj_log(z1):\n    '''\n    Write a function to compute the derivative, the integral, the conjugate, and the logarithm of "
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = complex(x,y)\n    b = abs(a)\n    c = cmath.phase(a)\n    return [b,c]\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=math.sqrt(x**2+y**2)\n    theta=math.atan(y/x)\n    if x==0 and y>0:\n        theta=0\n    elif x==0 and y<0:\n        theta=math.pi\n    elif x>0 and y==0:\n        theta=math.pi/2\n    elif x<0 and y==0:\n        theta=3*math.pi/2\n    elif x<0 and y>0:\n        theta=math.atan(y/x)+2*math.pi\n    elif x>0 and y<0:\n        theta=math.atan(y/x)+math.pi\n    return round(r,1),round(theta,1)\n    \ndef rect_polar(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=r*math.cos(theta)\n    y=r*math.sin(theta)\n    return round(x,1),round(y,1)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x*cmath.cos(y)\n    b = x*cmath.sin(y)\n    return(a,b)\nprint(polar_rect(3.0,0.8))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.rect(1,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #radius = x**2 + y**2\n    #theta = cmath.phase(x+y*1j)\n    radius = x**2 + y**2\n    theta = cmath.phase(x+y*1j)\n    \n    return radius, theta\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return complex(x*cmath.cos(y),x*cmath.sin(y))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x\n    phi=y\n    x=r*cmath.cos(phi)\n    y=r*cmath.sin(phi)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.rect(x,y)\n    return r\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,t = x\n    return r*math.cos(t),r*math.sin(t)\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(\"New List\", newList[-1:] + newList[1: -1] + newList[:1])\n    return newList[-1:] + newList[1: -1] + newList[:1]\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList)>1:\n        newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    list_length = len(newList)\n    #print(list_length)\n    if list_length > 1:\n        temp = newList[0]\n        newList[0] = newList[list_length - 1]\n        newList[list_length - 1] = temp\n        return newList\n    else:\n        return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse the order of the items in the list\n    '''\n    list_length = len(newList)\n    #print(list_length)\n    if list_length > 1:\n        for x in range(0,list_length):\n            #print(newList[list_length - x - 1])\n            temp = newList[list_length - x - 1]\n            newList[list_length - x - 1] = newList[x]\n            newList[x] = temp\n        return newList\n    else:\n        return newList\n        \ndef odd_even_List(newList):\n    '''\n    Write a python function to segregate the odd and even numbers in the list\n    '''\n    list_length = len(newList)\n    #print(list_length)\n    if list_length > 1:\n        index = 0\n        odd_list = []\n        even_list = []\n        while index < list_length:\n            if index % 2 == 0:\n                even_list.append(newList[index])\n            else:\n                odd_list.append(newList[index])\n            index += 1\n        return even_list + odd_list\n    else:\n        return newList\n    \ndef list_of_strings(newList):\n    '''\n    Write a python function to convert a list of integers to list of strings\n    '''\n    list_length = len(newList)\n    #print(list_length)\n    if list_length > 1:\n        index = 0\n        string_list = []\n        while index < list_length:\n            temp = str(newList[index])\n            string_list.append(temp)\n            index += 1\n        return string_list\n    else:\n        return newList\n        \ndef check_anagram(word_one,word_two):\n    '''\n    Write a python function to check whether two words are anagrams or not\n    '''\n    word_one_length = len(word_one)\n    word_two_length = len(word_two)\n    if word_one_length == word_two_length:\n        word_one_list = list(word_one)\n        word_two_list = list(word_two)\n        word_one_list.sort()\n        word_two_list.sort()\n        if word_one_list == word_two_list:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef remove_duplicates(duplicates):\n    '''\n    Write a python function to remove the duplicates from a list\n    '''\n    #duplicates.sort()\n    temp_list = []\n    temp_dict = {}\n    for i in range(0,len(duplicates)):\n        if duplicates[i] in temp_dict:\n            temp_dict[duplicates[i]] += 1\n        else:\n            temp_dict[duplicates[i]] = 1\n    for key in temp_dict:\n        if temp_dict[key] > 1:\n            temp_list.append(key)\n    return temp_list\n        \ndef rotate_list(original_list,number_of_rotations):\n    '''\n    Write a python function to rotate a list by a certain number of times\n    '''\n    original_list_length = len(original_list)\n    #print(original_list_length)\n    if original_list_length > 1:\n        temp_list = original_list[:]\n        for i in range(0,number_of_rotations):\n            temp_list = original_list[1:] + original_list[0:1]\n            original_list = temp_list[:]\n        return original_list\n    else:\n        return original_list\n        \ndef duplicate_list(original_list):\n    '''\n    Write a python function to duplicate a list\n    '''\n    original_list_length = len(original_list)\n    #print(original_list_length)\n    if original_list_length > 1:\n        temp_list = original_list[:]\n        temp_list *= 2\n        return temp_list\n    else:\n        return original_list\n        \ndef check_palindrome(original_list):\n    '''\n    Write a python function to check whether a list is a palindrome or not\n    '''\n    original_list_length = len(original_list)\n    #print(original_list_length)\n    if original_list_length > 1:\n        temp_list = original_list[:]\n        temp_list.reverse()\n        if original_list == temp_list:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef check_pangram(original_string):\n    '''\n    Write a python function to check whether a string is a pangram or not\n    '''\n    original_string = original_string.lower()\n    alphabet_list = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    original_string_length = len(original_string)\n    if original_string_length > 1:\n        for i in range(0,26):\n            if alphabet_list[i] not in original_string:\n                return False\n        return True\n    else:\n        return False\n        \ndef unique_pangram(original_string):\n    '''\n    Write a python function to check whether a string is a pangram or not, but there should be no duplicate characters\n    '''\n    original_string = original_string.lower()\n    alphabet_list = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    original_string_length = len(original_string)\n    if original_string_length > 1:\n        for i in range(0,26):\n            if alphabet_list[i] in original_string:\n                if alphabet_list[i] not in original_string[:] and alphabet_list[i] not in original_string[0:]:\n                    return True\n        return False\n    else:\n        return False\n        \ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate a 2D matrix\n    '''\n    matrix_length = len(matrix)\n    #print(matrix_length)\n    if matrix_length > 1:\n        for i in range(0,int(matrix_length/2)):\n            for j in range(i,matrix_length - i - 1):\n                temp = matrix[i][j]\n                matrix[i][j] = matrix[j][matrix_length - i - 1]\n                matrix[j][matrix_length - i - 1] = matrix[matrix_length - i - 1][matrix_length - j - 1]\n                matrix[matrix_length - i - 1][matrix_length - j - 1] = matrix[matrix_length - j - 1][i]\n                matrix[matrix_length - j - 1][i] = temp\n        return matrix\n    else:\n        return matrix\n        \ndef matrix_mirror(matrix):\n    '''\n    Write a python function to mirror a 2D matrix\n    '''\n    matrix_length = len(matrix)\n    #print(matrix_length)\n    if matrix_length > 1:\n        for i in range(0,int(matrix_length/2)):\n            for j in range(0,matrix_length):\n                temp = matrix[i][j]\n                matrix[i][j] = matrix[matrix_length - i - 1][j]\n                matrix[matrix_length - i - 1][j] = temp\n        return matrix\n    else:"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # listSize = len(newList)\n    # temp = newList[0]\n    # newList[0] = newList[listSize - 1]\n    # newList[listSize - 1] = temp\n    # return newList\n    return [newList[1], newList[-1]] + newList[1:len(newList)-1]\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = first\n    return newList\nprint(swap_List([10, 20, 30, 40]))\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    if(k==0 or k ==n):\n        return 1\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n < k): \n        return 0\n    elif (k == 0 or k == n): \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) \n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (k == 0 or k == n):\n        return 1\n    elif (k == 1 or k == n - 1):\n        return n\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n    return \n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k>n-k):\n        k=n-k\n    if(k==0 or k==n):\n        return 1\n    else:\n        return int((factorial(n)/(factorial(k)*factorial(n-k))))\ndef series_sum(n,x):\n    sum=0\n    for i in range(0,n):\n        sum+=binomial_Coeff(i,x)\n    return sum\ndef bernoulli_Approx(n):\n    b=int((2*n*n)/3)\n    for i in range(n,b,-1):\n        print(series_sum(i,0))\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the first two co-efficients to one\n    coeff = [1, 1]\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (k > n):\n        return 0\n    if (k == 0 or k == n):\n        return 1\n    \n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return reduce(lambda x, y: x+y, [binomialCoeff(n, i) for i in range(0, k+1)])\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n    elif k>n:\n        return 0\n    else:\n        return binomial_Coeff(n-1,k)+binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return sum([binomialCoeff(n-1,k-1)*binomialCoeff(n-1,k) for k in range(k,n)])\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    # Initialize a list to store all the values\n    L = [0] * (n+1)\n    L[0] = 1\n    L[1] = 1\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_num = re.findall(r'\\d+', ip)\n    ip_num = ''.join(ip_num)\n    ip_num = int(ip_num)\n    return ip_num\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #return str(ip)\n    return re.sub(r'\\.[0]+\\.', '.', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = str(ip)\n    while ip.startswith('0') and len(ip) > 1:\n        ip = ip[1:]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_split = re.split('.',ip)\n    ip_split[0] = ip_split[0].lstrip('0')\n    ip_split[1] = ip_split[1].lstrip('0')\n    ip_split[2] = ip_split[2].lstrip('0')\n    ip_split[3] = ip_split[3].lstrip('0')\n    ip = '.'.join(ip_split)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #Split it into 4 parts\n    ip = ip.split('.')\n    \n    #For each part, iterate through each number\n    for i in range(len(ip)):\n        \n        #If the number is less than 10, convert it to a string and add a leading zero\n        if int(ip[i]) < 10:\n            ip[i] = str(0) + str(ip[i])\n        #Otherwise, leave the number as it is\n        else:\n            ip[i] = ip[i]\n            \n    #Join the list into a string\n    ip = '.'.join(ip)\n    \n    #Return the string\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    list_ip=re.split(\"\\.\",ip)\n    for i in range(0,len(list_ip)):\n        if list_ip[i]==\"0\":\n            continue\n        else:\n            return list_ip[i]\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(\"^0+\",\"\",ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = str(ip)\n    if len(ip) == 3:\n        if ip[0] == '0' and ip[1] == '0' and ip[2] == '0':\n            ip = '0'\n    elif len(ip) == 2:\n        if ip[0] == '0' and ip[1] == '0':\n            ip = '0'\n    elif len(ip) == 1:\n        if ip[0] == '0':\n            ip = '0'\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    for i in range(len(ip_list)):\n        ip_list[i] = re.sub(r'^0+(\\d)','\\g<1>',ip_list[i])\n    return '.'.join(ip_list)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_numbers = [num for num in list1 if num % 2 == 0]\n    odd_numbers = [num for num in list1 if num % 2!= 0]\n    \n    return even_numbers[0] - odd_numbers[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return abs(even[0] - odd[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # list1 = [1,2,3,4,5,6,7,8,9]\n    list1 = list(list1)\n    diff_even = 0\n    diff_odd = 0\n    for i in range(len(list1)):\n        if i%2 == 0:\n            diff_even = diff_even + list1[i]\n        else:\n            diff_odd = diff_odd + list1[i]\n    print(diff_even - diff_odd)\ndiff_even_odd([1,2,3,4,5,6,7,8,9])"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odds = []\n    evens = []\n    for i in list1:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    print(odds)\n    print(evens)\n    return abs(evens[0] - odds[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    #import ipdb; ipdb.set_trace()\n    #sort the list\n    list1.sort()\n    #find the first element of the list\n    f_elem = list1[0]\n    #find the first odd element of the list\n    f_odd_elem = list1[1]\n    #find the difference of the two elements\n    diff = f_elem - f_odd_elem\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number=[]\n    odd_number=[]\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_number.append(list1[i])\n        else:\n            odd_number.append(list1[i])\n    return even_number[0]-odd_number[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # first_even = []\n    # first_odd = []\n    # for i in list1:\n    #     if i % 2 == 0:\n    #         first_even.append(i)\n    #     else:\n    #         first_odd.append(i)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_numbers = [i for i in list1 if i%2==0]\n    odd_numbers = [i for i in list1 if i%2==1]\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count_odd = 0\n    count_even = 0\n    for num in list1:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_even - count_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    new_list = []\n    for index, value in enumerate(list1):\n        if index % 2 == 0:\n            if value % 2 == 0:\n                new_list.append(value)\n        if index % 2!= 0:\n            if value % 2!= 0:\n                new_list.append(value)\n    print(new_list)\n    diff = new_list[0] - new_list[1]\n    return diff\n    \n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Define an auxiliary function that will swap two binary strings using swaps.\n    def swap(a,b) : \n        '''\n        Auxiliary function to swap two binary strings.\n        '''\n        if a == '0' : \n            return b\n        if b == '0' : \n            return a\n        if a == b : \n            return '0'\n        else : \n            return '1'\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    size1 = len(str1)\n    size2 = len(str2)\n    if size1!=size2:\n        return -1\n    swaps=0\n    for i in range(size1):\n        if str1[i]!=str2[i]:\n            if str1[i]=='1' and str2[i]=='0':\n                swaps+=1\n            elif str1[i]=='0' and str2[i]=='1':\n                swaps+=1\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i,j = 0,0\n    arr1 = []\n    arr2 = []\n    for i in range(len(str1)) : \n        arr1.append(str1[i])\n    for j in range(len(str2)) : \n        arr2.append(str2[j])\n    cnt = 0\n    while i < len(arr1) and j < len(arr2) : \n        if arr1[i] == arr2[j] : \n            i += 1\n            j += 1\n        elif arr1[i] == '1' and arr2[j] == '0' : \n            i += 1\n            j += 1\n            cnt += 1\n        elif arr1[i] == '0' and arr2[j] == '1' : \n            i += 1\n            j += 1\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def check(s): \n        return s.count('0') == s.count('1') \n    def minSwaps(s): \n        n = len(s) \n        ans = 0\n        for i in range(n): \n            j = 0\n            while j < n and s[i]!= '1' and s[j]!= '0': \n                j += 1\n            if j == n: \n                break\n            ans += 1\n            s = s[:j] + s[j].replace('1','0',1) + s[j + 1:] \n        return ans \n    def swap(s,i,j): \n        if s[i] == '1' and s[j] == '0': \n            return s[:i] + '0' + s[i + 1:j] + '1' + s[j + 1:] \n        elif s[i] == '0' and s[j] == '1': \n            return s[:i] + '1' + s[i + 1:j] + '0' + s[j + 1:] \n        else: \n            return s\n    if check(str1) == check(str2): \n        return 0\n    if len(str1) == len(str2) and check(str1) == check(str2): \n        return minSwaps(str1)\n    else: \n        return swap(str1, minSwaps(str1),minSwaps(str2))\ndef majorityElement( nums):\n    '''\n    Given an array nums of size n, return the majority element.\n    The majority element is the element that appears more than \u230an / 2\u230b times. You may assume that the majority element always exists in the array.\n    '''\n    dic={}\n    for num in nums:\n        if num in dic:\n            dic[num]+=1\n        else:\n            dic[num]=1\n    for num in dic:\n        if dic[num]>len(nums)/2:\n            return num\ndef majorityElement_v2( nums):\n    '''\n    Given an array nums of size n, return the majority element.\n    The majority element is the element that appears more than \u230an / 2\u230b times. You may assume that the majority element always exists in the array.\n    '''\n    dic={}\n    for num in nums:\n        if num in dic:\n            dic[num]+=1\n        else:\n            dic[num]=1\n    for num in dic:\n        if dic[num]>len(nums)/2:\n            return num\ndef isMajority( nums, target):\n    '''\n    Given an array nums of size n, return true if the majority element appears more than \u230an / 3\u230b times.\n    You may assume that the majority element always exists in the array.\n    '''\n    dic={}\n    for num in nums:\n        if num in dic:\n            dic[num]+=1\n        else:\n            dic[num]=1\n    for num in dic:\n        if dic[num]>len(nums)/3:\n            return True\n    return False\ndef isMajority_v2( nums, target):\n    '''\n    Given an array nums of size n, return true if the majority element appears more than \u230an / 3\u230b times.\n    You may assume that the majority element always exists in the array.\n    '''\n    dic={}\n    for num in nums:\n        if num in dic:\n            dic[num]+=1\n        else:\n            dic[num]=1\n    for num in dic:\n        if dic[num]>len(nums)/3:\n            return True\n    return False\ndef majorityElement_v3( nums):\n    '''\n    Given an array nums of size n, return the majority element.\n    The majority element is the element that appears more than \u230an / 2\u230b times. You may assume that the majority element always exists in the array.\n    '''\n    return max(set(nums), key=nums.count)\ndef isMajority( nums, target):\n    '''\n    Given an array nums of size n, return true if the majority element appears more than \u230an / 3\u230b times.\n    You may assume that the majority element always exists in the array.\n    '''\n    return nums.count(target)>len(nums)/3\ndef isMajority_v2( nums, target):\n    '''\n    Given an array nums of size n, return true if the majority element appears more than \u230an / 3\u230b times.\n    You may assume that the majority element always exists in the array.\n    '''\n    return nums.count(target)>len(nums)/3\ndef deleteNode(node):\n    node.val = node.next.val\n    node.next = node.next.next\ndef deleteNode_v2(node):\n    node.val = node.next.val\n    node.next = node.next.next\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n    def reverseKGroup(head, k):\n        '''\n        Given the head of a linked list and a number \u2018k\u2019, reverse the nodes of the list \u2018k\u2019 at a time and return its modified list.\n        k is guaranteed to be less than or equal to the length of the linked list. If the number of nodes is not a multiple of \u2018k\u2019 then left-out nodes in the end should remain as it is.\n        '''\n        dummy = jump = ListNode(0)\n        dummy.next = l = r = head\n        while True:\n            count = 0\n            while r and count < k:   # use r to locate the range\n                r = r.next\n                count += 1\n            if count == k:  # if size k satisfied, reverse the inner linked list\n                pre, cur = r, l\n                for _ in range(k):\n                    cur.next, cur, pre = pre, cur.next, cur  # standard reversing\n                jump.next, jump, l = pre, l, r  # connect two k-groups\n            else:\n                return dummy.next\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n    def reverseKGroup(head, k):\n        '''\n        Given the head of a linked list and a number \u2018k\u2019, reverse the nodes of the list \u2018k\u2019 at a time and return its modified list.\n        k is guaranteed to be less than or equal to the length of the linked list. If the number of nodes is not a multiple of \u2018k\u2019 then left-out nodes in the end should remain as it is.\n        '''\n        dummy = jump = ListNode(0)\n        dummy.next = l = r = head\n        while True:\n            count = 0\n            while r and count < k:   # use r to locate the range\n                r = r.next\n                count += 1\n            if count == k:  # if size k satisfied, reverse the inner linked list\n                pre, cur = r, l\n                for _ in range(k):\n                    cur.next, cur, pre = pre, cur.next, cur  # standard reversing\n                jump.next, jump, l = pre, l, r  # connect two k-groups\n            else:\n                return dummy.next\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n    def reverseKGroup(head, k):\n        '''\n        Given the head of a linked list and a number \u2018k\u2019, reverse the nodes of the list \u2018k\u2019 at a time and return its modified list.\n        k is guaranteed to be less than or equal to the length of the linked list. If the number of nodes is not a multiple of \u2018k\u2019 then left-out nodes in the end should remain as it is.\n    "
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    str1.sort()\n    str2.sort()\n    n = len(str1)\n    count = 0\n    i = 0\n    j = 0\n    while i<n and j<n :\n        if str1[i]!= str2[j] :\n            temp = str1[i]\n            str1[i] = str2[j]\n            str2[j] = temp\n            count += 1\n        if str1[i] == str2[j] :\n            i += 1\n            j += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return 0\n    \ndef min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return 0\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1) \n    m = len(str2) \n    if n!=m :\n        print('Unequal length of the strings. Please enter again')\n        return\n    i = 0\n    count = 0\n    while i < n and str1[i] == str2[i] : \n        i+=1\n    if i == n :\n        return count\n    for j in range(i,n) :\n        if str1[j]!= str2[i] :\n            if str2[i]!= str1[j] :\n                str1 = str1[:j]+str2[i]+str1[j+1:]\n                str2 = str2[:i]+str1[j]+str2[i+1:]\n                count+=1\n            else :\n                str1 = str1[:j]+str1[j+1:]\n                str2 = str2[:i]+str2[i+1:]\n                count+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    assert(len(str1) == len(str2))\n    return sum([1 if str1[i]!=str2[i] else 0 for i in range(len(str1))])\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if (n!=m) :\n        return -1\n    i = 0\n    j = 0\n    count = 0\n    while i<n and j<m:\n        if str1[i]!=str2[j]:\n            count += 1\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!=len(str2):\n        return -1\n    s1 = str1\n    s2 = str2\n    s1 = list(s1)\n    s2 = list(s2)\n    count = 0\n    for i in range(0, len(s1)):\n        if s1[i]!= s2[i]:\n            s1[i], s2[i] = s2[i], s1[i]\n            count += 1\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_tuple = sys.getsizeof(tuple_list)\n    return size_tuple\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print('-'*60)\n    print('\\n'.join(str(i) for i in tuple_list))\n    print(sys.getsizeof(tuple_list))\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef tuple_max_value(tuple_list):\n    '''\n    Write a function that takes in a tuple and returns the maximum value in the tuple.\n    '''\n    return max(tuple_list)\ndef tuple_max_value_index(tuple_list):\n    '''\n    Write a function that takes in a tuple and returns the index of the tuple element that is the maximum value in the tuple.\n    '''\n    return tuple_list.index(max(tuple_list))\ndef tuple_max_value_index_2(tuple_list):\n    '''\n    Write a function that takes in a tuple and returns the index of the tuple element that is the maximum value in the tuple.\n    '''\n    max_value = tuple_list[0]\n    max_value_index = 0\n    for i in range(1, len(tuple_list)):\n        if max_value < tuple_list[i]:\n            max_value = tuple_list[i]\n            max_value_index = i\n    return max_value_index\ndef tuple_add(tuple_list_1, tuple_list_2):\n    '''\n    Write a function that takes in two tuples and returns a tuple that is the result of adding tuple 1 and tuple 2 together.\n    '''\n    return tuple_list_1 + tuple_list_2\ndef tuple_add_index(tuple_list_1, tuple_list_2):\n    '''\n    Write a function that takes in two tuples and returns a tuple that is the result of adding tuple 1 and tuple 2 together.\n    '''\n    tuple_list_3 = tuple_list_1 + tuple_list_2\n    return tuple_list_3\ndef tuple_sort(tuple_list):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the sorted version of the tuple.\n    '''\n    return sorted(tuple_list)\ndef tuple_sort_2(tuple_list):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the sorted version of the tuple.\n    '''\n    return sorted(tuple_list, reverse=True)\ndef tuple_remove_index(tuple_list, index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of removing the element at the specified index.\n    '''\n    tuple_list_2 = tuple_list[:index] + tuple_list[index + 1:]\n    return tuple_list_2\ndef tuple_remove_index_2(tuple_list, index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of removing the element at the specified index.\n    '''\n    tuple_list_2 = tuple_list[:index] + tuple_list[index + 1:]\n    return tuple_list_2[index]\ndef tuple_multiply_index(tuple_list, index, num):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of multiplying the element at the specified index by the specified number.\n    '''\n    tuple_list_2 = list(tuple_list)\n    tuple_list_2[index] = num * tuple_list[index]\n    return tuple_list_2\ndef tuple_multiply_index_2(tuple_list, index, num):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of multiplying the element at the specified index by the specified number.\n    '''\n    tuple_list_2 = list(tuple_list)\n    tuple_list_2[index] = num * tuple_list[index]\n    return tuple_list_2[index]\ndef tuple_slice(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_2(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_3(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_4(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_5(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_6(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_7(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_8(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_9(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_10(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_11(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_12(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_13(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_14(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_15(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_16(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in a tuple and returns a tuple that is the result of slicing the tuple.\n    '''\n    return tuple_list[start_index:end_index]\ndef tuple_slice_17(tuple_list, start_index, end_index):\n    '''\n    Write a function that takes in "
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total = 0\n    for elem in tuple_list:\n        total += sys.getsizeof(elem)\n    return total\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return (sys.getsizeof(tuple_list))\n    "
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # return tuple_list.__sizeof__()\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def get_kth(arr1, arr2, k):\n        if not arr1:\n            return arr2[k]\n        if not arr2:\n            return arr1[k]\n        if k == len(arr1) + len(arr2) - 1:\n            return max(arr1[-1], arr2[-1])\n        if len(arr1) == 1:\n            return arr2[k]\n        if len(arr2) == 1:\n            return arr1[k]\n        if k == len(arr1) + len(arr2) - 2:\n            return min(arr1[0], arr2[0])\n        i = len(arr1) // 2\n        j = len(arr2) // 2\n        if arr1[i] < arr2[j]:\n            # print('arr1', arr1[i], arr2[j])\n            if k > i and k <= j + len(arr1) - i - 1:\n                return get_kth(arr1[i+1:], arr2, k - i - 1)\n            else:\n                return get_kth(arr1, arr2[j+1:], k)\n        else:\n            # print('arr2', arr1[i], arr2[j])\n            if k > i + len(arr2) - j - 1 and k <= len(arr1) - i - 1:\n                return get_kth(arr1, arr2[j+1:], k - i - len(arr2) + j - 1)\n            else:\n                return get_kth(arr1[i+1:], arr2, k)\n    if k < 1 or len(arr1) + len(arr2) < k:\n        raise Exception('invalid input')\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    return get_kth(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # TODO: Implement me\n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k-1]\n    elif len(arr2) == 0:\n        return arr1[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    i, j = 0, 0\n    count = 0\n    while count < k:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        count += 1\n    return arr1[i], arr2[j]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] == arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        if j == len(arr2):\n            i += 1\n            j = 0\n        if i == len(arr1):\n            j += 1\n            i = 0\n    if i + j < k:\n        return -1\n    return arr1[i + (k - j - 1)] if j + i >= k else arr2[j + (k - i - 1)]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 or not arr2:\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0 and len(arr2) == 0:\n        return None\n    if len(arr1) == 0 and len(arr2) == 1:\n        if k == 1:\n            return arr2[0]\n        else:\n            return None\n    if len(arr1) == 1 and len(arr2) == 0:\n        if k == 1:\n            return arr1[0]\n        else:\n            return None\n    if len(arr1) == 1 and len(arr2) == 1:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        else:\n            return None\n    if len(arr1) == 2 and len(arr2) == 0:\n        if k == 1:\n            return min(arr1[0], arr1[1])\n        elif k == 2:\n            return max(arr1[0], arr1[1])\n        else:\n            return None\n    if len(arr1) == 2 and len(arr2) == 1:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        elif k == 2:\n            return max(arr1[0], arr2[0])\n        else:\n            return None\n    if len(arr1) == 0 and len(arr2) == 2:\n        if k == 1:\n            return arr2[1]\n        else:\n            return None\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    p1 = 0\n    p2 = 0\n    n = len(arr1) + len(arr2)\n    while i < n:\n        if p1 < len(arr1) and p2 < len(arr2):\n            if arr1[p1] > arr2[p2]:\n                p2 += 1\n            elif arr1[p1] < arr2[p2]:\n                p1 += 1\n            else:\n                return arr1[p1]\n        else:\n            return arr1[p1] if p1 < len(arr1) else arr2[p2]\n        i += 1\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def is_k_greater_than_n(arr1, arr2):\n        if len(arr2) > len(arr1):\n            return True\n        else:\n            return False\n        \n    def binary_search(arr, target, start, end):\n        if start == end:\n            return start\n        mid = (start + end) // 2\n        if target == arr[mid]:\n            return mid\n        elif target < arr[mid]:\n            return binary_search(arr, target, start, mid)\n        elif target > arr[mid]:\n            return binary_search(arr, target, mid+1, end)\n        \n    def get_k_greater_than_n(arr1, arr2, k):\n        if is_k_greater_than_n(arr1, arr2):\n            return arr2[k-1]\n        else:\n            return arr1[k-1]\n    \n    def get_kth(arr1, arr2, k):\n        if len(arr1) >= len(arr2):\n            return arr1[k-1]\n        else:\n            return arr2[k-1]\n        \n    start = 0\n    end = len(arr1)\n    k = k-1\n    if is_k_greater_than_n(arr1, arr2):\n        return get_k_greater_than_n(arr1, arr2, k)\n    else:\n        return get_kth(arr1, arr2, k)\n        \n        \narr1 = [1, 2, 3, 4]\narr2 = [2, 3, 4, 5, 6, 7]\nk = 5\nprint(find_kth(arr1, arr2, k))"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == n:\n        print(n, 'is an Armstrong number.')\n    else:\n        print(n, 'is not an Armstrong number.')\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n=number\n    sum=0\n    num=n\n    while(n!=0):\n        rem=n%10\n        sum=sum+(rem**3)\n        n=n//10\n    if(sum==num):\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = str(number)\n    length = len(temp)\n    sum_of_digits = 0\n    for x in temp:\n        sum_of_digits += int(x)**length\n    return sum_of_digits == number\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = str(number)\n    length = len(num)\n    num_sum = 0\n    for i in num:\n        i = int(i)\n        num_sum += i**length\n    return (num_sum == number)\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    original_number = number\n    sum = 0\n    temp = number\n    while temp > 0:\n        remainder = temp % 10\n        sum += remainder ** 3\n        temp = temp // 10\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp=number\n    sum=0\n    while(number>0):\n        digit=number%10\n        sum+=digit**3\n        number=number//10\n    if sum==temp:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    copy_num = number\n    sum = 0\n    while copy_num > 0:\n        remainder = copy_num % 10\n        sum += remainder ** 3\n        copy_num //= 10\n    if sum == number:\n        print(\"The given number is armstrong\")\n    else:\n        print(\"The given number is not armstrong\")\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum1 = 0\n    while temp > 0:\n        digit = temp % 10\n        sum1 += digit ** 3\n        temp //= 10\n    return sum1 == number\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    a = number\n    b = len(str(number))\n    c = a\n    d = 0\n    while c > 0:\n        d = d + (c % 10)**b\n        c = c // 10\n    if d == a:\n        print(a, \"is an armstrong number\")\n    else:\n        print(a, \"is not an armstrong number\")\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp!= 0:\n        rem = temp % 10\n        sum += rem ** 3\n        temp //= 10\n    if sum == number:\n        print(number, \"is armstrong number\")\n    else:\n        print(number, \"is not armstrong number\")\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    count = 1\n    sum = 0\n    while count <= number:\n        sum = sum + count\n        count += 1\n    print(sum)\n    print(sum/count)\n    \n    \nsum_average(5"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    for i in range(1,number+1):\n        sum += i\n        avg += 1\n    return (sum,sum/avg)\nprint(sum_average(20))\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total = total + i\n    average = total / number\n    print(total)\n    print(average)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum,avg=0,0\n    for i in range(number+1):\n        sum+=i\n        avg=sum/number\n    return (sum,avg)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total_sum = 0\n    for num in range(1,number+1):\n        total_sum += num\n    \n    total_average = total_sum / number\n    return (total_sum, total_average)\n    \ndef main():\n    sum, average = sum_average(int(input(\"Enter the number: \")))\n    print(f\"Sum is {sum}, average is {average}\")\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number+1):\n        sum = sum + i\n    avg = sum / number\n    print('Sum: ', sum)\n    print('Average: ', avg)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    print(\"The sum of first %d numbers is %d\"%(number,sum))\n    print(\"The average of first %d numbers is %.2f\"%(number,average))\n    return sum,average\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    \n    for n in range(number):\n        sum += n\n    average = sum / number\n    \n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_value = 0\n    for i in range(1,number+1):\n        sum_value = sum_value + i\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    return False \n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return \"Even\"\n    else :\n        return \"Odd\"\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    def first_repeated_char_util(str1):\n        '''\n        Write a python function to find the first repeated character in a given string.\n        '''\n        seen_chars = []\n        for i in str1:\n            if i in seen_chars:\n                return i\n            seen_chars.append(i)\n        return False\n    return first_repeated_char_util(str1)\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] = dict1[i] + 1\n    for k,v in dict1.items():\n        if v > 1:\n            return k\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = ''.join(sorted(str1))\n    for i in range(len(str1) - 1):\n        if str1[i] == str1[i + 1]:\n            return str1[i]\n    return -1\n    \nprint(first_repeated_char('abcdefghi'))"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in range(len(str1)):\n        if str1[i] in dict1:\n            return str1[i]\n        else:\n            dict1[str1[i]] = 1\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                print(f\"First repeated character is {str1[i]}\")\n                return\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    for ch in str1:\n        if str1.count(ch) >= 2:\n            return ch\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #this solution is trivial\n    #for i in range(len(str1)):\n    #    if str1.count(str1[i]) >= 2:\n    #        return str1[i]\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, "
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1, n) if islucid(i)]\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1,n) if (is_ludic(i) == True)]\n    \n    \ndef get_ludic_2(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1,n) if (is_ludic_2(i) == True)]\n    \n    \ndef lucidity(a,b):\n    '''\n    Write a function to determine whether a given integer (a) is lucid or not.\n    '''\n    return True if (is_ludic(a) == True) and (is_ludic_2(a) == True) else False\n    \n    \ndef lucidity_2(a,b):\n    '''\n    Write a function to determine whether a given integer (a) is lucid or not.\n    '''\n    return True if (is_ludic(a) == True) else False\n    \n    \ndef get_ludic_3(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1,n) if (is_ludic_3(i) == True)]\n    \n    \ndef get_ludic_4(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1,n) if (is_ludic_4(i) == True)]\n    \n    \ndef lucidity_3(a,b):\n    '''\n    Write a function to determine whether a given integer (a) is lucid or not.\n    '''\n    return True if (is_ludic(a) == True) or (is_ludic_2(a) == True) else False\n    \n    \ndef lucidity_4(a,b):\n    '''\n    Write a function to determine whether a given integer (a) is lucid or not.\n    '''\n    return True if (is_ludic(a) == True) or (is_ludic_2(a) == True) or (is_ludic_3(a) == True) else False\n    \n    \ndef is_ludic_5(n):\n    '''\n    Write a function to determine whether a given integer (a) is ludic or not.\n    '''\n    return True if n == 1 else False\n    \n    \ndef lucidity_5(a,b):\n    '''\n    Write a function to determine whether a given integer (a) is lucid or not.\n    '''\n    return True if (is_ludic(a) == True) or (is_ludic_2(a) == True) or (is_ludic_3(a) == True) or (is_ludic_4(a) == True) else False\n    \n    \ndef main():\n    print(get_ludic(10000))\n    print(get_ludic_2(10000))\n    print(lucidity(2,3))\n    print(lucidity_2(2,3))\n    print(get_ludic_3(10000))\n    print(get_ludic_4(10000))\n    print(lucidity_3(2,3))\n    print(lucidity_4(2,3))\n    print(get_ludic_5(10000))\n    print(lucidity_5(2,3))\n    \n    \nif __name__ == '__main__':\n    main()\n    \n    "
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def digits_sum(n):\n        return sum(map(int, str(n)))\n    def is_ludic(n):\n        return digits_sum(n) == n\n    ludic = filter(is_ludic, range(1, n))\n    return list(ludic)\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Handle base case\n    if n == 1:\n        return [1]\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for num in range(1, n+1):\n        result = 0\n        for digit in str(num):\n            result += int(digit)**5\n        if result == num:\n            ludic.append(num)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 10:\n        return []\n    else:\n        nums = []\n        for i in range(1, 10):\n            nums.append(i)\n        for i in range(10, n):\n            num = str(i)\n            sum = 0\n            for digit in num:\n                sum += int(digit)\n            if sum % 9 == 0:\n                nums.append(i)\n        return nums\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return None\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1,2]\n    else:\n        result = [1,2]\n        current = 3\n        while current <= n:\n            if current % 2 == 0:\n                if (current + 1) % 3 == 0:\n                    result.append(current)\n                    current += 2\n                else:\n                    current += 1\n            else:\n                if (current + 2) % 3 == 0:\n                    result.append(current)\n                    current += 2\n                else:\n                    current += 1\n        return result\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum_digits(i) + sum_digits(j) == sum_digits(i*j):\n                ludic.append(i*j)\n    return ludic\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #split the string into list of words\n    words = s.split()\n    #reversing the list of words\n    words.reverse()\n    #joining the words into a string\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    # spliting the string by space \n    # and then reversing each word\n    return''.join(reversed(s.split()))\n    \ndef reverse_sentence(s):\n    '''\n    Write a function to reverse words in a given string. \n    '''\n    \n    # using slice operator [::-1] to reverse each word \n    # and then joining them by space\n    return \" \".join(s[::-1].split())\n    \n    \ndef longest_word(s):\n    '''\n    Write a function that takes in a string and returns its longest word.\n    '''\n    \n    # Splitting the string into a list of words\n    # and then finding the longest word\n    return max(s.split(), key=len)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    return \" \".join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # break the string into a list\n    s = s.split(' ')\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = list(s)\n    i = 0\n    while i < len(s):\n        if s[i] =='':\n            s[i] =''\n            i += 1\n        if i == len(s) - 1:\n            break\n        s[i] = s[i + 1]\n        i += 1\n    s = ''.join(s)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    word_list = []\n    for word in s.split(\" \"):\n        word_list.append(word)\n    word_list.reverse()\n    return \" \".join(word_list)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_word(word):\n        return word[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = []\n    word = ''\n    for c in s:\n        if c =='':\n            words.append(word)\n            word = ''\n        else:\n            word += c\n    words.append(word)\n    return''.join(reversed(words))\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    if num == 1:\n        return False\n    if num % 2 == 0:\n        return False\n    \n    sq = int(num**0.5) + 1\n    \n    for div in range(3, sq, 2):\n        if num % div == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    num = int(num)\n    if num >= 2:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # write your code here\n    if num == 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number.\")\n                break\n        else:\n            print(num, \"is a prime number.\")\n    else:\n        print(num, \"is not a prime number.\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    def is_prime(num):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    return False\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    else:\n        if num % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(num**0.5)+1):\n                if num % i == 0:\n                    return False\n            return True\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi)/180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if type(degree) == int or type(degree) == float:\n        return degree*(math.pi)/180\n    else:\n        raise ValueError(\"Input not valid\")\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * 3.1415 / 180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / 3.1415\ndef question_1():\n    '''\n    Write a function to accept a distance in miles and convert it to kilometres.\n    '''\n    def miles_km(miles):\n        return miles * 1.6\n    print(miles_km(3))\n    print(miles_km(6))\ndef question_2():\n    '''\n    Write a function to accept a radius in miles and convert it to kilometres.\n    '''\n    def miles_km(miles):\n        return miles * 6371.01\n    print(miles_km(3))\n    print(miles_km(6))\ndef question_3():\n    '''\n    Write a function to accept a distance in miles and convert it to feet.\n    '''\n    def miles_feet(miles):\n        return miles * 5280\n    print(miles_feet(3))\n    print(miles_feet(6))\ndef question_4():\n    '''\n    Write a function to accept a distance in kilometres and convert it to miles.\n    '''\n    def km_miles(km):\n        return km * 0.62\n    print(km_miles(3))\n    print(km_miles(6))\ndef question_5():\n    '''\n    Write a function to accept a radius in kilometres and convert it to miles.\n    '''\n    def km_miles(km):\n        return km * 0.62\n    print(km_miles(3))\n    print(km_miles(6))\ndef question_6():\n    '''\n    Write a function to accept a weight in kilograms and convert it to pounds.\n    '''\n    def kg_lb(kg):\n        return kg * 2.2\n    print(kg_lb(5))\n    print(kg_lb(10))\ndef question_7():\n    '''\n    Write a function to accept a weight in pounds and convert it to kilograms.\n    '''\n    def lb_kg(lb):\n        return lb * 0.45\n    print(lb_kg(5))\n    print(lb_kg(10))\ndef question_8():\n    '''\n    Write a function to accept a velocity in meters per second and convert it to miles per hour.\n    '''\n    def mps_mph(mps):\n        return mps * 2.23694\n    print(mps_mph(3))\n    print(mps_mph(6))\ndef question_9():\n    '''\n    Write a function to accept a velocity in miles per hour and convert it to meters per second.\n    '''\n    def mph_mps(mph):\n        return mph * 0.44704\n    print(mph_mps(3))\n    print(mph_mps(6))\ndef question_10():\n    '''\n    Write a function to accept a time in seconds and convert it to minutes.\n    '''\n    def s_min(s):\n        return s * 6\n    print(s_min(3))\n    print(s_min(6))\ndef question_11():\n    '''\n    Write a function to accept a time in minutes and convert it to seconds.\n    '''\n    def min_s(min):\n        return min * 60\n    print(min_s(3))\n    print(min_s(6))\ndef question_12():\n    '''\n    Write a function to accept a time in seconds and convert it to minutes and seconds.\n    '''\n    def s_min(s):\n        min = math.floor(s / 60)\n        sec = s % 60\n        return f\"{min} minutes and {sec} seconds\"\n    print(s_min(3))\n    print(s_min(6))\ndef question_13():\n    '''\n    Write a function to accept a time in minutes and convert it to hours, minutes and seconds.\n    '''\n    def min_s(min):\n        hour = math.floor(min / 60)\n        min_ = math.floor(min % 60)\n        sec = min % 1\n        return f\"{hour} hours, {min_} minutes and {sec} seconds\"\n    print(min_s(3))\n    print(min_s(6))\ndef question_14():\n    '''\n    Write a function to accept a time in hours, minutes and seconds and convert it to seconds.\n    '''\n    def hr_min_s(hr_min_s):\n        hour = hr_min_s // 3600\n        min_ = (hr_min_s % 3600) // 60\n        sec = hr_min_s % 60\n        return f\"{hour} hours, {min_} minutes and {sec} seconds\"\n    print(hr_min_s(3))\n    print(hr_min_s(6))\ndef question_15():\n    '''\n    Write a function to accept a time in hours, minutes, and seconds and convert it to minutes.\n    '''\n    def hr_min_s(hr_min_s):\n        hour = hr_min_s // 3600\n        min_ = (hr_min_s % 3600) // 60\n        sec = hr_min_s % 60\n        return f\"{hour} hours, {min_} minutes and {sec} seconds\"\n    print(hr_min_s(3))\n    print(hr_min_s(6))\ndef question_16():\n    '''\n    Write a function to accept a time in hours, minutes, and seconds and convert it to hours, minutes and seconds.\n    '''\n    def hr_min_s(hr_min_s):\n        hour = hr_min_s // 3600\n        min_ = (hr_min_s % 3600) // 60\n        sec = hr_min_s % 60\n        return f\"{hour} hours, {min_} minutes and {sec} seconds\"\n    print(hr_min_s(3))\n    print(hr_min_s(6))\ndef question_17():\n    '''\n    Write a function to accept a time in seconds and convert it to hours, minutes, and seconds.\n    '''\n    def s_hr_min_s(s):\n        hour = math.floor(s / 3600)\n        min_ = math.floor((s % 3600) / 60)\n        sec = s % 60\n        return f\"{hour} hours, {min_} minutes and {sec} seconds\"\n    print(s_hr_min_s(3))\n    print(s_hr_min_s(6))\ndef question_18():\n    '''\n    Write a function to accept a time in seconds and convert it to hours, minutes, and seconds.\n    '''\n    def s_hr_min_s(s):\n        hour = math.floor(s / 3600)\n        min_ = math.floor((s % 3600) / 60)\n        sec = s % 60\n        return f\"{hour} hours, {min_} minutes and {sec} seconds\"\n    print(s_hr_min_s(3))\n    print(s_hr_min_s(6))\ndef question_19():\n    '''\n    Write a function to accept a time in hours, minutes, and seconds and convert it to seconds.\n    '''\n    def hr_min_s(hr_min_s):\n        hour = hr_min_s // 3600\n        min_ = (hr_min_s % 3600) // 60\n        sec = hr_min_s % 60\n        return f\"{hour} hours, {min_} minutes and {sec} seconds\"\n    print(hr_min_s(3))\n    print(hr_min_s(6))\ndef question_20():\n    '''\n    Write a function to accept a time in hours, minutes, and seconds and convert it to seconds.\n    '''\n    def hr_min_s(hr_min_s):\n        hour = hr_min_s // 3600\n        min_ = (hr_min_s % 3600) // 60\n        sec = hr_min_s % 60\n        return f\"{hour} hours, {min_} minutes and {sec} seconds\"\n    print(hr_min_s(3))\n    print(hr_min_s(6))\ndef question_21():\n    '''\n    Write a function to accept a distance in mile"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if type(degree)!= int and type(degree)!= float:\n        raise TypeError('degree must be a number')\n    if degree <= -360 or degree >= 360:\n        raise ValueError('degree must be between -360 and 360')\n    else:\n        return degree * (math.pi/180)\ndef convert_to_degree(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    if type(radian)!= int and type(radian)!= float:\n        raise TypeError('radian must be a number')\n    if radian <= -math.pi or radian >= math.pi:\n        raise ValueError('radian must be between -pi and pi')\n    else:\n        return radian * (180/math.pi)\ndef convert_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if type(degree)!= int and type(degree)!= float:\n        raise TypeError('degree must be a number')\n    if degree <= -360 or degree >= 360:\n        raise ValueError('degree must be between -360 and 360')\n    else:\n        return degree * (math.pi/180)\ndef determine_day(day):\n    '''\n    Write a function to determine what day of the week a given day is.\n    '''\n    if type(day)!= int:\n        raise TypeError('day must be an integer')\n    if day <= 0 or day > 365:\n        raise ValueError('day must be between 0 and 365')\n    else:\n        return day%7\ndef determine_day_of_year(day):\n    '''\n    Write a function to determine the day of the year for a given day.\n    '''\n    if type(day)!= int:\n        raise TypeError('day must be an integer')\n    if day <= 0 or day > 365:\n        raise ValueError('day must be between 0 and 365')\n    else:\n        return day%365\ndef determine_season(day):\n    '''\n    Write a function to determine the season for a given day.\n    '''\n    if type(day)!= int:\n        raise TypeError('day must be an integer')\n    if day <= 0 or day > 365:\n        raise ValueError('day must be between 0 and 365')\n    elif day >= 0 and day <= 90:\n        return'spring'\n    elif day >= 91 and day <= 183:\n        return'summer'\n    elif day >= 184 and day <= 274:\n        return 'fall'\n    elif day >= 275 and day <= 365:\n        return 'winter'\ndef day_of_year(day, month, year):\n    '''\n    Write a function to determine the day of the year for a given date.\n    '''\n    if type(day)!= int:\n        raise TypeError('day must be an integer')\n    if type(month)!= int:\n        raise TypeError('month must be an integer')\n    if type(year)!= int:\n        raise TypeError('year must be an integer')\n    if day <= 0 or day > 31:\n        raise ValueError('day must be between 1 and 31')\n    if month > 12 or month <= 0:\n        raise ValueError('month must be between 1 and 12')\n    if year < 0:\n        raise ValueError('year must be a positive integer')\n    else:\n        days_in_month = [31,28,31,30,31,30,31,31,30,31,30,31]\n        total_days_in_year = 0\n        for i in range(month-1):\n            total_days_in_year += days_in_month[i]\n        total_days_in_year += day\n        if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n            if month > 2:\n                total_days_in_year += 1\n        return total_days_in_year\ndef day_of_month(day, month, year):\n    '''\n    Write a function to determine the day of the month for a given date.\n    '''\n    if type(day)!= int:\n        raise TypeError('day must be an integer')\n    if type(month)!= int:\n        raise TypeError('month must be an integer')\n    if type(year)!= int:\n        raise TypeError('year must be an integer')\n    if day <= 0 or day > 31:\n        raise ValueError('day must be between 1 and 31')\n    if month > 12 or month <= 0:\n        raise ValueError('month must be between 1 and 12')\n    if year < 0:\n        raise ValueError('year must be a positive integer')\n    else:\n        days_in_month = [31,28,31,30,31,30,31,31,30,31,30,31]\n        total_days_in_month = 0\n        for i in range(month-1):\n            total_days_in_month += days_in_month[i]\n        total_days_in_month += day\n        return total_days_in_month\ndef month_of_year(day, month, year):\n    '''\n    Write a function to determine the month of the year for a given date.\n    '''\n    if type(day)!= int:\n        raise TypeError('day must be an integer')\n    if type(month)!= int:\n        raise TypeError('month must be an integer')\n    if type(year)!= int:\n        raise TypeError('year must be an integer')\n    if day <= 0 or day > 31:\n        raise ValueError('day must be between 1 and 31')\n    if month > 12 or month <= 0:\n        raise ValueError('month must be between 1 and 12')\n    if year < 0:\n        raise ValueError('year must be a positive integer')\n    else:\n        months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n        total_months = 0\n        for i in range(12):\n            if i == month-1:\n                total_months += 1\n        return total_months\ndef determine_century(year):\n    '''\n    Write a function to determine the century of a given year.\n    '''\n    if type(year)!= int:\n        raise TypeError('year must be an integer')\n    elif year < 0:\n        raise ValueError('year must be a positive integer')\n    else:\n        if year >= 100:\n            return math.ceil(year/100)\n        else:\n            return math.floor(year/100)\ndef determine_mod_inverse(num, mod):\n    '''\n    Write a function to determine the modular multiplicative inverse of a number.\n    '''\n    if type(num)!= int or type(mod)!= int:\n        raise TypeError('num and mod must be integers')\n    elif num < 0 or mod < 0:\n        raise ValueError('num and mod must be positive integers')\n    elif num >= mod:\n        raise ValueError('num must be less than mod')\n    else:\n        a,b = num,mod\n        x0,x1,y0,y1 = 1,0,0,1\n        while a!= 1:\n            q = b//a\n            a,b = b%a,a\n            x0,x1 = x1,x0-(x1*q)\n            y0,y1 = y1,y0-(y1*q)\n        if x1 < 0:\n            return x1 + mod\n        else:\n            return x1\ndef determine_leap_year(year):\n    '''\n    Write a function to determine if a given year is a leap year.\n    '''\n    if type(year)!= int:\n        raise TypeError('year must be an integer')\n    elif year < 0:\n        raise ValueError('year must be a positive integer')\n    elif year >= 0:\n        if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n            return True\n        else:\n            return False\ndef determine_weekday(year, month, day):\n    '''\n    Write a function to determine the day of the week for a given date.\n    '''\n    if type(year)!= int:\n        raise TypeError('year must be an integer')\n    elif type(month)!= int:\n        raise TypeError('month must be an integer')\n    eli"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    pi = math.pi\n    print(f'{math.degrees(pi):.2f}')\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    r = degree * (math.pi/180)\n    return r\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = pattern.finditer(text)\n    results = []\n    for match in matches:\n        results.append(match.group())\n    return results\n    \n    \ndef get_words_list(text):\n    '''\n    Write a function to get all words in a given text, ignoring all special characters.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    result = find_literals(text, pattern)\n    return result\n    \n    \ndef get_words_count(text):\n    '''\n    Write a function to count all words in a given text.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    result = find_literals(text, pattern)\n    return len(result)\n    \n    \ndef find_word_lengths(text):\n    '''\n    Write a function to find the length of all words in a given text.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    result = find_literals(text, pattern)\n    lengths = []\n    for item in result:\n        lengths.append(len(item))\n    return lengths\n    \n    \ndef find_word_lengths_count(text):\n    '''\n    Write a function to find the count of all word lengths in a given text.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    result = find_literals(text, pattern)\n    lengths = []\n    for item in result:\n        lengths.append(len(item))\n    frequency = {}\n    for item in lengths:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n    \n    \ndef find_longest_word(text):\n    '''\n    Write a function to find the longest word in a given text.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    result = find_literals(text, pattern)\n    word_lengths = []\n    for item in result:\n        word_lengths.append(len(item))\n    longest_word_length = max(word_lengths)\n    longest_word = []\n    for item in result:\n        if len(item) == longest_word_length:\n            longest_word.append(item)\n    return longest_word\n    \n    \ndef find_longest_word_count(text):\n    '''\n    Write a function to find the count of longest word in a given text.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    result = find_literals(text, pattern)\n    word_lengths = []\n    for item in result:\n        word_lengths.append(len(item))\n    frequency = {}\n    for item in result:\n        if len(item) in frequency:\n            frequency[len(item)] += 1\n        else:\n            frequency[len(item)] = 1\n    return frequency\n    \n    \ndef find_common_words(text, word_list):\n    '''\n    Write a function to find the number of times a given list of words appear in a given text.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    result = find_literals(text, pattern)\n    frequency = {}\n    for item in word_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n    \n    \ndef find_common_words_count(text, word_list):\n    '''\n    Write a function to find the count of times a given list of words appear in a given text.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    result = find_literals(text, pattern)\n    frequency = {}\n    for item in word_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n    \n    \ndef find_num_words_in_between(text, start_word, end_word):\n    '''\n    Write a function to find the number of words in between two words in a given text.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    result = find_literals(text, pattern)\n    num_words = 0\n    start_index = -1\n    end_index = -1\n    for i in range(len(result)):\n        if result[i] == start_word:\n            start_index = i\n        if result[i] == end_word:\n            end_index = i\n        if start_index!= -1 and end_index!= -1:\n            num_words += 1\n    return num_words\n    \n    \ndef find_num_words_in_between_count(text, start_word, end_word):\n    '''\n    Write a function to find the count of words in between two words in a given text.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    result = find_literals(text, pattern)\n    num_words = 0\n    start_index = -1\n    end_index = -1\n    for i in range(len(result)):\n        if result[i] == start_word:\n            start_index = i\n        if result[i] == end_word:\n            end_index = i\n        if start_index!= -1 and end_index!= -1:\n            num_words += 1\n    return num_words\n    \n    \ndef find_alphabet_occurence(text):\n    '''\n    Write a function to find the occurrence of each alphabet in a given text.\n    '''\n    pattern = r'[a-zA-Z]+'\n    result = find_literals(text, pattern)\n    frequency = {}\n    for item in result:\n        if item[0] in frequency:\n            frequency[item[0]] += 1\n        else:\n            frequency[item[0]] = 1\n    return frequency\n    \n    \ndef find_alphabet_occurence_count(text):\n    '''\n    Write a function to find the count of each alphabet in a given text.\n    '''\n    pattern = r'[a-zA-Z]+'\n    result = find_literals(text, pattern)\n    frequency = {}\n    for item in result:\n        if item[0] in frequency:\n            frequency[item[0]] += 1\n        else:\n            frequency[item[0]] = 1\n    return frequency\n    \n    \ndef find_substrings(text, pattern):\n    '''\n    Write a function to find all substrings of a given pattern in a given text.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    result = find_literals(text, pattern)\n    return result\n    \n    \ndef find_substrings_count(text, pattern):\n    '''\n    Write a function to find the count of all substrings of a given pattern in a given text.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    result = find_literals(text, pattern)\n    return len(result)\n    \n    \ndef find_substrings_lengths(text, pattern):\n    '''\n    Write a function to find the length of all substrings of a given pattern in a given text.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    result = find_literals(text, pattern)\n    lengths = []\n    for item in result:\n        lengths.append(len(item))\n    return lengths\n    \n    \ndef find_substrings_lengths_count(text, pattern):\n    '''\n    Write a function to find the count of all substrings of a given pattern in a given text.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    result = find_literals(text, pattern)\n    lengths = []\n    for item in result:\n        lengths.append(len(item))\n    frequency = {}\n    for item in lengths:"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    try:\n        pattern = re.compile(pattern)\n    except:\n        raise Exception(\"Error: pattern is not a valid regex pattern.\")\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = 0\n    lst = []\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_index = 0\n    end_index = 0\n    result = re.search(pattern, text)\n    if result == None:\n        return None\n    start_index = result.start()\n    end_index = result.end()\n    return text[start_index:end_index], start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # matched = re.search(pattern, text)\n    # if matched:\n    #     return matched.group()\n    # else:\n    #     raise Exception(\"Pattern not found in text.\")\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        raise Exception(\"Pattern not found in text.\")\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(0), result.start(), result.end()\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, 0, 0\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # returns the first match (not the best)\n    pattern = re.compile(pattern)\n    found = pattern.search(text)\n    return found.group(0)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Perform the search\n    result = re.search(pattern, text)\n    # Validate that the pattern was found in the text\n    if result is None:\n        print(\"Invalid pattern found.\")\n        return\n    # Use the result object to retrieve the start and end indices\n    start = result.start()\n    end = result.end()\n    # Print the result\n    print(\"The pattern was found in the text at position {} to {}\".format(start, end))\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0, 1]\n    for i in range(2, n+1):\n        bell.append( bell[i-1] + bell[i-2] )\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def f(x):\n        return x*(x+1)\n    if n==0:\n        return 0\n    else:\n        return f(n-1)+f(n-2)\n    #start writing your code here\n    \n    \ndef get_No_of_divisors(n):\n    '''\n    Write a python function to find the number of divisors of a given number\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n    \n    #start writing your code here\n    \n    \ndef get_primitive_root(m):\n    '''\n    Write a python function to find primitive root of a given prime number m.\n    '''\n    for i in range(1,m+1):\n        if get_No_of_divisors(i)==2 and i%2!=0:\n            x=i\n            break\n    return x\n    #start writing your code here\n    \n    \ndef get_least_primitive_root(m):\n    '''\n    Write a python function to find least primitive root of a given prime number m.\n    '''\n    for i in range(1,m+1):\n        if get_No_of_divisors(i)==2 and i%2!=0 and i!=1:\n            x=i\n            break\n    return x\n    #start writing your code here\n    \n    \ndef get_factors(n):\n    '''\n    Write a python function to find the factors of a given number n.\n    '''\n    x=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            x.append(i)\n    return x\n    \n    #start writing your code here\n    \n    \ndef get_smallest_number(m):\n    '''\n    Write a python function to find the smallest number which is evenly divisible by all the numbers from 1 to m.\n    '''\n    x=get_factors(m)\n    while True:\n        count=0\n        for i in range(1,len(x)+1):\n            if x[i-1]!=x[0]*i:\n                count+=1\n                break\n        if count==0:\n            return x[0]\n        else:\n            x=get_factors(x[0])\n    #start writing your code here\n    \n    \ndef get_least_common_multiple(m,n):\n    '''\n    Write a python function to find the least common multiple of two numbers m, n.\n    '''\n    x=[]\n    for i in range(1,m*n+1):\n        if i%m==0 and i%n==0:\n            x.append(i)\n    return x[0]\n    #start writing your code here\n    \n    \ndef get_greatest_common_divisor(m,n):\n    '''\n    Write a python function to find the greatest common divisor of two numbers m, n.\n    '''\n    if m>n:\n        great=m\n    else:\n        great=n\n    for i in range(great,0,-1):\n        if m%i==0 and n%i==0:\n            return i\n    #start writing your code here\n    \n    \ndef get_digits(n):\n    '''\n    Write a python function to find the digits of a number n.\n    '''\n    x=[]\n    while True:\n        x.append(n%10)\n        n=int(n/10)\n        if n==0:\n            break\n    x.reverse()\n    return x\n    #start writing your code here\n    \n    \ndef get_sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of a number n.\n    '''\n    x=get_digits(n)\n    return sum(x)\n    #start writing your code here\n    \n    \ndef get_power_set(a):\n    '''\n    Write a python function to find the power set of a given set.\n    '''\n    x=len(a)\n    for i in range(2**x):\n        temp=[]\n        for j in range(x):\n            if i%2==1:\n                temp.append(a[j])\n            i=int(i/2)\n        yield temp\n        \n    #start writing your code here\n    \n    \ndef get_universal_set(m):\n    '''\n    Write a python function to find the universal set of a given number m.\n    '''\n    x=get_power_set(m)\n    for i in x:\n        if len(i)==m:\n            yield i\n    #start writing your code here\n    \n    \ndef get_binary_representation(n):\n    '''\n    Write a python function to find the binary representation of a given number n.\n    '''\n    x=n\n    y=[]\n    while True:\n        if x>1:\n            y.append(x%2)\n            x=int(x/2)\n        else:\n            y.append(x)\n            break\n    y.reverse()\n    return y\n    #start writing your code here\n    \n    \ndef get_octal_representation(n):\n    '''\n    Write a python function to find the octal representation of a given number n.\n    '''\n    x=n\n    y=[]\n    while True:\n        if x>7:\n            y.append(x%8)\n            x=int(x/8)\n        else:\n            y.append(x)\n            break\n    y.reverse()\n    return y\n    #start writing your code here\n    \n    \ndef get_base_conversion(n,b):\n    '''\n    Write a python function to convert a number from one base to another base b.\n    '''\n    def f(x):\n        return x*b\n    y=get_binary_representation(n)\n    x=0\n    for i in range(len(y)):\n        x+=y[i]*(b**(len(y)-1-i))\n    x=list(map(f,x))\n    return x\n    #start writing your code here\n    \n    \ndef get_character_at_even_index(s):\n    '''\n    Write a python function to find the character at even index of a string s.\n    '''\n    x=list(s)\n    for i in range(len(x)):\n        if i%2==0:\n            return x[i]\n    #start writing your code here\n    \n    \ndef get_sum_of_digits_in_string(s):\n    '''\n    Write a python function to find the sum of digits of a string s.\n    '''\n    x=get_digits(int(s))\n    return sum(x)\n    #start writing your code here\n    \n    \ndef get_fibonacci_number(n):\n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    def f(x):\n        return x*(x+1)\n    if n==0:\n        return 0\n    else:\n        return f(n-1)+f(n-2)\n    #start writing your code here\n    \n    \ndef get_nth_even_fibonacci_number(n):\n    '''\n    Write a python function to find the nth even fibonacci number.\n    '''\n    a=0\n    b=1\n    for i in range(n):\n        c=a+b\n        a=b\n        b=c\n        if c%2==0:\n            return c\n    #start writing your code here\n    \n    \ndef get_nth_odd_fibonacci_number(n):\n    '''\n    Write a python function to find the nth odd fibonacci number.\n    '''\n    a=0\n    b=1\n    for i in range(n):\n        c=a+b\n        a=b\n        b=c\n        if c%2!=0:\n            return c\n    #start writing your code here\n    \n    \ndef get_power_set_of_set(a):\n    '''\n    Write a python function to find th"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell=0\n    for i in range(1,n+1):\n        bell=i*(i+1)/2\n    return bell\ndef bell_Number_recursion(n): \n    '''\n    Write a python function using recursion to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    return n*(n+1)/2+bell_Number_recursion(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1] \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0, 1, 1]\n    if n <= 2:\n        return bell[n]\n    else:\n        for i in range(2, n):\n            bell.append(bell[i-1] + bell[i-2])\n    return bell[n-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1, 1] \n    for i in range(2, n+1): \n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n] \n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0,1,2] \n    for i in range(3,n+1):\n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(n):\n        bell.append(bell[-1]*(n-i))\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1, n + 1):\n        bell.append(bell[-1] * i)\n    return bell[n]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 0:\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return []\n    else:\n        n = len(list1) - L\n        for i in range(n):\n            list1.pop()\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in list1:\n        if i!= L[k]:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    del(list1[L])\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) < L:\n        return list1\n    else:\n        new_list = []\n        for element in list1:\n            if list1.index(element)!= L-1:\n                new_list.append(element)\n        return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list_size = len(list1)\n    return [list1[i] for i in range(list_size) if i!= L]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list(set(list1) - set([L[0]]))\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1[:]\n    list2.pop(L)\n    return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return [list1[0]] + remove_kth_element(list1[1:],L) if L!= 0 else remove_kth_element(list1[1:],L)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([test_list[i][N] for i in range(len(test_list))])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return None\n    nth_col = []\n    for row in test_list:\n        nth_col.append(row[N-1])\n    return max(nth_col)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_nth_column = 0\n    for row in range(len(test_list)):\n        if test_list[row][N-1] > max_nth_column:\n            max_nth_column = test_list[row][N-1]\n    return max_nth_column\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return []\n    \n    return max([sublist[N-1] for sublist in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        max_list.append(max(test_list[i]))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    max = 0\n    \n    for elem in test_list:\n        if elem[N-1] > max:\n            max = elem[N-1]\n            \n    return max\n    \n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if test_list:\n        max_list = []\n        for i in test_list:\n            max_list.append(max(i))\n        return(max_list[N-1])\n    else:\n        return 'Empty List!'\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for item in lst:\n        new_list.append([item[0], item[1]])\n    return new_list\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if lst==[]:\n        return []\n    elif type(lst[0])==list:\n        return [lst[0]]+merge(lst[1:])\n    else:\n        return [lst[0:1]]+merge(lst[1:])\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst2 = []\n    for i in lst:\n        lst2.append(i[0])\n        lst2.append(i[1])\n    return lst2\nlst = [[1, 2], [3, 4], [5, 6], [7, 8]]\nprint(merge(lst))\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if lst == []:\n        return []\n    else:\n        return [lst[0][0], lst[1][0]] + merge(lst[1:])\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    result = []\n    for i in range(0,len(lst)):\n        result.append(lst[i][0])\n    for i in range(0,len(lst)):\n        result.append(lst[i][1])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return list(zip(*lst))\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_m = []\n    for i in range(len(lst)):\n        lst_m.append(lst[i][0])\n    lst_m.sort()\n    lst_m = list(dict.fromkeys(lst_m))\n    lst_m = [lst_m[0]] + [lst_m[-1]]\n    for i in range(len(lst)):\n        if lst[i][0] == lst_m[0]:\n            lst_m.append(lst[i][1])\n    return lst_m\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #sort the lst \n    #create a new list\n    #for each list, create a new list with the first item of the list and the second item of the list\n    #append the two new lists to the new list\n    #return the new list\n    pass\n    \ndef list_manipulation(lst, command, location, value=None):\n    '''\n    Write a function named list_manipulation which manipulates the elements of a list, based on the values of three parameters: command, location and value.\n    '''\n    #check if value exists\n    #check if location is valid\n    #check if command is valid\n    #if command is valid, check if location is valid\n    #if it is valid, append the value to the end of the list\n    pass\n    \ndef josephus(lst, step):\n    '''\n    Write a function named josephus which takes two parameters: an integer and a list of integers.\n    Return an integer that represents the position of the last survivor.\n    '''\n    #create a new list \n    #for each item in the lst, if the item is the same as the last one, then remove the item\n    #return the length of the list\n    pass\n    \ndef find_the_duplicate(lst):\n    '''\n    Write a function named find_the_duplicate which takes a list of numbers and returns a list of duplicates.\n    '''\n    #create a new list \n    #for each item in the lst, if the item is not already in the list, then add it to the list\n    #return the list \n    pass\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [list(i) for i in zip(*lst)]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [ [item[0] for item in lst], [item[1] for item in lst] ]\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_tuple_list = (1, 2, 3, 4, 5, 6, 7, 8, 9)\n    return [sum(test_tuple_list[:i+1]) for i in range(len(test_tuple_list))]\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    for i in test_list:\n        cum_sum.append(sum(i))\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return 0\n    cumm_sum = 0\n    for i in range(len(test_list)):\n        cumm_sum += test_list[i]\n    return cumm_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for x in range(0,len(test_list)):\n        cum_sum += test_list[x]\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if test_list == []:\n        return []\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = [1,2,3,4]\n    cumulative_sum_list = []\n    for index in range(len(test_list)):\n        if index == 0:\n            cumulative_sum_list.append(test_list[index])\n        else:\n            cumulative_sum_list.append(test_list[index] + cumulative_sum_list[index-1])\n    return cumulative_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_list = []\n    sum = 0\n    for i in range(len(test_list)):\n        sum = sum + test_list[i]\n        cummulative_list.append(sum)\n    return cummulative_list\nprint(cummulative_sum((1,2,3,4,5)))\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = list()\n    result.append(0)\n    for index,value in enumerate(test_list):\n        if index == 0:\n            result.append(value)\n        else:\n            result.append(result[-1] + value)\n    print(result)\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    output = []\n    for i in range(len(test_list)):\n        sum = 0\n        for j in range(i+1):\n            sum += test_list[j]\n        output.append(sum)\n    return output\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(1,len(test_list)):\n        test_list[i] += test_list[i-1]\n    return test_list\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = list(map(lambda nums: sum(nums)/len(nums), list(zip(*nums))))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_tup = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_tup.append(avg)\n    return avg_tup\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [round(sum(tuple_of_tuples[0])/len(tuple_of_tuples[0]), 2) for tuple_of_tuples in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    num_avg_list = []\n    for num in nums:\n        num_sum = 0\n        for nums in num:\n            num_sum += nums\n        num_avg = num_sum/len(num)\n        num_avg_list.append(num_avg)\n    return num_avg_list\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg_list.append(sum(tup) / len(tup))\n    return avg_list\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    length = len(nums[0])\n    total = []\n    for i in range(length):\n        total.append(0)\n    for t in nums:\n        for i in range(length):\n            total[i] += t[i]\n    for i in range(len(total)):\n        total[i] /= len(nums)\n    return total\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Your code here\n    return None\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [round(sum(num)/len(num), 1) for num in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    print(nums)\n    new_lst = []\n    for item in nums:\n        print(item)\n        sum_val = 0\n        for num in item:\n            print(num)\n            sum_val += num\n            print(sum_val)\n        avg_val = sum_val/len(item)\n        new_lst.append(avg_val)\n    return new_lst\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    for i in nums:\n        if type(i) == tuple:\n            return list(i)\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(test_tup1[i] % test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Tuples are of different length\"\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(test_tup1[i] % test_tup2[i] for i in range(0, len(test_tup1)))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(i % j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([(i % j) for i, j in zip(test_tup1, test_tup2)])\n    \n    \ndef tuple_modulo_two(tuple1, tuple2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(tuple1) == len(tuple2):\n        return tuple([(i % j) for i, j in zip(tuple1, tuple2)])\n    else:\n        return None\n    "
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        return tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] % test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = ()\n    for i in range(0, len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] % test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    i = 0\n    jumps = 0\n    while i < steps:\n        if i == d:\n            return jumps\n        if steps - i > d:\n            jumps += 1\n            steps -= d\n            i = 0\n        else:\n            jumps += 1\n            steps -= (i - d)\n            i = d\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    if d == 0 or steps == 0:\n        return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (d == 0 or steps == 0):\n        return 0\n    if (d > steps):\n        return float('inf')\n    Jumps = 1 + min_Jumps(steps - 1, d - 1)\n    if (d == steps):\n        Jumps += 1\n    return Jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    d = abs(d)\n    if d <= steps:\n        return 1\n    if d%steps == 0:\n        return (d//steps)\n    return (d//steps) + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jump_count = 0\n    for step in steps:\n        if step == 0 and d == 0:\n            break\n        elif step == 0:\n            continue\n        elif d < step:\n            break\n        elif d % step == 0:\n            jump_count += 1\n            d = d - step\n        elif d % step!= 0:\n            continue\n    print(jump_count)\n    return jump_count\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return int((math.sqrt(steps*steps + d*d) - d) / 2) \n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Your code here\n    # print(d, 0)\n    # print(steps)\n    # print(steps % d)\n    return (steps // d + steps % d)\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # This function calculates the minimum number of jumps required to reach a point (d, 0) from (0, 0).\n    # This function takes 2 arguments: the number of steps and the step size\n    # This function returns an integer\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current = 0\n    while current < d:\n        jumps += 1\n        current += steps\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Create an empty set\n    seen = set()\n    \n    # Create a queue\n    queue = []\n    \n    # Push the first element\n    queue.append((0, 0))\n    \n    # In the while loop, keep popping the last element from queue and check if it is in the set, if it is then that means we have reached the destination.\n    while len(queue)!= 0: \n        temp = queue.pop(0)\n        # If that is in the set, return the number of jumps\n        if temp[0] == d: \n            return len(seen)\n        # Otherwise, add it to the seen set and push all the neighbours of it to the queue.\n        if temp[0] + temp[1] > d: \n            if temp[1] > 0 and (temp[0], temp[1] - 1) not in seen: \n                seen.add((temp[0], temp[1] - 1)) \n                queue.append((temp[0], temp[1] - 1)) \n            if (temp[0] + temp[1] - 1, temp[1]) not in seen: \n                seen.add((temp[0] + temp[1] - 1, temp[1])) \n                queue.append((temp[0] + temp[1] - 1, temp[1]))\n        else: \n            if temp[0] > 0 and (temp[0] - 1, temp[1]) not in seen: \n                seen.add((temp[0] - 1, temp[1])) \n                queue.append((temp[0] - 1, temp[1]))\n            if (temp[0] + temp[1], temp[1]) not in seen: \n                seen.add((temp[0] + temp[1], temp[1])) \n                queue.append((temp[0] + temp[1], temp[1]))\n    \n    # Return -1 if not possible\n    return -1\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    ans = []\n    for num1,num2 in zip(nums1,nums2):\n        ans.append(num1/num2)\n    return ans\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]/nums2[i])\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i]/nums2[i])\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    ans = []\n    for i in range(0,len(nums1)):\n        ans.append(nums1[i]/nums2[i])\n    return ans\n    \ndef div_list2(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    ans = []\n    for num1,num2 in zip(nums1,nums2):\n        ans.append(num1/num2)\n    return ans\n    \n    \nif __name__ == '__main__':\n    l1 = [1,2,3,4,5]\n    l2 = [2,4,6,8,10]\n    \n    print(\"Using List functions\")\n    ans = add_list(l1,l2)\n    print(\"Addition of two lists {}\".format(ans))\n    ans = sub_list(l1,l2)\n    print(\"Subtraction of two lists {}\".format(ans))\n    ans = mul_list(l1,l2)\n    print(\"Multiplication of two lists {}\".format(ans))\n    ans = div_list(l1,l2)\n    print(\"Division of two lists {}\".format(ans))\n    ans = div_list2(l1,l2)\n    print(\"Division of two lists {}\".format(ans))\n    \n    print(\"\\nUsing Numpy functions\")\n    import numpy as np\n    arr1 = np.array(l1)\n    arr2 = np.array(l2)\n    ans = np.add(arr1,arr2)\n    print(\"Addition of two lists {}\".format(ans))\n    ans = np.subtract(arr1,arr2)\n    print(\"Subtraction of two lists {}\".format(ans))\n    ans = np.multiply(arr1,arr2)\n    print(\"Multiplication of two lists {}\".format(ans))\n    ans = np.divide(arr1,arr2)\n    print(\"Division of two lists {}\".format(ans))\n    ans = np.divide(arr1,arr2)\n    print(\"Division of two lists {}\".format(ans))\n    \n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div=[]\n    for num in range(len(nums1)):\n        div.append(nums1[num]/nums2[num])\n    return div\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res_list = []\n    for i in range(len(nums1)):\n        res_list.append(nums1[i] / nums2[i])\n    return res_list\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    try:\n        return list(map(lambda x, y: x/y, nums1, nums2))\n    except ZeroDivisionError:\n        return list(map(lambda x: None, nums1))\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i]=nums1[i]/nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [a/b for a,b in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # for i in range(len(nums1)):\n    #     nums1[i]=nums1[i]/nums2[i]\n    # return nums1\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char in '0123456789':\n            numbers.append(char)\n    print(numbers)\n    non_numbers = ''.join(numbers)\n    print(non_numbers)\n    return test_str.replace(non_numbers, '')\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for i in test_str:\n        if i.isdigit():\n            new_str += i\n    return new_str + test_str.replace(new_str, '')\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n    \n    for i in num_list:\n        test_str = test_str.replace(i, '', 1)\n    \n    test_str += ''.join(num_list)\n    print(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    punctuation = \"!#$%&'()*+,./:;<=>?@[\\\\]^_`{|}~\"\n    new_str = \"\"\n    for char in test_str:\n        if char in punctuation:\n            new_str += char\n    return new_str\n    \nprint(move_num(\"Hi, My name is Michael and I'm 22 years old\"))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for i in test_str:\n        if i.isdigit():\n            test_str = test_str.replace(i, '', 1)\n            return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = []\n    nums = []\n    for char in test_str:\n        if char.isnumeric():\n            nums.append(char)\n        else:\n            new_str.append(char)\n    new_str.append(nums)\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = [i for i in test_str if i.isnumeric()]\n    s1 = ''.join(test_str)\n    s2 = ''.join([i for i in test_str if not i.isnumeric()])\n    return s2+s1\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    last_list = []\n    temp_list = []\n    for i in test_str:\n        if i.isdigit():\n            temp_list.append(i)\n        else:\n            last_list.append(i)\n    last_list.append(int(''.join(temp_list)))\n    return ''.join(last_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join(list(filter(lambda x: x.isdigit(), test_str))) + ''.join(list(filter(lambda x: not x.isdigit(), test_str)))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for letter in test_str:\n        if letter.isdigit():\n            new_str += letter\n    return new_str + test_str\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = list(map(int, a.split(' ')))\n    n = len(a)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[j] % a[i] == 0 or a[i] % a[j] == 0:\n                dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + 1)\n            else:\n                dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j])\n    return n-dp[0][n-1]\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return largest_subsets(a, 0)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n < 2:\n        return n\n    b = [0]*n\n    c = [0]*n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                b[i] = max(b[i], c[j]+1)\n        c[i] = b[i]\n    return max(b)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    length = len(a)\n    a.sort()\n    answer = 0\n    for i in range(length):\n        subset_size = 1\n        for j in range(i+1,length):\n            if (a[i] % a[j] == 0):\n                subset_size += 1\n        answer = max(subset_size, answer)\n    return answer\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def is_divisible(a):\n        if (a%2==0):\n            return True\n        else:\n            return False\n    \n    def helper(nums, curr_size, best_size):\n        #print(curr_size, best_size)\n        if curr_size==len(nums):\n            return best_size\n        if is_divisible(nums[curr_size]):\n            return helper(nums, curr_size+1, best_size+1)\n        else:\n            return helper(nums, curr_size+1, best_size)\n    \n    return helper(a, 0, 0)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    L = len(a)\n    a.sort()\n    s = set(a)\n    for x in range(L):\n        a[x] = a[x]//2\n    for x in range(L):\n        for y in range(x, L):\n            if a[x]*2 not in s:\n                break\n            if a[x]*2 == a[y] and x!= y:\n                return 2*a[x]\n    return 0\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    import itertools\n    a.sort()\n    all_combinations = itertools.combinations(a, 2)\n    if any([not n % m for n, m in all_combinations]):\n        return len(a)\n    else:\n        return max([largest_subset(list(a)) for a in itertools.combinations(a, 2) if not n % m], default=0)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) <= 1:\n        return len(a)\n    else:\n        a.sort()\n        return largest_subset_helper(a, 0)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # a = [2, 4, 6, 8, 10, 12, 14]\n    # a = [1, 3, 5, 10]\n    \n    # dp = [1]\n    # dp2 = [1, 1]\n    # dp3 = [1, 1, 1]\n    # dp4 = [1, 1, 1, 1]\n    \n    # for i in range(1, len(a)):\n    #     for j in range(0, i):\n    #         if a[i]%a[j] == 0 and a[i] > a[j]:\n    #             if dp[j] + 1 > dp[i]:\n    #                 dp[i] = dp[j] + 1\n    #                 dp2[i] = a[j]\n    \n    # print(dp)\n    # print(dp2)\n    # print(dp3)\n    \n    # for i in range(2, len(a)):\n    #     for j in range(0, i):\n    #         if a[i]%a[j] == 0 and a[i] > a[j]:\n    #             if dp[j] + 1 > dp[i]:\n    #                 dp[i] = dp[j] + 1\n    #                 dp2[i] = a[j]\n    #     if dp[i] > dp[i-1]:\n    #         dp[i] = dp[i-1]\n    #         dp2[i] = dp2[i-1]\n    # print(dp)\n    # print(dp2)\n    \n    # for i in range(3, len(a)):\n    #     for j in range(0, i):\n    #         if a[i]%a[j] == 0 and a[i] > a[j]:\n    #             if dp[j] + 1 > dp[i]:\n    #                 dp[i] = dp[j] + 1\n    #                 dp2[i] = a[j]\n    #     if dp[i] > dp[i-1]:\n    #         dp[i] = dp[i-1]\n    #         dp2[i] = dp2[i-1]\n    # print(dp)\n    # print(dp2)\n    \n    # for i in range(4, len(a)):\n    #     for j in range(0, i):\n    #         if a[i]%a[j] == 0 and a[i] > a[j]:\n    #             if dp[j] + 1 > dp[i]:\n    #                 dp[i] = dp[j] + 1\n    #                 dp2[i] = a[j]\n    #     if dp[i] > dp[i-1]:\n    #         dp[i] = dp[i-1]\n    #         dp2[i] = dp2[i-1]\n    # print(dp)\n    # print(dp2)\n    \n    # for i in range(5, len(a)):\n    #     for j in range(0, i):\n    #         if a[i]%a[j] == 0 and a[i] > a[j]:\n    #             if dp[j] + 1 > dp[i]:\n    #                 dp[i] = dp[j] + 1\n    #                 dp2[i] = a[j]\n    #     if dp[i] > dp[i-1]:\n    #         dp[i] = dp[i-1]\n    #         dp2[i] = dp2[i-1]\n    # print(dp)\n    # print(dp2)\n    \n    # for i in range(6, len(a)):\n    #     for j in range(0, i):\n    #         if a[i]%a[j] == 0 and a[i] > a[j]:\n    #             if dp[j] + 1 > dp[i]:\n    #                 dp[i] = dp[j] + 1\n    #                 dp2[i] = a[j]\n    #     if dp[i] > dp[i-1]:\n    #         dp[i] = dp[i-1]\n    #         dp2[i] = dp2[i-1]\n    # print(dp)\n    # print(dp2)\n    \n    # for i in range(7, len(a)):\n    #     for j in range(0, i):\n    #         if a[i]%a[j] == 0 and a[i] > a[j]:\n    #             if dp[j] + 1 > dp[i]:\n    #                 dp[i] = dp[j] + 1\n    #                 dp2[i] = a[j]\n    #     if dp[i] > dp[i-1]:\n    #         dp[i] = dp[i-1]\n    #         dp2[i] = dp2[i-1]\n    # print(dp)\n    # print(dp2)\n    \n    # for i in range(8, len(a)):\n    #     for j in range(0, i):\n    #         if a[i]%a[j] == 0 and a[i] > a[j]:\n    #             if dp[j] + 1 > dp[i]:\n    #                 dp[i] = dp[j] + 1\n    #                 dp2[i] = a[j]\n    #     if dp[i] > dp[i-1]:\n    #         dp[i] = dp[i-1]\n    #         dp2[i] = dp2[i-1]\n    # print(dp)\n    # print(dp2)\n    \n    # for i in range(9, len(a)):\n    #     for j in range(0, i):\n    #         if a[i]%a[j] == 0 and a[i] > a[j]:\n    #             if dp[j] + 1 > dp[i]:\n    #                 dp[i] = dp[j] + 1\n    #                 dp2[i] = a[j]\n    #     if dp[i] > dp[i-1]:\n    #         dp[i] = dp[i-1]\n    #         dp2[i] = dp2[i-1]\n    # print(dp)\n    # print(dp2)\n    \n    # for i in range(10, len(a)):\n    #     for j in range(0, i):\n    #         if a[i]%a[j] == 0 and a[i] > a[j]:\n    #             if dp[j] + 1 > dp[i]:\n    #                 dp[i] = dp[j] + 1\n    #                 dp2[i] = a[j]\n    #     if dp[i] > dp[i-1]:\n    #         dp[i] = dp[i-1]\n    #         dp2[i] = dp2[i-1]\n    # print(dp)\n    # print(dp2)\n    \n    dp = [1]*len(a)\n    dp2 = [1]*len(a)\n    \n    for i in range(1, len(a)):\n        for j in range(0, i):\n            if a[i]%a[j] == 0 and a[i] > a[j]:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    dp2[i] = a[j]\n    \n    for i in range(2, len(a)):\n        if dp[i] > dp[i-1]:\n            dp[i] = dp[i-1]\n            dp2[i] "
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    else:\n        mid = int(n/2)\n        if n%2==0:\n            return (arr1[mid]+arr2[mid])/2\n        else:\n            return arr1[mid]\n    return None\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr3 = []\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            arr3.append(arr1[i])\n            i += 1\n        else:\n            arr3.append(arr2[j])\n            j += 1\n    if i < n:\n        arr3.extend(arr1[i:])\n    if j < n:\n        arr3.extend(arr2[j:])\n    return arr3[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = 0\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n==1:\n        return (arr1[0]+arr2[0])/2\n    elif n==0:\n        return (arr1[0]+arr2[0])/2\n    else:\n        m1 = get_median(arr1[:n//2], arr2, n//2)\n        m2 = get_median(arr1[n//2:], arr2, n//2)\n        return get_median([m1, m2], [m2, m1], 2)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j, k = 0, 0, 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            arr1[k] = arr1[i]\n            i += 1\n        else:\n            arr1[k] = arr2[j]\n            j += 1\n        k += 1\n    while j < n:\n        arr1[k] = arr2[j]\n        k += 1\n        j += 1\n    while i < n:\n        arr1[k] = arr1[i]\n        k += 1\n        i += 1\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1+arr2\n    arr = sorted(arr)\n    if n%2 == 0:\n        median = (arr[n//2] + arr[n//2 - 1])/2\n    else:\n        median = arr[n//2]\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0])/2\n    \n    \n    i = 0\n    j = 0\n    mid_index = n//2\n    \n    while i < mid_index and j < n - mid_index:\n        \n        if arr1[i] > arr2[j]:\n            j += 1\n        \n        elif arr1[i] < arr2[j]:\n            i += 1\n        \n        else:\n            i += 1\n            j += 1\n        \n        \n    return (max(arr1[i-1], arr2[j-1]) + min(arr1[i], arr2[j]))/2\n    \n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0]+arr2[0])/2\n    m = n//2\n    median = 0\n    if arr1[m] == arr2[m]:\n        return arr1[m]\n    elif arr1[m] < arr2[m]:\n        median = get_median(arr1[m:],arr2[:m],m)\n    else:\n        median = get_median(arr1[:m],arr2[m:],m)\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Initialize the index of mid element\n    mid = n // 2\n    # Initialize the index of smaller element\n    index1 = 0\n    index2 = 0\n    # Initialize the index of larger element\n    index3 = n - 1\n    # Copy the smaller element into the larger element\n    while (index1 <= mid and index3 >= mid):\n        if (arr1[index1] < arr2[index2]):\n            arr1[index3] = arr1[index1]\n            index1 += 1\n        else:\n            arr1[index3] = arr2[index2]\n            index2 += 1\n        index3 -= 1\n    # Copy the remaining elements of larger element\n    while (index1 <= mid):\n        arr1[index3] = arr1[index1]\n        index1 += 1\n        index3 -= 1\n    # Copy the remaining elements of smaller element\n    while (index2 <= mid):\n        arr1[index3] = arr2[index2]\n        index2 += 1\n        index3 -= 1\n    # Return the median\n    return arr1[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    \n    if n == 1:\n        return min(arr1[0], arr2[0])\n    \n    mid_1 = n // 2\n    mid_2 = (n - 1) // 2\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(n):\n        nums=nums**2\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = [i ** n for i in nums]\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return list(map(lambda x: x**n, nums))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num**n)\n    return res\nprint(nth_nums([1,2,3,4],2))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i]=nums[i]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    out = []\n    for num in nums:\n        out.append(num**n)\n    return out\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\nprint(nth_nums([1,2,3,4],2))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in nums:\n        i = i**n\n    return nums"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper() == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = input(\"Enter a string: \")\n    return string.upper()\n    \n    \ndef count(string):\n    '''\n    Write a python function to count the number of times a given substring occurs in a string.\n    '''\n    string = input(\"Enter a string: \")\n    sub_string = input(\"Enter a substring: \")\n    return string.count(sub_string)\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # convert string to upper case.\n    string = string.upper()\n    # check if it is a string\n    if not isinstance(string, str):\n        return 'Input is not a string'\n    # return if it is already upper case\n    elif string == string.upper():\n        return string\n    # return converted string\n    else:\n        return string\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not string:\n        return False\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for c in string:\n        if c.isupper():\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \ndef get_Squared_List(newList): \n    '''\n    Write a python function to square every number in a given list.\n    '''\n    newList = [x**2 for x in newList]\n    return newList\n    \ndef get_Multiplied_List(newList, num): \n    '''\n    Write a python function to multiply all numbers in a given list by a given number.\n    '''\n    newList = [x*num for x in newList]\n    return newList\n    \ndef get_Negated_List(newList): \n    '''\n    Write a python function to negate all numbers in a given list.\n    '''\n    newList = [-x for x in newList]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = a\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n    \ndef reverse_list(aList):\n    '''\n    Write a python function to reverse the element of a given list.\n    '''\n    aList=aList[::-1]\n    return aList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if newList == None or newList == []:\n        return []\n    l = len(newList)\n    temp = newList[0]\n    newList[0] = newList[l - 1]\n    newList[l - 1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    listLen=len(newList)\n    temp=newList[0]\n    newList[0]=newList[listLen-1]\n    newList[listLen-1]=temp\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (3.14 * r**2)/2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # your code goes here\n    import math\n    p=math.pi*r**2\n    s=math.sqrt(p/2)\n    return s*3\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n    \n    \ndef check_palindrome(string) :  \n    '''\n    Write a python function to check whether the given input string is palindrome or not. \n    Return True if the string is palindrome otherwise return False.\n    '''\n    pass\n    \n    \ndef word_count(string) :  \n    '''\n    Write a python function to find the number of words in a given string. \n    Note : A word is defined as a sequence of non-space characters. \n    '''\n    pass\n    \n    \ndef longest_word(string) :  \n    '''\n    Write a python function to find the longest word in a given string. \n    Note : A word is defined as a sequence of non-space characters. \n    '''\n    pass\n    \n    \ndef find_factors(number) :  \n    '''\n    Write a python function to find the factors of a given number. \n    Note : Factors should be greater than 1 and less than given number.\n    '''\n    pass\n    \n    \ndef is_prime(number) :  \n    '''\n    Write a python function to find whether the given number is prime or not. \n    Note : A prime number is a natural number greater than 1 and having only two factors : 1 and the number itself.\n    '''\n    pass\n    \n    \ndef is_power(a,b) :  \n    '''\n    Write a python function to check whether one number is the power of another or not. \n    Note : The first number should be greater than the second number.\n    '''\n    pass\n    \n    \ndef is_power_of_two(n) :  \n    '''\n    Write a python function to check whether the given number is a power of two or not.\n    '''\n    pass\n    \n    \ndef factorial(n) :  \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    pass\n    \n    \ndef reverse(string) :  \n    '''\n    Write a python function to find the reverse of the given string.\n    '''\n    pass\n    \n    \ndef find_all_indexes(string, letter) :  \n    '''\n    Write a python function to find all the indexes of the given letter in the given string. \n    '''\n    pass\n    \n    \ndef replace_char_at_index(string, index, letter) :  \n    '''\n    Write a python function to replace the character at given index with the given letter.\n    '''\n    pass\n    \n    \ndef find_all_indexes_of_substring(string, substring) :  \n    '''\n    Write a python function to find all the indexes of the given substring in the given string.\n    '''\n    pass\n    \n    \ndef remove_all_occurences(string, letter) :  \n    '''\n    Write a python function to remove all occurences of given letter from the given string.\n    '''\n    pass\n    \n    \ndef replace_all_occurences(string, old_letter, new_letter) :  \n    '''\n    Write a python function to replace all occurences of the given old letter in the given string with the given new letter.\n    '''\n    pass\n    \n    \ndef is_anagram(string1, string2) :  \n    '''\n    Write a python function to check whether two given strings are anagrams or not.\n    '''\n    pass\n    \n    \ndef is_palindrome_using_recursion(string) :  \n    '''\n    Write a python function to check whether the given string is palindrome or not. \n    The function should return true if the string is palindrome otherwise it should return false.\n    '''\n    pass\n    \n    \ndef generate_all_substrings(string) :  \n    '''\n    Write a python function to generate all the substrings of the given string.\n    '''\n    pass\n    \n    \ndef group_anagrams(list_of_strings) :  \n    '''\n    Write a python function to group anagrams together from the list of strings.\n    '''\n    pass\n    \n    \ndef rotate_matrix(matrix) :  \n    '''\n    Write a python function to rotate the given matrix by 90 degrees clockwise.\n    Note : You can assume that the given matrix is a square matrix i.e. size is same for both the rows and columns.\n    '''\n    pass\n    \n    \ndef sort_list_of_strings(list_of_strings) :  \n    '''\n    Write a python function to sort the given list of strings in the order of alphabets.\n    '''\n    pass\n    \n    \ndef print_formatted(number) :  \n    '''\n    Write a python function to print the following pattern for the given number of rows.\n    Note : There will be a single space between the stars.\n    Example :\n    Input : 3\n    Output :\n    1 \n    2 2 \n    3 3 3 \n    '''\n    pass\n    \n    \ndef generate_matrix(n) :  \n    '''\n    Write a python function to generate a matrix with n rows and n columns with all values as 0.\n    Note : You can assume that n is a positive integer.\n    '''\n    pass\n    \n    \ndef find_sum_of_diagonals(matrix) :  \n    '''\n    Write a python function to find the sum of diagonal elements of the given matrix.\n    Note : The first diagonal is the diagonal line connecting the first row to the last column. The second diagonal is the diagonal line connecting the second row to the second last column and so on.\n    '''\n    pass\n    \n    \ndef find_largest_product_in_a_series(series, n) :  \n    '''\n    Write a python function to find the product of the n adjacent numbers in the series.\n    '''\n    pass\n    \n    \ndef find_max_and_min(series) :  \n    '''\n    Write a python function to find the minimum and maximum number in the series.\n    '''\n    pass\n    \n    \ndef find_factors_of_number(number) :  \n    '''\n    Write a python function to find the factors of the given number.\n    '''\n    pass\n    \n    \ndef find_largest_prime_factor(number) :  \n    '''\n    Write a python function to find the largest prime factor of the given number.\n    '''\n    pass\n    \n    \ndef find_fibonacci_number(position) :  \n    '''\n    Write a python function to find the fibonacci number at given position.\n    Note : Position starts from 1.\n    '''\n    pass\n    \n    \ndef find_fibonacci_number_again(position) :  \n    '''\n    Write a python function to find the fibonacci number at given position.\n    Note : This function will find the fibonacci number at nth position (if position is valid) or it will return 0 otherwise.\n    Note : This function will take O(n) time.\n    '''\n    pass\n    \n    \ndef reverse_string(string) :  \n    '''\n    Write a python function to reverse a given string.\n    '''\n    pass\n    \n    \ndef reverse_words_in_a_given_string(string) :  \n    '''\n    Write a python function to reverse words in a given string.\n    '''\n    pass\n    \n    \ndef is_rotation(string1, string2) :  \n    '''\n    Write a python function to check whether the first string is a rotation of the second string.\n    Note : There can be at most one character that needs to be changed for string1 to become a rotation of string2.\n    '''\n    pass\n    \n    \ndef check_if_string_is_palindrome(string) :  \n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    pass\n    \n    \ndef rotate_matrix_90_degree_counter_clockwise(matrix) :  \n    '''\n    Write a python function to rotate the given matrix by 90 degrees clockwise.\n    Note : You can assume that the given matrix is a square matrix i.e. size is same for both the rows and columns.\n    '''\n    pass\n    \n    \ndef find_ma"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (2*3.14*r**2)/2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return pi*r*r*(3-sqrt(3))\n    #return pi*r*(r**2)/3\nprint(triangle_area(1.5))"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3.14*r*r\ndef circle_area(r) :\n    '''\n    Write a python function to find the area of the circle with a given radius.\n    '''\n    return 3.14*r*r\ndef largest_circle_inscribing_triangle(a,b,c) :\n    '''\n    Write a python function to find the radius of the largest circle that can be inscribed in a triangle with sides of length a, b and c.\n    '''\n    return (a*b*c)/(4*triangle_area(max(a,b,c)))\ndef volume_of_largest_inscribing_circle(a,b,c) :\n    '''\n    Write a python function to find the volume of the largest circle that can be inscribed in a triangle with sides of length a, b and c.\n    '''\n    return circle_area(largest_circle_inscribing_triangle(a,b,c))"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = (math.sqrt(3)*r*r)/4\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * r * r * (1 + 0.5 * (3 ** 0.5))\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    a = (math.sqrt(2*r**2/3))*r/2\n    return a\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 2 * 3.14 * r ** 2 / (3 + 2 * r)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # array = [1,2,3,4,5,6,7]\n    # array = [1,2,3,4,5,6,7,8]\n    # array = [1,2,3,4,5,6,7,9]\n    \n    if start == end:\n        if array[start] == array[start+1]:\n            print(\"Odd\")\n            return array[start]\n        else:\n            print(\"Even\")\n            return array[start+1]\n    else:\n        if start == end - 1:\n            if array[start] == array[start+1]:\n                print(\"Odd\")\n                return array[start]\n            else:\n                print(\"Even\")\n                return array[start+1]\n        else:\n            mid = (start+end)//2\n            if array[mid] == array[mid+1]:\n                return find_First_Missing(array,start,mid)\n            else:\n                return find_First_Missing(array,mid,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if end <= start:\n        return -1\n    if end == start+1:\n        return array[start] + 1\n    else:\n        mid = (end+start)//2\n        if array[mid] == mid:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(end == None):\n        end = len(array)\n    if(start == end):\n        return array[start] + 1\n    if(end > len(array)):\n        raise ValueError(\"Input array is empty\")\n    if(start < 0):\n        raise ValueError(\"Input array can't contain negative integers\")\n    if(array[start]!= start):\n        return start\n    if(array[end - 1]!= end):\n        return end\n    mid = (start + end) // 2\n    if(array[mid]!= mid):\n        return mid\n    if(mid > start and array[mid - 1]!= mid - 1):\n        return mid - 1\n    if(mid < end - 1 and array[mid + 1]!= mid + 1):\n        return mid + 1\n    return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start > end:\n        return None\n    mid = (start + end)//2\n    if array[mid] == mid+1:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #edge cases\n    if end == None:\n        end = len(array) - 1\n    if start > end:\n        return\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    \n    if start >= end:\n        return end + 1\n        \n    mid = start + (end - start) // 2\n    \n    if array[mid]!= mid:\n        if mid > 0 and array[mid - 1] == mid - 1:\n            return find_First_Missing(array, start=start, end=mid - 1)\n        else:\n            return find_First_Missing(array, start=mid + 1, end=end)\n            \n    if array[mid] == mid:\n        return find_First_Missing(array, start=start, end=mid - 1)\n        \n    else:\n        return find_First_Missing(array, start=mid + 1, end=end)\n        \n        \n        \n        \n    \n    \n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if start>end:\n        return -1\n    while start<=end:\n        mid=(start+end)//2\n        if array[mid]==mid+1:\n            start=mid+1\n        else:\n            end=mid-1\n    return start\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    i = 0\n    l1 = []\n    while i < len(list):\n        if list[i] % 2 == 0:\n            l1.append(list[i])\n        i += 1\n    return l1\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    EvenList = []\n    for num in list:\n        if (num % 2 == 0):\n            EvenList.append(num)\n    return EvenList\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    print(list[0:4])\n    print(list[3:6])\n    \n    \nSplit([1,2,3,4,5,6])\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_even = []\n    for i in list:\n        if(i%2 == 0):\n            list_even.append(i)\n    return list_even\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x % 2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    x = len(list)\n    list = list[1:x-1]\n    print(list)\n    return list\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for i in list:\n        if i % 2 == 0:\n            even_num.append(i)\n    return even_num\nprint(Split([1,2,3,4,5,6,7,8,9,10])"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\nprint(Split([1,2,3,4,5,6,7,8,9]))\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    if not isinstance(list, list): \n        raise TypeError('Input is not a list') \n    result = [] \n    for number in list: \n        if number % 2 == 0: \n            result.append(number) \n    return result \n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    left = x - 1, y\n    right = x + 1, y\n    up = x, y + 1\n    down = x, y - 1\n    upper_left = x - 1, y + 1\n    upper_right = x + 1, y + 1\n    lower_left = x - 1, y - 1\n    lower_right = x + 1, y - 1\n    return left, right, up, down, upper_left, upper_right, lower_left, lower_right\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 1:\n        return sub\n    else:\n        return adjac(ele[1:], sub + [ele[:1]])\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub = [ele]\n    if len(sub) == 1:\n        sub.append(ele)\n        return sub\n    if sub[-1][0] == ele[0] and sub[-1][1] == ele[1]:\n        sub[-1][2] += 1\n    else:\n        sub.append(ele)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    #sub = [ele]\n    #if len(sub) == 1:\n    #    return sub\n    #else:\n    #    return [sub + [x+1, y], sub + [x+1, y+1], sub + [x, y+1], sub + [x-1, y], sub + [x-1, y+1], sub + [x, y-1], sub + [x+1, y-1]]\n    if x == 0:\n        if y == 0:\n            return [[x, y+1], [x+1, y], [x+1, y+1]]\n        elif y == m - 1:\n            return [[x, y-1], [x+1, y], [x+1, y-1]]\n        else:\n            return [[x, y-1], [x, y+1], [x+1, y], [x+1, y-1], [x+1, y+1]]\n    elif x == n - 1:\n        if y == 0:\n            return [[x, y+1], [x-1, y], [x-1, y+1]]\n        elif y == m - 1:\n            return [[x, y-1], [x-1, y], [x-1, y-1]]\n        else:\n            return [[x, y-1], [x, y+1], [x-1, y], [x-1, y-1], [x-1, y+1]]\n    elif y == 0:\n        return [[x-1, y], [x+1, y], [x, y+1], [x-1, y+1], [x+1, y+1]]\n    elif y == m - 1:\n        return [[x-1, y], [x+1, y], [x, y-1], [x-1, y-1], [x+1, y-1]]\n    else:\n        return [[x-1, y], [x+1, y], [x, y-1], [x, y+1], [x-1, y-1], [x-1, y+1], [x+1, y-1], [x+1, y+1]]\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(ele)): \n        if(ele[i] + 1 <= 8): \n            sub.append([ele[i], ele[i] + 1])\n        if(ele[i] - 1 >= 1): \n            sub.append([ele[i], ele[i] - 1])\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # coordinates\n    x = ele[0] \n    y = ele[1] \n    # extract adjacent coordinates\n    x_up = x + 1\n    x_down = x - 1\n    x_left = x - 1\n    x_right = x + 1\n    y_up = y - 1\n    y_down = y + 1\n    y_left = y + 1\n    y_right = y - 1\n    #\n    sub.append([x_up, y])\n    sub.append([x_down, y])\n    sub.append([x_left, y])\n    sub.append([x_right, y])\n    sub.append([x, y_up])\n    sub.append([x, y_down])\n    sub.append([x, y_left])\n    sub.append([x, y_right])\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        return [ele]\n    else:\n        return [tuple(sub) + (ele[0],), tuple(sub) + (ele[1],)]\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    global canvas, coords\n    if coords[ele] in canvas.gettags(coords[ele]):\n        return sub\n    else:\n        adj = canvas.coords(coords[ele])\n        for i in range(len(adj)):\n            if adj[i] in coords.values():\n                return adjac(adj[i], sub+[adj[i]])\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    global data\n    \n    sub.append(ele)\n    for ele_data in data:\n        if ele_data[0] == ele:\n            sub = adjac(ele_data[1], sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n    else:\n        neighbors = [(ele[0] + 1, ele[1]), (ele[0] - 1, ele[1]), (ele[0], ele[1] - 1), (ele[0], ele[1] + 1)]\n        for n in neighbors:\n            if n not in sub:\n                sub.append(n)\n                adjac(n, sub)\n    return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Solution 1:\n    # return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_',' ').replace(' ', '_')\n    \ndef correct_sentence(text):\n    '''\n    Write a function to correct a sentence spelling.\n    '''\n    return \" \".join([replace_spaces(word) if word.isalnum() else word for word in text.split()])\n    \ndef sort_array(a, b):\n    '''\n    Given two arrays a and b write a function to compute their intersection.\n    '''\n    return sorted(list(set(a) & set(b)))\n    \ndef count_islands(grid):\n    '''\n    Given a 2d grid map of '1's (land) and '0's (water), count the number of islands.\n    An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.\n    You may assume all four edges of the grid are all surrounded by water.\n    '''\n    def dfs(grid, x, y, vis):\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y]!= '1' or (x,y) in vis:\n            return\n        vis.add((x,y))\n        dfs(grid, x+1, y, vis)\n        dfs(grid, x-1, y, vis)\n        dfs(grid, x, y+1, vis)\n        dfs(grid, x, y-1, vis)\n    vis = set()\n    res = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == '1' and (i,j) not in vis:\n                dfs(grid, i, j, vis)\n                res += 1\n    return res\n    \ndef zero_matrix(matrix):\n    '''\n    Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column are set to 0.\n    '''\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == 0:\n                matrix[i] = [0]*len(matrix[0])\n                for k in range(len(matrix)):\n                    matrix[k][j] = 0\n    return matrix\n    \ndef sub_array(arr, sub):\n    '''\n    Write a function to check if a given array contains a given subarray.\n    '''\n    for i in range(len(arr)):\n        if arr[i:i+len(sub)] == sub:\n            return True\n    return False\n    \ndef rotate_array(a, d):\n    '''\n    Given an array a of integers and an integer d, rotate the array to the right by d elements.\n    '''\n    return a[-d:] + a[:len(a) - d]\n    \ndef remove_duplicates(arr):\n    '''\n    Write a function to remove duplicates from an array.\n    '''\n    return list(dict.fromkeys(arr))\n    \ndef string_compression(string):\n    '''\n    Implement a method to perform basic string compression using the counts of repeated characters.\n    For example, the string aabcccccaaa would become a2blc5a3.\n    If the \"compressed\" string would not become smaller than the original string, your method should return the original string.\n    You can assume the string has only uppercase and lowercase letters (a - z).\n    '''\n    count = 0\n    compressed = []\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            count += 1\n        else:\n            compressed.append(string[i] + str(count))\n            count = 1\n    if count > 0:\n        compressed.append(string[-1] + str(count))\n    compressed = \"\".join(compressed)\n    if len(compressed) < len(string):\n        return compressed\n    return string\n    \ndef zero_matrix_2(matrix):\n    '''\n    Write an algorithm such that if an element in a 2d matrix is 0, its entire row and column are set to 0.\n    '''\n    rows = set()\n    cols = set()\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == 0:\n                rows.add(i)\n                cols.add(j)\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if i in rows or j in cols:\n                matrix[i][j] = 0\n    return matrix\n    \ndef min_subarray_sum(nums, s):\n    '''\n    Given an array of positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum \u2265 s. If there isn't one, return 0 instead.\n    '''\n    curr_sum = 0\n    min_len = float('inf')\n    start, end = 0, 0\n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        while curr_sum >= s:\n            min_len = min(min_len, i - start + 1)\n            curr_sum -= nums[start]\n            start += 1\n    return min_len if min_len!= float('inf') else 0\n    \ndef max_profit_with_k_transactions(prices, k):\n    '''\n    You are given an array of integers representing the prices of a single stock on various days (each index in the array represents a different day).\n    You are also given an integer k, which represents the number of transactions you are allowed to make. One transaction consists of buying the stock on a given day and selling it on another, later day.\n    Write a function that returns the maximum profit that you can make buying and selling the stock, given k transactions.\n    Note that you can only hold 1 share of the stock at a time; in other words, you cannot buy more than 1 share of the stock on any given day, and you cannot buy a share of the stock if you are still holding another share.\n    Also note that you cannot sell a share of the stock if you don't hold any share of the stock, i.e., you must hold at least 1 share of the stock at all times.\n    '''\n    if k == 0:\n        return 0\n    profits = [0 for _ in range(len(prices))]\n    for i in range(len(prices)):\n        for j in range(i, len(prices)):\n            profits[j] = max(profits[j], prices[j] - prices[i] + profits[i])\n    return profits[-1]\n    \ndef first_unique_char(string):\n    '''\n    Write a method to replace all the spaces in a string with '%20'. You may assume that the string has sufficient space at the end to hold the additional characters, and that you are given the \"true\" length of the string.\n    '''\n    res = ''\n    for i in range(len(string)):\n        if string[i] =='':\n            res += '%20'\n        else:\n            res += string[i]\n    return res\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n    \nreplace_spaces('Hello World')\nreplace_spaces('Hello_World')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] == '_':\n            text[i] =''\n        elif text[i] =='':\n            text[i] = '_'\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # text = \"hello world\"\n    # print(replace_spaces(text))\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for c in text:\n        if c =='':\n            result += '_'\n        else:\n            result += c\n    return result\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if not text:\n        return text\n    return text.replace('_','').replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for item in num_list:\n        if item!= 0:\n            new_list.append(item)\n    new_list.extend([0]*num_list.count(0))\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.sort()\n    print(num_list)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if not num_list or len(num_list) < 1:\n        print('Can\\'t perform this operation')\n        return num_list\n    num = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= num:\n            num_list[i - 1] = num_list[i]\n            num_list[i] = num\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            count += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in num_list:\n        if i!= 0:\n            num_list[count] = i\n            count += 1\n    while count < len(num_list):\n        num_list[count] = 0\n        count += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.remove(num_list[i])\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    zeroes = []\n    for item in num_list:\n        if item == 0:\n            zeroes.append(item)\n        else:\n            new_list.append(item)\n    return new_list + zeroes\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    counter = 0\n    for n in num_list:\n        if n == 0:\n            counter += 1\n        else:\n            pass\n    for i in range(counter):\n        num_list.remove(0)\n    num_list.extend([0 for _ in range(counter)])\n    return num_list\n    \n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    temp_list = num_list[:]\n    for num in temp_list:\n        if num == 0:\n            num_list.remove(num)\n            num_list.append(num)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list == []:\n        return num_list\n    \n    first_zero = False\n    for i in range(len(num_list)):\n        if num_list[i] == 0 and not first_zero:\n            num_list[i] = num_list.pop(i)\n            first_zero = True\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += (arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(0, n) : \n        for j in range(i+1, n) : \n            x ^= arr[i] ^ arr[j] \n    return x \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum(arr[i]^arr[j] for i in range(n) for j in range(i+1,n))\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor ^= arr[i]^arr[j]\n    return xor \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(0,n) :\n        for j in range(i+1,n) :\n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #import re\n    from itertools import combinations\n    #arr = list(map(int,re.findall(r'\\d+', input())))\n    #n = len(arr)\n    comb = list(combinations(arr, 2))\n    #print(comb)\n    sum = 0\n    for i,j in comb:\n        sum = i ^ j\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr_set = set(arr)\n    res = 0\n    for i in arr_set : \n        for j in arr_set :\n            res += i^j\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return (arr[0] ^ arr[1])\n    else:\n        return (arr[0] ^ arr[1] ^ pair_xor_Sum(arr[2:],n-1))\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    result = []\n    for value in iterable:\n        hq.heappush(h,value)\n    for i in range(len(h)):\n        result.append(hq.heappop(h))\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for val in iterable:\n        hq.heappush(h, val)\n    return [hq.heappop(h) for i in range(len(h))]\ndef radix_sort(iterable, key=lambda x:x):\n    '''\n    Write a function to sort the given iterable.\n    The iterable should be of same type as iterable.\n    The key function should be compatible with given iterable type.\n    '''\n    max_val = max(iterable, key=key)\n    n = len(str(max_val))\n    itr = []\n    for i in range(n):\n        itr.append(list())\n    for val in iterable:\n        cnt = str(val)[i]\n        itr[len(cnt)-1].append(val)\n    return [x for y in itr for x in y]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    result = []\n    for value in iterable:\n        hq.heappush(h,value)\n    for i in range(len(h)):\n        result.append(hq.heappop(h))\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return True if actual_cost == sale_amount else False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (actual_cost==sale_amount):\n        print(\"\\n\\t\\tTransaction Successful\\n\")\n        print(f\"\\t\\tSale Amount: {sale_amount}\")\n        print(f\"\\t\\tActual Cost: {actual_cost}\")\n        print(f\"\\t\\tProfit: {sale_amount-actual_cost}\")\n        print(f\"\\t\\tLoss: {sale_amount-actual_cost}\")\n    else:\n        print(\"\\n\\t\\tTransaction Unsuccessful\\n\")\n        print(f\"\\t\\tSale Amount: {sale_amount}\")\n        print(f\"\\t\\tActual Cost: {actual_cost}\")\n        print(f\"\\t\\tProfit: {sale_amount-actual_cost}\")\n        print(f\"\\t\\tLoss: {sale_amount-actual_cost}\")\n    return\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount :\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if(sale_amount > actual_cost):\n        print(\"The amount\",sale_amount,\" is not a loss, you can sell your product.\")\n    else:\n        print(\"The amount\",sale_amount,\" is not a profit, you can not sell your product.\")\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    assert(sale_amount>=0)\n    if actual_cost<sale_amount:\n        print(f\"The sale amount is too high, there is no profit and loss\")\n    elif actual_cost>sale_amount:\n        print(f\"The sale amount is too low, there is no profit and loss\")\n    else:\n        print(f\"The sale amount is perfect, there is no profit and loss\")\n    \n    \n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == actual_cost:\n        print(\"The amount has no profit and no loss\")\n    else:\n        print(\"The amount has some loss and profit\")\n        \nnoprofit_noloss(2000,2000)\nnoprofit_noloss(2000,1200)\nnoprofit_noloss(1000,1200)\nnoprofit_noloss(1200,1200)\nnoprofit_noloss(1200,1000)\nnoprofit_noloss(1200,1200)\nnoprofit_noloss(2000,1200)\nnoprofit_noloss(2000,1000)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1300)\nnoprofit_noloss(1200,1400)\nnoprofit_noloss(1200,1500)\nnoprofit_noloss(1800,1400)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,1800)\nnoprofit_noloss(1800,180"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == 0:\n        return True\n    elif sale_amount > actual_cost:\n        return True\n    elif sale_amount < actual_cost:\n        return False\n    else:\n        raise ValueError('Please enter a valid sale amount')\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    print(\"Wind Chill: \"+str(round(15.04 - (0.6215 * t) + (11.37 * math.pow(v,0.16)) - (0.3965 * t * math.pow(v,0.16)))))\n    return None\nwind_chill(12,14)"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Find the wind chill given the temperature and wind velocity:\n    # wci = 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16\n    \n    wci = 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16\n    # Round the result to the nearest integer:\n    wci = math.ceil(wci)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=round(v)\n    t=round(t)\n    if t>90 or v<0:\n        return 'No wind chill!'\n    elif t<-20 or v<3:\n        return 'Invalid temperature!'\n    else:\n        n = 35.74 + 0.6215*t + (0.4275*t - 35.75)*(v**0.16)\n        return int(n)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    wci = 13.12 + (0.6215*t) - 11.37*(v**0.16) + 0.3965*t*(v**0.16)\n    return round(wci)\ndef max_profit(ticker):\n    '''\n    Write a function to calculate the max profit given the initial price (ticker) and a list of prices for that ticker.\n    '''\n    ticker = ticker.upper()\n    prices = [float(i) for i in input().split()]\n    if len(prices)>1:\n        profits = []\n        for i in range(1,len(prices)):\n            profits.append(prices[i] - prices[i-1])\n        return round(max(profits))\n    else:\n        return 0\ndef is_even(n):\n    '''\n    Write a function to check if a number is even or not.\n    '''\n    n = int(n)\n    if n%2==0:\n        return True\n    else:\n        return False\ndef is_leap_year(year):\n    '''\n    Write a function to check if a year is a leap year or not.\n    '''\n    year = int(year)\n    if year%4==0 and year%100!=0:\n        return True\n    elif year%400==0:\n        return True\n    else:\n        return False\ndef quadratic_roots(a,b,c):\n    '''\n    Write a function to calculate the roots of a quadratic equation rounded to 2 decimal places.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    x = round((-1*b + math.sqrt(b**2-4*a*c))/(2*a),2)\n    y = round((-1*b - math.sqrt(b**2-4*a*c))/(2*a),2)\n    return x,y\ndef reverse_string(input):\n    '''\n    Write a function to reverse a given input string.\n    '''\n    return input[::-1]\ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    n = int(n)\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef simple_interest(p,t,r):\n    '''\n    Write a function to calculate the simple interest given the principal, time and rate.\n    '''\n    p = float(p)\n    t = float(t)\n    r = float(r)\n    return (p*t*r)/100\ndef compound_interest(p,t,r):\n    '''\n    Write a function to calculate the compound interest given the principal, time and rate.\n    '''\n    p = float(p)\n    t = float(t)\n    r = float(r)\n    return (p*(1+r/100)**t)\ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    n = int(n)\n    if n==0:\n        return False\n    elif n==1:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n            else:\n                return True\ndef fibonacci(n):\n    '''\n    Write a function to calculate the nth term in the fibonacci sequence.\n    '''\n    n = int(n)\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef check_fermat(a,b,c,n):\n    '''\n    Write a function to check if Fermat's theorem holds true or not.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    n = int(n)\n    if n>2:\n        if (a**n)+b**n == c**n:\n            return True\n        else:\n            return False\n    else:\n        return 'n must be greater than 2'\ndef check_goldbach(n):\n    '''\n    Write a function to check if a given number is a goldbach number or not.\n    '''\n    n = int(n)\n    if n>2:\n        for i in range(1,n+1):\n            if n==(i+1)+(i+2):\n                return True\n            elif n==(i+1)+(i+2)*2:\n                return True\n    else:\n        return 'n must be greater than 2'\ndef prime_factors(n):\n    '''\n    Write a function to return the prime factors of a number.\n    '''\n    n = int(n)\n    factors = []\n    for i in range(2,n+1):\n        while n%i==0:\n            factors.append(i)\n            n/=i\n    return factors\ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is a palindrome or not.\n    '''\n    n = int(n)\n    temp = n\n    rev = 0\n    while n>0:\n        rev = rev*10 + n%10\n        n = n//10\n    return temp==rev\ndef palindrome_decomposition(n):\n    '''\n    Write a function to decompose a palindrome into its prime factors.\n    '''\n    n = int(n)\n    temp = n\n    rev = 0\n    while n>0:\n        rev = rev*10 + n%10\n        n = n//10\n    decomposition = []\n    i=2\n    while i<=rev:\n        if i==rev:\n            decomposition.append(i)\n            break\n        if rev%i==0:\n            decomposition.append(i)\n            rev = int(rev/i)\n            i=2\n        else:\n            i+=1\n    return decomposition\ndef digital_root(n):\n    '''\n    Write a function to calculate the digital root of a number.\n    '''\n    n = int(n)\n    sum = 0\n    while n>0:\n        sum+=n%10\n        n=n//10\n    return sum\ndef factorial_digit_sum(n):\n    '''\n    Write a function to calculate the sum of the factorials of the digits of a number.\n    '''\n    n = int(n)\n    sum = 0\n    while n>0:\n        sum+=factorial(int(n%10))\n        n=n//10\n    return sum\ndef digital_root(n):\n    '''\n    Write a function to calculate the digital root of a number.\n    '''\n    n = int(n)\n    sum = 0\n    while n>0:\n        sum+=n%10\n        n=n//10\n    return sum\ndef digital_sum(n):\n    '''\n    Write a function to calculate the sum of the digits of a number.\n    '''\n    n = int(n)\n    sum = 0\n    while n>0:\n        sum+=n%10\n        n=n//10\n    return sum\ndef main():\n    print(wind_chill(120,25))\n    print(max_profit('ACB'))\n    print(is_even(3))\n    print(is_even(7))\n    print(is_leap_year(300))\n    print(is_leap_year(400))\n    print(quadratic_roots(2,4,1))\n    print(quadratic_roots(2,5,6))\n    print(reverse_string('hii'))\n    print(reverse_string('12345'))\n    print(factorial(5))\n    print(factorial(0))\n    print(simple_interest(2000,5,10))\n    print(simple_interest(200,5,10))\n    prin"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a=math.sqrt(v**2+0.4**2)\n    b=13.12+0.6215*t+11.37*(a**0.16)+0.3965*t*(a**0.16)\n    c=v**0.16*(a**-0.16)\n    d=c*b\n    return d\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    v = v*(3.6)\n    return round(35.74 + 0.6215*t - 35.75*math.pow(v,0.16) + 0.4275*t*math.pow(v,0.16))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #print(math.floor(t))\n    #print(math.floor(v))\n    chill=13.12 + 0.6215*t - 11.37*math.pow(v,0.16)+0.3965*t*math.pow(v,0.16)\n    #print(chill)\n    return math.floor(chill)\n    #return (13.12 + 0.6215*t - 11.37*pow(v,0.16) + 0.3965*t*pow(v,0.16))\n    #return math.floor(13.12 + 0.6215*t - 11.37*v + 0.3965*t*v)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill=13.12 + 0.6215*t - 11.37 * (math.pow(v,0.16)) + 0.3965 * t * (math.pow(v,0.16))\n    return round(chill)\ndef farenheit_to_celsius(farenheit):\n    '''\n    Write a function to convert a temperature from farenheit to celsius.\n    '''\n    celsius= (farenheit-32) * (5/9)\n    return round(celsius)\ndef celsius_to_farenheit(celsius):\n    '''\n    Write a function to convert a temperature from celsius to farenheit.\n    '''\n    farenheit=(celsius*9/5)+32\n    return round(farenheit)\ndef celsius_to_kelvin(celsius):\n    '''\n    Write a function to convert a temperature from celsius to kelvin.\n    '''\n    kelvin= celsius+273.15\n    return round(kelvin)\ndef kelvin_to_celsius(kelvin):\n    '''\n    Write a function to convert a temperature from kelvin to celsius.\n    '''\n    celsius= kelvin-273.15\n    return round(celsius)\ndef farenheit_to_kelvin(farenheit):\n    '''\n    Write a function to convert a temperature from farenheit to kelvin.\n    '''\n    kelvin= farenheit+459.67\n    return round(kelvin)\ndef kelvin_to_farenheit(kelvin):\n    '''\n    Write a function to convert a temperature from kelvin to farenheit.\n    '''\n    farenheit=(kelvin-273.15)*9/5+32\n    return round(farenheit)\ndef feet_to_meters(feet):\n    '''\n    Write a function to convert a distance in feet to meters.\n    '''\n    meters=feet/3.281\n    return round(meters,3)\ndef meters_to_feet(meters):\n    '''\n    Write a function to convert a distance in meters to feet.\n    '''\n    feet=meters*3.281\n    return round(feet)\ndef kilometer_to_miles(kilometers):\n    '''\n    Write a function to convert a distance in kilometers to miles.\n    '''\n    miles=kilometers*0.62137\n    return round(miles)\ndef miles_to_kilometer(miles):\n    '''\n    Write a function to convert a distance in miles to kilometers.\n    '''\n    kilometers=miles/0.62137\n    return round(kilometers)\ndef meter_square_to_square_meters(meters_square):\n    '''\n    Write a function to convert a area in meters square to square meters.\n    '''\n    square_meters=meters_square*1000\n    return round(square_meters)\ndef square_meters_to_meter_square(square_meters):\n    '''\n    Write a function to convert a area in square meters to meters square.\n    '''\n    meters_square=square_meters/1000\n    return round(meters_square)\ndef meter_per_second_to_miles_per_hour(meter_per_second):\n    '''\n    Write a function to convert speed in meter per second to miles per hour.\n    '''\n    miles_per_hour=meter_per_second*2.236936\n    return round(miles_per_hour)\ndef miles_per_hour_to_meter_per_second(miles_per_hour):\n    '''\n    Write a function to convert speed in miles per hour to meter per second.\n    '''\n    meter_per_second=miles_per_hour/2.236936\n    return round(meter_per_second)\ndef kilo_gram_to_pound_mass(kilo_gram):\n    '''\n    Write a function to convert weight in kilo grams to pounds mass.\n    '''\n    pound_mass=kilo_gram*0.45359237\n    return round(pound_mass)\ndef pounds_mass_to_kilo_gram(pound_mass):\n    '''\n    Write a function to convert weight in pounds mass to kilo grams.\n    '''\n    kilo_gram=pound_mass/0.45359237\n    return round(kilo_gram)\ndef kilo_ton_to_pound_mass(kilo_ton):\n    '''\n    Write a function to convert weight in kilo ton to pounds mass.\n    '''\n    pound_mass=kilo_ton*1016\n    return round(pound_mass)\ndef pound_mass_to_kilo_ton(pound_mass):\n    '''\n    Write a function to convert weight in pounds mass to kilo ton.\n    '''\n    kilo_ton=pound_mass/1016\n    return round(kilo_ton)\ndef kilo_cup_to_pound_mass(kilo_cup):\n    '''\n    Write a function to convert weight in kilo cups to pounds mass.\n    '''\n    pound_mass=kilo_cup*0.028349523125\n    return round(pound_mass)\ndef pounds_mass_to_kilo_cup(pound_mass):\n    '''\n    Write a function to convert weight in pounds mass to kilo cups.\n    '''\n    kilo_cup=pound_mass/0.028349523125\n    return round(kilo_cup)\ndef poundal_to_pounds(poundal):\n    '''\n    Write a function to convert pressure in poundal to pounds.\n    '''\n    pounds=poundal*0.22480894\n    return round(pounds)\ndef pounds_to_poundal(pounds):\n    '''\n    Write a function to convert pressure in pounds to poundal.\n    '''\n    poundal=pounds/0.22480894\n    return round(poundal)\ndef kilo_dram_to_pounds_mass(kilo_dram):\n    '''\n    Write a function to convert weight in kilo dram to pounds mass.\n    '''\n    pound_mass=kilo_dram*0.0352739619\n    return round(pound_mass)\ndef pounds_mass_to_kilo_dram(pound_mass):\n    '''\n    Write a function to convert weight in pounds mass to kilo dram.\n    '''\n    kilo_dram=pound_mass/0.0352739619\n    return round(kilo_dram)\ndef kilo_ounce_to_pounds_mass(kilo_ounce):\n    '''\n    Write a function to convert weight in kilo ounce to pounds mass.\n    '''\n    pound_mass=kilo_ounce*0.028349523125\n    return round(pound_mass)\ndef pounds_mass_to_kilo_ounce(pound_mass):\n    '''\n    Write a function to convert weight in pounds mass to kilo ounce.\n    '''\n    kilo_ounce=pound_mass/0.028349523125\n    return round(kilo_ounce)\ndef ounce_force_to_pounds_force(ounce_force):\n    '''\n    Write a function to convert weight in ounce force to pounds force.\n    '''\n    pounds_force=ounce_force*4.44822\n    return round(pounds_force)\ndef pounds_force_to_ounce_force(pounds_force):\n    '''\n    Write a function to convert weight in pounds force to ounce force.\n    '''\n    ounce_force=pounds_force/4.44822\n    return round(ounce_force)\ndef ounce_mass_to_pounds_mass(ounce_mass):\n    '''\n    Write a function to convert weight in ounce mass to pounds mass.\n    '''\n    pound_mass=ounce_mass*16\n    return round(pound_mass)\ndef pounds_mass_to_ounce_mass(pounds_mass):\n    '''\n    Write a function to convert weight in pounds mass to ounce mass.\n    '''\n    ounce_mass=pounds_mass/16\n    return round(ounce_mass)"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(13.12 + (0.6215*v) - (11.37*t) + (0.3965*v*t) + (0.16808*v*t-0.1272*v*t**2 + 0.01492*v*t**3))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    if v < 3 or t < -45:\n        return 'Inputs out of range.'\n    if t < 10:\n        t += 32\n    return round(35.74 + 0.6215*v - 35.75*t + 0.4275*t*t + 0.09807*v*t - 0.2126*v*t*t)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lower_letters = lambda s: s[0] in 'abcdefghijklmnopqrstuvwxyz'\n    names_sum = sum(filter(lower_letters, sample_names))\n    print(names_sum)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = sample_names.split()\n    for i, name in enumerate(names):\n        if name[0].islower():\n            names.remove(name)\n    return len(''.join(names))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # your code here\n    return sum([len(i) for i in sample_names if not i[0].islower()])\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def print_name(sample_names):\n        for name in sample_names:\n            if name.startswith(name.lower()):\n                sample_names.remove(name)\n    print_name(sample_names)\n    print('There are {} names in the list:'.format(len(sample_names)))\n    for name in sample_names:\n        print(name)\n    return sum([len(name) for name in sample_names])\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_sum = 0\n    for sample in sample_names:\n        if not sample.islower():\n            names_sum += len(sample)\n    return names_sum\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_len_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            names_len_sum += len(name)\n    return names_len_sum\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names.sort()\n    print(sample_names)\n    x = 0\n    for x in sample_names:\n        print(x)\n        if x.islower():\n            sample_names.remove(x)\n    for x in sample_names:\n        x = x.split(' ')\n        x.sort()\n        x = ''.join(x)\n        print(x)\n        y = len(x)\n        x = x.upper()\n        print(x)\n        y = y + y\n    print(y)\n    \ndef sample_name_match():\n    '''\n    Write a function to check whether a given string is a match for a sample name in the given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['AB Ananth','AB Sharma','AB pandit','AB pandit','AB Pandit','AB Pandit','AB pandit']\n    sample_names.sort()\n    print(sample_names)\n    x = input(\"Enter a sample name: \")\n    x = x.upper()\n    print(x)\n    y = len(x)\n    x = x.split(' ')\n    x.sort()\n    x = ''.join(x)\n    print(x)\n    y = y + y\n    if x in sample_names:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \ndef sample_names_in_alphabetical_order():\n    '''\n    Write a function to find the longest sample name in the given list of names.\n    '''\n    sample_names = ['AB Ananth','AB Sharma','AB pandit','AB pandit','AB Pandit','AB Pandit','AB pandit']\n    sample_names.sort()\n    print(sample_names)\n    x = 0\n    for x in sample_names:\n        if len(x) > x:\n            x = len(x)\n            print(x)\n            x = x.split(' ')\n            x.sort()\n            x = ''.join(x)\n            print(x)\n            y = len(x)\n            x = x.upper()\n            print(x)\n            y = y + y\n    print(y)\n            \ndef count_occurences():\n    '''\n    Write a function to count the number of times a certain character occurs in a given string.\n    '''\n    string = \"Mountain\"\n    print(string)\n    x = input(\"Enter the character: \")\n    x = x.upper()\n    print(x)\n    y = string.count(x)\n    print(y)\n    \ndef count_occurences_case_sensitive():\n    '''\n    Write a function to count the number of times a certain character occurs in a given string.\n    '''\n    string = \"Mountain\"\n    print(string)\n    x = input(\"Enter the character: \")\n    x = x.upper()\n    print(x)\n    y = string.count(x)\n    print(y)\n    \ndef count_occurences_case_insensitive():\n    '''\n    Write a function to count the number of times a certain character occurs in a given string.\n    '''\n    string = \"Mountain\"\n    print(string)\n    x = input(\"Enter the character: \")\n    x = x.upper()\n    print(x)\n    y = string.count(x)\n    print(y)\n    \ndef count_letters_case_sensitive():\n    '''\n    Write a function to count the number of letters, digits, and special characters in a given string.\n    '''\n    string = \"Mountain\"\n    print(string)\n    x = input(\"Enter the character: \")\n    x = x.upper()\n    print(x)\n    y = string.count(x)\n    print(y)\n    \ndef count_letters_case_insensitive():\n    '''\n    Write a function to count the number of letters, digits, and special characters in a given string.\n    '''\n    string = \"Mountain\"\n    print(string)\n    x = input(\"Enter the character: \")\n    x = x.upper()\n    print(x)\n    y = string.count(x)\n    print(y)\n    \ndef calculate_factorial():\n    '''\n    Write a function that calculates the factorial of a given number.\n    '''\n    x = int(input(\"Enter the number: \"))\n    y = 1\n    for x in range(1,x+1):\n        y = x * y\n    print(y)\n    \ndef is_prime():\n    '''\n    Write a function that checks whether a given number is prime or not.\n    '''\n    x = int(input(\"Enter the number: \"))\n    y = 0\n    for x in range(1,x+1):\n        if x == 1:\n            y = 0\n            print(y)\n        elif x == 2:\n            y = 1\n            print(y)\n        elif x > 2:\n            for x in range(2, x):\n                if x % 2 == 0:\n                    y = 0\n                    print(y)\n                    break\n                else:\n                    y = 1\n                    print(y)\n                    break\n            break\n    if y == 0:\n        print(\"It is not a prime number\")\n    else:\n        print(\"It is a prime number\")\n    \ndef is_palindrome():\n    '''\n    Write a function that checks whether a given number is a palindrome or not.\n    '''\n    x = int(input(\"Enter the number: \"))\n    y = 0\n    for x in range(1,x+1):\n        if x == 1:\n            y = 0\n            print(y)\n        elif x == 2:\n            y = 1\n            print(y)\n        elif x > 2:\n            for x in range(1,x):\n                if x % 2 == 0:\n                    y = 0\n                    print(y)\n                    break\n                else:\n                    y = 1\n                    print(y)\n                    break\n            break\n    if y == 0:\n        print(\"It is not a palindrome number\")\n    else:\n        print(\"It is a palindrome number\")\n        \ndef is_anagram():\n    '''\n    Write a function that checks whether a given two strings are anagrams or not.\n    '''\n    x = input(\"Enter the first string: \")\n    y = input(\"Enter the second string: \")\n    x = x.lower()\n    x = x.split(' ')\n    x = ''.join(x)\n    y = y.lower()\n    y = y.split(' ')\n    y = ''.join(y)\n    if x == y:\n        print(\"It is an anagram\")\n    else:\n        print(\"It is not an anagram\")\n        \ndef convert_words_to_numbers():\n    '''\n    Write a function that converts a word written in English to the corresponding number.\n    '''\n    word = input(\"Enter a word: \")\n    word = word.lower()\n    if word == \"zero\":\n        print(\"0\")\n    elif word == \"one\":\n        print(\"1\")\n    elif word == \"two\":\n        print(\"2\")\n    elif word == \"three\":\n        print(\"3\")\n    elif word == \"four\":\n        print(\"4\")\n    elif word == \"five\":\n        print(\"5\")\n    elif word == \"six\":\n        print(\"6\")\n    elif word == \"seven\":\n        print(\"7\")\n    elif word == \"eight\":\n        print(\"8\")\n    elif word == \"nine\":\n        print(\"9\")\n        \ndef convert_numbers_to_words():\n    '''\n    Write a function that converts a number written in English to the corresponding word.\n    '''\n    x = input(\"Enter the number: \")\n    if x == \"0\":\n        print(\"zero\")\n    elif x == \"1\":\n        print(\"one\")\n    elif x == \"2\":\n        print(\"two\")\n    elif x == \"3\":\n        print(\"three\")\n    elif x == \"4\":\n        print(\"four\")\n    elif x == \"5\":\n        print(\"five\")\n    elif x == \"6\""
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    start_name_count = []\n    for n in sample_names:\n        if n[0].islower():\n            start_name_count.append(len(n))\n    return sum(start_name_count)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    n = []\n    for name in sample_names:\n        if name[0].isupper():\n            n.append(name)\n    return n\nprint(sample_nam(['mary', 'had', 'a', 'little', 'lamb']))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_list = []\n    for name in sample_names:\n        if name[0].isupper():\n            new_list.append(name)\n    return len(new_list)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item[0] == '(':\n            new_items.append(item[1:len(item) - 1])\n        else:\n            new_items.append(item)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item == \"\":\n            continue\n        open_bracket_index = item.find(\"(\")\n        closed_bracket_index = item.find(\")\")\n        if open_bracket_index!= -1 and closed_bracket_index!= -1:\n            item = item[:open_bracket_index] + item[closed_bracket_index+1:]\n        if open_bracket_index!= -1 and closed_bracket_index == -1:\n            item = item[:open_bracket_index]\n        if open_bracket_index == -1 and closed_bracket_index!= -1:\n            item = item[:closed_bracket_index]\n        new_items.append(item)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_brackets(items):\n    '''\n    Write a function to remove the brackets and what is inbetween them from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_brace(items):\n    '''\n    Write a function to remove the braces and what is inbetween them from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_angles(items):\n    '''\n    Write a function to remove the angle brackets and what is inbetween them from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_curly(items):\n    '''\n    Write a function to remove the curly brackets and what is inbetween them from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_square(items):\n    '''\n    Write a function to remove the square brackets and what is inbetween them from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_tilde(items):\n    '''\n    Write a function to remove the tilde and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_ampersand(items):\n    '''\n    Write a function to remove the ampersand and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_star(items):\n    '''\n    Write a function to remove the star and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_slash(items):\n    '''\n    Write a function to remove the slash and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_hyphen(items):\n    '''\n    Write a function to remove the hyphen and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_period(items):\n    '''\n    Write a function to remove the period and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_plus(items):\n    '''\n    Write a function to remove the plus and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_equal(items):\n    '''\n    Write a function to remove the equal and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_at(items):\n    '''\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # items = ['(abc)', 'abc', ')abc', '(abc', '(abc)']\n    # items = ['(abc)', '(abc)', ')abc']\n    final = []\n    for i in range(0,len(items)):\n        temp = items[i]\n        if temp.find('(') == -1:\n            final.append(temp)\n        else:\n            # remove everything inside parenthesis\n            start = temp.index('(')\n            end = temp.index(')')\n            temp = temp[:start] + temp[end+1:]\n            final.append(temp)\n    return final\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # new_list = [re.sub(r'\\(.*\\)', '', i) for i in items]\n    new_list = [i.replace('(', '').replace(')', '') for i in items]\n    print(new_list)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in items:\n        if i == '(' or i == ')' or i == '{' or i == '}' or i == '[' or i == ']':\n            items = items.replace(i, '')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    item_string = ''\n    for item in items:\n        if '(' in item:\n            item = re.sub(r'\\(.*\\)', '', item)\n        item_string += item\n    return item_string\n    \ndef is_all_upper(text):\n    '''\n    Write a function to check whether all the letters in a text are uppercase or not.\n    '''\n    if len(text) == 0:\n        return True\n    elif len(text) == 1:\n        return text.isupper()\n    else:\n        return text[0].isupper() and is_all_upper(text[1:])\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    reg = re.compile(r'[\\(\\)]')\n    return reg.sub('',items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if item.startswith('('):\n            item = item.replace('(', '')\n        if item.endswith(')'):\n            item = item.replace(')', '')\n    return item\n    \ndef remove_parenthesis_and_words(items):\n    '''\n    Write a function to remove the parenthesis and words within it from a string.\n    '''\n    for item in items:\n        if item.startswith('('):\n            if '(' in item:\n                item = item.replace('(', '')\n                items[items.index(item)] = item\n        if item.endswith(')'):\n            if ')' in item:\n                item = item.replace(')', '')\n                items[items.index(item)] = item\n        if '(' in item or ')' in item:\n            if '(' in item and ')' in item:\n                item = item.replace('(', '')\n                item = item.replace(')', '')\n                items[items.index(item)] = item\n    return items\n    \ndef remove_duplicates(items):\n    '''\n    Write a function to remove duplicates in a list.\n    '''\n    items = list(dict.fromkeys(items))\n    return items\n    \ndef convert_list_to_string(items):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    string = \"\"\n    for item in items:\n        string += item\n    return string\n    \ndef convert_list_to_string_with_seperator(items, seperator):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    string = \"\"\n    for item in items:\n        string += item + seperator\n    string = string[:-len(seperator)]\n    return string\n    \ndef replace_words(items, old_word, new_word):\n    '''\n    Write a function to replace words in a list.\n    '''\n    new_items = []\n    for item in items:\n        item = item.replace(old_word, new_word)\n        new_items.append(item)\n    return new_items\n    \ndef check_for_string(items, string):\n    '''\n    Write a function to check if a string exists in a list.\n    '''\n    for item in items:\n        if string in item:\n            return True\n    return False\n    \ndef check_for_words(items, words):\n    '''\n    Write a function to check if words exist in a list.\n    '''\n    words_found = []\n    for word in words:\n        for item in items:\n            if word in item:\n                words_found.append(word)\n    return words_found\n    \ndef get_word_count(items):\n    '''\n    Write a function to count the number of times a word appears in a list.\n    '''\n    words = {}\n    for item in items:\n        if item not in words:\n            words[item] = 1\n        else:\n            words[item] += 1\n    return words\n    \ndef get_unique_words(items):\n    '''\n    Write a function to return all unique words from a list.\n    '''\n    words = []\n    for item in items:\n        words.append(item)\n    unique_words = list(dict.fromkeys(words))\n    return unique_words\n    \ndef get_unique_words_keep_order(items):\n    '''\n    Write a function to return all unique words from a list while keeping the order in which they appear.\n    '''\n    words = []\n    for item in items:\n        words.append(item)\n    unique_words = list(dict.fromkeys(words))\n    return unique_words\n    \ndef get_words_start_with(items, word):\n    '''\n    Write a function to return all words from a list that starts with a particular string.\n    '''\n    words = []\n    for item in items:\n        if item.startswith(word):\n            words.append(item)\n    return words\n    \ndef get_words_end_with(items, word):\n    '''\n    Write a function to return all words from a list that ends with a particular string.\n    '''\n    words = []\n    for item in items:\n        if item.endswith(word):\n            words.append(item)\n    return words\n    \ndef get_words_that_contains(items, word):\n    '''\n    Write a function to return all words from a list that contains a particular string.\n    '''\n    words = []\n    for item in items:\n        if word in item:\n            words.append(item)\n    return words\n    \ndef get_words_that_do_not_contain(items, word):\n    '''\n    Write a function to return all words from a list that do not contain a particular string.\n    '''\n    words = []\n    for item in items:\n        if word not in item:\n            words.append(item)\n    return words\n    \ndef get_words_that_contain_string(items, word):\n    '''\n    Write a function to return all words from a list that contain a particular string.\n    '''\n    words = []\n    for item in items:\n        if word in item:\n            words.append(item)\n    return words\n    \ndef get_number_in_range(items, min_range, max_range):\n    '''\n    Write a function to return all numbers from a list that are within a range.\n    '''\n    number_in_range = []\n    for item in items:\n        if min_range <= item <= max_range:\n            number_in_range.append(item)\n    return number_in_range\n    \ndef convert_string_to_list(items):\n    '''\n    Write a function to convert a string to a list.\n    '''\n    items = items.split(',')\n    return items\n    \ndef get_longest_word(items):\n    '''\n    Write a function to return the longest word from a list.\n    '''\n    longest_word = ''\n    for item in items:\n        if len(item) > len(longest_word):\n            longest_word = item\n    return longest_word\n    \ndef get_shortest_word(items):\n    '''\n    Write a function to return the shortest word from a list.\n    '''\n    shortest_word = items[0]\n    for item in items:\n        if len(item) < len(shortest_word):\n            shortest_word = item\n    return shortest_word\n    \ndef get_words_that_are_in_order(items):\n    '''\n    Write a function to return all words from a list that are in alphabetical order.\n    '''\n    ordered_list = []\n    if len(items) == 1:\n        return items\n    for i in range(len(items)):\n        for j in range(i + 1, len(items)):\n            if items[i] > items[j]:\n                ordered_list.append(items[j])\n                return ordered_list\n    return ordered_list\n    \ndef get_characters_that_are_in_order(items):\n    '''\n    Write a function to return all characters from a list that are in alphabetical order.\n    '''\n    ordered_list = []\n    if len(items) == 1:\n        return items\n    for i in range(len(items)):\n        for j in range(i + 1, len(items)):\n            if items[i] > items[j]:\n                ordered_list.append(items[j])\n                return ordered_list\n    return ordered_list\n    \ndef get_words_that_are_not_in_order(items):\n    '''\n    Write a function to return all words from a list that are not in alphabetical order.\n    '''\n    not_ordered_list = []\n    if len(items) == 1:\n        return items\n    for i in range(len(items)):\n        for j in range(i + 1, len(items)):\n            if items[i] < items[j]:\n                not_ordered_list.append(items[j])\n                return not_ordered_list\n    return not_ordered_lis"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        new_item = item.replace('(','').replace(')','').strip()\n        new_items.append(new_item)\n    return new_items\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    return n * (n - 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n**2 - n + is_nonagonal(n - 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int((n * (n + 1) / 2))\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    total = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            total += (j*j+i*i)\n    \n    return total\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 3 * is_nonagonal(n - 1) - 2 * is_nonagonal(n - 2)\n    \ndef is_triangle(n):\n    '''\n    Write a function to check if a number is a triangle number.\n    '''\n    return int(n * (n + 1) / 2) == n\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = int(n)\n    return (n*(n+1)/2)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0:\n        return n**2 + n\n    else:\n        return n**2 - n\n    \n    \ndef nth_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return sum(i**2 - i for i in range(1, n+1))\n    \n    \ndef nth_nonagonal_iterative(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    \n    Iterative algorithm\n    '''\n    return sum((i+1)*(2*i+1) for i in range(n))\n    \n    \nif __name__ == \"__main__\":\n    \n    for n in range(1, 11):\n        #print(nth_nonagonal_iterative(n))\n        #print(nth_nonagonal(n))\n        print(is_nonagonal(n))\n    "
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 10\n    else:\n        return(is_nonagonal(n-1) + is_nonagonal(n-2) + is_nonagonal(n-3))\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.search('(?<!^)[zz]+(?!$)', text)\n    if result!= None:\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = \"([^z]*z.*z[^z]*)z*\"\n    m = re.search(pattern,text)\n    return m.group(1)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'z\\b',text) and not re.search(r'\\bz\\b',text)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    reg = re.compile(r'\\b[^z]*z[^z]*\\b')\n    if reg.search(text) == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'z.*z'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\nprint(text_match_wordz_middle(\"zebra zebra\")) # True\nprint(text_match_wordz_middle(\"z\")) # False\nprint(text_match_wordz_middle(\"z.z.z.\")) # False\nprint(text_match_wordz_middle(\"zebra zebra zzzz\")) # True\nprint(text_match_wordz_middle(\"zebra zebra zzzz.z.z.z.\")) # True\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'[^z]z[^z]'\n    if re.match(pattern, text):\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == 'z':\n        return False\n    if text[len(text)-1] == 'z':\n        return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) == 0:\n        return False\n    reg_ex = '^[^z]+z[^z]+$'\n    res = re.search(reg_ex,text)\n    return res\n    \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) == 0:\n        return False\n    reg_ex = '^[^z]+z$'\n    res = re.search(reg_ex,text)\n    return res\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z', text):\n        return re.sub('z|\\W', '*', text, count=1, flags=re.IGNORECASE)\n    return text\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = len(input)-1\n    i = 0\n    while(start < k):\n        if (end == k):\n            break\n        temp = input[start]\n        input[start] = input[end]\n        input[end] = temp\n        start += 1\n        end -= 1\n        i += 1\n    print(\"kth reverse of input: \", input)\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_length = len(input)\n    if k >= input_length:\n        return input\n    else:\n        output = input[0:k][::-1]\n        output = output + input[k:][::-1]\n        return output\n    \nif __name__ == '__main__':\n    input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 8\n    output = reverse_Array_Upto_K(input, k)\n    print(output)"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = input[:k][::-1] + input[k:]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input)\n    if k == 0: \n        return input[:k]\n    if k >= l: \n        return input\n    return input[:k] + reverse_Array_Upto_K(input, k + 1)\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_len = len(input)\n    output_array = [0]*input_len\n    for i in range(input_len):\n        if i < k:\n            output_array[i] = input[i]\n        else:\n            output_array[i] = input[input_len-i-1]\n    return output_array\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_length = len(input)\n    if (input_length < k):\n        return input\n    reversed_array = input[:k][::-1] + input[k:][::-1]\n    return reversed_array\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = list(input)\n    k = int(k)\n    if k <= 0 or k > len(input):\n        return []\n    \n    def reverse_helper(input, start, end): \n        if start >= end:\n            return\n        input[start], input[end] = input[end], input[start]\n        reverse_helper(input, start + 1, end - 1)\n        \n    reverse_helper(input, 0, len(input)-1)\n    if k >= len(input):\n        return input\n    else:\n        return input[:k] + input[k:][::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input)\n    if k >= l:\n        return input\n    \n    start = 0\n    end = k \n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input\n    size = len(arr)\n    i = 0\n    while i < k : \n        temp = arr[i] \n        arr[i] = arr[size-i-1] \n        arr[size-i-1] = temp \n        i = i + 1\n    return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    input = list(input)\n    output = input[0:k+1][::-1]\n    output.extend(input[k+1:])\n    return output\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for k, v in test_dict.items():\n        test_tup = test_tup + (v,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    print(test_tup)\n    print(test_dict)\n    return ()\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tuple_list = list(test_tup)\n    tuple_list.append(test_dict)\n    return tuple(tuple_list)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # print(tuple(test_dict.values()))\n    # print(test_dict)\n    return test_tup + tuple(test_dict.values())\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # pass\n    # test_tup = (\"test_string\", 1, 2, 3)\n    # test_dict = {1:1, 2:2}\n    # print(add_dict_to_tuple(test_tup, test_dict))\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #TODO: Complete this\n    return(test_tup + (test_dict,))\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup_dict = test_tup + (test_dict,)\n    return tup_dict\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    \n    R = len(cost)\n    C = len(cost[0])\n    \n    if R == 0 or C == 0:\n        return 0\n    \n    max = 0\n    \n    for r in range(R):\n        for c in range(C):\n            \n            total = 0\n            path = set()\n            \n            findPaths(r, c, total, path, cost)\n            \n            if total > max:\n                max = total\n                \n    return max\n    \n    \ndef findPaths(r, c, total, path, cost):\n    \n    R = len(cost)\n    C = len(cost[0])\n    \n    if r == R-1 and c == C-1:\n        total += cost[r][c]\n        path.add((r, c))\n        return total\n    \n    if r < R-1 and (r+1, c) not in path:\n        total += cost[r][c]\n        path.add((r, c))\n        findPaths(r+1, c, total, path, cost)\n        path.remove((r, c))\n        \n    if c < C-1 and (r, c+1) not in path:\n        total += cost[r][c]\n        path.add((r, c))\n        findPaths(r, c+1, total, path, cost)\n        path.remove((r, c))\n        \n    return total\n    "
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    path_memo = [[-1 for _ in range(n)] for _ in range(n)]\n    cost_memo = [[-1 for _ in range(n)] for _ in range(n)]\n    def max_average_path_util(row, col):\n        if row == n-1 and col == n-1:\n            return cost[row][col]\n        if path_memo[row][col]!= -1:\n            return path_memo[row][col]\n        path_memo[row][col] = 0\n        if row + 1 < n:\n            path_memo[row][col] = max(path_memo[row][col], max_average_path_util(row+1, col))\n        if col + 1 < n:\n            path_memo[row][col] = max(path_memo[row][col], max_average_path_util(row, col+1))\n        path_memo[row][col] += cost[row][col]\n        cost_memo[row][col] = path_memo[row][col]\n        return path_memo[row][col]\n    return max_average_path_util(0, 0)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def maxAverage(cost, m, n):\n        dp = [[0 for i in range(n)] for j in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[i][j] = cost[i][j]\n                elif i == 0:\n                    dp[i][j] = max(dp[i][j - 1], cost[i][j])\n                elif j == 0:\n                    dp[i][j] = max(dp[i - 1][j], cost[i][j])\n                else:\n                    dp[i][j] = max(min(dp[i - 1][j], dp[i][j - 1]) + cost[i][j],\n                                   dp[i][j])\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def dfs(x, y, curr_cost, max_avg):\n        if x == m-1 and y == n-1:\n            return curr_cost, max_avg\n        max_avg_cost = max_avg\n        max_avg_path = \"\"\n        for dx, dy in [(1,0), (0,1)]:\n            nx, ny = x+dx, y+dy\n            if nx >= 0 and nx < m and ny >= 0 and ny < n and cost[nx][ny]!= -1:\n                new_cost = cost[nx][ny]\n                curr_cost += new_cost\n                if curr_cost > max_avg_cost:\n                    max_avg_cost = curr_cost\n                    max_avg_path = \"({},{})\".format(nx, ny) + max_avg_path\n                dfs(nx, ny, curr_cost, max_avg_cost)\n                curr_cost -= new_cost\n        return curr_cost, max_avg_path\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    m = len(cost)\n    n = len(cost[0])\n    dp = [[0]*(n+1) for _ in range(m+1)]\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            dp[i][j] = cost[i-1][j-1]+max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]/(m+n)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    if rows == cols:\n        def find_path(row, col, path, cost, path_avg):\n            nonlocal rows, cols\n            if row == rows - 1 and col == cols - 1:\n                return path, path_avg\n            if row > rows - 1 or col > cols - 1:\n                return [], 0\n            p, path_avg = find_path(row + 1, col, path + [cost[row][col]], cost, path_avg + cost[row][col])\n            q, path_avg = find_path(row, col + 1, path + [cost[row][col]], cost, path_avg + cost[row][col])\n            return p if len(p) > len(q) else q, path_avg\n        path, path_avg = find_path(0, 0, [cost[0][0]], cost, cost[0][0])\n        return path_avg / len(path)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def average_cost(path,cost):\n        cost = 0\n        for i in range(len(path)):\n            cost += cost[path[i]][path[i+1]]\n        return cost/(i+1)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if(i == 0 and j == 0):\n                dp[i][j] = cost[i][j]\n            elif(i == 0 and j!= 0):\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n            elif(i!= 0 and j == 0):\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = cost[i][j] + max(dp[i][j-1], dp[i-1][j])\n    return dp[n-1][n-1]/n\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def neighbours(cell, max_rows, max_cols):\n        '''\n        Input:\n            - cell: tuple containing (i,j) coordinates\n            - max_rows: maximum number of rows\n            - max_cols: maximum number of columns\n        Output:\n            - List of tuples representing neighbouring cells\n        '''\n        i, j = cell\n        if i == 0:\n            if j == 0:\n                return [(i, j+1), (i+1, j), (i+1, j+1)]\n            elif j == max_cols-1:\n                return [(i, j-1), (i+1, j), (i+1, j-1)]\n            else:\n                return [(i, j+1), (i+1, j), (i+1, j-1), (i, j-1)]\n        elif i == max_rows-1:\n            if j == 0:\n                return [(i-1, j), (i, j+1), (i-1, j+1)]\n            elif j == max_cols-1:\n                return [(i-1, j), (i, j-1), (i-1, j-1)]\n            else:\n                return [(i-1, j), (i, j+1), (i-1, j+1), (i, j-1)]\n        else:\n            if j == 0:\n                return [(i, j+1), (i+1, j), (i+1, j+1), (i-1, j), (i-1, j+1)]\n            elif j == max_cols-1:\n                return [(i, j-1), (i+1, j), (i+1, j-1), (i-1, j), (i-1, j-1)]\n            else:\n                return [(i, j+1), (i+1, j), (i+1, j-1), (i, j-1), (i-1, j), (i-1, j+1), (i-1, j-1), (i+1, j+1)]\n    def dfs(path, cells, max_rows, max_cols):\n        '''\n        Input:\n            - path: list of tuples containing coordinates of cells visited in the path\n            - cells: list of tuples containing coordinates of cells remaining to be visited\n            - max_rows: maximum number of rows\n            - max_cols: maximum number of columns\n        Output:\n            - List of tuples containing coordinates of cells visited in the path\n        '''\n        if len(cells) == 0:\n            return path\n        else:\n            cell = cells[0]\n            if cell not in path:\n                path.append(cell)\n                cells.remove(cell)\n                for neighbour in neighbours(cell, max_rows, max_cols):\n                    if neighbour not in path:\n                        path = dfs(path, cells, max_rows, max_cols)\n                        cells.append(neighbour)\n            return path\n    def max_avg(matrix):\n        '''\n        Input:\n            - matrix: list of lists containing costs of the cells\n        Output:\n            - List of tuples containing coordinates of cells visited in the path with the maximum average\n        '''\n        max_rows, max_cols = len(matrix), len(matrix[0])\n        cells = []\n        for i in range(max_rows):\n            for j in range(max_cols):\n                if (i,j)!= (0,0) and (i,j)!= (max_rows-1, max_cols-1):\n                    cells.append((i,j))\n        return dfs([], cells, max_rows, max_cols)\n    return max_avg(cost)\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_dict = {}\n    for name in students:\n        if (students[name][0] > h and students[name][1] > w):\n            new_dict[name] = students[name]\n    return new_dict\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students={}\n    for key,value in students.items():\n        if(value[0]>=h and value[1]>=w):\n            filtered_students[key]=value\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # write your code here\n    filtered_data={}\n    for student_name,student_data in students.items():\n        if student_data[0]>=h and student_data[1]>=w:\n            filtered_data[student_name]=student_data\n    return filtered_data\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data=list(students.items())\n    h_min=h\n    w_min=w\n    new_students={}\n    for i in range(0,len(data)):\n        if data[i][1][0]>=h_min and data[i][1][1]>=w_min:\n            new_students[data[i][0]]=data[i][1]\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name:student for name,student in students.items() if student[0]>h and student[1]>w}\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    f_students = dict()\n    for k,v in students.items():\n        if v[0]>=h and v[1]>=w:\n            f_students[k] = v\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_dict={}\n    for key in students:\n        if float(students[key][0])>h and float(students[key][1])>w:\n            filtered_dict[key]=(students[key][0],students[key][1])\n    return filtered_dict\n    \ndef filter_data_2(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_dict={}\n    for key in students:\n        if float(students[key][0])>h and float(students[key][1])>w:\n            filtered_dict[key]=students[key]\n    return filtered_dict\n    \ndef min_weight(students):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to return the minimum weight of the filtered data.\n    '''\n    \n    min_weight=float(students[list(students.keys())[0]][1])\n    for i in students:\n        if float(students[i][1])<min_weight:\n            min_weight=float(students[i][1])\n    return min_weight\n    \ndef max_height(students):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to return the maximum height of the filtered data.\n    '''\n    \n    max_height=float(students[list(students.keys())[0]][0])\n    for i in students:\n        if float(students[i][0])>max_height:\n            max_height=float(students[i][0])\n    return max_height\n    \ndef min_height(students):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to return the minimum height of the filtered data.\n    '''\n    \n    min_height=float(students[list(students.keys())[0]][0])\n    for i in students:\n        if float(students[i][0])<min_height:\n            min_height=float(students[i][0])\n    return min_height\n    \ndef avg_weight(students):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to return the average weight of the filtered data.\n    '''\n    \n    sum_weight=0\n    for i in students:\n        sum_weight+=float(students[i][1])\n    return sum_weight/len(students)\n    \ndef avg_height(students):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to return the average height of the filtered data.\n    '''\n    \n    sum_height=0\n    for i in students:\n        sum_height+=float(students[i][0])\n    return sum_height/len(students)\n    \nstudents={'A':(180.0, 75.0), 'B':(165.0, 68.0), 'C':(170.0, 85.0), 'D':(175.0, 90.0), 'E':(160.0, 55.0), 'F':(175.0, 95.0), 'G':(175.0, 125.0), 'H':(180.0, 70.0), 'I':(170.0, 90.0)}\nh=160\nw=70\nprint(filter_data(students,h,w))\nprint(min_weight(students))\nprint(max_height(students))\nprint(min_height(students))\nprint(avg_weight(students))\nprint(avg_height(students))\nprint(filter_data_2(students,h,w)"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student in students:\n        if (students[student][0] > h) and (students[student][1] > w):\n            result[student] = students[student]\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, details in students.items():\n        if details[0]>=h and details[1]>=w:\n            filtered_students[name] = details\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    min_height = h\n    min_weight = w\n    new_dict = {}\n    for key,value in students.items():\n        if value[0] >= min_height and value[1] >= min_weight:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    result = []\n    for i in range(0, len(nums1)):\n        if nums1[i] == nums2[i]:\n            result.append(i)\n    return result\ndef count_same_pair2(nums1, nums2):\n    '''\n    A better way to solve this is to compare the two lists with the same index using a while loop.\n    '''\n    result = []\n    n1 = 0\n    n2 = 0\n    while n1 < len(nums1) and n2 < len(nums2):\n        if nums1[n1] == nums2[n2]:\n            result.append(n1)\n            n1 += 1\n            n2 += 1\n        else:\n            if nums1[n1] < nums2[n2]:\n                n1 += 1\n            else:\n                n2 += 1\n    return result\ndef test_function(test_case):\n    nums1 = test_case[0]\n    nums2 = test_case[1]\n    solution = test_case[2]\n    output = count_same_pair(nums1, nums2)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\nnums1 = [1, 2, 3, 2, 3]\nnums2 = [3, 2, 1, 4, 7]\nsolution = [1, 3, 4]\ntest_case = [nums1, nums2, solution]\ntest_function(test_case)\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i,j in enumerate(nums1):\n        if nums2[i] == j:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(map(eq, nums1, nums2))\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert len(nums1) == len(nums2)\n    same_pairs = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_pairs += 1\n    return same_pairs\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    nums1_index = 0\n    nums2_index = 0\n    while nums1_index < len(nums1) and nums2_index < len(nums2):\n        if nums1[nums1_index] == nums2[nums2_index]:\n            count += 1\n        nums1_index += 1\n        nums2_index += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    lst = []\n    for i in range(len(nums1)):\n        if eq(nums1[i],nums2[i]):\n            lst.append(i)\n    return lst\nprint(count_same_pair([1,2,3,4,5],[5,4,3,2,1]))\nprint(count_same_pair([1,2,3,4,5],[5,4,3,2,3]))\nprint(count_same_pair([1,2,3,4,5],[2,2,2,2,2]))\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0, len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    len_nums1 = len(nums1)\n    len_nums2 = len(nums2)\n    if len_nums1!= len_nums2:\n        return 'Length of lists are not the same.'\n    else:\n        count = 0\n        for i in range(len_nums1):\n            if nums1[i] == nums2[i]:\n                count += 1\n        return count\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for n in range(power):\n        sum += base**n\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = int(base)\n    power = int(power)\n    sum = 0\n    if power == 0:\n        return 1\n    while power > 0:\n        sum += base\n        base *= base\n        power -= 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    if power == 1:\n        return base\n    return base * power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    def power_sum(base,power):\n        '''\n        Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n        '''\n        total = 1\n        for i in range(power):\n            total *= base\n        return sum(map(int,list(str(total))))\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    #result = 1\n    #for x in range(0, power):\n    #    result *= base\n    #return sum([int(x) for x in str(result)])\n    #return sum([int(x) for x in str(base ** power)])\n    return sum([int(x) for x in str(base ** power)])\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    b = int(base)\n    p = int(power)\n    sum_of_digits = 0\n    while b > 0:\n        sum_of_digits += int(b % 10)\n        b = int(b / 10)\n    return sum_of_digits ** p\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(1, power + 1):\n        total += base**i\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(power):\n        total += base\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(x) for x in list(str(base**power)))\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = sum([int(digit) for digit in str(base ** power)])\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.strip()\n    text = re.findall('\"(.*?)\"', text)\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1\n    s1 = re.findall(\"\\\"(.*?)\\\"\",text)\n    print(s1)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    print(re.findall(r'\"([^\"]*)\"',text1))\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace(\"'\",\"\")\n    text1 = text1.replace(\"\\\"\",\"\")\n    return(text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    m = re.search('\"(.*?)\"', text1)\n    if m:\n        return m.group(1)\n    else:\n        return \"No quotation marks found\"\n    \ndef merge_strings_alternatively(str1, str2):\n    '''\n    Write a function to return a new string by alternatingly taking characters from str1 and str2.\n    '''\n    new_str = \"\"\n    if len(str1) > len(str2):\n        while len(str2)!= len(str1):\n            new_str += str1[0]\n            new_str += str2[0]\n            str1 = str1[1:]\n            str2 = str2[1:]\n    else:\n        while len(str1)!= len(str2):\n            new_str += str2[0]\n            new_str += str1[0]\n            str1 = str1[1:]\n            str2 = str2[1:]\n    return new_str\n    \ndef find_missing_letter(chars):\n    '''\n    Write a method to find the missing letter in the given string. You will be given an array of \n    letters, and you will have to find the missing letter in the array.\n    '''\n    #Calculate the sum of the ASCII values of all the letters in the string\n    sum_of_letters = 0\n    for char in chars:\n        sum_of_letters += ord(char)\n    #Take the ASCII value of the string\n    string_value = ord(chars[0])\n    #Subtract the sum of the ASCII values of all the letters in the string\n    #from the ASCII value of the first letter in the string\n    for char in chars[1:]:\n        string_value -= ord(char)\n    #Now, the missing letter will be the ASCII value of the string\n    #minus the sum of the ASCII values of all the letters in the string.\n    #This missing letter will be the difference between the sum of the \n    #ASCII values of all the letters and the ASCII value of the string\n    missing_letter = string_value - sum_of_letters\n    #Convert the missing letter to a character and return it\n    return chr(missing_letter)\n    \ndef decode_string(str1):\n    '''\n    Write a function to return the decoded string from a encoded string.\n    '''\n    decoded_str = \"\"\n    #Define a dictionary to store the mappings\n    mappings = {\n        \"a\": \".-\",\n        \"b\": \"-...\",\n        \"c\": \"-.-.\",\n        \"d\": \"-..\",\n        \"e\": \".\",\n        \"f\": \"..-.\",\n        \"g\": \"--.\",\n        \"h\": \"....\",\n        \"i\": \"..\",\n        \"j\": \".---\",\n        \"k\": \"-.-\",\n        \"l\": \".-..\",\n        \"m\": \"--\",\n        \"n\": \"-.\",\n        \"o\": \"---\",\n        \"p\": \".--.\",\n        \"q\": \"--.-\",\n        \"r\": \".-.\",\n        \"s\": \"...\",\n        \"t\": \"-\",\n        \"u\": \"..-\",\n        \"v\": \"...-\",\n        \"w\": \".--\",\n        \"x\": \"-..-\",\n        \"y\": \"-.--\",\n        \"z\": \"--..\",\n        \" \": \"/\",\n        \"0\": \"-----\",\n        \"1\": \".----\",\n        \"2\": \"..---\",\n        \"3\": \"...--\",\n        \"4\": \"....-\",\n        \"5\": \".....\",\n        \"6\": \"-....\",\n        \"7\": \"--...\",\n        \"8\": \"---..\",\n        \"9\": \"----.\",\n        \".\": \".-.-.-\",\n        \",\": \"--..--\",\n        \"?\": \"..--..\",\n        \"!\": \"-.-.--\",\n        \"-\": \"-....-\",\n        \"/\": \"-..-.\",\n        \"(\": \"-.--.\",\n        \")\": \"-.--.-\",\n        \"&\": \".-...\",\n        \":\": \"---...\",\n        \";\": \"-.-.-.\",\n        \"=\": \"-...-\",\n        \"+\": \".-.-.\",\n        '\"': \".-..-.\",\n        \"$\": \"...-..-\",\n        \"@\": \".--.-.\",\n        \"_\": \"..--.-\"\n    }\n    #Iterate over the string to find the substring\n    substrings = []\n    for i in range(len(str1)):\n        substring = str1[i:i+3]\n        if substring in mappings:\n            substrings.append(mappings[substring])\n    #Concatenate all the substrings\n    for i in range(len(substrings)):\n        decoded_str += substrings[i]\n    return decoded_str\n    \ndef find_missing_letter2(chars):\n    '''\n    Write a method to find the missing letter in the given string. You will be given an array of \n    letters, and you will have to find the missing letter in the array.\n    '''\n    missing_letter = 'z'\n    #iterate over the letters in the given string\n    for char in chars:\n        missing_letter = missing_letter.replace(char.lower(), '')\n    return missing_letter\n    \ndef generate_hashtag(s):\n    '''\n    Write a method to generate a hashtag string given a string.\n    '''\n    new_str = \"#\"\n    if len(s) > 0:\n        for word in s.split():\n            new_str += word[0].upper() + word[1:].lower()\n        new_str += \"#\"\n    return new_str\n    \ndef generate_hashtag2(s):\n    '''\n    Write a method to generate a hashtag string given a string.\n    '''\n    new_str = \"#\"\n    if len(s) > 0:\n        for char in s:\n            if char =='':\n                new_str += \"#\"\n            else:\n                new_str += char.upper()\n        new_str += \"#\"\n    return new_str\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = \"\"\n    start = re.search(r'[\\\"][^\\\"]+[\\\"]', text1)\n    end = re.search(r'[\\\"][^\\\"]+[\\\"]', text1[start.start():])\n    if start is None:\n        return text1\n    else:\n        return text1[start.start():end.end()]\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Output = ['Good morning,', 'hello world']\n    Output = []\n    for i in text1:\n        if \"\\\"\" in i:\n            Output.append(i)\n    print(Output)\n    print(\"Length: \", len(Output))\n    return Output\ndef get_list(text1):\n    #Output = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n    Output = []\n    for i in text1:\n        #Output.append(i)\n        Output += [int(x) for x in re.findall(r'\\b\\d+\\b', i)]\n    return Output\ndef string_to_list(text1):\n    #Output = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\n    Output = []\n    for i in text1:\n        Output.append(i)\n    return Output\ndef string_to_list_alphabetical(text1):\n    #Output = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    Output = []\n    for i in text1:\n        Output.append(i)\n    return Output\ndef string_to_list_special(text1):\n    #Output = ['$', '&', '^', '*', '%', '@', '~', '`']\n    Output = []\n    for i in text1:\n        Output.append(i)\n    return Output\ndef remove_spaces_and_new_lines(text1):\n    #Output = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\"))\n    for i in text1:\n        Output.append(i.replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines2(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\"))\n    for i in text1:\n        Output.append(i.replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines3(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines4(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines5(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_special_character(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace('@', '').replace('$', '').replace('&', '').replace('^', '').replace('*', '').replace('%', '').replace('~', '').replace('`', ''))\n    return Output\ndef remove_spaces_and_new_lines6(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\"))\n    for i in text1:\n        Output.append(i.replace(\" \", \"\"))\n    for i in text1:\n        Output.append(i.replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines7(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    for i in text1:\n        Output.append(i.replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines8(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines9(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines10(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines11(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines12(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines13(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines14(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines15(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines16(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines17(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines18(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines19(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines20(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines21(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines22(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines23(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines24(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines25(text1):\n    Output = []\n    for i in text1:\n        Output.append(i.replace(\"\\n\", \"\").replace(\" \", \"\"))\n    return Output\ndef remove_spaces_and_new_lines26(text1):\n    Output = []\n    for i in text1:\n        Output.append"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1\n    p = re.compile('\\\"(.+?)\\\"')\n    text_list = p.findall(text)\n    return text_list\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #text1='\"The cost of the call is $21.00.\"'\n    matches = re.findall('\"[^\"]+\"',text1)\n    for match in matches:\n        print(match)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\\\"(.+)\\\"',text1)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    multiplied_tup = ()\n    for i in range(len(test_tup) - 1):\n        multiplied_tup += (test_tup[i] * test_tup[i + 1], )\n    return multiplied_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return test_tup[:-1] * test_tup[1:]\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if isinstance(test_tup, tuple) == False:\n        raise ValueError('Error: The input is not a tuple')\n    else:\n        new_tup = ()\n        for i in range(0,len(test_tup) - 1):\n            new_tup += ((test_tup[i], test_tup[i+1]),)\n        return new_tup\n    \n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(0, len(test_tup)):\n        new_tup = new_tup + (test_tup[i] * test_tup[i + 1],)\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    output_tup = ()\n    for i in range(len(test_tup)):\n        #print(\"test_tup[i]\", test_tup[i])\n        if i == 0:\n            output_tup += (test_tup[i], )\n        else:\n            output_tup += (test_tup[i] * output_tup[-1],)\n    return output_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[0] * test_tup[3], test_tup[1] * test_tup[2], test_tup[1] * test_tup[3], test_tup[2] * test_tup[3])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    output = ()\n    for i in range(0,len(test_tup)):\n        if i == len(test_tup)-1:\n            output = output + (test_tup[i],)\n        else:\n            output = output + (test_tup[i] * test_tup[i+1],)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    assert len(test_tup) >= 2\n    mul_tup = ()\n    for i in range(0, len(test_tup) - 1):\n        mul_tup += (test_tup[i] * test_tup[i + 1],)\n    return mul_tup\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_lst = []\n    for index in range(len(lst1)):\n        new_lst.append(lst1[index] + lst2[index])\n    return new_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [l1+l2 for l1,l2 in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    output = []\n    for i in range(len(lst1)):\n        output.append(lst1[i] + lst2[i])\n    return output\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1) == len(lst2), \"Lists must be the same size.\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i] + lst2[i])\n    return lst3\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i] + lst2[i])\n    return lst3\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_lst = []\n    for i in range(len(lst1)):\n        new_lst.append(lst1[i] + lst2[i])\n    return new_lst\n    \nprint(sum_list([1,2,3], [4,5,6]))\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_list = []\n    if len(lst1) == len(lst2):\n        for i in range(0,len(lst1)):\n            sum_list.append(lst1[i] + lst2[i])\n    return sum_list\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i + j for i, j in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    # My code goes here\n    if len(lst1) == len(lst2):\n        lst = []\n        for i in range(len(lst1)):\n            lst.append(lst1[i] + lst2[i])\n        return lst\n    else:\n        return None\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    def consecutive_duplicates_helper(nums, lst=[]):\n        if not nums:\n            return lst\n        if len(nums) == 1:\n            if nums[0] in lst:\n                return lst\n            return lst + [nums[0]]\n        if nums[0] in lst:\n            return consecutive_duplicates_helper(nums[1:], lst)\n        else:\n            return consecutive_duplicates_helper(nums[1:], lst + [nums[0]])\n    return consecutive_duplicates_helper(nums)\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # If the list is empty\n    if len(nums) == 0:\n        return None\n    # If the list has one element\n    if len(nums) == 1:\n        return nums\n    # Check for consecutive duplicates\n    for i in range(len(nums)):\n        if nums[i] == nums[i-1]:\n            # The number is repeated\n            nums.pop(i)\n            # Repeat until it doesn't repeat\n            while i >= 1 and nums[i-1] == nums[i]:\n                nums.pop(i-1)\n                i -= 1\n            # Repeat until it doesn't repeat\n            while i+1 < len(nums) and nums[i] == nums[i+1]:\n                nums.pop(i+1)\n    # Return the list with the consecutive duplicates removed\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_nums = []\n    for k, g in groupby(nums):\n        new_nums.append(list(g))\n    return new_nums\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i,j in groupby(nums):\n        print(i,j)\n    nums=list(set(nums))\n    nums.sort()\n    print(nums)\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i in nums:\n        if len(nums) > 1:\n            if nums[0] == nums[1]:\n                nums.pop(0)\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    new_list = [k for k, g in groupby(nums)]\n    return new_list\nprint(consecutive_duplicates([0, 0, 1, 2, 3, 3]))\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return []\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #initialize an empty list\n    result = list()\n    #loop over the numbers\n    for key, group in groupby(nums):\n        #add the first number in each group to the result\n        result.append(key)\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_nums = []\n    for key, group in groupby(nums):\n        new_nums.append(key)\n    return new_nums\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return []\n    nums.sort()\n    while True:\n        try:\n            nums.remove(nums[0])\n        except:\n            return nums\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(((3/4)*math.pi*r*r + math.pi*r*h))\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    sideArea = (math.pi*r**2)/3\n    topArea = (math.pi*r**2)/4\n    return (2*sideArea) + (topArea*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2 + (math.pi*r*h)/3\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    surfacearea=math.pi*r*(r+h)\n    print(\"The surface area of cone is: \",surfacearea)\n    return surfacearea\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r < 0 or h < 0:\n        return \"Invalid inputs\"\n    else:\n        return (math.pi * r * r * h) / 3\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 + 2 * math.pi * r * h\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #r = input(\"Enter the radius of the cone: \")\n    #h = input(\"Enter the height of the cone: \")\n    r = float(r)\n    h = float(h)\n    if r<0 or h<0:\n        print(\"Error, input should not be negative.\")\n        return\n    print(\"The lateral surface area is\", (1/3)*(3.14159*r*r)*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    '''\n    The lateral surface area of a cone is the sum of the lateral surface area of each lateral segment of the cone. \n    '''\n    return 2*r*(1+(1/3)*((h/r)**2))\n    \n    '''\n    Using this formula, the lateral surface area of a cone with a radius of 5 and a height of 6 is 16.\n    '''\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*(r+h)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (3.14*r*r)+ (3.14*r*h)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\" \", \":\").replace(\".\", \":\").replace(\",\", \":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',','!:')\n    text = text.replace('.','!:')\n    return text\ndef replace_specialchar2(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.\\s]',r':',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=re.sub(r\"[\\s,\\.]+\",\":\",text)\n    return text\ndef check_if_contains_series(text):\n    '''\n    Write a function to check if the text passed contains the following series:\n    1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\n    26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\n    46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\n    66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\n    86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,\n    105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\n    121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136,\n    137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,\n    153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n    169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,\n    185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,\n    201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,\n    217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,\n    233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248,\n    249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264,\n    265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280,\n    281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296,\n    297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312,\n    313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328,\n    329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344,\n    345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360,\n    361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,\n    377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392,\n    393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408,\n    409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424,\n    425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440,\n    441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456,\n    457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472,\n    473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488,\n    489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504,\n    505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520,\n    521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536,\n    537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552,\n    553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568,\n    569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584,\n    585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600,\n    601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616,\n    617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632,\n    633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648,\n    649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664,\n    665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680,\n    681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696,\n    697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712,\n    713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728,\n    729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744,\n    745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760,\n    761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776,\n    777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, "
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n    return text\ndef get_ranges(text):\n    '''\n    Write a function to convert text like \"1, 2, 3, 4-5, 6\" to a list of ints like [1, 2, 3, 4, 5, 6].\n    '''\n    return list(map(int, re.findall(r\"\\d+\",text)))\ndef remove_all_before(items, pivot):\n    '''\n    Write a function to remove all items from a list before a given value.\n    '''\n    if not items:\n        return []\n    if items[0] >= pivot:\n        return [items[0]] + remove_all_before(items[1:],pivot)\n    return items\ndef reverse_pair(text):\n    '''\n    Given a string, write a function to output a \"reversed pair\" for every\n    double character in the string.\n    '''\n    return \"\".join([char if i%2==0 else char+char for i,char in enumerate(text)])\ndef count_hi(text):\n    '''\n    Write a function to count the number of times that the string \"hi\" appears anywhere in a given string.\n    '''\n    return len(re.findall(r\"hi\",text))\ndef cat_dog(text):\n    '''\n    Write a function to return True if the string \"cat\" and \"dog\" appear the same number of times in the given string.\n    '''\n    return len(re.findall(r\"cat\",text)) == len(re.findall(r\"dog\",text))\ndef xyz_there(text):\n    '''\n    Write a function to check if the given string contains an appearance of \"xyz\" where the xyz is not directly preceeded by a period (.).\n    So \"xxyz\" counts but \"x.xyz\" does not.\n    '''\n    return bool(re.search(r\"xyz\\.{0,3}|xyz\\b\",text))\ndef make_abba(a, b):\n    '''\n    Given two strings, return True if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: s.lower() returns the lowercase version of a string.\n    '''\n    return (a.lower()+b.lower() in (b.lower()+a.lower()) or a.lower() in (b.lower()+a.lower()))\ndef make_tags(tag, word):\n    '''\n    The web is built with HTML strings like \"<i>Yay</i>\" which draws Yay as italic text. In this example, the \"i\" tag makes <i> and </i> which surround the word \"Yay\". Given tag and word strings, create the HTML string with tags around the word, e.g. \"<i>Yay</i>\".\n    '''\n    return \"<\"+tag+\">\"+word+\"</\"+tag+\">\"\ndef make_out_word(out, word):\n    '''\n    Given an \"out\" string length 4, such as \"<<>>\", and a word, return a new string where the word is in the middle of the out string, e.g. \"<<word>>\".\n    '''\n    return out[0:2]+word+out[2:4]\ndef extra_end(str):\n    '''\n    Given a string, return a new string made of 3 copies of the last 2 chars of the original string. The string length will be at least 2.\n    '''\n    return str[-2:]*3\ndef first_two(str):\n    '''\n    Given a string, return the string made of its first two chars, so the String \"Hello\" yields \"He\". If the string is shorter than length 2, return whatever there is, so \"X\" yields \"X\", and the empty string \"\" yields the empty string \"\".\n    '''\n    return str[0:2]\ndef first_half(str):\n    '''\n    Given a string of even length, return the first half. So the string \"WooHoo\" yields \"Woo\".\n    '''\n    return str[0:len(str)//2]\ndef without_end(str):\n    '''\n    Given a string, return a version without the first and last char, so \"Hello\" yields \"ell\". The string length will be at least 2.\n    '''\n    return str[1:-1]\ndef left2(str):\n    '''\n    Given a string, return a \"rotated left 2\" version where the first 2 chars are moved to the end. The string length will be at least 2.\n    '''\n    return str[2:]+str[:2]\ndef non_start(a, b):\n    '''\n    Given 2 strings, return their concatenation, except omit the first char of each. The strings will be at least length 1.\n    '''\n    return a[1:]+b[1:]\ndef left_2(str):\n    '''\n    Given a string, return a \"rotated left 2\" version where the first 2 chars are moved to the end. The string length will be at least 2.\n    '''\n    return str[2:]+str[:2]\ndef make_out_word(out, word):\n    '''\n    Given an \"out\" string length 4, such as \"<<>>\", and a word, return a new string where the word is in the middle of the out string, e.g. \"<<word>>\".\n    '''\n    return out[0:2]+word+out[2:4]\ndef make_tags(tag, word):\n    '''\n    The web is built with HTML strings like \"<i>Yay</i>\" which draws Yay as italic text. In this example, the \"i\" tag makes <i> and </i> which surround the word \"Yay\". Given tag and word strings, create the HTML string with tags around the word, e.g. \"<i>Yay</i>\".\n    '''\n    return \"<\"+tag+\">\"+word+\"</\"+tag+\">\"\ndef left2(str):\n    '''\n    Given a string, return a \"rotated left 2\" version where the first 2 chars are moved to the end. The string length will be at least 2.\n    '''\n    return str[2:]+str[:2]\ndef is_prime(n):\n    '''\n    Return True if a number is prime, False otherwise.\n    '''\n    return all([n%i for i in range(2,int(n**0.5+1))]) and n>1\ndef is_even(n):\n    '''\n    Return True if a number is even, otherwise return False.\n    '''\n    return n%2==0\ndef is_string(el):\n    '''\n    Return True if a variable is a string, otherwise return False.\n    '''\n    return isinstance(el,str)\ndef common_end(a, b):\n    '''\n    Given 2 strings, return True if they both end with the same 4 letters.\n    '''\n    return a[-4:]==b[-4:]\ndef common_end_3(a, b):\n    '''\n    Given 2 strings, return True if they both end with the same 3 letters.\n    '''\n    return a[-3:]==b[-3:]\ndef sum_range(nums, start=0, end=None):\n    '''\n    Return the sum of the numbers in the range between start and end. If the end point is not given, it will default to the last element in the list.\n    '''\n    return sum(nums[start:end+1]) if end else sum(nums[start:])\ndef sum_range_2(nums, start=0, end=None):\n    '''\n    Return the sum of the numbers in the range between start and end. If the end point is not given, it will default to the last element in the list.\n    '''\n    return sum(nums[start:end+1]) if end else sum(nums[start:])\ndef sum_range_3(nums, start=0, end=None):\n    '''\n    Return the sum of the numbers in the range between start and end. If the end point is not given, it will default to the last element in the list.\n    '"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n    return text\n    \ndef read_text():\n    '''\n    Reads in the text of the book and assign it to the variable book\n    '''\n    book = open(\"text.txt\",\"r\")\n    text = book.read()\n    book.close()\n    return text\n    \ndef count_chars(text):\n    '''\n    Write a function to count how many times each character appears in the text and\n    assign it to a variable called char_counts\n    '''\n    text = replace_specialchar(text)\n    char_counts = {}\n    for char in text:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n    return char_counts\n        \ndef max_word_length(text):\n    '''\n    Write a function to find the longest word in the text and return its length.\n    '''\n    text = replace_specialchar(text)\n    max_len = 0\n    words = text.split()\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n    \ndef unique_words(text):\n    '''\n    Write a function to count how many unique words there are in the text.\n    Hint: make use of the replace_specialchar() function written in another file.\n    '''\n    text = replace_specialchar(text)\n    words = text.split()\n    unique = []\n    for word in words:\n        if word not in unique:\n            unique.append(word)\n    return len(unique)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    regex = \"[\\s,\\.]\"\n    regex_list = re.findall(regex, text)\n    for i in range(len(regex_list)):\n        text = text.replace(regex_list[i], \":\")\n    return text\ndef replace_specialchar_2(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \" or text[i] == \",\" or text[i] == \".\":\n            text = text.replace(text[i], \":\")\n    return text\ndef replace_specialchar_3(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\" \", \":\").replace(\".\", \":\").replace(\",\", \":\")\ndef replace_specialchar_4(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \",\":\n            text = text.replace(text[i], \":\")\n    return text\ndef replace_specialchar_5(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \",\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n    return text\ndef replace_specialchar_6(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \",\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n    return text\ndef replace_specialchar_7(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \",\":\n            text = text.replace(text[i], \":\")\n    return text\ndef replace_specialchar_8(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \",\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n    return text\ndef replace_specialchar_9(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \",\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n    return text\ndef replace_specialchar_10(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \",\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n    return text\ndef replace_specialchar_11(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \",\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n    return text\ndef replace_specialchar_12(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \",\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n    return text\ndef replace_specialchar_13(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \",\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n    return text\ndef replace_specialchar_14(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \",\":\n            text = text.replace(text[i], \":\")\n        elif text[i] == \".\":\n            text = text.replace(text[i], \":\")\n    return text\ndef replace_specialchar_15(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #Your code here\n    text = re.sub(r'[\\s,\\.]',':',text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #pattern = '\\s|\\.|,|;'\n    #return re.sub(pattern,':',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(\"[\\s,\\.]\", \":\", text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('.', ':')\n    text = text.replace(',', ':')\n    text = text.replace(' ', ':')\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x > A[mid]:\n            low = mid + 1\n        elif x < A[mid]:\n            high = mid - 1\n        else:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A)\n    result = -1\n    while left < right:\n        mid = left + (right - left) // 2\n        if x > A[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    if A[left] == x:\n        return left\n    else:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    l = 0\n    r = n - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Solution 1\n    # O(n)\n    # start = 0\n    # end = len(A) - 1\n    # while start <= end:\n    #     mid = (start + end) // 2\n    #     if x == A[mid]:\n    #         if mid == 0 or x > A[mid-1]:\n    #             return mid\n    #         else:\n    #             start = mid + 1\n    #     elif x > A[mid]:\n    #         start = mid + 1\n    #     else:\n    #         end = mid - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def binary_search(A, x, low, high):\n        # low and high represent the indices of the leftmost and rightmost elements in A.\n        if low > high:\n            return -1\n        # Find the mid point\n        mid = (low + high) // 2\n        if x == A[mid]:\n            # When the mid is the result, we are done.\n            return mid\n        elif x < A[mid]:\n            # Go to the left half\n            return binary_search(A, x, low, mid - 1)\n        else:\n            # Go to the right half\n            return binary_search(A, x, mid + 1, high)\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n    while low <= high:\n        mid = low + (high - low)//2\n        if x == A[mid]:\n            return mid\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start_index = 0\n    end_index = len(A) - 1\n    while start_index <= end_index:\n        mid_index = (start_index + end_index) // 2\n        if A[mid_index] == x:\n            if mid_index == 0 or x > A[mid_index - 1]:\n                return mid_index\n            end_index = mid_index - 1\n        elif x < A[mid_index]:\n            end_index = mid_index - 1\n        else:\n            start_index = mid_index + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l, r = 0, len(A) - 1\n    while l <= r:\n        m = (l + r) // 2\n        if A[m] < x:\n            l = m + 1\n        elif A[m] > x:\n            r = m - 1\n        else:\n            if m == 0 or x > A[m-1]:\n                return m\n            else:\n                r = m - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A or x < A[0]:\n        return -1\n    if x > A[-1]:\n        return len(A)\n    l, r = 0, len(A) - 1\n    while l <= r:\n        mid = l + (r-l)//2\n        if x == A[mid]:\n            if mid == 0 or x > A[mid-1]:\n                return mid\n            else:\n                r = mid - 1\n        elif x > A[mid]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x not in A:\n        return -1\n    if len(A) == 1:\n        return 0 if A[0] == x else -1\n    \n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if x == A[mid]:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            end = mid - 1\n        elif x > A[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    length = len(arr)\n    sub_list_product = []\n    for i in range(length):\n        for j in range(i, length):\n            sub_list_product.append(reduce(lambda x, y: x * y, arr[i:j + 1]))\n    return sum(sub_list_product)\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if(n <= 1):\n        return 0\n    out = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            temp = 1\n            for k in range(i, j + 1):\n                temp = temp * arr[k]\n            out = out + temp\n    return out\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    import numpy as np\n    n = len(arr)\n    result = np.zeros(n)\n    \n    for i in range(0, n):\n        temp = np.array([arr[0:i], arr[i:n]])\n        result[i] = np.prod(temp)\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    max_prod=0\n    min_prod=0\n    res=0\n    for i in range(len(arr)):\n        max_prod=max_prod*arr[i]\n        min_prod=min_prod*arr[i]\n        if max_prod<0:\n            max_prod=0\n        if min_prod>0:\n            min_prod=0\n        if max_prod==0:\n            if min_prod==0:\n                res=0\n            else:\n                res=max(res,min_prod)\n        else:\n            res=max(res,max_prod)\n    return res\n    \ndef subArraySum(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    max_prod=0\n    min_prod=0\n    res=0\n    for i in range(len(arr)):\n        max_prod=max_prod*arr[i]\n        min_prod=min_prod*arr[i]\n        if max_prod<0:\n            max_prod=0\n        if min_prod>0:\n            min_prod=0\n        if max_prod==0:\n            if min_prod==0:\n                res=0\n            else:\n                res=min_prod\n        else:\n            res=max(res,max_prod)\n    return res\n    \ndef product_of_sum(arr):\n    '''\n    Write a python function to find product of sum of all possible sublists of a given list. https://www.geeksforgeeks.org/product-of-sum-of-all-sublists/\n    '''\n    max_sum=0\n    res=0\n    for i in range(len(arr)):\n        max_sum=max_sum+arr[i]\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if (i==0 and j==0):\n                res=res+arr[i]\n            else:\n                res=res+arr[i]+arr[j]\n        if max_sum==0:\n            if res>0:\n                res=1\n            else:\n                res=0\n        else:\n            res=res%max_sum\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    output = 0\n    for i in range(0,n):\n        for j in range(i,n):\n            prod = 1\n            for k in range(i,j+1):\n                prod *= arr[k]\n            output+=prod\n    return output\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr = [1,2,3,4,5,6]\n    left=0\n    right=0\n    length = len(arr)\n    curr = 1\n    Sum=0\n    for i in range(0,length):\n        curr *= arr[i]\n        right = i\n        while(left<right):\n            curr//=arr[left]\n            left+=1\n            Sum+=curr\n    return Sum\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_sum = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            arr_sum += int(reduce(lambda x,y: int(x)*int(y), arr[i:j+1]))\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # initialize final result \n    final_res = 0\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod_of_subarr = []\n    for i in range(len(arr)):\n        prod_of_subarr.append(arr[i:])\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    result = 0\n    size = len(arr)\n    start = 0\n    end = 0\n    for i in range(1, size):\n        start = 0\n        end = i\n        temp = 1\n        for j in range(i):\n            temp *= arr[j]\n        for k in range(i + 1, size):\n            end = k\n            temp *= arr[k]\n            result += temp\n    return result\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #code here\n    n = n>>1\n    return n<<1\n    "
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b10101010  \n    a = 0b101010\n    a = a | mask\n    n = n & ~a\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    \n    def get_bit(n, i):\n        return (n & (1 << i)) >> i\n    \n    def set_bit(n, i):\n        return (n | (1 << i))\n    \n    # number of bits in n\n    \n    k = n.bit_length()\n    \n    # if n is already a power of 2, return 0\n    if k == 1:\n        return 0\n    \n    # set the most significant bit of n\n    msb = get_bit(n, 0)\n    \n    # if msb is set, set the next most significant bit to unset, else set the next most significant bit to set\n    if msb:\n        return set_bit(n, k - 1)\n    else:\n        return set_bit(n, k - 2)\n    \n    \n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    s = bin(n)\n    print (s)\n    s = s[2:]\n    print (s)\n    n = int(s,2)\n    n = n ^ (1 << 2)\n    print (n)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    a = n & 0xAAAAAAAA\n    b = (n & 0x55555555) << 1 \n    c = (n & 0x33333333) >> 1\n    return (a | b | c) \n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b111111111111111111111111111111111111\n    n = (n & mask) ^ (n << 1 & mask)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Getting the size of the number in bits\n    size = 32\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if len(n) == 1:  \n        return [n[0]], [n[0]]\n    else:\n        b = '{:032b}'.format(n)[-2:]\n        c = '{:032b}'.format(n)[:-2]\n        a = int(b, 2) ^ int(c, 2)\n        a = list(str(bin(a))[2:])\n        for i in range(0, 32):\n            if i < len(n):\n                a[i] = n[i]\n        return a[::-1]\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bin_str = '{0:032b}'.format(n)\n    for i in range(1, 32):\n        x = list(bin_str)\n        x[-i] = '1' if x[-i] == '0' else '0'\n        bin_str = ''.join(x)\n    return int(bin_str, 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    l = list(bin(n))\n    l[2] = \"1\"\n    l[3] = \"0\"\n    l[4] = \"0\"\n    l[5] = \"0\"\n    # print(\"\".join(l))\n    return int(\"\".join(l), 2)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i, num in enumerate(a):\n        if num >= x:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #a=[1,2,3,4,5,6]\n    n=len(a)\n    for i in range(n):\n        if x>a[i]:\n            return i\n    return n\n    #insertion = bisect.bisect_left(a, x)\n    #return insertion\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    result = bisect.bisect_left(a, x)\n    if result!= len(a) and a[result] == x:\n        return result\n    else:\n        return None\n        \nassert(left_insertion([1, 3, 5, 7], 0) == 0)\nassert(left_insertion([1, 3, 5, 7], 5) == 1)\nassert(left_insertion([1, 3, 5, 7], 7) == 2)\nassert(left_insertion([1, 3, 5, 7], 8) == 4)\nassert(left_insertion([1, 3, 5, 7], 10) == 4)\nassert(left_insertion([1, 3, 5, 7], 1) == 0)\nassert(left_insertion([1, 3, 5, 7], 3) == 1)\nassert(left_insertion([1, 3, 5, 7], 6) == 2)\nprint('Passed all tests.')\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == []:\n        return 0\n    else:\n        index = bisect.bisect_left(a, x)\n        return index\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # bisect.bisect_left(a, x) returns index, and bisect.bisect_right(a, x) returns insertion point\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return i - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    if x > a[-1]:\n        return len(a)\n    left = 0\n    right = len(a) - 1\n    while right >= left:\n        middle = (right + left) // 2\n        if a[middle] < x:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return left\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    if x > a[-1]:\n        return len(a)\n    left = 0\n    right = len(a) - 1\n    while right >= left:\n        middle = (right + left) // 2\n        if a[middle] > x:\n            right = middle - 1\n        else:\n            left = middle + 1\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        i = bisect.bisect_left(a, x)\n        if i!= len(a) and a[i] == x:\n            return i\n        else:\n            return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a)-1\n    while left <= right:\n        middle = (left+right)//2\n        if x == a[middle]:\n            return middle\n        if x < a[middle]:\n            right = middle - 1\n        else:\n            left = middle + 1\n    return left\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if(re.match(regex, string)): \n        print(\"String is starting with a vowel\") \n    else: \n        print(\"String is starting with a consonant\") \nstring = input(\"Enter a string: \") \ncheck_str(string) \n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex,string) is not None \n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex, string) is not None\n    print(result)\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string)!= None: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.findall(regex, string)\n    return True if result else False \nprint(check_str(\"aeiou\"))\nprint(check_str(\"aeiouAEIOU\"))\nprint(check_str(\"AEIOUaeiou\"))\nprint(check_str(\"aeiouAEIOU\"))\nprint(check_str(\"aeiouAEIOUaeiou\"))\nprint(check_str(\"aeiouAEIOUaeiouAEIOUaeiou\"))\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex, string)): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = string.lower()\n    #print(string)\n    if(re.match(regex,string)): \n        return True\n    return False \n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match: \n        print(\"String is starting with vowel\") \n    else: \n        print(\"String is not starting with vowel\") \ncheck_str('a') \ncheck_str('x') \ncheck_str('aeiou') \ncheck_str('AEIOU') \ncheck_str('xAEIOU') \ncheck_str('xAEIOUaeiou') \ncheck_str('aeiouAEIOU') \ncheck_str('aeiouAEIOUxAEIOUaeiou') "
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    return False\nif __name__ == \"__main__\":\n    print(check_str('abc'))\n    print(check_str('vM'))\n    print(check_str('A'))\n    print(check_str('a'))\n    print(check_str('BC'))\n    print(check_str('ab'))\n    print(check_str('vMN'))\n    print(check_str('VmN'))\n    print(check_str('VNM'))\n    print(check_str('vMn'))\n    print(check_str('VnM'))\n    print(check_str('vnm'))\n    print(check_str('VNM'))\n    print(check_str('vnM'))\n    print(check_str('Vnm'))\n    print(check_str('vnM'))\n    print(check_str('VNM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnm'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    print(check_str('vnM'))\n    print(check_str('VnM'))\n    prin"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string)): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2*n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n * (2 * geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n - 1 + geometric_sum(n - 1) if n!= 1 else 1\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return (n * (2 * n - 1)) / 2\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return ((1/2)*(1+(1/2)**n))\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (1 + geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (1/n) * n + geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = n - 1;\n    i = 0;\n    j = 1;\n    while(True): \n        i = n * j;\n        j += 1;\n        if(math.log10(i) + 1 == n): \n            break;\n    return i;\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 0 \n    return int(math.floor(math.sqrt(8 * n + 1) - 1) / 2) \n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    k = int(math.log10(n))+1\n    lower = int(pow(n, 2)/2)\n    upper = int(pow(n, 2))\n    index = int((lower+upper)/2)\n    while(True):\n        index = int((lower+upper)/2)\n        t = int(index*(index+1)/2)\n        if(t >= n):\n            upper = index\n        elif(t < n):\n            lower = index\n        if(upper - lower < 2):\n            return index\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    result=0\n    a=int(math.sqrt(2*n))\n    for i in range(0,a):\n        result+=i\n    return result\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while (1): \n        t = i * (i + 1) // 2\n        if len(str(t)) == n: \n            return t\n        i = i + 1\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    sum = 0\n    while(sum < n):\n        sum = i * (i + 1) // 2\n        i += 1\n    return i - 1\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # list of all n digit triangular numbers\n    tri_num_list = []\n    for i in range(1, n+1):\n        tri_num_list.append(i*(i+1)/2)\n    print(tri_num_list)\n    # list of all n digit triangular numbers\n    tri_num_list = list(map(str, tri_num_list))\n    # print(tri_num_list)\n    # print(type(tri_num_list))\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index=0\n    n=int(n)\n    m=0\n    for i in range(1,n+1):\n        m=int(i*(i+1)/2)\n        index=index+1\n        if m<=n:\n            continue\n        else:\n            break\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #number of digits\n    n = int(n)\n    # number of elements in the set\n    d = int(math.floor(math.log10(9) + 1))\n    \n    # We need to initialize a n+1 element array\n    # and initialize all elements to 0\n    array = [0 for i in range(d+1)]\n    \n    # Set the value of 0th element as 1\n    array[0] = 1\n    \n    # array[1] is the first element in the sequence\n    array[1] = 1\n    \n    for i in range(2, d+1):\n        array[i] = array[i-1] + (9 * array[i-1] / 10)\n        \n    # Find the required element \n    k = (9 * d * (d+1) / 2) - (9 * array[d-1])\n    \n    for i in range(d-1, 0, -1):\n        k = int((k - array[i]) / 9)\n        \n    # k is the index of the required element\n    return k\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True: \n        tri = (i * (i + 1)) / 2\n        if len(str(tri)) == n: \n            return i \n        i += 1\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    #1st method\n    # key = test_tup[0]\n    # value = test_tup[1]\n    # return {key:value}\n    #2nd method\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n    #3rd method\n    # a = dict()\n    # for i in range(len(test_tup)//2):\n    #     a[test_tup[i]] = test_tup[i+1]\n    # return a\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = dict(zip(test_tup[::2], test_tup[1::2]))\n    print(d)\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    # initialize the dictionary\n    for i in range(0, len(test_tup), 2):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    lst = []\n    for i in range(0, len(test_tup), 2):\n        lst.append(test_tup[i] + test_tup[i + 1])\n    return dict(lst)\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    #code here\n    #Python program to convert tuple to dictionary\n    \n    test_tup = ('a', 'b', 'c', 'd')\n    print(dict(zip(test_tup[:-1],test_tup[1:])))\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup)):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_tup = ('Abhishek',1, 'Admin', '10')\n    d = dict()\n    for index in range(len(test_tup)-1):\n        d[test_tup[index]] = test_tup[index+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0,len(test_tup)):\n        test_dict[test_tup[i]]=test_tup[i+1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if(len(s) == 0) :\n        return False\n    else :\n        char = s[0]\n        if(all(char == x for x in s)) :\n            return True\n        else :\n            return False\n        "
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    res = set(s)\n    if (len(res) == 1):\n        print(\"All Characters Are Same\")\n    else:\n        print(\"Not All Characters Are Same\")\n    return\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    chars = set(s)\n    if len(chars) == 1 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Code here\n    if len(s) == 0 or len(s) == 1:\n        return True\n    else:\n        for i in range(len(s)):\n            for j in range(i+1,len(s)):\n                if s[i] == s[j]:\n                    return False\n                \n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s) - 1):\n        if s[i]!= s[i + 1]:\n            return False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(s[0]==x for x in s)\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    if len(s) == 1 :\n        return True\n    if len(s) == 2 :\n        if s[0] == s[1] :\n            return True\n        else :\n            return False\n    if len(s) == 3 :\n        if s[0] == s[1] and s[1] == s[2] :\n            return True\n        else :\n            return False\n    if len(s) == 4 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] :\n            return True\n        else :\n            return False\n    if len(s) == 5 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] :\n            return True\n        else :\n            return False\n    if len(s) == 6 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] :\n            return True\n        else :\n            return False\n    if len(s) == 7 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] :\n            return True\n        else :\n            return False\n    if len(s) == 8 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] :\n            return True\n        else :\n            return False\n    if len(s) == 9 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] :\n            return True\n        else :\n            return False\n    if len(s) == 10 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] :\n            return True\n        else :\n            return False\n    if len(s) == 11 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] :\n            return True\n        else :\n            return False\n    if len(s) == 12 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] :\n            return True\n        else :\n            return False\n    if len(s) == 13 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] :\n            return True\n        else :\n            return False\n    if len(s) == 14 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] :\n            return True\n        else :\n            return False\n    if len(s) == 15 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14] :\n            return True\n        else :\n            return False\n    if len(s) == 16 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14] and s[14] == s[15] :\n            return True\n        else :\n            return False\n    if len(s) == 17 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14] and s[14] == s[15] and s[15] == s[16] :\n            return True\n        else :\n            return False\n    if len(s) == 18 :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7] and s[7] == s[8] and s[8] == s[9] and s[9] == s[10] and s[10] == s[11] and s[11] == s[12] and s[12] == s[13] and s[13] == s[14] and s[14] == s[15] and s[15] == s[16] and s[16] == s[17] :\n            return True\n        else :\n            return False\n    if len(s) == 19 :\n        if s[0] == s[1] and s[1] == s"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) <= 1\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/4 * math.sqrt(3) * side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = side**3/12\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4*math.sqrt(2)/3*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2*math.sqrt(2))/4\ndef volume_of_cylinder(radius,height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return (math.pi**2*radius**2*height)\ndef calculate_volume_of_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4/3)*math.pi*radius**3\ndef convert_temperature(celsius,fahrenheit):\n    '''\n    Write a function to convert between Fahrenheit and Celsius.\n    '''\n    return celsius * 9/5 + 32\ndef is_consecutive(list):\n    '''\n    Write a function to check if a list is consecutive.\n    '''\n    list.sort()\n    return (list[0] + 1) == list[1]\ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string == string[::-1]\ndef calculate_change(money,price):\n    '''\n    Write a function to calculate the change in dollars.\n    '''\n    return money - price\ndef calculate_future_value(present_value,future_rate,num_periods):\n    '''\n    Write a function to calculate the future value of an investment.\n    '''\n    return present_value * (1 + future_rate)**num_periods\ndef get_greatest_number(list):\n    '''\n    Write a function to get the greatest number from a list.\n    '''\n    return max(list)\ndef get_number_of_evens(list):\n    '''\n    Write a function to get the number of even numbers from a list.\n    '''\n    count = 0\n    for num in list:\n        if num % 2 == 0:\n            count += 1\n    return count\ndef get_factorial_of_number(number):\n    '''\n    Write a function to get the factorial of a number.\n    '''\n    return math.factorial(number)\ndef get_number_of_characters(phrase,char):\n    '''\n    Write a function to get the number of specific characters in a phrase.\n    '''\n    return phrase.count(char)\ndef get_number_of_words(sentence,word):\n    '''\n    Write a function to get the number of a specific words in a phrase.\n    '''\n    return sentence.count(word)\ndef get_number_of_days(year):\n    '''\n    Write a function to get the number of days in a given year.\n    '''\n    return year * 365\ndef get_number_of_leap_years(year):\n    '''\n    Write a function to get the number of leap years before a given year.\n    '''\n    return int(year/4) - int(year/100) + int(year/400)\ndef get_age_in_days(year,month,day):\n    '''\n    Write a function to calculate the age in days.\n    '''\n    return get_number_of_days(year) - get_number_of_days(get_age_in_years(year,month,day))\ndef get_age_in_years(year,month,day):\n    '''\n    Write a function to calculate the age in years.\n    '''\n    return year - get_number_of_years(year,month,day)\ndef get_number_of_years(year,month,day):\n    '''\n    Write a function to calculate the number of years.\n    '''\n    return int(year) - int(get_age_in_years(year,month,day))\ndef capitalize_name(name):\n    '''\n    Write a function to capitalize a name.\n    '''\n    return name.capitalize()\ndef get_number_of_items(n):\n    '''\n    Write a function to get the number of items in a list.\n    '''\n    return len(n)\ndef get_number_of_camel_case_words(sentence):\n    '''\n    Write a function to get the number of camel case words in a sentence.\n    '''\n    count = 0\n    for word in sentence.split():\n        if word.isupper():\n            count += 1\n    return count\ndef get_number_of_punctuation_marks(sentence):\n    '''\n    Write a function to get the number of punctuation marks in a sentence.\n    '''\n    count = 0\n    for char in sentence:\n        if char in \".,:;?!-\":\n            count += 1\n    return count\ndef get_number_of_spaces(sentence):\n    '''\n    Write a function to get the number of spaces in a sentence.\n    '''\n    return sentence.count(\" \")\ndef get_number_of_lines(sentence):\n    '''\n    Write a function to get the number of lines in a sentence.\n    '''\n    return sentence.count(\"\\n\") + 1\ndef get_number_of_sentences(sentence):\n    '''\n    Write a function to get the number of sentences in a sentence.\n    '''\n    return sentence.count(\".\")\ndef get_number_of_vowels(sentence):\n    '''\n    Write a function to get the number of vowels in a sentence.\n    '''\n    count = 0\n    vowels = \"aeiouAEIOU\"\n    for char in sentence:\n        if char in vowels:\n            count += 1\n    return count\ndef get_number_of_consonants(sentence):\n    '''\n    Write a function to get the number of consonants in a sentence.\n    '''\n    count = 0\n    consonants = \"bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ\"\n    for char in sentence:\n        if char in consonants:\n            count += 1\n    return count\ndef convert_to_roman_numeral(decimal_num):\n    '''\n    Write a function to convert a decimal number into a roman numeral.\n    '''\n    return decimal_num\ndef convert_from_roman_numeral(roman_numeral):\n    '''\n    Write a function to convert a roman numeral into a decimal number.\n    '''\n    return roman_numeral\ndef get_sum_of_digits(number):\n    '''\n    Write a function to get the sum of digits in a number.\n    '''\n    return int(number)\ndef get_smallest_number_divisible_by_three(number):\n    '''\n    Write a function to get the smallest number divisible by three.\n    '''\n    return number - (number % 3)\ndef get_number_of_repeating_letters(sentence):\n    '''\n    Write a function to get the number of repeating letters in a sentence.\n    '''\n    count = 0\n    str_lst = sentence.split()\n    for word in str_lst:\n        for i in range(len(word)-1):\n            if word[i] == word[i+1]:\n                count += 1\n    return count\ndef is_vowel(char):\n    '''\n    Write a function to check if a character is a vowel.\n    '''\n    vowels = \"aeiouAEIOU\"\n    return char in vowels\ndef is_consonant(char):\n    '''\n    Write a function to check if a character is a consonant.\n    '''\n    consonants = \"bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ\"\n    return char in consonants\ndef is_number(char):\n    '''\n    Write a function to check if a character is a number.\n    '''\n    return ord(char) >= 48 and ord(char) <= 57\ndef get_smallest_number_greater_than(number):\n    '''\n    Write a function to get the smallest number greater than a given number.\n    '''\n    return number + 1\ndef get_largest_number_less_than(number):\n    '''\n    Write a function to get the largest number less than a given number.\n    '''\n    return number - 1\ndef reverse_string"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return float(side**2)*math.sqrt(3)/4\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)*(3**.5)/4\n    \ndef volume_cube(length):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return length**3\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (side ** 2 * math.sqrt(3)) / 4\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3/12\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side*side)*math.sqrt(3)/4\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3*(3/4)\n    \ndef area_trapezium(h, a):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return h*(h + a)/2\n    \ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi*radius**2\n    \ndef area_square(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return side**2\n    \ndef area_rectangle(side_1, side_2):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return side_1*side_2\n    \ndef area_parallelogram(side_1, side_2):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return side_1*side_2\n    \ndef area_triangle(base, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return base*height/2\n    \ndef volume_cuboid(length, breadth, height):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return length*breadth*height\n    \ndef volume_cone(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return math.pi*radius**2*height/3\n    \ndef volume_pyramid(side, height):\n    '''\n    Write a function to calculate the volume of a pyramid.\n    '''\n    return side**3*height/3\n    \ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return math.pi*radius**3/3\n    \ndef volume_cube(length):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return length**3\n    \ndef volume_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return math.pi*radius**2*height\n    \ndef volume_prism(side, height):\n    '''\n    Write a function to calculate the volume of a prism.\n    '''\n    return side**2*height\n    \ndef volume_cone_cap(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return math.pi*radius**2*height/3\n    \ndef volume_ellipsoid(radius_1, radius_2, radius_3):\n    '''\n    Write a function to calculate the volume of an ellipsoid.\n    '''\n    return (4/3)*math.pi*(radius_1**3 + radius_2**3 + radius_3**3)/3\n    \ndef volume_hemisphere(radius, height):\n    '''\n    Write a function to calculate the volume of a hemisphere.\n    '''\n    return (math.pi*radius**3)/3*height\n    \ndef volume_cylinder_cap(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return math.pi*radius**2*height\n    \ndef volume_cone_cap(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return math.pi*radius**2*height/3\n    \ndef volume_sphere_cap(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4/3)*math.pi*radius**3\n    \ndef volume_cube_cap(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return side**3\n    \ndef volume_parallelipiped(length, breadth, height):\n    '''\n    Write a function to calculate the volume of a paralleipiped.\n    '''\n    return length*breadth*height\n    \ndef volume_triangularprism(side_1, side_2, height):\n    '''\n    Write a function to calculate the volume of a triangular prism.\n    '''\n    return height*(side_1 + side_2)/2\n    \ndef volume_trapizium(side_1, side_2, height):\n    '''\n    Write a function to calculate the volume of a trapezium.\n    '''\n    return height*(side_1 + side_2)/2\n    \ndef volume_cone(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return math.pi*radius**2*height/3\n    \ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi*radius**2\n    \ndef area_triangle(base, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return base*height/2\n    \ndef area_rectangle(side_1, side_2):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return side_1*side_2\n    \ndef area_trapezium(side_1, side_2, height):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return height*(side_1 + side_2)/2\n    \ndef area_parallelogram(side_1, side_2):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return side_1*side_2\n    \ndef area_square(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return side**2\n    \ndef area_triangle(base, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return base*height/2\n    \ndef volume_triangle(base, height):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    return base*height/2\n    \ndef area_rectangle(side_1, side_2):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return side_1*side_2\n    \ndef area_trapizium(side_1, side_2, height):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return height*(side_1 + side_2)/2\n    \ndef area_parallelogram(side_1, side_2):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return side_1*side_2\n    \ndef area_square(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return side**2\n    \ndef area_triangle(base, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return base*height/2\n    \ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi*radius**2\n    \ndef area_rectangle(side_1, side_2):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return side_1*side_2\n    \ndef area_trapizium(side_1, side_2, height):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return height*(side_1 + side_2)/2\n    \ndef area_parallelogram(side_1, side_2):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return side_1*side_2\n    \ndef area_square(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return side**2\n    \ndef area_triangle(base, height):\n    '"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = list.copy()\n    temp = new_list[:m]\n    new_list[:m] = list[m:]\n    new_list[m:] = temp\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_size = len(list)\n    m = list_size - m\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if not list or not m:\n        return None\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    print(\"Rotate: \", list)\n    print(\"m: \", m)\n    print(\"m+n: \", m+len(list))\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = m % len(list)\n    list = list[m:] + list[:m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    print(\"rotate_right:\", list, m)\n    if len(list) == 0:\n        return []\n    #print(\"rotate_right: list:\", list, \"len(list):\", len(list), \"m:\", m)\n    m = m % len(list)\n    return list[-m:] + list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    p = list.copy()\n    n = len(list)\n    for i in range(m):\n        list.append(p[i])\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    else:\n        last_element = list.pop()\n        list.insert(0, last_element)\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    temp = list[n - 1]\n    for i in range(n - 1, 0, -1):\n        list[i] = list[i - 1]\n    list[0] = temp\n    \n    \n    "
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(i is None for i in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all(type(i) is not type(None) for i in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    result = False\n    for value in test_tup:\n        if value is None:\n            result = True\n            break\n    return result\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for tup_val in test_tup:\n        if tup_val is None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisors = []\n    for num in range(startnum,endnum+1):\n        #create list of all the possible divisors\n        divisors.append( [digit for digit in str(num)] )\n        #if the list of divisors are all empty after the above line of code then the number is not divisible by any of its digits, so move on\n        if not divisors[num]:\n            divisors.pop(num)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # startnum = 10\n    # endnum = 1000\n    list_of_numbers = list(range(startnum, endnum + 1))\n    for number in list_of_numbers:\n        if number % 2 == 0:\n            print(number)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    if endnum < startnum:\n        return []\n    else:\n        outlist = []\n        for num in range(startnum, endnum+1):\n            if is_divisible_by_digits(num):\n                outlist.append(num)\n        return outlist\n    \n    \ndef is_divisible_by_digits(num):\n    #print num\n    for i in range(1, len(str(num))+1):\n        if not(num%(10**(i-1))%(i)==0):\n            #print \"No\"\n            return False\n    #print \"Yes\"\n    return True\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n        result = []\n        for i in range(startnum, endnum + 1):\n            for digit in str(i):\n                if i % int(digit)!= 0:\n                    break\n            else:\n                result.append(i)\n        return result\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    s = []\n    for i in range(startnum,endnum):\n        x = str(i)\n        x = [int(d) for d in x]\n        for j in x:\n            if i%j!= 0:\n                break\n        else:\n            s.append(i)\n    return s\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [n for n in range(startnum, endnum + 1) if [int(x) for x in str(n)] == sorted([int(x) for x in str(n)])]\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    x = range(startnum, endnum)\n    for num in x:\n        if len(str(num))==1:\n            if num%2==0:\n                if num%5==0:\n                    if num%3==0:\n                        print(num)\n        else:\n            if num%2==0:\n                if num%5==0:\n                    if num%3==0:\n                        print(num)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than endnum\")\n    if startnum < 1 or endnum < 1:\n        raise ValueError(\"startnum and endnum must be greater than zero\")\n    if startnum == endnum:\n        raise ValueError(\"startnum and endnum must be different numbers\")\n    return [x for x in range(startnum, endnum+1) if all([x % i == 0 for i in range(1, 10)])]\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = list(range(startnum, endnum+1))\n    for num in numbers:\n        numlist = list(str(num))\n        for i in numlist:\n            if int(num) % int(i)!= 0:\n                break\n            else:\n                if i == numlist[-1]:\n                    print(num)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum + 1):\n        is_divisible = True\n        num = str(num)\n        for i in num:\n            if int(i) == 0:\n                is_divisible = False\n                break\n            if int(num) % int(i)!= 0:\n                is_divisible = False\n        if is_divisible:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area=math.pi*(r**2)*(a/360)\n    return area\ndef find_area_list(list):\n    '''\n    Write a function to calculate the area of a polygon from its vertices. The function should return None if the list has less than 3 vertices.\n    '''\n    if len(list)<3:\n        return None\n    summ=0\n    for i in range(len(list)-1):\n        summ=summ+math.dist(list[i],list[i+1])\n    summ=summ+math.dist(list[0],list[-1])\n    area=(summ/2)*(list[0][0]*list[-1][1]-list[0][1]*list[-1][0])\n    return area\ndef find_area_list_2(list):\n    '''\n    Write a function to calculate the area of a polygon from its vertices. The function should return None if the list has less than 3 vertices.\n    '''\n    if len(list)<3:\n        return None\n    summ=0\n    for i in range(len(list)-1):\n        summ=summ+math.dist(list[i],list[i+1])\n    summ=summ+math.dist(list[0],list[-1])\n    area=(summ/2)*(list[0][0]*list[-1][1]-list[0][1]*list[-1][0])\n    return area\ndef find_area_list_3(list):\n    '''\n    Write a function to calculate the area of a polygon from its vertices. The function should return None if the list has less than 3 vertices.\n    '''\n    if len(list)<3:\n        return None\n    summ=0\n    for i in range(len(list)-1):\n        summ=summ+math.dist(list[i],list[i+1])\n    summ=summ+math.dist(list[0],list[-1])\n    area=(summ/2)*(list[0][0]*list[-1][1]-list[0][1]*list[-1][0])\n    return area\ndef find_area_list_4(list):\n    '''\n    Write a function to calculate the area of a polygon from its vertices. The function should return None if the list has less than 3 vertices.\n    '''\n    if len(list)<3:\n        return None\n    summ=0\n    for i in range(len(list)-1):\n        summ=summ+math.dist(list[i],list[i+1])\n    summ=summ+math.dist(list[0],list[-1])\n    area=(summ/2)*(list[0][0]*list[-1][1]-list[0][1]*list[-1][0])\n    return area\ndef find_area_list_5(list):\n    '''\n    Write a function to calculate the area of a polygon from its vertices. The function should return None if the list has less than 3 vertices.\n    '''\n    if len(list)<3:\n        return None\n    summ=0\n    for i in range(len(list)-1):\n        summ=summ+math.dist(list[i],list[i+1])\n    summ=summ+math.dist(list[0],list[-1])\n    area=(summ/2)*(list[0][0]*list[-1][1]-list[0][1]*list[-1][0])\n    return area\ndef distance(p1,p2):\n    return math.dist(p1,p2)\ndef circumference(r):\n    return 2*math.pi*r\ndef side_length_given_angle(r,a):\n    '''\n    Write a function to calculate the length of a side of a regular polygon given the radius and angle. The function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return 2*math.pi*r*(math.sin(math.radians(a/2)))/a\ndef side_length_given_angle_2(r,a):\n    '''\n    Write a function to calculate the length of a side of a regular polygon given the radius and angle. The function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return 2*math.pi*r*(math.sin(math.radians(a/2)))/a\ndef side_length_given_angle_3(r,a):\n    '''\n    Write a function to calculate the length of a side of a regular polygon given the radius and angle. The function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return 2*math.pi*r*(math.sin(math.radians(a/2)))/a\ndef side_length_given_angle_4(r,a):\n    '''\n    Write a function to calculate the length of a side of a regular polygon given the radius and angle. The function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return 2*math.pi*r*(math.sin(math.radians(a/2)))/a\ndef side_length_given_angle_5(r,a):\n    '''\n    Write a function to calculate the length of a side of a regular polygon given the radius and angle. The function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return 2*math.pi*r*(math.sin(math.radians(a/2)))/a\ndef polygon_circumference(n,r):\n    return n*(2*math.pi*r)\ndef polygon_circumference_2(n,r):\n    return n*(2*math.pi*r)\ndef polygon_circumference_3(n,r):\n    return n*(2*math.pi*r)\ndef polygon_circumference_4(n,r):\n    return n*(2*math.pi*r)\ndef polygon_circumference_5(n,r):\n    return n*(2*math.pi*r)\ndef polygon_area(n,r):\n    return n*(r**2)*(math.sin(math.radians(360/n)))\ndef polygon_area_2(n,r):\n    return n*(r**2)*(math.sin(math.radians(360/n)))\ndef polygon_area_3(n,r):\n    return n*(r**2)*(math.sin(math.radians(360/n)))\ndef polygon_area_4(n,r):\n    return n*(r**2)*(math.sin(math.radians(360/n)))\ndef polygon_area_5(n,r):\n    return n*(r**2)*(math.sin(math.radians(360/n)))\ndef cylinder_volume(r,h):\n    return math.pi*(r**2)*h\ndef cylinder_volume_2(r,h):\n    return math.pi*(r**2)*h\ndef cylinder_volume_3(r,h):\n    return math.pi*(r**2)*h\ndef cylinder_volume_4(r,h):\n    return math.pi*(r**2)*h\ndef cylinder_volume_5(r,h):\n    return math.pi*(r**2)*h\ndef cylinder_surface_area(r,h):\n    return 2*math.pi*(r**2)+2*math.pi*r*h\ndef cylinder_surface_area_2(r,h):\n    return 2*math.pi*(r**2)+2*math.pi*r*h\ndef cylinder_surface_area_3(r,h):\n    return 2*math.pi*(r**2)+2*math.pi*r*h\ndef cylinder_surface_area"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        area = (r**2)*(a/360)*(math.pi)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (r**2)*(a/360)*math.pi\ndef list_of_divisors(n):\n    '''\n    Write a function to return a list of divisors of n.\n    '''\n    if n==0:\n        return None\n    else:\n        divisors=[]\n        for i in range(1,int(n**0.5)+1):\n            if n%i==0:\n                divisors.append(i)\n                divisors.append(n//i)\n        divisors.sort()\n        return divisors\ndef sum_digits(n):\n    '''\n    Write a function that returns the sum of the digits of a number. For example, if the number is 346, the sum is 10 (3 + 4 + 6 = 10). \n    '''\n    if n==0:\n        return 0\n    else:\n        sum=0\n        while n>0:\n            r=n%10\n            sum+=r\n            n=n//10\n        return sum\ndef sum_of_divisors(n):\n    '''\n    Write a function that returns the sum of the divisors of n. \n    '''\n    if n==0:\n        return None\n    else:\n        sum=0\n        for i in range(1,int(n**0.5)+1):\n            if n%i==0:\n                sum+=i+n//i\n        return sum\ndef factorial(n):\n    '''\n    Write a function that returns the factorial of a number. For example, if the number is 4, the factorial is 4*3*2*1 = 24.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef divisors(n):\n    '''\n    Write a function to return a list of divisors of n. \n    '''\n    if n==0:\n        return None\n    else:\n        divisors=[]\n        for i in range(1,int(n**0.5)+1):\n            if n%i==0:\n                divisors.append(i)\n                divisors.append(n//i)\n        divisors.sort()\n        return divisors\ndef sum_of_divisors2(n):\n    '''\n    Write a function that returns the sum of the divisors of n. \n    '''\n    divisors=divisors(n)\n    if divisors==None:\n        return None\n    else:\n        return sum(divisors)\ndef sum_of_divisors3(n):\n    '''\n    Write a function that returns the sum of the divisors of n. \n    '''\n    divisors=divisors(n)\n    if divisors==None:\n        return None\n    else:\n        return sum(divisors)\ndef sum_of_divisors4(n):\n    '''\n    Write a function that returns the sum of the divisors of n. \n    '''\n    return sum([i for i in range(1,n) if n%i==0])\ndef sum_of_divisors5(n):\n    '''\n    Write a function that returns the sum of the divisors of n. \n    '''\n    return sum([i for i in range(1,n) if n%i==0])\ndef sum_of_divisors6(n):\n    '''\n    Write a function that returns the sum of the divisors of n. \n    '''\n    return sum(x for x in range(1,n) if n%x==0)\ndef sum_of_divisors7(n):\n    '''\n    Write a function that returns the sum of the divisors of n. \n    '''\n    return sum(x for x in range(1,n) if n%x==0)\ndef sum_of_divisors8(n):\n    '''\n    Write a function that returns the sum of the divisors of n. \n    '''\n    return sum(divisors(n))\ndef is_prime(n):\n    '''\n    Write a function to check if an input number is prime. \n    '''\n    return sum_of_divisors(n)==n\ndef sum_of_digits(n):\n    '''\n    Write a function that returns the sum of the digits of a number. For example, if the number is 346, the sum is 10 (3 + 4 + 6 = 10). \n    '''\n    if n==0:\n        return 0\n    else:\n        sum=0\n        while n>0:\n            r=n%10\n            sum+=r\n            n=n//10\n        return sum\ndef digit_sum(n):\n    '''\n    Write a function that returns the sum of the digits of a number. For example, if the number is 346, the sum is 10 (3 + 4 + 6 = 10). \n    '''\n    if n==0:\n        return 0\n    else:\n        sum=0\n        while n>0:\n            r=n%10\n            sum+=r\n            n=n//10\n        return sum\ndef digit_sum2(n):\n    '''\n    Write a function that returns the sum of the digits of a number. For example, if the number is 346, the sum is 10 (3 + 4 + 6 = 10). \n    '''\n    return sum(map(int,str(n)))\ndef digit_sum3(n):\n    '''\n    Write a function that returns the sum of the digits of a number. For example, if the number is 346, the sum is 10 (3 + 4 + 6 = 10). \n    '''\n    return sum(map(int,str(n)))\ndef digit_sum4(n):\n    '''\n    Write a function that returns the sum of the digits of a number. For example, if the number is 346, the sum is 10 (3 + 4 + 6 = 10). \n    '''\n    return sum(map(int,str(n)))\ndef digit_sum5(n):\n    '''\n    Write a function that returns the sum of the digits of a number. For example, if the number is 346, the sum is 10 (3 + 4 + 6 = 10). \n    '''\n    return sum(int(x) for x in str(n))\ndef digit_sum6(n):\n    '''\n    Write a function that returns the sum of the digits of a number. For example, if the number is 346, the sum is 10 (3 + 4 + 6 = 10). \n    '''\n    return sum(map(int,str(n)))\ndef digit_sum7(n):\n    '''\n    Write a function that returns the sum of the digits of a number. For example, if the number is 346, the sum is 10 (3 + 4 + 6 = 10). \n    '''\n    return sum(int(x) for x in str(n))\ndef digit_sum8(n):\n    '''\n    Write a function that returns the sum of the digits of a number. For example, if the number is 346, the sum is 10 (3 + 4 + 6 = 10). \n    '''\n    return sum(int(x) for x in str(n))\ndef digit_sum9(n):\n    '''\n    Write a function that returns the sum of the digits of a number. For example, if the number is 346, the sum is 10 (3 + 4 + 6 = 10). \n    '''\n    return sum(map(int,str(n)))\ndef list_of_prime_factors(n):\n    '''\n    Write a function that returns a list of prime factors of n.\n    '''\n    prime_factors=[]\n    for i in range(2,int(n**0.5)+1):\n        while n%i==0:\n            prime_factors.append(i)\n            n//=i\n    if n>1:\n        prime_factors.append(n)\n    return prime_factors\ndef list_of_prime_factors2(n):\n    '''\n    Write a function that returns a list of prime factors of n.\n    '''\n    prime_factors=[]\n    for i in range(2,in"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = (r**2)*(math.sin((a/360)*2*math.pi))\n    return area\nprint(sector_area(3,360))\nprint(sector_area(3,370))\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None if a > 360 else (r**2)*math.sin(math.radians(a))*0.5"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<360:\n        area=math.pi*r**2*(a/360)\n        return round(area,2)\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>=360:\n        return None\n    else:\n        return r**2*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a<=360:\n        area=math.pi*r*r\n        return area\n    else:\n        return None\n    \na=sector_area(1,180)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<360:\n        return (math.pi*(r**2))*(a/360)\n    else:\n        return None\nprint(sector_area(5,360))\nprint(sector_area(5,450))\nprint(sector_area(5,40))\nprint(sector_area(1,330))\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    return (r**2)*math.radians(a)/360\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z)\n    L = [[[None for i in range(o+1)] for j in range(n+1)] for k in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0 : \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    \n    return L[m][n][o] \n    \ndef lcs_of_four(X, Y, Z, M): \n    '''\n    Write a function to find the longest common subsequence for the given four string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-four-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z)\n    p = len(M)\n    L = [[[None for i in range(p+1)] for j in range(n+1)] for k in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                for l in range(p+1): \n                    if i == 0 or j == 0 or k == 0 or l == 0 : \n                        L[i][j][k][l] = 0\n                    elif X[i-1] == Y[j-1] == Z[k-1] == M[l-1]: \n                        L[i][j][k][l] = L[i-1][j-1][k-1][l-1] + 1\n                    else: \n                        L[i][j][k][l] = max(L[i-1][j][k][l], L[i][j-1][k][l], L[i][j][k-1][l], L[i][j][k][l-1], L[i-1][j][k][l], L[i][j-1][k][l], L[i][j][k-1][l], L[i][j][k][l-1]) \n    \n    return L[m][n][o][p] \n    \ndef lcs_of_five(X, Y, Z, M, N): \n    '''\n    Write a function to find the longest common subsequence for the given five string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-five-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z)\n    p = len(M)\n    q = len(N)\n    L = [[[None for i in range(q+1)] for j in range(n+1)] for k in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                for l in range(p+1): \n                    for r in range(q+1): \n                        if i == 0 or j == 0 or k == 0 or l == 0 or r == 0 : \n                            L[i][j][k][l][r] = 0\n                        elif X[i-1] == Y[j-1] == Z[k-1] == M[l-1] == N[r-1]: \n                            L[i][j][k][l][r] = L[i-1][j-1][k-1][l-1][r-1] + 1\n                        else: \n                            L[i][j][k][l][r] = max(L[i-1][j][k][l][r], L[i][j-1][k][l][r], L[i][j][k-1][l][r], L[i][j][k][l-1][r], L[i][j][k][r-1][l], L[i][j-1][k][l][r], L[i-1][j][k][l][r], L[i][j-1][k][l][r], L[i][j][k-1][l][r], L[i][j][k][l-1][r], L[i][j][k][r-1][l], L[i-1][j][k][l][r], L[i][j-1][k][l][r], L[i][j][k-1][l][r], L[i][j][k][l-1][r], L[i-1][j][k][l][r], L[i][j-1][k][l][r], L[i][j][k-1][l][r], L[i][j][k][l-1][r], L[i][j][k][r-1][l]) \n    \n    return L[m][n][o][p][q] \n    \ndef lcs_of_six(X, Y, Z, M, N, O): \n    '''\n    Write a function to find the longest common subsequence for the given six string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-six-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z)\n    p = len(M)\n    q = len(N)\n    r = len(O)\n    L = [[[None for i in range(r+1)] for j in range(n+1)] for k in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                for l in range(p+1): \n                    for m in range(q+1): \n                        for n in range(r+1): \n                            if i == 0 or j == 0 or k == 0 or l == 0 or m == 0 or n == 0 : \n                                L[i][j][k][l][m][n] = 0\n                            elif X[i-1] == Y[j-1] == Z[k-1] == M[l-1] == N[m-1] == O[n-1]: \n                                L[i][j][k][l][m][n] = L[i-1][j-1][k-1][l-1][m-1][n-1] + 1\n                            else: \n                                L[i][j][k][l][m][n] = max(L[i-1][j][k][l][m][n], L[i][j-1][k][l][m][n], L[i][j][k-1][l][m][n], L[i][j][k][l-1][m][n], L[i][j][k][m-1][l][n], L[i][j][k][m][l-1][n], L[i][j][k][m][n-1][l], L[i][j][k][m][n-1][l], L[i][j][k][m][n-1][l], L[i][j][k][m][n-1][l], L[i][j][k][m][n-1][l], L[i][j][k][m][n-1][l], L[i][j][k][m][n-1][l], L[i][j][k][m][n-1][l], L[i][j][k][m][n-1][l], L[i][j][k][m][n-1][l]) \n    \n    return L[m][n][o][p]"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the first string \n    m = len(X) \n    # find the length of the second string \n    n = len(Y) \n    # find the length of the third string \n    l = len(Z) \n    \n    # create a table to store the sub result \n    L = [[[None]*(l + 1) for i in range(n + 1)] for j in range(m + 1)] \n    \n    # initialize the table \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(l + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1]+1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    # L[m][n][l] contains the length of LCS of three strings \n    # can also be obtained from backtracking \n    return L[m][n][l] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z)\n    L = [[[0 for k in range(l+1)] for j in range(n+1)] for i in range(m+1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Initialize the matrix \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[0 for k in range(o + 1)] for j in range(n + 1)] for i in range(m + 1)] \n    # L[i][j][k] contains length of LCS of X[0..i-1], Y[0..j-1] \n    # and Z[0..k-1] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], \n                            L[i][j][k - 1]) \n    # Following steps build L[m+1][n+1] in bottom up fashion \n    # L[m+1][n+1] contains length of LCS for X[0..n-1], Y[0..m-1] \n    #print(L)\n    print_lcs(X, Y, Z, L) \n    return L[m][n][o] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    # Create a table to store results of subproblems \n    L = [[None]*(l+1) for i in range(m+1)] \n    \n    for i in range(m+1): \n        for j in range(l+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] and X[i-1] == Z[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    \n    return L[m][l]\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    result = 0\n    if m == 0 or n == 0 or o == 0:\n        return result\n    a = [0] * (n+1)\n    b = [0] * (m+1)\n    c = [0] * (o+1)\n    # print(a)\n    # print(b)\n    # print(c)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    def is_capital(word):\n        return word.isupper()\n    result = re.findall(r'(?=\\S*[A-Z]\\S*)[A-Z](?=\\S*)', str1)\n    return \" \".join(result)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', r' ', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    def space_func(str1):\n        str1 = str1.split()\n        str2 = ''\n        for i in str1:\n            if len(i) > 0 and i[0].isupper():\n                str2 += i[0] +'' + i[1:] +''\n            else:\n                str2 += i +''\n        return str2[:-1]\n    return space_func(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r'(?<=\\w)([A-Z])', r' \\1', str1)\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    output_str = ''\n    for i in range(0, len(str1)):\n        if re.search('[A-Z]', str1[i]):\n            if i == 0:\n                output_str = str1[i]\n            elif i > 0:\n                if re.search('[A-Z]', str1[i - 1]):\n                    output_str = output_str +'' + str1[i]\n                else:\n                    output_str = output_str + str1[i]\n    return output_str\nprint(capital_words_spaces('This is a test of the new capital_words_spaces function.'))\nprint(capital_words_spaces('Test this function!'))\nprint(capital_words_spaces('Once upon a time, there was a brave princess who...'))\nprint(capital_words_spaces('It was a queer, sultry summer, the summer they electrocuted the Rosenbergs and I didn\\'t know what I was doing in New York...'))\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    capitals = re.findall('[A-Z]', str1)\n    capitals = list(dict.fromkeys(capitals))\n    print(capitals)\n    for letter in capitals:\n        str1 = re.sub(letter + ':', letter + ': ', str1)\n    print(str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])\\w(?=[A-Z])', r' ', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    '''\n    You can assume that there will never be more than one space between words.\n    '''\n    str2 = \"\"\n    for word in str1.split():\n        str2 += word[0].upper() + word[1:].lower() + \" \"\n    return str2[:-1]\ndef find_longest_word(words):\n    '''\n    Write a function to find the length of the longest word in a list of words.\n    '''\n    '''\n    You can assume there will always be at least one word in the list of words.\n    '''\n    words.sort()\n    return words[-1]\ndef generate_all_combinations(li):\n    '''\n    Write a function to return a list of all possible combinations of 2 items from a given list.\n    '''\n    '''\n    You can assume that the given list will always contain at least 2 items.\n    '''\n    pass\ndef compute_product(a, b):\n    '''\n    Write a function to compute the product of two integers.\n    '''\n    '''\n    You can assume that the given inputs are integers.\n    '''\n    '''\n    Return the product of the two inputs.\n    '''\n    pass\ndef replace_vowels(str1):\n    '''\n    Write a function to replace all vowels in a given string.\n    '''\n    '''\n    You can assume that the given string will only contain lowercase letters.\n    '''\n    '''\n    Return the string with all vowels replaced.\n    '''\n    pass\ndef missing_vowels(str1):\n    '''\n    Write a function to return a list of all the missing vowels in a given string.\n    '''\n    '''\n    You can assume that the given string will only contain lowercase letters.\n    '''\n    '''\n    Return a list of the missing vowels in the string.\n    '''\n    pass\ndef duplicate_count(li):\n    '''\n    Write a function that counts how many duplicate values there are in a given list.\n    '''\n    '''\n    You can assume that the given list will not contain any duplicate values.\n    '''\n    '''\n    Return the number of duplicate values in the given list.\n    '''\n    pass\ndef group_equal(li):\n    '''\n    Write a function to group the even and odd numbers.\n    '''\n    '''\n    You can assume that there will only be one even and one odd number in the given list.\n    '''\n    '''\n    Return a list with the even and odd numbers from the given list.\n    '''\n    pass\ndef sum_of_positive_even(li):\n    '''\n    Write a function to return the sum of all positive even numbers in a given list.\n    '''\n    '''\n    You can assume that there will always be at least one positive even number in the list of numbers.\n    '''\n    '''\n    Return the sum of all positive even numbers in the given list.\n    '''\n    pass\ndef get_indexes_of_item(li, x):\n    '''\n    Write a function to return the indexes of the given item in a list.\n    '''\n    '''\n    You can assume that the given list will always contain the given item.\n    '''\n    '''\n    Return a list of all the indexes of the item in the given list.\n    '''\n    pass\ndef flip_dict(dict1):\n    '''\n    Write a function to return a dictionary with the values as keys and the keys as values.\n    '''\n    '''\n    You can assume that the given dictionary will always have at least one key-value pair.\n    '''\n    '''\n    Return a dictionary with the values as keys and the keys as values.\n    '''\n    pass\ndef sorted_list(li):\n    '''\n    Write a function to return a list of all the duplicate values in a given list.\n    '''\n    '''\n    You can assume that the given list will always contain at least one duplicate value.\n    '''\n    '''\n    Return a list of all the duplicate values in the given list.\n    '''\n    pass\ndef list_from_string(str1):\n    '''\n    Write a function to return a list of all the words in a given string.\n    '''\n    '''\n    You can assume that the given string will always contain one or more words.\n    '''\n    '''\n    Return a list of all the words in the given string.\n    '''\n    pass\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    '''\n    You can assume that there will never be a space at the beginning or the end of the string.\n    '''\n    '''\n    Return a string without spaces in it.\n    '''\n    pass\ndef is_valid_email(str1):\n    '''\n    Write a function to return a boolean value depending on whether the given string is a valid email.\n    '''\n    '''\n    You can assume that the given string will always be a valid email.\n    '''\n    '''\n    Return True if the given string is a valid email and False otherwise.\n    '''\n    pass\ndef is_valid_phone(str1):\n    '''\n    Write a function to return a boolean value depending on whether the given string is a valid phone number.\n    '''\n    '''\n    You can assume that the given string will always be a valid phone number.\n    '''\n    '''\n    Return True if the given string is a valid phone number and False otherwise.\n    '''\n    pass\ndef longest_word(words):\n    '''\n    Write a function to return the longest word in a list of words.\n    '''\n    '''\n    You can assume that there will always be at least one word in the list of words.\n    '''\n    '''\n    Return the longest word in the given list.\n    '''\n    pass\ndef find_unique_char(str1):\n    '''\n    Write a function to return a list of all unique characters in a given string.\n    '''\n    '''\n    You can assume that the given string will always contain at least one character.\n    '''\n    '''\n    Return a list of all unique characters in the given string.\n    '''\n    pass\ndef find_longest_word_in_list(words):\n    '''\n    Write a function to return the longest word in a list of words.\n    '''\n    '''\n    You can assume that there will always be at least one word in the given list.\n    '''\n    '''\n    Return the longest word in the given list.\n    '''\n    pass\ndef contains_all_unique_chars(str1):\n    '''\n    Write a function to check if a string contains only unique characters.\n    '''\n    '''\n    You can assume that the given string will always contain at least one character.\n    '''\n    '''\n    Return True if the given string contains only unique characters and False otherwise.\n    '''\n    pass\ndef filter_long_words(words, n):\n    '''\n    Write a function to return a list of all the words that are longer than n in a given list of words.\n    '''\n    '''\n    You can assume that there will always be at least one word in the given list.\n    '''\n    '''\n    Return a list of all the words that are longer than n in the given list.\n    '''\n    pass\ndef first_and_last(str1):\n    '''\n    Write a function to return the first and last characters of a given string.\n    '''\n    '''\n    You can assume that there will always be at least one character in the given string.\n    '''\n    '''\n    Return a tuple of the first and last characters in the given string.\n    '''\n    pass\ndef find_first_and_last_occurrences(str1, x):\n    '''\n    Write a function to return the first and last occurrences of a given character in a given string.\n    '''\n    '''\n    You can assume that the given character will always be in the given string.\n    '''\n    '''\n    Return a tuple of the first and last occurrences of the given character in the given string.\n    '''\n    pass\ndef count_vowels(str1):\n    '''\n    Write "
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([A-Z])',r' \\1',str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # str1 = 'this is a test'\n    # print(str1)\n    # print(capital_words_spaces(str1))\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for string in nums_str:\n        try:\n            nums.append(int(string))\n        except:\n            nums.append(string)\n    print(sorted(nums, key=int))\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        nums.append(int(num))\n    nums.sort()\n    nums_str = []\n    for num in nums:\n        nums_str.append(str(num))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: [int(s) if s.isdigit() else s for s in re.split(r'(\\d+)', x)])\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    nums_str.sort(key = lambda x: [int(i) if i.isdigit() else i for i in re.split('(\\d+)', x)])\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = sorted(nums_str, key=lambda x: int(x))\n    print(nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = nums_str.split()\n    nums_str.sort(key = float)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: list(map(int, x.split('.'))))\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for string in nums_str:\n        try:\n            nums.append(float(string))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # split each string into numeric and string\n    # store them in a new list\n    new_list = []\n    for nums in nums_str:\n        num_list = nums.split(\" \")\n        new_list.append(num_list)\n    # sort the list of lists based on the first element in each sublist\n    new_list.sort(key=lambda x: x[0])\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = nums_str.split(' ')\n    nums_list.sort(key=int)\n    return \" \".join(nums_list)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return None\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if type(test_tup) is not tuple:\n        raise ValueError('Enter a tuple')\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Your code here\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    #your code here\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    length = len(arr)\n    if i >= length:\n        return True\n    else:\n        left = 2*i + 1\n        right = 2*i + 2\n        if left < length:\n            if arr[left] < arr[i]:\n                return False\n            else:\n                return check_min_heap_helper(arr, left)\n        if right < length:\n            if arr[right] < arr[i]:\n                return False\n            else:\n                return check_min_heap_helper(arr, right)\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Is the tree a binary search tree?\n    if (i >= len(arr)):\n        return True\n    # check if this element is greater than its children\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n    if (left_child < len(arr) and arr[left_child] < arr[i]):\n        return False\n    if (right_child < len(arr) and arr[right_child] < arr[i]):\n        return False\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] < arr[(i-1)//2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if i * 2 + 1 < len(arr) and arr[i] > arr[2 * i + 1]:\n        return False\n    if i * 2 + 2 < len(arr) and arr[i] > arr[2 * i + 2]:\n        return False\n    return check_min_heap_helper(arr, i * 2 + 1) and check_min_heap_helper(arr, i * 2 + 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    length = len(arr) - 1\n    if left <= length and arr[i] < arr[left]:\n        return False\n    if right <= length and arr[i] < arr[right]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i < len(arr)):\n        if (i * 2) + 1 < len(arr):\n            if arr[i] < arr[(i * 2) + 1]:\n                return False\n        if (i * 2) + 2 < len(arr):\n            if arr[i] < arr[(i * 2) + 2]:\n                return False\n        return check_min_heap_helper(arr, i * 2) and check_min_heap_helper(arr, i * 2 + 1)\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or i < 0:\n        return False\n    if i < int(len(arr)/2):\n        return True\n    if arr[i] >= arr[2*i] and arr[i] >= arr[2*i+1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n    l = i * 2 + 1\n    r = i * 2 + 2\n    if l < n and arr[i] > arr[l]:\n        return False\n    if r < n and arr[i] > arr[r]:\n        return False\n    return check_min_heap_helper(arr, l) and check_min_heap_helper(arr, r)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n    if arr[i] >= arr[2*i + 1] and arr[i] >= arr[2*i + 2]:\n        return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr)//2:\n        return True\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    assert isinstance(n, int), \"Input must be an integer.\"\n    assert n > 0, \"Input must be greater than 0.\"\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 1:\n        return 'Not a valid number'\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    jacobsthal_nums = [1, 1]\n    last_jacobsthal_num = 2\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1: return 0\n    elif n == 2: return 1\n    else:\n        res = 0\n        i = 2\n        while i <= n:\n            res = (res * 2) + (2 ** (i - 1))\n            i += 1\n        return res\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = 0\n    b = 1\n    c = 1\n    for i in range(n-1):\n        c = a+b\n        a = b\n        b = c\n    return c\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return (n * (n+1))//2\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==0 or n==1:\n        return 1\n    else:\n        return jacobsthal_num(n-1)+jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return (jacobsthal_num(n - 1) + jacobsthal_num(n - 2))\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return int(((((((1+sqrt(5))/2)**n)-(((-1+sqrt(5))/2)**n))/sqrt(5)))/2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j = 0\n    for i in range(2, n+1):\n        j = i**2 - i + j\n    return j\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialize minHeap\n    heapq.heapify(test_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_tuple = tuple(test_list)\n    result = tuple(heapq.nsmallest(K, test_tuple))\n    return result\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    min_k = []\n    for item in test_list:\n        if len(item) >= K:\n            min_list.append(item)\n    min_list = sorted(min_list, key=lambda x: x[1], reverse=True)\n    min_k = [list(x)[0:K] for x in min_list]\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    list_length = len(test_list)\n    min_heap = []\n    for i in range(K):\n        heapq.heappush(min_heap, (test_list[i][0], i, 0))\n    # print(min_heap)\n    for i in range(K, list_length):\n        # print(heapq.heappop(min_heap))\n        if test_list[i][0] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (test_list[i][0], i, 0))\n        else:\n            break\n    # print(min_heap)\n    return min_heap[0][0], min_heap[0][1], min_heap[0][2]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    my_min = min(test_list, key=lambda tup: tup[1])\n    my_min_tuple_list = list(filter(lambda tup: tup[1] == my_min[1], test_list))\n    return sorted(my_min_tuple_list, key=lambda tup: tup[0])[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp_list = list()\n    minimum = 0\n    for index in range(0, K):\n        for sub_index in range(0, len(test_list)):\n            if minimum < test_list[sub_index][1]:\n                minimum = test_list[sub_index][1]\n                minimum_index = test_list[sub_index][0]\n                temp_list.append(minimum)\n                temp_list.append(minimum_index)\n    return temp_list\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # import pandas as pd\n    # # test_list = pd.DataFrame(test_list, columns=['value', 'weight'])\n    # test_list = sorted(test_list, key = lambda x:x[1])\n    # print(test_list)\n    # test_list = sorted(test_list, key = lambda x:x[0])\n    # print(test_list)\n    # temp = test_list[0][0]\n    # print(temp)\n    # i = 0\n    # j = 0\n    # res = []\n    # while j < len(test_list):\n    #     if temp == test_list[j][0]:\n    #         print(j)\n    #         print(test_list[j][0])\n    #         res.append(test_list[j])\n    #         temp = test_list[j][0]\n    #         j+=1\n    #     else:\n    #         temp = test_list[i][0]\n    #         res.append(test_list[i])\n    #         i+=1\n    #         j+=1\n    # return res[K-1]\n    # print(min_k(test_list, K))\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a list for storing kth smallest element\n    k_th_smallest_element_list = []\n    # variable to store the smallest element\n    k_th_smallest_element = None\n    # variable to store the index of smallest element\n    index_of_smallest_element = None\n    # variable to store the index of kth smallest element\n    index_of_k_smallest_element = 0\n    # variable to store the length of the test_list\n    len_of_test_list = len(test_list)\n    \n    # check if the length of the test list is less than or equal to k.\n    if (K <= len_of_test_list):\n        # sort the test list\n        test_list.sort()\n        # iterate over the test list and append the kth smallest element in the k_th_smallest_element_list\n        for i in range(len_of_test_list):\n            if i >= K-1:\n                k_th_smallest_element_list.append(test_list[i])\n        # return kth smallest element list\n        return k_th_smallest_element_list\n    else:\n        # return list of empty list\n        return None\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # First, we have to arrange the tuples in the list in a way that\n    # all records having same minimum value of attribute at same index\n    # come together. For example if all tuples are ( 1, 2, 3, 4 ),\n    # we will have to arrange them in a way that all tuples having\n    # same 2 come together, then all tuples having same 3 come together\n    # and so on.\n    # Below is the implementation of the above approach.\n    \n    # Declare a list'res' for storing all the tuples\n    res = []\n    # Declare a list'min_list' for storing the min value of the attributes\n    # of the tuples in the list\n    min_list = []\n    # Traverse the list 'test_list'\n    for i in range(len(test_list)):\n        # For each tuple in list 'test_list',\n        # check if the attribute value of the tuple\n        # is less than min value of the list'min_list'\n        if test_list[i] < min_list:\n            # If true, append the tuple to the list'res'\n            res.append(test_list[i])\n            # Update the min value of the attribute of the tuple\n            # to the attribute value of the tuple\n            min_list.append(test_list[i])\n            # Update the index value of the list'min_list'\n            # to the index value of the list 'test_list'\n            min_list.append(i)\n        # If the attribute value of the tuple is greater\n        # than the value of the min value of the list,\n        # then remove all the elements of the list'min_list'\n        # till the index value of the current tuple\n        while min_list and min_list[0] == test_list[i]:\n            del min_list[0]\n            \n    # Finally, all the tuples having same min value of the attributes\n    # will be stored in the list'res'\n    print(res[:K])\n    \n    return res[:K]\n    "
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a new list with the first K elements from the original list\n    # new_list = test_list[:K]\n    # new_list = test_list[:K]\n    # new_list = test_list[:K]\n    # new_list = test_list[:K]\n    # new_list = test_list[:K]\n    # new_list = test_list[:K]\n    new_list = test_list[:K]\n    # iterate over the list and append the remaining elements\n    for i in range(K, len(test_list)):\n        # print('test list is: ')\n        # print(test_list)\n        # print('new list is: ')\n        # print(new_list)\n        # print('i is: ')\n        # print(i)\n        # print('current element is: ')\n        # print(test_list[i])\n        # print('minimum element is: ')\n        # print(min(new_list))\n        new_list.append(test_list[i])\n        # print('new list is now: ')\n        # print(new_list)\n        # print('minimum element is: ')\n        # print(min(new_list))\n        # append the minimum element to new list\n        new_list.append(min(new_list))\n        # print('new list is now: ')\n        # print(new_list)\n    return new_list[-1]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    pass\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    a = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] and l2[j] == l3[k] and l1[i]!= l3[k]:\n                    a.append(l1[i])\n    return a\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in range(len(l1)) if l1[i] in l2 and l2[i] in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    output_list = []\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l1[i] == l2[i] and l1[i] == l3[i]:\n            res.append(l1[i])\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    l = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            res.append(l1[i])\n            l.append(i)\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    pass #Remove pass and write your code here\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    r = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            r.append(l1[i])\n    return r\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [item for item in l1 if item in l2 and item in l3]\n    # l1 = [1, 2, 3, 4, 5]\n    # l2 = [4, 6, 7, 8]\n    # l3 = [9, 4, 5, 6, 7]\n    # print(extract_index_list(l1, l2, l3))\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    first_smallest_num = min(numbers)\n    numbers.remove(first_smallest_num)\n    second_smallest_num = min(numbers)\n    return second_smallest_num\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    first_min = second_min = float('inf')\n    for number in numbers:\n        if number <= first_min:\n            second_min = first_min\n            first_min = number\n        elif number < second_min:\n            second_min = number\n    return second_min\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    l1 = numbers[0]\n    l2 = numbers[1]\n    for i in range(2, len(numbers)):\n        if(numbers[i] < l1):\n            l2 = l1\n            l1 = numbers[i]\n        elif(numbers[i] < l2):\n            l2 = numbers[i]\n    return l2\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #sort the list, then return the second item\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n    # \ud83d\udea8 Don't change the code below \ud83d\udc47\n    numbers_list = sorted(list(numbers))\n    #print(numbers_list)\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min1 = min(numbers)\n    numbers.remove(min1)\n    min2 = min(numbers)\n    return min2\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min = numbers[0]\n    second_min = numbers[0]\n    for n in numbers:\n        if n < min:\n            min = n\n    for n in numbers:\n        if n!= min:\n            if n < second_min:\n                second_min = n\n    return second_min\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'ab+'\n    return re.match(pattern, text)\n    \ndef text_match_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'ab+'\n    return re.match(pattern, text)\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    patt = r'(a)+b*'\n    if re.search(patt, text):\n        return \"Match Found\"\n    else:\n        return \"Match Not Found\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'a(\\W+)b+', text)\n    if match:\n        return match.group(1)\n    else:\n        return 'No match!'\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(\"a.+b\",text)\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"a+b+\")\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.match(r\"a\\b*\", text)\n    if result:\n        return result.group()\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #return re.search(r'a.+b',text)\n    result = re.search(r'a.+b',text)\n    if result:\n        return True\n    return False\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # return bool(re.match(r'^[abc]*a[abc]*b[abc]*$', text))\n    return bool(re.match(r'^[a-zA-Z]*a[a-zA-Z]*b[a-zA-Z]*$', text))\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"ab+\")\n    #pattern = r'ab+'\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r\"a.+?b\", text)\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if (test_list[i][::-1] == test_list[j][::-1]):\n                count += 1\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in test_list:\n        for j in test_list:\n            if i[::-1] == j and i!= j:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    def reverse(s):\n        return s[::-1]\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pass\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    length = len(test_list)\n    count = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    output_dict = {}\n    for each in test_list:\n        if each[::-1] in output_dict:\n            output_dict[each[::-1]] = output_dict[each[::-1]] + 1\n        else:\n            output_dict[each[::-1]] = 1\n    return output_dict\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    rev_dict = {}\n    for item in test_list:\n        rev_dict[item[::-1]] = item\n    return sum(1 for x in test_list if x[::-1] in rev_dict)\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    for val in test_list:\n        if val[::-1] in dict:\n            dict[val] += 1\n        else:\n            dict[val] = 1\n    return dict\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    import collections\n    def string_reverse(s):\n        return s[::-1]\n    res = collections.Counter(string_reverse(s) for s in test_list)\n    return res[None]\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    d = {}\n    for i in test_list:\n        if i[::-1] in d:\n            d[i[::-1]] += 1\n        else:\n            d[i[::-1]] = 1\n    # print(d)\n    return sum(list(d.values()))\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #a dictionary to store the results\n    d = dict()\n    #iterate through the list1\n    for item in list1:\n        #if the item is not a list, then increment the counter by 1\n        if type(item) is not list:\n            d[item] = 1\n        #else if the item is a list, then iterate through the list\n        else:\n            for i in item:\n                #increment the counter by 1\n                d[i] = d.get(i, 0) + 1\n    #return the dictionary\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    uniq_list = []\n    for i in list1:\n        uniq_list.append(tuple(i))\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = [list(t) for t in list1]\n    a = list(set([tuple(t) for t in list1]))\n    b = [list(t) for t in a]\n    c = [tuple(t) for t in b]\n    d = {}\n    for t in c:\n        d[t] = list1.count(t)\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dictionary = dict()\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist not in dictionary:\n            dictionary[tuple_sublist] = 1\n        else:\n            dictionary[tuple_sublist] += 1\n    return dictionary\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    tuple_list = list(tuple(x) for x in list1)\n    count_list = dict(zip(tuple_list, [0]*len(tuple_list)))\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # your code here\n    dict1 = {}\n    for i in list1:\n        if tuple(i) in dict1.keys():\n            dict1[tuple(i)] += 1\n        else:\n            dict1[tuple(i)] = 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for list1 in list1:\n        tuple1 = tuple(list1)\n        if tuple1 in result:\n            result[tuple1] += 1\n        else:\n            result[tuple1] = 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = list(map(tuple, list1))\n    # return {list1.count(i): i for i in list1}\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = []\n    for i in list1:\n        if i not in unique_list:\n            unique_list.append(i)\n    dict_list = dict()\n    for i in unique_list:\n        dict_list[i] = list1.count(i)\n    return dict_list\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    l = len(num)\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return (str(num).isnumeric() and len(str(num)) == 4)\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.isdecimal()\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        num = float(num)\n    return num.is_integer() and num.is_integer() and round(num,2) == num\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    count_decimal = 0\n    for i in num:\n        if i == '.':\n            count_decimal += 1\n    if count_decimal == 1 and num[0]!= '0' and num[-1]!= '.':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        return num == round(num, 2)\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' not in num:\n            return False\n        elif '.' in num and num.count('.') > 1:\n            return False\n        else:\n            return True\n    except ValueError:\n        return False\n    \ndef is_hexadecimal(num):\n    '''\n    Write a function to check whether a given string is a hexadecimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' not in num:\n            return False\n        elif '.' in num and num.count('.') > 1:\n            return False\n        else:\n            return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    dec = False\n    if len(num) == 3 and num[0] == '0' and num[1:] == '.':\n        dec = True\n    if len(num) == 4 and num[0] == '0' and num[1:] == '.0':\n        dec = True\n    if len(num) == 4 and num[0] == '0' and num[1] == '0' and num[2:] == '.':\n        dec = True\n    if len(num) == 5 and num[0] == '0' and num[1] == '0' and num[2:] == '.0':\n        dec = True\n    if len(num) == 5 and num[0] == '0' and num[1] == '0' and num[2] == '0' and num[3:] == '.':\n        dec = True\n    return dec\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n    except ValueError:\n        return False\n    return num == round(num, 2)\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_arr=[]\n    for num in arr:\n        if num not in unique_arr:\n            unique_arr.append(num)\n    print(unique_arr)\n    if len(unique_arr)==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    if arr[0] == arr[1]:\n        return False\n    else:\n        return True\n    \ndef unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    if arr.count(arr[0]) == len(arr):\n        print(\"List contains only one distinct element\")\n    else:\n        print(\"List contains more than one distinct element\")\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    uniq = []\n    for i in arr:\n        if i not in uniq:\n            uniq.append(i)\n        else:\n            return False\n    return len(uniq) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return True\n    temp = []\n    for i in range(0, len(arr)):\n        if arr[i] not in temp:\n            temp.append(arr[i])\n    if len(temp) == 1:\n        return True\n    return False\n    \ndef single_Number(arr):\n    '''\n    Write a python function to find single element in a list of numbers which occurs only once.\n    '''\n    if len(arr) == 0:\n        return 0\n    temp = []\n    for i in range(0, len(arr)):\n        if arr[i] not in temp:\n            temp.append(arr[i])\n    for i in range(0, len(temp)):\n        if arr.count(temp[i]) == 1:\n            return temp[i]\n    return 0\n    \ndef max_Number(arr):\n    '''\n    Write a python function to find maximum element in a list of numbers.\n    '''\n    if len(arr) == 0:\n        return -1\n    m = 0\n    for i in range(0, len(arr)):\n        if arr[i] > m:\n            m = arr[i]\n    return m\n    \ndef minimum_Number(arr):\n    '''\n    Write a python function to find minimum element in a list of numbers.\n    '''\n    if len(arr) == 0:\n        return -1\n    m = arr[0]\n    for i in range(0, len(arr)):\n        if arr[i] < m:\n            m = arr[i]\n    return m\n    \ndef min_max_Number(arr):\n    '''\n    Write a python function to find maximum and minimum element in a list of numbers.\n    '''\n    if len(arr) == 0:\n        return -1\n    m = arr[0]\n    n = arr[0]\n    for i in range(0, len(arr)):\n        if arr[i] > m:\n            m = arr[i]\n        if arr[i] < n:\n            n = arr[i]\n    return m, n\n    \ndef number_to_Words(num):\n    '''\n    Write a python function to convert a number to words.\n    '''\n    if num == 0:\n        return 'Zero'\n    one = {0:'',1:'One',2:'Two',3:'Three',4:'Four',5:'Five',6:'Six',7:'Seven',8:'Eight',9:'Nine',10:'Ten',\n        11:'Eleven',12:'Twelve',13:'Thirteen',14:'Fourteen',15:'Fifteen',16:'Sixteen',17:'Seventeen',18:'Eighteen',\n        19:'Nineteen',20:'Twenty',30:'Thirty',40:'Forty',50:'Fifty',60:'Sixty',70:'Seventy',80:'Eighty',90:'Ninety',\n        100:'Hundred',1000:'Thousand',1000000:'Million',1000000000:'Billion'}\n    \n    two = {2:'Twenty',3:'Thirty',4:'Forty',5:'Fifty',6:'Sixty',7:'Seventy',8:'Eighty',9:'Ninety'}\n    \n    three = {100:'Hundred',1000:'Thousand',1000000:'Million',1000000000:'Billion'}\n    \n    if num > 1000000000:\n        return 'Number too large'\n    if num < 20:\n        return one[num]\n    if num % 10 == 0:\n        return one[num]\n    if num < 100:\n        return one[num] +'' + one[num % 10]\n    if num >= 100:\n        if num % 100 == 0:\n            return one[num]\n        else:\n            return one[num // 100] +'' + one[100] +'' + one[num % 100]\n    \n    if num % 100 == 0:\n        return one[num // 100] +'' + one[100]\n    if num % 100 < 20:\n        return one[num // 100] +'' + one[100] +'' + one[num % 100]\n    if num % 100 < 100:\n        return one[num // 100] +'' + one[100] +'' + two[num % 100 // 10] +'' + one[num % 10]\n    \ndef convert_to_Roman(num):\n    '''\n    Write a python function to convert a number to roman number.\n    '''\n    if num == 0:\n        return 'Zero'\n    one = {1:'I',5:'V',10:'X',50:'L',100:'C',500:'D',1000:'M'}\n    \n    two = {2:'II',3:'III',4:'IV',5:'V',6:'VI',7:'VII',8:'VIII',9:'IX'}\n    \n    three = {100:'C',200:'CC',300:'CCC',400:'CD',500:'D',600:'DC',700:'DCC',800:'DCCC',900:'CM',1000:'M'}\n    \n    four = {4:'IV',9:'IX',40:'XL',90:'XC',400:'CD',900:'CM'}\n    \n    five = {5:'V',10:'X',50:'L',100:'C',500:'D',1000:'M'}\n    \n    six = {6:'VI',11:'XI',60:'LX',110:'CX',600:'DC',1100:'MC'}\n    \n    seven = {7:'VII',12:'XII',62:'LXX',112:'CXX',700:'DXX',1200:'MXX'}\n    \n    eight = {8:'VIII',13:'XIII',63:'LXXX',113:'CXXX',800:'DXXX',1300:'MXXX'}\n    \n    nine = {9:'IX',14:'XIV',64:'LXIV',114:'CXIV',900:'CM',1400:'M'}\n    \n    ten = {10:'X',40:'XL',90:'XC',400:'CD',900:'CM',4000:'MMM'}\n    \n    if num > 3999:\n        return 'Number too large'\n    if num < 1:\n        return 'Number too small'\n    if num < 4:\n        return one[num]\n    if num < 9:\n        return one[num] +'' + one[num * 10]\n    if num < 40:\n        return one[num // 10] +'' + one[num]\n    if num < 50:\n        return one[num // 10] +'' + two[num % 10]\n    if num < 90:\n        return two[num // 10] +'' + one[num]\n    if num < 100:\n        return two[num // 10] +'' + one[num % 10]\n    if num < 400:\n        return one[num // 100] +'' + one[100] +'' + one[num % 100]\n    if num < 500:\n        return one[num // 100] +'' + one[100]\n    if num < 900:\n        return one[num // 100] +'' + three[num % 100 // 10] +'' + one[num % 10]\n    if num < 1000:\n        return three[num // 100] +'' + one[100] +'' + one[num % 100]\n    \ndef convert_to_Integer(num):\n    '''\n    Write a python function to convert a roman number to integer.\n    '''\n    if num == 'Zero':\n        return 0\n    \n    one = {'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000}\n    \n    two = {'II':2,'III':3,'IV':4,'V':5,'VI':6,'VII':7,'VIII':8,'IX':9}\n    \n    three = {'C':100,'CC':200,'CCC':300,'CD':400,'D':500,'DC':600,'DCC':700,'DCCC':800,'CM':900,'M':1000}\n    \n    four = {'IV':4,'IX':9,'XL':40,'XC':90,'CD':400,'CM':900}\n    \n    five = {'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000}"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    l = list(set(arr))\n    if len(l) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # a=[]\n    # for i in arr:\n    #     if i not in a:\n    #         a.append(i)\n    #     if len(a)==2:\n    #         break\n    # if len(a)==1:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    print(list(set(arr)))\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_num = []\n    for i in arr:\n        if i not in unique_num:\n            unique_num.append(i)\n    if len(unique_num)==1:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return 30\n    elif monthnum3 in [4,6,9,11]:\n        return 31\n    elif monthnum3 == 2:\n        return 28\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 in [1,3,5,7,8,10,12]:\n        print('Month number = %i has 30 days' %(monthnum3))\n    elif monthnum3 in [4,6,9,11]:\n        print('Month number = %i has 31 days' %(monthnum3))\n    elif monthnum3 == 2:\n        print('Month number = %i has 28 or 29 days' %(monthnum3))\n    else:\n        print('Something went wrong!')\n        \n        \ncheck_monthnumber_number(int(input('Enter month number: ')))\n    \n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    try:\n        month = int(monthnum3)\n        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            print(\"\\nThere are 30 days in this month.\")\n        elif month == 2:\n            print(\"\\nThere are 29 days in this month.\")\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            print(\"\\nThere are 30 days in this month.\")\n    except ValueError:\n        print(\"\\nSorry, there are only numbers from 1 to 12.\")\n        \ndef check_daynumber_number(daynum4):\n    '''\n    Write a function to check whether the given day number is correct or not.\n    '''\n    try:\n        day = int(daynum4)\n        if day > 0 and day < 32:\n            print(\"\\nThis day is correct.\")\n        else:\n            print(\"\\nThere are only days from 1 to 31.\")\n    except ValueError:\n        print(\"\\nSorry, there are only numbers from 1 to 31.\")\n        \ndef check_monthyear_number(monthnum6):\n    '''\n    Write a function to check whether the given month number is correct or not.\n    '''\n    try:\n        month = int(monthnum6)\n        if month > 0 and month < 13:\n            print(\"\\nThis month is correct.\")\n        else:\n            print(\"\\nThere are only months from 1 to 12.\")\n    except ValueError:\n        print(\"\\nSorry, there are only numbers from 1 to 12.\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return True\n    elif monthnum3 == 2:\n        return True\n    elif monthnum3 == 3:\n        return True\n    elif monthnum3 == 4:\n        return True\n    elif monthnum3 == 5:\n        return True\n    elif monthnum3 == 6:\n        return True\n    elif monthnum3 == 7:\n        return True\n    elif monthnum3 == 8:\n        return True\n    elif monthnum3 == 9:\n        return True\n    elif monthnum3 == 10:\n        return True\n    elif monthnum3 == 11:\n        return True\n    elif monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_days = {1 : 31, 2 : 28, 3 : 31, 4 : 30, 5 : 31, 6 : 30, 7 : 31, 8 : 31, 9 : 30, 10 : 31, 11 : 30, 12 : 31}\n    #checking if month number is in given range of month numbers\n    if monthnum3 in range(1,13):\n        if month_days[monthnum3] == 30:\n            return print('Month has 30 days')\n        else:\n            return print('Month has not 30 days')\n    else:\n        return print('Please enter valid month number')\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12:\n        return \"The given month has 30 days\"\n    elif monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11:\n        return \"The given month has 30 days\"\n    else:\n        return \"The given month has 31 days\"\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        print(\"30\")\n    else:\n        print(\"28\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    elif monthnum3 == 2:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return \"30 days\"\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return \"30 days\"\n    else:\n        return \"31 days\"\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n==1:\n        return 0\n    arr.sort()\n    return min(arr[0]-arr[1],arr[n-1]-arr[n-2])\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array\n    arr.sort()\n    # initialize minimum difference as\n    # array's length\n    minimum = arr[n - 1] - arr[0]\n    for i in range(0,n - 1): \n        # find minimum of all pairs\n        # after every iteration\n        minimum = min(minimum, arr[i+1] - arr[i])\n    return minimum\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array for easier computation\n    arr = sorted(arr)\n    # initialize difference as arr[1] - arr[0]\n    diff = arr[1] - arr[0]\n    for i in range(len(arr)-1):\n        # initialize difference between current pair as arr[i+1] - arr[i]\n        cur_diff = arr[i+1] - arr[i]\n        # update difference if cur_diff is smaller than diff\n        diff = min(cur_diff, diff)\n    # return difference\n    return diff\n    \n    \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1,n):\n        if(arr[i] - arr[i-1] < min_diff):\n            min_diff = arr[i] - arr[i-1]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = abs(arr[0] - arr[1])\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if (abs(arr[i] - arr[j]) < min_diff):\n                min_diff = abs(arr[i] - arr[j])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff=arr[n-1]-arr[0]\n    for i in range(1,n):\n        if arr[i]-arr[i-1]<diff:\n            diff=arr[i]-arr[i-1]\n    print(diff)\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    arr.sort() #sort the array\n    print(arr)\n    min_diff = arr[n-1] - arr[0] #initialize min_diff with difference between last element and first element\n    print(min_diff)\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    '''\n    diff = [a[i] - a[0] for i in range(n-1)]\n    return min(diff)\n    '''\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sorted_arr = sorted(arr)\n    # min_diff = float('inf')\n    # for i in range(len(sorted_arr)-1):\n    #     diff = sorted_arr[i+1] - sorted_arr[i]\n    #     if diff < min_diff:\n    #         min_diff = diff\n    # return min_diff\n    # we can use binary search on the array arr to find the minimum difference \n    # of two elements in the array arr\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    return min(arr[i] - arr[j] for i in range(n) for j in range(n) if i < j)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num=0\n    for i in str:\n        if i.isnumeric():\n            num=num+1\n    return num\nprint(\"The number of digits in the given string is : \",number_ctr('I like 74.5'))\nprint(\"The number of digits in the given string is : \",number_ctr('I like 74.5 and '))\nprint(\"The number of digits in the given string is : \",number_ctr('I like 74.5 and and'))\nprint(\"The number of digits in the given string is : \",number_ctr('I like 74.5 and and and'))\nprint(\"The number of digits in the given string is : \",number_ctr('I like 74.5 and and and and'))\nprint(\"The number of digits in the given string is : \",number_ctr('I like 74.5 and and and and and'))\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    ctr=0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    return ctr\n    \n    \ndef leap_year(year):\n    '''\n    Write a python function to check if a given year is a leap year.\n    '''\n    \n    if year%4==0 and (year%100!=0 or year%400==0):\n        return True\n    return False\n    \n    \ndef palindrome(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    \n    return str==str[::-1]\n    \n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number_of_digits = 0\n    for i in str:\n        if i.isdigit():\n            number_of_digits += 1\n    return number_of_digits\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    cnt=0\n    i=0\n    while(cnt!=n):\n        i+=1\n        if is_polite_number(i):\n            cnt+=1\n    return i\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # if n is 1, return 2\n    if n == 1: \n        return 2\n    # if n is 2, return 3\n    elif n == 2: \n        return 3\n    # if n is 3, return 5\n    elif n == 3: \n        return 5\n    # if n is 4, return 11\n    elif n == 4: \n        return 11\n    # if n is 5, return 19\n    elif n == 5: \n        return 19\n    # if n is 6, return 29\n    elif n == 6: \n        return 29\n    # if n is 7, return 37\n    elif n == 7: \n        return 37\n    # if n is 8, return 43\n    elif n == 8: \n        return 43\n    # if n is 9, return 49\n    elif n == 9: \n        return 49\n    # if n is 10, return 53\n    elif n == 10: \n        return 53\n    # if n is 11, return 59\n    elif n == 11: \n        return 59\n    # if n is 12, return 61\n    elif n == 12: \n        return 61\n    # if n is 13, return 67\n    elif n == 13: \n        return 67\n    # if n is 14, return 71\n    elif n == 14: \n        return 71\n    # if n is 15, return 73\n    elif n == 15: \n        return 73\n    # if n is 16, return 79\n    elif n == 16: \n        return 79\n    # if n is 17, return 83\n    elif n == 17: \n        return 83\n    # if n is 18, return 89\n    elif n == 18: \n        return 89\n    # if n is 19, return 97\n    elif n == 19: \n        return 97\n    # if n is 20, return 101\n    elif n == 20: \n        return 101\n    # if n is 21, return 103\n    elif n == 21: \n        return 103\n    # if n is 22, return 107\n    elif n == 22: \n        return 107\n    # if n is 23, return 109\n    elif n == 23: \n        return 109\n    # if n is 24, return 113\n    elif n == 24: \n        return 113\n    # if n is 25, return 121\n    elif n == 25: \n        return 121\n    # if n is 26, return 127\n    elif n == 26: \n        return 127\n    # if n is 27, return 131\n    elif n == 27: \n        return 131\n    # if n is 28, return 137\n    elif n == 28: \n        return 137\n    # if n is 29, return 139\n    elif n == 29: \n        return 139\n    # if n is 30, return 149\n    elif n == 30: \n        return 149\n    # if n is 31, return 151\n    elif n == 31: \n        return 151\n    # if n is 32, return 157\n    elif n == 32: \n        return 157\n    # if n is 33, return 163\n    elif n == 33: \n        return 163\n    # if n is 34, return 167\n    elif n == 34: \n        return 167\n    # if n is 35, return 173\n    elif n == 35: \n        return 173\n    # if n is 36, return 179\n    elif n == 36: \n        return 179\n    # if n is 37, return 181\n    elif n == 37: \n        return 181\n    # if n is 38, return 191\n    elif n == 38: \n        return 191\n    # if n is 39, return 193\n    elif n == 39: \n        return 193\n    # if n is 40, return 197\n    elif n == 40: \n        return 197\n    # if n is 41, return 199\n    elif n == 41: \n        return 199\n    # if n is 42, return 211\n    elif n == 42: \n        return 211\n    # if n is 43, return 223\n    elif n == 43: \n        return 223\n    # if n is 44, return 227\n    elif n == 44: \n        return 227\n    # if n is 45, return 229\n    elif n == 45: \n        return 229\n    # if n is 46, return 233\n    elif n == 46: \n        return 233\n    # if n is 47, return 239\n    elif n == 47: \n        return 239\n    # if n is 48, return 241\n    elif n == 48: \n        return 241\n    # if n is 49, return 251\n    elif n == 49: \n        return 251\n    # if n is 50, return 257\n    elif n == 50: \n        return 257\n    # if n is 51, return 263\n    elif n == 51: \n        return 263\n    # if n is 52, return 269\n    elif n == 52: \n        return 269\n    # if n is 53, return 271\n    elif n == 53: \n        return 271\n    # if n is 54, return 277\n    elif n == 54: \n        return 277\n    # if n is 55, return 281\n    elif n == 55: \n        return 281\n    # if n is 56, return 283\n    elif n == 56: \n        return 283\n    # if n is 57, return 293\n    elif n == 57: \n        return 293\n    # if n is 58, return 307\n    elif n == 58: \n        return 307\n    # if n is 59, return 311\n    elif n == 59: \n        return 311\n    # if n is 60, return 313\n    elif n == 60: \n        return 313\n    # if n is 61, return 331\n    elif n == 61: \n        return 331\n    # if n is 62, return 337\n    elif n == 62: \n        return 337\n    # if n is 63, return 347\n    elif n == 63: \n        return 347\n    # if n is 64, return 349\n    elif n == 64: \n        return 349\n    # if n is 65, return 353\n    elif n == 65: \n        return 353\n    # if n is 66, return 359\n    elif n == 66: \n        return 359\n    # if n is 67, return 361\n    elif n == 67: \n        return 361\n    # if n is 68, return 367\n    elif n == 68: \n        return 367\n    # if n is 69, return 373\n    elif n == 69: \n        return 373\n    # if n is 70, return 379\n    elif n == 70: \n        return 379\n    # if n is 71, return 383\n    elif n == 71: \n        return 383\n    # if n is 72, return 389\n    elif n == 72: \n        return 389\n    # if n is 73, return 397\n    elif n == 73: \n        return 397\n    # if n is 74, return 401\n    elif n == 74: \n        return 401\n    # if n is 75, return 409\n    elif n == 75: \n        return 409\n    # if n is 76, return 419\n    elif n == 76: \n        return 419\n    # if n is 77, return 421\n    elif n == 77: \n        return 421\n    # if n is 78, return 431\n    elif n == 78: \n        return 431\n    # if n is 79, return 433\n    elif n == 79: \n        return 433\n    # if n is 80, return 439\n    elif n == 80: \n        return 439\n    # if n is 81, return 441\n    elif n == 81: \n        return 441\n    # if n is 82, return 443\n    elif n == 82: \n        return 443\n    # if n is 83, return 449\n    elif n == 83: \n        return 449\n    # if n is 84, return 457\n    elif n == 84: \n        return 457\n    # if n is 85, return 461\n    elif n == 85: \n        return 461\n    # if n is 86, return 467\n    elif n == 86: \n        return 467\n    # if n is 87"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    return is_polite(n-1)\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 0: \n        return 0\n    nums = [1,2,3]\n    while len(nums) < n: \n        nums.append(nums[-1] + nums[-2] + nums[-3])\n    return nums[n - 1]\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def get_proper_divisors(n): \n        divisors = [] \n        for i in range(1, int(math.sqrt(n)) + 1): \n            if (n % i == 0): \n                if (n / i == i): \n                    divisors.append(i) \n                else: \n                    divisors.append(i) \n                    divisors.append(n / i) \n        return divisors \n    \n    divisors = get_proper_divisors(n) \n    if(len(divisors) == 0): \n        return -1 \n    if(len(divisors) == 1): \n        return 0\n    \n    sum = 0\n    for i in divisors: \n        sum = sum + i \n    return sum \n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # if n is even, nth polite number is \n    # even with n/2\n    if n % 2 == 0: \n        return n / 2\n    # if n is odd, nth polite number is \n    # odd with 3n + 1 \n    return (3 * n) + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #start from 1 and go till nth number \n    start = 1\n    nth_num = 1\n    while(start < n):\n        start = start * 2\n        nth_num += 1\n    return nth_num\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_polite_helper(n, counter): \n        if counter > n: \n            return True \n        if n % counter == 0: \n            return is_polite_helper(n, counter + 1)\n        return False\n    return is_polite_helper(n, 2)\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # number = [x**2 for x in range(1, 10000)]\n    # number = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999]\n    # print(len(number))\n    count = 0\n    number = [x**2 for x in range(1, 10000)]\n    for i in number:\n        if count == n:\n            return i\n        count += 1\n    # print(number)\n    return number[n]\ndef is_polite_v2(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # number = [x**2 for x in range(1, 10000)]\n    # number = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 156"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite = {0:0, 1:1, 2:4, 3:10, 4:20, 5:37, 6:68, 7:126, 8:216, 9:314, 10:701, 11:1209, 12:2144, 13:3555, 14:7569, 15:15590, 16:31631, 17:71556, 18:30212, 19:114841, 20:38975, 21:1429126, 22:4193563, 23:4304176, 24:37156060, 25:1589381512, 26:57551377569, 27:22704984308, 28:130504753459, 29:58872345569, 30:314082472375, 31:1339484606496, 32:3847473482409, 33:14142578638118, 34:4817569928099, 35:243862783730210, 36:119303326632998, 37:498106852493775, 38:275111765248832, 39:1527775906384484, 40:618934865651471, 41:31409603077759, 42:154237749997010, 43:715433079751675, 44:314711569016662, 45:158927809277961, 46:5650299627102268, 47:235134340212309, 48:11983123510784316, 49:5748417149230504, 50:2758478516763466, 51:15742179194183098, 52:7152121528531407, 53:31627145653453080, 54:15831554806988802, 55:56122271329185142, 56:2607487774163480, 57:15871598373387589, 58:57491145831274796, 59:27228970113365079, 60:1618940116043101, 61:57625098089790722, 62:2813066417265543, 63:15815138107918098, 64:76816963450498084, 65:3368798972292216, 66:18127622571157958, 67:98642635609422263, 68:50843636757024302, 69:28224668524141169, 70:162410352027961594, 71:91838141586706979, 72:45325608988548397, 73:25570232426448749, 74:1400477907657569, 75:750848482098612098, 76:32056426546662211, 77:186810753216433098, 78:96585268175467263, 79:497611952917245426, 80:247939245337420677, 81:1551235470837732772, 82:912741276775692963, 83:4918193055234847251, 84:2610742583799331545, 85:1646243535885006321, 86:8984933101471218391, 87:5048309433796967573, 88:2869294358518671787, 89:1755344962991895252, 90:96610389957394472394, 91:50568671379457521164, 92:27569928753928994733, 93:17897070995611145254, 94:10595434143383322134, 95:5661175732616376881, 96:2960195757822622485, 97:1827509601069726618, 98:96543232878084397953, 99:52051339308647461931}\n    num = 0\n    while True:\n        num += 1\n        if polite[num] >= n:\n            break\n    return num\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        for j in range(len(l1)):\n            if (i + j) == (len(l1) - 1):\n                l2.append(l1[i])\n                l2.append(l1[j])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(0, len(l1)-1):\n        t = (l1[i], l1[i+1])\n        l.append(t)\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return []\n    return [l1[i:i+2] for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    new_list = []\n    for i in range(len(l1)-1):\n        new_list.append((l1[i],l1[i+1]))\n    return new_list\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    i = 0\n    j = 0\n    for i in range(len(l1) - 1):\n        for j in range(i, len(l1)):\n            pairs.append((l1[i], l1[j]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = list(l1)\n    l2 = []\n    if len(l1) > 2:\n        for i in range(len(l1)):\n            if i < len(l1) - 1:\n                l2.append(l1[i], l1[i + 1])\n    elif len(l1) == 2:\n        l2.append(l1[0], l1[1])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if l1 is None or len(l1) < 1:\n        return []\n    else:\n        out = []\n        i = 0\n        while i < len(l1) - 1:\n            out.append((l1[i], l1[i+1]))\n            i += 2\n        return out\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(0,len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    output = []\n    for i in range(len(l1)-1):\n        output.append((l1[i], l1[i+1]))\n    return output\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    unique = set(arr)\n    count = 0\n    for i in unique:\n        for j in unique:\n            if (i + j == sum):\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    freq = dict()\n    for ele in arr:\n        if ele in freq:\n            freq[ele] += 1\n        else:\n            freq[ele] = 1\n    return freq[sum]\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    print(\"Counting pairs whose sum is equal to \", sum)\n    length = len(arr)\n    arr.sort()\n    count = 0\n    for i in range(0, length-1):\n        for j in range(i+1, length):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # using defaultdict\n    count = 0\n    hash_map = defaultdict(lambda: 0)\n    # Traverse through the list\n    for item in arr:\n        # Check if it is an even element\n        if item % 2 == 0:\n            # It is an even element so, find its compliment from the list\n            hash_map[item] += 1\n            hash_map[(sum - item) / 2] += 1\n        else:\n            # Since its an odd element, find its compliment from the list\n            hash_map[item] += 1\n            hash_map[(sum - item) / 2] += 1\n        # Check if the compliment pair exists in the list\n    for item in hash_map:\n        if item!= 0:\n            # Count the pairs\n            count += (hash_map[item])\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return len(get_pairs(arr, sum))\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j]) == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    hash_map = {}\n    for elem in arr:\n        if elem not in hash_map:\n            hash_map[elem] = 1\n        else:\n            hash_map[elem] += 1\n    cnt = 0\n    for key in hash_map:\n        if sum - key in hash_map:\n            cnt += hash_map[key] * hash_map[sum - key]\n    return cnt\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1)-set(li2))\n    return li_dif\ndef ListOfString(li,sep):\n    '''\n    Write a python function to separate a list of strings into a list of lists.\n    '''\n    list_of_string=sep.join(li)\n    return list_of_string\ndef ListOfString_To_List(string_list,sep):\n    '''\n    Write a python function to get the list of strings from a list of lists.\n    '''\n    list_of_list=string_list.split(sep)\n    return list_of_list\ndef index_find(li,value):\n    '''\n    Write a python function to find the index of a given value in a list.\n    '''\n    return li.index(value)\ndef List2String(li):\n    '''\n    Write a python function to convert a list to string.\n    '''\n    string=''.join(li)\n    return string\ndef NewLine(li):\n    '''\n    Write a python function to add a new line between each value in a list.\n    '''\n    new_li=li[0]\n    for i in range(1,len(li)):\n        new_li+='\\n'+li[i]\n    return new_li\ndef String2List(string):\n    '''\n    Write a python function to convert a string to list.\n    '''\n    string=string.split()\n    return string\ndef common_values(li1,li2):\n    '''\n    Write a python function to get the common values between two lists.\n    '''\n    new_list=[]\n    for i in li1:\n        if(i in li2):\n            new_list.append(i)\n    return new_list\ndef Uniquify(li):\n    '''\n    Write a python function to get the unique values in a list.\n    '''\n    unique_list=list(set(li))\n    return unique_list\ndef Intersection(li1,li2):\n    '''\n    Write a python function to get the intersection between two lists.\n    '''\n    new_list=[]\n    for i in li1:\n        if(i in li2):\n            new_list.append(i)\n    return new_list\ndef Uniquify_With_Order(li):\n    '''\n    Write a python function to get the unique values in a list and maintain the order.\n    '''\n    new_list=list(set(li))\n    new_list.sort(key=li.index)\n    return new_list\ndef Regex(li,exp):\n    '''\n    Write a python function to perform a regex search on a list.\n    '''\n    import re\n    new_list=[]\n    for i in li:\n        result=re.findall(exp,i)\n        new_list.append(result)\n    return new_list\ndef Regex_Search(li,exp):\n    '''\n    Write a python function to perform a regex search on a list.\n    '''\n    import re\n    new_list=[]\n    for i in li:\n        result=re.search(exp,i)\n        new_list.append(result)\n    return new_list\ndef Split(li,sep):\n    '''\n    Write a python function to split a list into sublists.\n    '''\n    list_of_sublists=li.split(sep)\n    return list_of_sublists\ndef Split_String(li,sep):\n    '''\n    Write a python function to split a list into sublists.\n    '''\n    list_of_sublists=li.split(sep)\n    new_list=[]\n    for i in range(len(list_of_sublists)):\n        new_list.append(list_of_sublists[i].split())\n    return new_list\ndef Add_Every_Nth(li,add,n):\n    '''\n    Write a python function to add a specific value to every nth element in a list.\n    '''\n    new_list=[]\n    for i in range(0,len(li)):\n        if(i%n==0):\n            new_list.append(li[i]+add)\n    return new_list\ndef No_Duplicates(li):\n    '''\n    Write a python function to get the list without duplicates.\n    '''\n    new_list=list(set(li))\n    return new_list\ndef Remove_Duplicates(li):\n    '''\n    Write a python function to get the list without duplicates.\n    '''\n    new_list=list(dict.fromkeys(li))\n    return new_list\ndef Remove_Duplicates_With_Order(li):\n    '''\n    Write a python function to get the list without duplicates.\n    '''\n    new_list=[]\n    for i in range(len(li)):\n        if(li[i] not in new_list):\n            new_list.append(li[i])\n    return new_list\ndef Select_List(li,exp):\n    '''\n    Write a python function to select a list from another based on a condition.\n    '''\n    new_list=[]\n    for i in li:\n        if(eval(exp)):\n            new_list.append(i)\n    return new_list\ndef Select_From_List(li,exp):\n    '''\n    Write a python function to select a list from another based on a condition.\n    '''\n    new_list=[]\n    for i in range(len(li)):\n        if(eval(exp)):\n            new_list.append(li[i])\n    return new_list\ndef List_To_Dict(li):\n    '''\n    Write a python function to convert a list to dictionary.\n    '''\n    new_dict={}\n    for i in range(len(li)):\n        new_dict[li[i]]=li[i]\n    return new_dict\ndef Select_From_List_With_Dict(li,exp):\n    '''\n    Write a python function to select a list from another based on a condition.\n    '''\n    new_dict={}\n    for i in range(len(li)):\n        if(eval(exp)):\n            new_dict[li[i]]=li[i]\n    return new_dict\ndef Dict_To_List(dictionary):\n    '''\n    Write a python function to convert a dictionary to a list.\n    '''\n    new_list=[]\n    for i in dictionary:\n        new_list.append(i)\n    return new_list\ndef Select_From_Dict(dictionary,exp):\n    '''\n    Write a python function to select a value from a dictionary based on a condition.\n    '''\n    new_list=[]\n    for i in dictionary:\n        if(eval(exp)):\n            new_list.append(dictionary[i])\n    return new_list\ndef Check_If_Key_Exists(dictionary,key):\n    '''\n    Write a python function to check if a key exists in a dictionary.\n    '''\n    if(key in dictionary):\n        return True\n    else:\n        return False\ndef Select_From_Dict_With_Key(dictionary,key):\n    '''\n    Write a python function to select a value from a dictionary based on a key.\n    '''\n    new_dict={}\n    for i in range(len(dictionary)):\n        if(dictionary[key] not in new_dict):\n            new_dict[dictionary[key]]=dictionary[key]\n    return new_dict\ndef Replace_Values(li,old_value,new_value):\n    '''\n    Write a python function to replace all instances of a value in a list with another value.\n    '''\n    new_list=[]\n    for i in li:\n        new_list.append(i.replace(old_value,new_value))\n    return new_list\ndef Replace_Values_With_Key(li,old_value,new_value,key):\n    '''\n    Write a python function to replace all instances of a value in a list with another value based on a key.\n    '''\n    new_list=[]\n    for i in range(len(li)):\n        new_list.appen"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2] \n    return li_dif\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Get sum of first n odd natural numbers\n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum += i ** 4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if(i%2!= 0):\n            sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums_list = list()\n    i = 1\n    while i <= n :\n        if i % 2 == 1 :\n            odd_nums_list.append(i)\n        i += 1\n    total = sum([i**4 for i in odd_nums_list])\n    return total\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_n_odd_fourth_power = 0\n    for i in range(1,n+1) : \n        if i%2!= 0 : \n            sum_of_n_odd_fourth_power = sum_of_n_odd_fourth_power + pow(i,4)\n    return sum_of_n_odd_fourth_power\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #initialize sum to 0\n    sum = 0\n    #loop for the odd numbers upto n\n    for i in range(1, n + 1, 2) : \n        #fourth power of i\n        i = i ** 4\n        #add i to sum\n        sum += i\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for num in range(1, n+1) :\n        if num % 2!= 0 :\n            total += (num ** 4)\n    return total\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if(n == 0):\n        return 0\n    else:\n        return (n ** 3) * (n + 1) * ((4 * n + 1) / 6)\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if (i%2==1):\n            sum+=i**4\n    return sum\ndef is_leap_year(year) :\n    '''\n    Write a python function to check whether the given year is a leap year or not.\n    '''\n    if (year%4==0):\n        if (year%100==0):\n            if (year%400==0):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef print_pascal_triangle(n) :\n    '''\n    Write a python function to print pascal triangle of the given number.\n    '''\n    for i in range(1, n+1) :\n        for j in range(1, i+1) :\n            print(int(binomial_coefficient(i, j)), end=\" \")\n        print()\ndef get_pascal_triangle(n) :\n    '''\n    Write a python function to get the first n lines of pascal triangle.\n    '''\n    pascal_triangle = []\n    for i in range(1, n+1) :\n        pascal_triangle.append([1]*(i+1))\n        for j in range(1, i) :\n            pascal_triangle[i-1][j] = pascal_triangle[i-2][j-1]+pascal_triangle[i-2][j]\n    return pascal_triangle\ndef binomial_coefficient(n, k) :\n    '''\n    Write a python function to compute the binomial coefficient.\n    '''\n    if (k>n-k):\n        k=n-k\n    result = 1\n    for i in range(k):\n        result = result*(n-i)/(i+1)\n    return int(result)\ndef is_balanced_parentheses(parentheses) :\n    '''\n    Write a python function to check whether the given string of parentheses is balanced or not.\n    '''\n    # case 1) no of opening parenthesis is less than no of closing parenthesis\n    if (parentheses.count(\"(\")>parentheses.count(\")\")) :\n        return False\n    # case 2) left bracket does not have closing bracket\n    for i in parentheses :\n        if (i==\"(\"):\n            stack.append(i)\n        elif (i==\")\"):\n            if (len(stack)==0) :\n                return False\n            stack.pop()\n    # case 3) left bracket is not at the top of stack\n    if (len(stack)!=0) :\n        return False\n    # case 4) if all cases are passed return True\n    return True\ndef reverse_vowels(s) :\n    '''\n    Write a python function to reverse vowels of a string.\n    '''\n    reversed_vowels = \"\"\n    vowels = [\"a\", \"A\", \"e\", \"E\", \"i\", \"I\", \"o\", \"O\", \"u\", \"U\"]\n    for i in s :\n        if i in vowels :\n            reversed_vowels += i\n    reversed_vowels = reversed_vowels[::-1]\n    return reversed_vowels\ndef count_words(words) :\n    '''\n    Write a python function to count the words of a string.\n    '''\n    word_count = 0\n    for word in words.split():\n        word_count+=1\n    return word_count\ndef remove_all_duplicates(str1) :\n    '''\n    Write a python function to remove all duplicates from a string.\n    '''\n    return \"\".join(set(str1))\ndef get_perfect_squares(n) :\n    '''\n    Write a python function to get perfect squares till the number n.\n    '''\n    count = 0\n    while (n>0) :\n        count+=1\n        n-= count**2\n    return count\ndef get_prime_factors(n) :\n    '''\n    Write a python function to get the prime factors of a number.\n    '''\n    prime_factors = []\n    i = 2\n    while(i*i<=n):\n        while(n%i==0):\n            prime_factors.append(i)\n            n = n//i\n        i+=1\n    if (n>1) :\n        prime_factors.append(n)\n    return prime_factors\ndef get_largest_prime_factor(n) :\n    '''\n    Write a python function to get the largest prime factor of a number.\n    '''\n    return get_prime_factors(n)[-1]\ndef get_largest_prime_factor_old(n) :\n    '''\n    Write a python function to get the largest prime factor of a number.\n    '''\n    prime_factors = get_prime_factors(n)\n    for i in range(len(prime_factors)-1, -1, -1) :\n        if (prime_factors[i]>get_largest_prime_factor(n//prime_factors[i])) :\n            return prime_factors[i]\ndef get_largest_prime_factor_simple(n) :\n    '''\n    Write a python function to get the largest prime factor of a number.\n    '''\n    prime_factors = get_prime_factors(n)\n    max_prime_factor = 0\n    for i in prime_factors :\n        if (i>max_prime_factor) :\n            max_prime_factor = i\n    return max_prime_factor\ndef get_palindrome(s) :\n    '''\n    Write a python function to get palindrome of a string.\n    '''\n    return s==s[::-1]\ndef get_palindrome_decimal(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    reverse = 0\n    original = n\n    while (n>0) :\n        reverse = reverse*10+(n%10)\n        n = n//10\n    return reverse==original\ndef get_palindrome_binary(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    return get_palindrome(bin(n)[2:])\ndef get_sum_of_digits(n) :\n    '''\n    Write a python function to get the sum of digits of a number.\n    '''\n    return sum([int(i) for i in str(n)])\ndef get_largest_palindrome(n) :\n    '''\n    Write a python function to get largest palindrome of a number.\n    '''\n    largest_palindrome = 0\n    for i in range(n,0,-1) :\n        for j in range(i,0,-1) :\n            if (get_palindrome_binary(i*j)):\n                largest_palindrome = i*j\n                break\n    return largest_palindrome\ndef get_max_consecutive_zeros(n) :\n    '''\n    Write a python function to get the maximum number of consecutive zeros in a binary representation.\n    '''\n    maximum_consecutive_zeros = 0\n    while (n>0) :\n        if (n%2==0) :\n            maximum_consecutive_zeros = maximum_consecutive_zeros+1\n        else :\n            return maximum_consecutive_zeros\n        n=n//2\n    return maximum_consecutive_zeros\ndef get_first_k_missing_positive_numbers(n, k) :\n    '''\n    Write a python function to print first k missing positive numbers.\n    '''\n    missing_numbers = []\n    i = 1\n    while (len(missing_numbers)<k) :\n        if (i not in missing_numbers and i not in list(range(1, n+1))):\n            missing_numbers.append(i)\n        i+=1\n    return missing_numbers\ndef get_sum_of_all_even_terms(n) :\n    '''\n    Write a python function to get the sum of all even terms of a series.\n    '''\n    total = 0\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # n = input(\"Enter a number \")\n    sum = 0\n    for i in range(1,int(n)+1) :\n        if i%2 == 1 :\n            sum += (i**4)\n    print(sum)\nodd_num_sum(5)\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 1:\n        return 0\n    sum = 0\n    for i in range(1,n+1,2):\n        sum+=pow(i,4)\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch == '{' or ch == '(' or ch == '[':\n            stack.append(ch)\n        elif ch == '}' or ch == ')' or ch == ']':\n            if len(stack) == 0:\n                return False\n            if (ch == '}' and stack[-1]!= '{') or (ch == ')' and stack[-1]!= '(') or (ch == ']' and stack[-1]!= '['):\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for elem in exp:\n        if elem in ['(', '{', '[']:\n            stack.append(elem)\n        elif elem in [')', '}', ']']:\n            if not stack:\n                return False\n            top_ele = stack.pop()\n            if elem == ')' and top_ele!= '(':\n                return False\n            elif elem == '}' and top_ele!= '{':\n                return False\n            elif elem == ']' and top_ele!= '[':\n                return False\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = deque()\n    for i in exp:\n        if i == '(':\n            s.append(i)\n        elif i == ')':\n            if len(s)==0:\n                return False\n            s.pop()\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i in ('(', '{', '['):\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            current_char = stack.pop()\n            if current_char == '(':\n                if i!= ')':\n                    return False\n            if current_char == '{':\n                if i!= '}':\n                    return False\n            if current_char == '[':\n                if i!= ']':\n                    return False\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_parens = [\"(\", \"{\", \"[\"]\n    closed_parens = [\")\", \"}\", \"]\"]\n    queue = deque()\n    for char in exp:\n        if char in open_parens:\n            queue.append(char)\n        if char in closed_parens:\n            if queue and queue[-1] == closed_parens[open_parens.index(char)]:\n                queue.pop()\n            else:\n                return False\n    return queue == deque()\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for ch in exp:\n        if ch in ('(', '{', '['):\n            stack.append(ch)\n        elif ch in (')', '}', ']'):\n            if not stack:\n                return False\n            else:\n                if ch == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif ch == '}' and stack[-1] == '{':\n                    stack.pop()\n                elif ch == ']' and stack[-1] == '[':\n                    stack.pop()\n                else:\n                    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == '(':\n                if i!= ')':\n                    return False\n            elif top == '{':\n                if i!= '}':\n                    return False\n            elif top == '[':\n                if i!= ']':\n                    return False\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s=set([\"(\",\")\",\"{\",\"}\",\"[\",\"]\"])\n    stack=deque()\n    for ch in exp:\n        if ch in s:\n            stack.append(ch)\n        else:\n            if not stack:\n                return False\n            else:\n                ch1=stack.pop()\n                if ch!=')' and ch1!='(' and ch!='}' and ch1!='{' and ch!=']' and ch1!='[' and ch!=')':\n                    return False\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_par = ['{','(','[']\n    close_par = ['}',')',']']\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_braces = {'(':')', '[':']', '{':'}'}\n    for ch in exp:\n        if ch in open_braces:\n            stack.append(ch)\n        elif ch in open_braces.values():\n            if len(stack) == 0:\n                return False\n            top_element = stack.pop()\n            if ch!= open_braces[top_element]:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_arr = test_str.split(\" \")\n    return \" \".join([x for x in str_arr if len(x)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if(len(test_str)<K):\n        return 'Not possible to remove the given length.'\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    lst = test_str.split(' ')\n    new_lst = []\n    for word in lst:\n        if len(word)!= K:\n            new_lst.append(word)\n    return new_lst\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    count = 0\n    temp = \"\"\n    for i in range(len(test_str)):\n        if count == K:\n            temp = temp + test_str[i]\n            count = 0\n        if test_str[i]!='':\n            count += 1\n            temp = temp + test_str[i]\n        else:\n            continue\n    return temp\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_list = test_str.split()\n    filtered_list = []\n    for word in word_list:\n        if len(word) == K:\n            continue\n        else:\n            filtered_list.append(word)\n    return''.join(filtered_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = []\n    for i in test_str.split(' '):\n        if len(i)!= K:\n            new_str.append(i)\n    return''.join(new_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    final_str = []\n    str_split = test_str.split()\n    for word in str_split:\n        if len(word)!= K:\n            final_str.append(word)\n    return \" \".join(final_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split(' ')\n    k_list = []\n    for i in test_list:\n        if len(i) == K:\n            k_list.append(i)\n    for j in k_list:\n        test_list.remove(j)\n    return''.join(test_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Return [] if the length of the test string is less than K.\n    if len(test_str) < K:\n        return []\n    # Initialize a list to store all the words in the test string.\n    words = []\n    # Initialize the start and end of the slice.\n    start = 0\n    end = 0\n    # Iterate over the test string.\n    for i in range(len(test_str)):\n        # If the start of the slice is not equal to the current character\n        if start!= i:\n            # Append the current character to the list.\n            words.append(test_str[start : end])\n        # Set the start of the slice to the current index.\n        start = i\n        # Iterate over the test string.\n        for j in range(i, len(test_str)):\n            # If the end of the slice is not equal to the current character\n            if end!= j:\n                # Append the current character to the list.\n                words.append(test_str[start : end])\n            # Set the end of the slice to the current index.\n            end = j\n            # Increment the start of the slice by 1.\n            start += 1\n    # Append the last word to the list.\n    words.append(test_str[start : end])\n    # Remove words that have length equal to K.\n    return [word for word in words if len(word)!= K]\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    i=0\n    for k in range(len(test_str)):\n        if len(test_str[k:k+K])==K:\n            i+=1\n            test_str=test_str.replace(test_str[k:k+K],'')\n    return test_str,i\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern,text)\n    if result:\n        print(\"The pattern {} is present in text {} at the position {} \".format(pattern,text,result.start()))\n    else:\n        print(\"Pattern {} not present in text {}\".format(pattern,text))\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # print(pattern.findall(text))\n    if pattern.findall(text)!= []:\n        match = pattern.findall(text)\n        print(match)\n        return match\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if len(matches)>0:\n        print(f'The occurrence and position of the substring in the text : \\n')\n        for match in matches:\n            print(f'{match} : {text.index(match)}')\n    else:\n        print(f'No match found')\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #print(text.find(pattern))\n    print(text.find(pattern,0))\n    print(text.find(pattern,1))\n    print(text.find(pattern,2))\n    print(text.find(pattern,3))\n    print(text.find(pattern,4))\n    print(text.find(pattern,5))\n    print(text.find(pattern,6))\n    print(text.find(pattern,7))\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern,text)\n    if result:\n        print(\"substring in string: \", result.group())\n        print(\"substring in string at position: \", result.start())\n        print(\"substring in string at position: \", result.end())\n    else:\n        print(\"pattern not found\")\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return len(match.group(0)), match.start()\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #Pattern is in the form of a list of substrings\n    pattern_to_find = pattern[0]\n    for i in range(1,len(pattern)):\n        pattern_to_find = pattern_to_find+'|'+pattern[i]\n    #print(pattern_to_find)\n    find = re.findall(pattern_to_find,text)\n    if find:\n        return find\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance_dict = {}\n    for match in re.finditer(pattern, text):\n        if match:\n            occurance_dict[match.group()] = match.start()\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #text = 'abcdabcd'\n    #pattern = 'abcd'\n    #text = 'abcdabcd'\n    #pattern = 'abc'\n    if(text == None):\n        return None\n    if(pattern == None):\n        return None\n    #if(text == None):\n        #return None\n    #if(pattern == None):\n        #return None\n    result = re.finditer(pattern,text)\n    if(result == None):\n        return None\n    else:\n        for x in result:\n            print('Position',x.start())\n            print('Occurance',x.group())\n    return result\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    assert isinstance(nums, list), \"Invalid Input.\"\n    if len(nums) == 0:\n        return False\n    elif len(nums) == 1:\n        return True if nums[0] % 2 == 1 else False\n    else:\n        for idx in range(0, len(nums)):\n            if idx % 2 == 0:\n                if nums[idx] % 2!= 0:\n                    return False\n            else:\n                if nums[idx] % 2 == 0:\n                    return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(1, len(nums) + 1, 2):\n        if nums[i] % 2!= 0:\n            odd_count += 1\n            if odd_count == len(nums) - 1:\n                return True\n    return False\nprint(odd_position([1,2,3,4,5,6,7]))\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    assert type(nums) == list\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all([True if nums[i]%2!=0 else False for i in range(1,len(nums),2)])\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0 and nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    print(\"\\n***** [TESTING] Odd Positions ********\")\n    try:\n        if len(nums) >= 1:\n            for idx in range(0, len(nums)):\n                if idx % 2 == 0:\n                    if nums[idx] % 2!= 0:\n                        print(\"\\t -[ FAIL ] ODD POSITION DOES NOT CONTAIN ODD NUMBERS \")\n                        return False\n                    else:\n                        continue\n                else:\n                    continue\n            print(\"\\t -[ PASS ] ODD POSITION CONTAINS ALL ODD NUMBERS \")\n            return True\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i == 0:\n                if test_str[i+1] in vowels:\n                    count += 1\n            elif i == len(test_str) - 1:\n                if test_str[i-1] in vowels:\n                    count += 1\n            else:\n                if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                    count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    string_set = set(test_str)\n    count = 0\n    for c in string_set:\n        if c in vowels:\n            neighbors = set(get_neighbors(c))\n            if len(neighbors.intersection(string_set)) > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    assert isinstance(test_str, str)\n    vowels = \"aeiou\"\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            for neighbor in test_str:\n                if char == neighbor:\n                    pass\n                else:\n                    if neighbor in vowels:\n                        count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    counter = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            count += 1\n        if i < len(test_str) - 1 and test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(\"aeiou\")\n    counter = 0\n    for i, ch in enumerate(test_str):\n        if ch in vowels:\n            try:\n                if test_str[i+1] in vowels:\n                    counter += 1\n                if test_str[i-1] in vowels:\n                    counter += 1\n            except IndexError:\n                pass\n    return counter\n    # return sum(1 for i, ch in enumerate(test_str) if ch in vowels and test_str[i-1] in vowels or test_str[i+1] in vowels)\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiouAEIOU' and test_str[i+1] in 'aeiouAEIOU':\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return len([x for x in test_str if x in \"aeiouAEIOU\"])\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = list(test_str)\n    for i in range(len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u':\n            if i == 0:\n                if test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u':\n                    count += 1\n            elif i == len(test_str) - 1:\n                if test_str[i-1] == 'a' or test_str[i-1] == 'e' or test_str[i-1] == 'i' or test_str[i-1] == 'o' or test_str[i-1] == 'u':\n                    count += 1\n            else:\n                if test_str[i-1] == 'a' or test_str[i-1] == 'e' or test_str[i-1] == 'i' or test_str[i-1] == 'o' or test_str[i-1] == 'u':\n                    count += 1\n                if test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u':\n                    count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Your code here\n    result = 0\n    for index, ch in enumerate(test_str):\n        if index == len(test_str)-1:\n            break\n        if ch in 'aeiouAEIOU':\n            if test_str[index+1] in 'aeiouAEIOU':\n                result += 1\n        elif ch in 'qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM':\n            if test_str[index+1] in 'qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM':\n                result += 1\n        else:\n            continue\n    return result\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0 \n    for i in range(0,len(arr)):\n        if arr[i] not in arr[i+1:] :\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr.sort()\n    sum_value = 0\n    i = 0\n    while(i < len(arr) -1):\n        if arr[i] == arr[i+1]:\n            i +=2\n        else:\n            sum_value += arr[i]\n            i +=1\n    if i == len(arr) -1:\n        sum_value += arr[i]\n    return sum_value\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # start writing your code here\n    sum=0\n    for i in arr:\n        if i not in arr[arr.index(i)+1:]:\n            sum=sum+i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr[arr.index(i)+1:]:\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for x in arr:\n        if arr.count(x) == 1:\n            sum = sum + x\n    return sum\n    \ndef find_avg(arr):\n    '''\n    Write a Python function to return the average of a given list.\n    '''\n    return sum(arr)/len(arr)\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    count = {}\n    for item in arr:\n        if item in count:\n            count[item] = count[item] + 1\n        else:\n            count[item] = 1\n    for item in arr:\n        if count[item] == 1:\n            sum = sum + item\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)): \n        sum += arr[i] \n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr: \n        if arr.count(i) == 1: \n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    res = []\n    for i in range(len(arr)):\n        if arr[i] not in res:\n            res.append(arr[i])\n    return sum(res)\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    result = 0\n    for item in arr: \n        result += item\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    for k, g in groupby(list1):\n        print(k, list(g))\npack_consecutive_duplicates([1, 1, 1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 9])\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if list1 == []:\n        return []\n    list2 = []\n    for k, g in groupby(list1, lambda x: x == list1[0]):\n        list2.append(list(g))\n    list2 = list(filter(lambda x: x!= [], list2))\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    for key, group in groupby(list1, lambda x: x[0] == x[1]):\n        l = list(group)\n        if len(l) > 1:\n            print(l)\n            \ndef max_sum(list1):\n    '''\n    Write a function to find the maximum sum of any contiguous sublist of the input list.\n    '''\n    max_sum = 0\n    list1.sort()\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            sub_list = list1[i:j+1]\n            if sum(sub_list) > max_sum:\n                max_sum = sum(sub_list)\n    print(max_sum)\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for i in range(len(list1)):\n        if i<len(list1)-1 and list1[i]==list1[i+1]:\n            list1[i:i+2] = [list1[i]]\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list=[]\n    for k,g in groupby(list1):\n        new_list.append(list(g))\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    output = [list(group) for key, group in groupby(list1)]\n    return output\nprint(pack_consecutive_duplicates([1,1,1,2,2,3,3,3]))\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pack = []\n    count = 0\n    for i, j in groupby(list1):\n        #print(i)\n        count = count + 1\n        if count == 1:\n            pack.append([i])\n        elif count > 1:\n            pack.append([i])\n            pack.append([j])\n    #print(pack)\n    return pack\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for ele, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    prev = None\n    for x, y in groupby(list1):\n        if prev!= x:\n            res.append(list(y))\n        prev = x\n    return res\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {tuple(x):list1.count(x) for x in list1}\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        if type(list1[i]) == type([]):\n            sublists.append(tuple(list1[i]))\n        else:\n            sublists.append(list1[i])\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for item in list1:\n        if tuple(item) in dict1:\n            dict1[tuple(item)] += 1\n        else:\n            dict1[tuple(item)] = 1\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    def unique_list(list1):\n        '''\n        Write a function to count the number of sublists within a list. The function should return a dictionary, where every sublist is turned to a tuple, and the value of the tuple is the number of its occurrences.\n        '''\n        \n        def count_list(list1):\n            '''\n            Write a function to count the number of sublists within a list. The function should return a dictionary, where every sublist is turned to a tuple, and the value of the tuple is the number of its occurrences.\n            '''\n            count = 0\n            sublists = []\n            for i in range(len(list1)):\n                if type(list1[i]) == type([]):\n                    count += 1\n                    sublists.append(list1[i])\n            sublist_tuples = tuple(sublists)\n            return (sublist_tuples, count)\n        \n        def count_dict(list1):\n            '''\n            Write a function to count the number of sublists within a list. The function should return a dictionary, where every sublist is turned to a tuple, and the value of the tuple is the number of its occurrences.\n            '''\n            count = 0\n            sublists = []\n            for i in range(len(list1)):\n                if type(list1[i]) == type([]):\n                    count += 1\n                    sublists.append(list1[i])\n            sublist_tuples = tuple(sublists)\n            dictionary = dict()\n            for i in sublist_tuples:\n                dictionary[i] = dictionary.get(i, 0) + 1\n            return dictionary\n        \n        def unique_sublists(list1):\n            '''\n            Write a function to count the number of sublists within a list. The function should return a dictionary, where every sublist is turned to a tuple, and the value of the tuple is the number of its occurrences.\n            '''\n            count = 0\n            sublists = []\n            for i in range(len(list1)):\n                if type(list1[i]) == type([]):\n                    count += 1\n                    sublists.append(list1[i])\n            sublist_tuples = tuple(sublists)\n            return sublist_tuples, count\n        \n        def unique_list(list1):\n            '''\n            Write a function to count the number of sublists within a list. The function should return a dictionary, where every sublist is turned to a tuple, and the value of the tuple is the number of its occurrences.\n            '''\n            count = 0\n            sublists = []\n            for i in range(len(list1)):\n                if type(list1[i]) == type([]):\n                    count += 1\n                    sublists.append(list1[i])\n            sublist_tuples = tuple(sublists)\n            return sublist_tuples\n        \n        def count_dict(list1):\n            '''\n            Write a function to count the number of sublists within a list. The function should return a dictionary, where every sublist is turned to a tuple, and the value of the tuple is the number of its occurrences.\n            '''\n            count = 0\n            sublists = []\n            for i in range(len(list1)):\n                if type(list1[i]) == type([]):\n                    count += 1\n                    sublists.append(list1[i])\n            sublist_tuples = tuple(sublists)\n            dictionary = dict()\n            for i in sublist_tuples:\n                dictionary[i] = dictionary.get(i, 0) + 1\n            return dictionary\n        \n        sublist_dict = dict()\n        unique_sublist, sublist_count = unique_list(list1)\n        sublist_dict[unique_sublist] = sublist_count\n        count = 0\n        while sublist_count > 0:\n            sublist_count -= 1\n            sublists = []\n            for i in range(len(list1)):\n                if type(list1[i]) == type([]):\n                    count += 1\n                    sublists.append(list1[i])\n            unique_sublist, sublist_count = unique_list(sublists)\n            sublist_dict[unique_sublist] = sublist_count\n        return sublist_dict\n    \n    def unique_sublists(list1):\n        '''\n        Write a function to count the number of sublists within a list. The function should return a dictionary, where every sublist is turned to a tuple, and the value of the tuple is the number of its occurrences.\n        '''\n        count = 0\n        sublists = []\n        for i in range(len(list1)):\n            if type(list1[i]) == type([]):\n                count += 1\n                sublists.append(list1[i])\n        sublist_tuples = tuple(sublists)\n        return sublist_tuples, count\n    \n    def unique_list(list1):\n        '''\n        Write a function to count the number of sublists within a list. The function should return a dictionary, where every sublist is turned to a tuple, and the value of the tuple is the number of its occurrences.\n        '''\n        count = 0\n        sublists = []\n        for i in range(len(list1)):\n            if type(list1[i]) == type([]):\n                count += 1\n                sublists.append(list1[i])\n        sublist_tuples = tuple(sublists)\n        return sublist_tuples\n    \n    def count_dict(list1):\n        '''\n        Write a function to count the number of sublists within a list. The function should return a dictionary, where every sublist is turned to a tuple, and the value of the tuple is the number of its occurrences.\n        '''\n        count = 0\n        sublists = []\n        for i in range(len(list1)):\n            if type(list1[i]) == type([]):\n                count += 1\n                sublists.append(list1[i])\n        sublist_tuples = tuple(sublists)\n        dictionary = dict()\n        for i in sublist_tuples:\n            dictionary[i] = dictionary.get(i, 0) + 1\n        return dictionary\n    \n    sublist_dict = dict()\n    unique_sublist, sublist_count = unique_list(list1)\n    sublist_dict[unique_sublist] = sublist_count\n    count = 0\n    while sublist_count > 0:\n        sublist_count -= 1\n        sublists = []\n        for i in range(len(list1)):\n            if type(list1[i]) == type([]):\n                count += 1\n                sublists.append(list1[i])\n        unique_sublist, sublist_count = unique_list(sublists)\n        sublist_dict[unique_sublist] = sublist_count\n    return sublist_dict\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def flatten(list_):\n        try:\n            return flatten(list_[0]) + flatten(list_[1:])\n        except IndexError:\n            return [list_[0]]\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, "
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    output_dict = {}\n    for element in list1:\n        if tuple(element) in output_dict:\n            output_dict[tuple(element)] += 1\n        else:\n            output_dict[tuple(element)] = 1\n    return output_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def append_to_list(input_list, list2):\n        for i in list2:\n            input_list.append(i)\n        return input_list\n    def make_tuple(input_list):\n        tup = ()\n        for i in input_list:\n            tup += (i,)\n        return tup\n    list2 = []\n    list3 = []\n    list4 = []\n    list5 = []\n    list6 = []\n    list7 = []\n    list8 = []\n    list9 = []\n    list10 = []\n    list11 = []\n    list12 = []\n    list13 = []\n    list14 = []\n    list15 = []\n    list16 = []\n    list17 = []\n    list18 = []\n    list19 = []\n    list20 = []\n    list21 = []\n    list22 = []\n    list23 = []\n    list24 = []\n    list25 = []\n    list26 = []\n    list27 = []\n    list28 = []\n    list29 = []\n    list30 = []\n    list31 = []\n    list32 = []\n    list33 = []\n    list34 = []\n    list35 = []\n    list36 = []\n    list37 = []\n    list38 = []\n    list39 = []\n    list40 = []\n    list41 = []\n    list42 = []\n    list43 = []\n    list44 = []\n    list45 = []\n    list46 = []\n    list47 = []\n    list48 = []\n    list49 = []\n    list50 = []\n    list51 = []\n    list52 = []\n    list53 = []\n    list54 = []\n    list55 = []\n    list56 = []\n    list57 = []\n    list58 = []\n    list59 = []\n    list60 = []\n    list61 = []\n    list62 = []\n    list63 = []\n    list64 = []\n    list65 = []\n    list66 = []\n    list67 = []\n    list68 = []\n    list69 = []\n    list70 = []\n    list71 = []\n    list72 = []\n    list73 = []\n    list74 = []\n    list75 = []\n    list76 = []\n    list77 = []\n    list78 = []\n    list79 = []\n    list80 = []\n    list81 = []\n    list82 = []\n    list83 = []\n    list84 = []\n    list85 = []\n    list86 = []\n    list87 = []\n    list88 = []\n    list89 = []\n    list90 = []\n    list91 = []\n    list92 = []\n    list93 = []\n    list94 = []\n    list95 = []\n    list96 = []\n    list97 = []\n    list98 = []\n    list99 = []\n    list100 = []\n    list101 = []\n    list102 = []\n    list103 = []\n    list104 = []\n    list105 = []\n    list106 = []\n    list107 = []\n    list108 = []\n    list109 = []\n    list110 = []\n    list111 = []\n    list112 = []\n    list113 = []\n    list114 = []\n    list115 = []\n    list116 = []\n    list117 = []\n    list118 = []\n    list119 = []\n    list120 = []\n    list121 = []\n    list122 = []\n    list123 = []\n    list124 = []\n    list125 = []\n    list126 = []\n    list127 = []\n    list128 = []\n    list129 = []\n    list130 = []\n    list131 = []\n    list132 = []\n    list133 = []\n    list134 = []\n    list135 = []\n    list136 = []\n    list137 = []\n    list138 = []\n    list139 = []\n    list140 = []\n    list141 = []\n    list142 = []\n    list143 = []\n    list144 = []\n    list145 = []\n    list146 = []\n    list147 = []\n    list148 = []\n    list149 = []\n    list150 = []\n    list151 = []\n    list152 = []\n    list153 = []\n    list154 = []\n    list155 = []\n    list156 = []\n    list157 = []\n    list158 = []\n    list159 = []\n    list160 = []\n    list161 = []\n    list162 = []\n    list163 = []\n    list164 = []\n    list165 = []\n    list166 = []\n    list167 = []\n    list168 = []\n    list169 = []\n    list170 = []\n    list171 = []\n    list172 = []\n    list173 = []\n    list174 = []\n    list175 = []\n    list176 = []\n    list177 = []\n    list178 = []\n    list179 = []\n    list180 = []\n    list181 = []\n    list182 = []\n    list183 = []\n    list184 = []\n    list185 = []\n    list186 = []\n    list187 = []\n    list188 = []\n    list189 = []\n    list190 = []\n    list191 = []\n    list192 = []\n    list193 = []\n    list194 = []\n    list195 = []\n    list196 = []\n    list197 = []\n    list198 = []\n    list199 = []\n    list200 = []\n    list201 = []\n    list202 = []\n    list203 = []\n    list204 = []\n    list205 = []\n    list206 = []\n    list207 = []\n    list208 = []\n    list209 = []\n    list210 = []\n    list211 = []\n    list212 = []\n    list213 = []\n    list214 = []\n    list215 = []\n    list216 = []\n    list217 = []\n    list218 = []\n    list219 = []\n    list220 = []\n    list221 = []\n    list222 = []\n    list223 = []\n    list224 = []\n    list225 = []\n    list226 = []\n    list227 = []\n    list228 = []\n    list229 = []\n    list230 = []\n    list231 = []\n    list232 = []\n    list233 = []\n    list234 = []\n    list235 = []\n    list236 = []\n    list237 = []\n    list238 = []\n    list239 = []\n    list240 = []\n    list241 = []\n    list242 = []\n    list243 = []\n    list244 = []\n    list245 = []\n    list246 = []\n    list247 = []\n    list248 = []\n    list249 = []\n    list250 = []\n    list251 = []\n    list252 = []\n    list253 = []\n    list254 = []\n    list255 = []\n    list256 = []\n    list257 = []\n    list258 = []\n    list259 = []\n    list260 = []\n    list261 = []\n    list262 = []\n    list263 = []\n    list264 = []\n    list265 = []\n    list266 = []\n    list267 = []\n    list268 = []\n    list269 = []\n    list270 = []\n    list271 = []\n    list272 = []\n    list273 = []\n    list274 = []\n    list275 = []\n    list276 = []\n    list277 = []\n    list278 = []\n    list279 = []\n    list280 = []\n    list281 = []\n    list282 = []\n    list283 = []\n    list284 = []\n    list285 = []\n    list286 = []\n    list287 = []\n    list288 = []\n    list289 = []\n    list290 = []\n    list291 = []\n    list292 = []\n    list293 = []\n    list294 = []\n    list295 = []\n    list296 = []\n    list297 = []\n    list298 = []\n    list299 = []\n    list300 = []\n    list301 = []\n    list302 = []\n    list303 = []\n    list304 = []\n    list305 = []\n    list306 = []\n    list307 = []\n    list308 = []\n    list309 = []\n    list310 = []\n    list311 = []\n    list312 = []\n    list313 = []\n    list314 = []\n    list315 = []\n    list316 = []\n    list317 = []\n    list318 = []\n    list319 "
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    lists_dict = {}\n    for l in list1:\n        list_tuple = tuple(l)\n        if list_tuple not in lists_dict:\n            lists_dict[list_tuple] = 1\n        else:\n            lists_dict[list_tuple] += 1\n    return lists_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = list1[:]\n    if len(list1) == 0:\n        return {}\n    if len(list1) == 1:\n        return {tuple(list1): 1}\n    if len(list1) == 2:\n        return {tuple(list1[0]): 1, tuple(list1[1]): 1}\n    else:\n        list1.sort()\n        list1 = set(list1)\n        list1 = list(list1)\n        unique_sublists = {}\n        unique_sublists[tuple(list1[0])] = 1\n        for i in range(1, len(list1)):\n            list2 = list1[:i]\n            list2.sort()\n            list2 = tuple(list2)\n            unique_sublists[list2] = 1\n        return unique_sublists\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    print(list(combinations(test_list,3)))\n    return list(combinations(test_list,3))\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    s = [sum(c) for c in combinations(test_list, 2)]\n    print(s)\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i])\n    return combinations(test_list, 2)\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = []\n    for i in range(1, len(test_list) + 1):\n        comb.extend(combinations(test_list, i))\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize a list with list of tuples having length of 2\n    final_list = [tuple(l) for l in test_list]\n    # Find the unique elements in the tuple list\n    test_list = set(final_list)\n    \n    # Compute all the combinations from the unique elements\n    for x in test_list:\n        combinations_list = list(combinations(test_list, x))\n        \n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    print(\"---------------------------------------------\")\n    print(test_list)\n    print(\"---------------------------------------------\")\n    res = [sum(i) for i in combinations(test_list, 2) if i[0]!= i[1] and sum(i) in test_list]\n    # print(\"result is :\")\n    # print(res)\n    print(\"---------------------------------------------\")\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    print (\"List is : \" + str(test_list)) \n    comb = [] \n    for i in range(1, len(test_list)): \n        print ('List of length'+ str(i) +'is'+ str(list(combinations(test_list, i)))) \n        comb.extend(list(combinations(test_list, i))) \n    comb.extend(test_list) \n    return comb\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a empty set\n    l = set()\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(1, len(test_list)):\n        combinations_list.extend(list(combinations(test_list, i)))\n    combinations_list = [tuple(sorted(combination)) for combination in combinations_list]\n    combinations_list = [list(combination) for combination in combinations_list]\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = list(combinations(test_list, 2))\n    return result\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count = count + 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) :\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0 :\n        return True\n    else : \n        return False\n    \ndef check_even_fibonacci(n) :\n    '''\n    Write a Python function to to find whether a number is Fibonacci number or not. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-22.php\n    '''\n    num1 = 0\n    num2 = 1\n    total = 0\n    for i in range(n) : \n        total = num1 + num2\n        num1 = num2\n        num2 = total\n    if total == n :\n        return True\n    else :\n        return False\n    \ndef sum_digits(n) : \n    '''\n    Write a Python function to sum all the digits of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    sum = 0\n    if n == 0 :\n        return 0\n    else :\n        while n!= 0 :\n            digit = n % 10\n            sum += digit\n            n = int(n / 10)\n        return sum\n        \ndef palindrome(n) : \n    '''\n    Write a Python function to check whether a number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    reverse = 0\n    if n == 0 :\n        return True\n    else :\n        while n!= 0 :\n            digit = n % 10\n            reverse = reverse * 10 + digit\n            n = int(n / 10)\n        if reverse == n :\n            return True\n        else : \n            return False\n    \ndef count_prime_factors(n) : \n    '''\n    Write a Python function to count the number of prime factors of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    count = 0\n    for i in range(2,n) :\n        if n % i == 0 : \n            count += 1\n    return count\n    \ndef find_gcd(a,b) : \n    '''\n    Write a Python program to find the greatest common divisor (GCD) of two positive integers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    gcd = 1\n    if a < b : \n        temp = a\n        a = b\n        b = temp\n    for i in range(a,1,-1) :\n        if a % i == 0 and b % i == 0 :\n            gcd = i\n    return gcd\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,int(n/2)+1) : \n        if n % i == 0 : \n            count += 1\n    if count % 2 == 0 : \n        return True\n    return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if n/i == i:\n                count+=1\n            else:\n                count+=2\n    return count\n    \ndef longest_substring_no_repeating_chars(s):\n    '''\n    Write a python function to find the longest substring in a given string, which has no repeating characters. https://www.geeksforgeeks.org/longest-substring-without-repeating-characters/\n    '''\n    longest = ''\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if len(set(s[i:j])) == len(s[i:j]):\n                if len(s[i:j]) > len(longest):\n                    longest = s[i:j]\n    return longest\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 0 or n == 1) :\n        return 1\n    else :\n        count = 0\n        for i in range(1,int(math.sqrt(n))+1) :\n            if (n % i == 0) :\n                if (n / i == i) :\n                    count += 1\n                else :\n                    count += 2\n        return count\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n) : \n        if n % i == 0 : \n            count += 1\n    if count % 2 == 0 : \n        print(f\"{n} is divisible by an even number of times.\")\n    else : \n        print(f\"{n} is divisible by an odd number of times.\")\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    count = 0\n    while i < n :\n        if n % i == 0 :\n            count += 1\n        i += 1\n    if count % 2 == 0 :\n        print('True')\n    else :\n        print('False')\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    num_divisors = 0\n    for i in range(1, int(n ** 0.5) + 1): \n        if n % i == 0: \n            num_divisors += 1\n    return num_divisors % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # This function computes the divisors of a number n\n    i = 1\n    sum_of_divisors = 0\n    while i <= n : \n        if n % i == 0 : \n            sum_of_divisors += i\n        i += 1\n    return sum_of_divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) : \n        if n % i == 0 : \n            count += 1\n    if count % 2 == 0 : \n        return True \n    else : \n        return False\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) < 2:\n        return arr\n    else:\n        return sum(arr[1::2])\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    length = len(arr)\n    # Your code here\n    # Use a list comprehension or a loop to iterate through the list\n    # and append the sum of all odd length subarrays to a new list.\n    # The sum of an empty array is zero\n    lst = []\n    for i in range(length):\n        lst.append(sum([arr[j] for j in range(i, length) if len(arr[j:]) % 2!= 0]))\n    return lst\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # return sum(arr) % 2 == 0\n    return sum(arr) % 2\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    result = 0\n    i = 0\n    while i < len(arr):\n        sum = 0\n        j = i\n        while j < len(arr):\n            sum += arr[j]\n            if (j-i+1) % 2 == 0:\n                break\n            j += 1\n        result += sum\n        i += 1\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if (j - i + 1) % 2 == 1:\n                sum = sum + arr[j]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    final_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i + 1) % 2!= 0:\n                final_sum += arr[i:j+1].sum()\n    return final_sum\n    \nprint(odd_length_sum([1, 4, 2, 5, 3]))\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    assert arr, 'Array cannot be empty'\n    return sum([x for x in arr if len(x) % 2!= 0])\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2!= 0:\n                sum += sum(arr[i:j+1])\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(len(arr) - i):\n            total += arr[i:i+j+1]\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    length = len(arr)\n    total = 0\n    for i in range(length):\n        for j in range(i,length):\n            if(j-i+1)%2 == 1:\n                total += sum(arr[i:j+1])\n    return total\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return int(h), int(s), int(v)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #unpack the r, g, b\n    #r, g, b = R, G, B\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import numpy as np\n    import colorsys\n    #rgb_color = [r, g, b]\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i%2 == 0:\n            product = product * i\n        else:\n            product = product * i\n    return product\nlist1 = [1,4,2,6,6,1]\nprint(\"The product of first even and odd number is {}\".format(mul_even_odd(list1)))\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd=0\n    even=0\n    for i in range(len(list1)):\n        if i%2==0:\n            even=even*list1[i]\n        else:\n            odd=odd*list1[i]\n    product=odd*even\n    print(product)\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_sum += list1[i]\n        else:\n            odd_sum += list1[i]\n    return even_sum * odd_sum\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for x in list1:\n        if x % 2 == 0:\n            product *= x\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for num in list1:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n    return even,odd\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for i in list1:\n        if i%2 == 0:\n            prod *= i\n        else:\n            prod *= i\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_odd = 1\n    product_even = 1\n    for x in list1:\n        if x % 2 == 0:\n            product_even *= x\n        else:\n            product_odd *= x\n    print(product_odd, product_even)\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_of_first_even = list1[0]\n    product_of_first_odd = list1[1]\n    for i in list1:\n        if i % 2 == 0:\n            product_of_first_even *= i\n        else:\n            product_of_first_odd *= i\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd_list = []\n    even_list = []\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    print(even_list, odd_list)\n    return (np.prod(even_list)*np.prod(odd_list))\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    product = 1\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num = i\n        else:\n            odd_num = i\n    product = even_num * odd_num\n    return product\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_tup = ()\n    for i in test_str.split(\",\"):\n        new_tup += (int(i),)\n    return new_tup\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp_list = test_str[1:-1].split(',')\n    final_tuple = tuple(map(int, temp_list))\n    return final_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.replace('(', '').replace(')', '').split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str.split(\",\")\n    return tuple(test_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    my_tuple = test_str.split(',')\n    my_tuple = list(my_tuple)\n    my_tuple = tuple(map(int, my_tuple))\n    return my_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str) is not str:\n        raise TypeError('Input must be a string')\n    tup = test_str.split(',')\n    tup = tuple(map(int, tup))\n    return tup\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str[1:-1].split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def str_to_int(s):\n        num = int(s.replace('(', '').replace(')', '').replace(',', ''))\n        return num\n    def to_int(t):\n        return tuple([str_to_int(item) for item in t])\n    return to_int(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_list = []\n    for i in str_list:\n        int_list.append(int(i))\n    return tuple(int_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split('(')))\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    bisect.insort(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Time: O(logn)\n    # Space: O(1)\n    # a = [1, 3, 4, 6, 7, 8, 10]\n    # x = 9\n    left = 0\n    right = len(a) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n    #a = [1, 2, 4, 6, 7, 8]\n    #x = 2\n    #left = 1\n    #right = 6\n    #mid = 3\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # find the first value that is >= x\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    return bisect.bisect(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = -1\n    hi = len(a)\n    while lo + 1 < hi:\n        mid = (lo + hi) // 2\n        if x <= a[mid]:\n            hi = mid\n        else:\n            lo = mid\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo, hi = 0, len(a)-1\n    while lo <= hi:\n        mid = (lo + hi)//2\n        if x < a[mid]: hi = mid - 1\n        elif x > a[mid]: lo = mid + 1\n        else: return mid + 1\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    left, right = 0, n\n    while left < right:\n        mid = (left+right)//2\n        if x > a[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    return right\ndef bisect_search(a, x):\n    '''\n    Write an efficient function to search for a value in sorted array\n    '''\n    if x in a:\n        return a.index(x)\n    else:\n        return -1\ndef search_1d(a, x):\n    '''\n    Write an efficient function to search for a value in sorted 1d array\n    '''\n    if x in a:\n        return a.index(x)\n    else:\n        return -1\ndef binary_search(a, x):\n    '''\n    Write an efficient function to search for a value in sorted 1d array using binary search\n    '''\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left+right)//2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            right = mid\n        else:\n            left = mid + 1\n    return -1\ndef two_sum(a, x):\n    '''\n    Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n    '''\n    n = len(a)\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == x:\n                return i, j\n    return -1\ndef two_sum_v2(a, x):\n    '''\n    Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n    '''\n    n = len(a)\n    i, j = 0, n-1\n    while i < j:\n        if a[i] + a[j] == x:\n            return i, j\n        elif a[i] + a[j] > x:\n            j -= 1\n        else:\n            i += 1\n    return -1\ndef search_2d(a, x):\n    '''\n    Given a matrix of integers, return the row and column of the position of a given value.\n    '''\n    row, col = 0, len(a[0])\n    for i in range(row):\n        for j in range(col):\n            if a[i][j] == x:\n                return i, j\n    return -1\ndef search_2d_v2(a, x):\n    '''\n    Given a matrix of integers, return the row and column of the position of a given value.\n    '''\n    row, col = 0, len(a[0])\n    i, j = 0, col-1\n    while i < row and j >= 0:\n        if a[i][j] == x:\n            return i, j\n        elif a[i][j] > x:\n            j -= 1\n        else:\n            i += 1\n    return -1\ndef search_2d_v3(a, x):\n    '''\n    Given a matrix of integers, return the row and column of the position of a given value.\n    '''\n    row, col = 0, len(a[0])\n    i, j = row - 1, 0\n    while i >= 0 and j < col:\n        if a[i][j] == x:\n            return i, j\n        elif a[i][j] > x:\n            i -= 1\n        else:\n            j += 1\n    return -1\ndef search_2d_v4(a, x):\n    '''\n    Given a matrix of integers, return the row and column of the position of a given value.\n    '''\n    row, col = 0, len(a[0])\n    i, j = row - 1, col - 1\n    while i >= 0 and j >= 0:\n        if a[i][j] == x:\n            return i, j\n        elif a[i][j] > x:\n            i -= 1\n        else:\n            j -= 1\n    return -1\ndef find_unique_element_in_2d(a):\n    '''\n    Given a matrix of integers, return a list of unique elements present in the matrix.\n    '''\n    if a == None:\n        return []\n    row, col = len(a), len(a[0])\n    elem = set()\n    for i in range(row):\n        for j in range(col):\n            elem.add(a[i][j])\n    return list(elem)\ndef is_palindrome(s):\n    '''\n    Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n    '''\n    return s == s[::-1]\ndef is_palindrome_v2(s):\n    '''\n    Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n    '''\n    return s.lower() == s[::-1].lower()\ndef longest_palindrome(s):\n    '''\n    Given a string, find the longest palindromic substring.\n    '''\n    return max(s, key=len) if len(s) > 0 else \"\"\ndef longest_palindrome_v2(s):\n    '''\n    Given a string, find the longest palindromic substring.\n    '''\n    if len(s) == 1:\n        return s\n    else:\n        for i in range(len(s), -1, -1):\n            for j in range(len(s)-i+1):\n                if is_palindrome(s[j:i+j]):\n                    return s[j:i+j]\ndef is_power_of_2(n):\n    '''\n    Given an integer, write a function to determine if it is a power of two.\n    '''\n    return n > 0 and not (n & (n-1))\ndef is_power_of_2_v2(n):\n    '''\n    Given an integer, write a function to determine if it is a power of two.\n    '''\n    return n > 0 and n & (n-1) == 0\ndef get_divisors(n):\n    '''\n    Given an integer, return all possible divisors.\n    '''\n    divisors = []\n    for i in range(1, n//2+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\ndef get_divisors_v2(n):\n    '''\n    Given an integer, return all possible divisors.\n    '''\n    if n == 1:\n        return [1]\n    divisors = [1]\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\ndef search_2d_matrix(matrix, target):\n    '''\n    Given a matrix, write a function to search for a value.\n    '''\n    row, col = len(matrix), len(matrix[0])\n    i, j = row-1, 0\n    while i >= 0 and j < col:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] > target:\n            i -= 1\n        else:\n            j += 1\n    return False\ndef search_2d_matrix_v2(matrix, target):\n    '''\n    Given a matrix, write a function to search for a value.\n    '''\n    row, col = len(matrix), len(matrix[0])\n    i, j = row-1, col-1\n    while i >= 0 and j >= 0:\n        if matrix[i][j] == target:\n            return True\n        elif matrix[i][j] > target:\n            i -= 1\n        else:\n            j -= 1\n    return False\ndef search_2d_matrix_v3(matrix, target):\n    '''\n    Given a matrix, write a function to search for a value.\n    '''\n    row, col = len(matri"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r\"ab{3}\", text)\n    if match:\n        return match.group()\n    return \"No Match\"\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = 'ab{3}'\n    if re.search(pattern, text):\n        return 'found a match!'\n    return('not matched')\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = 'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(\"ab{3}\", text)!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pat = '.*(a)(b){3}.*'\n    result = re.search(pat, text)\n    return result!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = 'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n        \nprint(text_match_three('accbbbsss'))\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r'ab{3}', text)\n    if result!= None:\n        return ''.join(result.group(0))\n    return result\nprint(text_match_three(\"abbbababababbbabbbb\"))\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = \"ababcabc\"\n    if re.search(\"ab{3}\", text) is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text):\n        print('Matched')\n    else:\n        print('Not Matched')\n        \ntext_match_three('aaab')\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    new_tuple = tuple(test_list)\n    \n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Use tuple() to create a new tuple.\n    # Use str() to create a new string.\n    return tuple(test_list), str(tuple(test_str))\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    #creates tuple using tuple() function\n    #checks if test_str is a str or list\n    if type(test_list) == str:\n        #returns test_list as tuple\n        return tuple(test_list)\n    elif type(test_list) == list:\n        #returns test_list as tuple\n        return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    assert test_str == ''.join(test_list)\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), test_str\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return ()\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str, )\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                result.append(True)\n            else:\n                result.append(False)\n        else:\n            result.append(False)\n    return all(result)\n    \n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0 and i % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in range(0,len(nums),2):\n        if nums[index] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    index = 0\n    for number in nums:\n        if index % 2 == 0 and number % 2!= 0:\n            return False\n        index += 1\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index, num in enumerate(nums):\n        if index%2 == 0 and num%2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # print(nums)\n    for i in range(0,len(nums),2):\n        if i == len(nums)-1:\n            if nums[i]%2 == 0:\n                return True\n        elif nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(n % 2 == 0 for n in nums[::2])\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tuples = test_tup\n    for i in tuples:\n        for j in tuples:\n            if set(i).issubset(set(j)) and i!= j:\n                tuples.remove(j)\n    return tuples\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    res = []\n    for i in test_tup:\n        if type(i) == tuple:\n            res.append(i[0])\n        else:\n            res.append(i)\n    return tuple(res)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return ''.join(map(str, test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    out = [x for x in test_tup if x not in test_tup[0]]\n    return out\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [i for i in test_tup if type(i) == tuple]\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [test_tup[0]] + [tuple(element for element in test_tup[1:] if type(element)!= tuple) ]\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    lst = []\n    for i in range(len(test_tup)):\n        if not type(test_tup[i]) is tuple:\n            lst.append(test_tup[i])\n        else:\n            for j in test_tup[i]:\n                lst.append(j)\n    return lst\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in test_tup:\n        if type(i) == tuple:\n            test_tup = test_tup[1:]\n            return remove_nested(test_tup)\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(list(filter(lambda x:x == tuple or x == (), test_tup)))\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for tup in test_tup:\n        if type(tup) == tuple:\n            test_tup.remove(tup)\n            remove_nested(tup)\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) == type([]):\n            count+=1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_of_lists = len(input_list)\n    return num_of_lists\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for ele in input_list:\n        if type(ele) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    total_list = 0\n    for items in input_list:\n        if isinstance(items, list):\n            total_list += 1\n    return total_list\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == type([]):\n            count += 1\n    return count\n    # hint: Use isinstance() function\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    i = 0\n    for item in input_list:\n        if isinstance(item, list):\n            i+=1\n    return i\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if type(input_list) == list:\n        list_count = 0\n        for i in input_list:\n            if type(i) == list:\n                list_count = list_count + 1\n        return list_count\n    else:\n        return None\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for x in input_list:\n        if type(x) == list:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr:\n        return -1\n    low=0\n    high=len(arr)-1\n    while low <=high:\n        mid=(low+high)//2\n        if arr[mid]==x:\n            if mid==high or arr[mid+1]>x:\n                return mid\n            else:\n                low=mid+1\n        elif arr[mid]>x:\n            high=mid-1\n        else:\n            low=mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # arr = [1,2,2,2,2,3,4,7,8,9]\n    # x = 2\n    # l = len(arr)\n    # print(l)\n    l = 0\n    r = len(arr)-1\n    m = int((l+r)/2)\n    while(l<=r):\n        if(arr[m] == x):\n            if(arr[m-1] == x and m-1 >=0):\n                m -=1\n            return m\n        elif(arr[m] < x):\n            l = m+1\n            m = int((l+r)/2)\n        else:\n            r = m-1\n            m = int((l+r)/2)\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left<=right:\n        mid = (left+right)//2\n        if arr[mid]==x:\n            left = mid+1\n        elif arr[mid]>x:\n            right = mid-1\n        else:\n            left = mid+1\n    return left\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    if n==0:\n        return -1\n    if arr[n-1]==x:\n        return n-1\n    for i in range(n-1,-1,-1):\n        if arr[i]==x:\n            return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr)-1\n    while(i>=0):\n        if(arr[i]==x):\n            return i\n        i-=1\n    return None\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #element not present in array\n    if arr[-1]<x:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    for i in range(0,length):\n        if arr[i] == x:\n            if i == (length-1):\n                return -1\n            else:\n                return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    mid=(high+low)//2\n    while high>low:\n        if arr[mid]==x:\n            mid=mid\n        elif arr[mid]>x:\n            high=mid-1\n        elif arr[mid]<x:\n            low=mid+1\n    if arr[mid]==x:\n        return mid\n    else:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i]==x:\n            return i\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start=0\n    end=len(arr)-1\n    while(start<=end):\n        mid=int((start+end)/2)\n        if arr[mid]==x:\n            if mid==0 or arr[mid-1]!=x:\n                return mid\n            end=mid-1\n        elif arr[mid]<x:\n            start=mid+1\n        else:\n            end=mid-1\n    return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*?b\", text)\n    print(x)\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a.*b$', text)!= None\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = \"^a.+b$\"\n    result = re.search(pattern, text)\n    if result!= None:\n        return True\n    else:\n        return False\n    return result\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*?b$')\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.+?b$')\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'%s.+?%s' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_middle_end(text,start,middle,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'%s.+?%s.+?%s' % (start,middle,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.+?%s.+?%s.+?$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end_word_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.+?%s.+?%s.+?$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end_word_word_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.+?%s.+?%s.+?$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_end_start_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'.+?%s.+?%s$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_end_start_word_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'.+?%s.+?%s$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_end_start_word_word_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'.+?%s.+?%s$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end_word_start_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.+?%s.+?%s$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end_word_start_word_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.+?%s.+?%s$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end_word_start_word_word_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.+?%s.+?%s$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end_word_end_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.+?%s.+?%s$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end_word_end_word_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.+?%s.+?%s$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end_word_end_word_word_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.+?%s.+?%s$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end_word_start_word_start_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.+?%s.+?%s$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end_word_start_word_start_word_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.+?%s.+?%s$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end_word_start_word_start_word_word_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.+?%s.+?%s$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end_word_end_word_start_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.+?%s.+?%s$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end_word_end_word_start_word_word(text,start,end):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^.+?%s.+?%s$' % (start,end))\n    result = pattern.findall(text)\n    return result\n    \n    \ndef text_start_end_word_end_word_start_word_word_word(text,start"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return '^a.*b$'\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'a\\w+b$', text)\n    if match:\n        return match.group()\n    return 'Not matched'\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # use?: to end with a non-capturing group\n    pattern = re.compile(r\"a.*?b$\")\n    result = pattern.match(text)\n    return result!= None\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"a.*b$\")\n    if pattern.search(text):\n        return \"YES\"\n    else:\n        return \"NO\"\n    \nprint(text_starta_endb(\"aaaaaaaaaaaaaaab\"))\nprint(text_starta_endb(\"aaaaaaaaaaaaab\"))\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #r'^a.+b$'\n    return True\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    count = 0\n    for item in dict:\n        count += dict[item]\n    return count\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # Your code here\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    result = 0\n    for value in dict.values():\n        result += value\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # return sum(dict.values())\n    return sum([x for x in dict.values()])\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        print(\"Please enter positive number.\")\n    else:\n        if n == 0:\n            return 0\n        else:\n            sum = 0\n            for i in range(1, n + 1, 2):\n                sum += i\n            return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l,r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(l,r+1):\n        if i%2!=0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    while n <= r: \n        if n % 2 == 1: \n            sum += n \n        n += 1\n    return sum \n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(n) if i%2!=0])\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Your code goes here\n    l=int(input(\"enter the lower limit: \"))\n    r=int(input(\"enter the upper limit: \"))\n    total=0\n    for i in range(l,r):\n        if(i%2!=0):\n            total+=i\n    print(\"Sum is: \",total)\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0 \n    if n>1:\n        for i in range(1,n+1):\n            if i % 2!= 0:\n                sum_odd += i \n    else:\n        return 'Enter a valid number'\n    return sum_odd \n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(list(range(1,n+1,2)))\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(n):\n        if i%2!=0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l,r+1):\n        if i%2!=0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return reduce(lambda x, y: x+y, arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        ans = ans + arr[i]\n    return ans\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not arr:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    res = 0\n    for i in arr:\n        res += i\n    return res\n    \nprint(_sum([1,2,3,4,5]))\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    ans = 0\n    for i in arr:\n        ans += i\n    return ans\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for x in arr:\n        sum=sum+x\n    return sum\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n<<d)|(n>>(32-d)))&0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if (n == 0) or (d == 0):\n        return n\n    mask = 0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    def get_bit(num,index):\n        return (num>>index)&1\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    mask = ~mask\n    return n << d | n >> mask\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # if d is larger than the number, then it is the same as the function right_rotate.\n    if n < 0 or d < 0 or d > 32:\n        return -1\n    if d == 0:\n        return n\n    elif d == 32:\n        return right_rotate(n,-d)\n    else:\n        return (n >> d) | (n << (32-d)) & 0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if(n==0):\n        return 0\n    return (((n<<d)|(n>>(32-d)))&0xFFFFFFFF)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #get the d rightmost bits of n\n    d_rightmost_bits = n >> d\n    #right shift the n by d\n    n_rightmost_bits = n >> d\n    #left shift n by 32 - d\n    n_left_bits = n << 32 - d\n    return n_left_bits | n_rightmost_bits\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    mask_32 = 0xFFFFFFFF\n    return (n << d)|(n >> (32 - d)) & mask_32\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    mask_32 = 0xFFFFFFFF\n    return (n >> d)|(n << (32 - d)) & mask_32\n    \ndef bit_reverse(n):\n    '''\n    Write a function that reverse bits of a given number.\n    '''\n    mask = 0x55555555\n    return n & mask | ((n >> 1) & 0xAAAAAAAA)\n    \ndef bit_reversal(n):\n    '''\n    Write a function that reverse bits of a given number using bit-reversal technique.\n    '''\n    mask = 0xAAAAAAAA\n    return n ^ mask\n    \ndef f_j(x, y, z):\n    '''\n    Write a function that implements the following operation.\n    f(x, y, z) = (x & y) | (x & z) | (y & z).\n    '''\n    return x & y | x & z | y & z\n    \ndef xor(a, b):\n    '''\n    Write a function to compute the xor of a given number.\n    '''\n    return a ^ b\n    \ndef bit_addition(n1, n2):\n    '''\n    Write a function that implement the bit adder.\n    '''\n    n1 = n1 ^ n2\n    n1 = (n1 << 1) ^ n1\n    n1 = right_rotate(n1, 31)\n    n1 = n1 & 0xFFFFFFFF\n    \n    return n1\n    \ndef xor_operation(n1, n2):\n    '''\n    Write a function that implement the XOR operation between two given numbers.\n    '''\n    return n1 ^ n2\n    \ndef multiply_modulo(n1, n2, n3):\n    '''\n    Write a function that implement the multiplication between two given numbers.\n    '''\n    \n    # Initialize the three 32-bit numbers as n1, n2 and n3.\n    n1 = 0x08010203\n    n2 = 0x04050607\n    n3 = 0x08070809\n    \n    # Multiply n1 and n2 using the algorithm.\n    n1 = bit_addition(n1, n2)\n    n1 = bit_addition(n1, n3)\n    \n    # Divide by 4 to obtain the quotient.\n    n1 = n1 >> 4\n    \n    # Multiply n1 by 10 using the algorithm.\n    n1 = bit_addition(n1, 0x5A8)\n    n1 = bit_addition(n1, 0x6ED)\n    n1 = bit_addition(n1, 0x8A1)\n    n1 = bit_addition(n1, 0xCA2)\n    n1 = bit_addition(n1, 0xCAC)\n    n1 = bit_addition(n1, 0xF6A)\n    n1 = bit_addition(n1, 0xFEE)\n    n1 = bit_addition(n1, 0xB7C)\n    n1 = bit_addition(n1, 0xB7F)\n    \n    # Divide by 10 to obtain the quotient.\n    n1 = n1 >> 10\n    \n    # Multiply n1 by 8 using the algorithm.\n    n1 = bit_addition(n1, 0xEA8)\n    n1 = bit_addition(n1, 0xD29)\n    n1 = bit_addition(n1, 0x1B6)\n    n1 = bit_addition(n1, 0x0C1)\n    n1 = bit_addition(n1, 0x2D0)\n    n1 = bit_addition(n1, 0x27C)\n    n1 = bit_addition(n1, 0xB4C)\n    n1 = bit_addition(n1, 0xC46)\n    n1 = bit_addition(n1, 0xF64)\n    n1 = bit_addition(n1, 0xF62)\n    \n    # Divide by 8 to obtain the quotient.\n    n1 = n1 >> 8\n    \n    # Multiply n1 by 3 using the algorithm.\n    n1 = bit_addition(n1, 0x6D8)\n    n1 = bit_addition(n1, 0x5F4)\n    n1 = bit_addition(n1, 0xD63)\n    n1 = bit_addition(n1, 0xAEA)\n    n1 = bit_addition(n1, 0xB9E)\n    n1 = bit_addition(n1, 0xF2E)\n    n1 = bit_addition(n1, 0xC5E)\n    n1 = bit_addition(n1, 0xA2A)\n    n1 = bit_addition(n1, 0x1F4)\n    \n    # Divide by 3 to obtain the quotient.\n    n1 = n1 >> 3\n    \n    # Multiply n1 by 2 using the algorithm.\n    n1 = bit_addition(n1, 0xA2A)\n    n1 = bit_addition(n1, 0xF4E)\n    n1 = bit_addition(n1, 0x0E1)\n    n1 = bit_addition(n1, 0xF5A)\n    n1 = bit_addition(n1, 0xC6F)\n    n1 = bit_addition(n1, 0xC3F)\n    n1 = bit_addition(n1, 0xA3A)\n    n1 = bit_addition(n1, 0xA3A)\n    \n    # Divide by 2 to obtain the quotient.\n    n1 = n1 >> 2\n    \n    # Multiply n1 by 1 using the algorithm.\n    n1 = bit_addition(n1, 0xC3F)\n    n1 = bit_addition(n1, 0xA3A)\n    n1 = bit_addition(n1, 0xA3A)\n    n1 = bit_addition(n1, 0xF5A)\n    n1 = bit_addition(n1, 0xF4E)\n    n1 = bit_addition(n1, 0x0E1)\n    n1 = bit_addition(n1, 0xF5A)\n    n1 = bit_addition(n1, 0xC6F)\n    n1 = bit_addition(n1, 0xC3F)\n    n1 = bit_addition(n1, 0xA3A)\n    n1 = bit_addition(n1, 0xA3A)\n    \n    # Divide by 1 to obtain the quotient.\n    n1 = n1 >> 1\n    \n    # Multiply n1 by 2 using the algorithm.\n    n1 = bit_addition(n1, 0xF5A)\n    n1 = bit_addition(n1, 0x0E1)\n    n1 = bit_addition(n1, 0x0E1)\n    n1 = bit_addition(n1, 0xF5A)\n    n1 = bit_addition(n1, 0xC6F)\n    n1 = bit_addition(n1, 0xC3F)\n    n1 = bit_addition(n1, 0xA3A)\n    n1 = bit_addition(n1, 0xA3A)\n    \n    # Divide by 2 to obtain the quotient.\n    n1 = n1 >> 2\n    \n    # Multiply n1 by 4 using the algorithm.\n    n1 = bit_addition(n1, 0x0E1)\n    n1 = bit_addition(n1, 0x0E1)\n    n1 = bit_addition(n1, 0xC6F)\n    "
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', r' ', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\" \",\"\")\n    return text\n    \ndef remove_all_digits(text):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    return re.sub(r\"\\d\", \"\", text)\n    \ndef remove_all_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return re.sub(r\"\\W\", \"\", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile(r'\\s+')\n    return re.sub(pattern, '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    #return re.sub(\"\\s+\", \"\", text)\n    return \"\".join(text.split())\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if(x==y==z):\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if (x==y==z):\n        return 3\n    elif(x==y or y==z or x==z):\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        print(3)\n    elif x==y or y==z or z==x:\n        print(2)\n    else:\n        print(0)\n    return\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    equal = 0\n    for i in range(x+1):\n        for j in range(y+1):\n            for k in range(z+1):\n                if i == j == k:\n                    equal += 1\n    return equal\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y==z\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        print('Three equal numbers')\n    elif x == y or y == z or x == z:\n        print('Two equal numbers')\n    else:\n        print('No equal numbers')\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if (x == y == z):\n        count = 3\n    elif ((x == y) or (x == z) or (y == z)):\n        count = 2\n    elif ((x!= y) and (x!= z) and (y!= z)):\n        count = 0\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    def count_equal(a,b,c):\n        if a == b == c:\n            return 3\n        elif a == b or b == c or c == a:\n            return 2\n        else:\n            return 0\n        \n    print(count_equal(x,y,z))\n    \ntest_three_equal(1,2,3)\ntest_three_equal(3,2,1)\ntest_three_equal(1,2,1)\ntest_three_equal(2,1,1)\ntest_three_equal(1,1,1)\ntest_three_equal(3,3,3)\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(count_equal_numbers(x,y,z))\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def next_greatest_left(arr, n):\n        if n == 0:\n            return -1\n        if n == 1:\n            return 0\n        if arr[n-1] > arr[n-2]:\n            return n-1\n        l=next_greatest_left(arr,n-1)\n        return l\n    #driver code to test function\n    if len(arr) == 0:\n        return 0\n    l=next_greatest_left(arr, len(arr))\n    return len(arr)-l\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    N = len(arr)\n    low = 0\n    high = N-1\n    mid = 0\n    while mid <= high:\n        if arr[low] <= arr[mid] and arr[high] >= arr[mid]:\n            break\n        elif arr[mid] <= arr[high]:\n            high = high - 1\n        else:\n            low = low + 1\n        mid = (low + high)//2\n    rotations = 0\n    i = 0\n    while i < mid:\n        if arr[i] > arr[i+1]:\n            rotations = rotations + 1\n        i = i + 1\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    low = 0\n    high = n-1\n    mid = 0\n    while(low <= high):\n        mid = (high+low)//2\n        if arr[mid] >= arr[low]:\n            low = mid+1\n        else:\n            high = mid-1\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n    if arr[0] < arr[-1]:\n        return 0\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        mid = l + (r-l)//2\n        if arr[mid] > arr[mid+1]:\n            return mid + 1\n        elif arr[mid] < arr[mid-1]:\n            return mid\n        elif arr[mid] > arr[0]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    while(True):\n        if(len(arr) == 1):\n            break\n        else:\n            if(arr[0] < arr[-1]):\n                break\n            else:\n                arr = arr[-1:] + arr[0:-1]\n                count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    arr_copy = [0]*n\n    for i in range(n):\n        arr_copy[i] = arr[i]\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    min_idx = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[min_idx] > arr[i]:\n            min_idx = i\n    count = 0\n    for i in range(n):\n        if i!= min_idx:\n            if arr[i] > arr[min_idx]:\n                count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    low = 0\n    high = len(arr)-1\n    mid = 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    #print(arr)\n    low,high = 0,n-1\n    count = 0\n    #print(low,high)\n    while(low<=high):\n        mid = low + (high-low)//2\n        if arr[mid] < arr[high]:\n            high = mid-1\n        elif arr[mid] > arr[high]:\n            low = mid+1\n        else:\n            high = mid-1\n        count+=1\n    #print(count)\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    left, right = 0, len(arr) - 1\n    if arr[left] < arr[right]:\n        return 0\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid + 1]:\n            return mid + 1\n        elif arr[mid] < arr[right]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Square root(sqrt) value\n    x = n\n    # Initialize result\n    ans = 1;\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    return (n ** 0.5) % 1 == 0\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    #Your code here\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = int(math.sqrt(n))\n    return sqrt * sqrt == n\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    if n < 2:\n        return False\n    while (x % 2 == 0) :\n        x = x / 2\n    for i in range(3, int(math.sqrt(n) + 1), 2) :\n        while (x % i == 0) :\n            x = x / i\n    if (x == 1) :\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n // 2\n    y = 1\n    while x > 1 :\n        y += 1\n        x = x // 2\n    if ((y * y) == n) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    for i in range(n) :\n        x = i*i\n        if x == n :\n            return True\n            break\n        elif x > n :\n            return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if n is perfect square\n    x = math.sqrt(n)\n    return (x - math.floor(x)) == 0\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n ** 0.5\n    return int(sqrt + 1) ** 2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # if n <= 1 : return false\n    # low = 0\n    # high = n // 2\n    # while (low <= high) :\n    #     mid = (low + high) // 2\n    #     guess_sq = mid * mid\n    #     if guess_sq == n :\n    #         return True\n    #     elif guess_sq < n :\n    #         low = mid + 1\n    #     else :\n    #         high = mid - 1\n    # return False\n    if n <= 1:\n        return False\n    # if n == 4 : return True\n    start = 2\n    end = n // 2\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # arr = [1,2,3,4]\n    # 1*3*4 = 24\n    # 24 % 2 = 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in range(0,len(arr)):\n        prod *= arr[i]\n    return prod % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    return not prod % 2\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return all([int(num) % 2 == 0 for num in arr])\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x,y: x*y, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n    return prod % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # approach: compute the product and check if it is even or not\n    # time complexity: O(n)\n    # space complexity: O(1)\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for ele in arr:\n        product *= ele\n    return product % 2 == 0\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    assert lists\n    if len(lists) == 1:\n        return lists\n    else:\n        greater_list = max_sum_list(lists[1:])\n        greater_list_sum = sum(greater_list[0])\n        less_list = max_sum_list(lists[:-1])\n        less_list_sum = sum(less_list[0])\n        if greater_list_sum > less_list_sum:\n            return greater_list + [lists[0]]\n        else:\n            return less_list + [lists[0]]\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key = sum)\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = lists[0][0]\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n    return [l for l in lists if sum(l) == max_sum]\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key=sum)\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = max(lists, key=sum)\n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n    for list in lists:\n        if len(list)!= 0:\n            list.sort()\n            result.append(list[-1])\n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for lst in lists:\n        if sum(lst) == max(sum(x) for x in lists):\n            max_list.append(lst)\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sum_list = []\n    for list in lists:\n        sum_list.append(sum(list))\n    return lists[sum_list.index(max(sum_list))]\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max = lists[0]\n    for i in lists:\n        if sum(i) > sum(max):\n            max = i\n    return max\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    list_sums = []\n    for list in lists:\n        list_sums.append(sum(list))\n    return lists[list_sums.index(max(list_sums))]\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    current_count = 0\n    for i in test_str:\n        if i.isupper():\n            current_count+=1\n        else:\n            current_count = 0\n        if current_count > max_count:\n            max_count = current_count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    curr_run = 1\n    max_run = 1\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = list(test_str)\n    max_run = 0\n    for i in range(len(test_str)):\n        count = 0\n        for j in range(i,len(test_str)):\n            if test_str[j].isupper():\n                count += 1\n            else:\n                break\n        if max_run < count:\n            max_run = count\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run = 0\n    max_run = 0\n    for i in test_str:\n        if i.isupper():\n            run += 1\n        else:\n            run = 0\n        max_run = max(run, max_run)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return len(max(test_str.split(''.join([i for i in test_str if i.isupper()]))))\n    \ndef min_run_uppercase(test_str):\n    '''\n    Write a function to find minimum run of uppercase characters in the given string.\n    '''\n    return len(min(test_str.split(''.join([i for i in test_str if i.isupper()]))))\n    \ndef min_run_lowercase(test_str):\n    '''\n    Write a function to find minimum run of lowercase characters in the given string.\n    '''\n    return len(min(test_str.split(''.join([i for i in test_str if i.islower()]))))\n    \ndef max_run_lowercase(test_str):\n    '''\n    Write a function to find maximum run of lowercase characters in the given string.\n    '''\n    return len(max(test_str.split(''.join([i for i in test_str if i.islower()]))))\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    temp_count = 0\n    for char in test_str:\n        if char.isupper():\n            temp_count += 1\n        else:\n            temp_count = 0\n        max_count = max(max_count, temp_count)\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for char in test_str:\n        if char.isupper():\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_len = 0\n    cur_len = 0\n    for char in test_str:\n        if char.isupper():\n            cur_len += 1\n        else:\n            cur_len = 0\n        max_len = max(max_len, cur_len)\n    return max_len\n    \ndef remove_odd(test_list):\n    '''\n    Write a function to remove all odd numbers from a given list. The function will not modify the original list, instead a new list will be created and returned.\n    '''\n    new_list = []\n    for num in test_list:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n    \ndef remove_odd_dict(test_list):\n    '''\n    Write a function to remove all odd numbers from a given list. The function will not modify the original list, instead a new list will be created and returned.\n    '''\n    new_list = []\n    for num in test_list:\n        if num % 2 == 0:\n            new_list.append(num)\n    return {'new_list': new_list}\n    \ndef remove_odd_dict_num_list(test_list):\n    '''\n    Write a function to remove all odd numbers from a given list. The function will not modify the original list, instead a new list will be created and returned.\n    '''\n    new_list = []\n    for num in test_list:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n    \ndef remove_odd_list_return_list(test_list):\n    '''\n    Write a function to remove all odd numbers from a given list. The function will not modify the original list, instead a new list will be created and returned.\n    '''\n    new_list = []\n    for num in test_list:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n    \ndef remove_odd_list_return_num_list(test_list):\n    '''\n    Write a function to remove all odd numbers from a given list. The function will not modify the original list, instead a new list will be created and returned.\n    '''\n    new_list = []\n    for num in test_list:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n    \ndef remove_odd_list_return_num_dict(test_list):\n    '''\n    Write a function to remove all odd numbers from a given list. The function will not modify the original list, instead a new list will be created and returned.\n    '''\n    new_list = []\n    for num in test_list:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n    \ndef remove_odd_list_return_num_dict_with_index(test_list):\n    '''\n    Write a function to remove all odd numbers from a given list. The function will not modify the original list, instead a new list will be created and returned.\n    '''\n    new_list = []\n    for num in test_list:\n        if num % 2 == 0:\n            new_list.append(num)\n    return {'new_list': new_list, 'index_list': test_list}\n    \ndef remove_odd_list_return_num_dict_with_index_and_return_list(test_list):\n    '''\n    Write a function to remove all odd numbers from a given list. The function will not modify the original list, instead a new list will be created and returned.\n    '''\n    new_list = []\n    for num in test_list:\n        if num % 2 == 0:\n            new_list.append(num)\n    return {'new_list': new_list, 'index_list': test_list}\n    \ndef find_min(test_list):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    min_value = test_list[0]\n    for num in test_list:\n        if num < min_value:\n            min_value = num\n    return min_value\n    \ndef find_min_dict(test_list):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    min_value = test_list[0]\n    for num in test_list:\n        if num < min_value:\n            min_value = num\n    return {'min': min_value}\n    \ndef find_min_dict_return_list(test_list):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    min_value = test_list[0]\n    for num in test_list:\n        if num < min_value:\n            min_value = num\n    return [min_value]\n    \ndef find_min_dict_return_num_list(test_list):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    min_value = test_list[0]\n    for num in test_list:\n        if num < min_value:\n            min_value = num\n    return min_value\n    \ndef find_min_dict_return_num_dict(test_list):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    min_value = test_list[0]\n    for num in test_list:\n        if num < min_value:\n            min_value = num\n    return {'min': min_value}\n    \ndef find_min_dict_return_num_dict_with_index(test_list):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    min_value = test_list[0]\n    for num in test_list:\n        if num < min_value:\n            min_value = num\n    return {'min': min_value, 'index': test_list.index(min_value)}\n    \ndef find_min_dict_return_num_dict_with_index_and_return_list(test_list):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    min_value = test_list[0]\n    for num in test_list:\n        if num < min_value:\n            min_value = num\n    return {'min': min_value, 'index': test_list.index(min_value)}\n    \ndef find_min_list_return_list(test_list):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    min_value = test_list[0]\n    for num in test_list:\n        if num < min_value:\n            min_value = num\n    return [min_value]\n    \ndef find_min_list_return_num_list(test_list):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    min_value = test_list[0]\n    for num in test_list:\n        if num < min_value:\n            min_value = num\n    return min_value\n    \ndef find_min_list_return_num_dict(test_list):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    min_value = test_list[0]\n    for num in test_list:\n        if num < min_value:\n            min_value = num\n    return {'min': min_value}\n    \ndef find_min_list_return_num_dict_with_index(test_list):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    min_value = test_list[0]\n    for num in test_list:\n        if num < min_value:\n            min_value = num\n    return {'min': min_value, 'index': test_list.index(min_value)}\n    \ndef find_min_list_return_num_dict_with_index_and_return_list(test_list):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    min_value = test_list[0]\n    for num in tes"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    if len(test_str) == 0:\n        return max_count\n    for i in range(0, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # counter=0\n    # max_count=0\n    # for i in range(0,len(test_str)):\n    #     if test_str[i].isupper():\n    #         counter=counter+1\n    #         if counter>max_count:\n    #             max_count=counter\n    #     else:\n    #         counter=0\n    # print(max_count)\n    # return max_count\n    \n    #     return max_count\n    # else:\n    #     print(\"No Upper case in the string\")\n    \n    \n    # upper_count=0\n    # for i in range(0,len(test_str)):\n    #     if test_str[i].isupper():\n    #         upper_count=upper_count+1\n    #     else:\n    #         upper_count=0\n    # return upper_count\n    \n    return max(map(len,re.findall('[A-Z]', test_str)))\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            return n\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odds = []\n    for i in nums:\n        if i % 2!= 0:\n            odds.append(i)\n    return odds[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2 == 0:\n            pass\n        else:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    print(nums)\n    for i in nums:\n        if i % 2!= 0:\n            return i\n        else:\n            continue\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # My solution\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # N = len(test_tup)\n    # # print(N)\n    # for i in range(0, N):\n    #     for j in range(0, N):\n    #         if K == test_tup[i][j]:\n    #             return True\n    # return False\n    return K in [x for x, y, z in test_tup]\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_tuple = []\n    for tup in K:\n        if test_tup[0] in tup and test_tup[1] in tup:\n            k_tuple.append(tup)\n    return k_tuple\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in K:\n        if i in test_tup:\n            count = count+1\n    if count == len(K):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    result = False\n    if test_tup in K:\n        result = True\n    return result\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Hint: use tuples to help you\n    if K in test_tup:\n        return True\n    else:\n        return False\n    \ndef display_dict(K, D):\n    '''\n    Write a function to display the value of the key K in dictionary D.\n    '''\n    # Hint: use tuples to help you\n    if K in D:\n        return D[K]\n    else:\n        return None\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for el in K:\n        if el in test_tup:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check = False\n    # check for the presence of all the elements in the tuple using for loop\n    for i in test_tup:\n        if i == K:\n            check = True\n            break\n    return check\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(0, len(test_tup)):\n        if(test_tup[i] in K):\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    n = test_tup[0]\n    l = test_tup[1]\n    k = test_tup[2]\n    arr = test_tup[3]\n    if n==0:\n        return arr[0][k-1]\n    for i in range(l):\n        if k-1 < len(arr[i]):\n            if arr[i][k-1]!= 0:\n                return True\n        else:\n            return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    #raise NotImplementedError(\"Problem 2 Incomplete\")\n    if test_tup2[i]<test_tup1[i]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('tup1 and tup2 need to be of same size')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return True\n    elif test_tup1[0] < test_tup2[0]:\n        return False\n    elif test_tup1[1] > test_tup2[1]:\n        return True\n    elif test_tup1[1] < test_tup2[1]:\n        return False\n    elif test_tup1[2] > test_tup2[2]:\n        return True\n    elif test_tup1[2] < test_tup2[2]:\n        return False\n    elif test_tup1[3] > test_tup2[3]:\n        return True\n    elif test_tup1[3] < test_tup2[3]:\n        return False\n    elif test_tup1[4] > test_tup2[4]:\n        return True\n    elif test_tup1[4] < test_tup2[4]:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if all(test_tup1[i]<test_tup2[i] for i in range(len(test_tup1))):\n        return True\n    else:\n        return False\ndef check_greater(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is greater than its corresponding element in the first tuple.\n    '''\n    if all(test_tup1[i]>test_tup2[i] for i in range(len(test_tup1))):\n        return True\n    else:\n        return False\ndef check_sorted(test_tup):\n    '''\n    Write a function to check if each element of second tuple is greater than its corresponding element in the first tuple.\n    '''\n    if all(test_tup[i]<test_tup[i+1] for i in range(len(test_tup)-1)):\n        return True\n    else:\n        return False\ndef sum_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to add two tuples.\n    '''\n    return tuple(test_tup1[i]+test_tup2[i] for i in range(len(test_tup1)))\ndef check_sum(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is greater than its corresponding element in the first tuple.\n    '''\n    if all(test_tup1[i]<test_tup2[i] for i in range(len(test_tup1))):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return [test_tup1[i] < test_tup2[i] for i in range(len(test_tup1))]\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        print(\"Tuple 1: {} is smaller than tuple 2: {}\".format(test_tup1, test_tup2))\n    elif test_tup1[0] == test_tup2[0]:\n        if test_tup1[1] < test_tup2[1]:\n            print(\"Tuple 1: {} is smaller than tuple 2: {}\".format(test_tup1, test_tup2))\n        else:\n            print(\"Tuple 1: {} is equal to tuple 2: {}\".format(test_tup1, test_tup2))\n    else:\n        print(\"Tuple 1: {} is greater than tuple 2: {}\".format(test_tup1, test_tup2))\n    return\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup2[i] < test_tup1[i])\n    return result\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1] and test_tup1[2] < test_tup2[2] and test_tup1[3] < test_tup2[3]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1] and test_tup1[2] < test_tup2[2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for i in range(len(tup1)):\n        if tup1[i] > tup2[i]:\n            return False\n    return True\n"
    }
]