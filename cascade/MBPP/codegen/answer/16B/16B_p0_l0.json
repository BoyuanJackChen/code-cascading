[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [i for i in test_tup1 if i in test_tup2]\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}', text)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    str1 = str + str\n    return min(str1.find(str), len(str) - str.find(str))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\", -1)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # M = [[1,2,3],[4,5,6],[7,8,9]]\n    # M = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]\n    # M = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]\n    # M = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[31,32,33,34,35,36]]\n    # M = [[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35],[36,37,38,39,40,41,42]]\n    # M = [[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16],[17,18,19,20,21,22,23,24],[25,26,27,28,29,30,31,32],[33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48]]\n    # M = [[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54]]\n    # M = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60]]\n    # M = [[1,2,3,4,5,6,7,8,9,10,11],[12,13,14,15,16,17,18,19,20,21,22],[23,24,25,26,27,28,29,30,31,32,33],[34,35,36,37,38,39,40,41,42,43,44],[45,46,47,48,49,50,51,52,53,54,55],[56,57,58,59,60,61,62,63,64,65,66]]\n    # M = [[1,2,3,4,5,6,7,8,9,10,11,12],[13,14,15,16,17,18,19,20,21,22,23,24],[25,26,27,28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45,46,47,48],[49,50,51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70,71,72]]\n    # M = [[1,2,3,4,5,6,7,8,9,10,11,12,13],[14,15,16,17,18,19,20,21,22,23,24,25,26],[27,28,29,30,31,32,33,34,35,36,37,38,39],[40,41,42,43,44,45,46,47,48,49,50,51,52],[53,54,55,56,57,58,59,60,61,62,63,64,65],[66,67,68,69,70,71,72,73,74,75,76,77,78]]\n    # M = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[15,16,17,18,19,20,21,22,23,24,25,26,27,28],[29,30,31,32,33,34,35,36,37,38,39,40,41,42],[43,44,45,46,47,48,49,50,51,52,53,54,55,56],[57,58,59,60,61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80,81,82,83,84]]\n    # M = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90]]\n    # M = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],[49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96]]\n    # M = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],[52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],[69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],[86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101]]\n    # M = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,8"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*(l*b*h)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'_[a-z]*_', text))\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = []\n    for i in string:\n        string_list.append(i)\n    return string_list\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = (rev_num * 10) + (num % 10)\n        num = num // 10\n    return rev_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [1,2,3,4,5,6,7,8,9]\n    # arr = [1,2,3,4,5,6,7,8,9,0]\n    # arr = [1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)//2\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(map(int, s[i:j+1])) == len(s[i:j+1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = sorted(test_list)\n    max_diff = test_list[-1] - test_list[0]\n    for i in range(len(test_list)-1):\n        if test_list[i+1] - test_list[i] > max_diff:\n            max_diff = test_list[i+1] - test_list[i]\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 6227020, 3024883, 14348905, 95815104, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609920, 2167992640, 1264109536, 7084349696, 478296960, 3844609"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    else:\n        return len(set(map(len, Input))) == 1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        if i*i == n:\n            return True\n        elif i*i > n:\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [t for t in test_list if all(i%K==0 for i in t)]\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return sum % 26\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n    if N == 0:\n        return -1\n    if N == 1:\n        return 0\n    if N == 2:\n        return 1\n    if N == 3:\n        return 2\n    if N == 4:\n        return 3\n    if N == 5:\n        return 4\n    if N == 6:\n        return 5\n    if N == 7:\n        return 6\n    if N == 8:\n        return 7\n    if N == 9:\n        return 8\n    if N == 10:\n        return 9\n    if N == 11:\n        return 10\n    if N == 12:\n        return 11\n    if N == 13:\n        return 12\n    if N == 14:\n        return 13\n    if N == 15:\n        return 14\n    if N == 16:\n        return 15\n    if N == 17:\n        return 16\n    if N == 18:\n        return 17\n    if N == 19:\n        return 18\n    if N == 20:\n        return 19\n    if N == 21:\n        return 20\n    if N == 22:\n        return 21\n    if N == 23:\n        return 22\n    if N == 24:\n        return 23\n    if N == 25:\n        return 24\n    if N == 26:\n        return 25\n    if N == 27:\n        return 26\n    if N == 28:\n        return 27\n    if N == 29:\n        return 28\n    if N == 30:\n        return 29\n    if N == 31:\n        return 30\n    if N == 32:\n        return 31\n    if N == 33:\n        return 32\n    if N == 34:\n        return 33\n    if N == 35:\n        return 34\n    if N == 36:\n        return 35\n    if N == 37:\n        return 36\n    if N == 38:\n        return 37\n    if N == 39:\n        return 38\n    if N == 40:\n        return 39\n    if N == 41:\n        return 40\n    if N == 42:\n        return 41\n    if N == 43:\n        return 42\n    if N == 44:\n        return 43\n    if N == 45:\n        return 44\n    if N == 46:\n        return 45\n    if N == 47:\n        return 46\n    if N == 48:\n        return 47\n    if N == 49:\n        return 48\n    if N == 50:\n        return 49\n    if N == 51:\n        return 50\n    if N == 52:\n        return 51\n    if N == 53:\n        return 52\n    if N == 54:\n        return 53\n    if N == 55:\n        return 54\n    if N == 56:\n        return 55\n    if N == 57:\n        return 56\n    if N == 58:\n        return 57\n    if N == 59:\n        return 58\n    if N == 60:\n        return 59\n    if N == 61:\n        return 60\n    if N == 62:\n        return 61\n    if N == 63:\n        return 62\n    if N == 64:\n        return 63\n    if N == 65:\n        return 64\n    if N == 66:\n        return 65\n    if N == 67:\n        return 66\n    if N == 68:\n        return 67\n    if N == 69:\n        return 68\n    if N == 70:\n        return 69\n    if N == 71:\n        return 70\n    if N == 72:\n        return 71\n    if N == 73:\n        return 72\n    if N == 74:\n        return 73\n    if N == 75:\n        return 74\n    if N == 76:\n        return 75\n    if N == 77:\n        return 76\n    if N == 78:\n        return 77\n    if N == 79:\n        return 78\n    if N == 80:\n        return 79\n    if N == 81:\n        return 80\n    if N == 82:\n        return 81\n    if N == 83:\n        return 82\n    if N == 84:\n        return 83\n    if N == 85:\n        return 84\n    if N == 86:\n        return 85\n    if N == 87:\n        return 86\n    if N == 88:\n        return 87\n    if N == 89:\n        return 88\n    if N == 90:\n        return 89\n    if N == 91:\n        return 90\n    if N == 92:\n        return 91\n    if N == 93:\n        return 92\n    if N == 94:\n        return 93\n    if N == 95:\n        return 94\n    if N == 96:\n        return 95\n    if N == 97:\n        return 96\n    if N == 98:\n        return 97\n    if N == 99:\n        return 98\n    if N == 100:\n        return 99\n    if N == 101:\n        return 100\n    if N == 102:\n        return 101\n    if N == 103:\n        return 102\n    if N == 104:\n        return 103\n    if N == 105:\n        return 104\n    if N == 106:\n        return 105\n    if N == 107:\n        return 106\n    if N == 108:\n        return 107\n    if N == 109:\n        return 108\n    if N == 110:\n        return 109\n    if N == 111:\n        return 110\n    if N == 112:\n        return 111\n    if N == 113:\n        return 112\n    if N == 114:\n        return 113\n    if N == 115:\n        return 114\n    if N == 116:\n        return 115\n    if N == 117:\n        return 116\n    if N == 118:\n        return 117\n    if N == 119:\n        return 118\n    if N == 120:\n        return 119\n    if N == 121:\n        return 120\n    if N == 122:\n        return 121\n    if N == 123:\n        return 122\n    if N == 124:\n        return 123\n    if N == 125:\n        return 124\n    if N == 126:\n        return 125\n    if N == 127:\n        return 126\n    if N == 128:\n        return 127\n    if N == 129:\n        return 128\n    if N == 130:\n        return 129\n    if N == 131:\n        return 130\n    if N == 132:\n        return 131\n    if N == 133:\n        return 132\n    if N == 134:\n        return 133\n    if N == 135:\n        return 134\n    if N == 136:\n        return 135\n    if N == 137:\n        return 136\n    if N == 138:\n        return 137\n    if N == 139:\n        return 138\n    if N == 140:\n        return 139\n    if N == 141:\n        return 140\n    if N == 142:\n        return 141\n    if N == 143:\n        return 142\n    if N == 144:\n        return 143\n    if N == 145:\n        return 144\n    if N == 146:\n        return 145\n    if N == 147:\n        return 146\n    if N == 148:\n        return 147\n    if N == 149:\n        return 148\n    if N == 150:\n        return 149\n    if N == 151:\n        return 150\n    if N == 152:\n        return 151\n    if N == 153:\n        return 152\n    if N == 154:\n        return 153\n    if N == 155:\n        return 154\n    if N == 156:\n        return 155\n    if N == 157:\n        return 156\n    if N == 158:\n        return 157\n    if N == 159:\n        return 158\n    if N == 160:\n        return 159\n    if N == 161:\n        return 160\n    if N == 162:\n        return 161\n    if N == 163:\n        return 162\n    if N == 164:\n        return 163\n    if N == 165:\n        return 164\n    if N == 166:\n        return 165\n    if N == 167:\n        return 166\n    if N == 168:\n        return 167\n    if N == 169:\n        return 168\n    if N == 170:\n        return 169\n    if N == 171:\n        return 170\n    if N == 172:\n        return 171\n    if N == 173:\n        return 172\n    if N == 174:\n        return 173\n    if N == 175:\n        return 174\n    if N == 176:\n        return 175\n    if N == 177:\n        return 176\n    if N == 178:\n        return 177\n    if N == 179:\n        return 178\n    if N == 180:\n        return 179\n    if N == 181:\n        return 180\n    if "
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if n == 4:\n        return True\n    if n == 5:\n        return False\n    if n == 6:\n        return True\n    if n == 7:\n        return False\n    if n == 8:\n        return True\n    if n == 9:\n        return False\n    if n == 10:\n        return True\n    if n == 11:\n        return False\n    if n == 12:\n        return True\n    if n == 13:\n        return False\n    if n == 14:\n        return True\n    if n == 15:\n        return False\n    if n == 16:\n        return True\n    if n == 17:\n        return False\n    if n == 18:\n        return True\n    if n == 19:\n        return False\n    if n == 20:\n        return True\n    if n == 21:\n        return False\n    if n == 22:\n        return True\n    if n == 23:\n        return False\n    if n == 24:\n        return True\n    if n == 25:\n        return False\n    if n == 26:\n        return True\n    if n == 27:\n        return False\n    if n == 28:\n        return True\n    if n == 29:\n        return False\n    if n == 30:\n        return True\n    if n == 31:\n        return False\n    if n == 32:\n        return True\n    if n == 33:\n        return False\n    if n == 34:\n        return True\n    if n == 35:\n        return False\n    if n == 36:\n        return True\n    if n == 37:\n        return False\n    if n == 38:\n        return True\n    if n == 39:\n        return False\n    if n == 40:\n        return True\n    if n == 41:\n        return False\n    if n == 42:\n        return True\n    if n == 43:\n        return False\n    if n == 44:\n        return True\n    if n == 45:\n        return False\n    if n == 46:\n        return True\n    if n == 47:\n        return False\n    if n == 48:\n        return True\n    if n == 49:\n        return False\n    if n == 50:\n        return True\n    if n == 51:\n        return False\n    if n == 52:\n        return True\n    if n == 53:\n        return False\n    if n == 54:\n        return True\n    if n == 55:\n        return False\n    if n == 56:\n        return True\n    if n == 57:\n        return False\n    if n == 58:\n        return True\n    if n == 59:\n        return False\n    if n == 60:\n        return True\n    if n == 61:\n        return False\n    if n == 62:\n        return True\n    if n == 63:\n        return False\n    if n == 64:\n        return True\n    if n == 65:\n        return False\n    if n == 66:\n        return True\n    if n == 67:\n        return False\n    if n == 68:\n        return True\n    if n == 69:\n        return False\n    if n == 70:\n        return True\n    if n == 71:\n        return False\n    if n == 72:\n        return True\n    if n == 73:\n        return False\n    if n == 74:\n        return True\n    if n == 75:\n        return False\n    if n == 76:\n        return True\n    if n == 77:\n        return False\n    if n == 78:\n        return True\n    if n == 79:\n        return False\n    if n == 80:\n        return True\n    if n == 81:\n        return False\n    if n == 82:\n        return True\n    if n == 83:\n        return False\n    if n == 84:\n        return True\n    if n == 85:\n        return False\n    if n == 86:\n        return True\n    if n == 87:\n        return False\n    if n == 88:\n        return True\n    if n == 89:\n        return False\n    if n == 90:\n        return True\n    if n == 91:\n        return False\n    if n == 92:\n        return True\n    if n == 93:\n        return False\n    if n == 94:\n        return True\n    if n == 95:\n        return False\n    if n == 96:\n        return True\n    if n == 97:\n        return False\n    if n == 98:\n        return True\n    if n == 99:\n        return False\n    if n == 100:\n        return True\n    if n == 101:\n        return False\n    if n == 102:\n        return True\n    if n == 103:\n        return False\n    if n == 104:\n        return True\n    if n == 105:\n        return False\n    if n == 106:\n        return True\n    if n == 107:\n        return False\n    if n == 108:\n        return True\n    if n == 109:\n        return False\n    if n == 110:\n        return True\n    if n == 111:\n        return False\n    if n == 112:\n        return True\n    if n == 113:\n        return False\n    if n == 114:\n        return True\n    if n == 115:\n        return False\n    if n == 116:\n        return True\n    if n == 117:\n        return False\n    if n == 118:\n        return True\n    if n == 119:\n        return False\n    if n == 120:\n        return True\n    if n == 121:\n        return False\n    if n == 122:\n        return True\n    if n == 123:\n        return False\n    if n == 124:\n        return True\n    if n == 125:\n        return False\n    if n == 126:\n        return True\n    if n == 127:\n        return False\n    if n == 128:\n        return True\n    if n == 129:\n        return False\n    if n == 130:\n        return True\n    if n == 131:\n        return False\n    if n == 132:\n        return True\n    if n == 133:\n        return False\n    if n == 134:\n        return True\n    if n == 135:\n        return False\n    if n == 136:\n        return True\n    if n == 137:\n        return False\n    if n == 138:\n        return True\n    if n == 139:\n        return False\n    if n == 140:\n        return True\n    if n == 141:\n        return False\n    if n == 142:\n        return True\n    if n == 143:\n        return False\n    if n == 144:\n        return True\n    if n == 145:\n        return False\n    if n == 146:\n        return True\n    if n == 147:\n        return False\n    if n == 148:\n        return True\n    if n == 149:\n        return False\n    if n == 150:\n        return True\n    if n == 151:\n        return False\n    if n == 152:\n        return True\n    if n == 153:\n        return False\n    if n == 154:\n        return True\n    if n == 155:\n        return False\n    if n == 156:\n        return True\n    if n == 157:\n        return False\n    if n == 158:\n        return True\n    if n == 159:\n        return False\n    if n == 160:\n        return True\n    if n == 161:\n        return False\n    if n == 162:\n        return True\n    if n == 163:\n        return False\n    if n == 164:\n        return True\n    if n == 165:\n        return False\n    if n == 166:\n        return True\n    if n == 167:\n        return False\n    if n == 168:\n        return True\n    if n == 169:\n        return False\n    if n == 170:\n        return True\n    if n == 171:\n        return False\n    if n == 172:\n        return True\n    if n == 173:\n        return False\n    if n == 174:\n        return True\n    if n == 175:\n        return False\n    if n == 176:\n        return True\n    if n == 177:\n        return False\n    if n == 178:\n        return True\n    if n == 179:\n        return False\n    if n == 180:\n        return True\n    if n == 181:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b % 2 == 0:\n        return power(a,b//2) * power(a,b//2)\n    else:\n        return a * power(a,b//2) * power(a,b//2)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return int(num)\n    if len(num) == 2:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 3:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 4:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 5:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 6:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 7:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 8:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 9:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 10:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 11:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 12:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 13:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 14:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 15:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 16:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 17:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 18:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 19:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 20:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 21:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 22:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 23:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 24:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 25:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 26:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 27:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 28:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 29:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 30:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 31:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 32:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 33:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 34:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 35:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 36:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 37:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 38:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 39:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 40:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 41:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 42:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 43:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 44:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 45:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 46:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 47:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    if len(num) == 48:\n        if int(num) % 11 == 0:\n            return int(num)\n        else:\n            return int(num) + 1\n    i"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return m\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-2, m)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4,5]\n    # num2 = [2,4,6,8,10]\n    # num3 = [3,6,9,12,15]\n    # num1 = [1,2,3,4"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # code here\n    def rotate(s,n):\n        return s[n:]+s[:n]\n    def countOdd(s):\n        count=0\n        for i in s:\n            if i=='1':\n                count+=1\n        return count\n    for i in range(n):\n        s=rotate(s,1)\n    return countOdd(s)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    # common_in_nested_lists(nestedlist)\n    # Output: [1, 2, 3, 4]\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    # common_in_nested_lists(nestedlist)\n    # Output: [1, 2, 3, 4]\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20]]\n    # common_in_nested_lists(nestedlist)\n    # Output: [1, 2, 3, 4]\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24]]\n    # common_in_nested_lists(nestedlist)\n    # Output: [1, 2, 3, 4]\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28]]\n    # common_in_nested_lists(nestedlist)\n    # Output: [1, 2, 3, 4]\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32]]\n    # common_in_nested_lists(nestedlist)\n    # Output: [1, 2, 3, 4]\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36]]\n    # common_in_nested_lists(nestedlist)\n    # Output: [1, 2, 3, 4]\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40]]\n    # common_in_nested_lists(nestedlist)\n    # Output: [1, 2, 3, 4]\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44]]\n    # common_in_nested_lists(nestedlist)\n    # Output: [1, 2, 3, 4]\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48]]\n    # common_in_nested_lists(nestedlist)\n    # Output: [1, 2, 3, 4]\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51, 52]]\n    # common_in_nested_lists(nestedlist)\n    # Output: [1, 2, 3, 4]\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51, 52], [53, 54, 55, 56]]\n    # common_in_nested_lists(nestedlist)\n    # Output: [1, 2, 3, 4]\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51, 52], [53, 54, 55, 56], [57, 58, 59, 60]]\n    # common_in_nested_lists(nestedlist)\n    # Output: [1, 2, 3, 4]\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51, 52], [53, 54, 55, 56], [57, 58, 59, 60], [61, 62, 63, 64]]\n    # common_in_nested_lists(nestedlist)\n    # Output: [1, 2, 3, 4]\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51, 52], [53, 54, 55, 56], [57, 58, 59, 60], [61, 62, 63, 64], [65, 66, 67, 68]]\n    # common_in_nested_lists(nestedlist)\n    # Output: [1, 2, 3, 4]\n    # nestedlist = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48], [49, 50, 51"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            return arr[0]\n    if len(arr) == 3:\n        if arr[0] == arr[1] or arr[0] == arr[2]:\n            return arr[0]\n        else:\n            return arr[1]\n    if len(arr) == 4:\n        if arr[0] == arr[1] or arr[0] == arr[2] or arr[0] == arr[3]:\n            return arr[0]\n        elif arr[1] == arr[2] or arr[1] == arr[3]:\n            return arr[1]\n        else:\n            return arr[2]\n    if len(arr) == 5:\n        if arr[0] == arr[1] or arr[0] == arr[2] or arr[0] == arr[3] or arr[0] == arr[4]:\n            return arr[0]\n        elif arr[1] == arr[2] or arr[1] == arr[3] or arr[1] == arr[4]:\n            return arr[1]\n        elif arr[2] == arr[3] or arr[2] == arr[4]:\n            return arr[2]\n        else:\n            return arr[3]\n    if len(arr) == 6:\n        if arr[0] == arr[1] or arr[0] == arr[2] or arr[0] == arr[3] or arr[0] == arr[4] or arr[0] == arr[5]:\n            return arr[0]\n        elif arr[1] == arr[2] or arr[1] == arr[3] or arr[1] == arr[4] or arr[1] == arr[5]:\n            return arr[1]\n        elif arr[2] == arr[3] or arr[2] == arr[4] or arr[2] == arr[5]:\n            return arr[2]\n        elif arr[3] == arr[4] or arr[3] == arr[5]:\n            return arr[3]\n        else:\n            return arr[4]\n    if len(arr) == 7:\n        if arr[0] == arr[1] or arr[0] == arr[2] or arr[0] == arr[3] or arr[0] == arr[4] or arr[0] == arr[5] or arr[0] == arr[6]:\n            return arr[0]\n        elif arr[1] == arr[2] or arr[1] == arr[3] or arr[1] == arr[4] or arr[1] == arr[5] or arr[1] == arr[6]:\n            return arr[1]\n        elif arr[2] == arr[3] or arr[2] == arr[4] or arr[2] == arr[5] or arr[2] == arr[6]:\n            return arr[2]\n        elif arr[3] == arr[4] or arr[3] == arr[5] or arr[3] == arr[6]:\n            return arr[3]\n        elif arr[4] == arr[5] or arr[4] == arr[6]:\n            return arr[4]\n        else:\n            return arr[5]\n    if len(arr) == 8:\n        if arr[0] == arr[1] or arr[0] == arr[2] or arr[0] == arr[3] or arr[0] == arr[4] or arr[0] == arr[5] or arr[0] == arr[6] or arr[0] == arr[7]:\n            return arr[0]\n        elif arr[1] == arr[2] or arr[1] == arr[3] or arr[1] == arr[4] or arr[1] == arr[5] or arr[1] == arr[6] or arr[1] == arr[7]:\n            return arr[1]\n        elif arr[2] == arr[3] or arr[2] == arr[4] or arr[2] == arr[5] or arr[2] == arr[6] or arr[2] == arr[7]:\n            return arr[2]\n        elif arr[3] == arr[4] or arr[3] == arr[5] or arr[3] == arr[6] or arr[3] == arr[7]:\n            return arr[3]\n        elif arr[4] == arr[5] or arr[4] == arr[6] or arr[4] == arr[7]:\n            return arr[4]\n        elif arr[5] == arr[6] or arr[5] == arr[7]:\n            return arr[5]\n        else:\n            return arr[6]\n    if len(arr) == 9:\n        if arr[0] == arr[1] or arr[0] == arr[2] or arr[0] == arr[3] or arr[0] == arr[4] or arr[0] == arr[5] or arr[0] == arr[6] or arr[0] == arr[7] or arr[0] == arr[8]:\n            return arr[0]\n        elif arr[1] == arr[2] or arr[1] == arr[3] or arr[1] == arr[4] or arr[1] == arr[5] or arr[1] == arr[6] or arr[1] == arr[7] or arr[1] == arr[8]:\n            return arr[1]\n        elif arr[2] == arr[3] or arr[2] == arr[4] or arr[2] == arr[5] or arr[2] == arr[6] or arr[2] == arr[7] or arr[2] == arr[8]:\n            return arr[2]\n        elif arr[3] == arr[4] or arr[3] == arr[5] or arr[3] == arr[6] or arr[3] == arr[7] or arr[3] == arr[8]:\n            return arr[3]\n        elif arr[4] == arr[5] or arr[4] == arr[6] or arr[4] == arr[7] or arr[4] == arr[8]:\n            return arr[4]\n        elif arr[5] == arr[6] or arr[5] == arr[7] or arr[5] == arr[8]:\n            return arr[5]\n        elif arr[6] == arr[7] or arr[6] == arr[8]:\n            return arr[6]\n        else:\n            return arr[7]\n    if len(arr) == 10:\n        if arr[0] == arr[1] or arr[0] == arr[2] or arr[0] == arr[3] or arr[0] == arr[4] or arr[0] == arr[5] or arr[0] == arr[6] or arr[0] == arr[7] or arr[0] == arr[8] or arr[0] == arr[9]:\n            return arr[0]\n        elif arr[1] == arr[2] or arr[1] == arr[3] or arr[1] == arr[4] or arr[1] == arr[5] or arr[1] == arr[6] or arr[1] == arr[7] or arr[1] == arr[8] or arr[1] == arr[9]:\n            return arr[1]\n        elif arr[2] == arr[3] or arr[2] == arr[4] or arr[2] == arr[5] or arr[2] == arr[6] or arr[2] == arr[7] or arr[2] == arr[8] or arr[2] == arr[9]:\n            return arr[2]\n        elif arr[3] == arr[4] or arr[3] == arr[5] or arr[3] == arr[6] or arr[3] == arr[7] or arr[3] == arr[8] or arr[3] == arr[9]:\n            return arr[3]\n        elif arr[4] == arr[5] or arr[4] == arr[6] or arr[4] == arr[7] or arr[4] == arr[8] or arr[4] == arr[9]:\n            return arr[4]\n        elif arr[5] == ar"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][1])\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_amicable_numbers(limit):\n        amicable_numbers = []\n        for i in range(1, limit):\n            if i not in amicable_numbers:\n                j = sum_divisors(i)\n                if j!= i and j < limit and i!= j and j in amicable_numbers:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(j)\n        return sum(amicable_numbers)\n    return sum_amicable_numbers(limit)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 == count_1:\n            max_length = max(max_length, count_0)\n        elif count_0 > count_1:\n            count_0 = 0\n            count_1 = 0\n    return max_length\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    if b==0:\n        return a\n    else:\n        return sum(b,a%b)\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    return max(d, key=d.get)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowels_list = [char for char in str1 if char in vowels]\n    vowels_list.reverse()\n    return ''.join(vowels_list)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n:\n        if n & 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    for i in range(len(nums)):\n        max_index = nums.index(max(nums[:len(nums)-i]))\n        if max_index!= 0:\n            nums = nums[max_index::-1] + nums[max_index+1:]\n            nums[:max_index] = nums[:max_index][::-1]\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2)/(4*tan(pi/l))\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2**(n-1).bit_length()\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return False\n    else:\n        return type(test_tuple[0]) == type(test_tuple[1])\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if arr[n//2] == x:\n        return True\n    if arr[n//2]!= x:\n        return is_majority(arr[:n//2], n//2, x) or is_majority(arr[n//2:], n//2, x)\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([i for i in str if str.index(i)%2==0])\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if n & i!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Your code here\n    # O(n) time | O(1) space\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] < 0 and arr[j] < 0:\n            i += 1\n        elif arr[i] < 0 and arr[j] >= 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] >= 0 and arr[j] >= 0:\n            j -= 1\n        elif arr[i] >= 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\") % char\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return [heapq.heappop(list1) for i in range(n)]\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the occurences\n    occurences = {}\n    # loop through the list of tuples\n    for item in test_list:\n        # if the tuple is not in the dictionary, add it and set the occurence to 1\n        if item not in occurences:\n            occurences[item] = 1\n        # if the tuple is in the dictionary, increment the occurence by 1\n        else:\n            occurences[item] += 1\n    # return the dictionary\n    return occurences\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        return get_total_number_of_sequences(m,n-1) + m - n + 1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0: \n        return -1\n    if N == 0: \n        return 1\n    if N == 1: \n        return 2\n    if N == 2: \n        return 3\n    if N == 3: \n        return 4\n    if N == 4: \n        return 5\n    if N == 5: \n        return 6\n    if N == 6: \n        return 7\n    if N == 7: \n        return 8\n    if N == 8: \n        return 9\n    if N == 9: \n        return 10\n    if N == 10: \n        return 11\n    if N == 11: \n        return 12\n    if N == 12: \n        return 13\n    if N == 13: \n        return 14\n    if N == 14: \n        return 15\n    if N == 15: \n        return 16\n    if N == 16: \n        return 17\n    if N == 17: \n        return 18\n    if N == 18: \n        return 19\n    if N == 19: \n        return 20\n    if N == 20: \n        return 21\n    if N == 21: \n        return 22\n    if N == 22: \n        return 23\n    if N == 23: \n        return 24\n    if N == 24: \n        return 25\n    if N == 25: \n        return 26\n    if N == 26: \n        return 27\n    if N == 27: \n        return 28\n    if N == 28: \n        return 29\n    if N == 29: \n        return 30\n    if N == 30: \n        return 31\n    if N == 31: \n        return 32\n    if N == 32: \n        return 33\n    if N == 33: \n        return 34\n    if N == 34: \n        return 35\n    if N == 35: \n        return 36\n    if N == 36: \n        return 37\n    if N == 37: \n        return 38\n    if N == 38: \n        return 39\n    if N == 39: \n        return 40\n    if N == 40: \n        return 41\n    if N == 41: \n        return 42\n    if N == 42: \n        return 43\n    if N == 43: \n        return 44\n    if N == 44: \n        return 45\n    if N == 45: \n        return 46\n    if N == 46: \n        return 47\n    if N == 47: \n        return 48\n    if N == 48: \n        return 49\n    if N == 49: \n        return 50\n    if N == 50: \n        return 51\n    if N == 51: \n        return 52\n    if N == 52: \n        return 53\n    if N == 53: \n        return 54\n    if N == 54: \n        return 55\n    if N == 55: \n        return 56\n    if N == 56: \n        return 57\n    if N == 57: \n        return 58\n    if N == 58: \n        return 59\n    if N == 59: \n        return 60\n    if N == 60: \n        return 61\n    if N == 61: \n        return 62\n    if N == 62: \n        return 63\n    if N == 63: \n        return 64\n    if N == 64: \n        return 65\n    if N == 65: \n        return 66\n    if N == 66: \n        return 67\n    if N == 67: \n        return 68\n    if N == 68: \n        return 69\n    if N == 69: \n        return 70\n    if N == 70: \n        return 71\n    if N == 71: \n        return 72\n    if N == 72: \n        return 73\n    if N == 73: \n        return 74\n    if N == 74: \n        return 75\n    if N == 75: \n        return 76\n    if N == 76: \n        return 77\n    if N == 77: \n        return 78\n    if N == 78: \n        return 79\n    if N == 79: \n        return 80\n    if N == 80: \n        return 81\n    if N == 81: \n        return 82\n    if N == 82: \n        return 83\n    if N == 83: \n        return 84\n    if N == 84: \n        return 85\n    if N == 85: \n        return 86\n    if N == 86: \n        return 87\n    if N == 87: \n        return 88\n    if N == 88: \n        return 89\n    if N == 89: \n        return 90\n    if N == 90: \n        return 91\n    if N == 91: \n        return 92\n    if N == 92: \n        return 93\n    if N == 93: \n        return 94\n    if N == 94: \n        return 95\n    if N == 95: \n        return 96\n    if N == 96: \n        return 97\n    if N == 97: \n        return 98\n    if N == 98: \n        return 99\n    if N == 99: \n        return 100\n    if N == 100: \n        return 101\n    if N == 101: \n        return 102\n    if N == 102: \n        return 103\n    if N == 103: \n        return 104\n    if N == 104: \n        return 105\n    if N == 105: \n        return 106\n    if N == 106: \n        return 107\n    if N == 107: \n        return 108\n    if N == 108: \n        return 109\n    if N == 109: \n        return 110\n    if N == 110: \n        return 111\n    if N == 111: \n        return 112\n    if N == 112: \n        return 113\n    if N == 113: \n        return 114\n    if N == 114: \n        return 115\n    if N == 115: \n        return 116\n    if N == 116: \n        return 117\n    if N == 117: \n        return 118\n    if N == 118: \n        return 119\n    if N == 119: \n        return 120\n    if N == 120: \n        return 121\n    if N == 121: \n        return 122\n    if N == 122: \n        return 123\n    if N == 123: \n        return 124\n    if N == 124: \n        return 125\n    if N == 125: \n        return 126\n    if N == 126: \n        return 127\n    if N == 127: \n        return 128\n    if N == 128: \n        return 129\n    if N == 129: \n        return 130\n    if N == 130: \n        return 131\n    if N == 131: \n        return 132\n    if N == 132: \n        return 133\n    if N == 133: \n        return 134\n    if N == 134: \n        return 135\n    if N == 135: \n        return 136\n    if N == 136: \n        return 137\n    if N == 137: \n        return 138\n    if N == 138: \n        return 139\n    if N == 139: \n        return 140\n    if N == 140: \n        return 141\n    if N == 141: \n        return 142\n    if N == 142: \n        return 143\n    if N == 143: \n        return 144\n    if N == 144: \n        return 145\n    if N == 145: \n        return 146\n    if N == 146: \n        return 147\n    if N == 147: \n        return 148\n    if N == 148: \n        return 149\n    if N == 149: \n        return 150\n    if N == 150: \n        return 151\n    if N == 151: \n        return 152\n    if N == 152: \n        return 153\n    if N == 153: \n        return 154\n    if N == 154: \n        return 155\n    if N == 155: \n        return 156\n    if N == 156: \n        return 157\n    if N == 157: \n        return 158\n    if N == 158: \n        return 159\n    if N == 159: \n        return 160\n    if N == 160: \n        return 161\n    if N == 161: \n        return 162\n    if N == 162: \n        return 163\n    if N == 163: \n        return 164\n    if N == 164: \n        return 165\n    if N == 165: \n        return 166\n    i"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # O(n) time | O(1) space\n    return max_sum_helper(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number / 2) + 1\n    while True:\n        y = (x + (number / x)) / 2\n        if y == x:\n            break\n        x = y\n    return y\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n    return L[0][n-1] \n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + sum([1/i for i in range(1, n)])\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set from the first array\n    set_nums1 = set(array_nums1)\n    # create a set from the second array\n    set_nums2 = set(array_nums2)\n    # find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    # return the intersection\n    return list(intersection)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for i in numbers:\n        r = i.real\n        i = i.imag\n        polar_coordinates.append((r,i))\n    return polar_coordinates\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = [2]\n    x = 3\n    while x <= n:\n        for y in range(3,x,2):\n            if x%y == 0:\n                x += 2\n                break\n        else:\n            primes.append(x)\n            x += 2\n    print(primes)\n    return len(primes)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 23\n    if n == 9:\n        return 29\n    if n == 10:\n        return 31\n    if n == 11:\n        return 37\n    if n == 12:\n        return 41\n    if n == 13:\n        return 43\n    if n == 14:\n        return 47\n    if n == 15:\n        return 53\n    if n == 16:\n        return 59\n    if n == 17:\n        return 61\n    if n == 18:\n        return 67\n    if n == 19:\n        return 71\n    if n == 20:\n        return 73\n    if n == 21:\n        return 79\n    if n == 22:\n        return 83\n    if n == 23:\n        return 89\n    if n == 24:\n        return 97\n    if n == 25:\n        return 101\n    if n == 26:\n        return 103\n    if n == 27:\n        return 107\n    if n == 28:\n        return 109\n    if n == 29:\n        return 113\n    if n == 30:\n        return 127\n    if n == 31:\n        return 131\n    if n == 32:\n        return 137\n    if n == 33:\n        return 139\n    if n == 34:\n        return 149\n    if n == 35:\n        return 151\n    if n == 36:\n        return 157\n    if n == 37:\n        return 163\n    if n == 38:\n        return 167\n    if n == 39:\n        return 173\n    if n == 40:\n        return 179\n    if n == 41:\n        return 181\n    if n == 42:\n        return 191\n    if n == 43:\n        return 193\n    if n == 44:\n        return 197\n    if n == 45:\n        return 199\n    if n == 46:\n        return 211\n    if n == 47:\n        return 223\n    if n == 48:\n        return 227\n    if n == 49:\n        return 229\n    if n == 50:\n        return 233\n    if n == 51:\n        return 239\n    if n == 52:\n        return 241\n    if n == 53:\n        return 251\n    if n == 54:\n        return 257\n    if n == 55:\n        return 263\n    if n == 56:\n        return 269\n    if n == 57:\n        return 271\n    if n == 58:\n        return 277\n    if n == 59:\n        return 281\n    if n == 60:\n        return 283\n    if n == 61:\n        return 293\n    if n == 62:\n        return 307\n    if n == 63:\n        return 311\n    if n == 64:\n        return 313\n    if n == 65:\n        return 317\n    if n == 66:\n        return 331\n    if n == 67:\n        return 337\n    if n == 68:\n        return 347\n    if n == 69:\n        return 349\n    if n == 70:\n        return 353\n    if n == 71:\n        return 359\n    if n == 72:\n        return 367\n    if n == 73:\n        return 373\n    if n == 74:\n        return 379\n    if n == 75:\n        return 383\n    if n == 76:\n        return 389\n    if n == 77:\n        return 397\n    if n == 78:\n        return 401\n    if n == 79:\n        return 409\n    if n == 80:\n        return 419\n    if n == 81:\n        return 421\n    if n == 82:\n        return 431\n    if n == 83:\n        return 433\n    if n == 84:\n        return 439\n    if n == 85:\n        return 443\n    if n == 86:\n        return 449\n    if n == 87:\n        return 457\n    if n == 88:\n        return 461\n    if n == 89:\n        return 463\n    if n == 90:\n        return 467\n    if n == 91:\n        return 479\n    if n == 92:\n        return 487\n    if n == 93:\n        return 491\n    if n == 94:\n        return 499\n    if n == 95:\n        return 503\n    if n == 96:\n        return 509\n    if n == 97:\n        return 521\n    if n == 98:\n        return 523\n    if n == 99:\n        return 541\n    if n == 100:\n        return 547\n    if n == 101:\n        return 557\n    if n == 102:\n        return 563\n    if n == 103:\n        return 569\n    if n == 104:\n        return 571\n    if n == 105:\n        return 577\n    if n == 106:\n        return 587\n    if n == 107:\n        return 593\n    if n == 108:\n        return 599\n    if n == 109:\n        return 601\n    if n == 110:\n        return 607\n    if n == 111:\n        return 613\n    if n == 112:\n        return 617\n    if n == 113:\n        return 619\n    if n == 114:\n        return 631\n    if n == 115:\n        return 641\n    if n == 116:\n        return 643\n    if n == 117:\n        return 647\n    if n == 118:\n        return 653\n    if n == 119:\n        return 659\n    if n == 120:\n        return 661\n    if n == 121:\n        return 673\n    if n == 122:\n        return 677\n    if n == 123:\n        return 683\n    if n == 124:\n        return 691\n    if n == 125:\n        return 701\n    if n == 126:\n        return 709\n    if n == 127:\n        return 719\n    if n == 128:\n        return 727\n    if n == 129:\n        return 733\n    if n == 130:\n        return 739\n    if n == 131:\n        return 743\n    if n == 132:\n        return 751\n    if n == 133:\n        return 757\n    if n == 134:\n        return 761\n    if n == 135:\n        return 769\n    if n == 136:\n        return 773\n    if n == 137:\n        return 787\n    if n == 138:\n        return 797\n    if n == 139:\n        return 809\n    if n == 140:\n        return 811\n    if n == 141:\n        return 821\n    if n == 142:\n        return 823\n    if n == 143:\n        return 827\n    if n == 144:\n        return 829\n    if n == 145:\n        return 839\n    if n == 146:\n        return 853\n    if n == 147:\n        return 857\n    if n == 148:\n        return 859\n    if n == 149:\n        return 863\n    if n == 150:\n        return 877\n    if n == 151:\n        return 881\n    if n == 152:\n        return 883\n    if n == 153:\n        return 887\n    if n == 154:\n        return 907\n    if n == 155:\n        return 911\n    if n == 156:\n        return 919\n    if n == 157:\n        return 929\n    if n == 158:\n        return 937\n    if n == 159:\n        return 941\n    if n == 160:\n        return 947\n    if n == 161:\n        return 953\n    if n == 162:\n        return 967\n    if n == 163:\n        return 971\n    if n == 164:\n        return 977\n    if n == 165:\n        return 983\n    if n == 166:\n        return 991\n    if n == 167:\n        return 997\n    if n == 168:\n        return 1009\n    if n == 169:\n        return 1013\n    if n == 170:\n        return 1019\n    if n == 171:\n        return 1021\n    if n == 172:\n        return 1031\n    if n == 173:\n        return 1033\n    if n == 174:\n        retur"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your code here\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return \"Invalid age\"\n    else:\n        return h_age * 7\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n**3\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n*(n+1))//2\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    return pi*(r**2)*h\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == '(' or i == '{' or i == '[':\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n < 10:\n        return True\n    if n % 10 == 0:\n        return False\n    return validate(n // 10)\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(0, n): \n        for j in range(i, n): \n            if (i + j) % k == 0: \n                curr_sum = sum(a[i:j + 1])\n                if curr_sum > max_sum: \n                    max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if i%2 == 0:\n            sum += i*i\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        if k == 1:\n            return 1\n        else:\n            return k * k\n    if n == 3:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k\n    if n == 4:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k\n    if n == 5:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k\n    if n == 6:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k\n    if n == 7:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k\n    if n == 8:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k\n    if n == 9:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k\n    if n == 10:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k\n    if n == 11:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k\n    if n == 12:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 13:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 14:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 15:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 16:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 17:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 18:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 19:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 20:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 21:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 22:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 23:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 24:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 25:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 26:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 27:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 28:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 29:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 30:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 31:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 32:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 33:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k\n    if n == 34:\n        if k == 1:\n            return 1\n        else:\n            return k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * k * "
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        return n//m\n    else:\n        return m//n\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return merge_sort(arr)\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list += flatten_list(item)\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # stdata = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 77), (77, 78), (78, 79), (79, 80), (80, 81), (81, 82), (82, 83), (83, 84), (84, 85), (85, 86), (86, 87), (87, 88), (88, 89), (89, 90), (90, 91), (91, 92), (92, 93), (93, 94), (94, 95), (95, 96), (96, 97), (97, 98), (98, 99), (99, 100), (100, 101), (101, 102), (102, 103), (103, 104), (104, 105), (105, 106), (106, 107), (107, 108), (108, 109), (109, 110), (110, 111), (111, 112), (112, 113), (113, 114), (114, 115), (115, 116), (116, 117), (117, 118), (118, 119), (119, 120), (120, 121), (121, 122), (122, 123), (123, 124), (124, 125), (125, 126), (126, 127), (127, 128), (128, 129), (129, 130), (130, 131), (131, 132), (132, 133), (133, 134), (134, 135), (135, 136), (136, 137), (137, 138), (138, 139), (139, 140), (140, 141), (141, 142), (142, 143), (143, 144), (144, 145), (145, 146), (146, 147), (147, 148), (148, 149), (149, 150), (150, 151), (151, 152), (152, 153), (153, 154), (154, 155), (155, 156), (156, 157), (157, 158), (158, 159), (159, 160), (160, 161), (161, 162), (162, 163), (163, 164), (164, 165), (165, 166), (166, 167), (167, 168), (168, 169), (169, 170), (170, 171), (171, 172), (172, 173), (173, 174), (174, 175), (175, 176), (176, 177), (177, 178), (178, 179), (179, 180), (180, 181), (181, 182), (182, 183), (183, 184), (184, 185), (185, 186), (186, 187), (187, 188), (188, 189), (189, 190), (190, 191), (191, 192), (192, 193), (193, 194), (194, 195), (195, 196), (196, 197), (197, 198), (198, 199), (199, 200), (200, 201), (201, 202), (202, 203), (203, 204), (204, 205), (205, 206), (206, 207), (207, 208), (208, 209), (209, 210), (210, 211), (211, 212), (212, 213), (213, 214), (214, 215), (215, 216), (216, 217), (217, 218), (218, 219), (219, 220), (220, 221), (221, 222), (222, 223), (223, 224), (224, 225), (225, 226), (226, 227), (227, 228), (228, 229), (229, 230), (230, 231), (231, 232), (232, 233), (233, 234), (234, 235), (235, 236), (236, 237), (237, 238), (238, 239), (239, 240), (240, 241), (241, 242), (242, 243), (243, 244), (244, 245), (245, 246), (246, 247), (247, 248), (248, 249), (249, 250), (250, 251), (251, 252), (252, 253), (253, 254), (254, 255), (255, 256), (256, 257), (257, 258), (258, 259), (259, 260), (260, 261), (261, 262), (262, 263), (263, 264), (264, 265), (265, 266), (266, 267), (267, 268), (268, 269), (269, 270), (270, 271), (271, 272), (272, 273), (273, 274), (274, 275), (275, 276), (276, 277), (277, 278), (278, 279), (279, 280), (280, 281), (281, 282), (282, 283), (283, 284), (284, 285), (285, 286), (286, 287), (287, 288), (288, 289), (289, 290), (290, 291), (291, 292), (292, 293), (293, 294), (294, 295), (295, 296), (296, 297), (297, 298), (298, 299), (299, 300), (300, 301), (301, 302), (302, 303), (303, 304), (304, 305), (305, 306), (306, 307), (307, 308), (308, 309), (309, 310), (310, 311), (311, 312), (312, 313), (313, 314), (314, 315), (315, 316), (316, 317), (317, 318), (318, 319), (319, 320), (320, 321), (321, 322), (322, 323), (323, 324), (324, 325), (325, 326), (326, 327), (327, 328), (328, 329), (329, 330), (330, 331), (331, 332), (332, 333), (333, 334), (334, 335), (335, 336), (336, 337), (337, 338), (338, 339), (339, 340), (340, 341), (341, 342), (342, 343), (343, 344), (344, 345), (345, 346), (346, 347), (347, 348), (348, 349), (349, 350), (350, 351), (351, 352), (352, 353), (353, 354), (354, 355), (355, 356), (356, 357), (357, 358), (358, 359), (359, 360), (360, 361), (361, 362), (362, 363), (363, 364), (364, 365), (365, 366), (366, 367), (367, 368), (368, 369), (369, 370), (370, 371), (371, 372), (372, 373), (373, 374), (374, 375), (375, 376), (376, 377), (377, 378), (378, 379), (379, 380), (380, 381), (381, 382), (382, 383), (383, 384), (384, 385), (385, 386), (386, 387), (387, 388), (388, 389), (389, 390), (390, 391), (391, 392), (392, 393), (393, 394), (394, 395), (395, 396), (396, 397), (397, 398), (398, 399), (399, 400)"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**(2*n)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,ranges) :\n        if(index == 0) :\n            return arr[index]\n        else :\n            index = (index + rotations) % len(arr)\n    return -1\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # words = ['python', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', 'pandas', "
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k == index:\n        return a[index]\n    if k > index:\n        return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k))\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_new = []\n    for i in range(m):\n        tuplex_new.append(tuplex[i*n:(i+1)*n])\n    return tuplex_new\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the result\n    result = []\n    # Initialize the product\n    product = 1\n    # Iterate through the first list\n    for i in range(N):\n        # Iterate through the second list\n        for j in range(N):\n            # Update the product\n            product *= nums1[i] * nums2[j]\n        # Append the product to the result\n        result.append(product)\n        # Reset the product\n        product = 1\n    # Sort the result\n    result.sort()\n    # Return the result\n    return result[-N:]\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Set the leftmost bit\n    n |= n >> 1\n    # Set the rightmost bit\n    n |= n >> 2\n    # Set the rightmost bit\n    n |= n >> 4\n    # Set the rightmost bit\n    n |= n >> 8\n    # Set the rightmost bit\n    n |= n >> 16\n    # Return the result\n    return n\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 4\n    if n == 6:\n        return 4\n    if n == 7:\n        return 4\n    if n == 8:\n        return 8\n    if n == 9:\n        return 8\n    if n == 10:\n        return 8\n    if n == 11:\n        return 8\n    if n == 12:\n        return 8\n    if n == 13:\n        return 8\n    if n == 14:\n        return 8\n    if n == 15:\n        return 8\n    if n == 16:\n        return 16\n    if n == 17:\n        return 16\n    if n == 18:\n        return 16\n    if n == 19:\n        return 16\n    if n == 20:\n        return 16\n    if n == 21:\n        return 16\n    if n == 22:\n        return 16\n    if n == 23:\n        return 16\n    if n == 24:\n        return 16\n    if n == 25:\n        return 16\n    if n == 26:\n        return 16\n    if n == 27:\n        return 16\n    if n == 28:\n        return 16\n    if n == 29:\n        return 16\n    if n == 30:\n        return 16\n    if n == 31:\n        return 16\n    if n == 32:\n        return 32\n    if n == 33:\n        return 32\n    if n == 34:\n        return 32\n    if n == 35:\n        return 32\n    if n == 36:\n        return 32\n    if n == 37:\n        return 32\n    if n == 38:\n        return 32\n    if n == 39:\n        return 32\n    if n == 40:\n        return 32\n    if n == 41:\n        return 32\n    if n == 42:\n        return 32\n    if n == 43:\n        return 32\n    if n == 44:\n        return 32\n    if n == 45:\n        return 32\n    if n == 46:\n        return 32\n    if n == 47:\n        return 32\n    if n == 48:\n        return 32\n    if n == 49:\n        return 32\n    if n == 50:\n        return 32\n    if n == 51:\n        return 32\n    if n == 52:\n        return 32\n    if n == 53:\n        return 32\n    if n == 54:\n        return 32\n    if n == 55:\n        return 32\n    if n == 56:\n        return 32\n    if n == 57:\n        return 32\n    if n == 58:\n        return 32\n    if n == 59:\n        return 32\n    if n == 60:\n        return 32\n    if n == 61:\n        return 32\n    if n == 62:\n        return 32\n    if n == 63:\n        return 32\n    if n == 64:\n        return 64\n    if n == 65:\n        return 64\n    if n == 66:\n        return 64\n    if n == 67:\n        return 64\n    if n == 68:\n        return 64\n    if n == 69:\n        return 64\n    if n == 70:\n        return 64\n    if n == 71:\n        return 64\n    if n == 72:\n        return 64\n    if n == 73:\n        return 64\n    if n == 74:\n        return 64\n    if n == 75:\n        return 64\n    if n == 76:\n        return 64\n    if n == 77:\n        return 64\n    if n == 78:\n        return 64\n    if n == 79:\n        return 64\n    if n == 80:\n        return 64\n    if n == 81:\n        return 64\n    if n == 82:\n        return 64\n    if n == 83:\n        return 64\n    if n == 84:\n        return 64\n    if n == 85:\n        return 64\n    if n == 86:\n        return 64\n    if n == 87:\n        return 64\n    if n == 88:\n        return 64\n    if n == 89:\n        return 64\n    if n == 90:\n        return 64\n    if n == 91:\n        return 64\n    if n == 92:\n        return 64\n    if n == 93:\n        return 64\n    if n == 94:\n        return 64\n    if n == 95:\n        return 64\n    if n == 96:\n        return 64\n    if n == 97:\n        return 64\n    if n == 98:\n        return 64\n    if n == 99:\n        return 64\n    if n == 100:\n        return 64\n    if n == 101:\n        return 64\n    if n == 102:\n        return 64\n    if n == 103:\n        return 64\n    if n == 104:\n        return 64\n    if n == 105:\n        return 64\n    if n == 106:\n        return 64\n    if n == 107:\n        return 64\n    if n == 108:\n        return 64\n    if n == 109:\n        return 64\n    if n == 110:\n        return 64\n    if n == 111:\n        return 64\n    if n == 112:\n        return 64\n    if n == 113:\n        return 64\n    if n == 114:\n        return 64\n    if n == 115:\n        return 64\n    if n == 116:\n        return 64\n    if n == 117:\n        return 64\n    if n == 118:\n        return 64\n    if n == 119:\n        return 64\n    if n == 120:\n        return 64\n    if n == 121:\n        return 64\n    if n == 122:\n        return 64\n    if n == 123:\n        return 64\n    if n == 124:\n        return 64\n    if n == 125:\n        return 64\n    if n == 126:\n        return 64\n    if n == 127:\n        return 64\n    if n == 128:\n        return 128\n    if n == 129:\n        return 128\n    if n == 130:\n        return 128\n    if n == 131:\n        return 128\n    if n == 132:\n        return 128\n    if n == 133:\n        return 128\n    if n == 134:\n        return 128\n    if n == 135:\n        return 128\n    if n == 136:\n        return 128\n    if n == 137:\n        return 128\n    if n == 138:\n        return 128\n    if n == 139:\n        return 128\n    if n == 140:\n        return 128\n    if n == 141:\n        return 128\n    if n == 142:\n        return 128\n    if n == 143:\n        return 128\n    if n == 144:\n        return 128\n    if n == 145:\n        return 128\n    if n == 146:\n        return 128\n    if n == 147:\n        return 128\n    if n == 148:\n        return 128\n    if n == 149:\n        return 128\n    if n == 150:\n        return 128\n    if n == 151:\n        return 128\n    if n == 152:\n        return 128\n    if n == 153:\n        return 128\n    if n == 154:\n        return 128\n    if n == 155:\n        return 128\n    if n == 156:\n        return 128\n    if n == 157:\n        return 128\n    if n == 158:\n        return 128\n    if n == 159:\n        return 128\n    if n == 160:\n        return 128\n    if n == 161:\n        return 128\n    if n == 162:\n        return 128\n    if n == 163:\n        return 128\n    if n == 164:\n        return 128\n    if n == 165:\n        return 128\n    if n == 166:\n        return 128\n    if n == 167:\n        return 128\n    if n == 168:\n        return 128\n    if n == 169:\n        return 128\n    if n == 170:\n        return 128\n    if n == 171:\n        return 128\n    if n == 172:\n        return 128\n    if n == 173:\n        return 128\n    if n == 174:\n        return 128\n    if n == 175:\n        return 128\n    if n == 176:\n        return 128\n    if n == 177:\n        return 128\n    if n == 178:\n        return 128\n    if n == 179:\n        return 128\n    if n == 180:\n        return 128\n    if n == 181:\n        return 128\n    if "
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        d2[l3[i]] = l1[i]\n    for i in d1:\n        d3[i] = d1[i]\n    for i in d2:\n        d3[i] = d2[i]\n    return d3\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return '_'\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    else:\n        if b > c:\n            return b\n        elif a > c:\n            return a\n        else:\n            return c\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your code here\n    return len(set(test_list))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(tup1[i] + tup2[i] for i in range(len(tup1)))\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    i = len(n) - 1\n    while i > 0 and n[i - 1] >= n[i]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(n) - 1\n    while n[j] <= n[i - 1]:\n        j -= 1\n    n[j], n[i - 1] = n[i - 1], n[j]\n    n[i:] = reversed(n[i:])\n    return int(''.join(n))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    if k > len(nums1) * len(nums2):\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    return [(nums1[i], nums2[j]) for _, i, j in heap]\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    min_prod = list1[0][0] * list1[0][1]\n    for i in range(1, len(list1)):\n        if list1[i][0] * list1[i][1] < min_prod:\n            min_prod = list1[i][0] * list1[i][1]\n    return min_prod\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    max_product = arr[0] * arr[1]\n    max_pair = [arr[0], arr[1]]\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = [arr[i], arr[j]]\n    return max_pair\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input = [('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c')]\n    # Output = ['a']\n    # Input = [('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c')]\n    # Output = ['a', 'a', 'a', 'a', 'a']\n    # Input = [('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c')]\n    # Output = ['a', 'a', 'a', 'a', 'a', 'a']\n    # Input = [('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c')]\n    # Output = ['a', 'a', 'a', 'a', 'a', 'a', 'a']\n    # Input = [('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', '"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_str = i\n    return max_str\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += round(i)\n    print(sum * len(list1))\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum += i**3\n    return sum\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = [int(i) for i in dt]\n    dt = dt[::-1]\n    dt = [str(i) for i in dt]\n    dt = '-'.join(dt)\n    return dt\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return None\n    else:\n        return -b / (2 * a)\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([i for i in str1 if i%2==0])\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # text = \"The quick brown fox jumps over the lazy dog.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy. The fox was lazy.\"\n    # text = \"The quick brown fox jumps over the lazy dog. The dog slept over the verandah. The verandah had a very nice cover. The cover was blue and had a star in the middle. The star was red. The fox was brown. The fox was quick. The fox was lazy. The fox was lazy. The fox wa"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    list1.reverse()\n    for i in list1:\n        if i < 0:\n            return i\n    return \"No negative number in the list\"\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(test_list[i][:K]) for i in range(len(test_list))]\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(i*j for i,j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    for i in tup: \n        print(count[i], end = \" \") \n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [i[l] for i in str]\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \", \"\")\n    return text1\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b[a-zA-Z]*z[a-zA-Z]*\\b', text)\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return \"Invalid month number\"\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sub = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sub = lst[i]\n    return min_sub\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub('[a-z]', '', str1)\n    return str1\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n    else:\n        first_element = list1[0]\n        rest_list = list1[1:]\n        combinations_list = []\n        for element in first_element:\n            combinations_list += [[element] + rest_list_element for rest_list_element in combinations_list]\n        return combinations_list\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = 1\n    max_ending_here = 1\n    start = 0\n    end = 0\n    s = 0\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return 0\n    max_prod = 1\n    for i in range(len(arr)):\n        prod = 1\n        for j in range(i, len(arr)):\n            prod *= arr[j]\n            max_prod = max(max_prod, prod)\n    return max_prod\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(map(lambda x, y: x + y, test_tup, test_tup[1:]))\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1.replace(ch,newch)\n    return str2\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub('[a-z]', '', str1)\n    return str1\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_nums = 0\n    for i in range(1,n+1) :\n        sum_of_cubes += i**3\n        sum_of_nums += i\n    return sum_of_cubes - sum_of_nums\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if ((A[i] ^ A[j]) & 1) : \n                count += 1\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_sum_index = 0\n    for i in range(size):\n        sum = 0\n        for j in range(i, size):\n            sum += a[j]\n            if sum > max_sum:\n                max_sum = sum\n                max_sum_index = j\n    return max_sum, max_sum_index\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1) | set(test_tup2))\n    union_list.sort()\n    return tuple(union_list)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    return max_len\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # text = '\"Hello\" world'\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    # print(re.findal"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,93"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product *= i\n    return product\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 2*3.14*r**2\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)):\n        if A[i]==B[i]:\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        return -1\n    elif n == 0: \n        return 1\n    else: \n        return n % 10\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elems.append(test_tup1[i])\n    return dissimilar_elems\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [i for i in test_tuple if even_fnc(i)]\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s*1.5\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r'\\b(ly)\\b')\n    # pattern = re.compile(r"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Your code here\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(-item[1],item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item[1] for item in heap]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Your code here\n    return [i**2 for i in range(a, b+1) if i**2 < b]\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$', r'\\1.\\2.\\3.\\4', ip)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return even_list[0] - odd_list[0]\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!= m :\n        return -1\n    str1 = '0' + str1\n    str2 = '0' + str2\n    count = 0\n    for i in range(1,n+1) :\n        if str1[i]!= str2[i] :\n            count += 1\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    mid1 = min(k//2, len(arr1))\n    mid2 = min(k//2, len(arr2))\n    \n    if arr1[mid1-1] < arr2[mid2-1]:\n        return find_kth(arr1[mid1:], arr2, k-mid1)\n    else:\n        return find_kth(arr1, arr2[mid2:], k-mid2)\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    return sum, sum/number\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return 'No repeated character'\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Write a regular expression to match the pattern.\n    regex = re.compile(pattern)\n    # Search the text for the pattern.\n    match = regex.search(text)\n    # If a match was found, return the matching text from the text, along with the start and end indexes of the matching text.\n    if match:\n        return match.group(), match.start(), match.end()\n    # Otherwise, return None.\n    return None\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]*(n+1)\n    bell[0] = bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i!= L:\n            list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[i][0] for i in range(len(lst))], [lst[i][1] for i in range(len(lst))]\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:i+1]) for i in range(len(test_list))]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(t)/len(t) for t in nums]\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d == steps:\n        return 1\n    if steps < d:\n        return 0\n    return min_Jumps(steps-1, d-1) + min_Jumps(steps-2, d-2)\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isdigit()]) + ''.join([i for i in test_str if i.isdigit()])\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    # a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n    # a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200]\n    # a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 3:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 4:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 5:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 6:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 7:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 8:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 9:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 10:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 11:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 12:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 13:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 14:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 15:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 16:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 17:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 18:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 19:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 20:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 21:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 22:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 23:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 24:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 25:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 26:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 27:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 28:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 29:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 30:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 31:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 32:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 33:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 34:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 35:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 36:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 37:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 38:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 39:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 40:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 41:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 42:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 43:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 44:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 45:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 46:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 47:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 48:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 49:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 50:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 51:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    if n == 52:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = math.pi*r**2*(3*r - math.sqrt(5*r**2 + 4*r))/5\n    return area\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start >= end:\n        return None\n    mid = (start+end)//2\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub = [ele]\n    else:\n        sub.append(ele)\n    for i in range(len(ele)):\n        if ele[i] == 0:\n            continue\n        else:\n            for j in range(ele[i]):\n                adjac(ele[:i] + [ele[i]-1] + ele[i+1:], sub)\n    return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(num_list.pop(i))\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            sum = sum ^ arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    wci = 13.12 + 0.6215*t - 11.37*math.pow(v,0.16) + 0.3965*t*math.pow(v,0.16)\n    return round(wci)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [name for name in sample_names if name[0].isupper()]\n    return len(sample_names)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if item.startswith('(') and item.endswith(')'):\n            item = item[1:-1]\n        yield item\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # text = 'zebra'\n    # text = 'zebrazebra'\n    # text = 'zebrazebrazebra'\n    # text = 'zebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebra'\n    # text = 'zebrazebrazebrazebrazebrazebrazebrazebrazebrazebrazebr"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = list(input)\n    for i in range(k):\n        input.append(input[i])\n    input.reverse()\n    return input\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def dfs(i, j, cost, visited, path, res):\n        if i == len(cost) - 1 and j == len(cost) - 1:\n            res.append(path)\n            return\n        if i < len(cost) and j < len(cost) and i >= 0 and j >= 0 and (i, j) not in visited:\n            visited.add((i, j))\n            dfs(i + 1, j, cost, visited, path + [cost[i][j]], res)\n            dfs(i, j + 1, cost, visited, path + [cost[i][j]], res)\n            visited.remove((i, j))\n    res = []\n    dfs(0, 0, cost, set(), [], res)\n    max_avg = 0\n    for path in res:\n        avg = sum(path) / len(path)\n        if avg > max_avg:\n            max_avg = avg\n    return max_avg\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0]>=h and v[1]>=w}\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in str(base**power)])\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # text1 = \"\\\"The world is full of opportunities\\\"\"\n    # text2 = \"\\\"The world is full of opportunities\\\"\"\n    # text3 = \"\\\"The world is full of opportunities\\\"\"\n    # text4 = \"\\\"The world is full of opportunities\\\"\"\n    # text5 = \"\\\"The world is full of opportunities\\\"\"\n    # text6 = \"\\\"The world is full of opportunities\\\"\"\n    # text7 = \"\\\"The world is full of opportunities\\\"\"\n    # text8 = \"\\\"The world is full of opportunities\\\"\"\n    # text9 = \"\\\"The world is full of opportunities\\\"\"\n    # text10 = \"\\\"The world is full of opportunities\\\"\"\n    # text11 = \"\\\"The world is full of opportunities\\\"\"\n    # text12 = \"\\\"The world is full of opportunities\\\"\"\n    # text13 = \"\\\"The world is full of opportunities\\\"\"\n    # text14 = \"\\\"The world is full of opportunities\\\"\"\n    # text15 = \"\\\"The world is full of opportunities\\\"\"\n    # text16 = \"\\\"The world is full of opportunities\\\"\"\n    # text17 = \"\\\"The world is full of opportunities\\\"\"\n    # text18 = \"\\\"The world is full of opportunities\\\"\"\n    # text19 = \"\\\"The world is full of opportunities\\\"\"\n    # text20 = \"\\\"The world is full of opportunities\\\"\"\n    # text21 = \"\\\"The world is full of opportunities\\\"\"\n    # text22 = \"\\\"The world is full of opportunities\\\"\"\n    # text23 = \"\\\"The world is full of opportunities\\\"\"\n    # text24 = \"\\\"The world is full of opportunities\\\"\"\n    # text25 = \"\\\"The world is full of opportunities\\\"\"\n    # text26 = \"\\\"The world is full of opportunities\\\"\"\n    # text27 = \"\\\"The world is full of opportunities\\\"\"\n    # text28 = \"\\\"The world is full of opportunities\\\"\"\n    # text29 = \"\\\"The world is full of opportunities\\\"\"\n    # text30 = \"\\\"The world is full of opportunities\\\"\"\n    # text31 = \"\\\"The world is full of opportunities\\\"\"\n    # text32 = \"\\\"The world is full of opportunities\\\"\"\n    # text33 = \"\\\"The world is full of opportunities\\\"\"\n    # text34 = \"\\\"The world is full of opportunities\\\"\"\n    # text35 = \"\\\"The world is full of opportunities\\\"\"\n    # text36 = \"\\\"The world is full of opportunities\\\"\"\n    # text37 = \"\\\"The world is full of opportunities\\\"\"\n    # text38 = \"\\\"The world is full of opportunities\\\"\"\n    # text39 = \"\\\"The world is full of opportunities\\\"\"\n    # text40 = \"\\\"The world is full of opportunities\\\"\"\n    # text41 = \"\\\"The world is full of opportunities\\\"\"\n    # text42 = \"\\\"The world is full of opportunities\\\"\"\n    # text43 = \"\\\"The world is full of opportunities\\\"\"\n    # text44 = \"\\\"The world is full of opportunities\\\"\"\n    # text45 = \"\\\"The world is full of opportunities\\\"\"\n    # text46 = \"\\\"The world is full of opportunities\\\"\"\n    # text47 = \"\\\"The world is full of opportunities\\\"\"\n    # text48 = \"\\\"The world is full of opportunities\\\"\"\n    # text49 = \"\\\"The world is full of opportunities\\\"\"\n    # text50 = \"\\\"The world is full of opportunities\\\"\"\n    # text51 = \"\\\"The world is full of opportunities\\\"\"\n    # text52 = \"\\\"The world is full of opportunities\\\"\"\n    # text53 = \"\\\"The world is full of opportunities\\\"\"\n    # text54 = \"\\\"The world is full of opportunities\\\"\"\n    # text55 = \"\\\"The world is full of opportunities\\\"\"\n    # text56 = \"\\\"The world is full of opportunities\\\"\"\n    # text57 = \"\\\"The world is full of opportunities\\\"\"\n    # text58 = \"\\\"The world is full of opportunities\\\"\"\n    # text59 = \"\\\"The world is full of opportunities\\\"\"\n    # text60 = \"\\\"The world is full of opportunities\\\"\"\n    # text61 = \"\\\"The world is full of opportunities\\\"\"\n    # text62 = \"\\\"The world is full of opportunities\\\"\"\n    # text63 = \"\\\"The world is full of opportunities\\\"\"\n    # text64 = \"\\\"The world is full of opportunities\\\"\"\n    # text65 = \"\\\"The world is full of opportunities\\\"\"\n    # text66 = \"\\\"The world is full of opportunities\\\"\"\n    # text67 = \"\\\"The world is full of opportunities\\\"\"\n    # text68 = \"\\\"The world is full of opportunities\\\"\"\n    # text69 = \"\\\"The world is full of opportunities\\\"\"\n    # text70 = \"\\\"The world is full of opportunities\\\"\"\n    # text71 = \"\\\"The world is full of opportunities\\\"\"\n    # text72 = \"\\\"The world is full of opportunities\\\"\"\n    # text73 = \"\\\"The world is full of opportunities\\\"\"\n    # text74 = \"\\\"The world is full of opportunities\\\"\"\n    # text75 = \"\\\"The world is full of opportunities\\\"\"\n    # text76 = \"\\\"The world is full of opportunities\\\"\"\n    # text77 = \"\\\"The world is full of opportunities\\\"\"\n    # text78 = \"\\\"The world is full of opportunities\\\"\"\n    # text79 = \"\\\"The world is full of opportunities\\\"\"\n    # text80 = \"\\\"The world is full of opportunities\\\"\"\n    # text81 = \"\\\"The world is full of opportunities\\\"\"\n    # text82 = \"\\\"The world is full of opportunities\\\"\"\n    # text83 = \"\\\"The world is full of opportunities\\\"\"\n    # text84 = \"\\\"The world is full of opportunities\\\"\"\n    # text85 = \"\\\"The world is full of opportunities\\\"\"\n    # text86 = \"\\\"The world is full of opportunities\\\"\"\n    # text87 = \"\\\"The world is full of opportunities\\\"\"\n    # text88 = \"\\\"The world is full of opportunities\\\"\"\n    # text89 = \"\\\"The world is full of opportunities\\\"\"\n    # text90 = \"\\\"The world is full of opportunities\\\"\"\n    # text91 = \"\\\"The world is full of opportunities\\\"\"\n    # text92 = \"\\\"The world is full of opportunities\\\"\"\n    # text93 = \"\\\"The world is full of opportunities\\\"\"\n    # text94 = \"\\\"The world is full of opportunities\\\"\"\n    # text95 = \"\\\"The world is full of opportunities\\\"\"\n    # text96 = \"\\\"The world is full of opportunities\\\"\"\n    # text97 = \"\\\"The world is full of opportunities\\\"\"\n    # text98 = \"\\\"The world is full of opportunities\\\"\"\n    # text99 = \"\\\"The world is full of opportunities\\\"\"\n    # text100 = \"\\\"The world is full of opportunities\\\"\"\n    # text101 = \"\\\"The world is full of opportunities\\\"\"\n    # text102 = \"\\\"The world is full of opportunities\\\"\"\n    # text103 = \"\\\"The world is full of opportunities\\\"\"\n    # text104 = \"\\\"The world is full of opportunities\\\"\"\n    # text105 = \"\\\"The world is full of opportunities\\\"\"\n    # text106 = \"\\\"The world is full of opportunities\\\"\"\n    # text107 = \"\\\"The world is full of opportunities\\\"\"\n    # text108 = \"\\\"The world is full of opportunities\\\"\"\n    # text109 = \"\\\"The world is full of opportunities\\\"\"\n    # text110 = \"\\\"The world is full of opportunities\\\"\"\n    # text111 = \"\\\"The world is full of opportunities\\\"\"\n    # text112 = \"\\\"The world is full of opportunities\\\"\"\n    # text113 = \"\\\"The world is full of opportunities\\\"\"\n    # text114 = \"\\\"The world is full of opportunities\\\"\"\n    # text115 = \"\\\"The world is full of opportunities\\\"\"\n    # text116 = \"\\\"The world is full of opportunities\\\"\"\n    # text117 = \"\\\"The world is full of opportunities\\\"\"\n    # text118 = \"\\\"The world is full of opportunities\\\"\"\n    # text119 = \"\\\"The world is full of opportunities\\\"\"\n    # text120 = \"\\\"The world is full of opportunities\\\"\"\n    # text121 = \"\\\"The world is full of opportunities\\\"\"\n    # text122 = \"\\\"The world is full of opportunities\\\"\"\n    # text123 = \"\\\"The world is full of opportunities\\\"\"\n    # text124 = \"\\\"The world is full of opportunities\\\"\"\n    # text125 = \"\\\"The world is full of opportunities\\\"\"\n    # text126 = \"\\\"The worl"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i*j for i,j in zip(test_tup,test_tup[1:]))\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(nums)]\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r + math.pi*r*h\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s\\.,]', ':', text)\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == A[mid]:\n            if mid == 0 or x!= A[mid - 1]:\n                return mid\n            high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            sum += prod\n    return sum\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # code here\n    n = n ^ (n >> 1)\n    n = n ^ (n >> 2)\n    n = n ^ (n >> 4)\n    n = n ^ (n >> 8)\n    n = n ^ (n >> 16)\n    return n\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize result \n    index = 0\n    # Find the index \n    for i in range(1, n): \n        index += i \n    return index \n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)*(3**(1/2))/4\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    temp = list[n - m:]\n    for i in range(0, n - m):\n        list[i] = list[i + m]\n    for i in range(n - m, n):\n        list[i] = temp[i - n + m]\n    return list\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum+1) if all([x % int(i) == 0 for i in str(x)])]\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (r**2)*(a/360)\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[None]*(l+1) for i in range(n+1)] for j in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    return L[m][n][l] \n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split()\n    for i in range(len(str1)):\n        if str1[i][0].isupper():\n            str1[i] = str1[i][0] +'' + str1[i][1:]\n    return''.join(str1)\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] >= arr[2*i+1] and arr[i] >= arr[2*i+2]:\n        return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n    return False\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = 3\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = 2\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = 1\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = 0\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -1\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -2\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -3\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -4\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -5\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -6\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -7\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -8\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -9\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -10\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -11\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -12\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -13\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -14\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -15\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -16\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -17\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -18\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -19\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -20\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -21\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -22\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -23\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -24\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -25\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]\n    # K = -26\n    # test_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4)"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            result.append(l1[i])\n    return result\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list\n    numbers.sort()\n    # return the second element\n    return numbers[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.+b')\n    if pattern.search(text):\n        return 'Match Found'\n    else:\n        return 'No Match Found'\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize a dictionary\n    d = dict()\n    # Iterate through the list\n    for i in test_list:\n        # Get the reverse of the string\n        rev = i[::-1]\n        # Check if the reverse is in the dictionary\n        if rev in d:\n            # Increment the count\n            d[rev] += 1\n        else:\n            # Add the reverse to the dictionary\n            d[rev] = 1\n    # Initialize the count\n    count = 0\n    # Iterate through the dictionary\n    for key, value in d.items():\n        # Increment the count\n        count += value\n    # Return the count\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_dict = {}\n    for i in list1:\n        if type(i) == list:\n            list_dict[tuple(i)] = list_dict.get(tuple(i),0) + 1\n    return list_dict\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return 30\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return 31\n    else:\n        return \"Invalid month number\"\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1,n):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 3\n    if n == 4: \n        return 4\n    if n == 5: \n        return 5\n    if n == 6: \n        return 6\n    if n == 7: \n        return 7\n    if n == 8: \n        return 8\n    if n == 9: \n        return 9\n    if n == 10: \n        return 10\n    if n == 11: \n        return 11\n    if n == 12: \n        return 12\n    if n == 13: \n        return 13\n    if n == 14: \n        return 14\n    if n == 15: \n        return 15\n    if n == 16: \n        return 16\n    if n == 17: \n        return 17\n    if n == 18: \n        return 18\n    if n == 19: \n        return 19\n    if n == 20: \n        return 20\n    if n == 21: \n        return 21\n    if n == 22: \n        return 22\n    if n == 23: \n        return 23\n    if n == 24: \n        return 24\n    if n == 25: \n        return 25\n    if n == 26: \n        return 26\n    if n == 27: \n        return 27\n    if n == 28: \n        return 28\n    if n == 29: \n        return 29\n    if n == 30: \n        return 30\n    if n == 31: \n        return 31\n    if n == 32: \n        return 32\n    if n == 33: \n        return 33\n    if n == 34: \n        return 34\n    if n == 35: \n        return 35\n    if n == 36: \n        return 36\n    if n == 37: \n        return 37\n    if n == 38: \n        return 38\n    if n == 39: \n        return 39\n    if n == 40: \n        return 40\n    if n == 41: \n        return 41\n    if n == 42: \n        return 42\n    if n == 43: \n        return 43\n    if n == 44: \n        return 44\n    if n == 45: \n        return 45\n    if n == 46: \n        return 46\n    if n == 47: \n        return 47\n    if n == 48: \n        return 48\n    if n == 49: \n        return 49\n    if n == 50: \n        return 50\n    if n == 51: \n        return 51\n    if n == 52: \n        return 52\n    if n == 53: \n        return 53\n    if n == 54: \n        return 54\n    if n == 55: \n        return 55\n    if n == 56: \n        return 56\n    if n == 57: \n        return 57\n    if n == 58: \n        return 58\n    if n == 59: \n        return 59\n    if n == 60: \n        return 60\n    if n == 61: \n        return 61\n    if n == 62: \n        return 62\n    if n == 63: \n        return 63\n    if n == 64: \n        return 64\n    if n == 65: \n        return 65\n    if n == 66: \n        return 66\n    if n == 67: \n        return 67\n    if n == 68: \n        return 68\n    if n == 69: \n        return 69\n    if n == 70: \n        return 70\n    if n == 71: \n        return 71\n    if n == 72: \n        return 72\n    if n == 73: \n        return 73\n    if n == 74: \n        return 74\n    if n == 75: \n        return 75\n    if n == 76: \n        return 76\n    if n == 77: \n        return 77\n    if n == 78: \n        return 78\n    if n == 79: \n        return 79\n    if n == 80: \n        return 80\n    if n == 81: \n        return 81\n    if n == 82: \n        return 82\n    if n == 83: \n        return 83\n    if n == 84: \n        return 84\n    if n == 85: \n        return 85\n    if n == 86: \n        return 86\n    if n == 87: \n        return 87\n    if n == 88: \n        return 88\n    if n == 89: \n        return 89\n    if n == 90: \n        return 90\n    if n == 91: \n        return 91\n    if n == 92: \n        return 92\n    if n == 93: \n        return 93\n    if n == 94: \n        return 94\n    if n == 95: \n        return 95\n    if n == 96: \n        return 96\n    if n == 97: \n        return 97\n    if n == 98: \n        return 98\n    if n == 99: \n        return 99\n    if n == 100: \n        return 100\n    if n == 101: \n        return 101\n    if n == 102: \n        return 102\n    if n == 103: \n        return 103\n    if n == 104: \n        return 104\n    if n == 105: \n        return 105\n    if n == 106: \n        return 106\n    if n == 107: \n        return 107\n    if n == 108: \n        return 108\n    if n == 109: \n        return 109\n    if n == 110: \n        return 110\n    if n == 111: \n        return 111\n    if n == 112: \n        return 112\n    if n == 113: \n        return 113\n    if n == 114: \n        return 114\n    if n == 115: \n        return 115\n    if n == 116: \n        return 116\n    if n == 117: \n        return 117\n    if n == 118: \n        return 118\n    if n == 119: \n        return 119\n    if n == 120: \n        return 120\n    if n == 121: \n        return 121\n    if n == 122: \n        return 122\n    if n == 123: \n        return 123\n    if n == 124: \n        return 124\n    if n == 125: \n        return 125\n    if n == 126: \n        return 126\n    if n == 127: \n        return 127\n    if n == 128: \n        return 128\n    if n == 129: \n        return 129\n    if n == 130: \n        return 130\n    if n == 131: \n        return 131\n    if n == 132: \n        return 132\n    if n == 133: \n        return 133\n    if n == 134: \n        return 134\n    if n == 135: \n        return 135\n    if n == 136: \n        return 136\n    if n == 137: \n        return 137\n    if n == 138: \n        return 138\n    if n == 139: \n        return 139\n    if n == 140: \n        return 140\n    if n == 141: \n        return 141\n    if n == 142: \n        return 142\n    if n == 143: \n        return 143\n    if n == 144: \n        return 144\n    if n == 145: \n        return 145\n    if n == 146: \n        return 146\n    if n == 147: \n        return 147\n    if n == 148: \n        return 148\n    if n == 149: \n        return 149\n    if n == 150: \n        return 150\n    if n == 151: \n        return 151\n    if n == 152: \n        return 152\n    if n == 153: \n        return 153\n    if n == 154: \n        return 154\n    if n == 155: \n        return 155\n    if n == 156: \n        return 156\n    if n == 157: \n        return 157\n    if n == 158: \n        return 158\n    if n == 159: \n        return 159\n    if n == 160: \n        return 160\n    if n == 161: \n        return 161\n    if n == 162: \n        return 162\n    if n == 163: \n        return 163\n    if n == 164: \n        return 164\n    if n == 165: \n        return 165\n    if n == 166: \n        return 166\n    if n == 167"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            sum += i**4\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    new_str = []\n    for word in test_str:\n        if len(word)!= K:\n            new_str.append(word)\n    return''.join(new_str)\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # print(text)\n    # print(pattern)\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(pattern,text))\n    # print(re.findall(patter"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i > 0 and test_str[i-1] in vowels:\n                count += 1\n            if i < len(test_str) - 1 and test_str[i+1] in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    list2 = []\n    for key, group in groupby(list1):\n        list2.append(list(group))\n    return list2\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_of_lists = []\n    for i in list1:\n        if type(i) == list:\n            list_of_lists.append(tuple(i))\n    return dict(Counter(list_of_lists))\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # return list(combinations(test_list, 2))\n    return list(combinations(test_list, 2))\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count \n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i + 1) % 2 == 1:\n                sum += sum(arr[i:j+1])\n    return sum\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i % 2 == 0:\n            product *= i\n        else:\n            product *= i\n    return product\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x < a[0]:\n        return 0\n    if x > a[-1]:\n        return len(a)\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = list(test_tup)\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            test_tup[i] = list(test_tup[i])\n            test_tup[i] = remove_nested(test_tup[i])\n    return tuple(test_tup)\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low+high)//2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or arr[mid+1]!= x:\n                return mid\n            else:\n                low = mid+1\n        elif arr[mid] > x:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b$')\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(n) if i % 2!= 0])\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return (n << d) | (n >> (32 - d)) & mask\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] > arr[mid + 1]:\n            return mid + 1\n        elif arr[mid] < arr[mid + 1]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return 0\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    x = 1\n    while (x * x <= n):\n        x = x + 1\n    if (x * x == n):\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for list in lists:\n        if sum(list) > max_sum:\n            max_sum = sum(list)\n            max_list = list\n    return max_list\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        max_run = max(max_run, current_run)\n    return max_run\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1] and test_tup1[2] < test_tup2[2]:\n        return True\n    else:\n        return False\n"
    }
]