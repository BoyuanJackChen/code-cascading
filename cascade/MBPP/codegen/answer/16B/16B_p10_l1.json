[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # TODO: complete this\n    if test_tup1 == test_tup2:\n        return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1).intersection(set(test_tup2)))\n    \ndef union_of_lists(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of two lists.\n    '''\n    return list(set(test_tup1).union(set(test_tup2)))\n",
        "num_ids": 25
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #return tuple(sorted([x for x in test_tup1 if x in test_tup2]))\n    return sorted(list(set(test_tup1).intersection(test_tup2)))\n",
        "num_ids": 54
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Your code here\n    shared_elms = set(test_tup1).intersection(set(test_tup2))\n    return list(shared_elms)\n",
        "num_ids": 44
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # TODO: complete this function\n    return set(test_tup1) & set(test_tup2)\n",
        "num_ids": 31
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # You may return the answer in any order.\n",
        "num_ids": 14
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            similar_elements.append(i)\n    return similar_elements\n",
        "num_ids": 50
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            similar_elements.append(i)\n    return similar_elements\n",
        "num_ids": 50
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    similar = test_tup1.intersection(test_tup2)\n    print(similar)\n    \n    \n",
        "num_ids": 63
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # your code goes here\n    return similar_elements\n",
        "num_ids": 16
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # if n <= 3, it is by definition not a prime\n    if n <= 3:\n        return n == 2 or n == 3\n    # if n is even, it is not a prime\n    if n % 2 == 0:\n        return False\n    # loop over the odd numbers from 3 to sqrt(n)\n    # we can ignore 2 because 2 is covered by the if statement above\n    for x in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % x == 0:\n            return False\n    # if all else fails, it is a prime\n    return True\n",
        "num_ids": 144
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if (n % i) == 0:\n                return True\n        return False\n    else:\n        return True\n",
        "num_ids": 58
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n    \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n==1:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    sqr = int(math.sqrt(n)) + 1\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return True\n    return False\ndef main():\n    print(is_not_prime(8))\n    print(is_not_prime(7))\n    print(is_not_prime(9))\nif __name__ == '__main__':\n    main()\n",
        "num_ids": 145
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \ndef all_primes(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    result = []\n    for i in range(1, n + 1):\n        if is_not_prime(i):\n            result.append(i)\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n)+1)):\n            if n%i==0:\n                return False\n        return True\n",
        "num_ids": 55
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    # First we'll write some code to identify prime numbers\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for x in range(2, n):\n            if n % x == 0:\n                return False\n        else:\n            return True\n",
        "num_ids": 69
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    res = []\n    for i in range(n):\n        res.append(hq.heappop(nums))\n    return res[::-1]\n",
        "num_ids": 53
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == None:\n        return None\n    if n > len(nums):\n        return None\n    if n == 0:\n        return []\n    heap = []\n    for i in range(0,n):\n        hq.heappush(heap,nums[i])\n    return heap\n",
        "num_ids": 76
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    lst=[]\n    for _ in range(n):\n        lst.append(hq.heappop(nums))\n    return lst[::-1]\n",
        "num_ids": 56
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest_nums=[]\n    for i in range(n):\n        largest_nums.append(hq.heappop(nums))\n    return largest_nums\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    smallest_nums=[]\n    for i in range(n):\n        smallest_nums.append(hq.heappop(nums))\n    return smallest_nums\n",
        "num_ids": 59
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # if n < 1:\n    #     return []\n    # if n > len(nums):\n    #     return nums\n    # return heapq.nlargest(n, nums)\n    result = []\n    if len(nums) == 0:\n        return result\n    for i in range(n):\n        result.append(max(nums))\n        nums.remove(max(nums))\n    return result\n",
        "num_ids": 105
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    sorted_nums = []\n    heapq.heapify(nums)\n    for i in range(n):\n        sorted_nums.append(heapq.heappop(nums))\n    return sorted_nums\n",
        "num_ids": 61
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    \n    #start_time = time.time()\n    \n    temp = nums[:]\n    nums.sort()\n    \n    print(nums[-n:])\n    \n    return nums[-n:]\n    \n    #print(\"--- %s seconds ---\" % (time.time() - start_time))\n    \ndef heap_queue_secondlargest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    #start_time = time.time()\n    temp = nums[:]\n    nums.sort()\n    \n    if len(nums)<n:\n        print(nums[-1])\n    else:\n        print(nums[-n:])\n    \n    #print(\"--- %s seconds ---\" % (time.time() - start_time))\n",
        "num_ids": 92
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) == 0:\n        return []\n    if n > len(nums):\n        return []\n    maxheap = []\n    # inserting each element in max heap\n    for i in nums:\n        hq.heappush(maxheap,i)\n    k = 0\n    result = []\n    # creating n largest elements and appending to list\n    for i in range(len(maxheap)):\n        result.append(hq.heappop(maxheap))\n        k += 1\n    return result[::-1]\n",
        "num_ids": 137
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        print(hq.heappop(nums))\n        \n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        print(hq.heappop(nums))\n        \n        \ndef bubble_sort(nums):\n    '''\n    Write a function to sort a list of numbers using bubble sort algorithm, in descending order.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-1,i,-1):\n            if nums[j]>nums[j-1]:\n                nums[j],nums[j-1]=nums[j-1],nums[j]\n                \n    return nums\n",
        "num_ids": 82
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if(n==0):\n        return []\n    if(len(nums)<n):\n        return []\n    if(n==1):\n        return [max(nums)]\n    nums.sort(reverse=True)\n    return nums[:n]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if(n==0):\n        return []\n    if(len(nums)<n):\n        return []\n    if(n==1):\n        return [min(nums)]\n    nums.sort()\n    return nums[:n]\ndef max_in_list(nums):\n    '''\n    Write a function to find the largest number in a list.\n    '''\n    if(len(nums)==0):\n        return -float('inf')\n    max=nums[0]\n    for x in nums:\n        if x>max:\n            max=x\n    return max\ndef min_in_list(nums):\n    '''\n    Write a function to find the smallest number in a list.\n    '''\n    if(len(nums)==0):\n        return float('inf')\n    min=nums[0]\n    for x in nums:\n        if x<min:\n            min=x\n    return min\ndef min_max_sum(nums):\n    '''\n    Write a function to find the sum of the minimum and maximum numbers in a list.\n    '''\n    max=nums[0]\n    min=nums[0]\n    sum=0\n    for x in nums:\n        if x>max:\n            max=x\n        if x<min:\n            min=x\n        sum+=x\n    return sum-min+max\ndef rev_list(nums):\n    '''\n    Write a function to reverse a list in-place.\n    '''\n    if(len(nums)==0):\n        return nums\n    start=0\n    end=len(nums)-1\n    while start<end:\n        t=nums[start]\n        nums[start]=nums[end]\n        nums[end]=t\n        start+=1\n        end-=1\n    return nums\ndef sort_list(nums):\n    '''\n    Write a function to sort a list of integers.\n    '''\n    if(len(nums)==0):\n        return nums\n    nums.sort()\n    return nums\ndef sort_list_alt(nums):\n    '''\n    Write a function to sort a list of integers using the quicksort algorithm.\n    '''\n    if(len(nums)==0):\n        return nums\n    return quicksort(nums,0,len(nums)-1)\ndef quicksort(nums,l,r):\n    '''\n    Write a function to sort a list of integers using the quicksort algorithm.\n    '''\n    if(l<r):\n        p=partition(nums,l,r)\n        quicksort(nums,l,p-1)\n        quicksort(nums,p+1,r)\n    return nums\ndef partition(nums,l,r):\n    pivot=nums[r]\n    i=l-1\n    for j in range(l,r):\n        if(nums[j]<=pivot):\n            i+=1\n            t=nums[i]\n            nums[i]=nums[j]\n            nums[j]=t\n    t=nums[i+1]\n    nums[i+1]=nums[r]\n    nums[r]=t\n    return i+1\ndef count_list(nums,x):\n    '''\n    Write a function to count the number of occurrences of a specific value in a list.\n    '''\n    if(len(nums)==0):\n        return 0\n    count=0\n    for i in nums:\n        if i==x:\n            count+=1\n    return count\ndef count_list_alt(nums,x):\n    '''\n    Write a function to count the number of occurrences of a specific value in a list.\n    '''\n    if(len(nums)==0):\n        return 0\n    return count(nums,0,len(nums)-1,x)\ndef count(nums,l,r,x):\n    if(l>r):\n        return 0\n    if(nums[l]==x):\n        return 1+count(nums,l+1,r,x)\n    else:\n        return count(nums,l+1,r,x)\ndef find_missing_number(nums):\n    '''\n    Write a function to find the missing number in a sequence of numbers.\n    '''\n    if(len(nums)==0):\n        return 0\n    n=max(nums)\n    if(n<0):\n        n=0\n    if(n==len(nums)):\n        n=len(nums)\n    for i in range(n+1):\n        if i not in nums:\n            return i\ndef find_missing_number_alt(nums):\n    '''\n    Write a function to find the missing number in a sequence of numbers.\n    '''\n    if(len(nums)==0):\n        return 0\n    if(min(nums)<0):\n        n=0\n    else:\n        n=max(nums)\n    if(max(nums)==len(nums)):\n        n=len(nums)\n    for i in range(n+1):\n        if i not in nums:\n            return i\ndef find_smallest_value(nums):\n    '''\n    Write a function to find the smallest value in a list.\n    '''\n    if(len(nums)==0):\n        return -float('inf')\n    min=nums[0]\n    for x in nums:\n        if x<min:\n            min=x\n    return min\ndef find_smallest_value_alt(nums):\n    '''\n    Write a function to find the smallest value in a list.\n    '''\n    if(len(nums)==0):\n        return -float('inf')\n    return min_in_list(nums)\ndef find_largest_value(nums):\n    '''\n    Write a function to find the largest value in a list.\n    '''\n    if(len(nums)==0):\n        return -float('inf')\n    max=nums[0]\n    for x in nums:\n        if x>max:\n            max=x\n    return max\ndef find_largest_value_alt(nums):\n    '''\n    Write a function to find the largest value in a list.\n    '''\n    if(len(nums)==0):\n        return -float('inf')\n    return max_in_list(nums)\ndef count_occurences(nums,x):\n    '''\n    Write a function to count the number of occurrences of a specific value in a list.\n    '''\n    if(len(nums)==0):\n        return 0\n    count=0\n    for i in nums:\n        if i==x:\n            count+=1\n    return count\ndef count_occurences_alt(nums,x):\n    '''\n    Write a function to count the number of occurrences of a specific value in a list.\n    '''\n    if(len(nums)==0):\n        return 0\n    return count(nums,0,len(nums)-1,x)\ndef count(nums,l,r,x):\n    if(l>r):\n        return 0\n    if(nums[l]==x):\n        return 1+count(nums,l+1,r,x)\n    else:\n        return count(nums,l+1,r,x)\ndef find_first_occurence(nums,x):\n    '''\n    Write a function to find the first occurrence of a specific value in a list.\n    '''\n    if(len(nums)==0):\n    ",
        "num_ids": 15
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if ((x & (x - 1)) == 0): \n        return True\n    else: \n        return False\n",
        "num_ids": 30
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    num = x\n    count = 1\n",
        "num_ids": 12
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = x & (x - 1)\n    return x == 0\n",
        "num_ids": 19
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x: \n        if x == 1: \n            return False\n        elif x % 2 == 0: \n            x = x / 2\n        else: \n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if ((x & (x - 1)) == 0): \n        return True\n    return False\n",
        "num_ids": 25
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1) == 0) and x > 0\n",
        "num_ids": 20
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1: \n        x = x & (x - 1)\n    if (x == 1): \n        return True\n    else: \n        return False\n",
        "num_ids": 43
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0:\n        return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==0:\n        return False\n    if x==1:\n        return True\n    if x>1:\n        for i in range(2, x+1):\n            if x%i!= 0:\n                break\n            elif x%i == 0:\n                continue\n        if i==x:\n            return True\n        else:\n            return False\n",
        "num_ids": 89
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x > 0): \n        while (x!= 0): \n            if ((x & 1)!= 0): \n                break\n            x = x // 2\n        if (x == 1): \n            return True\n        else: \n            return False\n    else: \n        return False\n",
        "num_ids": 74
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # long_words = re.findall(r'\\w{4,}', text)\n    long_words = [word for word in text.split() if len(word) >= 4]\n    print(long_words)\n",
        "num_ids": 56
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    find_long = []\n    for x in text.split():\n        if len(x) >= 4:\n            find_long.append(x)\n    return find_long\n",
        "num_ids": 44
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\w{4,}', text)\n    return words\n",
        "num_ids": 26
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    print(re.findall(r'\\w{4,}', text))\n",
        "num_ids": 22
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text_list = re.split(r'[\\s,]', text)\n    result = []\n    for el in text_list:\n        if len(el) >= 4:\n            result.append(el)\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    try:\n        print('\\n' + 'Task #4')\n        print(find_char_long.__doc__)\n        result = []\n        text = text.split()\n        for word in text:\n            if len(word) >= 4:\n                result.append(word)\n        print('Result:', result)\n    except ValueError:\n        print('\\n' + 'Usage: please enter a text')\n",
        "num_ids": 102
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    matches = re.findall(r\"\\w{4,}\",text)\n    print(\"matches are\",matches)\n    print()\n",
        "num_ids": 40
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = []\n    for word in text.split():\n        if len(word) >= 4:\n            long_words.append(word)\n",
        "num_ids": 38
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile(r'\\b\\w{4,}\\b')\n    find = re.findall(regex, text)\n    print(find)\n",
        "num_ids": 44
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # The string is being modified by the findall() function\n    # and the return statement\n    words = re.findall(r'\\w{4,}', text)\n    return words\n",
        "num_ids": 47
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda num: num**2, nums))\n",
        "num_ids": 19
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = [i ** 2 for i in nums]\n    return result\n",
        "num_ids": 20
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]*nums[i]\n    return nums\n",
        "num_ids": 39
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        yield(i*i)\n",
        "num_ids": 19
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**2)\n",
        "num_ids": 18
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # for num in nums:\n    #     yield num ** 2\n    yield from (num ** 2 for num in nums)\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n**2 for n in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [nums**2]\n",
        "num_ids": 11
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i*i)\n",
        "num_ids": 18
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(0, n):\n        if str[i:] + str[:i] == str:\n            return i\n    return 0\n",
        "num_ids": 45
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    len_s = len(str) \n    count = 0 \n    for i in range(len_s): \n        if str[i:]+str[:i] == str: \n            count += 1\n    return count \n",
        "num_ids": 58
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def rotate(str, n):\n        return str[n:] + str[:n]\n    str_list = list(str)\n    rotations = 0\n    while True:\n        rotated = rotate(str_list, 1)\n        if rotated == str_list:\n            break\n        str_list = rotated\n        rotations += 1\n    return rotations\n",
        "num_ids": 88
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    s = str\n    n = len(str)\n    \n    # Counting number of rotations\n    rotation = 0\n    while(s!= str):\n        s = s[1:] + s[0]\n        rotation += 1\n    return rotation\n        \n",
        "num_ids": 66
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(1, len(str)):\n        if str[i:] + str[:i] == str:\n            return i\n    return -1\n",
        "num_ids": 41
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    temp = str\n    temp2 = str\n    temp3 = str\n    temp4 = str\n    temp5 = str\n    temp6 = str\n    temp7 = str\n    temp8 = str\n    temp9 = str\n    temp10 = str\n    temp11 = str\n    temp12 = str\n    rotations = 0\n    while (temp!= temp2):\n        rotations+=1\n        temp2 = temp3\n        temp3 = temp4\n        temp4 = temp5\n        temp5 = temp6\n        temp6 = temp7\n        temp7 = temp8\n        temp8 = temp9\n        temp9 = temp10\n        temp10 = temp11\n        temp11 = temp12\n        temp12 = temp2[::-1]\n    return rotations\n",
        "num_ids": 182
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def find_Rotations_Helper(str,n):\n        if n == 0:\n            return 0\n",
        "num_ids": 27
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    dict = {}\n    rev = str[::-1]\n    #print(rev)\n    for i in range(len(str)):\n        dict[str[i:]] = i+1\n    for i in range(len(rev)):\n        if rev[i:] in dict:\n            return dict[rev[i:]] + i\n    return -1\n",
        "num_ids": 88
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # One way to solve this problem is to do a linear scan through each rotation, and check if it is the same as the original string\n    # After finding the rotation, go back to it and find the rotation number to move to the next rotation\n",
        "num_ids": 55
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def is_rotation(s1, s2):\n        if len(s1)!= len(s2):\n            return False\n        key = s1[0]\n        key_count = 0\n        for c in s2:\n            if c == key:\n                key_count += 1\n        if key_count == len(s2):\n            return True\n        return False\n",
        "num_ids": 92
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch, \"\")\n    s=s.replace(ch, \"\")\n    return s\ns='geeksforgeeks'\nch='e'\nprint(remove_Occ(s,ch))\n",
        "num_ids": 54
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    newstr = s[0:s.find(ch)]+s[s.rfind(ch)+1:]\n    return newstr\n",
        "num_ids": 34
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = s.split(ch)\n    return (''.join(l[:1]))+(ch).join(l[1:])\n",
        "num_ids": 35
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    s = list(s)\n    s.remove(ch)\n    return ''.join(s)\n",
        "num_ids": 39
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return -1\n    s1 = s.replace(ch,'')\n    s2 = s.replace(ch,'')\n    return s1,s2\n",
        "num_ids": 47
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', -1) \n    ",
        "num_ids": 26
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    for i in range(len(s)):\n        if s[i] == ch:\n            s = s[:i] + s[i+1:]\n    return s\n",
        "num_ids": 44
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")\nprint(remove_Occ(\"Python String\", 'o'))\nprint(remove_Occ(\"Python String\", 'x'))\n",
        "num_ids": 41
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\")\n",
        "num_ids": 12
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    temp = s[:]\n    for i in range(len(temp)):\n        if temp[i] == ch:\n            temp = temp[0:i] + temp[i+1:]\n            break\n    return temp\n",
        "num_ids": 55
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_M = sorted([sum(row) for row in M])\n    sorted_M = [[M[row_ind][col_ind] for col_ind in range(len(M[row_ind]))] for row_ind in range(len(M))]\n    return sorted_M\n",
        "num_ids": 73
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n    \ndef sort_matrix2(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its columns.\n    '''\n    if M == []:\n        return M\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n    return sorted(M, key=sum)\n    \ndef sort_matrix3(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its columns.\n    '''\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n    return sorted(M, key=sum)\n    \ndef matrix_diagonal(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    \n    r = 0\n    for i,row in enumerate(M):\n        r += row[i]\n    return r\n    \ndef matrix_diagonal2(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal3(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal4(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    return sum(M[i][i] for i in range(len(M)))\n    \ndef matrix_diagonal5(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    return sum([M[i][len(M)-1-i] for i in range(len(M))])\n    \ndef matrix_diagonal6(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n    return sum([M[i][len(M)-1-i] for i in range(len(M))])\n    \ndef matrix_diagonal7(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    return sum([M[i][len(M)-1-i] for i in range(len(M))])\n    \ndef matrix_diagonal8(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    return sum(M[i][len(M)-1-i] for i in range(len(M)))\n    \ndef matrix_diagonal9(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal10(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal11(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal12(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal13(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal14(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal15(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal16(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal17(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal18(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal19(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal20(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal21(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal22(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal23(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal24(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal25(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal26(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    return sum([M[i][i] for i in range(len(M))])\n    \ndef matrix_diagonal27(M):\n    '''\n    Write a function to find the sum of the matrix diagonal.\n    '''\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n    return sum([M[i][i] fo",
        "num_ids": 40
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    temp = sorted([sum(row) for row in M])\n    M = [list(row) for row in zip(*[iter(M)]*(temp[0]+1))]\n    return M\n",
        "num_ids": 49
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key = sum)\n",
        "num_ids": 13
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    i=0\n    n=len(M)\n    while i<n:\n        j=0\n        sorted=False\n        while j<n-i-1:\n            if sum(M[j])>sum(M[j+1]):\n                M[j],M[j+1]=M[j+1],M[j]\n                sorted=True\n            j=j+1\n        if not sorted:\n            break\n        i=i+1\n",
        "num_ids": 114
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sum_row(M,r):\n        return sum([M[r][j] for j in range(len(M[r]))])\n    \n    def inversions(M,r):\n        inversions_ = 0\n        for i in range(len(M)):\n            if i == r: continue\n            inversions_ += sum([1 for m in M[i] if m<M[r][j]])\n        return inversions_\n",
        "num_ids": 108
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        M[i] = sorted(M[i])\n        \n    for i in range(len(M)):\n        M[i] = sum(M[i])\n        \n    M = sorted(M)\n    return M\n    \ndef get_symmetric_matrix(n):\n    '''\n    Write a function to generate a n x n symmetric matrix\n    '''\n    M = [[0 for i in range(n)] for j in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                M[i][j] = 1\n            else:\n                M[i][j] = M[j][i]\n    \n    return M\n",
        "num_ids": 84
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key = lambda row: sum(row))\n    return M\n",
        "num_ids": 21
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sort(M):\n        A = [[M[j][i] for i in range(len(M))] for j in range(len(M))]\n        L = []\n        for row in A:\n            L.append(sum(row))\n        L.sort()\n        L.reverse()\n        for row in A:\n            row.sort()\n        i = 0\n        for row in A:\n            for elem in row:\n                M[i][A.index(row)] = elem\n                i += 1\n    for row in M:\n        sort(row)\n    return M\n",
        "num_ids": 144
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if M == [[]]:\n        return M\n    # make a list of the row sums, then sort the list\n    row_sums = [sum(row) for row in M]\n    row_sums.sort()\n    # get the index of the smallest sum, which is also the index of the row that has that sum\n    min_row_idx = row_sums.index(min(row_sums))\n    # select the row that has that index\n    min_row = M[min_row_idx]\n    # remove the smallest row from the matrix, and repeat the process until it's empty\n    M.remove(min_row)\n    sort_matrix(M)\n    M.insert(min_row_idx, min_row)\n    return M\n",
        "num_ids": 185
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l * b * h\n",
        "num_ids": 10
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n",
        "num_ids": 10
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n",
        "num_ids": 10
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume\nl = int(input('Enter length : '))\nb = int(input('Enter breadth : '))\nh = int(input('Enter height : '))\nprint('The volume of the triangular prism is :', find_Volume(l,b,h))\n",
        "num_ids": 73
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol=l*b*h\n    return vol\n    \ndef find_square_perimeter(a) : \n    '''\n    Write a python function to find the perimeter of a square\n    '''\n    perimeter=a*4\n    return perimeter\n    \ndef find_Area_of_parallelogram(a,b):\n    '''\n    Write a python function to find the area of parallelogram\n    '''\n    area=a*b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l * b * h\n    return Volume\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (1/3)*b*h*l\n    return vol\n    # return 0 # change this line to return the value of the volume\n    # you need to define the function here.\n",
        "num_ids": 47
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/3\n    print (\"The volume of the triangular prism is\", volume)\n    return\n",
        "num_ids": 30
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r\"^[a-z_]+\\d+$\", text))\n",
        "num_ids": 27
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.replace(\" \",\"\")\n    if text.isalpha() is True:\n        if text == text.lower():\n            return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    text = re.sub(r'[^A-Za-z0-9_]+','', text)\n    if text == '':\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'_+[a-z]*[A-Z]', text))\n",
        "num_ids": 29
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'_+[a-z]{1}', text)\n",
        "num_ids": 24
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # return bool(re.findall(r'[a-z]+_[a-z]', text, flags=re.IGNORECASE))\n    return bool(re.search(r'_[a-z]+_', text, flags=re.IGNORECASE))\n",
        "num_ids": 68
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # if re.search(r'_+[a-z]+_+', text):\n    #     return True\n    # return False\n",
        "num_ids": 35
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'_.*_', text)\n",
        "num_ids": 17
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]_[a-z]',text):\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    def is_lowercase_underscore(text):\n        return text.replace('_', '').islower()\n    return is_lowercase_underscore(text)\n",
        "num_ids": 42
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a) == int:\n        return a * 4\n    return 0\n    \ndef first_number(n):\n    '''\n    Write a function that takes in an array of numbers and returns the first number in the array.\n    '''\n    if type(n) == list:\n        return n[0]\n    return 0\n    \ndef last_number(n):\n    '''\n    Write a function that takes in an array of numbers and returns the last number in the array.\n    '''\n    if type(n) == list:\n        return n[-1]\n    return 0\n    \ndef average_number(n):\n    '''\n    Write a function that takes in an array of numbers and returns the average of all the numbers in the array.\n    '''\n    if type(n) == list:\n        return sum(n) / len(n)\n    return 0\n    \ndef positive_numbers(n):\n    '''\n    Write a function that returns all positive numbers from an array of numbers.\n    '''\n    if type(n) == list:\n        return [x for x in n if x >= 0]\n    return []\n    \ndef only_positive_numbers(n):\n    '''\n    Write a function that returns an array of all positive numbers with 1.\n    '''\n    if type(n) == list:\n        return [x + 1 for x in n if x >= 0]\n    return []\n    \ndef numbers_greater_than(n):\n    '''\n    Write a function that takes in an array of numbers and returns all numbers from the array that are greater than a specified number.\n    '''\n    if type(n) == list:\n        return [x for x in n if x > 5]\n    return []\n    \ndef numbers_greater_than_or_equal_to(n):\n    '''\n    Write a function that takes in an array of numbers and returns all numbers from the array that are greater than or equal to a specified number.\n    '''\n    if type(n) == list:\n        return [x for x in n if x >= 5]\n    return []\n    \ndef largest_number(n):\n    '''\n    Write a function that takes in an array of numbers and returns the largest number in the array.\n    '''\n    if type(n) == list:\n        return max(n)\n    return 0\n    \ndef smallest_number(n):\n    '''\n    Write a function that takes in an array of numbers and returns the smallest number in the array.\n    '''\n    if type(n) == list:\n        return min(n)\n    return 0\n    \ndef reverse_list(n):\n    '''\n    Write a function that takes in an array of numbers and returns the reverse of the array.\n    '''\n    if type(n) == list:\n        return n[::-1]\n    return []\n    \ndef reverse_list_in_place(n):\n    '''\n    Write a function that takes in an array of numbers and returns the reverse of the array in place.\n    '''\n    if type(n) == list:\n        n.reverse()\n        return n\n    return []\n    \ndef reverse_list_recursive(n):\n    '''\n    Write a function that takes in an array of numbers and returns the reverse of the array (recursively).\n    '''\n    if type(n) == list:\n        if n == []:\n            return []\n        return reverse_list_recursive(n[1:]) + [n[0]]\n    return []\n",
        "num_ids": 48
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4*a\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    a = int(a)\n    b = a * 4\n    return b\n",
        "num_ids": 21
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4*a)\n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4*a\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()\n    string_list = [ord(x) for x in string]\n    new_string_list = []\n    for index, value in enumerate(string_list):\n        if value not in new_string_list:\n            new_string_list.append(value)\n    new_string_list = [chr(x) for x in new_string_list]\n    new_string = ''.join(new_string_list)\n    return new_string\n",
        "num_ids": 118
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str_list = list(string)\n    new_str_list = []\n",
        "num_ids": 21
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li_string_1 = list(string) \n    li_string_2 = list(string) \n    for c in li_string_2: \n        if c in li_string_1: \n            li_string_1.remove(c) \n    li_string_1 = ''.join(li_string_1)\n    return li_string_1\nif __name__ == \"__main__\":\n    print(str_to_list('geeksforgeeks'))\n    print(str_to_list('practice'))\n    print(str_to_list('gfg')",
        "num_ids": 143
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str = list(string) \n    length = len(string) \n    j = 0\n    for i in range(length): \n        if list_str[i] in string: \n            list_str[j] = list_str[i] \n            j += 1\n    return ''.join(list_str[j:])\n",
        "num_ids": 85
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str = list(string)\n    str_list = list(input(\"Enter the string : \"))\n    for i in str_list:\n        if i in list_str:\n            list_str.remove(i)\n    return list_str\n    \ndef list_to_str(list_str): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_str = \"\"\n    for i in list_str:\n        string_str+=i\n    return string_str\n    \ndef find_all(sub,string):\n    pos=[]\n    index=0\n    for i in range(len(string)):\n        if string[i:].startswith(sub):\n            pos.append(index+i)\n        index+=1\n    return pos\n    \ndef string_compression(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    flag=False\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if(string[i:i+j]==string[i+j:]):\n                flag=True\n                break\n        if flag==True:\n            string=string[:i]+string[i+j:]\n            break\n        else:\n            flag=False\n    if len(string)>len(find_all(string[0],string[1:])):\n        return string\n    else:\n        return string_compression(find_all(string[0],string[1:]))\n    \nprint(string_compression('abc'))\nprint(string_compression('aabcccccaaa'))\nprint(string_compression('aabcccccaaabb'))\nprint(string_compression('aabcccccaaabbc'))\nprint(string_compression('aaabbbccdd'))\nprint(string_compression('aaabbbccddeee'))",
        "num_ids": 241
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    string_to_remove = list(string)\n    for char in string_to_remove:\n        string_list.remove(char)\n    return string_list\n",
        "num_ids": 51
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # To store the first string \n    l1 = list(string) \n    # To store the second string \n    l2 = [] \n    for i in range(len(l1)): \n        # To store characters of second string \n        l2.append(string[i]) \n    # To store the third string \n    l3 = [] \n    for i in range(len(l1)): \n        # If the character is present in the second string \n        if (string[i] not in l2): \n            # Add the character to the third string \n            l3.append(string[i]) \n    # Join the characters of the third string to form the \n    # resultant string \n    string = ''.join(l3) \n    # Return the resultant string \n    return string \n",
        "num_ids": 198
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_2 = string[:]\n    for x in string:\n        if x in string_2:\n            string_2 = string_2.replace(x, \"\")\n    return string_2\n",
        "num_ids": 49
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [ ] \n    for i in string: \n        list1.append(ord(i)) \n    return list1\n",
        "num_ids": 35
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    array=[]\n    count=0\n    lst = string.split(\" \")\n    for i in lst:\n        if(i == \".\"):\n            break\n        for j in range(count,len(lst)):\n            if(i == lst[j]):\n                array.append(i)\n        count+=1\n    return array\n",
        "num_ids": 87
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # return True if any element appears more than once, otherwise return False\n    # iterate through elements in array, if element is found more than once return True\n    # O(n) Time Complexity\n    # O(1) Space Complexity\n",
        "num_ids": 57
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                print(\"Duplicate element found\")\n                return\n",
        "num_ids": 63
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return all(x==nums[i] for i,x in enumerate(nums))\n",
        "num_ids": 25
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n",
        "num_ids": 10
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 2:\n        return False\n",
        "num_ids": 18
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if nums.count(num) >= 2:\n            return True\n    return False\n    pass\n",
        "num_ids": 35
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # O(n)\n    for i in range(len(arraynums)):\n        for j in range(i + 1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n",
        "num_ids": 61
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0:\n        return \"Woodall\"\n    elif x % 5 == 0:\n        return \"Woodball\"\n    elif x % 3 == 0:\n        return \"Woodall\"\n    else:\n        return \"Neither\"\n    pass\n",
        "num_ids": 71
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [0, 1, 2]:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x%3==1) or (x%5==1) or (x%7==1)\n",
        "num_ids": 28
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%5==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%3==0\n    \nprint(is_woodall(3))\n",
        "num_ids": 22
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x%5 == 0) and (x%7 == 0)\n    \ndef is_odd(x):\n    '''\n    Write a function to check if the given number is odd or not.\n    '''\n    return (x%2 == 1)\n    \ndef is_not_even(x):\n    '''\n    Write a function to check if the given number is not even or not.\n    '''\n    return (x%2 == 0)\n    \ndef is_prime(x):\n    '''\n    Write a function to check if the given number is prime or not.\n    '''\n    return (x>1) and (x%x == 0)\n    \ndef is_odd_prime(x):\n    '''\n    Write a function to check if the given number is odd and prime or not.\n    '''\n    return is_odd(x) and is_prime(x)\n    \ndef is_palindrome(x):\n    '''\n    Write a function to check if the given number is palindrome or not.\n    '''\n    return str(x)[::-1] == str(x)\n    \ndef is_truncatable(x):\n    '''\n    Write a function to check if the given number is truncatable or not.\n    '''\n    \n    def is_palindrome(x):\n        return str(x)[::-1] == str(x)\n        \n    def is_prime(x):\n        return (x>1) and (x%x == 0)\n        \n    n = str(x)\n    l = len(n)\n    i = 0\n    while (i<l):\n        if not is_palindrome(int(n[i:])) or not is_prime(int(n[i:])):\n            return False\n        i += 1\n    i = 0\n    while (i<l):\n        if not is_palindrome(int(n[:i+1])) or not is_prime(int(n[:i+1])):\n            return False\n        i += 1\n    return True\n    \ndef is_disarium(x):\n    '''\n    Write a function to check if the given number is disarium or not.\n    '''\n    \n    def is_square(x):\n        return (x**0.5).is_integer()\n        \n    def is_prime(x):\n        return (x>1) and (x%x == 0)\n        \n    n = str(x)\n    l = len(n)\n    if is_square(x):\n        return False\n    if is_prime(x):\n        return False\n    i = 0\n    while (i<l):\n        if not is_prime(int(n[i:])) or not is_square(int(n[i:])):\n            return False\n        i += 1\n    i = 0\n    while (i<l):\n        if not is_prime(int(n[:i+1])) or not is_square(int(n[:i+1])):\n            return False\n        i += 1\n    return True\n    \ndef is_disarium2(x):\n    '''\n    Write a function to check if the given number is disarium or not.\n    '''\n    l = len(str(x))\n    c = [0]*10\n    while x>0:\n        c[x%10] += 1\n        x = x//10\n    s = 0\n    i = 1\n    while i<10:\n        if c[i]>1:\n            return False\n        if c[i]==1:\n            s += i**l\n        i += 1\n    return s==x\n    \ndef is_pandigital(x):\n    '''\n    Write a function to check if the given number is pandigital or not.\n    '''\n    \n    def is_prime(x):\n        return (x>1) and (x%x == 0)\n        \n    n = str(x)\n    l = len(n)\n    i = 0\n    while (i<l):\n        if not is_prime(int(n[i:])) and n[i]!='0':\n            return False\n        i += 1\n    i = 0\n    while (i<l):\n        if not is_prime(int(n[:i+1])) and n[i]!='0':\n            return False\n        i += 1\n    return True\n    \ndef is_pandigital2(x):\n    '''\n    Write a function to check if the given number is pandigital or not.\n    '''\n    n = str(x)\n    l = len(n)\n    i = 0\n    c = [0]*10\n    while i<l:\n        c[int(n[i])] += 1\n        i += 1\n    i = 1\n    while i<10:\n        if c[i]>1:\n            return False\n        i += 1\n    return True\n    \ndef is_pandigital3(x):\n    '''\n    Write a function to check if the given number is pandigital or not.\n    '''\n    n = str(x)\n    l = len(n)\n    c = [0]*10\n    for i in range(l):\n        c[int(n[i])] += 1\n    i = 1\n    while i<10:\n        if c[i]>1:\n            return False\n        i += 1\n    return True\n    \ndef is_pandigital4(x):\n    '''\n    Write a function to check if the given number is pandigital or not.\n    '''\n    n = str(x)\n    l = len(n)\n    c = [0]*10\n    for i in range(l):\n        c[int(n[i])] += 1\n    i = 1\n    while i<10:\n        if c[i]>1:\n            return False\n        i += 1\n    return True\n    \ndef is_pandigital5(x):\n    '''\n    Write a function to check if the given number is pandigital or not.\n    '''\n    n = str(x)\n    l = len(n)\n    c = [0]*10\n    for i in range(l):\n        c[int(n[i])] += 1\n    i = 1\n    while i<10:\n        if c[i]>1:\n            return False\n        i += 1\n    return True\n    \ndef is_pandigital6(x):\n    '''\n    Write a function to check if the given number is pandigital or not.\n    '''\n    n = str(x)\n    l = len(n)\n    c = [0]*10\n    for i in range(l):\n        c[int(n[i])] += 1\n    i = 1\n    while i<10:\n        if c[i]>1:\n            return False\n        i += 1\n    return True\n    \ndef is_pandigital7(x):\n    '''\n    Write a function to check if the given number is pandigital or not.\n    '''\n    n = str(x)\n    l = len(n)\n    c = [0]*10\n    for i in range(l):\n        c[int(n[i])] += 1\n    i = 1\n    while i<10:\n        if c[i]>1:\n            return False\n        i += 1\n    return True\n    \ndef is_pandigital8(x):\n    '''\n    Write a function to check if the given number is pandigital or not.\n    '''\n    n = str(x)\n    l = len(n)\n    c = [0]*10\n    for i in range(l):\n        c[int(n[i])] += 1\n    i = 1\n    while i<10:\n        if c[i]>1:\n            return False\n        i += 1\n    return True\n    \ndef is_pandigital9(x):\n    '''\n    Write a function to check if the given number is pandigital or not.\n    '''\n    n = str(x)\n    l = len(n)\n    c = [0]*10\n    for i in range(l):\n        c[int(n[i])] += 1\n    i ",
        "num_ids": 52
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    import numpy as np \n    return np.sum(x) == 36\n",
        "num_ids": 21
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%5==0 or x%7==0\n",
        "num_ids": 16
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x % 3 == 0) and (x % 5 == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 3 == 0 or x % 5 == 0 or x % 7 == 0\n",
        "num_ids": 22
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num=str(num)\n    if int(num[::-1])*2 == int(num)+1:\n        return True\n    return False",
        "num_ids": 37
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    print(\"input : \" + str(num))\n    num = str(num)\n    print(\"input reversed : \" + str(num[::-1]))\n    num1 = int(num[::-1])\n    print(\"reversed 2x : \" + str(num1 * 2))\n    num2 = int(num1 * 2)\n    print(\"2x reversed : \" + str(num2)[::-1])\n    num3 = int(num2[::-1])\n    if num3 == num:\n        return True\n    else:\n        return False\n",
        "num_ids": 137
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num >= 0:\n        num = int(str(num)[::-1])\n    else:\n        num = int('-' + str(num)[::-1][:-1])\n    \n    if num <= 2 * num:\n        return True\n    else:\n        return False",
        "num_ids": 68
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    s = str(num)\n    n = len(s)\n    rev = int(s[::-1])\n    if num == (2 * rev) - num:\n        return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num==0:\n        return 0\n    s = 0\n    i = 0\n    while(num>0):\n        s+=num%10\n        num = int(num/10)\n        i+=1\n    return int(s/i)\n",
        "num_ids": 62
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])*2\ndef is_palindrome(num):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    return str(num)==str(num)[::-1]\ndef fib(n):\n    '''\n    Write a python function that takes in a positive integer n, and returns a list of the first n numbers in the fibonacci sequence.\n    '''\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        num1 = 0\n        num2 = 1\n        return [num1, num2] + fib(n-2)\ndef fib_fast(n):\n    '''\n    Write a python function that takes in a positive integer n, and returns a list of the first n numbers in the fibonacci sequence. The function should be faster than the one above.\n    '''\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        x1 = 0\n        x2 = 1\n        fibs = [x1, x2]\n        for i in range(n-2):\n            x = x1 + x2\n            fibs.append(x)\n            x1 = x2\n            x2 = x\n        return fibs\ndef last_n_numbers(n, fib_list):\n    '''\n    Write a function that takes in a positive integer n and a list of positive integers, and returns the last n numbers of the fibonacci sequence.\n    '''\n    return fib_list[-n:]\ndef in_list(num, fib_list):\n    '''\n    Write a function that takes in a positive integer n and a list of positive integers, and returns true if the number is equal to the sum of the last n numbers in the fibonacci sequence. Otherwise, return false.\n    '''\n    fib_list = fib_list[-1:]\n    if num in fib_list:\n        return True\n    else:\n        return False\ndef fib_list_to_str(fib_list):\n    '''\n    Write a function that takes in a list of positive integers and returns a string that is a numeric representation of the last n numbers in the fibonacci sequence.\n    '''\n    num_str = ''\n    for i in range(len(fib_list)):\n        num_str += str(fib_list[i])\n    return num_str\ndef reverse_list(a_list):\n    '''\n    Write a function that takes in a list of positive integers, reverses it, and returns the new list.\n    '''\n    reversed_list = []\n    for i in range(len(a_list)-1, -1, -1):\n        reversed_list.append(a_list[i])\n    return reversed_list\ndef divisible_by_7(num_list):\n    '''\n    Write a function that takes in a list of positive integers, and returns the amount of values in the list that are divisible by 7.\n    '''\n    num_list = num_list[-1:]\n    count = 0\n    for i in num_list:\n        if i%7 == 0:\n            count += 1\n    return count\ndef sum_digits(num):\n    '''\n    Write a function that takes in a positive integer, and returns the sum of the digits in the integer.\n    '''\n    sum = 0\n    while num > 0:\n        sum += num%10\n        num = num//10\n    return sum\ndef add_digits(num):\n    '''\n    Write a function that takes in a positive integer, and returns the sum of the digits in the integer.\n    '''\n    return sum_digits(num)\ndef largest_prime_factor(num):\n    '''\n    Write a function that takes in a positive integer and returns the largest prime factor of the integer.\n    '''\n    if is_prime(num):\n        return num\n    else:\n        for i in range(num, 2, -1):\n            if num%i == 0:\n                if is_prime(i):\n                    return i\ndef add_digits_of_palindrome(num):\n    '''\n    Write a function that takes in a positive integer, and returns the sum of the digits in the integer.\n    '''\n    return sum_digits(num)\ndef sum_of_digits(num):\n    '''\n    Write a function that takes in a positive integer, and returns the sum of the digits in the integer.\n    '''\n    sum = 0\n    while num > 0:\n        sum += num%10\n        num = num//10\n    return sum\ndef largest_palindrome(num):\n    '''\n    Write a function that takes in a positive integer, and returns the largest palindrome less than the integer.\n    '''\n    return int(str(num)[::-1])*10\ndef multiply_by_9(num):\n    '''\n    Write a function that takes in a positive integer, and returns the number of times 9 can be multiplied by 9 less than the original number.\n    '''\n    return int(num/9)*9\ndef multiply_by_9_fast(num):\n    '''\n    Write a function that takes in a positive integer, and returns the number of times 9 can be multiplied by 9 less than the original number. The function should be faster than the one above.\n    '''\n    count = 0\n    while num >= 9:\n        num = num//9\n        count += 1\n    return count\ndef factorial(num):\n    '''\n    Write a function that takes in a positive integer, and returns the factorial of the number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return num*factorial(num-1)\ndef digital_root(num):\n    '''\n    Write a function that takes in a positive integer, and returns the sum of the digits in the integer.\n    '''\n    sum = 0\n    while num > 0:\n        sum += num%10\n        num = num//10\n    return sum\ndef sum_of_palindromes(num):\n    '''\n    Write a function that takes in a positive integer, and returns the sum of the palindromes less than the original number.\n    '''\n    return sum_of_digits(num)\ndef sum_of_digits_fast(num):\n    '''\n    Write a function that takes in a positive integer, and returns the sum of the digits in the integer. The function should be faster than the one above.\n    '''\n    count = 0\n    while num > 0:\n        count += num%10\n        num = num//10\n    return count\ndef is_even(num):\n    '''\n    Write a function that takes in a positive integer, and returns true if the integer is even, otherwise returns false.\n    '''\n    return num%2 == 0\ndef is_odd(num):\n    '''\n    Write a function that takes in a positive integer, and returns true if the integer is odd, otherwise returns false.\n    '''\n    return num%2 == 1\ndef is_prime(num):\n    '''\n    Write a function that takes in a positive integer, and returns true if the integer is prime, otherwise returns false.\n    '''\n    if num == 1:\n        return False\n    else:\n        for i in range(2, int(num/2)+1):\n            if num%i == 0:\n                return False\n        return True\ndef sum_of_primes(num):\n    '''\n    Write a function that takes in a positive integer, and returns the sum of the primes less than the original number.\n    '''\n    count = 0\n    for i in range(2, num):\n        if is_prime(i):\n            count += i\n    return count\ndef sum_of_primes_fast(num):\n    '''\n    Write a function that takes in a positive integer, and returns the sum of the primes less than the original number. The function should be faster than the one above.\n    '''\n    count = 0\n    for i in range(2, num):\n        if is_prime(i):\n            count += i\n    return count\ndef count_even(num_list):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    rev = 0\n    #loop for the reverse of the number\n    for i in range(len(str(num))):\n        rev *= 10\n        rev += num % 10\n        num //= 10\n    return num == rev\n",
        "num_ids": 58
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == 2 * int(str(num)[::-1]) + 1\n",
        "num_ids": 21
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    reverse = num[::-1]\n    if(num == reverse[1:]):\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 45
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])*2-1\n",
        "num_ids": 21
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = list(str(max(arr)))\n    return num\n",
        "num_ids": 18
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) < 1 :\n        return\n    if len(arr) == 1:\n        return int(max(arr))\n    return max(arr)\n    \ndef check_permutation_using_Sort(a,b):\n    if len(a)!= len(b) :\n        return False\n    \n    if sorted(a) == sorted(b) :\n        return True\n    return False\n",
        "num_ids": 98
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    numbers = \"0123456789\"\n    digit = ''\n    for i in range(len(numbers)) : \n        digit += numbers[i]\n        temp = digit\n        while(is_palindrome(temp)) : \n            temp += numbers[i]\n            temp = temp[::-1]\n        if(temp == \"\") : \n            continue\n        elif(len(temp) > len(digit)) : \n            digit = temp\n    return digit\n",
        "num_ids": 116
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    # Create an array of n+1 lists of n+1 size\n    dp = [[0 for x in range(n+1)] for y in range(n+1)]\n    max_num = 0\n    for i in range(1, n+1) : \n        for j in range(1, n+1) :\n            # If the current number is present as a digit\n            if (arr[i-1] == j) : \n                # If its number has not been found yet\n                if(dp[i-1][j-1] == 0) : \n                    # If the number is present as the first digit\n                    if(j == 1) : \n                        dp[i][j] = 1\n                    # If the number is present as the second digit\n                    else : \n                        dp[i][j] = 1 + dp[i-1][j-2]\n                # If the number has already been found\n                else : \n                    dp[i][j] = dp[i-1][j-1]\n            # If the current number is not present as a digit\n            else : \n                dp[i][j] = 0\n            if (dp[i][j] > max_num) : \n                max_num = dp[i][j]\n    return max_num\n",
        "num_ids": 313
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)) : \n        if (arr[i]!= 0) : \n            max_num = max_num * 10 + arr[i]\n        else : \n            break\n    return max_num\n",
        "num_ids": 76
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxNum = arr[0] \n    for num in arr : \n        if num > maxNum : \n            maxNum = num \n    return maxNum \n",
        "num_ids": 42
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the array to get the max digit.\n    arr.sort()\n    \n    # initialize the first number to 0\n    num = [0]\n",
        "num_ids": 38
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [1,5,4,3,2,1]\n    # arr = [2,3,4,1,5]\n    # arr = [2,3,4,1,5]\n    # arr = [1,2,3,4,5]\n    # arr = [1,5,4,3,2,1]\n    # arr = [1,2,3,4,5]\n    # arr = [1,5,4,3,2,1]\n    # arr = [1,5,4,3,2,1]\n    # arr = [1,5,4,3,2,1]\n    # arr = [1,2,3,4,5]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]\n    # arr = [1,2,3,4,5,6]",
        "num_ids": 2007
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1 : \n        return arr[0]\n",
        "num_ids": 20
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # create an empty dictionary\n    dic = {}\n    for i in arr :\n        dic[i] = dic.get(i, 0) + 1\n    largest_num = 0\n    for i in arr :\n        num = int(i) * dic[i]\n        if num > largest_num :\n            largest_num = num\n    return largest_num\n",
        "num_ids": 91
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0 and y>0) or (x>0 and y<0): \n        return True\n    else: \n        return False\n",
        "num_ids": 38
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0 and y>0) or (x>0 and y<0)\n",
        "num_ids": 24
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0: \n        print('both are positive')\n    elif x < 0 and y < 0: \n        print('both are negative')\n    else: \n        print('at least one of them is positive and the other is negative')\n    \ndef reverse_String(a): \n    '''\n    Write a python function to reverse a string.\n    '''\n    rev = a[::-1]\n    print(rev)\n",
        "num_ids": 18
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0 and y>0) or (x>0 and y<0): \n        return True\n    else: \n        return False\n",
        "num_ids": 38
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y>0:\n        return False\n    else:\n        return True\n    return True\n    \n    \ndef opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0\n    \ndef opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0\n",
        "num_ids": 10
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y >0:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 25
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0) and (y<0):\n        return True\n    elif (x<0) and (y>0):\n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    if x>0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y >=0:\n        return False\n    else:\n        return True\n",
        "num_ids": 23
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # list of octagonal numbers.\n    octagonal_number = []\n    # first octagonal number is 1.\n    octagonal_number.append(1)\n    # for each index, multiply the previous number by 8 and add 1.\n    for i in range(1, n):\n        octagonal_number.append(octagonal_number[i-1]*8+1)\n    # return the nth octagonal number.\n    return octagonal_number[n-1]",
        "num_ids": 113
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)//2\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n==0:\n        return 0\n    return n*(3*n-1)/2\n",
        "num_ids": 26
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\nn    \n    # n = int(input(\"Enter the nth value: \"))\n    \n    return (n * (n + 1))\n    \ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\nn    \n    # n = int(input(\"Enter the nth value: \"))\n    \n    return ((3 * n * n) - n) / 2\n    \ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\nn    \n    # n = int(input(\"Enter the nth value: \"))\n    \n    return ((2 * n * n) - n)\n    \ndef is_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\nn    \n    # n = int(input(\"Enter the nth value: \"))\n    \n    return ((5 * n * n) - n) / 2\n    \ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\nn    \n    # n = int(input(\"Enter the nth value: \"))\n    \n    return ((3 * n * n) - n) / 2\n    \ndef is_triangle(n): \n    '''\n    Write a function to find the nth triangle number.\n    '''\n    # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 15",
        "num_ids": 161
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_triangular(x):\n        a = int(x ** 0.5)\n        return a * (a + 1) == 2 * x\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 8\n    else:\n        count = 1\n        n -= 1\n        while not is_triangular(count):\n            count += 1\n        return count\n    \n",
        "num_ids": 97
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int((n**2 - (2*n) + 2) / 2)\n    \n    \ndef main():\n    '''\n    This function serves as the entry point for the application.\n    '''\n    number_of_octagons = eval(input(\"Enter the number of octagons to generate: \"))\n    octagon_generator = n_octagons(number_of_octagons)\n    print(\"\\nThe first %d octagons are: \" % number_of_octagons)\n    for i in range(number_of_octagons):\n        print(next(octagon_generator))\n        \n        ",
        "num_ids": 98
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        n_next = n + 1\n        n_prev = n - 1\n        oct_n_next = is_octagonal(n_next)\n        oct_n_prev = is_octagonal(n_prev)\n        return oct_n_next + oct_n_prev - 1\n",
        "num_ids": 97
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def count_digit_sum(n):\n        sum = 0\n        while n:\n            sum += n%10\n            n//=10\n        return sum\n",
        "num_ids": 40
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n",
        "num_ids": 16
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            l = len(substring)\n            x = 0\n            for char in substring:\n                x += int(char)\n            if x == l:\n                count += 1\n    return count\n",
        "num_ids": 94
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    num = len(s)\n    n = len(s)\n    s = \" \" + s + \" \"\n    arr = []\n    for i in range(n):\n        arr.append(i)\n    def dfs(i,s):\n        nonlocal arr\n        if i>=n:\n            return \n        if i<n and len(s)>0:\n            if int(s) == len(s):\n                arr.append(s)\n        dfs(i+1,s)\n        dfs(i+1,s+s[i])\n    dfs(0,\"\")\n    return len(arr)\nprint(count_Substrings(\"1234\"))\n",
        "num_ids": 166
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n=len(s)\n    cnt=0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(map(int,s[i:j+1]))==j-i+1:\n                cnt+=1\n    return cnt\n",
        "num_ids": 72
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    for i in range(len(s)):\n        result += count_Substrings_Helper(s, i, i)\n        result += count_Substrings_Helper(s, i, i+1)\n",
        "num_ids": 55
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    return len([i for i in range(len(s)) if len(s)==sum([int(i) for i in s[i:]])])\ndef max_Repeating(s):\n    '''\n    Write a python function to find the longest repeating substring in a given string\n    '''\n    d=defaultdict(list)\n    for i in range(len(s)):\n        d[s[i]].append(i)\n    return max(d, key=lambda x: len(d[x]))\ndef sherlockAndAnagrams(s):\n    '''\n    Write a python function to find number of pairs of anagrams in a given string.\n    '''\n    count=0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if sorted(s[i:j+1])==sorted(s[i:j+1]):\n                count+=1\n    return count\ndef permutation(s):\n    '''\n    Write a python function to find all the permutations of a given string\n    '''\n    return [i for i in set(\"\".join(s))]\ndef factorial(n):\n    '''\n    Write a python function to find n factorial\n    '''\n    if n==0:\n        return 1\n    return n*factorial(n-1)\ndef powersum(x,n):\n    '''\n    Write a python function to find the sum of powers of numbers from 1 to n\n    '''\n    return sum([i**x for i in range(1,n+1)])\ndef numberOfGoodSubarrays(arr):\n    '''\n    Write a python function to find the number of good subarrays\n    '''\n    good=0\n    curr=0\n    for i in arr:\n        if i==0:\n            curr=0\n            good+=curr\n        else:\n            curr+=1\n            good+=curr\n    return good\ndef countSubstrings(s):\n    '''\n    Write a python function to count the number of substrings with the given sum of digits\n    '''\n    return len([i for i in range(len(s)) if len(s)==sum([int(i) for i in s[i:]])])\ndef goodSubarrays(arr):\n    '''\n    Write a python function to find the number of good subarrays\n    '''\n    good=0\n    curr=0\n    for i in arr:\n        if i==0:\n            curr=0\n            good+=curr\n        else:\n            curr+=1\n            good+=curr\n    return good\ndef maxSubarray(arr):\n    '''\n    Write a python function to find the maximum length of subarray with the given sum of digits\n    '''\n    d=defaultdict(list)\n    for i in range(len(arr)):\n        d[arr[i]].append(i)\n    return max(d, key=lambda x: len(d[x]))\ndef minRemoveToMakeValid(s):\n    '''\n    Write a python function to find the minimum number of characters to be removed to make the string valid\n    '''\n    stack=[]\n    for i in range(len(s)):\n        if s[i]=='(':\n            stack.append(i)\n        elif s[i]==')':\n            if len(stack)!=0:\n                stack.pop()\n            else:\n                stack.append(i)\n    stack=list(set(stack))\n    return len(s)-len(stack)\ndef maxSubArray(nums):\n    '''\n    Write a python function to find the maximum contiguous sum of a given array\n    '''\n    max_sum=0\n    curr_sum=0\n    for i in nums:\n        curr_sum=curr_sum+i\n        if curr_sum<0:\n            curr_sum=0\n        elif curr_sum>max_sum:\n            max_sum=curr_sum\n    return max_sum\ndef moveZeroes(arr):\n    '''\n    Write a python function to move all zeroes at the end of the array\n    '''\n    i=0\n    for j in range(len(arr)):\n        if arr[j]!=0:\n            arr[i]=arr[j]\n            i+=1\n    for k in range(i, len(arr)):\n        arr[k]=0\n    return arr\ndef climbingLeaderboard(scores, alice):\n    '''\n    Write a python function to find the climbing leaderboard rank for each person\n    '''\n    rank=[]\n    for i in alice:\n        s=sorted(scores)\n        s.append(i)\n        s.reverse()\n        rank.append(len([j for j in range(len(s)-1) if s[j]>s[j+1]])+1)\n    return rank\ndef mostFrequent(arr):\n    '''\n    Write a python function to find the most frequently occuring element in a given array\n    '''\n    d=defaultdict(list)\n    for i in arr:\n        d[i].append(i)\n    return max(d, key=lambda x: len(d[x]))\ndef numJewelsInStones(jewels, stones):\n    '''\n    Write a python function to find the number of Jewels in a given list of stones\n    '''\n    return sum([j in stones for j in jewels])\ndef maxSatisfied(customers, grumpy, x):\n    '''\n    Write a python function to find the maximum number of customers satisfied by the time x\n    '''\n    count=0\n    for i in range(len(customers)):\n        if customers[i]==0:\n            count=0\n        else:\n            count+=1\n        if i>=x:\n            count+=grumpy[i]\n    return count\ndef maxProduct(arr):\n    '''\n    Write a python function to find the maximum product of three numbers in a given array\n    '''\n    return max([i*j*k for i in arr for j in arr for k in arr if i!=j and i!=k and j!=k])\ndef maxProduct2(nums):\n    '''\n    Write a python function to find the maximum product of three numbers in a given array\n    '''\n    if len(nums)<4:\n        return False\n    return max(nums[0]*nums[1]*nums[-1], nums[-1]*nums[-2]*nums[-3])\ndef maxProduct3(arr):\n    '''\n    Write a python function to find the maximum product of three numbers in a given array\n    '''\n    a=b=c=0\n    for i in range(len(arr)):\n        if arr[i]>a:\n            a=arr[i]\n        elif arr[i]>b:\n            b=arr[i]\n        elif arr[i]>c:\n            c=arr[i]\n    return a*b*c\ndef maxProduct4(arr):\n    '''\n    Write a python function to find the maximum product of three numbers in a given array\n    '''\n    return max([arr[i]*arr[i+1]*arr[i+2] for i in range(len(arr)-2)])\ndef lengthOfLongestSubstring(s):\n    '''\n    Write a python function to find the length of the longest substring without repeating characters\n    '''\n    maxi=0\n    i=0\n    j=0\n    d=defaultdict(list)\n    while(j<len(s)):\n        d[s[j]].append(j)\n        if len(d[s[j]])>1:\n            i=d[s[j]][0]+1\n            d[s[j]].pop(0)\n        j+=1\n        maxi=max(maxi, j-i)\n    return maxi\ndef numUniqueEmails(emails):\n    '''\n    Write a python function to find the number of unique emails in a given list of emails\n    '''\n    d=defaultdict(list)\n    for i in range(len(emails)):\n        d[emails[i].split('@')",
        "num_ids": 36
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    subs = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            subs[s[i:j+1]] += 1\n    print(subs)\n    return len([x for x in subs.values() if x > 1])\n",
        "num_ids": 78
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    m = len(s)\n    #dp[i][j] represents the number of substrings from index i to j\n    dp = [[0 for j in range(m)] for i in range(n)]\n    #base case\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1,-1,-1):\n        for j in range(i+1,n):\n            if i == j:\n                dp[i][j] = 1\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = dp[i+1][j]\n    #print(dp)\n    return dp[0][-1]\n",
        "num_ids": 202
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if len(s[i:j+1])!=0:\n                if sum(list(map(int,s[i:j+1])))==len(s[i:j+1]):\n                    count+=1\n    return count\ndef isSubsequence(s, t):\n    '''\n    Write a python function to check whether a given string is a subsequence of a another string.\n    '''\n    s=list(s)\n    t=list(t)\n    t.append(\" \")\n    index=0\n    for i in range(len(t)):\n        if t[i]==s[index]:\n            index+=1\n            if index==len(s):\n                return True\n    return False\ndef reverse_Vowels(s):\n    '''\n    Write a python function to reverse the vowels in the given string.\n    '''\n    vowels=['a','e','i','o','u']\n    temp=list(s)\n    rev=[]\n    for i in s:\n        if i in vowels:\n            rev.append(i)\n    for i in range(len(s)):\n        if s[i] in vowels:\n            temp[i]=rev.pop()\n    return \"\".join(temp)\ndef majority_element(nums):\n    '''\n    Write a python function to check whether the given array contains a majority element.\n    '''\n    dic=defaultdict(int)\n    for i in nums:\n        dic[i]+=1\n    return dic\ndef int_to_roman(num):\n    '''\n    Write a python function to convert a number to roman number.\n    '''\n    def dict1(num):\n        dict1={1:'I',5:'V',10:'X',50:'L',100:'C',500:'D',1000:'M'}\n        return dict1[num]\n    def num_value(num):\n        dic={'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000}\n        return dic[num]\n    s=0\n    n=num\n    while n>0:\n        if num_value(n)>num_value(n-1):\n            s+=num_value(n)\n        else:\n            s-=num_value(n)\n        n-=1\n    list1=[]\n    while s!=0:\n        list1.append(dict1(s))\n        s-=s//1000\n    list1.reverse()\n    return \"\".join(list1)\ndef roman_to_int(s):\n    '''\n    Write a python function to convert a roman number to integer.\n    '''\n    dic={\"I\":1,\"V\":5,\"X\":10,\"L\":50,\"C\":100,\"D\":500,\"M\":1000}\n    rev=0\n    for i in range(len(s)):\n        if i>0 and dic[s[i]]<dic[s[i-1]]:\n            rev-=dic[s[i]]\n        else:\n            rev+=dic[s[i]]\n    return rev\ndef cat_dog(s):\n    '''\n    Write a python function to check whether the given string contains any cat or dog.\n    '''\n    return \"dog\" in s or \"cat\" in s\ndef count_hundereds(s):\n    '''\n    Write a python function to check whether the given string contains any numbers which have the sum of its digits equal to 100.\n    '''\n    s=list(s)\n    for i in range(len(s)):\n        if i<len(s)-1:\n            if int(s[i])+int(s[i+1])==100:\n                return True\n    return False\ndef find_missing_letter(s):\n    '''\n    Write a python function to find the missing letter in a given string.\n    '''\n    letters=list(s)\n    for i in range(len(letters)):\n        if ord(letters[i])+1!=ord(letters[i+1]):\n            return chr(ord(letters[i])+1)\n    return chr(ord(letters[-1])+1)\ndef max_occured_letter(s):\n    '''\n    Write a python function to find the most occurred letter in a given string.\n    '''\n    letters=list(s)\n    dic={}\n    for i in letters:\n        if i not in dic:\n            dic[i]=1\n        else:\n            dic[i]+=1\n    max1=0\n    for i in dic:\n        if dic[i]>max1:\n            max1=dic[i]\n            letter=i\n    return letter\ndef make_sentence(s):\n    '''\n    Write a python function to find the most occurred letter in a given string.\n    '''\n    temp=s.split()\n    dic={}\n    for i in temp:\n        for j in i:\n            if j not in dic:\n                dic[j]=1\n            else:\n                dic[j]+=1\n    max1=0\n    for i in dic:\n        if dic[i]>max1:\n            max1=dic[i]\n    sentence=[]\n    for i in dic:\n        if dic[i]==max1:\n            sentence.append(i)\n    return \" \".join(sentence)\ndef count_digits(n):\n    '''\n    Write a python function to check whether the given number has the digits that have the sum of their digits equal to the given number.\n    '''\n    if n<10:\n        return True\n    else:\n        list1=[]\n        while n>0:\n            list1.append(n%10)\n            n//=10\n        list1.reverse()\n        return sum(list1)\ndef same_frequency(s):\n    '''\n    Write a python function to check whether the given string contains the same number of digits, letters and spaces.\n    '''\n    list1=list(s)\n    dic1={}\n    for i in list1:\n        if i not in dic1:\n            dic1[i]=1\n        else:\n            dic1[i]+=1\n    list2=list(s)\n    list2.sort()\n    dic2={}\n    for i in list2:\n        if i not in dic2:\n            dic2[i]=1\n        else:\n            dic2[i]+=1\n    return dic1==dic2\ndef find_substring(s):\n    '''\n    Write a python function to find the longest substring with all distinct characters.\n    '''\n    max1=0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            list1=list(s[i:j+1])\n            list1.sort()\n            if list1==sorted(list1):\n                if max1<j-i+1:\n                    max1=j-i+1\n    return max1\ndef remove_duplicates(s):\n    '''\n    Write a python function to remove the duplicate characters from the given string.\n    '''\n    return \"\".join(set(s))\ndef random_list_generator(n,m):\n    '''\n    Write a python function to generate a random list of numbers between 1 and 20.\n    '''\n    import random\n    list1=[]\n    for i in range(n):\n        list1.append(random.randint(1,m))\n    return list1\ndef print_formatted(n):\n    '''\n    Write a python function to print the numbers in a list in the following format\n    1\n    2   2\n    3   3   3\n    ...\n    '''\n    for i in range(1,n+1):\n        decimal=str(i).rjust(len(str(n)),' ')\n        octal=oct(i)[2:].rjust(len(str(n)),' ')\n        hexa=hex(i)[2:]",
        "num_ids": 70
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    sub_len = len(s)\n    for i in range(0, sub_len):\n        d[i] = 1\n    for i in range(1, sub_len):\n        for j in range(i):\n            if s[j] == s[i] and d[j] + 1 > d[i]:\n                d[i] = d[j] + 1\n    print(d)\n    return sum([val for val in d.values()])\n",
        "num_ids": 121
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    lenS=len(s)\n    def count(start,lenS):\n        if start>=lenS:\n            return 0\n        ans=0\n        for i in range(start,lenS):\n            ans+=count(i+1,lenS)+1 if sum(list(map(int,s[start:i+1])))==lenS else 0\n        return ans\n    return count(0,lenS)\n",
        "num_ids": 102
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest == None:\n            smallest = x\n        elif x < smallest:\n            smallest = x\n    return smallest\n",
        "num_ids": 47
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)\n",
        "num_ids": 24
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # method1:\n    # return min(xs)\n",
        "num_ids": 16
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for num in xs:\n        if num < smallest_num:\n            smallest_num = num\n    return smallest_num\n",
        "num_ids": 45
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    print(min(xs))\n    \nsmallest_num([1,2,3,5,7,8])\n",
        "num_ids": 30
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # num_list = [2,9,8,7,1,0]\n    # num_list.sort()\n    # return num_list[0]\n    return min(xs)\n",
        "num_ids": 48
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    small = xs[0]\n    for x in xs:\n        if x < small:\n            small = x\n    return small\n",
        "num_ids": 35
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            max_diff = max(max_diff, test_list[j] - test_list[i])\n    return max_diff\n",
        "num_ids": 74
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n    maximum_difference = 0\n    length = len(test_list)\n    # assume pairs are from 0 to length-2\n    for i in range(0, length - 1):\n        for j in range(i+1, length):\n            # difference = abs(test_list[i] - test_list[j])\n            difference = test_list[j] - test_list[i]\n            if difference > maximum_difference:\n                maximum_difference = difference\n    return maximum_difference\n",
        "num_ids": 124
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list)<=1:\n        return None\n    difference_list=[]\n    for index,element in enumerate(test_list):\n        if index+1<len(test_list):\n            difference=abs(test_list[index]-test_list[index+1])\n            difference_list.append(difference)\n    return max(difference_list)\n",
        "num_ids": 97
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    # Initialize a variable to hold the difference\n    # between the largest and smallest element.\n    largest_difference = None\n",
        "num_ids": 33
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = test_list\n    result = []\n    for i in test_list:\n        for j in test_list:\n            if(i+j > j+i):\n                result.append(i+j)\n            else:\n                result.append(j+i)\n    return max(result) - min(result)\n",
        "num_ids": 82
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    diff = test_list[0] - test_list[1]\n    for i in range(0,len(test_list)-1):\n        if test_list[i+1] - test_list[i] > diff:\n            diff = test_list[i+1] - test_list[i]\n    return diff\n",
        "num_ids": 88
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = sorted(test_list)\n    diff = test_list[1] - test_list[0]\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[j] - test_list[i]) > diff:\n                diff = test_list[j] - test_list[i]\n    return diff\n",
        "num_ids": 104
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_val = 0\n    for x in range(0, len(test_list)-1):\n        for y in range(x+1, len(test_list)):\n            val = abs(test_list[x] - test_list[y])\n            if val > max_val:\n                max_val = val\n    return max_val\n",
        "num_ids": 85
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not isinstance(test_list, tuple):\n        raise ValueError('input must be a tuple')\n    if not test_list:\n        raise ValueError('input must not be empty')\n    \n    max_dif = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            max_dif = max(max_dif, abs(test_list[i] - test_list[j]))\n    return max_dif\n",
        "num_ids": 128
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # variable to store the difference\n    diff = 0\n    # iterate over the list\n    for index in range(len(test_list)):\n        for index_2 in range(index + 1, len(test_list)):\n            if abs(test_list[index] - test_list[index_2]) > diff:\n                diff = abs(test_list[index] - test_list[index_2])\n",
        "num_ids": 101
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda sub:sub[1], reverse=True)\n    \nprint(subject_marks([('English', 80), ('Science', 90), ('Maths', 85)]))\n",
        "num_ids": 49
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjects = sorted(subjectmarks, key=lambda x: x[1])\n    print(sorted_subjects)\n    \nsubjects = ['english','maths', 'hindi','science','social']\nsubjectmarks = [56, 78, 90, 54, 32]\nsubject_marks(zip(subjects, subjectmarks))",
        "num_ids": 82
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l = []\n    for mark in subjectmarks:\n        l.append(mark[1])\n    l.sort()\n    print(l)\n",
        "num_ids": 37
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sort_list = sorted(subjectmarks, key = lambda x:x[1],reverse=True)\n    return sort_list\n",
        "num_ids": 32
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjects = []\n    for i in subjectmarks:\n        subjects.append(i[1])\n",
        "num_ids": 27
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if subjectmarks:\n        subjectmarks.sort(key=lambda x: x[1])\n        return subjectmarks\n    else:\n        return []\n",
        "num_ids": 37
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subject = sorted(subjectmarks,key=lambda tup:tup[1],reverse=True)\n    print(sorted_subject)\n    return sorted_subject\n    \nsubject_marks([('Math', 90),('English', 92),('Science', 88),('Social', 99)])\n",
        "num_ids": 72
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return subjectmarks[1]\n",
        "num_ids": 10
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l=list(subjectmarks)\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i][1]>l[j][1]:\n                l[i],l[j]=l[j],l[i]\n    return l\n    \n",
        "num_ids": 79
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        total = 0\n        for i in data_list:\n            total += recursive_list_sum(i)\n        return total\n    else:\n        return data_list\n",
        "num_ids": 54
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == type([]):\n        return sum(recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:]))\n    else:\n        return data_list\n    \ndef recursive_count(data_list):\n    '''\n    Write a function to flatten a list and return the number of elements in the list.\n    '''\n    if type(data_list) == type([]):\n        return 1 + recursive_count(data_list[0]) + recursive_count(data_list[1:])\n    else:\n        return 1\n",
        "num_ids": 51
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for i in data_list:\n        if isinstance(i, list):\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total",
        "num_ids": 50
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 81
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1 and type(data_list[0]) is list:\n        return sum(data_list[0]) + recursive_list_sum(data_list[0])\n    else:\n        return sum(data_list)\n",
        "num_ids": 62
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 46
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flat_list = []\n    for elem in data_list:\n        if type(elem) == list:\n            flat_list += recursive_list_sum(elem)\n        else:\n            flat_list.append(elem)\n    return flat_list\n",
        "num_ids": 66
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list:\n        if isinstance(data_list[0], list):\n            return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return 0\n",
        "num_ids": 87
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return recursive_list_sum_helper([], data_list)\n",
        "num_ids": 19
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    total = 0\n    \n    for item in data_list:\n        if type(item) == list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    \n    return total",
        "num_ids": 56
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    \n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item > 0:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for i in list:\n        if i > 0:\n            positive += 1\n    return positive\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count += 1\n    return pos_count\n",
        "num_ids": 36
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos=0\n    for i in list:\n        if i>0:\n            pos+=1\n    return pos\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        #define the bell numbers\n        bells = [0 for i in range(n+1)]\n        bells[0] = 1\n        bells[1] = 1\n        bells[2] = 2\n        #from now on, define the bell numbers\n        for i in range(3,n+1):\n            bells[i] = sum([bells[i-1], bells[i-2], 2*bells[i-3]])\n        return bells[n]\n",
        "num_ids": 143
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0 or n==1:\n        return 1\n    else:\n        return bell_number(n-1)+sum([bell_number(i)*bell_number(n-i-1) for i in range(n)])\n",
        "num_ids": 58
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1]\n    if n >= 1:\n        bell_numbers.append(1)\n    for i in range(2,n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    return bell_numbers[n]\n",
        "num_ids": 81
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [0, 1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 473094, 512044, 45749, 371795, 330670, 290881, 285772, 304448, 307071, 393049, 364031, 357507, 363601, 384008, 407544, 441483, 405729, 361795, 378027, 447696, 431269, 420699, 468135, 490375, 493359, 536266, 562823, 585640, 590294, 600136, 524984, 604658, 604658, 654572, 702930, 715393, 726526, 749007, 771824, 783529, 809971, 877249, 954419, 975356, 995458, 103677, 106875, 112561, 117429, 123334, 129957, 136683, 143936, 149511, 157597, 165468, 172843, 179426, 187908, 193098, 197769, 202548, 218907, 228027, 241894, 254857, 269417, 282074, 296466, 309933, 325086, 339217, 362839, 389258, 414419, 438647, 462411, 478194, 491162, 513241, 535983, 557641, 584026, 607884, 629735, 629657, 645957, 663531, 695109, 715113, 739920, 771049, 787662, 803919, 829891, 863661, 899381, 929251, 972960, 104711, 110991, 117307, 126084, 131455, 139896, 148932, 157945, 168614, 171172, 175949, 181764, 185324, 191887, 196971, 202054, 208766, 214766, 220819, 226377, 240599, 250708, 270617, 282541, 296716, 311425, 329119, 361745, 384779, 404357, 423113, 448823, 469116, 496742, 516228, 543992, 562031, 595385, 600769, 617066, 636577, 650586, 674462, 690761, 705231, 722685, 733484, 745131, 759185, 776348, 786265, 794162, 801492, 808971, 816442, 824260, 830277, 838239, 846681, 852160, 865608, 880789, 898191, 900726, 903570, 912704, 919053, 925099, 931472, 937952, 943162, 948449, 951182, 957666, 964944, 971382, 979506, 985652, 997685, ]\n",
        "num_ids": 732
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell(n) // bell(n - 2)\n",
        "num_ids": 16
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = list(range(1, n+1))\n    t = [[bells[i]] for i in range(len(bells))]\n    for k in range(2, n+1):\n        for i in range(k-1, n):\n            t[i].append(sum(t[i-k+1])*sum(bells[j+k-1] for j in range(i-k+2, i+1)))\n    return sum(t[n-1])\n",
        "num_ids": 120
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    bells = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, \n        55112, 291213, 1454226, 9270723, 47308163, 211694811,\n        1273012161, 5845276827]\n    if n < 0:\n        return 0\n    elif n < len(bells):\n        return bells[n]\n    else:\n        bells = [0] * (n+1)\n        bells[0] = 1\n        for i in range(len(bells)):\n            for j in range(i):\n                bells[i] += bells[j] * bells[i-j-1]\n        return bells[n]\n",
        "num_ids": 184
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [[0] * (n+1) for i in range(n+1)]\n    for i in range(1, n+1):\n        bell[1][i] = 1\n    for k in range(2, n+1):\n        for i in range(1, n+1):\n            bell[k][i] = bell[k-1][i-1] + bell[k-1][i]\n    return bell[n][n]\n",
        "num_ids": 110
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell_numbers(i):\n        if i == 1: return [0,1]\n        if i == 2: return [1,1,1]\n        \n        bn = [0]*(i+1)\n        bn[0] = 1\n        bn[1] = 1\n        bn[2] = 1\n        \n        for j in range(3,i+1):\n            bn[j] = 0\n            for k in range(1,j):\n                bn[j] += bn[j-k]*bn[k]\n        return bn\n    \n    bn = bell_numbers(n)\n    if n > 6: return bn[n]\n    else: return bn[n] - bn[n-2]\n",
        "num_ids": 181
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell_comb(m):\n        if m == 0 or m == 1:\n            return 1\n        bell_combs = 0\n        for i in range(m+1):\n            bell_combs += bell_comb(i) * bell_comb(m-i)\n        return bell_combs\n    return bell_comb(n)\n",
        "num_ids": 83
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\nA = [6, 5, 4, 4] \nprint(is_Monotonic(A)) \n",
        "num_ids": 82
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "num_ids": 60
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n",
        "num_ids": 60
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "num_ids": 59
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "num_ids": 59
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            is_monotonic = False\n            break\n    return is_monotonic\n",
        "num_ids": 58
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n",
        "num_ids": 60
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "num_ids": 59
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n",
        "num_ids": 60
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return A == sorted(A) or A == sorted(A, reverse = True)\n",
        "num_ids": 22
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if len(s) > len(l):\n        return False\n    if l == s:\n        return True\n    for i in range(len(l) - len(s) + 1):\n        if l[i] == s[0]:\n            check = True\n            for j in range(len(s)):\n                if l[i+j]!= s[j]:\n                    check = False\n                    break\n            if check:\n                return True\n    return False\n",
        "num_ids": 133
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n",
        "num_ids": 58
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # print(f'l: {l}')\n    # print(f's: {s}')\n    # print(f'1: {l[0:1]}')\n    # print(f'2: {s[0:1]}')\n    # print(f'3: {l[1:2]}')\n    # print(f'4: {s[1:2]}')\n    # print(f'5: {l[2:3]}')\n    # print(f'6: {s[2:3]}')\n    # print(f'7: {l[3:4]}')\n    # print(f'8: {s[3:4]}')\n    # print(f'9: {l[4:5]}')\n    # print(f'10: {s[4:5]}')\n    # print(f'11: {l[5:6]}')\n    # print(f'12: {s[5:6]}')\n    # print(f'13: {l[6:7]}')\n    # print(f'14: {s[6:7]}')\n    # print(f'15: {l[7:8]}')\n    # print(f'16: {s[7:8]}')\n    # print(f'17: {l[8:9]}')\n    # print(f'18: {s[8:9]}')\n    # print(f'19: {l[9:10]}')\n    # print(f'20: {s[9:10]}')\n    # print(f'21: {l[10:11]}')\n    # print(f'22: {s[10:11]}')\n    # print(f'23: {l[11:12]}')\n    # print(f'24: {s[11:12]}')\n    # print(f'25: {l[12:13]}')\n    # print(f'26: {s[12:13]}')\n    # print(f'27: {l[13:14]}')\n    # print(f'28: {s[13:14]}')\n    # print(f'29: {l[14:15]}')\n    # print(f'30: {s[14:15]}')\n    # print(f'31: {l[15:16]}')\n    # print(f'32: {s[15:16]}')\n    # print(f'33: {l[16:17]}')\n    # print(f'34: {s[16:17]}')\n    # print(f'35: {l[17:18]}')\n    # print(f'36: {s[17:18]}')\n    # print(f'37: {l[18:19]}')\n    # print(f'38: {s[18:19]}')\n    # print(f'39: {l[19:20]}')\n    # print(f'40: {s[19:20]}')\n    # print(f'41: {l[20:21]}')\n    # print(f'42: {s[20:21]}')\n    # print(f'43: {l[21:22]}')\n    # print(f'44: {s[21:22]}')\n    # print(f'45: {l[22:23]}')\n    # print(f'46: {s[22:23]}')\n    # print(f'47: {l[23:24]}')\n    # print(f'48: {s[23:24]}')\n    # print(f'49: {l[24:25]}')\n    # print(f'50: {s[24:25]}')\n    # print(f'51: {l[25:26]}')\n    # print(f'52: {s[25:26]}')\n    # print(f'53: {l[26:27]}')\n    # print(f'54: {s[26:27]}')\n    # print(f'55: {l[27:28]}')\n    # print(f'56: {s[27:28]}')\n    # print(f'57: {l[28:29]}')\n    # print(f'58: {s[28:29]}')\n    # print(f'59: {l[29:30]}')\n    # print(f'60: {s[29:30]}')\n    # print(f'61: {l[30:31]}')\n    # print(f'62: {s[30:31]}')\n    # print(f'63: {l[31:32]}')\n    # print(f'64: {s[31:32]}')\n    # print(f'65: {l[32:33]}')\n    # print(f'66: {s[32:33]}')\n    # print(f'67: {l[33:34]}')\n    # print(f'68: {s[33:34]}')\n    # print(f'69: {l[34:35]}')\n    # print(f'70: {s[34:35]}')\n    # print(f'71: {l[35:36]}')\n    # print(f'72: {s[35:36]}')\n    # print(f'73: {l[36:37]}')\n    # print(f'74: {s[36:37]}')\n    # print(f'75: {l[37:38]}')\n    # print(f'76: {s[37:38]}')\n    # print(f'77: {l[38:39]}')\n    # print(f'78: {s[38:39]}')\n    # print(f'79: {l[39:40]}')\n    # print(f'80: {s[39:40]}')\n    # print(f'81: {l[40:41]}')\n    # print(f'82: {s[40:41]}')\n    # print(f'83: {l[41:42]}')\n    # print(f'84: {s[41:42]}')\n    # print(f'85: {l[42:43]}')\n    # print(f'86: {s[42:43]}')\n    # print(f'87: {l[43:44]}')\n    # print(f'88: {s[43:44]}')\n    # print(f'89: {l[44:45]}')\n    # print(f'90: {s[44:45]}')\n    # print(f'91: {l[45:46]}')\n    # print(f'92: {s[45:46]}')\n    # print(f'93: {l[46:47]}')\n    # print(f'94: {s[46:47]}')\n    # print(f'95: {l[47:48]}')\n    # print(f'96: {s[47:48]}')\n    # print(f'97: {l[48:49]}')\n    # print(f'98: {s[48:49]}')\n    # print(f'99: {l[49:50]}')\n    # print(f'100: {s[49:50]}')\n",
        "num_ids": 1727
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Make a copy of sublist\n    s_copy = s[:]\n    # traverse in the main list\n    for i in range(len(l)):\n        # if one element of the sublist doesn't match with the\n        # corresponding element in the main list then break\n        # from the loop\n        if l[i]!= s_copy[0]:\n            break\n        # slice the sublist for the next element comparison\n        s_copy = s_copy[1:]\n        # if the sublist is exhausted and all the elements\n        # matched, then return True\n        if len(s_copy) == 0:\n            return True\n    return False\n",
        "num_ids": 155
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == s:\n        return True\n    elif len(l) < len(s):\n        return False\n    else:\n        for i in range(len(s)):\n            if l[i]!= s[i]:\n                return False\n        return True\n",
        "num_ids": 67
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    try:\n        if s == []:\n            return True\n        for i in range(len(s)):\n            if s[i]!= l[i]:\n                return False\n        return True\n    except:\n        return False\n    \ndef max_common_sublist_length(l1, l2):\n    '''\n    Write a function to find the length of the longest common sublist of two lists\n    '''\n    if not is_sublist(l1, l2):\n        return 0\n    if not is_sublist(l2, l1):\n        return 0\n    \n    max_len = 0\n    \n    for i in range(1, len(l1) + 1):\n        for j in range(1, len(l2) + 1):\n            if is_sublist(l1[:i], l2[:j]):\n                max_len = max(max_len, i + j - 1)\n    return max_len\n",
        "num_ids": 130
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    #First, assume s is not a sublist of l\n    sublist_flag = False\n    for i in range(len(l)-len(s)+1):\n        if l[i] == s[0]:\n            if len(s) == 1:\n                sublist_flag = True\n                break\n            else:\n                if l[i:i+len(s)] == s:\n                    sublist_flag = True\n                    break\n    #If s is not a sublist of l, then check whether it can be attached to l\n    #by adding some elements from l\n    if not sublist_flag:\n        for i in range(len(l)-len(s)+1):\n            if l[i] == s[0]:\n                if len(s) == 1:\n                    sublist_flag = True\n                    break\n                else:\n                    if l[i:i+len(s)] == s[:len(s)-1]:\n                        for ele in s[len(s)-1:]:\n                            if l[i+len(s)-1] == ele:\n                                i = i + len(s) - 1\n                                continue\n                            else:\n                                break\n                        if i == len(l) - len(s) or l[i+len(s)-1]!= ele:\n                            sublist_flag = False\n                            break\n                        else:\n                            sublist_flag = True\n                            break\n    return sublist_flag\n",
        "num_ids": 336
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            #start = i\n            count = 1\n            for j in range(1,len(s)):\n                if l[i+j] == s[j]:\n                    count += 1\n                else:\n                    count = 1\n                    break\n            if count == len(s):\n                return True\n    return False\n",
        "num_ids": 99
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s_len = len(s)\n    l_len = len(l)\n    for i in range(s_len):\n        if s[i]!= l[i]:\n            return False\n    if s_len == 1:\n        return True\n    else:\n        for j in range(s_len, l_len):\n            if s[s_len-1] == l[j]:\n                return True\n        return False\n",
        "num_ids": 106
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    l = len(Input[0])\n    for i in range(1,len(Input)):\n        if len(Input[i])!=l:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    list_tuple = []\n    for i in Input:\n        list_tuple.append(i)\n",
        "num_ids": 28
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) < 2:\n        return True\n    elif len(Input[0])!= len(Input[1]):\n        return False\n    else:\n        if len(Input) == 2:\n            return True\n        else:\n            return (find_equal_tuple(Input[1:]) and find_equal_tuple([Input[0]] + Input[2:]))\n",
        "num_ids": 95
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    Output = False\n    \n    for i in Input:\n        if len(i)!= len(Input[0]):\n            break\n    else:\n        Output = True\n    \n    return Output\n",
        "num_ids": 51
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = []\n    for i in Input:\n        if len(i) == len(Input[0]):\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input)\n    tuple_set = set()\n    for i in range(length):\n        tuple_set.add(Input[i])\n    if len(tuple_set) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output=None\n    def equal_list(l):\n        if len(l)==0:\n            return True\n        else:\n            return l[0]==l[1] and equal_list(l[1:])\n    def equal_tuple(t):\n        if len(t)==0:\n            return True\n        else:\n            return equal_list(list(t))\n    def equal_func(Input):\n        try:\n            Output=equal_tuple(Input)\n        except:\n            Output=equal_list(Input)\n        return Output\n    return equal_func(Input)\n",
        "num_ids": 146
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    List = []\n    for i in range(len(Input)):\n        List.append(len(Input[i]))\n    if len(set(List)) == 1:\n        print(\"All tuples have equal length.\")\n    else:\n        print(\"Not all tuples have equal length.\")\n",
        "num_ids": 71
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if (i!=j):\n                if(len(Input[i])!=len(Input[j])):\n                    return False\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_tuple = []\n    for i in Input:\n        if len(i) == len(Input[0]):\n            equal_tuple.append(i)\n    if equal_tuple == []:\n        return False\n    else:\n        return True\n",
        "num_ids": 65
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n",
        "num_ids": 22
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # elements should have a numeric value\n    # if it is not a number, return -1\n    # else return the number\n    if nums == None or len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n",
        "num_ids": 71
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n",
        "num_ids": 34
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n",
        "num_ids": 45
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n",
        "num_ids": 11
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    \n    def _comb_sort(nums, begin, end):\n        if end - begin < 1:\n            return\n        gap = end - begin\n        div = 1\n        while div < gap:\n            for i in range(begin, end, div):\n                j = i + div\n                if j < end and nums[i] > nums[j]:\n                    swap(nums, i, j)\n            div *= 2\n        _comb_sort(nums, begin, end - div)\n        _comb_sort(nums, begin + div, end)\n    \n    _comb_sort(nums, 0, len(nums))\n",
        "num_ids": 192
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n",
        "num_ids": 45
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n",
        "num_ids": 34
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swaps = True\n",
        "num_ids": 17
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # for i in range(len(nums)):\n    #     for j in range(i+1, len(nums)):\n    #         if nums[i] > nums[j]:\n    #             nums[i], nums[j] = nums[j], nums[i]\n    # return nums\n",
        "num_ids": 82
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if i*i + j*j == n:\n                return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return False\n    if n < 0:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n < 0): \n        return False\n    for i in range(1,n+1): \n        if ((i * i - n) == 0): \n            return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i*i <= n:\n        if n%i == 0:\n            sq1 = i*i\n            sq2 = n - sq1\n            if sq1 == sq2:\n                print(f\"{sq1} and {sq2} are the two squares that sum up to {n}\")\n            else:\n                print(f\"{sq1} and {sq2} are not the two squares that sum up to {n}\")\n            break\n        i += 1\n    else:\n        print(\"Number is not a sum of two squares\")\n    \ndef dif_Square_V2(n):\n    i = 1\n    while i*i <= n:\n        if n%i == 0:\n            sq1 = i*i\n            sq2 = n - sq1\n            if sq1 == sq2:\n                print(f\"{sq1} and {sq2} are the two squares that sum up to {n}\")\n                break\n        i += 1\n    else:\n        print(\"Number is not a sum of two squares\")\n    \n",
        "num_ids": 252
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if (x**2 + y**2 == n):\n                return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0:\n        print(\"Please enter a positive integer\")\n    else:\n        # a^2 - b^2 = c^2\n        # n = b^2 - a^2\n        # n = (a + b)(a - b)\n        # n = (a^2 + b^2) - (a^2 - b^2) = (a + b)(a + b)\n        # n = (a^2 + a + b^2 + b) - (a^2 - a + b^2 - b)\n        # n = (a + b)^2 - (a - b)^2\n        # if n is odd, it cannot be represented as the difference of two squares.\n        if n % 2!= 0:\n            print(\"No\")\n        else:\n            # the number can be represented as the difference of two squares\n            sq1 = (int(n / 2) + 1) ** 2\n            sq2 = sq1 - n\n            print(\"Yes\") if sq2 >= 0 else print(\"No\")\n",
        "num_ids": 244
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n%4!=0:\n        return False\n    else:\n        for i in range(1,int(n/4)+1):\n            if i*i<n:\n                if n-i*i in dic:\n                    return True\n            if i*i==n:\n                return True\n        return False\nprint(dif_Square(6))\n",
        "num_ids": 89
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n/2) + 1):\n        if i*i == n:\n            return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0, n):\n        for j in range(0, n):\n            if (i*i + j*j == n):\n                print(\"Pythagoras Theorem is true\")\n                return True\n    print(\"Pythagoras Theorem is false\")\n    return False\nn=int(input(\"Enter number of rows in the triangle: \"))\ndif_Square(n)\n",
        "num_ids": 97
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    length = len(colors)\n    pattern = patterns[0]\n    for i in range(1, length):\n        if i == 0:\n            if patterns[i]!= pattern:\n                return False\n        else:\n            if patterns[i]!= patterns[i-1]:\n                return False\n    return True\n",
        "num_ids": 79
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for p in patterns:\n        for c in colors:\n            if p[1] == c:\n                if p[0] == \"R\":\n                    colors.remove(c)\n                elif p[0] == \"G\":\n                    colors.remove(c)\n                    colors.remove(c)\n                elif p[0] == \"B\":\n                    colors.remove(c)\n                    colors.remove(c)\n                    colors.remove(c)\n    if len(colors) == 0:\n        return True\n    return False\n",
        "num_ids": 134
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def helper(color,pattern):\n        if not pattern:\n            return True\n        elif len(pattern) == 1:\n            return color == pattern[0]\n        else:\n            if color == pattern[0]:\n                return helper(color,pattern[1:])\n            else:\n                return False\n    for pattern in patterns:\n        if not helper(colors[0],pattern):\n            return False\n        colors.pop(0)\n    return True\n",
        "num_ids": 111
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # your code\n    return all([colors[i] == colors[i+1] for i in range(len(colors)-1)]) and all([colors[i] == patterns[i] for i in range(len(colors))])",
        "num_ids": 60
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    if len(set(colors))!= len(set(patterns)):\n        return False\n    return sorted(colors) == sorted(patterns)\n",
        "num_ids": 58
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        if color not in patterns:\n            return False\n    return True\n    \n    \ndef is_samecolors(colors):\n    '''\n    Write a function to check whether it follows the sequence given in the colors array.\n    '''\n    for color in colors:\n        if color in patterns:\n            return False\n    return True\n    \n    \ndef check_colors_patterns(colors, patterns):\n    if is_samecolors(colors) and is_samepatterns(colors, patterns):\n        return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    result = []\n    patterns = patterns.split(\" \")\n    for p in patterns:\n        if p == 'R':\n            result.append('G')\n        elif p == 'G':\n            result.append('B')\n        elif p == 'B':\n            result.append('R')\n        else:\n            result.append('B')\n    \n    return result == colors\n    \n    \nif __name__ == '__main__':\n    \n    colors = 'RGBRGB'\n    patterns = 'RGGBBGRGBB'\n    result = is_samepatterns(colors, patterns)\n    print(result)\n    \n    colors = 'RGBBGR'\n    patterns = 'R'\n    result = is_samepatterns(colors, patterns)\n    print(result)",
        "num_ids": 197
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i,p in enumerate(patterns):\n        if len(p) == len(colors):\n            if all([c in colors for c in p]):\n                if i > 0 and patterns[i-1] == p[::-1]:\n                    continue\n                else:\n                    return True\n    return False\n",
        "num_ids": 77
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return all([patterns[colors.index(c)] == c for c in colors])\n",
        "num_ids": 24
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return(set(colors) == set(patterns))\n",
        "num_ids": 17
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if int(test_list[i][j]) % K == 0:\n                output_list.append(test_list[i])\n    return output_list\n",
        "num_ids": 77
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    k_list = []\n    for i in range(len(test_list)):\n        if test_list[i][0] % K == 0 and test_list[i][1] % K == 0 and test_list[i][2] % K == 0 and test_list[i][3] % K == 0 and test_list[i][4] % K == 0:\n            k_list.append(test_list[i])\n    return k_list\n",
        "num_ids": 111
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for elem in test_list:\n        if all(x%K for x in elem):\n            res.append(elem)\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res_list = []\n    test_list.sort(key = lambda x: x[0])\n    for i in test_list:\n        if (i[0] % K) == 0 and (i[1] % K) == 0:\n            res_list.append(i)\n    return res_list\n",
        "num_ids": 76
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #use filter for lambda expression\n    #Filter(lambda x: x % k == 0, test_list)\n    \n    #Alternate way\n    test_list_ = []\n    for i in test_list:\n        if i[0]%K == 0 and i[1]%K == 0:\n            test_list_.append(i)\n    return test_list_\n",
        "num_ids": 91
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if len(i) == K:\n            if is_divisible(i, K):\n                result.append(i)\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for tuple in test_list:\n        flag = True\n        for element in tuple:\n            if element % K!= 0:\n                flag = False\n                break\n        if flag:\n            result_list.append(tuple)\n    return result_list\n",
        "num_ids": 70
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tuple(x) for x in test_list if all(y % K == 0 for y in x)]\n",
        "num_ids": 30
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [i for i in test_list if i[0] % K == 0 and i[1] % K == 0]\n",
        "num_ids": 32
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    \n    for sub_list in test_list:\n        if all(element % K == 0 for element in sub_list):\n            result_list.append(sub_list)\n    return result_list\n",
        "num_ids": 57
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    if (n % 11 == 0): \n        print(\"Number is divisible by 11\") \n    else: \n        print(\"Number is not divisible by 11\") \n        \nis_Diff(int(input('Enter a number: '))) \n",
        "num_ids": 63
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    return False\n    \nprint(is_Diff(19))\nprint(is_Diff(21))\n",
        "num_ids": 39
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\nis_Diff(10)\n",
        "num_ids": 30
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n  \n  ",
        "num_ids": 13
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    while n!= 0: \n        if n % 11 == 0: \n            return True\n        else: \n            return False\n        break\n    else: \n        return False\n",
        "num_ids": 46
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n  \n",
        "num_ids": 27
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0 \n",
        "num_ids": 14
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return(len(s) % 2 == 1)\n",
        "num_ids": 15
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 26
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\nprint(word_len('hello'))\nprint(word_len('python'))\n",
        "num_ids": 33
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    len_word=len(s)\n    if(len_word%2==0):\n        print('The length of the word is even')\n    else:\n        print('The length of the word is odd')\n",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        print(\"yes\")\n    else:\n        print(\"no\")\n",
        "num_ids": 31
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if(len(s)%2==0):\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n",
        "num_ids": 32
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (3*n - 1) // 2\n",
        "num_ids": 16
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def calculate_tetrahedral_number(n): \n        '''\n        Recursive function to calculate the nth tetrahedral number.\n        '''\n        if n < 4: \n            return n \n        else: \n            return n + 3*calculate_tetrahedral_number(n - 1)\n",
        "num_ids": 42
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n * (n + 1) * (n + 2) * (n + 3)) / 6)\n",
        "num_ids": 29
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)//6\n",
        "num_ids": 19
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1))/2\n",
        "num_ids": 15
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(0.5*n*(n+1)*(n+2))\n",
        "num_ids": 23
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n    \ndef tetrahedral_number(n):\n    return n * (n+1) * (n+2) * (n+3) / 24\n",
        "num_ids": 65
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(3*n - 1)//2\n",
        "num_ids": 16
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = [1]\n    for x in range(1, n):\n        tetrahedral_numbers.append(tetrahedral_numbers[x-1] + x + 1)\n    return tetrahedral_numbers[n-1]\n",
        "num_ids": 69
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V= (4/3) * math.pi * r**3\n    return V\n",
        "num_ids": 23
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if type(r) == str:\n        raise TypeError('Input must be a number')\n    return 4/3*math.pi*(r**3)\n",
        "num_ids": 40
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4.0/3.0) * math.pi * (r**3)\n    return vol\n    \n",
        "num_ids": 31
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n",
        "num_ids": 16
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*(r**3)\n    return v\n",
        "num_ids": 24
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=4/3*math.pi*(r**3)\n    print(v)\n",
        "num_ids": 25
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r < 0:\n        return -1\n    else:\n        return 4/3*math.pi*(r**3)\n",
        "num_ids": 34
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r=int(input(\"Enter the radius of the sphere: \"))\n    volume=4*math.pi*(r*r*r)\n    print(volume)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    r=int(input(\"Enter the radius of the cylinder: \"))\n    h=int(input(\"Enter the height of the cylinder: \"))\n    volume=math.pi*(r*r)*h\n    print(volume)\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r=int(input(\"Enter the radius of the cone: \"))\n    h=int(input(\"Enter the height of the cone: \"))\n    volume=math.pi*(r*r)*h/3\n    print(volume)\n    return volume\ndef volume_prism(a,b,c):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    a=int(input(\"Enter the length of the prism: \"))\n    b=int(input(\"Enter the width of the prism: \"))\n    c=int(input(\"Enter the height of the prism: \"))\n    volume=a*b*c\n    print(volume)\n    return volume\ndef area_square(b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    b=int(input(\"Enter the side of the square: \"))\n    area=b*b\n    print(area)\n    return area\ndef area_rectangle(b,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    b=int(input(\"Enter the length of the rectangle: \"))\n    h=int(input(\"Enter the width of the rectangle: \"))\n    area=b*h\n    print(area)\n    return area\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    a=int(input(\"Enter the first side of the triangle: \"))\n    b=int(input(\"Enter the second side of the triangle: \"))\n    c=int(input(\"Enter the third side of the triangle: \"))\n    s=(a+b+c)/2\n    area=(s*(s-a)*(s-b)*(s-c))**0.5\n    print(area)\n    return area\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    a=int(input(\"Enter the length of the first side of the trapezium: \"))\n    b=int(input(\"Enter the length of the second side of the trapezium: \"))\n    h=int(input(\"Enter the height of the trapezium: \"))\n    area=(a+b)*h/2\n    print(area)\n    return area\ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    a=int(input(\"Enter the length of the first side of the parallelogram: \"))\n    b=int(input(\"Enter the length of the second side of the parallelogram: \"))\n    area=a*b\n    print(area)\n    return area\ndef area_rhombus(a):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    a=int(input(\"Enter the length of one of the sides of the rhombus: \"))\n    area=a*a\n    print(area)\n    return area\ndef area_triangle_3(a,b):\n    '''\n    Write a function to find the area of a triangle when the sides are known.\n    '''\n    a=int(input(\"Enter the first side of the triangle: \"))\n    b=int(input(\"Enter the second side of the triangle: \"))\n    area=(a+b)*(a+b-a)*(a+b-b)/4\n    print(area)\n    return area\ndef area_parallelogram_3(a,b):\n    '''\n    Write a function to find the area of a parallelogram when the sides are known.\n    '''\n    a=int(input(\"Enter the length of the first side of the parallelogram: \"))\n    b=int(input(\"Enter the length of the second side of the parallelogram: \"))\n    area=a*b\n    print(area)\n    return area\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    r=int(input(\"Enter the radius of the circle: \"))\n    area=math.pi*(r*r)\n    print(area)\n    return area\ndef area_ellipse(a,b):\n    '''\n    Write a function to find the area of an ellipse.\n    '''\n    a=int(input(\"Enter the first radius of the ellipse: \"))\n    b=int(input(\"Enter the second radius of the ellipse: \"))\n    area=math.pi*a*b\n    print(area)\n    return area\ndef area_cone_3(r,h):\n    '''\n    Write a function to find the area of a cone when the radius and height are known.\n    '''\n    r=int(input(\"Enter the radius of the cone: \"))\n    h=int(input(\"Enter the height of the cone: \"))\n    area=math.pi*(r*r)*h/3\n    print(area)\n    return area\ndef area_pyramid(a,b):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    a=int(input(\"Enter the length of one of the base of the pyramid: \"))\n    b=int(input(\"Enter the height of the pyramid: \"))\n    area=1/2*a*b\n    print(area)\n    return area\ndef area_square_root(a):\n    '''\n    Write a function to compute the area of the square root of a number.\n    '''\n    a=int(input(\"Enter a positive number: \"))\n    area=a**0.5\n    print(area)\n    return area\ndef area_circle_root(a):\n    '''\n    Write a function to compute the area of the circle with the radius of the square root of a number.\n    '''\n    a=int(input(\"Enter a positive number: \"))\n    area=math.pi*(a**0.5)\n    print(area)\n    return area\ndef area_circle_n(a):\n    '''\n    Write a function to compute the area of the circle with the radius of a number.\n    '''\n    a=int(input(\"Enter a positive number: \"))\n    area=math.pi*(a**2)\n    print(area)\n    return area\ndef area_rectangle_root(a,b):\n    '''\n    Write a function to compute the area of the rectangle with the length of the square root of a number\n    and the width of the square root of a number.\n    '''\n    a=int(input(\"Enter a positive number: \"))\n    b=int(input(\"Enter a positive number: \"))\n    area=(a**0.5)*(b**0.5)\n    print(area)\n    return area\ndef area_rectangle_n(a,b):\n    '''\n    Write a function to compute the area of the rectangle with the length of a number and the width of a number.\n    '''\n    a=int(input(\"Enter a positive number: \"))\n    b=int(input(\"Enter a positive number: \"))\n    area=a*b\n    print(area)\n    return area\ndef area_parallelogram_root(a,b):\n    '''\n    Write a function to compute the area of the parallelogram with the length of the square root of a number\n    and the width of the square root of a number.\n    '''\n    a=int(input(\"Enter a positive number: \"))\n    b=int(input(\"Enter a positive number: \"))\n    area=(a**0.5)*(b**0.5)\n    print(are",
        "num_ids": 53
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0*math.pi*r**3\n",
        "num_ids": 20
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n",
        "num_ids": 16
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x=0\n    for i in strr:\n        x+=ord(i)\n    return(x%26)\n",
        "num_ids": 31
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = \"hello\"\n    list1=list(strr)\n    sum1=0\n    for i in list1:\n        sum1+=ord(i)\n    return chr(sum1%26)\n",
        "num_ids": 55
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum=sum+ord(i)\n    return (sum%26)\nstrr = \"kmk\"\nprint(\"The character is \",get_Char(strr)",
        "num_ids": 54
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # Hint: use ord()\n    # ord('A') -> 65\n    # ord('a') -> 97\n    # ord('0') -> 48\n    # ord('9') -> 57\n    \n    # code here\n    strr=list(strr)\n    print(strr)\n    \n    a=[]\n    for i in strr:\n        a.append(ord(i))\n    print(a)\n    \n    sum=0\n    for i in a:\n        sum+=i\n    print(sum)\n    return sum%26\n",
        "num_ids": 135
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x=0\n    for i in strr:\n        x+=ord(i)\n    return x%26\n    ",
        "num_ids": 30
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # code goes here\n    strr = strr.strip()\n    return sum([ord(i) for i in strr]) % 26\n",
        "num_ids": 37
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return reduce(lambda x, y: (x + y) % 26, map(ord, strr), 0)\n",
        "num_ids": 29
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = 0\n    for i in strr:\n        ans = ans+ord(i)\n    return(ans%26)\n",
        "num_ids": 33
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return sum%26\n    # pass\n",
        "num_ids": 35
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(sum([ord(c) for c in strr]))\n",
        "num_ids": 21
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 45
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return sequence(n - 1) + 2 * sequence(n - 2)\n",
        "num_ids": 35
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    k = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            k = k + (i + i//2)//3\n        else:\n            k = k + (i//2)\n    return k\n",
        "num_ids": 63
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 69
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    r = 1 \n    i = 1\n    while i < n:\n        r = r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*r + 2*",
        "num_ids": 2015
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 1: return n\n    else: return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 29
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        sequence(n - 1)\n        return n * n + n\n",
        "num_ids": 33
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sequence_1 = sequence(n - 1)\n        sequence_2 = sequence(n - 2)\n        return sequence_1 + 2 * sequence_2\n",
        "num_ids": 65
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    start = \"28\"\n    start = \"101010\"\n    start = list(start)\n",
        "num_ids": 25
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return sequence(n-1) + 2*sequence(n-2)\n",
        "num_ids": 35
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #surface area of sphere = 4*pi*r^2\n    return (4 * math.pi * r**2)\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    #surface area of cone = pi*r^2 + (pi*r^2 * math.cos(h))\n    return (math.pi*r**2) + (math.pi*r**2 * math.cos(h))\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    #surface area of a circle = pi*r^2\n    return math.pi*r**2\ndef surfacearea_rectangle(l,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    #surface area of rectangle = 2*(l*b)\n    return 2*(l*b)\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    #surface area of cube = 6*(l^2)\n    return 6*(l**2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #volume of sphere = 4/3 * pi * r^3\n    return (4/3)*(math.pi * r**3)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #volume of cone = pi/3 * r^2 * h\n    return (math.pi/3) * r**2 * h\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    #volume of circle = pi*r^2\n    return math.pi*r**2\ndef volume_rectangle(l,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    #volume of rectangle = l * b\n    return l * b\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    #volume of cube = l^3\n    return l**3\ndef volume_cone_reconstruction(r,h,l):\n    '''\n    Write a function to find the volume of a cone by reconstruction.\n    '''\n    #the volume of the cone is the volume of the cone with a radius r and height h + the volume of a sphere with radius r.\n    return volume_cone(r,h) + volume_sphere(r)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    #the volume of the cylinder is the volume of the cylinder with a radius r and height h + the volume of a sphere with radius r.\n    return volume_cylinder(r,h) + volume_sphere(r)\ndef volume_cuboid(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    #the volume of the cuboid is the volume of the cuboid with length l, width b, and height h + the volume of a cube with length l.\n    return volume_cuboid(l,b,h) + volume_cube(l)\ndef surfacearea_cylinder_reconstruction(r,h):\n    '''\n    Write a function to find the surface area of a cylinder by reconstruction.\n    '''\n    #the surface area of a cylinder is the surface area of the cylinder with a radius r and height h + the surface area of a sphere with radius r.\n    return surfacearea_cylinder(r,h) + surfacearea_sphere(r)\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #the surface area of the cylinder is pi*r^2 + 2*pi*r*h\n    return (math.pi*r**2) + (2 * math.pi * r * h)\ndef surfacearea_cuboid(l,b,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    #the surface area of the cuboid is 2*(l*b + l*h + b*h)\n    return (2*(l*b + l*h + b*h))\ndef volume_cuboid_reconstruction(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid by reconstruction.\n    '''\n    #the volume of the cuboid is the volume of the cuboid with length l, width b, and height h + the volume of a cube with length l.\n    return volume_cube(l) + volume_cuboid(l,b,h)\ndef volume_cuboid_box(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    #the volume of the cuboid is the volume of the cuboid with length l, width b, and height h + the volume of a cube with length l.\n    return volume_cube(l) + volume_cube(b) + volume_cube(h)\ndef volume_sphere_box(l):\n    '''\n    Write a function to find the volume of a sphere in a box.\n    '''\n    #the volume of a sphere in a box is the volume of a cube with side length l^3 + the volume of a sphere with radius l\n    return volume_cube(l) + volume_sphere(l)\ndef volume_cone_box(r,h,l):\n    '''\n    Write a function to find the volume of a cone in a box.\n    '''\n    #the volume of a cone in a box is the volume of a cone with radius r, height h, and length l + the volume of a cube with side length l\n    return volume_cube(l) + volume_cone(r,h)\ndef volume_cylinder_box(r,h,l):\n    '''\n    Write a function to find the volume of a cylinder in a box.\n    '''\n    #the volume of a cylinder in a box is the volume of a cylinder with radius r, height h, and length l + the volume of a cube with side length l\n    return volume_cube(l) + volume_cylinder(r,h)\ndef surfacearea_cone_box(r,h,l):\n    '''\n    Write a function to find the surface area of a cone in a box.\n    '''\n    #the surface area of a cone in a box is the surface area of a cone with radius r, height h, and length l + the surface area of a sphere with radius r.\n    return surfacearea_cone(r,h) + surfacearea_sphere(r)\ndef surfacearea_cylinder_box(r,h,l):\n    '''\n    Write a function to find the surface area of a cylinder in a box.\n    '''\n    #the surface area of a cylinder in a box is the surface area of a cylinder with radius r, height h, and length l + the surface area of a sphere with radius r.\n    return surfacearea_cylinder(r,h) + surfacearea_sphere(r)\ndef surfacearea_cuboid_box(l,b,h,l):\n    '''\n    Write a function to find the surface area of a cuboid in a box.\n    '''\n    #the surface area of a cuboid in a box is the surface area of a cuboid with length l, width b, and height h + the surface area of a cube with side length l\n    return surfacearea_cuboid(l,b,h) + surfacearea_cube(l)\ndef volume_cuboid_box_reconstruction(l,b,h,l):\n    '''\n    Write a function to find the volume of a cuboid in a box by reconstruction.\n    '''\n    #the volume of a cuboid in a box is the volume of a cuboid with length l, width b, and height h + the volume of a cube with side length l\n    return volume_cube(l) + volume_cuboid(l,b,h) + volume_cube(l)\ndef volume_sphere_box_reconstruction(l,l):\n    '''\n    Write a function to find the volum",
        "num_ids": 11
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * (r ** 2)\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    return 4 * math.pi * r ** 2\n",
        "num_ids": 18
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r*r\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r * r)\ndef spherevolume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * (r * r * r) / 3\n",
        "num_ids": 20
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # odd centered hexagonal number\n    if n % 2 == 1:\n        return (n*(n+1)) / 2\n",
        "num_ids": 34
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n,0)\n",
        "num_ids": 14
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a, c = 1, 0\n    for i in range(n):\n        a += c\n        c = -1*(a-c)\n    return a\n",
        "num_ids": 41
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def hexagonal_number(n):\n        return n * (n + 1) / 2\n",
        "num_ids": 24
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def f(n):\n        return (n**2 + n) // 2\n    return f(n)\n",
        "num_ids": 28
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return hexagonal_number(n) - 1 + n\n",
        "num_ids": 31
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    side = 3 * n - 1\n    return sum([(side - i) * (-1)**i / 2 for i in range(side)])\n",
        "num_ids": 37
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n) / 2\n",
        "num_ids": 14
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 1 + 3*centered_hexagonal_number(n-1)\n",
        "num_ids": 47
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n-1)*(3*n-2)/6\n",
        "num_ids": 22
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # return dict(dict1,**dict2,**dict3) #wrong return\n    return {**dict1, **dict2, **dict3} # right return\n",
        "num_ids": 41
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1_copy=dict1.copy()\n    dict2_copy=dict2.copy()\n    dict3_copy=dict3.copy()\n    new_dict=dict(dict1_copy,**dict2_copy,**dict3_copy)\n    return new_dict",
        "num_ids": 68
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for i in dict2:\n        if i in dict1:\n            dict3[i]=dict1[i]+dict2[i]\n        else:\n            dict3[i]=dict2[i]\n    for i in dict1:\n        if i in dict2:\n            dict3[i]=dict1[i]+dict2[i]\n        else:\n            dict3[i]=dict1[i]\n    return dict3\ndict1={1:10,2:20}\ndict2={3:30,4:40}\ndict3={5:50,6:60}\nprint(merge_dictionaries_three(dict1,dict2,dict3))\n",
        "num_ids": 162
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_result = dict1.copy()\n    dict_result.update(dict2)\n    dict_result.update(dict3)\n    return dict_result\n",
        "num_ids": 41
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n",
        "num_ids": 27
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n",
        "num_ids": 18
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n    \n",
        "num_ids": 20
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dic = {}\n    for key, val in dict1.items():\n        new_dic[key] = val\n    for key, val in dict2.items():\n        if new_dic.get(key):\n            new_dic[key] = new_dic.get(key) + val\n        else:\n            new_dic[key] = val\n    for key, val in dict3.items():\n        if new_dic.get(key):\n            new_dic[key] = new_dic.get(key) + val\n        else:\n            new_dic[key] = val\n    return new_dic\n",
        "num_ids": 160
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict3.update(dict1)\n    dict3.update(dict2)\n    return dict3\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3=dict1.copy()\n    dict3.update(dict2)\n    return dict3\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    return dict1.copy().update(dict2)\ndef merge_dictionaries(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    return dict(dict1.copy(),**dict2)\ndef merge_dictionaries_four(dict1, dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict4.update(dict1)\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\ndef merge_dictionaries_five(dict1, dict2, dict3, dict4, dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    dict5.update(dict1)\n    dict5.update(dict2)\n    dict5.update(dict3)\n    dict5.update(dict4)\n    return dict5\ndef merge_dictionaries_six(dict1, dict2, dict3, dict4, dict5, dict6):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    dict6.update(dict1)\n    dict6.update(dict2)\n    dict6.update(dict3)\n    dict6.update(dict4)\n    dict6.update(dict5)\n    return dict6\ndef merge_dictionaries_seven(dict1, dict2, dict3, dict4, dict5, dict6, dict7):\n    '''\n    Write a function to merge seven dictionaries into a single dictionary.\n    '''\n    dict7.update(dict1)\n    dict7.update(dict2)\n    dict7.update(dict3)\n    dict7.update(dict4)\n    dict7.update(dict5)\n    dict7.update(dict6)\n    return dict7\ndef merge_dictionaries_eight(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    dict8.update(dict1)\n    dict8.update(dict2)\n    dict8.update(dict3)\n    dict8.update(dict4)\n    dict8.update(dict5)\n    dict8.update(dict6)\n    dict8.update(dict7)\n    return dict8\ndef merge_dictionaries_nine(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9):\n    '''\n    Write a function to merge nine dictionaries into a single dictionary.\n    '''\n    dict9.update(dict1)\n    dict9.update(dict2)\n    dict9.update(dict3)\n    dict9.update(dict4)\n    dict9.update(dict5)\n    dict9.update(dict6)\n    dict9.update(dict7)\n    dict9.update(dict8)\n    return dict9\ndef merge_dictionaries_ten(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10):\n    '''\n    Write a function to merge ten dictionaries into a single dictionary.\n    '''\n    dict10.update(dict1)\n    dict10.update(dict2)\n    dict10.update(dict3)\n    dict10.update(dict4)\n    dict10.update(dict5)\n    dict10.update(dict6)\n    dict10.update(dict7)\n    dict10.update(dict8)\n    dict10.update(dict9)\n    return dict10\ndef merge_dictionaries_eleven(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11):\n    '''\n    Write a function to merge eleven dictionaries into a single dictionary.\n    '''\n    dict11.update(dict1)\n    dict11.update(dict2)\n    dict11.update(dict3)\n    dict11.update(dict4)\n    dict11.update(dict5)\n    dict11.update(dict6)\n    dict11.update(dict7)\n    dict11.update(dict8)\n    dict11.update(dict9)\n    dict11.update(dict10)\n    return dict11\ndef merge_dictionaries_twelve(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12):\n    '''\n    Write a function to merge twelve dictionaries into a single dictionary.\n    '''\n    dict12.update(dict1)\n    dict12.update(dict2)\n    dict12.update(dict3)\n    dict12.update(dict4)\n    dict12.update(dict5)\n    dict12.update(dict6)\n    dict12.update(dict7)\n    dict12.update(dict8)\n    dict12.update(dict9)\n    dict12.update(dict10)\n    dict12.update(dict11)\n    return dict12\ndef merge_dictionaries_thirteen(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13):\n    '''\n    Write a function to merge thirteen dictionaries into a single dictionary.\n    '''\n    dict13.update(dict1)\n    dict13.update(dict2)\n    dict13.update(dict3)\n    dict13.update(dict4)\n    dict13.update(dict5)\n    dict13.update(dict6)\n    dict13.update(dict7)\n    dict13.update(dict8)\n    dict13.update(dict9)\n    dict13.update(dict10)\n    dict13.update(dict11)\n    dict13.update(dict12)\n    return dict13\ndef merge_dictionaries_fourteen(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14):\n    '''\n    Write a function to merge fourteen dictionaries into a single dictionary.\n    '''\n    dict14.update(dict1)\n    dict14.update(dict2)\n    dict14.update(dict3)\n    dict14.update(dict4)\n    dict14.update(dict5)\n    dict14.update(dict6)\n    dict14.update(dict7)\n    dict14.update(dict8)\n    dict14.update(dict9)\n    dict14.update(dict10)\n    dict14.update(dict11)\n    dict14.update(dict12)\n    dict14.update(dict13)\n    return dict14\ndef merge_dictionaries_fifteen(dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10, dict11, dict12, dict13, dict14, dict15):\n    '''\n    Write a function to merge fifteen dictionaries into a single dictionary.\n    '''\n    dict15.update(dict1)\n    dict15.update(dict2)\n    dict15.update(dict3)\n    dict15.update(dict4)\n    dict15.update(dict5)\n    dict15.update(dict6)\n    dict15.update(dict7)\n    dict15.update(dict8)\n    dict15.update(dict9)\n    dict15.update(dict10)\n    dict15.update(dict11)\n    dict15.update(dict12)\n    dict15.update(dict13)",
        "num_ids": 131
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = dict1.copy()\n    d.update(dict2)\n    d.update(dict3)\n    return d\n",
        "num_ids": 33
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # TODO: Implement function\n    if len(list1) == 0:\n        return {}\n    \n    dict1 = {}\n    for i in range(len(list1)):\n        if list1[i] not in dict1:\n            dict1[list1[i]] = 1\n        else:\n            dict1[list1[i]] += 1\n    return dict1\n",
        "num_ids": 92
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counter=collections.Counter(list1)\n    return counter\n    \nlist1=[1,2,3,4,5,4,4,6,7,8,1,2,3,2,5,6,7,8,2,3]\nprint(freq_count(list1))\n",
        "num_ids": 75
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_count_dict = dict(collections.Counter(list1))\n    return freq_count_dict\n",
        "num_ids": 30
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n",
        "num_ids": 12
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for x in list1:\n        if x in freq_dict:\n            freq_dict[x] += 1\n        else:\n            freq_dict[x] = 1\n    print('The frequency count of all the elements in the list is:')\n    print(freq_dict)\n",
        "num_ids": 80
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        freq_dict[elem] = freq_dict.get(elem, 0) + 1\n    return freq_dict\n    \ndef find_nested(list1):\n    '''\n    Write a function to return the index of the first element that is nested inside another element.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if type(list1[i][j]) == list:\n                return [i,j]\n    return []\n",
        "num_ids": 57
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n",
        "num_ids": 61
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "num_ids": 61
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = dict()\n    for x in list1:\n        if x not in freq:\n            freq[x] = 1\n        else:\n            freq[x] += 1\n    return freq\n",
        "num_ids": 53
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = {}\n    for i in list1:\n        my_dict[i] = list1.count(i)\n    return my_dict\n",
        "num_ids": 39
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    a = N - 1\n    b = N + 1\n    min_diff = abs(a - N)\n    min_num = a\n    while b <= N*2:\n        if abs(N - b) < min_diff:\n            min_diff = abs(N - b)\n            min_num = b\n        b += 1\n    return min_num\n",
        "num_ids": 88
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    x = len(str(N))\n    min_int = int(str(N)*x)\n    max_int = int(str(N+1)*x)\n",
        "num_ids": 42
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    smaller_nums = [x for x in range(1, n) if x < n]\n    return min(smaller_nums, key=lambda x: abs(n - x))\n",
        "num_ids": 53
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # your code here\n    if N == 0:\n        return 1\n    \n    ans = -1\n    if N < 1:\n        return ans\n    \n    while N!= 0:\n        ans = N\n        N = N//2 if N%2==0 else N//2+1\n    return ans\n",
        "num_ids": 76
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Handle negative numbers\n    if N < 0:\n        N = abs(N)\n    \n    # Edge case\n    if N < 10:\n        return N\n    \n    # Initialize a list with range of numbers to be checked\n    checklist = []\n    for num in range(1, 10):\n        checklist.append(num)\n    \n    # Populate the checklist with the closest number to N\n    checklist.append(N)\n    checklist.sort()\n    while N >= checklist[0]:\n        checklist.pop(0)\n    \n    # Return the closest number\n    return checklist[0]\n",
        "num_ids": 148
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    assert(N >= 1), \"Should be an integer greater than 0\"\n    close_num = -1\n    for num in range(1, N+1):\n        if num < N:\n            if close_num == -1 or abs(N - close_num) > abs(N - num):\n                close_num = num\n        elif num == N:\n            break\n    return close_num\n",
        "num_ids": 96
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = N//2\n    while N > 1:\n        if N % 2 == 0:\n            N /= 2\n        elif N > l:\n            N -= 1\n        else:\n            N += 1\n    return N\n",
        "num_ids": 57
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    low = 0\n    high = N\n    while low < high:\n        mid = (low + high) // 2\n        if mid < N:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n",
        "num_ids": 57
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    sorted_list = sorted(list(set(N)))\n    if len(sorted_list) == 0:\n        return N\n    else:\n        return sorted_list[0]\n",
        "num_ids": 47
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Given a number N, returns the closest smaller number that is not N\n    # takes a number N and returns the closest smaller number than N\n    \n    # Your solution must be in O(1) time and O(1) space\n",
        "num_ids": 55
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(x))))\n    \ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key = lambda x:len(",
        "num_ids": 19
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len=0\n    for each in list1:\n        if len(each)>max_len:\n            max_len=len(each)\n            longest_word=each\n    return longest_word,max_len\n",
        "num_ids": 57
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = list1.split(\" \")\n    count = 0\n    for i in range(0, len(list1)):\n        if len(list1[i]) > count:\n            count = len(list1[i])\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_len = []\n    for i in list1:\n        word_len.append(len(i))\n    return word_len\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    str_list = []\n    for i in list1:\n        str_list.append(i)\n    return max(str_list, key=len)\n",
        "num_ids": 40
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list = []\n    for i in list1:\n        len_list.append(len(i))\n    print('The length of the longest word is :',max(len_list))\n",
        "num_ids": 48
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length=0\n    for i in list1:\n        if len(i)>length:\n            length=len(i)\n    return length\ndef len_char(string1,n):\n    '''\n    Write a python function to print the nth character of the string.\n    '''\n    count=0\n    for i in string1:\n        if count==n:\n            print(i)\n        count+=1\ndef len_str(string1):\n    '''\n    Write a python function to print the length of the string.\n    '''\n    return len(string1)\ndef cap_char(string1):\n    '''\n    Write a python function to capitalise the nth character of the string.\n    '''\n    count=0\n    for i in string1:\n        if count==0:\n            print(i.upper())\n        else:\n            print(i)\n        count+=1\ndef index_str(string1):\n    '''\n    Write a python function to print the index of the string.\n    '''\n    count=0\n    for i in string1:\n        if count==0:\n            print(i)\n        else:\n            print(i+count)\n        count+=1\ndef replace_str(string1):\n    '''\n    Write a python function to replace a substring in the string with another substring.\n    '''\n    new_str=string1.replace('a','e')\n    return new_str\ndef remove_str(string1):\n    '''\n    Write a python function to remove a substring from the string.\n    '''\n    new_str=string1.remove('a')\n    return new_str\ndef is_alpha(string1):\n    '''\n    Write a python function to check if the string contains only letters.\n    '''\n    string1.isalpha()\n    return True\ndef is_digit(string1):\n    '''\n    Write a python function to check if the string contains only digits.\n    '''\n    string1.isdigit()\n    return True\ndef is_alnum(string1):\n    '''\n    Write a python function to check if the string contains only letters and digits.\n    '''\n    string1.isalnum()\n    return True\ndef is_lower(string1):\n    '''\n    Write a python function to check if the string contains only lowercase letters.\n    '''\n    string1.islower()\n    return True\ndef is_upper(string1):\n    '''\n    Write a python function to check if the string contains only uppercase letters.\n    '''\n    string1.isupper()\n    return True\ndef is_space(string1):\n    '''\n    Write a python function to check if the string contains only spaces.\n    '''\n    string1.isspace()\n    return True\ndef is_title(string1):\n    '''\n    Write a python function to check if the string contains only titlecase letters.\n    '''\n    string1.istitle()\n    return True\ndef is_lower_upper(string1):\n    '''\n    Write a python function to check if the string contains both lowercase and uppercase letters.\n    '''\n    string1.isupper()\n    string1.islower()\n    return True\ndef is_lower_digit(string1):\n    '''\n    Write a python function to check if the string contains lowercase letters, digits and uppercase letters.\n    '''\n    string1.isalnum()\n    string1.islower()\n    return True\ndef is_digit_lower(string1):\n    '''\n    Write a python function to check if the string contains digits, lowercase letters and uppercase letters.\n    '''\n    string1.isdigit()\n    string1.islower()\n    return True\ndef is_digit_upper(string1):\n    '''\n    Write a python function to check if the string contains digits, uppercase letters and uppercase letters.\n    '''\n    string1.isdigit()\n    string1.isupper()\n    return True\ndef is_digit_alpha(string1):\n    '''\n    Write a python function to check if the string contains digits, lowercase letters, uppercase letters and uppercase letters.\n    '''\n    string1.isdigit()\n    string1.islower()\n    string1.isupper()\n    return True\ndef is_alpha_digit(string1):\n    '''\n    Write a python function to check if the string contains only letters and digits.\n    '''\n    string1.isalnum()\n    return True\ndef is_alpha_lower(string1):\n    '''\n    Write a python function to check if the string contains only lowercase letters and digits.\n    '''\n    string1.islower()\n    string1.isalnum()\n    return True\ndef is_alpha_upper(string1):\n    '''\n    Write a python function to check if the string contains only uppercase letters and digits.\n    '''\n    string1.isupper()\n    string1.isalnum()\n    return True\ndef is_lower_upper_digit(string1):\n    '''\n    Write a python function to check if the string contains lowercase letters, uppercase letters, digits and uppercase letters.\n    '''\n    string1.islower()\n    string1.isupper()\n    string1.isalnum()\n    return True\ndef is_lower_upper_alpha(string1):\n    '''\n    Write a python function to check if the string contains lowercase letters, uppercase letters, digits, uppercase letters and uppercase letters.\n    '''\n    string1.islower()\n    string1.isupper()\n    string1.isalnum()\n    return True\ndef is_alpha_digit_upper(string1):\n    '''\n    Write a python function to check if the string contains lowercase letters, uppercase letters, digits and uppercase letters.\n    '''\n    string1.isalnum()\n    string1.isupper()\n    return True\ndef is_alpha_digit_lower(string1):\n    '''\n    Write a python function to check if the string contains only lowercase letters, digits and uppercase letters.\n    '''\n    string1.islower()\n    string1.isalnum()\n    return True\ndef is_alpha_digit_lower_upper(string1):\n    '''\n    Write a python function to check if the string contains lowercase letters, digits, uppercase letters and uppercase letters.\n    '''\n    string1.islower()\n    string1.isalnum()\n    string1.isupper()\n    return True\ndef is_lower_alpha_upper(string1):\n    '''\n    Write a python function to check if the string contains only lowercase letters, uppercase letters and uppercase letters.\n    '''\n    string1.islower()\n    string1.isupper()\n    string1.isalnum()\n    return True\ndef is_lower_alpha_digit_upper(string1):\n    '''\n    Write a python function to check if the string contains only lowercase letters, digits, uppercase letters and uppercase letters.\n    '''\n    string1.islower()\n    string1.isalnum()\n    string1.isupper()\n    return True\ndef is_lower_digit_upper(string1):\n    '''\n    Write a python function to check if the string contains lowercase letters, digits and uppercase letters.\n    '''\n    string1.islower()\n    string1.isdigit()\n    string1.isupper()\n    return True\ndef is_lower_digit_alpha_upper(string1):\n    '''\n    Write a python function to check if the string contains only lowercase letters, digits and uppercase letters.\n    '''\n    string1.islower()\n    string1.isdigit()\n    string1.isalnum()\n    return True\ndef is_lower_digit_alpha_upper_digit(string1):\n    '''\n    Write a python function to check if the string contains lowercase letters, digits, uppercase letters, uppercase letters and digits.\n    '''\n    string1.islower()\n    string1.isdigit()\n    string1.isupper()\n    string1.isalnum()\n    return True\ndef is_lower_alpha_digit_upper_digit(string1):\n    '''\n    Write a python function to check if the string contains only lowercase letters, digits",
        "num_ids": 19
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    list1=list(str(list1))\n    list1=sorted(list1)\n    print(list1)\n    word=[]\n    word=list1[-1]\n    print(word)\n    \n    \n    \n    return len(word)\n    \n    \ndef fun(word):\n    \n    word1=[]\n    word1=list(word)\n    count=0\n    for i in range(len(word1)):\n        if(word1[i]==\" \"):\n            count=count+1\n            \n        else:\n            if(count==1):\n                print(word1[i],end=\"\")\n                count=0\n            else:\n                print(\" \",end=\"\")\n                count=0\n                print(word1[i],end=\"\")\n    print(\"\")\n    \n    \n    return None\n    \n    \n    \ndef list_sort(list1,type):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    \n    list1=sorted(list1)\n    \n    if(type==\"ascending\"):\n        return list1\n    else:\n        return list1[::-1]\n        \n        \n        \ndef menu():\n    '''\n    Write a menu driven program for all the above functions.\n    '''\n    \n    print(\"1: Largest word in string\")\n    print(\"2: Reverse word in string\")\n    print(\"3: Reverse whole string\")\n    print(\"4: Reverse every word in string\")\n    print(\"5: Rearrange string in ascending order\")\n    print(\"6: Rearrange string in descending order\")\n    print(\"7: Find longest word\")\n    print(\"8: Find length of longest word\")\n    print(\"9: Sort list in ascending order\")\n    print(\"10: Sort list in descending order\")\n    print(\"11: Exit\")\n    \n    \n    \ndef main():\n    \n    menu()\n    \n    choice=int(input(\"Enter your choice: \"))\n    \n    while(choice!=11):\n        \n        if(choice==1):\n            print(\"Largest word in string:\",len_log(input(\"Enter the string: \")))\n            print(\"\")\n            menu()\n            choice=int(input(\"Enter your choice: \"))\n        \n        elif(choice==2):\n            print(\"Reverse word in string:\",fun(input(\"Enter the string: \")))\n            print(\"\")\n            menu()\n            choice=int(input(\"Enter your choice: \"))\n        \n        elif(choice==3):\n            print(\"Reverse whole string:\",input(input(\"Enter the string: \"))[::-1])\n            print(\"\")\n            menu()\n            choice=int(input(\"Enter your choice: \"))\n        \n        elif(choice==4):\n            print(\"Reverse every word in string:\",fun(input(\"Enter the string: \")))\n            print(\"\")\n            menu()\n            choice=int(input(\"Enter your choice: \"))\n        \n        elif(choice==5):\n            print(\"Rearrange string in ascending order:\",list_sort(input(\"Enter the string: \").split(),input(\"Enter the type of sorting(ascending/descending): \")))\n            print(\"\")\n            menu()\n            choice=int(input(\"Enter your choice: \"))\n        \n        elif(choice==6):\n            print(\"Rearrange string in descending order:\",list_sort(input(\"Enter the string: \").split(),input(\"Enter the type of sorting(ascending/descending): \"))[::-1])\n            print(\"\")\n            menu()\n            choice=int(input(\"Enter your choice: \"))\n        \n        elif(choice==7):\n            print(\"Find longest word:\",len_log(input(\"Enter the string: \").split()))\n            print(\"\")\n            menu()\n            choice=int(input(\"Enter your choice: \"))\n        \n        elif(choice==8):\n            print(\"Find length of longest word:\",len_log(input(\"Enter the string: \").split()))\n            print(\"\")\n            menu()\n            choice=int(input(\"Enter your choice: \"))\n        \n        elif(choice==9):\n            print(\"Sort list in ascending order:\",list_sort(input(\"Enter the list: \").split(),input(\"Enter the type of sorting(ascending/descending): \")))\n            print(\"\")\n            menu()\n            choice=int(input(\"Enter your choice: \"))\n        \n        elif(choice==10):\n            print(\"Sort list in descending order:\",list_sort(input(\"Enter the list: \").split(),input(\"Enter the type of sorting(ascending/descending): \"))[::-1])\n            print(\"\")\n            menu()\n            choice=int(input(\"Enter your choice: \"))\n        \n        elif(choice==11):\n            exit()\n        \n        \n        \n        \n        \n        \n        \n    \n    \n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 884
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result_list = []\n    for i in range(0, len(str1)):\n        if str1[i:].find(sub_str) == 0:\n            result_list.append(i + 1)\n    return result_list\n",
        "num_ids": 60
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)-len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n",
        "num_ids": 18
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    lst = []\n    for i in range(len(str1)):\n        for j in range(len(str1) - len(sub_str) + 1):\n            lst.append(str1[j:j+len(sub_str)])\n    #print(lst)\n    if sub_str in lst:\n        return True\n    else:\n        return False\n",
        "num_ids": 94
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for str2 in str1:\n        if sub_str in str2:\n            return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    try:\n        str_loc = str1.index(sub_str)\n        return str_loc\n    except:\n        return -1\n",
        "num_ids": 36
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    # time complexity: O(n)\n    \n    result = 0\n    for string in str1:\n        if sub_str in string:\n            result += 1\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str in str1[i:]:\n            return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    length = len(sub_str)\n    for i in range(len(str1) - length + 1):\n        if sub_str == str1[i:i + length]:\n            return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for index, val in enumerate(str1):\n        if val == sub_str:\n            return str1[index:index+len(sub_str)]\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    temp=0\n    for i in range(2,n):\n        if n%i==0:\n            temp+=i\n    return temp==n\n    \nn=int(input())\nprint(is_undulating(n))\n",
        "num_ids": 57
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check the number is odd or not \n    if n % 2 == 0:\n        return False \n    \n    # then check the number is palindrome or not \n    temp = n \n    sum1 = 0 \n    while n: \n        sum1 += (n%10)**2 \n        n = n//10 \n    \n    return (temp == sum1) \n",
        "num_ids": 95
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    while (n % 10 == 0):\n        n = int(n/10)\n    while (n % 10 == 9):\n        n = int(n/10)\n    if (n % 10!= 0 and n % 10!= 9):\n        return True\n    return False\ndef is_perfect(n):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if (n % i == 0):\n            sum += i\n    if (sum == n):\n        return True\n    return False\ndef is_semiprime(n):\n    '''\n    Write a function to check whether the given number is semiprime or not.\n    '''\n    if (n % 2 == 0):\n        if (is_prime(n)):\n            return False\n        else:\n            return True\n    if (is_prime(n)):\n        return True\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if (n % i == 0):\n            if (is_prime(i) and is_prime(n/i)):\n                return True\n    return False\ndef is_odd_semiprime(n):\n    '''\n    Write a function to check whether the given number is odd semiprime or not.\n    '''\n    if (is_prime(n)):\n        return True\n    if (n % 2 == 0):\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if (n % i == 0):\n            if (is_prime(i) and is_prime(n/i)):\n                return True\n    return False\ndef get_primes(n):\n    '''\n    Write a function to get all the prime numbers up to n.\n    '''\n    if n == 1:\n        return []\n    prime_list = []\n    for i in range(2,n+1):\n        if (is_prime(i)):\n            prime_list.append(i)\n    return prime_list\ndef get_semiprimes(n):\n    '''\n    Write a function to get all the semiprimes up to n.\n    '''\n    semiprime_list = []\n    for i in range(2,n+1):\n        if (is_semiprime(i)):\n            semiprime_list.append(i)\n    return semiprime_list\ndef get_odd_semiprimes(n):\n    '''\n    Write a function to get all the odd semiprimes up to n.\n    '''\n    odd_semiprime_list = []\n    for i in range(2,n+1):\n        if (is_odd_semiprime(i)):\n            odd_semiprime_list.append(i)\n    return odd_semiprime_list\ndef get_primes_sum(n):\n    '''\n    Write a function to get the sum of all the primes up to n.\n    '''\n    sum = 0\n    for i in range(2,n+1):\n        if (is_prime(i)):\n            sum += i\n    return sum\ndef get_semiprimes_sum(n):\n    '''\n    Write a function to get the sum of all the semiprimes up to n.\n    '''\n    sum = 0\n    for i in range(2,n+1):\n        if (is_semiprime(i)):\n            sum += i\n    return sum\ndef get_odd_semiprimes_sum(n):\n    '''\n    Write a function to get the sum of all the odd semiprimes up to n.\n    '''\n    sum = 0\n    for i in range(2,n+1):\n        if (is_odd_semiprime(i)):\n            sum += i\n    return sum\ndef get_primes_factors(n):\n    '''\n    Write a function to get all the prime factors of n.\n    '''\n    prime_factors = []\n    i = 2\n    while (n > 1):\n        while (n % i == 0):\n            prime_factors.append(i)\n            n = int(n/i)\n        i += 1\n    return prime_factors\ndef get_semiprimes_factors(n):\n    '''\n    Write a function to get all the semiprime factors of n.\n    '''\n    semiprime_factors = []\n    i = 2\n    while (n > 1):\n        while (n % i == 0):\n            if (is_semiprime(i)):\n                semiprime_factors.append(i)\n                n = int(n/i)\n            else:\n                i += 1\n        i += 1\n    return semiprime_factors\ndef get_odd_semiprimes_factors(n):\n    '''\n    Write a function to get all the odd semiprime factors of n.\n    '''\n    semiprime_factors = []\n    i = 2\n    while (n > 1):\n        while (n % i == 0):\n            if (is_odd_semiprime(i)):\n                semiprime_factors.append(i)\n                n = int(n/i)\n            else:\n                i += 1\n        i += 1\n    return semiprime_factors\ndef get_largest_semiprime_factor(n):\n    '''\n    Write a function to get the largest semiprime factor of n.\n    '''\n    semiprime_factors = get_semiprimes_factors(n)\n    largest_semiprime_factor = semiprime_factors[0]\n    for i in range(1,len(semiprime_factors)):\n        if (semiprime_factors[i] > largest_semiprime_factor):\n            largest_semiprime_factor = semiprime_factors[i]\n    return largest_semiprime_factor\ndef get_largest_odd_semiprime_factor(n):\n    '''\n    Write a function to get the largest odd semiprime factor of n.\n    '''\n    semiprime_factors = get_odd_semiprimes_factors(n)\n    largest_semiprime_factor = semiprime_factors[0]\n    for i in range(1,len(semiprime_factors)):\n        if (semiprime_factors[i] > largest_semiprime_factor):\n            largest_semiprime_factor = semiprime_factors[i]\n    return largest_semiprime_factor\ndef get_prime_factor_sum(n):\n    '''\n    Write a function to get the sum of all the prime factors of n.\n    '''\n    sum = 0\n    prime_factors = get_primes_factors(n)\n    for i in range(0,len(prime_factors)):\n        sum += prime_factors[i]\n    return sum\ndef get_semiprime_factor_sum(n):\n    '''\n    Write a function to get the sum of all the semiprime factors of n.\n    '''\n    sum = 0\n    semiprime_factors = get_semiprimes_factors(n)\n    for i in range(0,len(semiprime_factors)):\n        sum += semiprime_factors[i]\n    return sum\ndef get_odd_semiprime_factor_sum(n):\n    '''\n    Write a function to get the sum of all the odd semiprime factors of n.\n    '''\n    sum = 0\n    semiprime_factors = get_odd_semiprimes_factors(n)\n    for i in range(0,len(semiprime_factors)):\n        sum += semiprime_factors[i]\n    return sum\ndef get_largest_semiprime_factor_sum(n):\n    '''\n    Write a function to get the largest semiprime factor of n.\n    '''\n    semiprime_fac",
        "num_ids": 9
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # a = int(input(\"Enter a number: \"))\n    if n < 0:\n        return False\n    n1 = n**2\n    n2 = (n**2) + (n**2)\n    return n2 == n1\n",
        "num_ids": 60
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if len(str(n))==1:\n        return False\n    else:\n        for i in range(0,len(str(n))):\n            if (n%10)**2==n:\n                return True\n            else:\n                n=int(n/10)\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n%i == 0:\n            count = count + 1\n    if count == 1:\n        return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    l = list(map(int, str(n)))\n    # print(l)\n    if len(l) % 2 == 0:\n        return True\n    i = 0\n    while i < len(l) // 2:\n        if l[i] == l[-1 - i]:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 84
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Initialize all variable.\n    odd_count = 0\n    even_count = 0\n    even = False\n    for i in range(1, n):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    # If the number of odd digits is greater than or equal to the number of even digits, \n    # then it is undulating. Else, it is not.\n    if odd_count >= even_count:\n        return True\n    else:\n        return False\n",
        "num_ids": 127
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return not (n % 2 == 0 and n % 3 == 0)\n",
        "num_ids": 19
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b == 1:\n        return a\n    elif b%2 == 0:\n        return power(a,b//2) * power(a,b//2)\n    elif b%2 == 1:\n        return power(a,b//2) * power(a,b//2) * a\n",
        "num_ids": 99
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b%2==0:\n        return power(a*a,b//2)\n    return a*power(a*a,b//2)\n",
        "num_ids": 61
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b>0:\n        if a>1:\n            a,b=a,b\n            if b>1:\n                c=b-1\n                d=a\n                while(c>0):\n                    c=c-1\n                    d=d*a\n                return d\n            else:\n                return a**b\n        else:\n            return 1\n    else:\n        if a>1:\n            return 1/a\n        else:\n            return 1\nprint(power(2,3))\nprint(power(2,0))\nprint(power(0,0))\nprint(power(-2,3))\n",
        "num_ids": 149
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b < 0:\n        return 1/power(a,abs(b))\n    else:\n        return a * power(a,b-1)\n",
        "num_ids": 63
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b==2:\n        return a*a\n    return a*power(a,b-1)\n",
        "num_ids": 50
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b==0):\n        return 1\n    elif(b%2==0):\n        return power(a,b//2)*power(a,b//2)\n    else:\n        return a*power(a,b//2)*power(a,b//2)\n",
        "num_ids": 69
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b<0:\n        return 1/a**b\n    return a**b\n",
        "num_ids": 23
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 38
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    result = [min(test_list, key = itemgetter(1))]\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = min(test_list, key=itemgetter(1))\n    return smallest[0]\n",
        "num_ids": 28
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return(min(test_list, key=itemgetter(1))[0])\n",
        "num_ids": 23
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return test_list[min(test_list, key=itemgetter(1))[0]]\n",
        "num_ids": 26
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    tuple_list = []\n    for item in test_list:\n        tuple_list.append((item[0],item[1]))\n    return min(tuple_list, key=itemgetter(1))[0]\n",
        "num_ids": 58
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < length:\n            length = len(sublist)\n    return length\n",
        "num_ids": 46
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n",
        "num_ids": 51
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = []\n    min_len.append(len(lst[0]))\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len[0]:\n            min_len[0] = len(lst[i])\n    return min_len[0]\n",
        "num_ids": 80
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 10000\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n",
        "num_ids": 56
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=1000\n    for lst in lst_lst:\n        min_length=min(min_length,len(lst))\n    return min_length\n",
        "num_ids": 44
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if(len(lst[i]) < min_length):\n            min_length = len(lst[i])\n    return min_length\n",
        "num_ids": 65
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(l) for l in lst])\n",
        "num_ids": 17
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_len = []\n    for i in lst:\n        if len(i) < len(min_len):\n            min_len = i\n    return len(min_len)\n",
        "num_ids": 49
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    for i in lst:\n        if len(i) == len(min(lst,key = len)):\n            return len(i)\n    \n    return -1\n        \ndef Find_Min_Sum(lst):\n    '''\n    Write a Python function to Find the sum of the minimum values in a list of lists.\n    '''\n    return sum([min(i) for i in lst])\n    \ndef Create_List_of_Lists(n):\n    '''\n    Write a Python function to create a list of lists with n elements having the value 0.\n    '''\n    return [[0 for i in range(n)] for j in range(n)]\n",
        "num_ids": 21
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(x) for x in lst])\n",
        "num_ids": 17
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    cnt = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            cnt += 1\n    if cnt == 1:\n        return cnt\n    else:\n        return cnt + 1\n",
        "num_ids": 67
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\nprint(divisor(24))\nprint(divisor(12))\n",
        "num_ids": 56
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    while i*i <= n:\n        if n%i == 0:\n            count = 0\n            while n%i == 0:\n                count += 1\n                n = n//i\n            print(i, count)\n        i += 1\n    if n>1:\n        print(n, 1)\n",
        "num_ids": 79
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while(i<n):\n        if n%i == 0:\n            count+=1\n        i+=1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return len([x for x in range(1, n+1) if n % x == 0])\n    \n    \ndef find_fibonacci_numbers_divisor(n):\n    '''\n    Write a python function to find the sum of all Fibonacci numbers which have exactly N number of divisors.\n    '''\n    a = 0\n    b = 1\n    sum = 0\n    while True:\n        if divisor(a+b) == n:\n            sum += (a+b)\n        if a+b > n:\n            break\n        a, b = b, a+b\n    return sum\n    \n    \ndef find_fibonacci_numbers_divisor_approximation(n):\n    '''\n    Write a python function to find the sum of all Fibonacci numbers which have approximately N number of divisors.\n    '''\n    a = 0\n    b = 1\n    sum = 0\n    while True:\n        if abs(divisor(a+b) - n) <= 1:\n            sum += (a+b)\n        if a+b > n:\n            break\n        a, b = b, a+b\n    return sum\n    \n    \nif __name__ == \"__main__\":\n    n = int(input())\n    print(find_fibonacci_numbers_divisor(n))\n    print(find_fibonacci_numbers_divisor_approximation(n))\n    ",
        "num_ids": 145
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while(i <= n):\n        if(n % i == 0):\n            count = count + 1\n        i = i + 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for x in range(2, int(n**0.5) + 1):\n        if n%x == 0:\n            div += 2\n    if int(n**0.5) == n**0.5:\n        div -= 1\n    return div\n",
        "num_ids": 68
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n",
        "num_ids": 50
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    result = 0\n    for x in range(1, n + 1):\n        if n % x == 0:\n            result += 1\n",
        "num_ids": 34
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for ele in list1:\n        if ele in freq_dict:\n            freq_dict[ele] = freq_dict[ele] + 1\n        else:\n            freq_dict[ele] = 1\n",
        "num_ids": 62
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq\n",
        "num_ids": 52
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list_freq = {}\n    for i in list1:\n        if i not in list_freq:\n            list_freq[i] = 1\n        else:\n            list_freq[i] += 1\n    return list_freq\n",
        "num_ids": 62
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counter = 0\n    frequency_list = []\n    for item in list1:\n        if type(item) == type([]):\n            frequency_list = frequency_list + frequency_lists(item)\n        else:\n            frequency_list.append(item)\n            counter += 1\n    freq_dict = dict(Counter(frequency_list))\n    return freq_dict\n",
        "num_ids": 91
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n",
        "num_ids": 46
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list1 = [1, 2, 3, 1, 4, 3, 2, 3, 1, 4]\n    for item in list1:\n        if item in list1_dict:\n            list1_dict[item] += 1\n        else:\n            list1_dict[item] = 1\n",
        "num_ids": 72
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary: freq\n    freq = {}\n    # Iterate over the list of lists\n    for item in list1:\n        # For each item in list1,\n        for char in item:\n            # Add the element to the frequency dictionary with the value 1 if it doesn't exist in the dictionary,\n            freq[char] = freq.get(char, 0) + 1\n    # Return the frequency dictionary\n    return freq\n",
        "num_ids": 108
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    my_dict = {}\n    for i in list1:\n        if i not in my_dict.keys():\n            my_dict[i] = list1.count(i)\n    return my_dict\nprint(frequency_lists(['a', 'a', 'b', 'b', 'b', 'b']))\nprint(frequency_lists([1, 1, 1, 1, 2, 3, 3, 3]))\n",
        "num_ids": 101
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = dict()\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n",
        "num_ids": 62
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for item in list1:\n        if item not in dict1:\n            dict1[item] = list1.count(item)\n    return dict1\n",
        "num_ids": 45
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total*num\n    total = total/len(numbers)\n    return total\n",
        "num_ids": 36
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    output = 1\n    for number in numbers:\n        output *= number\n    return output / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for number in numbers:\n        total = total * number\n    return total / len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for n in numbers:\n        total = total * n\n    return total / len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for x in numbers:\n        product = product * x\n    return product / len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total = total * x\n    return total/len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 1\n    for num in numbers:\n        sum *= num\n    return sum / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product = product * num\n    return product / len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    output = 1\n    for i in numbers:\n        output *= i\n    return output / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    x = 1\n    for n in numbers:\n        x = x * n\n    return x/len(numbers)\n    # write your code here\n",
        "num_ids": 38
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    b=''\n    while n>0:\n        b+=str(n%2)\n        n//=2\n    return b[::-1]\n",
        "num_ids": 39
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_no = [] \n    while n > 0: \n        binary_no.append(str(n%2)) \n        n = int(n / 2) \n    binary_no = \"\".join(binary_no[::-1]) \n    return binary_no \n",
        "num_ids": 70
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return 0\n    if n == 1:\n        return 1\n    return decimal_to_binary(n//2) + str(n%2)\n",
        "num_ids": 44
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n",
        "num_ids": 37
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    res = \"\"\n    while n!= 0:\n        res += str(n%2)\n        n = n // 2\n    return res[::-1]\n",
        "num_ids": 54
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "num_ids": 16
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = \"\"\n    while n!= 0:\n        res += str(n%2)\n        n //= 2\n    return res[::-1]\n",
        "num_ids": 40
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return str(n)\n    else:\n        return decimal_to_binary(n//2) + str(n % 2)\n    # Driver code\n    # print(decimal_to_binary(26))\n",
        "num_ids": 59
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # starting point\n    # convert number to binary\n    # store it in a list\n    # iterate through it, comparing numbers. if greater than last one, add 1 to list.\n    # if equal, don't do anything.\n    # return list\n    \n    binary_list = []\n    current_digit = n\n    last_digit = 0\n    \n    # iterate\n    while current_digit!= 0:\n        if current_digit > last_digit:\n            binary_list.append(1)\n            last_digit += 1\n            current_digit -= last_digit\n        else:\n            binary_list.append(0)\n            current_digit -= last_digit\n    \n    return binary_list\n",
        "num_ids": 168
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    num_len = len(num_str)\n    for i in range(num_len, -1, -1):\n        if is_palindrome(num_str[0:i]):\n            return int(num_str[:i] + num_str[i:][::-1])\n",
        "num_ids": 83
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    num_len = len(num_str)\n    if num_len < 2:\n        return 0\n    if num_len == 2:\n        if int(num_str[0]) < int(num_str[1]):\n            num_str = num_str[::-1]\n        return int(num_str)\n    idx = num_len // 2\n    if num_len % 2 == 0:\n        if int(num_str[:idx]) < int(num_str[idx:]):\n            num_str = num_str[::-1]\n            num_str = num_str[:idx] + num_str[:idx]\n        else:\n            num_str = num_str[::-1]\n            num_str = num_str[:idx] + num_str[idx:]\n    else:\n        if int(num_str[:idx]) < int(num_str[idx+1:]):\n            num_str = num_str[::-1]\n            num_str = num_str[:idx] + num_str[:idx]\n        else:\n            num_str = num_str[::-1]\n            num_str = num_str[:idx] + num_str[idx+1:]\n    return int(num_str)\ndef next_largest_palindrome(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    num_len = len(num_str)\n    if num_len < 2:\n        return 0\n    if num_len == 2:\n        if int(num_str[0]) < int(num_str[1]):\n            num_str = num_str[::-1]\n        return int(num_str)\n    idx = num_len // 2\n    if num_len % 2 == 0:\n        if int(num_str[:idx]) > int(num_str[idx:]):\n            num_str = num_str[::-1]\n            num_str = num_str[:idx] + num_str[:idx]\n        else:\n            num_str = num_str[::-1]\n            num_str = num_str[:idx] + num_str[idx:]\n    else:\n        if int(num_str[:idx]) > int(num_str[idx+1:]):\n            num_str = num_str[::-1]\n            num_str = num_str[:idx] + num_str[:idx]\n        else:\n            num_str = num_str[::-1]\n            num_str = num_str[:idx] + num_str[idx+1:]\n    return int(num_str)\ndef next_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    num_len = len(num_str)\n    if num_len < 2:\n        return 0\n    if num_len == 2:\n        if int(num_str[0]) < int(num_str[1]):\n            num_str = num_str[::-1]\n        return int(num_str)\n    idx = num_len // 2\n    if num_len % 2 == 0:\n        if int(num_str[:idx]) < int(num_str[idx:]):\n            num_str = num_str[::-1]\n            num_str = num_str[:idx] + num_str[:idx]\n        else:\n            num_str = num_str[::-1]\n            num_str = num_str[:idx] + num_str[idx:]\n    else:\n        if int(num_str[:idx]) < int(num_str[idx+1:]):\n            num_str = num_str[::-1]\n            num_str = num_str[:idx] + num_str[:idx]\n        else:\n            num_str = num_str[::-1]\n            num_str = num_str[:idx] + num_str[idx+1:]\n    return int(num_str)\n",
        "num_ids": 330
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    length = len(num)\n    if length%2 == 0:\n        half = int(length/2)\n    else:\n        half = int(length/2) + 1\n    start_length = length-half\n    mid = length-1\n    if start_length == 0:\n        start = 0\n    else:\n        start = int(num[:start_length])\n    print(start,mid)\n    num = str(start) + num[start_length:]\n    # print(num,num[mid])\n    # print(int(num[:mid])-1)\n    if num[mid] == '9':\n        num = str(int(num[:mid])-1) + num[mid:]\n    else:\n        num = str(int(num[:mid])-1) + num[mid]\n    num = num + num[::-1]\n    return int(num)\n",
        "num_ids": 225
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    rev = 0\n    while rev < num:\n        rev = int(str(num)[::-1])\n        if num < rev:\n            return int(str(rev)[::-1])\n        num += 1\n",
        "num_ids": 53
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = None\n    num = int(num)\n    while palindrome == None:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            palindrome = num\n    return palindrome\n",
        "num_ids": 60
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return int(num)\n    else:\n        length = len(num)\n        for i in range(length-1, 0, -1):\n            if int(num[:i]) < int(num[i:]):\n                return int(num[:i] + num[i:][::-1])\n        return int(num + num[::-1])\n",
        "num_ids": 106
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #need to define the function for the algorithm.\n    #define next largest palindrome function\n    def next_largest_palindrome(num):\n        num = num + 1\n        while not is_palindrome(num):\n            num += 1\n        return num\n    #define palindrome function\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    #define first largest palindrome function\n    def first_palindrome():\n        return int(10**n_digits) * (10**(n_digits-1)) + 1\n",
        "num_ids": 145
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    if len(num_str) == 1:\n        return -1\n    else:\n        is_even = len(num_str) % 2 == 0\n        half = int(len(num_str) / 2)\n        if is_even:\n            return int(num_str[:half][::-1] + num_str)\n        else:\n            return int(num_str[:half] + num_str[:half][::-1] + num_str)\n",
        "num_ids": 125
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # if the number is a palindrome, return itself\n    if num == int(str(num)[::-1]):\n        return num\n    # initialize the number of digits, the loop variable, and the list of digits\n    num_digits = len(str(num))\n    i = 0\n    digits = []\n    # for each digit in the number, add it to the list of digits, and move on to the next one\n    while i < num_digits:\n        digits.append(num % 10)\n        num //= 10\n        i += 1\n    # if the number is less than 9, add one to the number of digits and return it\n    if len(digits) < 9:\n        return int('1' + ''.join(str(num) for num in digits) + '1')\n    # if the number is greater than 9, add one to the number of digits and return it\n    else:\n        return int('9' + ''.join(str(num) for num in digits) + '9')\n",
        "num_ids": 242
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return 10\n    num_str = str(num)\n    mid_index = int(len(num_str) / 2)\n    left_side_str = num_str[:mid_index]\n    right_side_str = num_str[mid_index + 1:][::-1]\n    if len(num_str) % 2 == 0:\n        left_side_str = left_side_str[::-1]\n        right_side_str = right_side_str[::-1]\n    else:\n        left_side_str = left_side_str[::-1]\n        right_side_str = right_side_str[:-1]\n    next_palindrome_str = left_side_str + right_side_str\n    next_palindrome = int(next_palindrome_str)\n    return next_palindrome\n",
        "num_ids": 216
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n",
        "num_ids": 19
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return None\n    l, h = 0, len(arr) - 1\n    while l <= h:\n        mid = (l + h) // 2\n        if arr[mid] == k:\n            return arr[mid]\n        elif arr[mid] < k:\n            l = mid + 1\n        elif arr[mid] > k:\n            h = mid - 1\n    return arr[h + 1] if h + 1 < len(arr) else None\n",
        "num_ids": 117
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return None\n",
        "num_ids": 20
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Your code here\n    \n    n = len(arr)\n    if k < 1 or k > n:\n        return\n    \n    return arr[k - 1]\n",
        "num_ids": 43
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pivot = find_pivot(arr, 0, len(arr) - 1)\n    left_ptr = 0\n    right_ptr = len(arr) - 1\n",
        "num_ids": 42
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > 0 and k <= len(arr):\n        return quick_select(arr, k, 0, len(arr) - 1)\n    else:\n        return -1\n",
        "num_ids": 44
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start = 0\n    end = len(arr)-1\n",
        "num_ids": 16
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(len(arr)):\n        if i+1 == k:\n            return arr[i]\n",
        "num_ids": 30
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # word = 'this_is_a_test'\n    print('snake_to_camel')\n    print(word)\n    lst = word.split('_')\n    print(lst)\n    lst[0] = lst[0].lower()\n    print(lst)\n    res = ''.join(lst)\n    print(res)\n    return res[0].upper() + res[1:].lower()\n",
        "num_ids": 108
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # first, we'll find the underscores and split the string at those points\n    new_word = word.split('_')\n    # next, we'll join the first letter of each word to the rest of the word, \n    # except the first word, which we'll leave as is\n    new_word[1::] = [new_word[0]] + [x.capitalize() for x in new_word[1::]]\n    # finally, we'll join the words together again, but this time we'll capitalize the first letter of each word\n    return ''.join(new_word).capitalize()",
        "num_ids": 139
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # words = word.split('_')\n    # camel_case = words[0]\n    # for i in range(1, len(words)):\n    #     camel_case += words[i].title()\n    # return camel_case\n",
        "num_ids": 61
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_list = list(word)\n    camel_word = ''\n    count = 0\n    for i in range(len(word_list)):\n        if count == 0:\n            camel_word += word_list[i].upper()\n            count += 1\n        else:\n            if count == 1:\n                camel_word += word_list[i].lower()\n                count += 1\n            else:\n                camel_word += word_list[i]\n    return camel_word\n",
        "num_ids": 120
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = ''\n    list_word = list(word)\n    if len(list_word) == 1:\n        return word\n    else:\n        for i,letter in enumerate(list_word):\n            if i == 0:\n                new_word += letter.upper()\n            else:\n                new_word += letter\n        return new_word\n",
        "num_ids": 87
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n",
        "num_ids": 28
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n",
        "num_ids": 18
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    capital = False\n    capital_string = \"\"\n    for letter in word:\n        if letter == \"_\":\n            capital = True\n        else:\n            capital = False\n        if capital:\n            capital_string += letter.upper()\n        else:\n            capital_string += letter\n",
        "num_ids": 68
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # return word.title()\n    return ''.join(w if i == 0 else w.capitalize() for i, w in enumerate(word.split('_')))\n",
        "num_ids": 43
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camelcase = \"\"\n    for i, w in enumerate(word.split(\"_\"), start=1):\n        if i > 1:\n            camelcase += w.capitalize()\n        else:\n            camelcase += w\n",
        "num_ids": 58
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n == 0 and m == 0) or (n == 0 and m == 1) or (n == 1 and m == 0):\n        return 0\n    elif (n == 1 and m == 1) or (n == 0 and m == 2):\n        return 1\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n",
        "num_ids": 97
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        return -1\n    if n == m == 0:\n        return 1\n    if n == m == 1:\n        return 2\n    if n == m == 2:\n        return 6\n    if n == 0:\n        return 0\n    if n == 1:\n        return m\n    if m == 0:\n        return eulerian_num(n-1, 1)\n    if m == 1:\n        return eulerian_num(n-1, m+1)\n    if m == 2:\n        return eulerian_num(n-1, m+2)\n    return eulerian_num(n, m+2) + eulerian_num(n-1, m+1) + eulerian_num(n-1, m+2)\n",
        "num_ids": 190
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1: \n        return n \n    elif n == 1: \n        return eulerian_num(n, m - 1) \n    else: \n        return eulerian_num(n, m - 1) + eulerian_num(n - 1, m) \n",
        "num_ids": 74
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    result = 0\n    for k in range(m+1):\n        result += factorial(n-1)//(factorial(n-k)*factorial(k))\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def gcd(a, b):\n        '''\n        The greatest common divisor.\n        '''\n        while b: \n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        '''\n        The lowest common multiple.\n        '''\n        return a * b // gcd(a, b)\n        \n    return lcm(n, m) - n - m - 2\n",
        "num_ids": 34
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    n = n-1\n    if m == n:\n        return 1\n    elif m > n:\n        return 0\n    else:\n        return eulerian_num(n, m+1) + eulerian_num(n, m+2)\n",
        "num_ids": 64
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m - (n-1) - (m-1)\n",
        "num_ids": 20
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    for i in range(n):\n        for j in range(m):\n            if (i+j)%2 == 0 and i!=j:\n                return 0\n    return 1\n",
        "num_ids": 46
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def eulerian_num_iter(n, m):\n        for i in range(m):\n            for j in range(n):\n                if graph[i][j] == 0:\n                    graph[i][j] = 1\n                else:\n                    graph[i][j] = 0\n",
        "num_ids": 71
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return list(map(sorted, input_list))\n",
        "num_ids": 16
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = list(filter(lambda x: type(x) == list, input_list))\n    for sublist in sublists:\n        sublist.sort()\n    return input_list\n",
        "num_ids": 47
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # for each sublist, sort the sublist and output it\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "num_ids": 40
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list[:] = (sorted(i) for i in input_list)\n",
        "num_ids": 23
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for i in input_list:\n        sorted_list.append(sorted(i))\n    return sorted_list\n",
        "num_ids": 39
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "num_ids": 25
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for sublist in input_list:\n        sublist.sort()\n        output_list.append(sublist)\n    return output_list\n    \ndef merge_sublists(input_list):\n    '''\n    Write a function to merge the sublists of strings in a given list of lists.\n    '''\n    output_list = []\n    for sublist in input_list:\n        output_list.append(''.join(sublist))\n    return output_list\n    \ndef get_longest_sublist(input_list):\n    '''\n    Write a function to return the longest sublist of strings from a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    longest_sublist = input_list[0]\n    for sublist in input_list:\n        if len(sublist) > len(longest_sublist):\n            longest_sublist = sublist\n    return longest_sublist\n",
        "num_ids": 77
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through list of list\n    for i in range(len(input_list)):\n        # sort each sublist\n        input_list[i].sort()\n",
        "num_ids": 41
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # return input_list\n    return [sorted(sublist) for sublist in input_list]\n",
        "num_ids": 27
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Write your function here\n    input_list[:] = (sorted(sublist) for sublist in input_list)\n    return input_list\n",
        "num_ids": 38
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if i])\n",
        "num_ids": 16
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x == True:\n            count += 1\n    return count\nprint(count([True, False, True, True, True]))\n",
        "num_ids": 47
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([e for e in lst if bool(e)])\n",
        "num_ids": 19
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len(list(filter(lambda x: bool(x),lst)))\n",
        "num_ids": 21
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(test_list) + test_tup\n",
        "num_ids": 16
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n",
        "num_ids": 13
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n    return test_tup\n",
        "num_ids": 22
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup.append(i)\n    print(test_tup)\n",
        "num_ids": 31
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(3)\n    test_list.append(4)\n    test_tup += (1, 2)\n    return test_list, test_tup\n",
        "num_ids": 45
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list)\n    print(test_tup)\n    test_tup += test_list\n    print(test_tup)\n    return\n",
        "num_ids": 41
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    #create empty list\n    tup_list = []\n    for tup in test_tup:\n        for i in range(len(tup)):\n            tup_list.append(tup[i])\n        \n    for i in range(len(test_list)):\n        tup_list.append(test_list[i])\n        \n    return tup_list\n",
        "num_ids": 96
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list + test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # TODO: Write function to append the given list to the given tuples.\n    print('TODO')\n    return test_list, test_tup\n",
        "num_ids": 40
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = []\n    index1 = 0\n    index2 = 0\n    index3 = 0\n    while index1 < len(num1) and index2 < len(num2) and index3 < len(num3):\n        if num1[index1] < num2[index2] and num1[index1] < num3[index3]:\n            new_list.append(num1[index1])\n            index1 += 1\n        elif num2[index2] < num3[index3]:\n            new_list.append(num2[index2])\n            index2 += 1\n        else:\n            new_list.append(num3[index3])\n            index3 += 1\n    while index1 < len(num1):\n        new_list.append(num1[index1])\n        index1 += 1\n    while index2 < len(num2):\n        new_list.append(num2[index2])\n        index2 += 1\n    while index3 < len(num3):\n        new_list.append(num3[index3])\n        index3 += 1\n    return new_list\n",
        "num_ids": 266
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = [None] * (len(num1) + len(num2) + len(num3))\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            merged_list[i+j+k] = num1[i]\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            merged_list[i+j+k] = num2[j]\n            j += 1\n        else:\n            merged_list[i+j+k] = num3[k]\n            k += 1\n    while i < len(num1):\n        merged_list[i+j+k] = num1[i]\n        i += 1\n    while j < len(num2):\n        merged_list[i+j+k] = num2[j]\n        j += 1\n    while k < len(num3):\n        merged_list[i+j+k] = num3[k]\n        k += 1\n    return merged_list\n",
        "num_ids": 309
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=num1+num2\n    list2=num3\n    list1.sort()\n    list2.sort()\n    list3=[]\n    i=0\n    j=0\n    while(i<len(list1) and j<len(list2)):\n        if list1[i]<list2[j]:\n            list3.append(list1[i])\n            i+=1\n        elif list1[i]>list2[j]:\n            list3.append(list2[j])\n            j+=1\n        elif list1[i]==list2[j]:\n            list3.append(list1[i])\n            list3.append(list2[j])\n            i+=1\n            j+=1\n    while(i<len(list1)):\n        list3.append(list1[i])\n        i+=1\n    while(j<len(list2)):\n        list3.append(list2[j])\n        j+=1\n    return list3\n",
        "num_ids": 244
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    final_list = []\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<=num2[j] and num1[i]<=num3[k]:\n            final_list.append(num1[i])\n            i+=1\n        elif num2[j]<=num1[i] and num2[j]<=num3[k]:\n            final_list.append(num2[j])\n            j+=1\n        else:\n            final_list.append(num3[k])\n            k+=1\n    while i<len(num1):\n        final_list.append(num1[i])\n        i+=1\n    while j<len(num2):\n        final_list.append(num2[j])\n        j+=1\n    while k<len(num3):\n        final_list.append(num3[k])\n        k+=1\n    return final_list\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return string==string[::-1]\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\n    \ndef is_anagram(string1,string2):\n    '''\n    Write a function to check whether two given strings are anagrams or not.\n    '''\n    return sorted(string1.lower())==sorted(string2.lower())\n    \ndef longest_substring_without_repeating_characters(string):\n    '''\n    Write a function to find the longest non-repeating substring in a given string.\n    '''\n    longest=0\n    long_sub=''\n    char_count={}\n    for char in string:\n        if char in char_count:\n            char_count[char]+=1\n        else:\n            char_count[char]=1\n        current_long=max(char_count.values())\n        if current_long>longest:\n            longest=current_long\n            long_sub=char\n    return long_sub\n    \ndef count_vowels(string):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    vowels = 'aeiou'\n    vowel_count = 0\n    for letter in string.lower():\n        if letter in vowels:\n            vowel_count += 1\n    return vowel_count\n    \ndef sort_arrays(num1,num2,num3):\n    '''\n    Write a function to sort three arrays in such a way that all arrays are sorted.\n    '''\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]>=num2[j] and num1[i]>=num3[k]:\n            num1.insert(i,num2[j])\n            num2.insert(j,num1[i])\n            num3.insert(k,num1[i+1])\n            i+=1\n            j+=1\n        elif num2[j]>=num1[i] and num2[j]>=num3[k]:\n            num2.insert(j,num3[k])\n            num3.insert(k,num2[j])\n            num1.insert(i,num2[j])\n            j+=1\n            k+=1\n        else:\n            num3.insert(k,num1[i])\n            num1.insert(i,num3[k])\n            i+=1\n            k+=1\n    while i<len(num1):\n        num1.insert(i,num2[j])\n        i+=1\n        j+=1\n    while j<len(num2):\n        num2.insert(j,num3[k])\n        j+=1\n        k+=1\n    return num1,num2,num3\n    \ndef is_unique_chars(string):\n    '''\n    Write a function to check whether a string has all unique characters or not.\n    '''\n    char_count={}\n    for char in string:\n        if char in char_count:\n            return False\n        char_count[char]=1\n    return True\n    \ndef is_permutation(string1,string2):\n    '''\n    Write a function to check whether a given string is a permutation of a palindrome or not.\n    '''\n    return sorted(string1.lower())==sorted(string2.lower())\n    \ndef add_leading_zeros(number,zeros):\n    '''\n    Write a function to add leading zeros to a given number.\n    '''\n    string=str(number)\n    for i in range(zeros-len(string)):\n        string='0'+string\n    return string\n    \ndef is_rotation(string1,string2):\n    '''\n    Write a function to check whether one string is a rotation of another string or not.\n    '''\n    if len(string1)!=len(string2):\n        return False\n    for i in range(len(string1)):\n        if string1[i:]+string1[:i]==string2:\n            return True\n    return False\n    \ndef sum_of_two_strings(string1,string2):\n    '''\n    Write a function to sum two strings and return the sum as a new string.\n    '''\n    sum=''\n    for i in range(len(string1)):\n        sum=sum+str((int(string1[i])+int(string2[i])))\n    return sum\n    \ndef is_anagram_of_palindrome(string):\n    '''\n    Write a function to check whether a given string is an anagram of a palindrome or not.\n    '''\n    return is_palindrome(string) and is_anagram(string,reverse_string(string))\n    \ndef is_k_anagram_of_palindrome(string,k):\n    '''\n    Write a function to check whether a given string is an anagram of a palindrome or not.\n    '''\n    #can also be done using counting sort\n    #but since we are not allowed to use extra memory\n    #we have to make use of the fact that in a palindrome the number of occurrences of each character is a multiple of 9\n    #if k is a multiple of 9 then it is a palindrome and that is the reason why the below solution works\n    return (9-k%9)%2==1 and is_k_anagram_of_palindrome_helper(string,k)\n    \ndef is_k_anagram_of_palindrome_helper(string,k):\n    char_count={}\n    for char in string:\n        if char in char_count:\n            char_count[char]+=1\n        else:\n            char_count[char]=1\n    for key in char_count.keys():\n        if char_count[key]%9!=0:\n            return False\n    return True\n    \ndef merge_k_sorted_arrays(arrays):\n    '''\n    Write a function to merge k sorted arrays.\n    '''\n    heap=[]\n    for i in range(len(arrays)):\n        heapq.heappush(heap,(arrays[i][0],0,arrays[i]))\n    result=[]\n    while heap:\n        num,index,array=heapq.heappop(heap)\n        result.append(num)\n        if index+1<len(array):\n            heapq.heappush(heap,(array[index+1],index+1,array))\n    return result\n    \ndef median_of_array(arr):\n    '''\n    Write a function to get median of an unsorted array.\n    '''\n    arr.sort()\n    return arr[len(arr)//2]\n    \ndef median_of_arrays(arrays):\n    '''\n    Write a function to get median of k sorted array",
        "num_ids": 13
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n",
        "num_ids": 22
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=list(num1)\n    list2=list(num2)\n    list3=list(num3)\n    # print(list1)\n    # print(list2)\n    # print(list3)\n    if len(list1)==0:\n        return list2\n    elif len(list2)==0:\n        return list3\n    elif len(list3)==0:\n        return list1\n    else:\n        l3=[]\n        l3.extend(list1)\n        l3.extend(list2)\n        l3.extend(list3)\n        return l3\n    \n    \n    ",
        "num_ids": 159
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=num1[:]\n    list2=num2[:]\n    list3=num3[:]\n    i=0\n    j=0\n    k=0\n    while i<len(list1) and j<len(list2) and k<len(list3):\n        if list1[i]<list2[j]:\n            if list1[i]<list3[k]:\n                print(list1[i])\n                i+=1\n            else:\n                print(list3[k])\n                k+=1\n        else:\n            if list2[j]<list3[k]:\n                print(list2[j])\n                j+=1\n            else:\n                print(list3[k])\n                k+=1\n    while i<len(list1):\n        if list1[i]<list2[j]:\n            print(list1[i])\n            i+=1\n        else:\n            print(list2[j])\n            j+=1\n    while j<len(list2):\n        if list2[j]<list3[k]:\n            print(list2[j])\n            j+=1\n        else:\n            print(list3[k])\n            k+=1\n    while k<len(list3):\n        print(list3[k])\n        k+=1\n",
        "num_ids": 316
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    n1=len(num1)\n    n2=len(num2)\n    n3=len(num3)\n    k=0\n    a=[0]*(n1+n2+n3)\n    i=0\n    j=0\n    h=0\n    while i<n1 and j<n2 and h<n3:\n        if num1[i]<=num2[j] and num1[i]<=num3[h]:\n            a[k]=num1[i]\n            i+=1\n            k+=1\n        elif num2[j]<=num1[i] and num2[j]<=num3[h]:\n            a[k]=num2[j]\n            j+=1\n            k+=1\n        elif num3[h]<=num1[i] and num3[h]<=num2[j]:\n            a[k]=num3[h]\n            h+=1\n            k+=1\n    while i<n1:\n        a[k]=num1[i]\n        i+=1\n        k+=1\n    while j<n2:\n        a[k]=num2[j]\n        j+=1\n        k+=1\n    while h<n3:\n        a[k]=num3[h]\n        h+=1\n        k+=1\n    return a\ndef max_binary_tree_node(num1,num2,num3):\n    '''\n    Write a function to find the maximum value in a binary tree. You will have to \n    implement the logic to search through the nodes of the binary tree.\n    '''\n    a=[0]*3\n    a=merge_sorted_list(num1,num2,num3)\n    return a[-1]\ndef merge_sorted_list_v2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    n1=len(num1)\n    n2=len(num2)\n    n3=len(num3)\n    k=0\n    a=[0]*(n1+n2+n3)\n    i=0\n    j=0\n    h=0\n    while i<n1 and j<n2 and h<n3:\n        if num1[i]<=num2[j] and num1[i]<=num3[h]:\n            a[k]=num1[i]\n            i+=1\n            k+=1\n        elif num2[j]<=num1[i] and num2[j]<=num3[h]:\n            a[k]=num2[j]\n            j+=1\n            k+=1\n        elif num3[h]<=num1[i] and num3[h]<=num2[j]:\n            a[k]=num3[h]\n            h+=1\n            k+=1\n    while i<n1:\n        a[k]=num1[i]\n        i+=1\n        k+=1\n    while j<n2:\n        a[k]=num2[j]\n        j+=1\n        k+=1\n    while h<n3:\n        a[k]=num3[h]\n        h+=1\n        k+=1\n    return a\ndef max_binary_tree_node_v2(num1,num2,num3):\n    '''\n    Write a function to find the maximum value in a binary tree. You will have to \n    implement the logic to search through the nodes of the binary tree.\n    '''\n    a=[0]*3\n    a=merge_sorted_list_v2(num1,num2,num3)\n    return a[-1]\ndef max_heap(num):\n    '''\n    Write a function to create a max heap from an array.\n    '''\n    n=len(num)\n    if n<=1:\n        return num\n    i=n//2\n    a=[0]*n\n    while i>=0:\n        heapq._siftup(a,i)\n        i-=1\n    return a\ndef max_heap_v2(num):\n    '''\n    Write a function to create a max heap from an array.\n    '''\n    n=len(num)\n    if n<=1:\n        return num\n    i=0\n    a=[0]*n\n    while i<n:\n        heapq._siftup(a,i)\n        i+=1\n    return a\ndef min_heap(num):\n    '''\n    Write a function to create a min heap from an array.\n    '''\n    n=len(num)\n    if n<=1:\n        return num\n    i=n//2\n    a=[0]*n\n    while i>=0:\n        heapq._siftdown(a,0,i)\n        i-=1\n    return a\ndef min_heap_v2(num):\n    '''\n    Write a function to create a min heap from an array.\n    '''\n    n=len(num)\n    if n<=1:\n        return num\n    i=0\n    a=[0]*n\n    while i<n:\n        heapq._siftdown(a,0,i)\n        i+=1\n    return a\ndef max_heap_sort(num):\n    '''\n    Write a function that takes in an unsorted array and returns an array with the \n    elements in sorted order (from largest to smallest). Use the min_heap data \n    structure.\n    '''\n    n=len(num)\n    if n<=1:\n        return num\n    a=max_heap(num)\n    i=n-1\n    while i>0:\n        a[0],a[i]=a[i],a[0]\n        heapq._siftdown(a,0,i)\n        i-=1\n    return a\ndef min_heap_sort(num):\n    '''\n    Write a function that takes in an unsorted array and returns an array with the \n    elements in sorted order (from smallest to largest). Use the min_heap data \n    structure.\n    '''\n    n=len(num)\n    if n<=1:\n        return num\n    a=min_heap(num)\n    i=n-1\n    while i>0:\n        a[0],a[i]=a[i],a[0]\n        heapq._siftdown(a,0,i)\n        i-=1\n    return a\ndef count_set_bits(n):\n    '''\n    Write a function that takes in an integer and returns the number of 1s in \n    the binary representation. You can assume that the input will be non-negative.\n    '''\n    n=bin(n)[2:]\n    return n.count('1')\ndef count_set_bits_v2(n):\n    '''\n    Write a function that takes in an integer and returns the number of 1s in \n    the binary representation. You can assume that the input will be non-negative.\n    '''\n    n=bin(n)[2:]\n    l=len(n)\n    if l<=1:\n        return l\n    i=0\n    c=0\n    while i<l:\n        if n[i]=='1':\n            c+=1\n        i+=1\n    return c\ndef move_zeroes(num):\n    '''\n    Write a function to move all zeros to the end of a given array. You cannot \n    use any sorting function like sort.\n    '''\n    n=len(num)\n    if n<=1:\n        return num\n    i=0\n    j=0\n    while j<n:\n        if num[j]!=0:\n            num[i],num[j]=num[j],num[i]\n            i+=1\n        j+=1\n    return num\ndef move_zeroes_v2(num):\n    '''\n    Write a function to move all zeros to the end of a given array. You cannot \n    use any sorting function like sort.\n    '''\n    n=len(num)\n    if n<=1:\n        return num\n    ",
        "num_ids": 23
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = [0] * (len(num1) + len(num2) + len(num3))\n    i,j,k = 0,0,0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            sorted_list[i + j + k] = num1[i]\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            sorted_list[i + j + k] = num2[j]\n            j += 1\n        else:\n            sorted_list[i + j + k] = num3[k]\n            k += 1\n    while i < len(num1) and num1[i] < num3[k]:\n        sorted_list[i + j + k] = num1[i]\n        i += 1\n    while j < len(num2) and num2[j] < num3[k]:\n        sorted_list[i + j + k] = num2[j]\n        j += 1\n    while k < len(num3) and num3[k] < num1[i]:\n        sorted_list[i + j + k] = num3[k]\n        k += 1\n",
        "num_ids": 337
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    index1 = 0\n    index2 = 0\n    index3 = 0\n    new_list = []\n    while index1 < len(num1) and index2 < len(num2) and index3 < len(num3):\n        if num1[index1] < num2[index2] and num1[index1] < num3[index3]:\n            new_list.append(num1[index1])\n            index1 += 1\n        elif num2[index2] < num1[index1] and num2[index2] < num3[index3]:\n            new_list.append(num2[index2])\n            index2 += 1\n        else:\n            new_list.append(num3[index3])\n            index3 += 1\n    while index1 < len(num1):\n        new_list.append(num1[index1])\n        index1 += 1\n    while index2 < len(num2):\n        new_list.append(num2[index2])\n        index2 += 1\n    while index3 < len(num3):\n        new_list.append(num3[index3])\n        index3 += 1\n    return new_list\n",
        "num_ids": 282
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    string=s\n    l=list(string)\n    if n%2==0:\n        return 0\n    else:\n        for i in range(0,n):\n            if l[0]=='0':\n                l=l[1:]+l[0]\n            else:\n                l=l[-1]+l[:-1]\n        if int(''.join(l),2)%2==0:\n            return 0\n        else:\n            return 1\n",
        "num_ids": 114
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    c=0\n    for i in range(0,len(s)):\n        if (i%n==0 and i!=0):\n            s=s[1:len(s)]+s[0]\n            print(s)\n        if s[i]=='0':\n            c+=1\n    return c\ns=input('Enter binary string:')\nn=int(input('Enter number of times to rotate:'))\nprint(odd_Equivalent(s,n))\n",
        "num_ids": 116
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def counter(l,n):\n        count=0\n        for i in l:\n            if i%2==1:\n                count+=1\n        return count\n    s=list(s)\n    a=counter(s,n)\n    print(a)\nodd_Equivalent(\"101010\",5)\n",
        "num_ids": 76
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    for i in range(n): \n        result = result + (int(s[i]) % 2)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def binary_string_odd_value_count(s): \n        '''\n        Write a python function to count the number of binary strings with an odd number of '1' characters.\n        '''\n        count=0\n        for i in range(1,len(s)+1):\n            for j in range(len(s)):\n                if((s[j:j+i]=='1' or s[j:j+i]=='0')):\n                    count+=1\n                else:\n                    break\n        return count\n    def string_rotation(s,n): \n        '''\n        Write a python function to find the number of string rotation which have an odd value.\n        '''\n        count=0\n        for i in range(n):\n            temp=s[i:]+s[:i]\n            count+=binary_string_odd_value_count(temp)\n        return count\n    return string_rotation(s,n)\n",
        "num_ids": 62
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def bin_string(s,n):\n        result = ''\n        for i in range(len(s)):\n            result += s[i]\n            for _ in range(n):\n                result = result[-1] + result[:-1]\n            return result\n",
        "num_ids": 66
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return ((2**n)-1) & int(s,2)\n",
        "num_ids": 19
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(0,n):\n        if int(s[i],2)%2 == 1:\n            odd_count += 1\n    return odd_count\n",
        "num_ids": 49
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    rotate = str(s) \n    rotate = rotate[n:] + rotate[:n]\n    rotate = bin(int(rotate,2))\n    odd_count = 0\n    for i in rotate:\n        if i == '1':\n            odd_count += 1\n    return odd_count\n",
        "num_ids": 76
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    rotated_string = rotate_string(s,n)\n    rotated_binary = \"\"\n    for i in range(0,len(rotated_string)):\n        rotated_binary += binary_conversion(rotated_string[i])\n    return odd_rotation(rotated_binary)\n",
        "num_ids": 74
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n    # Call the function\n    result = common_in_nested_lists(nestedlist)\n    # Verify the output\n    assert result == common_elements\n    print(\"Correct output!\")\n",
        "num_ids": 51
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_nested_list = []\n    for i in nestedlist[0]:\n        for j in nestedlist[1]:\n            if i == j:\n                common_nested_list.append(i)\n                break\n    return common_nested_list\n",
        "num_ids": 64
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return None\n    elif not isinstance(nestedlist[0], list):\n        return nestedlist[0]\n    \n    result = set(nestedlist[0])\n    for item in nestedlist[1:]:\n        result = result.intersection(set(item))\n    return list(result)\n",
        "num_ids": 87
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    answer = []\n    for list1 in nestedlist:\n        if type(list1) is list:\n            for list2 in nestedlist:\n                if list2 not in answer and type(list2) is list:\n                    if set(list1).intersection(set(list2)):\n                        answer.append(list2)\n    return answer\n",
        "num_ids": 83
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    flat_list = []\n    for sublist in nestedlist:\n        flat_list = flat_list + sublist\n    return flat_list\n",
        "num_ids": 36
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = []\n    for lst in nestedlist:\n        res.extend(lst)\n    \n    return [i for i in res if res.count(i)>1]\n",
        "num_ids": 47
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # SOLUTION 1\n    # for x in nestedlist:\n    #     if x not in common_in_nested_lists(x):\n    #         return False\n    # return True\n",
        "num_ids": 47
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list1 = nestedlist[0]\n    list2 = nestedlist[1]\n    common_nested_list = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common_nested_list.append(i)\n    return common_nested_list\n",
        "num_ids": 77
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return None\n    nestedlist = [i for sublist in nestedlist for i in sublist]\n    #get rid of duplicates\n    nestedlist = set(nestedlist)\n    nestedlist = list(nestedlist)\n    return nestedlist\n",
        "num_ids": 70
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Define a list of distinct elements\n    distinct_elements = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in distinct_elements:\n                distinct_elements.append(item)\n    # Find common elements\n    common_elements = []\n    for item in distinct_elements:\n        count = 0\n        for sublist in nestedlist:\n            if item in sublist:\n                count += 1\n        if count == len(nestedlist):\n            common_elements.append(item)\n    return common_elements\n",
        "num_ids": 141
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    elif text[0] == '-' and text[1:].isdigit():\n        return True\n    elif text[0] == '+' and text[1:].isdigit():\n        return True\n    else:\n        return False\n",
        "num_ids": 74
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        try:\n            int(text)\n            return True\n        except:\n            return False\n",
        "num_ids": 41
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        return int(text)\n    except ValueError:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if bool(dict1) == True:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    is_empty = []\n    for dicts in list1:\n        if len(dicts) == 0:\n            is_empty.append(True)\n        else:\n            is_empty.append(False)\n    return is_empty\n",
        "num_ids": 59
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(not d for d in list1)\n",
        "num_ids": 15
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i)==True:\n            return False\n    return True\ndef sum_of_list(numbers):\n    '''\n    Write a function that returns the sum of all the values in a given list.\n    '''\n    sum=0\n    for i in numbers:\n        sum=sum+i\n    return sum\ndef remove_keys(dictionary,keys):\n    '''\n    Write a function that removes a specified key from a dictionary.\n    '''\n    for i in keys:\n        dictionary.pop(i)\n    return dictionary\ndef sum_of_numbers(numbers):\n    '''\n    Write a function that returns the sum of all the even numbers in a given list.\n    '''\n    sum=0\n    for i in numbers:\n        if i%2==0:\n            sum=sum+i\n    return sum\ndef remove_first_and_last(list1):\n    '''\n    Write a function that removes the first and last elements of a given list.\n    '''\n    list1.pop(0)\n    list1.pop(-1)\n    return list1\ndef find_max_in_list(list1):\n    '''\n    Write a function that returns the maximum value of a given list.\n    '''\n    return max(list1)\ndef find_min_in_list(list1):\n    '''\n    Write a function that returns the minimum value of a given list.\n    '''\n    return min(list1)\ndef is_empty_list(list1):\n    '''\n    Write a function that takes in a list and returns a boolean indicating whether the list is empty or not.\n    '''\n    if len(list1)==0:\n        return True\n    else:\n        return False\ndef palindrome_list(list1):\n    '''\n    Write a function that takes in a list and returns a boolean indicating whether the list is palindrome or not.\n    '''\n    a=list1[::-1]\n    if a==list1:\n        return True\n    else:\n        return False\ndef is_anagram(word1,word2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether the strings are anagrams of each other.\n    '''\n    list1=[]\n    list2=[]\n    for i in word1:\n        list1.append(i)\n    for i in word2:\n        list2.append(i)\n    if sorted(list1)==sorted(list2):\n        return True\n    else:\n        return False\ndef product_list(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns the product of all the numbers in the list.\n    '''\n    product=1\n    for i in numbers:\n        product=product*i\n    return product\ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and returns a new list that contains all the elements of the original list in reverse order.\n    '''\n    return list1[::-1]\ndef is_member_list(list1,x):\n    '''\n    Write a function that takes in a list and an element and returns a boolean indicating whether the element is in the list or not.\n    '''\n    if x in list1:\n        return True\n    else:\n        return False\ndef last_occurrence(list1,x):\n    '''\n    Write a function that takes in a list and an element and returns the index of the last occurrence of the element in the list.\n    '''\n    return list1.index(x)\ndef is_unique_list(list1):\n    '''\n    Write a function that takes in a list and returns a boolean indicating whether the list has all unique elements or not.\n    '''\n    list2=[]\n    for i in list1:\n        if i in list2:\n            return False\n        else:\n            list2.append(i)\n    return True\ndef frequency(list1,x):\n    '''\n    Write a function that takes in a list and an element and returns the number of times the element appears in the list.\n    '''\n    return list1.count(x)\ndef union(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains all the elements that appear in either list.\n    '''\n    return list(set(list1+list2))\ndef intersection(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains all the elements that appear in both lists.\n    '''\n    list3=[]\n    for i in list1:\n        if i in list2:\n            list3.append(i)\n    return list3\ndef remove_duplicates(list1):\n    '''\n    Write a function that takes in a list and returns a new list with all the duplicate elements of the original list removed.\n    '''\n    list2=[]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\ndef count_occurrence(list1,x):\n    '''\n    Write a function that takes in a list and an element and returns the number of times the element appears in the list.\n    '''\n    return list1.count(x)\ndef nth_element(list1,x):\n    '''\n    Write a function that takes in a list and an integer and returns the element at the specified position of the list.\n    '''\n    return list1[x]\ndef second_index(list1,x):\n    '''\n    Write a function that takes in a list and an element and returns the second index of the element in the list. If the element does not exist, return -1.\n    '''\n    return list1.index(x,1)\ndef nth_index(list1,x,n):\n    '''\n    Write a function that takes in a list and an element and returns the nth index of the element in the list. If the element does not exist, return -1.\n    '''\n    return list1.index(x,n)\ndef alternate_concatenate(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains all the elements of the first list followed by all the elements of the second list.\n    '''\n    return list1+list2\ndef last_nth_element(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns the element at the nth position from the end of the list.\n    '''\n    return list1[-n]\ndef rotate_list(list1,x):\n    '''\n    Write a function that takes in a list and an integer and returns the list rotated by x positions.\n    '''\n    return list1[x:]+list1[:x]\ndef is_sublist(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a boolean indicating whether the second list is a sublist of the first list.\n    '''\n    list3=[]\n    for i in list1:\n        if i in list2:\n            list3.append(i)\n    if list3==list2:\n        return True\n    else:\n        return False\ndef is_list_equal(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a boolean indicating whether the two lists are equal.\n    '''\n    if len(list1)==len(list2):\n        if sorted(list1)==sorted(list2):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_substring(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether str1 is a substring of str2.\n    '''\n    if str1 in str2:\n        return True\n    else:\n        return False\ndef is_permutation(str1,str2):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether the strings are permutations of each other.\n    '''\n    list1=[]\n    list2=[]\n    for i in str1:\n        list1.append(i)\n    for i in str2:\n        list2.append(i)\n    if len(lis",
        "num_ids": 53
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1==[]:\n        return True\n    elif isinstance(list1[0],dict):\n        return empty_dit(list1[1:])\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = 1\n    if len(list1)==0:\n        return flag\n    else:\n        for i in list1:\n            if len(i)>0:\n                flag = 0\n                break\n            else:\n                flag = 1\n    return flag\n",
        "num_ids": 65
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all([{} == d for d in list1]):\n        return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for i in range(len(list1)):\n        if bool(list1[i]):\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i):\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    #create a list to store the numbers from the tuple\n    num_list = []\n    #loop through the tuple\n    for num in nums:\n        #append the numbers in the tuple into the list\n        num_list.append(num)\n    #return the sum of the numbers in the list\n    return int(''.join(str(x) for x in num_list))\n",
        "num_ids": 90
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(list(map(str, nums))))\n",
        "num_ids": 19
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Your code goes here\n    # NOTE: you must only use mathematical operations and built-in functions to solve this problem.\n    # You may not use string operations and functions.\n    pass\n",
        "num_ids": 45
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_str = ''\n    for num in nums:\n        num_str += str(num)\n    return int(num_str)\n",
        "num_ids": 36
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n",
        "num_ids": 21
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in nums))\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_str = ''\n    for num in nums:\n        num_str += str(num)\n    return int(num_str)\n",
        "num_ids": 36
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = list(map(float, test_list[i]))\n    return test_list\n",
        "num_ids": 44
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, val in enumerate(test_list):\n        try:\n            test_list[i] = float(val)\n        except:\n            pass\n    return test_list\n",
        "num_ids": 46
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in test_list:\n        for j in range(len(i)):\n            try:\n                i[j] = float(i[j])\n            except ValueError:\n                continue\n    return test_list\n",
        "num_ids": 55
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_float_list = []\n    for i in test_list:\n        try:\n            test_float_list.append(float(i))\n        except ValueError:\n            pass\n    return test_float_list\n    \ndef list_to_string(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to strings.\n    '''\n    test_str_list = []\n    for i in test_list:\n        try:\n            test_str_list.append(str(i))\n        except ValueError:\n            pass\n    return test_str_list\n",
        "num_ids": 55
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for e in test_list:\n        try:\n            float_list.append(float(e))\n        except:\n            pass\n    return float_list\n",
        "num_ids": 47
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            print(\"That's not an int!\")\n    return(test_list)\n",
        "num_ids": 62
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        result.append([float(k) for k in i])\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # first, check if the list is empty or is only one item. if yes, return it as it is\n    if len(test_list) == 1:\n        return test_list\n    # now, use a loop to check if any of the items is convertible to float,\n    # if yes, convert it to a float and continue to the next element\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float, complex]:\n                test_list[i][j] = float(test_list[i][j])\n            else:\n                continue\n    # finally, return the new list\n    return test_list\n",
        "num_ids": 176
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for i in range(len(row)):\n            if isinstance(row[i], list):\n                row[i] = list_to_float(row[i])\n            else:\n                try:\n                    row[i] = float(row[i])\n                except:\n                    pass\n    return test_list\n",
        "num_ids": 86
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for i in test_list:\n        try:\n            float_list.append(float(i))\n        except ValueError:\n            pass\n    return float_list\n",
        "num_ids": 49
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split(\" \")\n    return string_list\n",
        "num_ids": 20
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split(' '))\n",
        "num_ids": 13
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split()\n    return list_of_strings\n",
        "num_ids": 22
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    result = []\n    for sub_string in string.split():\n        result.append(sub_string)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [x for x in string.split(' ')]\n",
        "num_ids": 16
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    curr_index = 0\n    curr_element = arr[0]\n    while curr_index < len(arr) - 1:\n        next_index = curr_index + 1\n        if curr_element!= arr[next_index]:\n            curr_index += 1\n            curr_element = arr[curr_index]\n        else:\n            next_index += 1\n    return curr_element\n",
        "num_ids": 103
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    low = 0\n    high = len(arr) - 1\n",
        "num_ids": 39
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    result = 0\n",
        "num_ids": 21
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    n=len(arr)\n    for i in range(0,n-1):\n        if arr[i]!=arr[i+1]:\n            return arr[i]\n    return arr[n-1]\n",
        "num_ids": 60
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return [i[0] for i in Counter(arr).most_common() if i[1] == 1][0]\n",
        "num_ids": 31
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # This is a simple solution that O(n) in time and O(1) in space\n",
        "num_ids": 26
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    while i < len(arr):\n        j = i+1\n        while j < len(arr):\n            if arr[i] == arr[j]:\n                arr.pop(j)\n            else:\n                j += 1\n        i += 1\n    return arr[0]\n",
        "num_ids": 73
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n",
        "num_ids": 17
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def search_in_sorted_array(arr):\n        if arr == []:\n            return None\n        return search_in_sorted_array(arr[1:]) if arr[0] == arr[1] else arr[0]\n    return search_in_sorted_array(arr)\n",
        "num_ids": 73
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # solution 1\n    # arr.sort()\n    # for i in range(len(arr)-1):\n    #     if arr[i] == arr[i+1]:\n    #         return arr[i]\n    # return arr[-1]\n    # solution 2\n    # arr.sort()\n    # for i in range(len(arr)):\n    #     if arr[i] == arr[i+1]:\n    #         continue\n    #     else:\n    #         return arr[i]\n    # return arr[-1]\n    # solution 3\n    arr.sort()\n    n = len(arr)\n    i = 0\n    while i < n:\n        if arr[i] == arr[i+1]:\n            i += 2\n            continue\n        else:\n            return arr[i]\n        i += 1\n    return arr[-1]\n",
        "num_ids": 209
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max([abs(i[0]*i[1]) for i in list1 if len(i)==2])\n",
        "num_ids": 31
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = list1[::2]\n    max1 = list1[0] * list1[1]\n    max2 = list1[0] * list1[2]\n    max3 = list1[0] * list1[3]\n    max4 = list1[1] * list1[2]\n    max5 = list1[1] * list1[3]\n    max6 = list1[2] * list1[3]\n    max_list = [max1, max2, max3, max4, max5, max6]\n    print(max_list)\n    for i in range(len(max_list)):\n        if max_list[i] > max1:\n            max1 = max_list[i]\n    for i in range(len(max_list)):\n        if max_list[i] > max2:\n            max2 = max_list[i]\n    for i in range(len(max_list)):\n        if max_list[i] > max3:\n            max3 = max_list[i]\n    for i in range(len(max_list)):\n        if max_list[i] > max4:\n            max4 = max_list[i]\n    for i in range(len(max_list)):\n        if max_list[i] > max5:\n            max5 = max_list[i]\n    for i in range(len(max_list)):\n        if max_list[i] > max6:\n            max6 = max_list[i]\n    return (max1, max2, max3, max4, max5, max6)\n",
        "num_ids": 392
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # https://stackoverflow.com/questions/25731754/finding-maximum-product-of-pairs-in-a-list-of-tuples\n    # set product as the lowest positive number\n    product = 0\n    # set max_product_tuple_list to a list of tuples\n    max_product_tuple_list = []\n    # for every element of the list\n    for i in list1:\n        # if element is a tuple\n        if type(i) is tuple:\n            # for every element in the tuple\n            for j in i:\n                # find the product of the two numbers\n                product = j*j\n                # if the product is the highest so far\n                if product > product:\n                    # set max_product_tuple_list to the tuple with the highest product\n                    max_product_tuple_list = [i]\n                # if the product is the same as the highest so far\n                elif product == product:\n                    # add the tuple to max_product_tuple_list\n                    max_product_tuple_list.append(i)\n        # if element is not a tuple, then it is a number\n        elif type(i) is not tuple:\n            # if the number is negative\n            if i < 0:\n                # multiply the number with itself\n                product = i*i\n                # if the product is the highest so far\n                if product > product:\n                    # set max_product_tuple_list to the tuple with the highest product\n                    max_product_tuple_list = [i]\n                # if the product is the same as the highest so far\n                elif product == product:\n                    # add the tuple to max_product_tuple_list\n                    max_product_tuple_list.append(i)\n    # for every element in max_product_tuple_list\n    for i in max_product_tuple_list:\n        # if it is a tuple\n        if type(i) is tuple:\n            # for every element in the tuple\n            for j in i:\n                # set product to that element\n                product = j\n        # if it is not a tuple\n        elif type(i) is not tuple:\n            # set product to the number\n            product = i\n        # if the element is negative\n        if product < 0:\n            # set the element to the absolute value of the product\n            product = product * (-1)\n        # return the maximum product\n        return product\n",
        "num_ids": 576
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            list2.append((list1[i],list1[j]))\n    list2.sort()\n    max1=list2[0]\n    for i in list2:\n        if (max1[0]*max1[1]<i[0]*i[1]):\n            max1=i\n    return max1\nprint(max_product_tuple([(1,2),(-2,4)]))\n",
        "num_ids": 139
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # create the first tuple\n    tuple1 = tuple(list1[0:2])\n    \n    # create the second tuple\n    tuple2 = tuple(list1[1:3])\n    \n    # compare the 2 tuples\n    if abs(tuple1[0]*tuple1[1] - tuple2[0]*tuple2[1]) > max_product:\n        max_product = abs(tuple1[0]*tuple1[1] - tuple2[0]*tuple2[1])\n    \n    # compare the 3 tuples\n    if abs(tuple1[0]*tuple1[1]*tuple1[2] - tuple2[0]*tuple2[1]*tuple2[2]) > max_product:\n        max_product = abs(tuple1[0]*tuple1[1]*tuple1[2] - tuple2[0]*tuple2[1]*tuple2[2])\n    \n    # compare the 4 tuples\n    if abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3] - tuple2[0]*tuple2[1]*tuple2[2]*tuple2[3]) > max_product:\n        max_product = abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3] - tuple2[0]*tuple2[1]*tuple2[2]*tuple2[3])\n    \n    # compare the 5 tuples\n    if abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3]*tuple1[4] - tuple2[0]*tuple2[1]*tuple2[2]*tuple2[3]*tuple2[4]) > max_product:\n        max_product = abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3]*tuple1[4] - tuple2[0]*tuple2[1]*tuple2[2]*tuple2[3]*tuple2[4])\n    \n    # compare the 6 tuples\n    if abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3]*tuple1[4]*tuple1[5] - tuple2[0]*tuple2[1]*tuple2[2]*tuple2[3]*tuple2[4]*tuple2[5]) > max_product:\n        max_product = abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3]*tuple1[4]*tuple1[5] - tuple2[0]*tuple2[1]*tuple2[2]*tuple2[3]*tuple2[4]*tuple2[5])\n    \n    # compare the 7 tuples\n    if abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3]*tuple1[4]*tuple1[5]*tuple1[6] - tuple2[0]*tuple2[1]*tuple2[2]*tuple2[3]*tuple2[4]*tuple2[5]*tuple2[6]) > max_product:\n        max_product = abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3]*tuple1[4]*tuple1[5]*tuple1[6] - tuple2[0]*tuple2[1]*tuple2[2]*tuple2[3]*tuple2[4]*tuple2[5]*tuple2[6])\n    \n    # compare the 8 tuples\n    if abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3]*tuple1[4]*tuple1[5]*tuple1[6]*tuple1[7] - tuple2[0]*tuple2[1]*tuple2[2]*tuple2[3]*tuple2[4]*tuple2[5]*tuple2[6]*tuple2[7]) > max_product:\n        max_product = abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3]*tuple1[4]*tuple1[5]*tuple1[6]*tuple1[7] - tuple2[0]*tuple2[1]*tuple2[2]*tuple2[3]*tuple2[4]*tuple2[5]*tuple2[6]*tuple2[7])\n    \n    # compare the 9 tuples\n    if abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3]*tuple1[4]*tuple1[5]*tuple1[6]*tuple1[7]*tuple1[8] - tuple2[0]*tuple2[1]*tuple2[2]*tuple2[3]*tuple2[4]*tuple2[5]*tuple2[6]*tuple2[7]*tuple2[8]) > max_product:\n        max_product = abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3]*tuple1[4]*tuple1[5]*tuple1[6]*tuple1[7]*tuple1[8] - tuple2[0]*tuple2[1]*tuple2[2]*tuple2[3]*tuple2[4]*tuple2[5]*tuple2[6]*tuple2[7]*tuple2[8])\n    \n    # compare the 10 tuples\n    if abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3]*tuple1[4]*tuple1[5]*tuple1[6]*tuple1[7]*tuple1[8]*tuple1[9] - tuple2[0]*tuple2[1]*tuple2[2]*tuple2[3]*tuple2[4]*tuple2[5]*tuple2[6]*tuple2[7]*tuple2[8]*tuple2[9]) > max_product:\n        max_product = abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3]*tuple1[4]*tuple1[5]*tuple1[6]*tuple1[7]*tuple1[8]*tuple1[9] - tuple2[0]*tuple2[1]*tuple2[2]*tuple2[3]*tuple2[4]*tuple2[5]*tuple2[6]*tuple2[7]*tuple2[8]*tuple2[9])\n    \n    # compare the 11 tuples\n    if abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3]*tuple1[4]*tuple1[5]*tuple1[6]*tuple1[7]*tuple1[8]*tuple1[9]*tuple1[10] - tuple2[0]*tuple2[1]*tuple2[2]*tuple2[3]*tuple2[4]*tuple2[5]*tuple2[6]*tuple2[7]*tuple2[8]*tuple2[9]*tuple2[10]) > max_product:\n        max_product = abs(tuple1[0]*tuple1[1]*tuple1[2]*tuple1[3]*tuple1[4]*tuple1[5]*tuple1[6]*",
        "num_ids": 2006
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i][0]*list1[i][1])\n    return max(result)\n",
        "num_ids": 50
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][1]*list1[j][1] > max_product:\n                max_product = list1[i][1]*list1[j][1]\n                pairs = (list1[i], list1[j])\n    return max_product, pairs\n",
        "num_ids": 107
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for index in range(0, len(list1) - 1):\n        for index2 in range(index + 1, len(list1)):\n            if list1[index] * list1[index2] > max:\n                max = list1[index] * list1[index2]\n    return max\n",
        "num_ids": 80
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # def find_max_product(list1):\n    #     '''\n    #     Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    #     '''\n    #     list1_tuple = []\n    #     for i in range(len(list1) - 1):\n    #         for j in range(i + 1, len(list1)):\n    #             list1_tuple.append(tuple((list1[i], list1[j])))\n    #     return find_max_product_tuples(list1_tuple)\n",
        "num_ids": 95
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    list2 = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if j > i:\n                if list1[i][0]*list1[j][1] > list1[i][1]*list1[j][0]:\n                    list2.append(list1[i][0]*list1[j][1])\n                else:\n                    list2.append(list1[i][1]*list1[j][0])\n    return max(list2)\n    \n    \nprint(max_product_tuple([(1, -5), (1, -3), (1, 2), (1, 4), (1, 2)]))\nprint(max_product_tuple([(1, -3), (1, 2), (1, 4), (1, -2), (1, 3)]))\nprint(max_product_tuple([(-1, 3), (-1, 4), (-1, 5), (-1, 2)]))\n",
        "num_ids": 244
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(x for x in amicable_numbers(limit) if sum_divisors(x) == x)\n",
        "num_ids": 31
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # The sum of a pair (x,y) of amicable numbers is (x+y)2, so we only\n    # need to know if there are any amicable numbers in a range.\n    def get_amicable_pairs(limit):\n        '''\n        Get all amicable numbers up to limit, which are in a sorted list.\n        '''\n        amicable = []\n        for n in range(limit):\n            if get_sum_of_proper_divisors(n) == n:\n                # If we get an amicable pair, it's the same as having two\n                # amicable numbers whose sum is the same as each other.\n                amicable.append(n)\n                # We only want one, so no need to continue searching.\n                break\n            elif get_sum_of_proper_divisors(n) < n:\n                # If we get a number greater than its proper divisor, it's not\n                # an amicable pair.\n                continue\n            # Otherwise, we have an amicable pair.\n            amicable.append(n)\n            amicable.append(get_sum_of_proper_divisors(n))\n        return amicable\n    \n    def get_sum_of_proper_divisors(n):\n        '''\n        For a given number n, get the sum of its proper divisors.\n        '''\n        divisor_sum = 0\n        for i in range(1, n//2 + 1):\n            if n % i == 0:\n                divisor_sum += i\n        return divisor_sum\n    \n    sum_of_amicable_numbers = 0\n    amicable_numbers = get_amicable_pairs(limit)\n    for i in range(len(amicable_numbers)):\n        sum_of_amicable_numbers += amicable_numbers[i]\n    return sum_of_amicable_numbers\n",
        "num_ids": 133
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def d(n):\n        sum = 0\n        for i in range(1, n):\n            if n % i == 0:\n                sum += i\n        return sum\n",
        "num_ids": 43
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = {}\n    for num in range(1, limit + 1):\n        divisors = sum(get_divisors(num))\n        if num == sum(get_divisors(divisors)) and num!= divisors:\n            amicable[num] = divisors\n    return sum(amicable.values())\n",
        "num_ids": 83
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    # Build a dictionary of all amicable numbers from 1 to limit\n    amicable_sum = 0\n    amicable_numbers = dict()\n    for i in range(1, limit + 1):\n        j = sum_of_divisors(i)\n        if i == sum_of_divisors(j) and i!= j:\n            amicable_numbers[i] = j\n    \n    # Sum the amicable numbers\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            amicable_sum += i\n    return amicable_sum\n",
        "num_ids": 146
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    numbers = []\n    for i in range(1, limit):\n        numbers.append(i)\n    for i in range(1, limit):\n        sum_1 = sum_of_divisors(i)\n        sum_2 = sum_of_divisors(sum_1)\n        if sum_1!= sum_2 and i!= sum_2 and i == sum_of_divisors(sum_2):\n            amicable_sum += sum_1 + sum_2\n    return amicable_sum\n",
        "num_ids": 135
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Explanation: If we can find a number m such that the sum of the proper divisors of m,\n    # say d_m, equals m times the sum of the proper divisors of n, then d_m and n are\n    # amicable. In other words, d_m is a factor of m and n is a multiple of m.\n",
        "num_ids": 83
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1,limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n",
        "num_ids": 55
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        sum_of_factors = sum(get_factors(i))\n        if sum_of_factors < i:\n            # The pair (i, sum_of_factors) is not an amicable pair.\n            continue\n        elif sum_of_factors > i:\n            # The pair (i, sum_of_factors) is already found.\n            if is_amicable_number(i, sum_of_factors):\n                sum_of_amicable_numbers += i\n            continue\n        elif sum_of_factors == i:\n            if is_amicable_number(i, sum_of_factors):\n                sum_of_amicable_numbers += i\n                break\n    return sum_of_amicable_numbers\n",
        "num_ids": 208
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a/b)\n",
        "num_ids": 14
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #a = complex(a)\n    #b = complex(b)\n    r = (a**2 + b**2)**0.5\n    t = cmath.phase(complex(a,b))\n    if t >=0:\n        return t\n    else:\n        return t + 360",
        "num_ids": 72
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        arg = cmath.phase(complex(a,b))\n    except:\n        arg = cmath.phase(complex(a+0.0,b+0.0))\n    return arg\n",
        "num_ids": 52
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\nprint(angle_complex(3,-5))\n",
        "num_ids": 27
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a/b)\n",
        "num_ids": 14
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a/b)\n",
        "num_ids": 14
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    # x = a + bj\n    # angle = arctan(b/a)\n    # degree = radian / pi * 180\n    # radian = arctan(b/a) * 180 / pi\n    # return radian\n    \n    angle = cmath.phase(complex(a,b))\n    degree = angle / cmath.pi * 180\n    return degree\n",
        "num_ids": 94
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a+b!= 0:\n        return cmath.phase(a+b)\n    else:\n        return 0\n",
        "num_ids": 32
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    def re(a):\n        return a.real\n    def im(a):\n        return a.imag\n    angle = cmath.phase(complex(a,b))\n    return angle\n",
        "num_ids": 47
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return math.atan2(b.imag,a.real)\ndef modulus_complex(a):\n    '''\n    Write a function to get the modulus of a complex number.\n    '''\n    return math.sqrt((a.real**2)+(a.imag**2))\ndef conjugate_complex(a):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    return a.real+a.imag*1j\ndef add_complex(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    return a+b\ndef sub_complex(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    return a-b\ndef mul_complex(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    return (a*b.real-a*b.imag)*1j\ndef div_complex(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    return a/b\ndef add_complex_number_to_complex_matrix(a,b):\n    '''\n    Write a function to add a complex number to each element in a complex matrix.\n    '''\n    return [[i.real+a.real,i.imag+a.imag] for i in b]\ndef sub_complex_number_from_complex_matrix(a,b):\n    '''\n    Write a function to subtract a complex number from each element in a complex matrix.\n    '''\n    return [[i.real-a.real,i.imag-a.imag] for i in b]\ndef multiply_complex_matrix_by_complex_number(a,b):\n    '''\n    Write a function to multiply a complex matrix by a complex number.\n    '''\n    return [[i.real*b.real-i.imag*b.imag,i.imag*b.real+i.real*b.imag] for i in a]\ndef transpose_complex_matrix(a):\n    '''\n    Write a function to transpose a complex matrix.\n    '''\n    return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]\ndef conjugate_complex_matrix(a):\n    '''\n    Write a function to conjugate a complex matrix.\n    '''\n    return [[a[j][i].conjugate() for j in range(len(a))] for i in range(len(a[0]))]\ndef complex_matrix_to_complex_number(a):\n    '''\n    Write a function to convert a complex matrix to a complex number.\n    '''\n    return [complex(i[0],i[1]) for i in a]\ndef print_complex_matrix(a):\n    '''\n    Write a function to print a complex matrix.\n    '''\n    print(*a)\ndef modulus_complex_matrix(a):\n    '''\n    Write a function to get the modulus of each element in a complex matrix.\n    '''\n    return [[i.real,i.imag] for i in a]\ndef angle_complex_matrix(a):\n    '''\n    Write a function to get the angle of each element in a complex matrix.\n    '''\n    return [[i.real,i.imag] for i in a]\ndef conjugate_complex_matrix(a):\n    '''\n    Write a function to conjugate each element in a complex matrix.\n    '''\n    return [[i.real,i.imag] for i in a]\ndef add_complex_matrix_to_complex_matrix(a,b):\n    '''\n    Write a function to add two complex matrices.\n    '''\n    return [[a[i][j]+b[i][j] for j in range(len(a[0]))] for i in range(len(a))]\ndef sub_complex_matrix_from_complex_matrix(a,b):\n    '''\n    Write a function to subtract two complex matrices.\n    '''\n    return [[a[i][j]-b[i][j] for j in range(len(a[0]))] for i in range(len(a))]\ndef multiply_complex_matrix_by_complex_matrix(a,b):\n    '''\n    Write a function to multiply two complex matrices.\n    '''\n    return [[sum([a[i][k]*b[k][j] for k in range(len(b))]) for j in range(len(b[0]))] for i in range(len(a))]\ndef div_complex_matrix_by_complex_number(a,b):\n    '''\n    Write a function to divide a complex matrix by a complex number.\n    '''\n    return [[i.real/b.real,i.imag/b.real] for i in a]\ndef divide_complex_matrix_by_complex_matrix(a,b):\n    '''\n    Write a function to divide a complex matrix by another complex matrix.\n    '''\n    return [[i.real/j.real,i.imag/j.real] for i,j in zip(a,b)]\ndef add_complex_matrices(a,b):\n    '''\n    Write a function to add two complex matrices.\n    '''\n    if len(a)!=len(b) or len(a[0])!=len(b[0]):\n        raise ValueError('The two matrices must be the same size!')\n    return [[i+j for i,j in zip(i,j)] for i,j in zip(a,b)]\ndef subtract_complex_matrices(a,b):\n    '''\n    Write a function to subtract two complex matrices.\n    '''\n    if len(a)!=len(b) or len(a[0])!=len(b[0]):\n        raise ValueError('The two matrices must be the same size!')\n    return [[i-j for i,j in zip(i,j)] for i,j in zip(a,b)]\ndef multiply_complex_matrices(a,b):\n    '''\n    Write a function to multiply two complex matrices.\n    '''\n    if len(a[0])!=len(b):\n        raise ValueError('The number of columns in the first matrix must be the same as the number of rows in the second matrix!')\n    return [[sum([i*j for i,j in zip(i,j)]) for j in zip(*b)] for i in a]\ndef matrix_add_row(a,b):\n    '''\n    Write a function to add a row to a complex matrix.\n    '''\n    return [i+b[0] for i in a]\ndef matrix_subtract_row(a,b):\n    '''\n    Write a function to subtract a row from a complex matrix.\n    '''\n    return [i-b[0] for i in a]\ndef matrix_multiply_row_by_complex_number(a,b):\n    '''\n    Write a function to multiply a row in a complex matrix by a complex number.\n    '''\n    return [i*b for i in a]\ndef matrix_transpose(a):\n    '''\n    Write a function to transpose a complex matrix.\n    '''\n    return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]\ndef matrix_conjugate(a):\n    '''\n    Write a function to conjugate a complex matrix.\n    '''\n    return [[i.conjugate() for i in j] for j in a]\ndef matrix_modulus(a):\n    '''\n    Write a function to get the modulus of each element in a complex matrix.\n    '''\n    return [[i.real for i in j] for j in a]\ndef matrix_angle(a):\n    '''\n    Write a function to get the angle of each element in a complex matrix.\n    '''\n    return [[i.imag for i in j] for j in a]\ndef matrix_conjugate(a):\n    '''\n    Write a function to conjugate a complex matrix.\n    '''\n    return [[i.conjugate() for ",
        "num_ids": 13
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    maxi = 0\n    temp = 0\n",
        "num_ids": 13
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)): \n        if (string[i] == '0'): \n            count = 0\n        else: \n            count+= 1\n            max_count = max(max_count, count) \n    return max_count \n    \ndef find_length_1(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_count = 0\n    count = 0\n    for i in range(len(string)): \n        if (string[i] == '0'): \n            count = 0\n        else: \n            count+= 1\n            max_count = max(max_count, count) \n    return max_count \n",
        "num_ids": 78
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max(string.count(\"0\"), string.count(\"1\"))\n",
        "num_ids": 19
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0: return 0\n    max_diff = 0\n    count_1 = 0\n    count_0 = 0\n    for i in range(len(string)):\n        if string[i] == \"1\":\n            count_1 += 1\n        else:\n            count_0 += 1\n        max_diff = max(max_diff, abs(count_1 - count_0))\n    return max_diff\n",
        "num_ids": 104
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in string:\n        if i == '0':\n            count += 1\n            if max_count < count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n",
        "num_ids": 65
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # add your code here\n    if not string:\n        return 0\n    max_count = 0\n    count = 0\n    for char in string:\n        if char == '1':\n            count += 1\n        else:\n            count = 0\n        max_count = max(max_count,count)\n    return max_count\n",
        "num_ids": 80
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_count = 0\n    for i in range(len(string)):\n        count = 0\n        for j in range(i,len(string)):\n            if string[j] == '0':\n                count += 1\n            else:\n                count -= 1\n            if count > max_count:\n                max_count = count\n    return max_count\n",
        "num_ids": 87
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max([string.count('0'), string.count('1')])\n",
        "num_ids": 20
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i]=='1':\n            count = count+1\n            max_length = max(max_length,count)\n        else:\n            count = 0\n    return max_length\n",
        "num_ids": 73
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    def b1(s):\n        return s.count('1')\n",
        "num_ids": 19
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    assert a>0 and b>0\n    result = 0\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            result+=i\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    result = 0\n    for i in range(1,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            result += i\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = []\n    for i in range(1,a+1):\n        if a%i==0:\n            c.append(i)\n    for j in range(1,b+1):\n        if b%j==0:\n            if j in c:\n                return j\n",
        "num_ids": 70
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    print(f\"The sum of common divisors of {a} and {b} is: {a*b}\")\n",
        "num_ids": 31
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i=1\n    sum=0\n    while(i<=b):\n        if a%i==0 and b%i==0:\n            sum+=i\n        i+=1\n    return sum\n",
        "num_ids": 50
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return reduce(lambda a,b: a*b/(a+b), range(1, min(a, b)+1), 1)\n",
        "num_ids": 34
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a,b):\n        if b==0:\n            return a\n        return gcd(b,a%b)\n    return gcd(a,b)\n",
        "num_ids": 45
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #a = int(input(\"Enter first number : \"))\n    #b = int(input(\"Enter second number : \"))\n    c = a+b\n    #d = a*b\n    l = []\n    #l.append(a)\n    #l.append(b)\n    for i in range(1,c):\n        if(a%i==0 and b%i==0):\n            l.append(i)\n    return (sum(l))",
        "num_ids": 112
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    res=[]\n    for i in range(1,a+1):\n        if a%i==0:\n            res.append(i)\n    for i in range(1,b+1):\n        if b%i==0:\n            res.append(i)\n    s=0\n    for i in res:\n        if i in res:\n            s+=i\n    return s\n",
        "num_ids": 95
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return(a+b-a*b//gcd(a,b))\n",
        "num_ids": 21
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0:\n        return 0\n    return y + multiply_int(x-1, y)\n",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [s for s in str if len(s) > n]\n",
        "num_ids": 19
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    a = str.split(' ')\n    b = []\n    for i in a:\n        if len(i) > n:\n            b.append(i)\n    return b\n",
        "num_ids": 46
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    output = []\n    for word in str:\n        if len(word) > n:\n            output.append(word)\n    return output\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n    #print(long_words)\n",
        "num_ids": 51
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_string = str.split()\n    list = []\n    for i in range(len(new_string)):\n        if len(new_string[i]) > n:\n            list.append(new_string[i])\n    return list\n",
        "num_ids": 61
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    res = []\n    for word in str.split():\n        if len(word) > n:\n            res.append(word)\n    return res\n",
        "num_ids": 38
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    #use list comprehension to create new list\n    new_list = [word for word in str if len(word) > n]\n    \n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [s for s in str if len(s) > n]\n",
        "num_ids": 19
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    s = \"\"\n    for i in str:\n        if len(i) > n:\n            s += i\n    return s\n    \n    \ndef main():\n    print(long_words(5, ['hi', 'hello', 'bye', 'welcome','so long']))\n",
        "num_ids": 68
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_square = sum(my_matrix[0])\n    if my_square == sum(my_matrix[1]) == sum(my_matrix[2]) == sum(my_matrix[3]) == sum(my_matrix[4]) == sum(my_matrix[5]) == sum(my_matrix[6]) == sum(my_matrix[7]) == sum(my_matrix[8]) == my_square:\n        return True\n    else:\n        return False\n",
        "num_ids": 120
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_sum = 0\n    for col_idx, col in enumerate(my_matrix):\n        for row_idx, row in enumerate(col):\n            my_sum += row[row_idx]\n    if my_sum!= 15:\n        return False\n    my_sum = 0\n    for row in my_matrix:\n        for elem in row:\n            my_sum += elem\n    if my_sum!= 15:\n        return False\n    my_sum = 0\n    for row in range(len(my_matrix)):\n        for col in range(len(my_matrix)):\n            my_sum += my_matrix[row][col]\n    if my_sum!= 15:\n        return False\n    my_sum = 0\n    for row in range(len(my_matrix)):\n        for col in range(len(my_matrix)):\n            if row == col:\n                my_sum += my_matrix[row][col]\n    if my_sum!= 15:\n        return False\n    my_sum = 0\n    for row in range(len(my_matrix)):\n        for col in range(len(my_matrix)):\n            if row == (len(my_matrix) - 1) - col:\n                my_sum += my_matrix[row][col]\n    if my_sum!= 15:\n        return False\n    return True",
        "num_ids": 343
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # 1. check if sum of all rows = sum of all columns\n    # 2. check if sum of all rows and columns = sum of all elements\n    mat_size = len(my_matrix)\n    #check if sum of rows is equal to sum of columns\n    sum_row = []\n    sum_col = []\n    for i in range(0, mat_size):\n        sum_row.append(sum(my_matrix[i]))\n    for i in range(0, mat_size):\n        sum_col.append(sum([my_matrix[x][i] for x in range(mat_size)]))\n    if sum_row == sum_col:\n        print(\"Sum of rows is equal to sum of columns\")\n        #check if sum of all elements is equal to sum of rows and columns\n        if sum([sum(x) for x in my_matrix]) == sum(sum_row):\n            print(\"Sum of elements is equal to sum of rows and columns\")\n            print(\"This is a magic square\")\n        else:\n            print(\"Sum of elements is not equal to sum of rows and columns\")\n    else:\n        print(\"Sum of rows is not equal to sum of columns\")\n    return\n",
        "num_ids": 285
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(my_matrix)\n    my_matrix = [[6, 7, 8], [3, 5, 1], [4, 2, 9]]\n    print(my_matrix)\n    my_matrix = [[6, 7, 8], [3, 5, 1], [4, 2, 9]]\n    print(my_matrix)\n    \n    # TODO: Define and test a function which takes in an nxn matrix and returns True if it is a magic square. Otherwise, it should return False.\n    # TODO: Define and test a function which takes in an nxn matrix and returns True if it is a magic square. Otherwise, it should return False.\n",
        "num_ids": 189
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # count = 0\n    # for m in range(0, n):\n    #     for n in range(0, n):\n    #         count = count + m\n    # if count == s:\n    #     print(\"Magic Square\")\n    # else:\n    #     print(\"Not a Magic Square\")\n    \n    # print(count)\n",
        "num_ids": 84
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    assert(len(my_matrix) == len(my_matrix[0]))\n",
        "num_ids": 24
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # list of possible values for the magic square\n    values = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # check the height of the matrix\n    if len(my_matrix)!= 3:\n        return False\n    else:\n        # check the width of the matrix\n        for i in range(len(my_matrix[0])):\n            if len(my_matrix[0])!= 3:\n                return False\n            # check if there is the same number in the same row\n            for i in range(len(my_matrix[0])):\n                if my_matrix[0][i] in my_matrix[0]:\n                    return False\n                # check if there is the same number in the same column\n                if my_matrix[i][0] in my_matrix[0]:\n                    return False\n    # check if the number of the same number in the same row is equal to 9\n    for i in range(len(my_matrix)):\n        count = 0\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] in values:\n                count += 1\n        if count!= 9:\n            return False\n    # check if the number of the same number in the same column is equal to 9\n    for i in range(len(my_matrix)):\n        count = 0\n        for j in range(len(my_matrix[0])):\n            if my_matrix[j][i] in values:\n                count += 1\n        if count!= 9:\n            return False\n    # check if the number of the same number in the same 3*3 area is equal to 9\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            count = 0\n            for k in range(len(my_matrix)):\n                for l in range(len(my_matrix[0])):\n                    if (my_matrix[i+k][j+l] in values) and (my_matrix[i][j] in values):\n                        count += 1\n            if count!= 9:\n                return False\n    # return whether the matrix is a magic square\n    return True\n",
        "num_ids": 538
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    import numpy as np\n    #print(\"my_matrix is\", my_matrix)\n    my_matrix = np.array(my_matrix)\n    #print(\"my_matrix is\", my_matrix)\n    num_rows = len(my_matrix)\n    #print(\"num_rows is\", num_rows)\n    num_cols = len(my_matrix[0])\n    #print(\"num_cols is\", num_cols)\n    # check all the rows for same sum\n    for row in my_matrix:\n        #print(\"row is\", row)\n        s_row = sum(row)\n        #print(\"s_row is\", s_row)\n        if s_row!= sum(my_matrix.diagonal()):\n            #print(\"s_row is not diagonal sum\")\n            return False\n    # check all the columns for same sum\n    for i in range(num_cols):\n        s_col = sum([row[i] for row in my_matrix])\n        if s_col!= sum(my_matrix[:,i]):\n            #print(\"s_col is not diagonal sum\")\n            return False\n    # check all the diagonals for same sum\n    if sum([my_matrix.diagonal()[i] for i in range(num_cols)])!= sum([my_matrix.diagonal()[-(i+1)] for i in range(num_cols)]):\n        #print(\"s_row is not diagonal sum\")\n        return False\n    # check all the diagonals for same sum\n    if sum([my_matrix.diagonal()[i] for i in range(num_rows)])!= sum([my_matrix.diagonal()[-(i+1)] for i in range(num_rows)]):\n        #print(\"s_row is not diagonal sum\")\n        return False\n    return True\n",
        "num_ids": 456
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #1.Convert the list into a numpy array.\n    import numpy as np\n    my_matrix=np.array(my_matrix)\n    #2.Check for magic square using determinant.\n    print(np.linalg.det(my_matrix))\n    #3.Check for magic square using element wise product.\n    print(my_matrix*my_matrix.transpose())\n    #4.Check for magic square using sum of rows and column.\n    print(np.sum(my_matrix,axis=1))\n    print(np.sum(my_matrix,axis=0))\n",
        "num_ids": 151
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # your code here\n    matrix_sum = sum(my_matrix)\n    column_sum = 0\n    row_sum = 0\n    for row in range(len(my_matrix)):\n        row_sum += my_matrix[row][row]\n    for col in range(len(my_matrix)):\n        column_sum += my_matrix[col][col]\n    diagonal_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    diagonal_sum_reverse = my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n    if (matrix_sum!= column_sum) or (matrix_sum!= row_sum) or (matrix_sum!= diagonal_sum) or (matrix_sum!= diagonal_sum_reverse):\n        print('It is not a magic square.')\n    elif matrix_sum == column_sum == row_sum == diagonal_sum == diagonal_sum_reverse:\n        print('It is a magic square.')\n    else:\n        print('It is not a magic square.')\n        \nmagic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\nmagic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]])\n",
        "num_ids": 347
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    for i in nums:\n        dic[i] += 1\n    return max(dic.keys(),key=lambda x:dic[x])\n",
        "num_ids": 49
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # return dict(Counter(nums))[max(dict(Counter(nums)).values())]\n    \n    dict1 = defaultdict(int)\n    for i in nums:\n        dict1[i] += 1\n    return dict1[max(dict1, key=dict1.get)]\n",
        "num_ids": 73
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #return nums[0] if nums[0] not in nums[1:] else max(nums, key=nums.count)\n    dic = {}\n    for i in nums:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    print(dic)\n    return max(dic.items(), key=lambda item:item[1])[0]\n",
        "num_ids": 111
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n",
        "num_ids": 27
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrences = defaultdict(int)\n    for num in nums:\n        max_occurrences[num] += 1\n    max_occurrences_val = 0\n    max_occurrences_item = None\n    for num, count in max_occurrences.items():\n        if count > max_occurrences_val:\n            max_occurrences_val = count\n            max_occurrences_item = num\n    return max_occurrences_item\n    \n    \n",
        "num_ids": 121
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # method 1:\n    # max_occurrence = 1\n    # dict_occurrence = defaultdict(int)\n    # for num in nums:\n    #     dict_occurrence[num] += 1\n    #     if max_occurrence < dict_occurrence[num]:\n    #         max_occurrence = dict_occurrence[num]\n    # for key, value in dict_occurrence.items():\n    #     if value == max_occurrence:\n    #         return key\n    # return -1\n",
        "num_ids": 124
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_count = max(d.values())\n    return [k for k, v in d.items() if v == max_count]\n",
        "num_ids": 60
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    result = nums[0]\n    for num in nums:\n        if nums.count(num) > nums.count(result):\n            result = num\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Solution 1 - using dictionary\n    # map = {}\n    # for n in nums:\n    #     if n in map:\n    #         map[n] += 1\n    #     else:\n    #         map[n] = 1\n    # return max(map, key=map.get)\n",
        "num_ids": 74
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = {}\n    for n in nums:\n        if n in d:\n            d[n] += 1\n        else:\n            d[n] = 1\n    return max(d, key=d.get)\n",
        "num_ids": 55
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels=['a','e','i','o','u','y']\n    new_list=list(str1)\n    left_index=0\n    right_index=len(new_list)-1\n    while left_index<right_index:\n        if new_list[left_index] in vowels:\n            if new_list[right_index] in vowels:\n                new_list[left_index], new_list[right_index]=new_list[right_index], new_list[left_index]\n                left_index+=1\n                right_index-=1\n        left_index+=1\n        right_index-=1\n    return ''.join(new_list)\n",
        "num_ids": 168
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel_list = ['a','e','i','o','u','A','E','I','O','U']\n    for char in str1:\n        if char not in vowel_list:\n            str1 = str1.replace(char,\"\")\n    print(str1)\n    vowel_list.reverse()\n    print(vowel_list)\n",
        "num_ids": 89
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowels_list = []\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    \n    new_str = []\n    for char in str1:\n        if char in vowels:\n            new_str.append(vowels_list.pop())\n        else:\n            new_str.append(char)\n    \n    new_str = \"\".join(new_str)\n    return new_str\n    \ndef is_valid_parentheses(str1):\n    '''\n    Write a Python function to check parentheses in a string are balanced or not.\n    '''\n    open_list = ['[', '{', '(']\n    close_list = [']', '}', ')']\n    \n    stack = []\n    \n    for char in str1:\n        if char in open_list:\n            stack.append(char)\n        elif char in close_list:\n            pos = close_list.index(char)\n            if ((len(stack) > 0) and\n                (open_list[pos] == stack[len(stack)-1])):\n                stack.pop()\n            else:\n                return False\n    \n    if len(stack) == 0:\n        return True\n    else:\n        return False\n        \ndef find_duplicates_brute_force(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                return True\n    return False\n    \ndef find_duplicates_hash_table(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    hash_table = {}\n    for val in arr:\n        if val not in hash_table:\n            hash_table[val] = 1\n        else:\n            return True\n    return False\n    \ndef find_duplicates_bit_vector(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    bit_vector = 0\n    for val in arr:\n        if val & bit_vector == 0:\n            bit_vector |= 1 << val\n        else:\n            return True\n    return False\n    \ndef find_duplicates_bit_vector_alt(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    bit_vector = 0\n    for val in arr:\n        bit_vector = bit_vector | 1 << val\n    for i in range(len(arr)):\n        if bit_vector & 1 << i == 0:\n            return False\n    return True\n    \ndef find_duplicates_set(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    seen = set()\n    for val in arr:\n        if val not in seen:\n            seen.add(val)\n        else:\n            return True\n    return False\n    \ndef find_duplicates_set_alt(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    seen = set()\n    dups = set()\n    for val in arr:\n        if val not in seen:\n            seen.add(val)\n        else:\n            dups.add(val)\n    return dups\n    \ndef find_duplicates_sort(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    arr.sort()\n    for i in range(0, len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n    \ndef find_duplicates_sort_alt(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    arr.sort()\n    for i in range(0, len(arr)-1):\n        if arr[i] == arr[i+1] and arr[i+1] == arr[i+2]:\n            return True\n    return False\n    \ndef find_duplicates_set_with_extra_space(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    seen = set()\n    for val in arr:\n        if val not in seen:\n            seen.add(val)\n        else:\n            return True\n    return False\n    \ndef find_duplicates_set_with_extra_space_alt(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    seen = set()\n    dups = set()\n    for val in arr:\n        if val not in seen:\n            seen.add(val)\n        else:\n            dups.add(val)\n    return dups\n    \ndef find_duplicates_arrays(arr1, arr2):\n    '''\n    Write a Python function that takes two lists and returns True if there is \n    a duplicate number in the list.\n    '''\n    seen = set()\n    dups = set()\n    for val in arr1:\n        if val not in seen:\n            seen.add(val)\n        else:\n            dups.add(val)\n    \n    for val in arr2:\n        if val not in seen:\n            seen.add(val)\n        else:\n            dups.add(val)\n    \n    return dups\n    \ndef find_duplicates_arrays_alt(arr1, arr2):\n    '''\n    Write a Python function that takes two lists and returns True if there is \n    a duplicate number in the list.\n    '''\n    dups = set()\n    \n    for val in arr1:\n        if val in arr2:\n            dups.add(val)\n    \n    for val in arr2:\n        if val in arr1:\n            dups.add(val)\n            \n    return dups\n    \ndef find_duplicates_arrays_alt_2(arr1, arr2):\n    '''\n    Write a Python function that takes two lists and returns True if there is \n    a duplicate number in the list.\n    '''\n    return list(set(arr1) & set(arr2))\n    \ndef find_duplicates_arrays_alt_3(arr1, arr2):\n    '''\n    Write a Python function that takes two lists and returns True if there is \n    a duplicate number in the list.\n    '''\n    return list(set(arr1 + arr2))\n",
        "num_ids": 15
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = str1.lower()\n    vowel_list = []\n    for char in str1:\n        if char in vowels:\n            vowel_list.append(char)\n",
        "num_ids": 70
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = \"AEIOUaeiou\"\n    vowel_list = [c for c in str1 if c.upper() in vowel]\n    vowel_list.reverse()\n    for i in range(0,len(str1)):\n        if str1[i].upper() in vowel:\n            str1 = str1[0:i] + vowel_list[i] + str1[i+1:]\n    return str1\n",
        "num_ids": 109
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel_list = []\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    for i in str1:\n        if i in vowel:\n            vowel_list.append(i)\n    for j in range(len(vowel_list)):\n        str1 = str1.replace(vowel_list[j], vowel_list[len(vowel_list)-j-1])\n    return str1\n",
        "num_ids": 114
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel_regex = re.compile(r'[aeiouAEIOU]')\n    vowel_list = [vowel_regex.findall(str1)]\n    return ''.join(vowel_list[::-1])\n    \n    \ndef find_longest_word(str1):\n    '''\n    Write a python function to return the longest word in a given string.\n    '''\n    words = str1.split()\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n    \n    \ndef check_anagrams(str1,str2):\n    '''\n    Write a python function to check if two given strings are anagrams of each other.\n    '''\n    str1 = str1.replace(' ', '').lower()\n    str2 = str2.replace(' ', '').lower()\n    return sorted(str1) == sorted(str2)\n    \n    \ndef create_largest_number(input_list):\n    '''\n    Write a python function to create the largest number out of a list of integers.\n    '''\n    input_list.sort()\n    largest_number = input_list[-1]\n    for i in range(len(input_list)-1, -1, -1):\n        if largest_number[i] > input_list[i]:\n            largest_number = largest_number[:i] + input_list[i] + largest_number[i+1:]\n    return largest_number\n    \n    \ndef generate_lucky_numbers(input_list):\n    '''\n    Write a python function to generate a list of \"lucky\" numbers out of a list of integers.\n    '''\n    lucky_list = []\n    for number in input_list:\n        if number % 2 == 0:\n            lucky_list.append(number)\n    return lucky_list\n    \n    \ndef generate_primes(n):\n    '''\n    Write a python function to generate a list of primes out of a given range.\n    '''\n    prime_list = []\n    for number in range(2, n+1):\n        prime_list.append(number)\n    for number in range(2, n+1):\n        for i in range(2, number):\n            if number % i == 0:\n                prime_list.remove(number)\n                break\n    return prime_list\n    \n    \ndef find_max_consecutive_characters(input_string):\n    '''\n    Write a python function to find the maximum number of consecutive characters in a given string.\n    '''\n    return max(len(x) for x in input_string.split())\n    \n    \ndef check_password(input_password):\n    '''\n    Write a python function to check whether the password is strong or not.\n    '''\n    length = len(input_password)\n    digit_count = 0\n    uppercase_count = 0\n    lowercase_count = 0\n    special_count = 0\n    for char in input_password:\n        if char.isdigit():\n            digit_count += 1\n        elif char.isupper():\n            uppercase_count += 1\n        elif char.islower():\n            lowercase_count += 1\n        else:\n            special_count += 1\n    if digit_count > 0 and uppercase_count > 0 and lowercase_count > 0 and special_count > 0:\n        return True\n    return False\n    \n    \ndef remove_first_and_last_characters(input_string):\n    '''\n    Write a python function to remove first and last characters from a string.\n    '''\n    return input_string[1:-1]\n    \n    \ndef find_common_characters(input_string1, input_string2):\n    '''\n    Write a python function to find common characters between two given strings.\n    '''\n    return ''.join(sorted(set(input_string1) & set(input_string2)))\n    \n    \ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check whether two given strings are anagrams or not.\n    '''\n    return sorted(str1.replace(' ', '').lower()) == sorted(str2.replace(' ', '').lower())\n    \n    \ndef encrypt_caesar_cipher(input_string, shift):\n    '''\n    Write a python function to encrypt a given string using Caesar Cipher.\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = ''\n    for char in input_string:\n        if char in alphabet:\n            result += alphabet[(alphabet.index(char) + shift) % len(alphabet)]\n        else:\n            result += char\n    return result\n    \n    \ndef generate_prime_factors(n):\n    '''\n    Write a python function to generate prime factors for a given number.\n    '''\n    prime_factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            prime_factors.append(i)\n    return prime_factors\n    \n    \ndef remove_duplicates(input_list):\n    '''\n    Write a python function to remove duplicates from a list of integers.\n    '''\n    return list(set(input_list))\n    \n    \ndef count_digits(input_string):\n    '''\n    Write a python function to count digits in a given string.\n    '''\n    return len(input_string) - input_string.count(' ')\n    \n    \ndef get_negative_numbers(input_list):\n    '''\n    Write a python function to get all negative numbers from a given list of integers.\n    '''\n    return [x for x in input_list if x < 0]\n    \n    \ndef reverse_words_in_a_given_string(input_string):\n    '''\n    Write a python function to reverse the order of the words in a given string.\n    '''\n    return''.join(input_string.split()[::-1])\n    \n    \ndef multiply_numbers_in_a_given_list(input_list):\n    '''\n    Write a python function to multiply all the numbers in a given list.\n    '''\n    product = 1\n    for x in input_list:\n        product *= x\n    return product\n    \n    \ndef make_a_playlist(input_dictionary):\n    '''\n    Write a python function to make a playlist out of a dictionary where the keys are songs and the values are the number of times they appear in the playlist.\n    '''\n    playlist = []\n    for i in range(len(input_dictionary)):\n        for key, value in input_dictionary.items():\n            if value == i+1:\n                playlist.append(key)\n    return playlist\n    \n    \ndef count_smallest_number_of_occurences(input_list):\n    '''\n    Write a python function to get the smallest number of occurences from a given list of integers.\n    '''\n    return min(input_list, key=input_list.count)\n    \n    \ndef get_first_last_and_middle(input_string):\n    '''\n    Write a python function to get the first, last and middle characters of a given string.\n    '''\n    return [input_string[0], input_string[-1], input_string[len(input_string)//2]]\n    \n    \ndef get_string_length(input_string):\n    '''\n    Write a python function to get the length of a given string.\n    '''\n    return len(input_string)\n    \n    \ndef get_first_word_of_given_string(input_string):\n    '''\n    Write a python function to get the first word of a given string.\n    '''\n    return input_string.split()[0]\n    \n    \ndef get_unique_characters(input_string):\n    '''\n    Write a python function to get the unique characters in a given string.\n    '''\n    return set(input_string)\n    \n    \ndef get_common_characters(input_string1, input_string2):\n    '''",
        "num_ids": 1
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1 = list(str1)\n    index_list = []\n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            index_list.append(i)\n    for i in range(len(index_list)//2):\n        temp = str1[index_list[i]]\n        str1[index_list[i]] = str1[index_list[-i-1]]\n        str1[index_list[-i-1]] = temp\n    return ''.join(str1)\n",
        "num_ids": 146
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # vowels list\n    vowels = \"aeiouy\"\n    # empty list\n    str_without_vowels = []\n    # loop through the given string\n    for char in str1:\n        # check if the char is a vowel\n        if char in vowels:\n            # reverse the string and add to the list\n            str_without_vowels.append(char[::-1])\n        else:\n            # add the non-vowel characters to the list\n            str_without_vowels.append(char)\n    # join the list of chars in the original string\n    final_str = \"\".join(str_without_vowels)\n    return final_str\n",
        "num_ids": 167
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowels_list = []\n    str1_list = list(str1)\n    for i in range(len(str1_list)):\n        if str1_list[i].lower() in vowels:\n            vowels_list.append(i)\n    for i in range(len(vowels_list)):\n        str1_list[vowels_list[i]] = str1_list[vowels_list[-1] - i]\n    return ''.join(str1_list)\n",
        "num_ids": 141
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n    \ndef tup_string2(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    \ndef char_string(str1):\n    '''\n    Write a function to return the number of characters in a string.\n    '''\n    return len(str1)\n    \ndef char_string2(str1):\n    '''\n    Write a function to return the number of characters in a string.\n    '''\n    return len(str1)\n    \ndef max_len_str(str1,str2):\n    '''\n    Write a function to find the max length between two strings.\n    '''\n    return max(len(str1),len(str2))\n    \ndef max_len_str2(str1,str2):\n    '''\n    Write a function to find the max length between two strings.\n    '''\n    return max(len(str1),len(str2))\n    \ndef find_max(tup1):\n    '''\n    Write a function to find the max between three numbers.\n    '''\n    return max(tup1)\n    \ndef find_max2(tup1):\n    '''\n    Write a function to find the max between three numbers.\n    '''\n    return max(tup1)\n    \ndef make_list(str1,str2,str3):\n    '''\n    Write a function to concatenate three strings together.\n    '''\n    return [str1,str2,str3]\n    \ndef make_list2(str1,str2,str3):\n    '''\n    Write a function to concatenate three strings together.\n    '''\n    return list(str1,str2,str3)\n    \ndef find_common(list1,list2):\n    '''\n    Write a function to return the common elements in two lists.\n    '''\n    return list(set(list1) & set(list2))\n    \ndef find_common2(list1,list2):\n    '''\n    Write a function to return the common elements in two lists.\n    '''\n    return list(set(list1) & set(list2))\n    \ndef list_to_dict(list1,list2):\n    '''\n    Write a function to return a dictionary with two keys containing the corresponding elements in two lists.\n    '''\n    return {list1[i]: list2[i] for i in range(len(list1))}\n    \ndef list_to_dict2(list1,list2):\n    '''\n    Write a function to return a dictionary with two keys containing the corresponding elements in two lists.\n    '''\n    return dict(zip(list1,list2))\n    \ndef dict_to_list(dict1):\n    '''\n    Write a function to return the keys and values of a dictionary as a list.\n    '''\n    return list(dict1.keys()),list(dict1.values())\n    \ndef dict_to_list2(dict1):\n    '''\n    Write a function to return the keys and values of a dictionary as a list.\n    '''\n    return list(dict1.keys()),list(dict1.values())\n    \ndef count_words(str1):\n    '''\n    Write a function to return the number of words in a string.\n    '''\n    return len(str1.split())\n    \ndef count_words2(str1):\n    '''\n    Write a function to return the number of words in a string.\n    '''\n    return len(str1.split())\n    \ndef delete_char(str1):\n    '''\n    Write a function to delete the character at the given index from a string.\n    '''\n    return str1.replace(str1[index],'')\n    \ndef delete_char2(str1):\n    '''\n    Write a function to delete the character at the given index from a string.\n    '''\n    return str1.replace(str1[index],'')\n    \ndef index_last_char(str1):\n    '''\n    Write a function to find the index of the last occurrence of a character in a string.\n    '''\n    return str1.rfind(str1[index])\n    \ndef index_last_char2(str1):\n    '''\n    Write a function to find the index of the last occurrence of a character in a string.\n    '''\n    return str1.rfind(str1[index])\n    \ndef index_char_position(str1):\n    '''\n    Write a function to find the first occurrence of a character in a string.\n    '''\n    return str1.index(str1[index])\n    \ndef index_char_position2(str1):\n    '''\n    Write a function to find the first occurrence of a character in a string.\n    '''\n    return str1.index(str1[index])\n    \ndef unique_char_count(str1):\n    '''\n    Write a function to return the number of unique characters in a string.\n    '''\n    return len(set(str1))\n    \ndef unique_char_count2(str1):\n    '''\n    Write a function to return the number of unique characters in a string.\n    '''\n    return len(set(str1))\n    \ndef count_unique_words(str1):\n    '''\n    Write a function to return the number of unique words in a string.\n    '''\n    return len(set(str1.split()))\n    \ndef count_unique_words2(str1):\n    '''\n    Write a function to return the number of unique words in a string.\n    '''\n    return len(set(str1.split()))\n    \ndef insert_char(str1):\n    '''\n    Write a function to insert a character in a string.\n    '''\n    return str1[:index] + chr + str1[index:]\n    \ndef insert_char2(str1):\n    '''\n    Write a function to insert a character in a string.\n    '''\n    return str1[:index] + chr + str1[index:]\n    \ndef change_char(str1):\n    '''\n    Write a function to change a character in a string.\n    '''\n    return str1.replace(str1[index],'@')\n    \ndef change_char2(str1):\n    '''\n    Write a function to change a character in a string.\n    '''\n    return str1.replace(str1[index],'@')\n    \ndef replace_char(str1):\n    '''\n    Write a function to replace the character at the given index from a string with the character given.\n    '''\n    return str1.replace(str1[index],'@')\n    \ndef replace_char2(str1):\n    '''\n    Write a function to replace the character at the given index from a string with the character given.\n    '''\n    return str1.replace(str1[index],'@')\n    \ndef get_words(str1):\n    '''\n    Write a function to return the words in a string.\n    '''\n    return str1.split()\n    \ndef get_words2(str1):\n    '''\n    Write a function to return the words in a string.\n    '''\n    return str1.split()\n    \ndef get_words3(str1):\n    '''\n    Write a function to return the words in a string.\n    '''\n    return str1.split()\n    \ndef get_words4(str1):\n    '''\n    Write a function to return the words in a string.\n    '''\n    return str1.split()\n    \ndef sum_integers(num1,num2):\n    '''\n    Write a function to sum two numbers.\n    '''\n    return num1+num2\n    \ndef sum_integers2(num1,num2):\n    '''\n    Write a function to sum two numbers.\n    '''\n    return num1+num2\n    \ndef product_integers(num1,num2):\n    '''\n    Write a function to multiply two numbers.\n    '''\n    return num1*num2\n    \ndef product_integers2(num1,num2):\n    '''\n    Write a function to multiply two numbers.\n    ''",
        "num_ids": 14
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    new_str = ''\n    for i in tup1:\n        new_str = new_str + str(i)\n    return new_str\n",
        "num_ids": 38
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    new_tup = \"\"\n    for item in tup1:\n        new_tup += str(item) + \" \"\n    return new_tup\n",
        "num_ids": 40
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    my_str = \"\"\n    for i in tup1:\n        my_str += str(i) + \",\"\n    my_str = my_str[:-1]\n    return my_str\n",
        "num_ids": 50
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string = ''\n    for i in tup1:\n        tup_string += str(i)\n    return tup_string\n",
        "num_ids": 37
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = \"\"\n    for item in tup1:\n        s += str(item)\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    for i in tup1:\n        return ''.join(tup1)\n",
        "num_ids": 22
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string_list = [str(i) for i in tup1]\n    tup_string = \"\".join(tup_string_list)\n    return tup_string\n",
        "num_ids": 48
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # def sum_negative_nums(nums):\n    #     sum_negative = 0\n    #     for num in nums:\n    #         if num < 0:\n    #             sum_negative += num\n    #     return sum_negative\n    return sum([num for num in nums if num < 0])\nprint(sum_negativenum([1,2,-5,-7,-1]))\n",
        "num_ids": 98
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num_neg_list = [num for num in nums if num < 0]\n    return sum(num_neg_list)\n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n    \n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for n in nums:\n        if n < 0:\n            total += n\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        if i < 0:\n            total += i\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    suma = 0\n    for x in nums:\n        if x < 0:\n            suma += x\n    return suma\n",
        "num_ids": 34
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return(n * (2 * n - 1))\n",
        "num_ids": 15
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))/2\n",
        "num_ids": 17
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def is_hexagonal(n):\n        '''\n        Return if the hexagonal number is a right triangle.\n        '''\n        numerator = 1\n        denominator = 1\n        while True:\n            if numerator > denominator:\n                return False\n            if (numerator + denominator) % 2 == 0:\n                return (numerator + denominator) * n >= n ** 2\n            else:\n                numerator += 1\n                denominator += 2\n    \n    hexagonal = [1]\n    number = 1\n    while len(hexagonal) < n:\n        hexagonal.append(number)\n        number += 6 * (number - 1)\n    \n    return hexagonal[n - 1]\n",
        "num_ids": 143
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # hexagonal number formula: n*(2*n-1)\n    # return n*(2*n-1)\n    return n * (2*n - 1)\n",
        "num_ids": 44
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    # base case\n    if n == 0:\n        return 0\n    \n    # recursion\n    return hexagonal_num(n - 1) + n*(2*n - 1)\n    \ndef sum_to_n(n):\n    '''\n    Write a function to sum all numbers up to and including n.\n    '''\n    \n    # base case\n    if n == 0:\n        return 0\n        \n    # recursion\n    return n + sum_to_n(n - 1)\n    \ndef sum_to_n_dp(n):\n    '''\n    Write a function that finds the sum of all numbers up to and including n.\n    '''\n    \n    # base case\n    if n == 0:\n        return 0\n        \n    # initialise array\n    dp = [0] * (n + 1)\n    \n    # initialise base cases\n    dp[0] = 0\n    dp[1] = 1\n    \n    # build the dp array\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + i\n        \n    # return the sum\n    return dp[n]\n    \ndef fib_num(n):\n    '''\n    Write a function to find the nth Fibonacci number.\n    '''\n    \n    # base case\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # recursion\n    return fib_num(n - 1) + fib_num(n - 2)\n    \ndef fib_num_dp(n):\n    '''\n    Write a function to find the nth Fibonacci number.\n    '''\n    \n    # initialise array\n    dp = [0] * (n + 1)\n    \n    # initialise base cases\n    dp[0] = 0\n    dp[1] = 1\n    \n    # build the dp array\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n        \n    # return the sum\n    return dp[n]\n    \ndef fib_num_naive(n):\n    '''\n    Write a function to find the nth Fibonacci number.\n    '''\n    \n    # base case\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # initialise array\n    dp = [0] * (n + 1)\n    \n    # initialise base cases\n    dp[0] = 0\n    dp[1] = 1\n    \n    # build the dp array\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n        \n    # return the sum\n    return dp[n]\n    \ndef fib_num_alt(n):\n    '''\n    Write a function to find the nth Fibonacci number.\n    '''\n    \n    # initialise variables\n    x = 0\n    y = 1\n    \n    # recursion\n    for i in range(0, n):\n        x, y = y, x + y\n        \n    # return the result\n    return x\n    \ndef fib_num_alt_dp(n):\n    '''\n    Write a function to find the nth Fibonacci number.\n    '''\n    \n    # initialise array\n    dp = [0] * (n + 1)\n    \n    # initialise base cases\n    dp[0] = 0\n    dp[1] = 1\n    \n    # build the dp array\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n        \n    # return the sum\n    return dp[n]\n    \ndef fib_num_alt_dp_2(n):\n    '''\n    Write a function to find the nth Fibonacci number.\n    '''\n    \n    # initialise array\n    dp = [0] * (n + 1)\n    \n    # initialise base cases\n    dp[0] = 0\n    dp[1] = 1\n    \n    # build the dp array\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n        \n    # return the sum\n    return dp[n]\n    \ndef reverse_str(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    \n    # initialise variables\n    x = list(s)\n    result = \"\"\n    \n    # reverse\n    for i in range(0, len(s)):\n        result = result + x[len(s) - 1 - i]\n        \n    # return the result\n    return result\n    \ndef reverse_str_dp(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    \n    # initialise array\n    dp = [0] * (len(s) + 1)\n    \n    # initialise base cases\n    dp[0] = 0\n    dp[1] = 1\n    \n    # build the dp array\n    for i in range(2, len(s) + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n        \n    # return the sum\n    return dp[len(s)]\n    \ndef reverse_str_alt_dp(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    \n    # initialise array\n    dp = [0] * (len(s) + 1)\n    \n    # initialise base cases\n    dp[0] = 0\n    dp[1] = 1\n    \n    # build the dp array\n    for i in range(2, len(s) + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n        \n    # return the sum\n    return dp[len(s)]\n    \ndef palindrome_check(s):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    \n    # initialise variables\n    x = list(s)\n    result = True\n    \n    # reverse\n    for i in range(0, int(len(s)/2)):\n        if x[i]!= x[len(s) - 1 - i]:\n            result = False\n            \n    # return the result\n    return result\n    \ndef palindrome_check_dp(s):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    \n    # initialise array\n    dp = [0] * (len(s) + 1)\n    \n    # initialise base cases\n    dp[0] = 1\n    dp[1] = 1\n    \n    # build the dp array\n    for i in range(2, len(s) + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n        \n    # return the sum\n    return dp[len(s)] % 2\n    \ndef palindrome_check_alt_dp(s):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    \n    # initialise array\n    dp = [0] * (len(s) + 1)\n    \n    # initialise base cases\n    dp[0] = 1\n    dp[1] = 1\n    \n    # build the dp array\n    for i in range(2, len(s) + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n        \n    # return the sum\n    return dp[len(s)] % 2\n    \ndef palindrome_check_alt_dp_2(s):\n    '''\n    Write a function that checks if a string is a palindrome.\n    '''\n    \n    # initialise array\n    dp = [0] * (len(s) + 1)\n    \n    # initialise base cases\n    dp[0] = 1\n    dp[1] = 1\n    \n    # build the dp array\n    for i in range(2, len(s) + 1):\n        dp[i] = dp[i - ",
        "num_ids": 89
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # def hexagonal_num(n):\n    #     # m = n\n    #     # x = hexagonal_num(m)\n    #     # y = hexagonal_num(n)\n    #     # z = x + y\n    #     # return z\n",
        "num_ids": 66
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Formula for the hexagonal number is\n    # x(n) = n(3n\u22121)/2\n",
        "num_ids": 28
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))\ndef main():\n    '''\n    This function prints the requested hexagonal numbers.\n    '''\n    n = int(input('Enter a number: '))\n    hex_list = []\n    for i in range(n+1):\n        hex_list.append(hexagonal_num(i))\n    print(hex_list)\n",
        "num_ids": 57
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n    return zeros / len(nums)\n",
        "num_ids": 40
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n        else:\n            nonzero_count += 1\n    return zero_count/nonzero_count\n",
        "num_ids": 62
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    for i in nums:\n        if i==0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if zero_count > non_zero_count:\n        print(\"Ratio is\", zero_count/non_zero_count)\n    else:\n        print(\"Ratio is\", non_zero_count/zero_count)\n",
        "num_ids": 90
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    total_zeroes = 0\n    total_nonzeroes = 0\n    for num in nums:\n        if num == 0:\n            total_zeroes += 1\n        else:\n            total_nonzeroes += 1\n",
        "num_ids": 55
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    n = len(nums)\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    # print(zero_count, non_zero_count)\n    return zero_count / non_zero_count\n",
        "num_ids": 93
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nz = 0\n    nz_list = []\n    nz_ratio = []\n    nz_list_count = []\n    nz_list_count.append(nz)\n    nz = 0\n    nz_list.append(nz)\n    nz_ratio.append(nz)\n    nz = 0\n    for i in nums:\n        if i == 0:\n            nz += 1\n            nz_list.append(nz)\n            nz_list_count.append(nz_list_count[-1] + nz)\n        else:\n            nz = 0\n            nz_list.append(nz)\n            nz_list_count.append(nz_list_count[-1] + nz)\n    nz_ratio = [nz_list_count[i] / nums.__len__() for i in range(nz_list.__len__())]\n    nz_ratio.pop()\n    nz_ratio_a = array('d', nz_ratio)\n    nz_ratio_b = array('d', nz_ratio)\n    nz_ratio_a.byteswap()\n    nz_ratio_b.byteswap()\n    nz_ratio_a = [nz_ratio_a[i] for i in range(nz_ratio_a.__len__())]\n    nz_ratio_b = [nz_ratio_b[i] for i in range(nz_ratio_b.__len__())]\n    nz_ratio_a.reverse()\n    nz_ratio_b.reverse()\n    nz_ratio_a = array('d', nz_ratio_a)\n    nz_ratio_b = array('d', nz_ratio_b)\n    nz_ratio_a.byteswap()\n    nz_ratio_b.byteswap()\n    nz_ratio_a = [nz_ratio_a[i] for i in range(nz_ratio_a.__len__())]\n    nz_ratio_b = [nz_ratio_b[i] for i in range(nz_ratio_b.__len__())]\n    nz_ratio_a.reverse()\n    nz_ratio_b.reverse()\n    nz_ratio_a = array('d', nz_ratio_a)\n    nz_ratio_b = array('d', nz_ratio_b)\n    nz_ratio_a.byteswap()\n    nz_ratio_b.byteswap()\n    nz_ratio_a = [nz_ratio_a[i] for i in range(nz_ratio_a.__len__())]\n    nz_ratio_b = [nz_ratio_b[i] for i in range(nz_ratio_b.__len__())]\n    nz_ratio_a.reverse()\n    nz_ratio_b.reverse()\n    nz_ratio_a = array('d', nz_ratio_a)\n    nz_ratio_b = array('d', nz_ratio_b)\n    nz_ratio_a.byteswap()\n    nz_ratio_b.byteswap()\n    nz_ratio_a = [nz_ratio_a[i] for i in range(nz_ratio_a.__len__())]\n    nz_ratio_b = [nz_ratio_b[i] for i in range(nz_ratio_b.__len__())]\n    nz_ratio_a.reverse()\n    nz_ratio_b.reverse()\n    nz_ratio_a = array('d', nz_ratio_a)\n    nz_ratio_b = array('d', nz_ratio_b)\n    nz_ratio_a.byteswap()\n    nz_ratio_b.byteswap()\n    nz_ratio_a = [nz_ratio_a[i] for i in range(nz_ratio_a.__len__())]\n    nz_ratio_b = [nz_ratio_b[i] for i in range(nz_ratio_b.__len__())]\n    nz_ratio_a.reverse()\n    nz_ratio_b.reverse()\n    nz_ratio_a = array('d', nz_ratio_a)\n    nz_ratio_b = array('d', nz_ratio_b)\n    nz_ratio_a.byteswap()\n    nz_ratio_b.byteswap()\n    nz_ratio_a = [nz_ratio_a[i] for i in range(nz_ratio_a.__len__())]\n    nz_ratio_b = [nz_ratio_b[i] for i in range(nz_ratio_b.__len__())]\n    nz_ratio_a.reverse()\n    nz_ratio_b.reverse()\n    nz_ratio_a = array('d', nz_ratio_a)\n    nz_ratio_b = array('d', nz_ratio_b)\n    nz_ratio_a.byteswap()\n    nz_ratio_b.byteswap()\n    nz_ratio_a = [nz_ratio_a[i] for i in range(nz_ratio_a.__len__())]\n    nz_ratio_b = [nz_ratio_b[i] for i in range(nz_ratio_b.__len__())]\n    nz_ratio_a.reverse()\n    nz_ratio_b.reverse()\n    nz_ratio_a = array('d', nz_ratio_a)\n    nz_ratio_b = array('d', nz_ratio_b)\n    nz_ratio_a.byteswap()\n    nz_ratio_b.byteswap()\n    nz_ratio_a = [nz_ratio_a[i] for i in range(nz_ratio_a.__len__())]\n    nz_ratio_b = [nz_ratio_b[i] for i in range(nz_ratio_b.__len__())]\n    nz_ratio_a.reverse()\n    nz_ratio_b.reverse()\n    nz_ratio_a = array('d', nz_ratio_a)\n    nz_ratio_b = array('d', nz_ratio_b)\n    nz_ratio_a.byteswap()\n    nz_ratio_b.byteswap()\n    nz_ratio_a = [nz_ratio_a[i] for i in range(nz_ratio_a.__len__())]\n    nz_ratio_b = [nz_ratio_b[i] for i in range(nz_ratio_b.__len__())]\n    nz_ratio_a.reverse()\n    nz_ratio_b.reverse()\n    nz_ratio_a = array('d', nz_ratio_a)\n    nz_ratio_b = array('d', nz_ratio_b)\n    nz_ratio_a.byteswap()\n    nz_ratio_b.byteswap()\n    nz_ratio_a = [nz_ratio_a[i] for i in range(nz_ratio_a.__len__())]\n    nz_ratio_b = [nz_ratio_b[i] for i in range(nz_ratio_b.__len__())]\n    nz_ratio_a.reverse()\n    nz_ratio_b.reverse()\n    nz_ratio_a = array('d', nz_ratio_a)\n    nz_ratio_b = array('d', nz_ratio_b)\n    nz_ratio_a.byteswap()\n    nz_ratio_b.byteswap()\n    nz_ratio_a = [nz_ratio_a[i] for i in range(nz_ratio_a.__len__())]\n    nz_ratio_b = [nz_ratio_b[i] for i in range(nz_ratio_b.__len__())]\n    nz_ratio_a.reverse()\n    nz_ratio_b.reverse()\n    nz_ratio_a = array(",
        "num_ids": 2004
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return(nums.count(0))/len(nums)\n",
        "num_ids": 19
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    def create_array(nums):\n        return [int(i) for i in nums]\n    def zeroes_count(nums):\n        zeroes = 0\n        nonzeroes = 0\n        for i in nums:\n            if i == 0:\n                zeroes += 1\n            else:\n                nonzeroes += 1\n        return zeroes, nonzeroes\n    def zeroes_ratio(nums):\n        zeroes = 0\n        nonzeroes = 0\n        for i in nums:\n            if i == 0:\n                zeroes += 1\n            else:\n                nonzeroes += 1\n        return zeroes / nonzeroes\n    nums = create_array(nums)\n    zeroes, nonzeroes = zeroes_count(nums)\n    return zeroes_ratio(nums)\n",
        "num_ids": 204
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count+=1\n    return count/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # nums = [1,3,0,4,0,0,2,1,0]\n    # count_zeros = 0\n    # count_nonzeros = 0\n    # for num in nums:\n    #     if num == 0:\n    #         count_zeros += 1\n    #     else:\n    #         count_nonzeros += 1\n    # return count_zeros/count_nonzeros\n",
        "num_ids": 105
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n<=0):\n        return False\n    while(n!=0):\n        if((n%2)!=0):\n            return False\n        n//=2\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s = 0\n    while n:\n        if n % 2 == 0:\n            n //= 2\n            s += 1\n        else:\n            break\n    return s == 1\ndef Sum_Of_Powers_Of_Two(n):\n    return 2**(n-1)\n",
        "num_ids": 70
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power = 0; \n    while (n > 0): \n        power += n & 1; \n        n >>= 1; \n    return (power == 1 or power == 3 or power == 5 or power == 7); \ndef is_Sum_Of_Powers_Of_Two_New(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n): \n        n = n & (n - 1); \n    return n == 0; \n",
        "num_ids": 29
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_of_powers_of_two = 0\n    while (n > 0): \n        sum_of_powers_of_two += n & 1\n        n >>= 1\n    return (sum_of_powers_of_two == 0 or sum_of_powers_of_two == 1)\n",
        "num_ids": 73
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0): \n        return False\n",
        "num_ids": 15
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    pow = 0\n    while (n > 0): \n        pow += n % 2\n        n = n / 2\n    return pow\n    \ndef non_decreasing_sequence(n):\n    '''\n    Write a python function to check whether a given sequence is non-decreasing or not.\n    '''\n    return all(n[i] >= n[i+1] for i in range(len(n)-1))\n    \ndef same_frequency(num1, num2):\n    '''\n    Write a python function to check whether two numbers have same frequency of digits or not.\n    '''\n    return Counter(str(num1)) == Counter(str(num2))\n    \ndef add_binary(num1, num2):\n    '''\n    Write a python function to add two binary numbers.\n    '''\n    return bin(num1+num2)[2:]\n    \ndef add_octal(num1, num2):\n    '''\n    Write a python function to add two octal numbers.\n    '''\n    return oct(num1+num2)[2:]\n    \ndef add_hexadecimal(num1, num2):\n    '''\n    Write a python function to add two hexadecimal numbers.\n    '''\n    return hex(num1+num2)[2:]\n    \ndef decimal_to_binary(num):\n    '''\n    Write a python function to convert decimal to binary.\n    '''\n    return bin(num)[2:]\n    \ndef decimal_to_octal(num):\n    '''\n    Write a python function to convert decimal to octal.\n    '''\n    return oct(num)[2:]\n    \ndef decimal_to_hexadecimal(num):\n    '''\n    Write a python function to convert decimal to hexadecimal.\n    '''\n    return hex(num)[2:]\n    \ndef is_pangram(s):\n    '''\n    Write a python function to check whether the given string is pangram or not.\n    '''\n    return set('abcdefghijklmnopqrstuvwxyz') <= set(s.lower())\n    \ndef circular_shift(a, shift):\n    '''\n    Write a python function to shift the characters of a string circularly by specified number of places.\n    '''\n    return a[shift:]+a[:shift]\n    \ndef sum_matrix(m):\n    '''\n    Write a python function to sum all the elements of a given matrix.\n    '''\n    return sum(sum(m,[]))\n    \ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate a given matrix by 90 degrees (clockwise).\n    '''\n    for i in range(len(matrix)):\n        for j in range(i,len(matrix)):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i][::-1]\n    return matrix\n    \ndef matrix_in_spiral_order(m):\n    '''\n    Write a python function to print the elements of a given matrix in spiral order.\n    '''\n    top, bottom, left, right = 0, len(m)-1, 0, len(m[0])-1\n    while left <= right and top <= bottom:\n        for i in range(left, right+1):\n            print(m[top][i], end=\" \")\n        top += 1\n        \n        for i in range(top, bottom+1):\n            print(m[i][right], end=\" \")\n        right -= 1\n        \n        if top <= bottom:\n            for i in range(right, left-1, -1):\n                print(m[bottom][i], end=\" \")\n            bottom -= 1\n            \n        if left <= right:\n            for i in range(bottom, top-1, -1):\n                print(m[i][left], end=\" \")\n            left += 1\n            \nmatrix = [[1,  2,  3,  4,  5],\n          [6,  7,  8,  9,  10],\n          [11, 12, 13, 14, 15],\n          [16, 17, 18, 19, 20]]\n",
        "num_ids": 259
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n == sum(bin(n).count('1') == i for i in range(1, n))\n",
        "num_ids": 28
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n",
        "num_ids": 13
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n: \n        if n & 1: \n            return False\n        n >>= 1\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    while n%2 == 0:\n        n //= 2\n    return n == 1\n",
        "num_ids": 34
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c=2*3.14*r\n    return c\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    a=3.14*r**2\n    return a\ndef circle_area_from_diameter(r):\n    '''\n    Write a function to find the area of a circle from a given diameter.\n    '''\n    a=0.25*3.14*r**2\n    return a\nprint(circle_circumference(5))\nprint(circle_area(5))\nprint(circle_area_from_diameter(5))\n",
        "num_ids": 55
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    c = 2 * math.pi * r\n    return c\n",
        "num_ids": 21
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    c = 2 * pi * r\n    return c\n    ",
        "num_ids": 22
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    c=2*math.pi*r\n    return c\n",
        "num_ids": 21
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n",
        "num_ids": 19
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return pi * r * r\n",
        "num_ids": 10
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for sub_list in test_list:\n        new_list.extend(sub_list)\n    return new_list\n",
        "num_ids": 39
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n",
        "num_ids": 43
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(itertools.chain(*test_list))\n",
        "num_ids": 17
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flat(items, acc=None):\n        if acc is None:\n            acc = []\n        for item in items:\n            if isinstance(item, list):\n                flat(item, acc)\n            else:\n                acc.append(item)\n        return acc\n    return flat(test_list)\n",
        "num_ids": 75
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [int(x) for x in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for sublist in test_list:\n        for num in sublist:\n            singly_list.append(num)\n    return singly_list\n",
        "num_ids": 46
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for list_ in test_list:\n        for item in list_:\n            result.append(item)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    try:\n        # Check if the input is a list of lists\n        assert isinstance(test_list, list)\n        \n        # Iterate through the list of lists\n        for i in test_list:\n            # Check if the item is itself a list\n            if isinstance(i, list):\n                # If it is a list, call the function recursively\n                return extract_singly(i)\n            \n            # If not a list, add the item to the output list\n            else:\n                return test_list\n                \n    except AssertionError:\n        return 'Input is not a list of lists'\n        \n",
        "num_ids": 148
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [i for j in test_list for i in j]\n",
        "num_ids": 18
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    curr_idx = len(nums) - 1\n    while curr_idx > 0:\n        if nums[curr_idx] < nums[0]:\n            nums = flip(nums, curr_idx)\n            nums = flip(nums, 0)\n        else:\n            curr_idx -= 1\n    return nums\n",
        "num_ids": 108
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #i) n = len(nums)\n    n = len(nums)\n    #ii) pancake_sort(nums)\n    if n == 1:\n        return nums\n    while n!= 1:\n        for i in range(n):\n            if i+1!= n and nums[i+1] < nums[i]:\n                pancake_sort(nums[i+1:])\n                nums[i:n], nums[:i+1] = nums[:i+1], nums[i:n]\n                break\n        n -= 1\n    return nums\n",
        "num_ids": 150
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for size in reversed(range(1, len(nums))):\n        for i in range(size):\n            if nums[i] > nums[i+size]:\n                nums[i], nums[i+size] = nums[i+size], nums[i]\n                pancake_sort(nums[:i+size])\n                nums[i], nums[i+size] = nums[i+size], nums[i]\n                break\n    return nums\n",
        "num_ids": 122
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    return pancake_sort(nums[:-1]) + [nums[-1]] if nums[-1] > nums[0] else pancake_sort(nums[1:]) + [nums[0]]\n",
        "num_ids": 72
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # We assume all inputs are valid\n    pancake_sorted_nums = nums[:]\n    for k in range(len(nums) - 1, 0, -1):\n        print(k)\n        try:\n            max_idx = pancake_sorted_nums.index(k)\n        except ValueError:\n            # If k is not in the list, we don't need to do anything\n            continue\n",
        "num_ids": 104
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n < 2:\n        return nums\n    for j in range(n - 1, 0, -1):\n        max_index = 0\n        for i in range(1, j + 1):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        nums = nums[max_index::-1] + nums[:max_index]\n    return nums\n",
        "num_ids": 111
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        j=i\n        while j>0 and nums[j-1]>nums[j]:\n            nums[j],nums[j-1]=nums[j-1],nums[j]\n            j=j-1\n",
        "num_ids": 78
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    result = []\n    l = len(nums)\n    for i in range(l):\n        if nums[l - i - 1] > nums[l - i - 2]:\n            j = 1\n            while nums[l - i - j] > nums[l - i - j - 1] and j < l - i - 1:\n                j += 1\n            nums[l - i - j], nums[l - i - j - 1] = nums[l - i - j - 1], nums[l - i - j]\n            result.append(nums[:l - i - j])\n            result.append(nums[:l - i - j - 1][::-1])\n            nums = nums[:l - i - j - 1] + nums[l - i - j:]\n    return result\n",
        "num_ids": 202
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    result = []\n    for _ in range(len(nums)):\n        print('iteration:', _)\n        nums = sorted(nums, reverse=True)\n        result.append(nums)\n        if len(nums) == 1:\n            break\n        top = nums.pop(0)\n        nums = [top] + nums\n    return result\n",
        "num_ids": 93
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    # print('before sort')\n    # print(nums)\n",
        "num_ids": 34
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if (len(list1)!= len(list2)) or (len(list2)!= len(list3)) or (len(list1)!= len(list3)):\n        return -1\n    return sum([1 for i in range(len(list1)) if list1[i] == list2[i] == list3[i]])\n",
        "num_ids": 84
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1) == len(list2) == len(list3):\n        count = 0\n        for i in range(len(list1)):\n            if list1[i] == list2[i] and list2[i] == list3[i]:\n                count += 1\n        return count\n    else:\n        return 'lists should have the same length'\n",
        "num_ids": 90
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    for i in range(0,len(list1)):\n        count=0\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j] and i==j:\n                count+=1\n        for k in range(0,len(list3)):\n            if list1[i]==list3[k] and i==k:\n                count+=1\n        if count!=0:\n            print(list1[i],count)\n        ",
        "num_ids": 120
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            result.append(list1[i])\n    return len(result)\n",
        "num_ids": 64
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count=count+1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            samepair = samepair + 1\n    return samepair\n",
        "num_ids": 61
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            counter=counter+1\n    return counter\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter=0\n    if len(list1)==len(list2) and len(list2)==len(list3):\n        for i in range(len(list1)):\n            if list1[i]==list2[i]==list3[i]:\n                counter=counter+1\n    return counter\n",
        "num_ids": 77
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1_len = len(list1)\n    list2_len = len(list2)\n    list3_len = len(list3)\n    count = 0\n    for i in range(list1_len):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 84
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # convert tuple into list\n    input_list = list(Input)\n    #print(input_list)\n    # finding the length of the list\n    length = len(input_list)\n    #print(length)\n    # looping through the list\n    # starting from the first element till the end of the list\n    # count 0\n    count = 0\n    # count 0\n    count_2 = 0\n    for i in input_list:\n        # count +1\n        count += 1\n        # if count is not even\n        if count % 2 == 1:\n            # count 0\n            count_2 = 0\n        # if count is even\n        else:\n            # count +1\n            count_2 += 1\n            # if count_2 is even\n            if count_2 % 2 == 0:\n                # return count\n                return count\n    # return count\n    return count\n",
        "num_ids": 209
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    print(len(Input))\n",
        "num_ids": 10
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n    \nInput = ('hello','my', 'name', 'is', 'andrew', 'andrew', 'andrew', 'andrew', 'andrew', 'andrew', 'andrew', 'andrew', 'andrew', 'andrew', 'andrew')\nprint(find_lists(Input))",
        "num_ids": 77
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for i in Input:\n        if isinstance(i, list):\n            list_count += 1\n    print(\"Number of lists present in given tuple:\", list_count)\n",
        "num_ids": 50
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def count_list(Input):\n        count = 0\n        for i in Input:\n            if isinstance(i, list):\n                count += 1\n        return count\n    return count_list(Input)\n    \nprint(find_lists([[2, 4], [3], [4, 5], [6, [7, 8]], 9]))\n",
        "num_ids": 85
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for item in Input:\n        if isinstance(item, list):\n            list_count += 1\n    print(f\"Given tuple {Input} has {list_count} lists\")\n",
        "num_ids": 52
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    length = 0\n    for element in Input:\n        if type(element) == list:\n            length += 1\n    return length\n",
        "num_ids": 33
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Lists = []\n    for i in range(len(Input)):\n        Lists.append(list(Input[i]))\n    return Lists\n",
        "num_ids": 38
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_of_list = len(Input)\n    print(num_of_list)\n",
        "num_ids": 24
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(max(arr)-min(arr))\n",
        "num_ids": 15
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if(len(arr) == 0):\n        return 0\n    min_element = arr[0]\n    max_difference = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        min_element = min(min_element, arr[i])\n        max_difference = max(max_difference, arr[i] - min_element)\n    return max_difference\n",
        "num_ids": 103
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if (i!= j):\n                absolute_difference = abs(arr[i] - arr[j])\n                if absolute_difference > max_abs_diff:\n                    max_abs_diff = absolute_difference\n                    \n    return max_abs_diff\n    \nprint(max_Abs_Diff([0, 2, 3, 1]))\nprint(max_Abs_Diff([5, 3, 2, 1, 9, 0]))\nprint(max_Abs_Diff([7, 5, 3, 1]))\nprint(max_Abs_Diff([1, 10, 100, 1000, 2, 1001]))\nprint(max_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9]))\n",
        "num_ids": 218
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 75
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # arr = [3, 4, 3, 1, -4, 1, 2]\n    # arr = [1, 5, 1, 9, 1]\n    # arr = [2, 3, 4, 6]\n    arr.sort()\n    max_diff = arr[-1] - arr[0]\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] > max_diff:\n            max_diff = arr[i+1] - arr[i]\n    return max_diff\n    \nif __name__ == \"__main__\":\n    arr = [3, 4, 3, 1, -4, 1, 2]\n    arr = [1, 5, 1, 9, 1]\n    arr = [2, 3, 4, 6]\n    arr = [20, 40, 2, 30, 10]\n    print(max_Abs_Diff(arr)",
        "num_ids": 217
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    max_element = arr[0]\n    min_element = arr[0]\n    for i in range(0,len(arr)):\n        if arr[i] > max_element:\n            max_element = arr[i]\n        if arr[i] < min_element:\n            min_element = arr[i]\n",
        "num_ids": 87
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    min_diff = None\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if min_diff is None or abs(arr[i]-arr[j]) < min_diff:\n                min_diff = abs(arr[i]-arr[j])\n    return min_diff\n",
        "num_ids": 84
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(max(arr) - min(arr), max(arr) - min(arr)[::-1].decode('utf-8'))\n",
        "num_ids": 37
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            abs_diff = abs(arr[i] - arr[j])\n            if max_abs_diff < abs_diff:\n                max_abs_diff = abs_diff\n    return max_abs_diff\n",
        "num_ids": 88
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    arr.sort() \n    return max(arr[n-1] - arr[0], arr[n-2] - arr[1]) \n",
        "num_ids": 45
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Approach:\n    #   Use Euclid's formula to find the gcd(a,b)\n    #   Using this gcd to divide a by it and b by it\n    #   Multiply a by m and b by m to get m*a and m*b\n    #   Then m*a + b*m == n\n    #   Replace a by m*a and b by m*b to make a and b smaller than m\n    #   Then iterate from m + 1 to n/gcd(a,b)\n    #   If the solution is found we return m and m*a + b*m\n    #   Else we keep increasing m by 1 and iterate.\n    # NOTE:\n    #   Since there is an order to the group of integers mod n, there will be one solution\n    #   To find the actual solution, we can simply replace a by -a and b by -b.\n    #   We can also replace a by -a and b by -b, since it's equivalent to x = n - x for our equation\n    #   In this case, we can also replace x by n - x to get the required solution\n    gcd = find_gcd(a,b)\n    if gcd == 1:\n        return (1,0)\n    else:\n        for m in range(n//gcd, -1, -1):\n            if (n*m - a*m*gcd + b*m*gcd) % gcd == 0:\n                return (m, m*a + b*m)\n    return None\n",
        "num_ids": 363
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        for y in range(1, n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n",
        "num_ids": 49
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # # brute force\n    # for i in range(n):\n    #     for j in range(n):\n    #         if a*i + b*j == n:\n    #             return (i, j)\n    # return None\n",
        "num_ids": 61
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    a %= n\n    b %= n\n    if a == 0 and b == 0:\n        return (0, 0)\n    if b == 0:\n        return None\n    return (n // b, n // a)\n",
        "num_ids": 56
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    # Write your code here\n    if(a == 0 and b == 0 and n!= 0):\n        return None\n    elif(a == 0 and b!= 0 and n!= 0):\n        return None\n    elif(a!= 0 and b == 0 and n!= 0):\n        return None\n    elif(n % a == 0):\n        x = n // a\n        y = 0\n    else:\n        x = n // a\n        y = b * x + (n % a)\n    return (x, y)\n",
        "num_ids": 141
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % a == 0 and n % b == 0:\n        return (n // a, n // b)\n    else:\n        return None\n",
        "num_ids": 37
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #Find Solution\n    for x in range(1,n):\n        for y in range(1,n):\n            if (a*x + b*y == n):\n                return (x,y)\n    return None\n",
        "num_ids": 55
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Your code here\n    for x in range(0,n):\n        for y in range(0,n):\n            if a*x + b*y == n:\n                return (x,y)\n",
        "num_ids": 51
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if (a * n + b) % n == 0:\n        x = (n * n - b * (n + b)) / (a * (n + b))\n        y = n * n / (a * (n + b))\n        return x, y\n    else:\n        return None\n",
        "num_ids": 72
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if (x * a + y * b) == n:\n                return (x, y)\n    return None\n",
        "num_ids": 47
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        while element in list1:\n            list1.remove(element)\n    print(list1)\n",
        "num_ids": 34
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_diff = []\n    for i in list1:\n        if i not in list2:\n            list_diff.append(i)\n    return list_diff\n",
        "num_ids": 42
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    print('Function is called')\n    list1_index = []\n    for item in list1:\n        if item not in list2:\n            list1_index.append(item)\n    return list1_index\n",
        "num_ids": 53
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1) > len(list2):\n        for i in list2:\n            if i in list1:\n                list1.remove(i)\n    else:\n        for i in list1:\n            if i in list2:\n                list2.remove(i)\n    return list1, list2\n",
        "num_ids": 78
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n",
        "num_ids": 27
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    while list2:\n        list1.remove(list2.pop())\n    return list1\n",
        "num_ids": 25
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n",
        "num_ids": 39
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return n\n    else:\n        return sum_series(n-2) + n\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        sum_series = n\n        for x in range(1, n//2+1):\n            sum_series = sum_series + n - 2*x\n        return sum_series\n",
        "num_ids": 60
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        raise ValueError\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n",
        "num_ids": 55
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n-2)\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # return sum([sum_series(n - 2*i) for i in range(n // 2)])\n    # return sum([sum_series(n - 2*i) for i in range(n // 2)])\n    # return sum([sum_series(n - 2*i) for i in range(n // 2)])\n    # return sum([sum_series(n - 2*i) for i in range(n // 2)])\n    # return sum([sum_series(n - 2*i) for i in range(n // 2)])\n    # return sum([sum_series(n - 2*i) for i in range(n // 2)])\n    return sum([sum_series(n - 2*i) for i in range(n // 2)])\n",
        "num_ids": 183
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return \"No solution\"\n    if n == 0:\n        return 0\n    return n + sum_series(n-2)\n",
        "num_ids": 40
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n + sum_series(n-2))\n",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n",
        "num_ids": 30
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return ((s * l) / (4 * tan(pi / l)))\n",
        "num_ids": 20
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s ** 2 / tan(pi/s)\n",
        "num_ids": 21
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2)/(4*tan(pi/l))\n",
        "num_ids": 19
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    sides = l\n    a = s ** 2 / (4 * tan(pi / sides))\n    return a\n",
        "num_ids": 29
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l/2*tan(pi/s)\n",
        "num_ids": 17
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2)/(4*tan(pi/l))\n",
        "num_ids": 19
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if len(s) < 3:\n        print(\"Number of sides must be at least 3\")\n        return\n    # Calculate the area\n    area = 0\n    sides = l / 2 * (s[0] + s[1] + s[2]) / 2\n    area = (s[0] * s[1] * s[2] / (2 * sides)) ** 0.5\n    return area\n",
        "num_ids": 99
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = s\n    if n < 3:\n        return -1\n    else:\n        return (n*l**2)/(4*tan(pi/n))\n",
        "num_ids": 42
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2)*(3*tan(pi/l) + 1)/(3*tan(pi/l))\n",
        "num_ids": 31
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    import math\n    return math.pow((s * l), 2) / (4 * math.tan(math.pi / l))\n",
        "num_ids": 34
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return sum([i for i in range(1, n) if n%i==0])\n",
        "num_ids": 24
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                divisors.append(i)\n            else:\n                divisors.append(i)\n                divisors.append(n//i)\n    return sum(divisors)\n",
        "num_ids": 93
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for x in range(1,n):\n        if n % x == 0:\n            divisors.append(x)\n    return sum(divisors) == n\n",
        "num_ids": 50
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==1:\n        return False\n    else:\n        l=[]\n        for i in range(1,n):\n            if n%i==0:\n                l.append(i)\n        \n        s1=0\n        for i in l:\n            s1+=i\n        s2=0\n        for i in l:\n            s2+=i\n            if s1==s2:\n                return True\n        return False\n",
        "num_ids": 107
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = set()\n    def div_list(n):\n        for i in range(1, math.ceil(n / 2)):\n            if n % i == 0:\n                s.add(i)\n        return s\n    div_list(n)\n    div_list(n + 1)\n    return sum(s) == sum(div_list(n)) and sum(s) == sum(div_list(n + 1))\n",
        "num_ids": 107
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum\n",
        "num_ids": 44
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = 0 \n    for i in range(1,n): \n        if n%i == 0: \n            sum_of_divisors += i \n    return sum_of_divisors\n",
        "num_ids": 58
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    def sum_div(n):\n        result = 0\n        for i in range(1, n+1):\n            if n%i == 0:\n                result+= i\n        return result\n",
        "num_ids": 49
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    sum = 0\n    for x in range(1,n):\n        if n % x == 0:\n            divs.append(x)\n    for x in divs:\n        sum += x\n    if sum == n:\n        return True\n    return False\n",
        "num_ids": 70
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_div1=0\n    sum_div2=0\n    for i in range(1, n): \n        if n % i == 0: \n            sum_div1 += i \n    for i in range(1, int(n**(1/2))): \n        if n % i == 0: \n            sum_div2 += i \n    if sum_div1 == sum_div2: \n        return(True)\n    else: \n        return(False)\ndef lattice_points(x, y):\n    '''\n    Finds the number of points on the Cartesian plane that lie on the circle with radius x+y, for which x,y are integers.\n    '''\n    l=0\n    for i in range(0, x+1):\n        for j in range(0, y+1):\n            if ((i**2)+(j**2))<(x+y)**2:\n                l=l+1\n    return(l)\ndef euler_totient(n): \n    '''\n    Returns the number of positive integers up to and including n which are relatively prime to n.\n    '''\n    l=[]\n    for i in range(1, n+1): \n        if math.gcd(n, i)==1: \n            l.append(i)\n    return(len(l))\ndef is_abundant(n): \n    '''\n    Returns True if n is an abundant number, otherwise it returns False.\n    '''\n    if n<1:\n        return(False)\n    for i in range(1, int(n**(1/2)+1)): \n        if n%i == 0: \n            if i**2==n:\n                return(False)\n            else: \n                return(True)\ndef is_prime(n): \n    '''\n    Returns True if n is a prime number, otherwise it returns False.\n    '''\n    if n<2:\n        return(False)\n    for i in range(2, int(n**(1/2))+1): \n        if n%i == 0:\n            return(False)\n    return(True)\ndef phi(n): \n    '''\n    Returns the number of positive integers up to and including n which are relatively prime to n.\n    '''\n    l=0\n    for i in range(1, n+1): \n        if math.gcd(n, i)==1: \n            l=l+1\n    return(l)\ndef euler_phi(n): \n    '''\n    Returns the number of positive integers up to and including n which are relatively prime to n.\n    '''\n    l=0\n    for i in range(1, n+1): \n        if math.gcd(n, i)==1: \n            l=l+1\n    return(l)\ndef euler_phi_rec(n): \n    '''\n    Returns the number of positive integers up to and including n which are relatively prime to n.\n    '''\n    l=0\n    for i in range(1, n+1): \n        if math.gcd(n, i)==1: \n            l=l+1\n            for j in range(i, n+1):\n                if math.gcd(n, j)==1: \n                    l=l-1\n    return(l)\ndef euler_phi_function(n): \n    '''\n    Returns the number of positive integers up to and including n which are relatively prime to n.\n    '''\n    l=0\n    for i in range(1, n+1): \n        if math.gcd(n, i)==1: \n            l=l+1\n    return(l)\ndef euler_solution(n): \n    '''\n    Returns the total number of solutions to the equation a^2+b^2=c^2, for integers a,b,c with a<b<c and gcd(a,b,c)=1.\n    '''\n    l=0\n    for a in range(1, n): \n        for b in range(a, n): \n            for c in range(b, n): \n                if (a<b) and (b<c) and (math.gcd(a, b, c)==1): \n                    l=l+1\n    return(l)\ndef fermat_prime_test(n): \n    '''\n    Returns True if n is prime, otherwise it returns False.\n    '''\n    if n<1:\n        return(False)\n    for i in range(1, int(math.sqrt(n))+1): \n        if n%i==0:\n            return(False)\n    else: \n        return(True)\ndef fermat_prime_test_rec(n, a=1): \n    '''\n    Returns True if n is prime, otherwise it returns False.\n    '''\n    if n<1:\n        return(False)\n    elif a==1:\n        return(True)\n    else:\n        for i in range(1, int(math.sqrt(n))+1): \n            if n%i==0:\n                return(False)\n        else: \n            return(True)\ndef fermat_primality_test(n): \n    '''\n    Returns True if n is prime, otherwise it returns False.\n    '''\n    if n<1:\n        return(False)\n    for i in range(1, int(math.sqrt(n))+1): \n        if n%i==0:\n            return(False)\n    else: \n        return(True)\ndef sieve_of_eratosthenes(n): \n    '''\n    Returns a list of all prime numbers up to and including n, using the sieve of Eratosthenes.\n    '''\n    if n<2:\n        return([])\n    l=list(range(2, n+1))\n    l_prime=[]\n    for i in l: \n        for j in l: \n            if j%i==0: \n                try: \n                    l.remove(j)\n                except: \n                    continue\n    return(l)\ndef sieve_of_eratosthenes_rec(n): \n    '''\n    Returns a list of all prime numbers up to and including n, using the sieve of Eratosthenes.\n    '''\n    l=list(range(2, n+1))\n    for i in l: \n        for j in l: \n            if j%i==0: \n                try: \n                    l.remove(j)\n                except: \n                    continue\n    return(l)\ndef sieve_of_eratosthenes_function(n): \n    '''\n    Returns a list of all prime numbers up to and including n, using the sieve of Eratosthenes.\n    '''\n    l=list(range(2, n+1))\n    for i in l: \n        for j in l: \n            if j%i==0: \n                try: \n                    l.remove(j)\n                except: \n                    continue\n    return(l)\ndef sieve_of_eratosthenes_sums(n): \n    '''\n    Returns a list of all sums of prime numbers up to and including n, using the sieve of Eratosthenes.\n    '''\n    l=list(range(2, n+1))\n    l_prime=[]\n    l_sum=[]\n    for i in l: \n        for j in l: \n            if j%i==0: \n                try: \n                    l.remove(j)\n                except: \n                    continue\n    for i in l: \n        l_prime.append(i)\n    for i in range(0, len(l_prime)): \n        for j in range(0, len(l_prime)): \n            if i==j: \n                continue\n            l_sum.append(l_prime[i]+l_prime[j])\n    return(l_sum)\ndef sieve_of_eratosthenes_sums_rec(n): \n    '''\n    Returns a list of all sums of prime numbers up to and including n, using the sieve o",
        "num_ids": 23
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # str1 = 'BAD'\n    # str2 = 'bad'\n    d = {}\n    for i in str1.lower():\n        if i not in d:\n            d[i] = str1.lower().count(i)\n    return(d)\n",
        "num_ids": 66
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str1[i].lower() and ord('a')<= ord(str1[i].lower()) <= ord('z'):\n            count += 1\n    return count\n    \n    \ndef count_char_frequency(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at least once.\n    '''\n    str1 = str1.lower()\n    freq = [0]*26\n    for i in range(len(str1)):\n        freq[ord(str1[i]) - ord('a')] += 1\n    return freq\n",
        "num_ids": 60
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    for i in range(len(str1)):\n        if(str1[i].lower()==chr(97+i)):\n            count+=1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1.lower():\n        if ord(i) in range(97, 123): # We are using 'in' here for ranges, not for membership\n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str(i+1):\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'H': 8, 'I': 9, 'J': 10, 'K': 11, 'L': 12, 'M': 13, 'N': 14, 'O': 15, 'P': 16, 'Q': 17, 'R': 18, 'S': 19, 'T': 20, 'U': 21, 'V': 22, 'W': 23, 'X': 24, 'Y': 25, 'Z': 26}\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if str1[i].lower() == str1[i]:\n                if str1[i] == str1[i].lower():\n                    count += alphabet.get(str1[i])\n    return count\n",
        "num_ids": 216
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([c for c in str1.lower() if c.isalpha()])\n",
        "num_ids": 23
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    num = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in 'abcdefghijklmnopqrstuvwxyz':\n            num += 1\n    return num\n",
        "num_ids": 56
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in \"abcdefghijklmnopqrstuvwxyz\":\n            count += 1\n    return count\nprint(count_char_position(\"Hello\"))\nprint(count_char_position(\"CaCk\"))\nprint(count_char_position(\"Cak\"))\nprint(count_char_position(\"{[]}\"))\nprint(count_char_position(\"eEe\"))\nprint(count_char_position(\"{[[[]}]]\"))\n",
        "num_ids": 133
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    nums = set()\n    for num in A:\n        if (num in nums) or (num ^ (num + 1) in nums):\n            return True\n        nums.add(num)\n    return False\n    \n",
        "num_ids": 57
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    # find all possible pairs\n    all_pairs = []\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            all_pairs.append((A[i], A[j]))\n    \n    # count all pairs that xor to even number\n    count = 0\n    for pair in all_pairs:\n        if xor(pair[0], pair[1]) % 2 == 0:\n            count += 1\n    \n    return count\n    \ndef xor(x, y):\n    return x ^ y\n    \ndef find_even_pair_hash(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    # find all possible pairs\n    all_pairs = {}\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            all_pairs[(A[i], A[j])] = xor(A[i], A[j])\n    \n    # count all pairs that xor to even number\n    count = 0\n    for pair in all_pairs.keys():\n        if all_pairs[pair] % 2 == 0:\n            count += 1\n    \n    return count\n",
        "num_ids": 133
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # create an empty dictionary\n    dict = {}\n    # iterate through the list\n    for i in range(0, len(A)):\n        # check to see if xor of a and i is even, if it is, increment the count\n        if A[i] ^ i in dict:\n            dict[A[i] ^ i] += 1\n        # otherwise, initialize the count for this key to 1\n        else:\n            dict[A[i] ^ i] = 1\n    # initialize counter to 0\n    count = 0\n    # iterate through dictionary\n    for key, value in dict.items():\n        # if the value is even, increment counter\n        if value % 2 == 0:\n            count += 1\n    # return counter\n    return count\n",
        "num_ids": 178
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odd_count = 0\n    even_count = 0\n    for i in A:\n        if (i % 2 == 0):\n            even_count += 1\n        else:\n            odd_count += 1\n    return (odd_count * even_count)\n",
        "num_ids": 63
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    def find_even_pair_helper(A, i, odd_num_count):\n        if i == len(A):\n            return odd_num_count // 2\n        elif A[i] % 2 == 0:\n            return find_even_pair_helper(A, i+1, odd_num_count)\n        else:\n            return find_even_pair_helper(A, i+1, odd_num_count + 1)\n",
        "num_ids": 110
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n    return count\n",
        "num_ids": 76
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    if len(A) < 2:\n        return 0\n        \n    B = []\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                if not B:\n                    B.append([A[i],A[j]])\n                else:\n                    for k in range(len(B)):\n                        if A[i] ^ A[j] in B[k]:\n                            return len(B[k])\n                            break\n                        else:\n                            B.append([A[i],A[j]])\n    return len(B)\n    \n    \ndef find_even_pair_v2(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    if len(A) < 2:\n        return 0\n        \n    B = {}\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                if A[i] in B:\n                    B[A[i]].append(A[j])\n                else:\n                    B[A[i]] = [A[j]]\n                if A[j] in B:\n                    B[A[j]].append(A[i])\n                else:\n                    B[A[j]] = [A[i]]\n    \n    for key,value in B.items():\n        if len(value) > 1:\n            return len(value)\n    return 0\n            \ndef find_even_pair_v3(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    if len(A) < 2:\n        return 0\n        \n    B = {}\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                if A[i] in B:\n                    B[A[i]].append(A[j])\n                else:\n                    B[A[i]] = [A[j]]\n                if A[j] in B:\n                    B[A[j]].append(A[i])\n                else:\n                    B[A[j]] = [A[i]]\n    \n    for key,value in B.items():\n        if len(value) > 1:\n            return len(value)\n    return 0\n",
        "num_ids": 190
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) <= 1:\n        return 0\n    else:\n        xor_even_count = 0\n        for i in range(0,len(A)):\n            for j in range(i+1,len(A)):\n                if (A[i] ^ A[j]) % 2 == 0:\n                    xor_even_count += 1\n        return xor_even_count\n",
        "num_ids": 97
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j:\n                if A[i] ^ A[j] % 2 == 0:\n                    xor_count += 1\n",
        "num_ids": 67
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    B = list(filter(lambda x: (x % 2 == 0), A))\n    return sum([1 for i in range(len(B)-1) for j in range(i+1, len(B)) if (B[i] ^ B[j] == 0)])\n",
        "num_ids": 67
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Base case \n    if (n and not(n & (n - 1))): \n        return n \n    \n    # Recursive case \n    return next_power_of_2(n - 1) \n",
        "num_ids": 55
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 0:\n        n = -n\n    return 1 if n == 0 else 2 ** int(math.ceil(math.log2(n)))\n",
        "num_ids": 40
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i = i * 2\n    return i\n",
        "num_ids": 25
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if not n:\n        return 1\n    else:\n        return 2**((n - 1).bit_length())\n",
        "num_ids": 30
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2**(n-1).bit_length()\n",
        "num_ids": 22
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 0:\n        return 1\n    if n == 0:\n        return 0\n    return 1 << (n - 1).bit_length()\n    \nclass Matrix:\n    '''\n    This class is used to represent a matrix. \n    '''\n    def __init__(self, row, col, data):\n        self.row = row\n        self.col = col\n        self.data = data\n        self.value = None\n        \n    def __str__(self):\n        return f\"{self.row}x{self.col}\"\n        \n    def __mul__(self, other):\n        '''\n        This function is used to multiply two matrices. \n        '''\n        if isinstance(other, Matrix):\n            if self.col == other.row:\n                # The result is a matrix\n                result = Matrix(self.row, other.col, [])\n                # Compute each element of the result\n                for r in range(result.row):\n                    for c in range(result.col):\n                        for i in range(self.col):\n                            result.value[r][c] += self.value[r][i] * other.value[i][c]\n                return result\n            else:\n                # The result is a scalar\n                return self.value * other.value\n        else:\n            # The result is a scalar\n            return self.value * other\n        \n    def __add__(self, other):\n        '''\n        This function is used to add two matrices. \n        '''\n        if isinstance(other, Matrix):\n            if self.col == other.col:\n                # The result is a matrix\n                result = Matrix(self.row, other.col, [])\n                # Compute each element of the result\n                for r in range(result.row):\n                    for c in range(result.col):\n                        result.value[r][c] = self.value[r][c] + other.value[r][c]\n                return result\n            else:\n                # The result is a scalar\n                return self.value + other.value\n        else:\n            # The result is a scalar\n            return self.value + other\n        \n    def __sub__(self, other):\n        '''\n        This function is used to subtract two matrices. \n        '''\n        if isinstance(other, Matrix):\n            if self.col == other.col:\n                # The result is a matrix\n                result = Matrix(self.row, other.col, [])\n                # Compute each element of the result\n                for r in range(result.row):\n                    for c in range(result.col):\n                        result.value[r][c] = self.value[r][c] - other.value[r][c]\n                return result\n            else:\n                # The result is a scalar\n                return self.value - other.value\n        else:\n            # The result is a scalar\n            return self.value - other\n        \n    def __len__(self):\n        '''\n        This function is used to return the matrix's number of rows. \n        '''\n        return self.row\n        \n    def transpose(self):\n        '''\n        This function is used to find the transpose of a matrix. \n        '''\n        result = Matrix(self.col, self.row, [])\n        # Compute each element of the result\n        for r in range(result.row):\n            for c in range(result.col):\n                result.value[c][r] = self.value[r][c]\n        return result\n    \n    def copy(self):\n        '''\n        This function is used to copy a matrix. \n        '''\n        result = Matrix(self.row, self.col, [])\n        # Compute each element of the result\n        for r in range(result.row):\n            for c in range(result.col):\n                result.value[r][c] = self.value[r][c]\n        return result\n        \n    def lu_decomposition(self):\n        '''\n        This function is used to find the LU decomposition of a matrix. \n        '''\n        # Copy the input matrix\n        LU = self.copy()\n        # Decompose the matrix using the Gaussian elimination method\n        for r in range(LU.row - 1):\n            # Find the row of the pivot\n            pivot_row = LU.value[r].index(max(LU.value[r]))\n            # Exchange the rows\n            LU.value[r], LU.value[pivot_row] = LU.value[pivot_row], LU.value[r]\n            # Compute the multipliers\n            for c in range(r + 1, LU.row):\n                # Compute the multiplier\n                multiplier = LU.value[c][r] / LU.value[r][r]\n                # Update the multipliers in the matrix\n                for i in range(LU.row):\n                    LU.value[c][i] -= LU.value[r][i] * multiplier\n        # Compute the multipliers\n        for r in range(LU.row - 1):\n            # Find the row of the pivot\n            pivot_row = LU.value[r].index(max(LU.value[r]))\n            # Exchange the rows\n            LU.value[r], LU.value[pivot_row] = LU.value[pivot_row], LU.value[r]\n            # Compute the multipliers\n            for c in range(r + 1, LU.row):\n                # Compute the multiplier\n                multiplier = LU.value[c][r] / LU.value[r][r]\n                # Update the multipliers in the matrix\n                for i in range(LU.row):\n                    LU.value[c][i] -= LU.value[r][i] * multiplier\n        return LU\n    \n    def lu_solve(self, solution):\n        '''\n        This function is used to solve the matrix equation LUx = b using the LU decomposition. \n        '''\n        # Find the LU decomposition\n        LU = self.lu_decomposition()\n        # Decompose the matrix using the forward substitution method\n        for r in range(LU.row - 1):\n            for c in range(r + 1, LU.row):\n                # Compute the multiplier\n                multiplier = LU.value[c][r] / LU.value[r][r]\n                # Update the multipliers in the matrix\n                for i in range(LU.row):\n                    LU.value[c][i] -= LU.value[r][i] * multiplier\n            # Compute the multiplier\n            multiplier = LU.value[r][r] / LU.value[r][r]\n            # Update the multipliers in the matrix\n            for i in range(LU.row):\n                LU.value[r][i] /= multiplier\n            # Solve the matrix equation\n            solution.value[r] = [0] * solution.col\n            for i in range(solution.row):\n                solution.value[r] += LU.value[r][i] * solution.value[i]\n            solution.value[r] /= LU.value[r][r]\n        # Decompose the matrix using the backward substitution method\n        for r in range(LU.row - 1):\n            for c in range(r + 1, LU.row):\n                # Compute the multiplier\n                multiplier = LU.value[r][c] / LU.value[r][r]\n                # Update the multipliers in the matrix\n                for i in range(LU.row):\n                    LU.value[r][i] -= LU.value[c][i] * multiplier\n            # Compute the multiplier\n            multiplier = LU.value[r][r] / LU.value[r][r]\n            # Update the multipliers in the matrix\n            for i in range(LU.row):\n                LU.value[r][i] /= multiplier\n            # Solve the matrix equation\n            solution.value[r] = [0] * solution.col\n            for i in range(solution.row):\n                solution.value[r] += LU.value[r][i] * solution.value[i]\n            solution.value[r] /= LU.value[r][r]\n        return solution\n        \n    def inverse(self):\n        '''\n        This function is used to find the inverse of a matrix. \n        '''\n        # Find the L",
        "num_ids": 7
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n>=0:\n        return (1 << (n - 1).bit_length())\n    else:\n        print(\"Error: input must be positive!\")\n",
        "num_ids": 41
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 0\n    while(1):\n        if n >= 2**power:\n            power += 1\n        else:\n            return power\n",
        "num_ids": 35
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1: return 2\n    if n == 2: return 4\n    p = 2\n    while p < n:\n        p *= 2\n    return p\n",
        "num_ids": 42
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** (n - 1).bit_length()\n",
        "num_ids": 16
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #count = 0\n    #for i in range(len(a)):\n    #    if x == a[i]:\n    #        count += 1\n    #return count\n",
        "num_ids": 44
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    cnt = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            cnt += 1\n    return cnt\n",
        "num_ids": 43
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    ctr=0\n    for i in range(0,len(a)):\n        if x==a[i]:\n            ctr+=1\n    return ctr\n",
        "num_ids": 40
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # a = [1,2,3,4,5,6,7,8,9,10]\n    # x = 10\n    \n    count = 0\n    for i in a:\n        if x == i:\n            count += 1\n            \n    print(count)\n",
        "num_ids": 68
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count = count + 1\n    return count \n    \ndef list_filter(a,b):\n    '''\n    Write a function that takes two lists and returns True if they have at least one common member.\n    '''\n    if len(a) == len(b) or len(a) < len(b):\n        return False\n    else:\n        for i in a:\n            if i in b:\n                return True\n            else:\n                pass\n        return False\n",
        "num_ids": 61
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x not in a:\n        return 0\n    else:\n        return a.count(x)\n",
        "num_ids": 27
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n    \na=[1,2,3,4,5,6,7,8,9,1,1,1,1,1,1,1,1,1,1,1,1,1]\nx=int(input('Enter the number you want to check the frequency: '))\nprint('The frequency of {} is {}'.format(x,frequency(a,x)))\n",
        "num_ids": 99
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Test cases\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # m = 0\n    # n = 4\n",
        "num_ids": 44
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0                                                                                                                                                                                                                        \n    for i in list1:\n        if m <= list1.index(i) <= n:\n            total += i\n    return total\n",
        "num_ids": 46
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # print(list1[m:n])\n    return sum(list1[m:n])\n",
        "num_ids": 26
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m >= n:                                                                                                                                                                                                \n        return 0\n    else:\n        return list1[m] + sum_range_list(list1, m+1, n)\n",
        "num_ids": 48
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:                                                                                                                                                                                                                        \n        m, n = n, m\n    return sum([list1[i] for i in range(m,n+1)])\n",
        "num_ids": 47
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m-1, n):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == None:\n        m = 0\n    if n == None:\n        n = len(list1)\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 59
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print(\"Sum of all elements in a list within a range specified by two indices: \")\n    print(list1)\n    list2 = []\n    for i in range(len(list1)):\n        if m<= i <= n:\n            list2.append(list1[i])\n            print(list1[i])\n    return sum(list2)\n",
        "num_ids": 88
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "num_ids": 16
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter=0\n    for i in range(5):\n        perimeter+=a[i]\n    return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    area=0\n    sum=0\n    for i in range(5):\n        sum+=a[i]**2\n    area=sum*5/2\n    return area\ndef distance_a_p(a,b):\n    '''\n    Write a function to calculate the distance between two points on a plane.\n    '''\n    return math.sqrt((a[0]-b[0])**2 + (a[1]-b[1])**2)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter=0\n    for i in range(7):\n        perimeter+=a[i]\n    return perimeter\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    area=0\n    sum=0\n    for i in range(7):\n        sum+=a[i]**2\n    area=sum*7/2\n    return area\ndef distance_a_q(a,b):\n    '''\n    Write a function to calculate the distance between two points on a plane.\n    '''\n    return math.sqrt((a[0]-b[0])**2 + (a[1]-b[1])**2)\ndef is_pentagon_in_triangle(a,b,c,d,e):\n    '''\n    Write a function to check if a pentagon is inside a triangle, taking 5 points that lie on the perimeter of the pentagon.\n    '''\n    a=distance_a_p(a,b)\n    b=distance_a_p(b,c)\n    c=distance_a_p(c,d)\n    d=distance_a_p(d,e)\n    e=distance_a_p(e,a)\n    perimeter=a+b+c+d+e\n    if perimeter<=2*max(a,b,c,d,e):\n        return True\n    else:\n        return False\ndef is_pentagon_in_rectangle(a,b,c,d):\n    '''\n    Write a function to check if a pentagon is inside a rectangle, taking 5 points that lie on the perimeter of the pentagon.\n    '''\n    if is_pentagon_in_triangle(a,b,c,d,e):\n        return True\n    elif is_pentagon_in_triangle(a,b,c,d,f):\n        return True\n    elif is_pentagon_in_triangle(a,c,d,e,f):\n        return True\n    elif is_pentagon_in_triangle(a,d,e,f,g):\n        return True\n    else:\n        return False\ndef is_pentagon_in_square(a,b,c,d):\n    '''\n    Write a function to check if a pentagon is inside a square, taking 5 points that lie on the perimeter of the pentagon.\n    '''\n    if is_pentagon_in_rectangle(a,b,c,d):\n        return True\n    elif is_pentagon_in_rectangle(a,b,d,e):\n        return True\n    elif is_pentagon_in_rectangle(a,d,e,f):\n        return True\n    elif is_pentagon_in_rectangle(b,c,e,f):\n        return True\n    else:\n        return False\ndef is_pentagon_in_circle(a,b,c,d,e):\n    '''\n    Write a function to check if a pentagon is inside a circle, taking 5 points that lie on the perimeter of the pentagon.\n    '''\n    if distance_a_p(a,b)<distance_a_p(a,e):\n        if distance_a_p(a,b)**2<distance_a_p(a,e)**2:\n            return True\n    if distance_a_p(c,d)<distance_a_p(c,e):\n        if distance_a_p(c,d)**2<distance_a_p(c,e)**2:\n            return True\n    if distance_a_p(b,c)<distance_a_p(b,e):\n        if distance_a_p(b,c)**2<distance_a_p(b,e)**2:\n            return True\n    if distance_a_p(a,d)<distance_a_p(a,e):\n        if distance_a_p(a,d)**2<distance_a_p(a,e)**2:\n            return True\n    if distance_a_p(e,b)<distance_a_p(e,c):\n        if distance_a_p(e,b)**2<distance_a_p(e,c)**2:\n            return True\n    if distance_a_p(e,a)<distance_a_p(e,d):\n        if distance_a_p(e,a)**2<distance_a_p(e,d)**2:\n            return True\n    if distance_a_p(a,d)<distance_a_p(a,b):\n        if distance_a_p(a,d)**2<distance_a_p(a,b)**2:\n            return True\n    if distance_a_p(a,e)<distance_a_p(a,c):\n        if distance_a_p(a,e)**2<distance_a_p(a,c)**2:\n            return True\n    if distance_a_p(b,e)<distance_a_p(b,c):\n        if distance_a_p(b,e)**2<distance_a_p(b,c)**2:\n            return True\n    if distance_a_p(c,d)<distance_a_p(c,e):\n        if distance_a_p(c,d)**2<distance_a_p(c,e)**2:\n            return True\n    if distance_a_p(b,d)<distance_a_p(b,c):\n        if distance_a_p(b,d)**2<distance_a_p(b,c)**2:\n            return True\n    else:\n        return False\ndef is_pentagon_in_rhombus(a,b,c,d):\n    '''\n    Write a function to check if a pentagon is inside a rhombus, taking 5 points that lie on the perimeter of the pentagon.\n    '''\n    if is_pentagon_in_triangle(a,b,c,d,e):\n        return True\n    elif is_pentagon_in_triangle(a,b,d,e,f):\n        return True\n    elif is_pentagon_in_triangle(a,c,d,e,f):\n        return True\n    elif is_pentagon_in_triangle(b,c,e,f,g):\n        return True\n    else:\n        return False\ndef is_pentagon_in_kite(a,b,c,d):\n    '''\n    Write a function to check if a pentagon is inside a kite, taking 5 points that lie on the perimeter of the pentagon.\n    '''\n    if is_pentagon_in_rhombus(a,b,c,d):\n        return True\n    elif is_pentagon_in_rhombus(a,c,d,e):\n        return True\n    elif is_pentagon_in_rhombus(b,c,e,f):\n        return True\n    elif is_pentagon_in_rhombus(a,b,e,f):\n        return True\n    else:\n        return False\ndef is_pentagon_in_trapezoid(a,b,c,d,e):\n    '''\n    Write a function to check if a pentagon is inside a trapezoid, taking 5 points that lie on the perimeter of the pentago",
        "num_ids": 31
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\ndef area_triangle(a,b):\n    '''\n    Write a function to find the area of a triangle from its base and height.\n    '''\n    area = 0.5 * b * a\n    return area\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a triangle from its sides.\n    '''\n    perimeter = 3 * a\n    return perimeter\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle from its radius.\n    '''\n    area = math.pi * r ** 2\n    return area\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle from its radius.\n    '''\n    perimeter = 2 * math.pi * r\n    return perimeter\ndef area_square(a):\n    '''\n    Write a function to find the area of a square from its side.\n    '''\n    area = a ** 2\n    return area\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from its side.\n    '''\n    perimeter = 4 * a\n    return perimeter\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle from its base and height.\n    '''\n    area = a * b\n    return area\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle from its base and height.\n    '''\n    perimeter = 2 * (a + b)\n    return perimeter\ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram from its base and height.\n    '''\n    area = a * b\n    return area\ndef perimeter_parallelogram(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram from its sides.\n    '''\n    perimeter = 2 * (a + b)\n    return perimeter\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to find the area of a trapezium from its base, top and height.\n    '''\n    area = 0.5 * (a + b) * h\n    return area\ndef perimeter_trapezium(a,b,h):\n    '''\n    Write a function to find the perimeter of a trapezium from its sides.\n    '''\n    perimeter = a + b + h\n    return perimeter\ndef area_ellipse(a,b):\n    '''\n    Write a function to find the area of an ellipse from its major and minor axes.\n    '''\n    area = math.pi * a * b\n    return area\ndef perimeter_ellipse(a,b):\n    '''\n    Write a function to find the perimeter of an ellipse from its major and minor axes.\n    '''\n    perimeter = 2 * math.pi * (a + b)\n    return perimeter\ndef area_cube(a):\n    '''\n    Write a function to find the area of a cube from its side length.\n    '''\n    area = 6 * a ** 2\n    return area\ndef perimeter_cube(a):\n    '''\n    Write a function to find the perimeter of a cube from its side length.\n    '''\n    perimeter = 12 * a\n    return perimeter\ndef area_rectangle_prism(a,b,h):\n    '''\n    Write a function to find the surface area of a rectangular prism from its base, height, and side length.\n    '''\n    area = 2 * (a * b + a * h + b * h)\n    return area\ndef volume_rectangle_prism(a,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism from its base, height, and side length.\n    '''\n    volume = a * b * h\n    return volume\ndef area_pyramid(a,b,h):\n    '''\n    Write a function to find the surface area of a pyramid from its base, height, and side length.\n    '''\n    area = 0.5 * a * b * h\n    return area\ndef volume_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid from its base, height, and side length.\n    '''\n    volume = (1/3) * a * b * h\n    return volume\ndef area_triangle_simp(a,b):\n    '''\n    Write a function to find the surface area of a triangle from its base and height.\n    '''\n    area = 0.5 * b * a\n    return area\ndef volume_triangle_simp(a,b):\n    '''\n    Write a function to find the volume of a triangle from its base and height.\n    '''\n    volume = 1/3 * a * b\n    return volume\ndef area_cylinder(a,b):\n    '''\n    Write a function to find the surface area of a cylinder from its radius and height.\n    '''\n    area = math.pi * a ** 2 + 2 * math.pi * a * b\n    return area\ndef volume_cylinder(a,b):\n    '''\n    Write a function to find the volume of a cylinder from its radius and height.\n    '''\n    volume = math.pi * a ** 2 * b\n    return volume\ndef area_cone(a,b):\n    '''\n    Write a function to find the surface area of a cone from its radius and height.\n    '''\n    area = math.pi * a ** 2 + math.pi * a * b\n    return area\ndef volume_cone(a,b):\n    '''\n    Write a function to find the volume of a cone from its radius and height.\n    '''\n    volume = (1/3) * math.pi * a ** 2 * b\n    return volume\ndef area_disk(a):\n    '''\n    Write a function to find the surface area of a disk from its radius.\n    '''\n    area = 2 * math.pi * a ** 2\n    return area\ndef volume_disk(a):\n    '''\n    Write a function to find the volume of a disk from its radius.\n    '''\n    volume = (1/3) * math.pi * a ** 3\n    return volume\ndef area_sphere(a):\n    '''\n    Write a function to find the surface area of a sphere from its radius.\n    '''\n    area = 4 * math.pi * a ** 2\n    return area\ndef volume_sphere(a):\n    '''\n    Write a function to find the volume of a sphere from its radius.\n    '''\n    volume = (4/3) * math.pi * a ** 3\n    return volume\ndef area_rhombus(a,b):\n    '''\n    Write a function to find the surface area of a rhombus from its side length.\n    '''\n    area = (a ** 2 + b ** 2) ** 0.5\n    return area\ndef perimeter_rhombus(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus from its side length.\n    '''\n    perimeter = 4 * (a ** 2 + b ** 2) ** 0.5\n    return perimeter\ndef area_kite(a,b):\n    '''\n    Write a function to find the surface area of a kite from its side length.\n    '''\n    area = (a ** 2 + b ** 2) ** 0.5\n    return area\ndef volume_kite(a,b):\n    '''\n    Write a function to find the volume of a kite from its side length.\n    '''\n    volume = 1/3 * a ** 2 * b\n    return volume\ndef area_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid from its radii.\n    '''\n    area = 4 * math.pi * a * b * c\n    return area\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid from its radii.\n    '''\n    volume = (4/3) * math.pi * a * b * c\n    return volume\ndef area_ellipsoid(a",
        "num_ids": 34
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = (5 * a)\n    return p\n",
        "num_ids": 15
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #A pentagon is similar to a regular polygon with 5 sides. The formula for the perimeter of a pentagon is therefore:\n    #perimeter = n * s, where n is the number of sides (5) and s is the length of a side (sqrt(5) / 2).\n    #However, the formula only works for regular pentagons. What about pentagons with irregular sides?\n    #Well, we know that pentagons are regular polygons with 5 sides. We can calculate the length of each side, but this only works for equilateral pentagons.\n    #Furthermore, we know that pentagons are built up of triangles.\n    #However, we are only concerned with pentagons with regular sides, so we need to implement a formula that only works for equilateral pentagons.\n    #The formula for the perimeter of a regular pentagon with side lengths a, b, c, d, and e is therefore:\n    #perimeter = a + b + c + d + e.\n    #Write a function to find the perimeter of a pentagon with side lengths a, b, c, d, and e.\n    \n    # Get the perimeter for an equilateral pentagon with side length 1\n    # We need to find the distance between every point and the center.\n    # Each point is at the midpoint of the opposite sides.\n    # There are 5 points: A, B, C, D, E\n    # A is opposite B, B is opposite C, and so on.\n    # The length of each side is 1.\n    # The distance between points A and B is sqrt(5)/2\n    # The distance between points B and C is sqrt(5)/2\n    # The distance between points C and D is sqrt(5)/2\n    # The distance between points D and E is sqrt(5)/2\n    # Therefore, the distance between A and B is 1.25\n    # The distance between B and C is 1.25\n    # The distance between C and D is 1.25\n    # The distance between D and E is 1.25\n    # Therefore, the total perimeter is 5 * 1.25 = 2.5\n    def dist(x1, y1, x2, y2):\n        return math.sqrt((x2-x1)**2 + (y2-y1)**2)\n    #pentagon = 5\n    #pent_perimeter = pentagon * dist(0, 0, 1.25, 1.25)\n    pent_perimeter = 5 * dist(0, 0, 1.25, 1.25)\n    return pent_perimeter\n    \ndef right_triangle_area(s1, s2):\n    '''\n    Write a function to calculate the area of a right triangle from the length of its two sides.\n    '''\n    #A right triangle is made up of two right triangles.\n    #Each right triangle is made up of two right triangles.\n    #The area of the right triangle with side lengths a and b is:\n    #area = 1/2 * a * b\n    #The area of the first right triangle is:\n    #area_1 = 1/2 * a * b\n    #The area of the second right triangle is:\n    #area_2 = 1/2 * c * d\n    #Therefore, the total area of the two triangles is area_1 + area_2\n    #Write a function to calculate the area of a right triangle with side lengths a and b.\n    #The formula for the area of a right triangle with side lengths a and b is:\n    #area = 1/2 * a * b\n    #The area of a triangle with side lengths a and b is a * b / 2\n    #So the total area of a right triangle is a * b / 2\n    \n    #The area of the first right triangle is a * b / 2\n    #The area of the second right triangle is a * d / 2\n    #Therefore, the total area of the two triangles is a * b / 2 + a * d / 2\n    area = s1 * s2 / 2\n    return area\n    \ndef rt_perimeter(s1, s2):\n    '''\n    Write a function to calculate the perimeter of a right triangle from the length of its two sides.\n    '''\n    #A right triangle is made up of two right triangles.\n    #Each right triangle is made up of two right triangles.\n    #The perimeter of a right triangle with side lengths a and b is:\n    #perimeter = a + b + c\n    #The perimeter of the first right triangle is:\n    #perimeter_1 = a + b + c\n    #The perimeter of the second right triangle is:\n    #perimeter_2 = a + b + c\n    #Therefore, the total perimeter is perimeter_1 + perimeter_2\n    #Write a function to calculate the perimeter of a right triangle with side lengths a and b.\n    #The formula for the perimeter of a right triangle with side lengths a and b is:\n    #perimeter = a + b + c\n    #The perimeter of a right triangle with side lengths a and b is a + b + c\n    #So the total perimeter is a + b + c\n    perimeter = s1 + s2 + s2\n    return perimeter\n    \ndef circle_area(r):\n    '''\n    Write a function to calculate the area of a circle with radius r.\n    '''\n    #A circle is made up of many right triangles.\n    #Each right triangle is made up of two right triangles.\n    #The area of a right triangle with side lengths a and b is:\n    #area = 1/2 * a * b\n    #The area of a circle is:\n    #area_circle = pi * r * r\n    #The area of a circle with radius r is pi * r * r\n    #So the total area of the right triangles is pi * r * r / 2\n    #The total area of the circles is pi * r * r * n / 2\n    #where n is the number of circles\n    #Write a function to calculate the area of a circle with radius r.\n    #The formula for the area of a circle with radius r is pi * r * r\n    #So the total area of the circle is pi * r * r\n    \n    #The area of a circle with radius r is pi * r * r\n    area_circle = math.pi * r * r\n    return area_circle\n    \ndef regular_polygon_perimeter(sides, length):\n    '''\n    Write a function to calculate the perimeter of a regular polygon.\n    '''\n    #A polygon is made up of many right triangles.\n    #Each right triangle is made up of two right triangles.\n    #The perimeter of a right triangle with side lengths a and b is:\n    #perimeter = a + b + c\n    #The perimeter of a regular polygon is:\n    #perimeter_poly = n * s\n    #where n is the number of sides (n) and s is the length of a side (s = 1 / (2 * tan(180 / n)))\n    #Write a function to calculate the perimeter of a regular polygon.\n    #The formula for the perimeter of a regular polygon with n sides and side length s is:\n    #perimeter_poly = n * s\n    #The perimeter of a regular polygon with n sides and side length s is n * s\n    #So the total perimeter of the right triangles is n * s\n    #The total perimeter of a polygon with n sides and side length s is n * s\n    #The total perimeter of a polygon with n sides and side length s is n * s\n    \n    #The perimeter of a polygon with n sides and side length s is n * s\n    perimeter_poly = sides * length\n    return perimeter_poly\n    \ndef regular_polygon_area(sides, length):\n    '''\n    Write a function to calculate the area of a regular polygon.\n    '''\n    #A polygon is made up of many right triangles.\n    #Each right triangle is made up of two right triangles.\n    #The area of a right triangle with side lengths a and b is:\n    #area = 1/2 * a * b\n    #The area of a regular polygon is:\n    #area_poly = n * s * s / (4 * tan(180 / n))\n    #Write a function to calculate the area of a regular polygon.\n    #The formula for the area of a regular polygon with n sides and side length s is:\n    #area_poly = n * s * s / (4 * tan(180 / n))\n    #The area of a regular polygon with n sides and side length s is:\n    #n * s * s / (4 * tan(180 / n)",
        "num_ids": 189
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n    \ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (5 * a ** 2) / (4 * math.tan(math.pi / 5))\n    \ndef circumference_hexagon(a):\n    '''\n    Write a function to find the circumference of a regular hexagon from the length of its sides.\n    '''\n    return 6 * a\n    \ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return (3 * math.sqrt(3) / 2 * a ** 2)\n    \ndef circumference_heptagon(a):\n    '''\n    Write a function to find the circumference of a regular heptagon from the length of its sides.\n    '''\n    return 7 * a\n    \ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    return (7 * math.sqrt(35) / 4 * a ** 2)\n    \ndef circumference_octagon(a):\n    '''\n    Write a function to find the circumference of a regular octagon from the length of its sides.\n    '''\n    return 8 * a\n    \ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return (5 * math.sqrt(5) / 2 * a ** 2)\n    \ndef circumference_nonagon(a):\n    '''\n    Write a function to find the circumference of a regular nonagon from the length of its sides.\n    '''\n    return 9 * a\n    \ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return (7 * math.sqrt(121) / 6 * a ** 2)\n    \ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a regular decagon from the length of its sides.\n    '''\n    return 10 * a\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (5 * math.sqrt(17) / 4 * a ** 2)\n    \ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a regular decagon from the length of its sides.\n    '''\n    return 11 * a\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (7 * math.sqrt(341) / 8 * a ** 2)\n    \ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a regular decagon from the length of its sides.\n    '''\n    return 12 * a\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (5 * math.sqrt(937) / 6 * a ** 2)\n    \ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a regular decagon from the length of its sides.\n    '''\n    return 13 * a\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (7 * math.sqrt(981) / 8 * a ** 2)\n    \ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a regular decagon from the length of its sides.\n    '''\n    return 14 * a\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (5 * math.sqrt(1021) / 6 * a ** 2)\n    \ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a regular decagon from the length of its sides.\n    '''\n    return 15 * a\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (7 * math.sqrt(1089) / 8 * a ** 2)\n    \ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a regular decagon from the length of its sides.\n    '''\n    return 16 * a\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (5 * math.sqrt(1103) / 6 * a ** 2)\n    \ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a regular decagon from the length of its sides.\n    '''\n    return 17 * a\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (7 * math.sqrt(1133) / 8 * a ** 2)\n    \ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a regular decagon from the length of its sides.\n    '''\n    return 18 * a\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (5 * math.sqrt(1193) / 6 * a ** 2)\n    \ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a regular decagon from the length of its sides.\n    '''\n    return 19 * a\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (7 * math.sqrt(1233) / 8 * a ** 2)\n    \ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a regular decagon from the length of its sides.\n    '''\n    return 20 * a\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (5 * math.sqrt(1293) / 6 * a ** 2)\n    \ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a regular decagon from the length of its sides.\n    '''\n    return 21 * a\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (7 * math.sqrt(1333) / 8 * a ** 2)\n    \ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a regular decagon from the length of its sides.\n    '''\n    return 22 * a\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (5 * math.sqrt(1393) / 6 * a ** 2)\n    \ndef circumference_decagon(a):\n    '''\n    Write a function to find the circumference of a regular decagon from the length of its sides.\n    '''\n    return 23 * a\n    \ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    return (7 * math.sqrt(1433) / 8 * a ** 2)\n    \ndef circumference_decagon(a):\n    '",
        "num_ids": 36
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return 0.25*a**2\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6*a\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return 0.5*a**2\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 7*a\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    return 0.5*a**2\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8*a\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return 0.5*a**2\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 9*a\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    return 0.5*a**2\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle from the length of its radius.\n    '''\n    return math.pi*r**2\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle from the length of its radius.\n    '''\n    return 2*math.pi*r\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle from the length of its base and height.\n    '''\n    return (b*h)/2\ndef perimeter_triangle(b,h):\n    '''\n    Write a function to find the perimeter of a triangle from the length of its base and height.\n    '''\n    return b+h+math.sqrt((b+h)**2-b**2)\ndef area_square(a):\n    '''\n    Write a function to find the area of a square from the length of its side.\n    '''\n    return a**2\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from the length of its side.\n    '''\n    return 4*a\ndef area_rectangle(b,h):\n    '''\n    Write a function to find the area of a rectangle from the length of its base and height.\n    '''\n    return b*h\ndef perimeter_rectangle(b,h):\n    '''\n    Write a function to find the perimeter of a rectangle from the length of its base and height.\n    '''\n    return 2*b+2*h\ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the area of a parallelogram from the length of its base and height.\n    '''\n    return b*h\ndef perimeter_parallelogram(b,h):\n    '''\n    Write a function to find the perimeter of a parallelogram from the length of its base and height.\n    '''\n    return 2*b+2*h\ndef area_trapezium(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezium from the lengths of its bases and height.\n    '''\n    return (b1+b2)*h/2\ndef perimeter_trapezium(b1,b2,h):\n    '''\n    Write a function to find the perimeter of a trapezium from the lengths of its bases and height.\n    '''\n    return b1+b2+h\ndef area_kite(b,h):\n    '''\n    Write a function to find the area of a kite from the lengths of its base and height.\n    '''\n    return b*h\ndef perimeter_kite(b,h):\n    '''\n    Write a function to find the perimeter of a kite from the lengths of its base and height.\n    '''\n    return 2*b+h\ndef area_circles_overlap(r1,r2):\n    '''\n    Write a function to find the area of overlap between two circles with radii r1 and r2.\n    '''\n    if r1+r2 < math.sqrt((r1-r2)**2+r1**2+r2**2):\n        return 0\n    else:\n        return math.pi*(min(r1,r2)+math.sqrt((r1-r2)**2+r1**2+r2**2))\ndef area_circles_touch(r1,r2):\n    '''\n    Write a function to find the area of overlap between two circles with radii r1 and r2.\n    '''\n    if r1+r2 < math.sqrt((r1-r2)**2+r1**2+r2**2):\n        return 0\n    else:\n        return math.pi*(max(r1,r2)+math.sqrt((r1-r2)**2+r1**2+r2**2))\ndef area_triangles_overlap(b1,b2,h):\n    '''\n    Write a function to find the area of overlap between two triangles with base lengths b1 and b2 and height h.\n    '''\n    if h < math.sqrt(b1**2+b2**2):\n        return 0\n    else:\n        return (b1*b2/2)*(math.sqrt(b1**2+b2**2)-h)\ndef area_triangles_touch(b1,b2,h):\n    '''\n    Write a function to find the area of overlap between two triangles with base lengths b1 and b2 and height h.\n    '''\n    if h < math.sqrt(b1**2+b2**2):\n        return 0\n    else:\n        return (b1*b2/2)*(max(math.sqrt(b1**2+b2**2),h))\ndef area_rectangles_overlap(b1,b2,h):\n    '''\n    Write a function to find the area of overlap between two rectangles with base lengths b1 and b2 and height h.\n    '''\n    if h < b1+b2:\n        return 0\n    else:\n        return b1*b2*h/2\ndef area_rectangles_touch(b1,b2,h):\n    '''\n    Write a function to find the area of overlap between two rectangles with base lengths b1 and b2 and height h.\n    '''\n    if h < b1+b2:\n        return 0\n    else:\n        return b1*b2*max(b1+b2,h)\ndef area_squares_overlap(a1,a2):\n    '''\n    Write a function to find the area of overlap between two squares with side lengths a1 and a2.\n    '''\n    if a1 < a2:\n        return 0\n    else:\n        return a1*a2\ndef area_squares_touch(a1,a2):\n    '''\n    Write a function to find the area of overlap between two squares with side lengths a1 and a2.\n    '''\n    if a1 < a2:\n        return 0\n    else:\n        return a1*a2\ndef area_parallelograms_overlap(b1,b2,h):\n    '''\n    Write a function to find the area of overlap between two parallelograms with base lengths b1 and b2 and height h.\n    '''\n    if h < b1+b2:\n        return 0\n    else:\n        return b1*b2*h/2\ndef area_parallelo",
        "num_ids": 38
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = ((5*a) * math.tan(math.pi/5))\n    return round(perimeter, 2)\n",
        "num_ids": 33
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    print('Count Occurance: ')\n    print('{} string contain the substring \\'{}\\' {} times.'.format(s,'std', s.count('std')))\n    \ndef count_occurance2(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    \n    # a more pythonic way\n    count = 0\n    for i in range(len(s)):\n        if s[i:].startswith('std'):\n            count += 1\n    print('Count Occurance: ')\n    print('{} string contain the substring \\'{}\\' {} times.'.format(s,'std', count))\n",
        "num_ids": 86
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    num = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            num += 1\n    return num\n",
        "num_ids": 43
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s) < 3:\n        return 0\n    return s.count('std')\n",
        "num_ids": 25
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # if len(s)<4:\n    #     return 0\n    # if s.count('std')>0:\n    #     return 1+count_occurance(s[s.index('std'):])\n    # else:\n    #     return count_occurance(s[s.index('std'):])\n",
        "num_ids": 79
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char == \"std\":\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if not isinstance(s, str):\n        raise TypeError(\"input must be a string\")\n    # do the counting\n    return s.count('std')\n",
        "num_ids": 40
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    num_occ = 0\n    for i in range(0, len(s)):\n        if s[i:i + 4] =='std':\n            num_occ += 1\n    return num_occ\n",
        "num_ids": 51
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    cnt = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] =='std':\n            cnt += 1\n    return cnt\n",
        "num_ids": 48
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = set(map(type,test_tuple))\n    return len(types) == 1\n",
        "num_ids": 26
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        for j in range(i+1,len(test_tuple)):\n            if type(test_tuple[i])!= type(test_tuple[j]):\n                return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(x) == type(test_tuple[0]) for x in test_tuple)\n",
        "num_ids": 29
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    lst = []\n    for i in test_tuple:\n        lst.append(type(i))\n    if len(set(lst)) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_len = len(test_tuple)\n    if tuple_len > 0:\n        test_type = type(test_tuple[0])\n        for i in range(0, tuple_len):\n            if test_type!= type(test_tuple[i]):\n                print(\"Elements in tuple are not of same type\")\n                return False\n    else:\n        print(\"Tuple is empty\")\n    print(\"Elements in tuple are of same type\")\n    return True\n",
        "num_ids": 119
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return (isinstance(test_tuple[0], type(test_tuple[1])))\n",
        "num_ids": 26
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if type(i)==type(test_tuple[0]):\n            print(\"True\")\n            return\n    print(\"False\")\n    return\n",
        "num_ids": 48
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    l = [i for i in test_tuple]\n    return (all(isinstance(ele, type(l[0])) for ele in l))\n",
        "num_ids": 39
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple)!= tuple:\n        return False\n    else:\n        res = set(test_tuple)\n        if len(res) == 1:\n            return True\n        else:\n            return False\n",
        "num_ids": 56
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[0] == x:\n        return True\n    if arr[n-1] == x:\n        return True\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count+=1\n    if count > n/2:\n        return True\n    return False\n",
        "num_ids": 89
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    for i in range(n):\n        if arr[i] == x:\n            if i > n/2:\n                return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    #if the given array is empty\n    if n == 0:\n        return False\n    \n    #if n is 1, check if the element equals the given array element\n    if n == 1:\n        if arr[0] == x:\n            return True\n        else:\n            return False\n",
        "num_ids": 72
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if the element is not in the array, return False\n    if x not in arr:\n        return False\n    else:\n        # initialize count variable and initialize counter variable\n        count = 0\n        counter = 0\n        # loop through the array, if counter is greater than n/2, return True, otherwise return False\n        while counter < n:\n            if counter > n/2:\n                return True\n            if arr[counter] == x:\n                count += 1\n            counter += 1\n        return False\n    \n    # initialize count variable and initialize counter variable\n    count = 0\n    counter = 0\n    # loop through the array, if counter is greater than n/2, return True, otherwise return False\n    while counter < n:\n        if counter > n/2:\n            return True\n        if arr[counter] == x:\n            count += 1\n        counter += 1\n    return False\n",
        "num_ids": 208
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n < 3:\n        return False\n",
        "num_ids": 13
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # return binary_search(arr, n, x, 0, n)\n    # binary_search(arr, n, x, 0, n)\n",
        "num_ids": 37
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return x == arr[0]\n    if x == arr[n//2]:\n        return True\n    if n == 2:\n        return x == arr[0] or x == arr[1]\n    if x == arr[0]:\n        return arr[1] == arr[n//2]\n    if x == arr[n-1]:\n        return arr[n//2-1] == arr[n-2]\n    return arr[n//2] == x\n",
        "num_ids": 119
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    majority = n / 2\n    if n == 1:\n        return arr[0] == x\n",
        "num_ids": 25
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left, right = 0, n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n    return False\n",
        "num_ids": 87
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    cnt = 0\n    while (n): \n        cnt += n & 1\n        n >>= 1\n    return cnt \n",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    sum=0\n    while (n): \n        sum += n & 1\n        n >>= 1\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "num_ids": 13
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "num_ids": 13
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n",
        "num_ids": 10
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Your code here\n    return ''.join([x for x in str if str.index(x) % 2 == 0])\n",
        "num_ids": 32
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([i for i in str if not(str.index(i)%2)])\n    # list1=[]\n    # for i in str:\n    #     list1.append(i)\n    # print(list1)\n    # for i in range(len(list1)):\n    #     if i%2!=0:\n    #         list1.pop(i)\n    # return \"\".join(list1)\n",
        "num_ids": 109
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #list comprehension\n    #return [i for i in str if str.index(i)%2==0]\n",
        "num_ids": 29
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list = list(str)\n    for i in range(0,len(str_list)):\n        if i % 2 == 1:\n            str_list.remove(str_list[i])\n    return str_list\n",
        "num_ids": 57
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    final_str = ''\n    for index, char in enumerate(str):\n        if index % 2 == 0:\n            final_str += char\n    return final_str\n",
        "num_ids": 43
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n",
        "num_ids": 46
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    a = \"\"\n    for i in range(0,len(str)):\n        if i%2==0:\n            a = a + str[i]\n    return a\n",
        "num_ids": 44
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[0::2]\n",
        "num_ids": 11
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n",
        "num_ids": 10
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a<=b) and (a<=c): \n        return a\n    elif (b<=a) and (b<=c):\n        return b\n    elif (c<=a) and (c<=b):\n        return c\n    else:\n        return \"invalid input\"\n",
        "num_ids": 77
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return c\n        else:\n            return b\n    else:\n        if a<c:\n            return c\n        else:\n            return a\n",
        "num_ids": 51
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n",
        "num_ids": 51
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        min = a\n    elif b < a and b < c:\n        min = b\n    else:\n        min = c\n    return min\n    \n    \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a > b and a > c:\n        max = a\n    elif b > a and b > c:\n        max = b\n    else:\n        max = c\n    return max\n    \n    \ndef avg_of_three(a,b,c): \n    '''\n    Write a function to find average of three numbers.\n    '''\n    sum = a+b+c\n    avg = sum/3\n    return avg\n    \n    \ndef mid_of_three(a,b,c):\n    '''\n    Write a function to find middle of three numbers.\n    '''\n    if a < b and a < c:\n        mid = b\n    elif b < a and b < c:\n        mid = a\n    else:\n        mid = c\n    return mid\n    \n    \ndef string_three(a,b,c):\n    '''\n    Write a function to create a string from three numbers.\n    '''\n    st = str(a)+\",\"+str(b)+\",\"+str(c)\n    return st\n    \n    \ndef sum_of_three(a,b,c):\n    '''\n    Write a function to find sum of three numbers.\n    '''\n    sum = a+b+c\n    return sum\n    \n    \ndef subtraction_of_three(a,b,c):\n    '''\n    Write a function to find difference of three numbers.\n    '''\n    diff = a-b-c\n    return diff\n    \n    \ndef multiplication_of_three(a,b,c):\n    '''\n    Write a function to find product of three numbers.\n    '''\n    mul = a*b*c\n    return mul\n    \n    \ndef division_of_three(a,b,c):\n    '''\n    Write a function to find quotient of three numbers.\n    '''\n    quo = a/b/c\n    return quo\n    \n    \ndef remainder_of_three(a,b,c):\n    '''\n    Write a function to find remainder of three numbers.\n    '''\n    rem = a%b%c\n    return rem\n    \n    \ndef factorial_of_three(a,b,c):\n    '''\n    Write a function to find factorial of three numbers.\n    '''\n    fac = a*b*c\n    return fac\n    \n    \ndef exponent_of_three(a,b,c):\n    '''\n    Write a function to find exponent of three numbers.\n    '''\n    expo = a**b**c\n    return expo\n    \n    \ndef prime_factors_of_three(a,b,c):\n    '''\n    Write a function to find prime factors of three numbers.\n    '''\n    while a%2==0:\n        print(2)\n        a=a/2\n    while a%3==0:\n        print(3)\n        a=a/3\n    while a%5==0:\n        print(5)\n        a=a/5\n    while a%7==0:\n        print(7)\n        a=a/7\n    while a%11==0:\n        print(11)\n        a=a/11\n    while a%13==0:\n        print(13)\n        a=a/13\n    while a%17==0:\n        print(17)\n        a=a/17\n    while a%19==0:\n        print(19)\n        a=a/19\n    while a%23==0:\n        print(23)\n        a=a/23\n    while a%29==0:\n        print(29)\n        a=a/29\n    return a\n    \n    \ndef palindrome_of_three(a,b,c):\n    '''\n    Write a function to check if three numbers are palindrome.\n    '''\n    if a==b and b==c:\n        return True\n    elif a==c and b==a:\n        return True\n    else:\n        return False\n    \n    \ndef perfect_number_of_three(a,b,c):\n    '''\n    Write a function to check if three numbers are perfect numbers.\n    '''\n    sum = a+b+c\n    if sum == a*a + b*b + c*c:\n        return True\n    else:\n        return False\n    \n    \ndef semi_prime_number_of_three(a,b,c):\n    '''\n    Write a function to check if three numbers are semi prime numbers.\n    '''\n    if a>0 and b>0 and c>0 and a+b>c and a+c>b and b+c>a:\n        if a%2==0 and b%2==0 and c%2==0:\n            if a>0 and b>0 and c>0 and a+b>c and a+c>b and b+c>a:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n        \n    \ndef armstron_number_of_three(a,b,c):\n    '''\n    Write a function to check if three numbers are armstrong number.\n    '''\n    sum = a+b+c\n    mul = a*b*c\n    if sum == mul:\n        return True\n    else:\n        return False\n        \n    \ndef geometric_number_of_three(a,b,c):\n    '''\n    Write a function to check if three numbers are geometric numbers.\n    '''\n    if a==b*2 and b==c*2 and c==a*2:\n        return True\n    else:\n        return False\n        \n    \ndef sine_of_three(a,b,c):\n    '''\n    Write a function to find sine of three numbers.\n    '''\n    import math\n    sine = math.sin(a) + math.sin(b) + math.sin(c)\n    return sine\n    \n    \ndef cosine_of_three(a,b,c):\n    '''\n    Write a function to find cosine of three numbers.\n    '''\n    import math\n    cosine = math.cos(a) + math.cos(b) + math.cos(c)\n    return cosine\n    \n    \ndef tangent_of_three(a,b,c):\n    '''\n    Write a function to find tangent of three numbers.\n    '''\n    import math\n    tangent = math.tan(a) + math.tan(b) + math.tan(c)\n    return tangent\n    \n    \ndef cosecant_of_three(a,b,c):\n    '''\n    Write a function to find cosecant of three numbers.\n    '''\n    import math\n    cosecant = (1/math.sin(a)) + (1/math.sin(b)) + (1/math.sin(c))\n    return cosecant\n    \n    \ndef secant_of_three(a,b,c):\n    '''\n    Write a function to find secant of three numbers.\n    '''\n    import math\n    secant = (1/math.cos(a)) + (1/math.cos(b)) + (1/math.cos(c))\n    return secant\n    \n    \ndef cotangent_of_three(a,b,c):\n    '''\n    Write a function to find cotangent of three numbers.\n    '''\n    import math\n    cotangent = (1/math.tan(a)) + (1/math.tan(b)) + (1/math.tan(c))\n    return cotangent\n    \n    \ndef convert_to_celsius(fahrenheit):\n    '''\n    Write a function to convert fahrenheit to celsius.\n    '''\n    celsius = (fahrenheit - 32) * (5/9)\n    return celsius\n    \n    \ndef convert_to_fahrenheit(cel",
        "num_ids": 40
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if(a<b):\n        if(a<c):\n            return a\n        else:\n            return c\n    else:\n        if(b<c):\n            return b\n        else:\n            return c\n",
        "num_ids": 54
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return(a)\n        else:\n            return(b)\n    else:\n        if a < c:\n            return(a)\n        else:\n            return(c)\n            \ndef min_of_four(a,b,c,d): \n    '''\n    Write a function to find minimum of four numbers.\n    '''\n    if a < b:\n        if c < d:\n            return(a)\n        else:\n            return(c)\n    else:\n        if a < d:\n            return(a)\n        else:\n            return(d)\n",
        "num_ids": 59
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            print(\"The minimum number is: \",a)\n        else:\n            print(\"The minimum number is: \",c)\n    else:\n        if b < c:\n            print(\"The minimum number is: \",b)\n        else:\n            print(\"The minimum number is: \",c)\n",
        "num_ids": 83
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b: \n        if a < c:\n            return a \n        else:\n            return c \n    else:\n        if b < c:\n            return b \n        else:\n            return c \n",
        "num_ids": 56
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n    \n    ",
        "num_ids": 44
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return a\n        else:\n            return c\n    else:\n        if a < c:\n            return b\n        else:\n            return c\n",
        "num_ids": 51
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    a=1\n    for i in range(n):\n        b=1\n        for j in range(l,r+1):\n            b=b*(i^j)\n        if(b==0):\n            a=0\n        else:\n            a=1\n    if(a==0):\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 91
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    s=''\n    for i in range(n):\n        s=s+'1'\n    s=int(s,2)\n    print(s)\n    for i in range(l,r+1):\n        s=s^i\n    print(s)\n    if(s==0):\n        print('All bits are unset')\n    else:\n        print('All bits are not unset')\nn=int(input('Enter the number of bits: '))\nl=int(input('Enter the value of low limit: '))\nr=int(input('Enter the value of upper limit: '))\nall_Bits_Set_In_The_Given_Range(n,l,r)\n'''\nEnter the number of bits: 4\nEnter the value of low limit: 10\nEnter the value of upper limit: 15\n101\n0\n101^10\n101^11\n101^14\n101^15\nAll bits are unset\n'''\n",
        "num_ids": 2
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (2**n-1) & i == 2**n-1:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    import numpy as np\n    x = np.binary_repr(n)\n    y = np.binary_repr(r)\n    x = x.zfill(len(y))\n    y = y.zfill(len(x))\n    k = 0\n    for i in range(0,len(x)):\n        if(x[i]!=y[i]):\n            k = k+1\n    if(k>1):\n        return 0\n    else:\n        return 1\n",
        "num_ids": 122
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if( (i & n)!= i ):\n            return False\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range_Optimized(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if( (i & n)!= 0 ):\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x=(2**n)\n    y=2\n    for i in range(n,1,-1):\n        x=x>>y\n        y=y+1\n    x=x>>1\n    x=x<<(n-1)\n    x=x|l\n    x=x|r\n    if x==2**n-1:\n        return True\n    else:\n        return False\n    \n    \ndef all_Bits_Set_In_The_Given_Range_1(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x=2**n-1\n    x=x^r\n    x=x^l\n    x=x&r\n    print(\"x:\",x)\n    return x==0\n    \nif __name__=='__main__':\n    n=int(input(\"Enter the number of bits: \"))\n    l=int(input(\"Enter the lower bound: \"))\n    r=int(input(\"Enter the upper bound: \"))\n    \n    if all_Bits_Set_In_The_Given_Range(n,l,r):\n        print(\"Yes, it's all bits unset!\")\n    else:\n        print(\"No, it's not all bits unset!\")\n        \n    \n    if all_Bits_Set_In_The_Given_Range_1(n,l,r):\n        print(\"Yes, it's all bits unset!\")\n    else:\n        print(\"No, it's not all bits unset!\")",
        "num_ids": 227
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l=l+1\n    r=r+1\n    l=list(bin(l))\n    r=list(bin(r))\n    l=l[2:]\n    r=r[2:]\n    l='0'*(len(r)-len(l))+l\n    r='0'*(len(l)-len(r))+r\n    print(l,r)\n    i=0\n    while(i<len(l)):\n        if(int(l[i])==0):\n            j=i\n            while(j<len(l)):\n                l[j]=1\n                j+=1\n        else:\n            i+=1\n    i=0\n    while(i<len(r)):\n        if(int(r[i])==0):\n            j=i\n            while(j<len(r)):\n                r[j]=1\n                j+=1\n        else:\n            i+=1\n    print(l,r)\n    for i in l:\n        if(int(i)==0):\n            return False\n    for i in r:\n        if(int(i)==0):\n            return False\n    return True\n",
        "num_ids": 284
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    ans = 0\n    for i in range(n):\n        ans = ans + pow(2, i)\n    for i in range(l,r+1):\n        ans = ans - pow(2, i)\n    if ans == 0:\n        return True\n    return False\n",
        "num_ids": 68
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    def re_arrange(arr, n):\n        pos_arr = []\n        neg_arr = []\n        for item in arr:\n            if item >= 0:\n                pos_arr.append(item)\n            else:\n                neg_arr.append(item)\n        if abs(n) > len(arr):\n            print(\"Invalid input\")\n            return\n        for i in range(n):\n            arr[i] = pos_arr.pop()\n        for i in range(n, len(arr)):\n            arr[i] = neg_arr.pop()\n        return arr\n",
        "num_ids": 141
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # first find negative numbers\n    negatives = []\n    for i in arr:\n        if i < 0:\n            negatives.append(i)\n    # sort the negative numbers\n    negatives.sort()\n    # Now sort the array\n    arr.sort()\n    # take care of the negative numbers\n    for i in range(len(negatives)):\n        arr.insert(i, negatives[i])\n    # take care of the positive numbers\n    for i in range(len(negatives), len(arr)):\n        arr.insert(len(negatives) + i, arr[i])\n    return arr\n",
        "num_ids": 147
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    start = 0\n    end = n - 1\n    while start <= end:\n        if arr[start] < 0 and arr[end] < 0:\n            start += 1\n            end -= 1\n        elif arr[start] < 0 and arr[end] >= 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n        elif arr[start] >= 0 and arr[end] >= 0:\n            start += 1\n            end -= 1\n        elif arr[start] >= 0 and arr[end] < 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n    return arr\n",
        "num_ids": 174
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = -1\n    j = 0\n    while (j < n):\n        if arr[j] < 0:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n        j += 1\n    return arr\n",
        "num_ids": 64
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    print(arr)\n",
        "num_ids": 8
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    #arr = [1,2,3,4,5,-1,6,7,-2]\n    #n = 5\n    arr.sort()\n    i = 0\n    j = n\n    while i < j:\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n    return arr\n",
        "num_ids": 109
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        while arr[start] < 0 and start <= end:\n            start += 1\n",
        "num_ids": 43
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return arr\n",
        "num_ids": 13
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    l = len(arr)\n    low = 0\n    high = l-1\n    \n    while(low<high):\n        if arr[low]>0 and arr[high]<0:\n            arr[low], arr[high] = arr[high], arr[low]\n            low += 1\n            high -= 1\n        elif arr[low] < 0 and arr[high]<0:\n            low += 1\n        elif arr[low]>0 and arr[high]>0:\n            high -= 1\n    return arr\n",
        "num_ids": 128
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # time complexity: O(n)\n    # space complexity: O(n)\n    i = 0\n    j = n - 1\n    while i < j:\n        while arr[i] < 0 and i < j:\n            i += 1\n        while arr[j] >= 0 and i < j:\n            j -= 1\n        arr[i], arr[j] = arr[j], arr[i]\n    return arr\n",
        "num_ids": 102
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    print(str1.replace(\" \",\"\"))\n    return str1.replace(\" \",\"\")\n",
        "num_ids": 25
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # print(str1.replace(\" \",\"\"))\n    print(str1.replace(\" \",\"\"+char+\"\"))\n",
        "num_ids": 32
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return str1\n",
        "num_ids": 20
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\") %char\n",
        "num_ids": 17
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1 == \"\":\n        return\n    str2 = \"\"\n    for i in str1:\n        if i == \" \":\n            str2 += char\n        else:\n            str2 += i\n    return str2\n",
        "num_ids": 56
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = ''\n    for i in str1:\n        if i =='':\n            new_string = new_string + char\n        else:\n            new_string = new_string + i\n    return new_string\n",
        "num_ids": 56
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','%s')\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "num_ids": 13
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list1 = list1[::-1]\n    list2 = []\n    for i in range(n):\n        list2.append(list1[i])\n    return list2\n",
        "num_ids": 53
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list_s=[]\n    for i in range(n):\n        list_s.append(max(list1))\n        list1.remove(max(list1))\n    return list_s\n",
        "num_ids": 49
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l = []\n    heapq.heapify(list1)\n    for i in range(n):\n        l.append(heapq.heappop(list1))\n    return l\nlist1 = [1, 3, 4, 5, 6, 7, 8, 9, 6, 3, 5, 6, 7, 9, 2, 0, 5, 4]\nn = 5\nprint(larg_nnum(list1,n))\n",
        "num_ids": 108
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "num_ids": 16
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # print(heapq.nlargest(n,list1))\n    return heapq.nlargest(n,list1)\ndef larg_nnum1(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # print(heapq.nlargest(n,list1))\n    return list(heapq.nlargest(n,list1))\ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # print(heapq.nlargest(n,list1))\n    return list(heapq.nlargest(n,list1))\ndef larg_nnum3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # print(heapq.nlargest(n,list1))\n    return heapq.nlargest(n,list1)\n",
        "num_ids": 33
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    heapq.heapify(list1)\n    for i in range(n):\n        list2.append(heapq.heappop(list1))\n    return list2\n",
        "num_ids": 53
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            heapq.heappushpop(heap, item)\n    return heap\nlist1 = [1,2,3,4,5,6]\nn = 5\nprint(larg_nnum(list1,n))\n",
        "num_ids": 100
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,(-i,i))\n        if len(heap)>n:\n            heapq.heappop(heap)\n    heapq.heapify(heap)\n    ans = []\n    for i in heap:\n        ans.append(i[1])\n    return ans\n",
        "num_ids": 97
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[:n]\n    heapq.heapify(heap)\n    for i in range(n,len(list1)):\n        if heap[0] < list1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,list1[i])\n    return(heap)\n",
        "num_ids": 92
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=sorted(list1,reverse=True)[:n]\n        return new_list\ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=sorted(list1,reverse=True)[:n]\n        return new_list\ndef larg_nnum3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=[]\n        for i in range(n):\n            new_list.append(max(list1))\n            list1.remove(max(list1))\n    return new_list\ndef larg_nnum4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=[]\n        for i in range(n):\n            new_list.append(max(list1))\n            list1.remove(max(list1))\n    return new_list\ndef larg_nnum5(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=[]\n        for i in range(n):\n            new_list.append(max(list1))\n            list1.remove(max(list1))\n    return new_list\ndef larg_nnum6(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=[]\n        for i in range(n):\n            new_list.append(max(list1))\n            list1.remove(max(list1))\n    return new_list\ndef larg_nnum7(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=[]\n        for i in range(n):\n            new_list.append(max(list1))\n            list1.remove(max(list1))\n    return new_list\ndef larg_nnum8(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=[]\n        for i in range(n):\n            new_list.append(max(list1))\n            list1.remove(max(list1))\n    return new_list\ndef larg_nnum9(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=[]\n        for i in range(n):\n            new_list.append(max(list1))\n            list1.remove(max(list1))\n    return new_list\ndef larg_nnum10(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=[]\n        for i in range(n):\n            new_list.append(max(list1))\n            list1.remove(max(list1))\n    return new_list\ndef larg_nnum11(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=[]\n        for i in range(n):\n            new_list.append(max(list1))\n            list1.remove(max(list1))\n    return new_list\ndef larg_nnum12(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=[]\n        for i in range(n):\n            new_list.append(max(list1))\n            list1.remove(max(list1))\n    return new_list\ndef larg_nnum13(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=[]\n        for i in range(n):\n            new_list.append(max(list1))\n            list1.remove(max(list1))\n    return new_list\ndef larg_nnum14(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=[]\n        for i in range(n):\n            new_list.append(max(list1))\n            list1.remove(max(list1))\n    return new_list\ndef larg_nnum15(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=[]\n        for i in range(n):\n            new_list.append(max(list1))\n            list1.remove(max(list1))\n    return new_list\ndef larg_nnum16(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=[]\n        for i in range(n):\n            new_list.append(max(list1))\n            list1.remove(max(list1))\n    return new_list\ndef larg_nnum17(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(list1)\n    if n >= len(list1):\n        return list1\n    else:\n        new_list=[]\n        for i in range(n):\n            new_list.append(max(list1))\n            list1.remove(max(list1))\n    return new_list\ndef larg_nnum18(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and return",
        "num_ids": 17
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=3.14159\n    sideA=pi*(r**2)\n    sideB=2*pi*r*h\n    area=sideA+sideB\n    return area\n",
        "num_ids": 47
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    surface_area = (2*pi*r*h) + (2*pi*r**2)\n    return surface_area\n",
        "num_ids": 39
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s=2*pi*r*(r+h)\n    return s\n",
        "num_ids": 21
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area=2*pi*r*h\n    return area\n",
        "num_ids": 17
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface = (2*np.pi*r*h) + (2*np.pi*r**2)\n    return surface\n",
        "num_ids": 33
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi,sqrt\n    s_cylinder=2*pi*r*(r+h)\n    return s_cylinder\n",
        "num_ids": 36
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14\n    S = 2*pi*r*(h+r)\n    return S\n",
        "num_ids": 28
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #cylinder lateral surface area = 2 * pi * radius * height + 2 * pi * radius**2\n    #use two pi * radius**2 for top and bottom circles, times 2 for sides\n    lateral_surface = (2 * 3.14 * r**2) * 2 + (2 * 3.14 * r**2)*2\n    return lateral_surface\n",
        "num_ids": 85
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi, radians\n    r=radians(r)\n    h=h\n    lateral_cylinder = 2*pi*r*(r+h)\n    return lateral_cylinder\n",
        "num_ids": 51
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=3.14159\n    LateralSurfaceArea=(2*pi*r*h) + (2*pi*r**2)\n    return LateralSurfaceArea\n",
        "num_ids": 44
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print((l ** 3))\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l * l * l\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if isinstance(l, int):\n        return l**3\n    else:\n        raise ValueError('Not a valid value for side length')\n",
        "num_ids": 36
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(((l**3)*6))\n",
        "num_ids": 13
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n",
        "num_ids": 10
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return int('{0:0b}'.format(n).zfill(32)[::2], 2)\n",
        "num_ids": 28
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    assert n >= 0, \"Number must be non-negative.\"\n    binary = bin(n)[2:] #remove prefix 0b\n    #count number of 1s in binary\n    count = binary.count('1')\n    binary = binary.zfill(count+1)\n    #set even bits to 0\n    even_binary = binary[:len(binary):2]\n    even_binary = even_binary.replace('1', '0')\n    even_number = int(even_binary, 2)\n    return even_number\n",
        "num_ids": 125
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n    \ndef count_bits(n):\n    '''\n    Write a python function to count the number of bits of a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #consider a mask of all even bits set.\n    #For example, mask for number 16 = 10010.\n    #so, n & mask = 16\n    mask = 0xAAAAAAAA #101010\n    return n & mask\n",
        "num_ids": 54
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n>>1)\n",
        "num_ids": 12
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    binary_number = format(n, 'b')\n    for idx, i in enumerate(binary_number):\n        if i == '0':\n            binary_number = binary_number[:idx] + '1' + binary_number[idx+1:]\n    return int(binary_number, 2)\n",
        "num_ids": 77
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 0x5555555555555555\n    return n & mask\n",
        "num_ids": 22
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    print(\"\\nEven Bit Set Number: \", end='')\n    for i in range(32):\n        if (n & (1 << i)):\n            print(i, end=', ')\n    print()\n",
        "num_ids": 54
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1 << 60)\n",
        "num_ids": 12
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for item in test_list:\n        if item in test_dict:\n            test_dict[item] += 1\n        else:\n            test_dict[item] = 1\n    return test_dict\n",
        "num_ids": 57
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # your code here\n    # get unique items\n    # for each item count occurrences\n    # if there is a key in the dictionary it's value increases by 1\n    # else it is created with a value of 1\n    occurrences = {}\n",
        "num_ids": 58
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    tuple_list = []\n    for i in test_list:\n        tuple_list.append(i[0])\n    return Counter(tuple_list).items()\n",
        "num_ids": 46
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #create a set of unique tuples\n    unique_tuples = set(test_list)\n    #initialize the dict of occurences with 0\n    occurrences_dict = {}\n    for unique_tuple in unique_tuples:\n        occurrences_dict[unique_tuple] = 0\n    #for each tuple, add the number of occurences to the dict\n    for tuple in test_list:\n        occurrences_dict[tuple] += 1\n    return occurrences_dict\n",
        "num_ids": 120
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = {}\n    for item in test_list:\n        if item in my_dict.keys():\n            my_dict[item] += 1\n        else:\n            my_dict[item] = 1\n    return my_dict\n",
        "num_ids": 59
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [1, 2, 3, 1, 2, 3]\n    result = Counter(test_list)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    for index in range(0,len(test_list)):\n        if len(test_list)==0:\n            return 'Invalid input'\n        if not isinstance(test_list[index],tuple):\n            return 'Invalid input'\n    dictionary = {}\n    for item in test_list:\n        if item not in dictionary:\n            dictionary[item] = 1\n        else:\n            dictionary[item] += 1\n    return dictionary\ntest_list = [('a','b','a','d'),('a','a'),('a','a','a')]\nprint(check_occurences(test_list))\n",
        "num_ids": 150
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return {key: value for key, value in Counter(test_list).items() if value > 1}\n",
        "num_ids": 27
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Your code here\n    counter = Counter(test_list)\n    return counter\ndef check_occurences_v2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Your code here\n    counter = {}\n    for item in test_list:\n        if item not in counter.keys():\n            counter[item] = 1\n        else:\n            counter[item] += 1\n    return counter\n",
        "num_ids": 56
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substr = []\n    non_empty_substr = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            substr.append(str[i:j+1])\n    for s in substr:\n        if s:\n            non_empty_substr += 1\n    return non_empty_substr\n",
        "num_ids": 90
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #Approach: Recursion\n    #Time Complexity: O(n^2)\n    #Space Complexity: O(n)\n    def count_non_empty_substrings(str, count, idx=0):\n        if idx == len(str):\n            return count\n        if str[idx]!= \" \":\n            count += 1\n        return count_non_empty_substrings(str, count, idx+1)\n",
        "num_ids": 108
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    x = len(str) \n    y = 0\n    for i in range(x): \n        for j in range(i, x): \n            if (str[i:j+1]!= ''): \n                y += 1\n    return y\n",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1].isalpha():\n                count+=1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # intilize a counter variable.\n    count = 0\n    # iterate for each substring.\n    for i in range(0, len(str)):\n        # if substring is not empty.\n        if str[i:]!= '':\n            # increment counter.\n            count += 1\n    # return number of substrings.\n    return count\n",
        "num_ids": 86
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = []\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if len(substring) > 0:\n                substrings.append(substring)\n                count += 1\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str) == 0: \n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len([str[i:j] for i in range(len(str)) for j in range(i+1,len(str)+1)])\n",
        "num_ids": 38
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(len(str)): \n            if j >= i and str[i:j+1]!= '': \n                count += 1\n    return count \n",
        "num_ids": 63
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if str[i:j+1] == \"\":\n                continue\n            else:\n                ans = ans + 1\n    return ans\n",
        "num_ids": 67
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        return m * get_total_number_of_sequences(m-1,n-1)\n",
        "num_ids": 41
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_total_number_of_sequences(m,n):\n        # a(n) = n! / ((n-2)! * 2)\n        return m**n / 2**(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    result = 0\n    for i in range(n):\n        if i == 0:\n            result += 1\n        else:\n            result = result + m - (2 * i) + 1\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # get length of sequence\n    k = n\n    # create table of \"number of possible sequences\" (see lecture slide 5)\n    num_seq = [[0 for x in range(k+1)] for x in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, k+1):\n            if j >= 2*i:\n                num_seq[i][j] = num_seq[i-1][j] + num_seq[i-1][j-i]\n            else:\n                num_seq[i][j] = num_seq[i-1][j]\n    return num_seq[m][n]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1972
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return m\n    else:\n        return (m + 1) * n + (m + 2) * (n - 1)\n",
        "num_ids": 51
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    elif n == 2:\n        return m*(m-1)\n    else:\n        return get_total_number_of_sequences(m-1,n-1) + get_total_number_of_sequences(m-1,n)\n",
        "num_ids": 75
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_total_number_of_sequences_helper(m,n,prev_total):\n        if n == 1:\n            return prev_total\n        elif n == 2:\n            return prev_total + m + 1\n        elif n > 2:\n            return get_total_number_of_sequences_helper(m,n-1,prev_total + m + 1) + get_total_number_of_sequences_helper(m,n-2,prev_total + m)\n    return get_total_number_of_sequences_helper(m,n,0)\n",
        "num_ids": 147
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def bino_coeff(n,k):\n        \"\"\"\n        Calculates the binomial coefficient\n        \"\"\"\n        #for i in range(0,k+1):\n        #    print(i,k-i)\n        return math.factorial(k)/(math.factorial(k-n)*math.factorial(n))\n    return bino_coeff(n,m)//bino_coeff(n,n)\n    \n    \n    \ndef is_super_ugly(n):\n    '''\n    Write a function that takes in an integer n and returns True if n is an ugly number and False otherwise. An ugly number is a number that is less than or equal to the product of the factors of 2, 3, and 5 that is itself divisible by 2, 3, or 5.\n    '''\n    if n<=1:\n        return False\n    while n%2==0 or n%3==0 or n%5==0:\n        if n%2==0:\n            n//=2\n        elif n%3==0:\n            n//=3\n        elif n%5==0:\n            n//=5\n    return n==1\n",
        "num_ids": 88
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if (m == 0) | (n == 0):\n        return 1\n    return ((get_total_number_of_sequences(m,n-1) + m - 1)%m) + 1\n",
        "num_ids": 51
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import itertools\n    seq = list(itertools.product(list(range(1, m+1)), repeat=n)) # list of sequences of length n\n    return len(seq)\n",
        "num_ids": 48
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # method 1\n    list1.pop()\n    list1 += list2\n    print(list1)\n    #method 2\n    list1[len(list1):] = list2\n    print(list1)\n    #method 3\n    list1.extend(list2)\n    print(list1)\n    \ndef ex2(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that contains the elements of the first list minus the second list.\n    '''\n    list1_minus_list2 = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            continue\n        else:\n            list1_minus_list2.append(list1[i])\n    print(list1_minus_list2)\n    \ndef ex3(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that contains the elements of the first list that are not in the second list.\n    '''\n    list1_minus_list2 = []\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            list1_minus_list2.append(list1[i])\n    print(list1_minus_list2)\n",
        "num_ids": 68
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[:]\n    return list1\n",
        "num_ids": 20
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n    \nreplace_list([1,2,3,4], [7,8,9,10])\n",
        "num_ids": 42
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2\n",
        "num_ids": 14
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2\n",
        "num_ids": 14
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:]=list2\n    return list1\n",
        "num_ids": 16
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n    \ndef make_great(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list of the two lists in sorted order.\n    '''\n    list1.sort()\n    list2.sort()\n    list1[0:] = list2\n    return list1\n",
        "num_ids": 31
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for item in list2:\n        list1[-1]=item\n        print(list1)\n    return list1\n",
        "num_ids": 31
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.reverse()\n    list1.extend(list2)\n    print(list1)\n",
        "num_ids": 34
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    s = 'abcdef'\n    s = 'qwerty'\n    #your code goes here\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    print(count)\ncount_charac('Hello')",
        "num_ids": 33
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c = 0\n    for i in str1:\n        c+=1\n    return c\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    i = 0\n    for c in str1:\n        i += 1\n    return i\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count+=1\n    print(count)\n    return(count)\n",
        "num_ids": 32
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for x in str1:\n        count+=1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    print(count)\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root=int(math.sqrt(N))\n    #print(root)\n    if (root * root==N):\n        return (root+1)**2\n    else:\n        return (root+1)**2\n",
        "num_ids": 56
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N < 0): \n        return -1\n        \n    sqrtN = int(math.sqrt(N)) \n    nextPerfectSquare = (sqrtN + 1) * (sqrtN + 1) \n    return nextPerfectSquare if nextPerfectSquare == N else -1\n",
        "num_ids": 71
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    if N < 1:\n        return -1\n    s = int(math.sqrt(N))\n    if s**2 == N:\n        return -1\n    while s*s < N:\n        s += 1\n    return s*s\n",
        "num_ids": 72
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N==0:\n        return 1\n    if N<0:\n        return -1\n    else:\n        return math.ceil((math.sqrt(N)+1))**2\n",
        "num_ids": 48
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    next_perfect_square = math.ceil(math.sqrt(N))*math.ceil(math.sqrt(N))\n    return next_perfect_square \n",
        "num_ids": 44
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        if int(math.sqrt(N))**2 == N:\n            return N\n        N += 1\n    \n",
        "num_ids": 35
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = N*N\n    return n if n%N == 0 else next_Perfect_Square(N+1)\n",
        "num_ids": 30
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    Sqrt = int(math.sqrt(N)) \n    if ((Sqrt * Sqrt) == N): \n        return (Sqrt + 1) * (Sqrt + 1)\n    while (Sqrt * Sqrt > N): \n        Sqrt -= 1\n    return (Sqrt + 1) * (Sqrt + 1) \n",
        "num_ids": 93
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0: \n        return 0\n    if N == 1: \n        return 1\n    i = 0\n    while (i * i <= N): \n        if (i * i == N): \n            return i \n        i += 1\n    return i - 1\n",
        "num_ids": 69
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #base case\n    if (N < 0): \n        return -1\n    if (N == 0 or N == 1): \n        return N \n",
        "num_ids": 39
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # We will create a bitonic array by \n    # concatenating the input array by itself \n    # starting from index 1. \n    bitonic = [0] + arr + [0] \n    # Initialise the result \n    maximum = 0\n    for i in range(1, n + 1): \n        # l is the index of the maximum element \n        # from [1, i-1] \n        l = binary_search(bitonic, i, False) \n        # r is the index of the maximum element \n        # from [i, n-1] \n        r = binary_search(bitonic, n - i + 1, True) \n        # Add the maximum sum of bitonic subarray of \n        # length i \n        maximum += bitonic[l] + bitonic[r] \n    return maximum \n    \ndef binary_search(arr, index, flag): \n    ''' \n    Returns the index of maximum element in \n    the subarray from the given index. \n    '''\n    low = 1\n    high = index - 1\n    while(low < high): \n        mid = low + (high - low) // 2\n        if arr[mid] > arr[mid + 1]: \n            if flag: \n                high = mid \n            else: \n                low = mid + 1\n        else: \n            low = mid + 1\n    return high if flag else low \n    \ndef main(): \n    arr = [1, 101, 2, 3, 100, 4, 5] \n    print(max_sum(arr)) \n    \nif __name__ == '__main__': \n    main() ",
        "num_ids": 152
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #bitonic sort\n    arr = sorted(arr)\n    maxsum = 0\n    for i in range(1, len(arr) - 1):\n        #check if the current value is greater than the previous value, and the next value\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            #find the sum of the subsequence\n            currsum = arr[i] + arr[i - 1] + arr[i + 1]\n            if currsum > maxsum:\n                maxsum = currsum\n    return maxsum\n",
        "num_ids": 140
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    n = len(arr)\n    for i in range(0, n - 1):\n        max_ending_here += arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    max_ending_here += arr[n - 1]\n    if max_so_far < max_ending_here:\n        max_so_far = max_ending_here\n    return max_so_far\n",
        "num_ids": 151
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr) - 1)\n",
        "num_ids": 23
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum=arr[0]\n    for i in range(1,len(arr)-1):\n        if arr[i-1]<arr[i]>arr[i+1]:\n            max_sum=max(max_sum,arr[i]+arr[i+1])\n        elif arr[i-1]>arr[i]<arr[i+1]:\n            max_sum=max(max_sum,arr[i]+arr[i+1])\n    return max_sum\n",
        "num_ids": 120
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    i, j = 0, len(arr) - 1\n    max_sum = 0\n    while i < j:\n        if arr[i] < arr[i + 1]:\n            max_sum += arr[i]\n            i += 1\n        elif arr[j] < arr[j - 1]:\n            max_sum += arr[j]\n            j -= 1\n        else:\n            max_sum += arr[i]\n            j -= 1\n            i += 1\n",
        "num_ids": 113
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_mem(arr, 0, len(arr) - 1)\n",
        "num_ids": 22
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr)-1)\n",
        "num_ids": 22
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # sum of all elements\n    sum_arr = 0\n    for i in range(len(arr)):\n        sum_arr += arr[i]\n    max_sum = sum_arr\n    # max sum of a bitonic sequence\n    sum_arr = 0\n    for i in range(len(arr)-1):\n        sum_arr += arr[i]\n        if sum_arr > max_sum:\n            max_sum = sum_arr\n    # max sum of a bitonic subsequence\n    sum_arr = 0\n    for i in range(len(arr)-1):\n        sum_arr += arr[i]\n        if sum_arr < max_sum:\n            sum_arr = 0\n    return max_sum\n    \ndef max_sum_subarray(arr):\n    '''\n    Given an array of numbers, find the largest sum of a contiguous subarray within the array.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(len(arr)):\n        max_ending_here = max_ending_here + arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n    \ndef max_product(arr):\n    '''\n    Given an array of numbers, find the largest product of two numbers in the array.\n    '''\n    max_prod = 0\n    # product of all elements\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n    # product of largest pair\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n    return max_prod\n    \ndef min_max_split(arr):\n    '''\n    Given an array, find the minimum and maximum element in it.\n    '''\n    # min and max values\n    min_val = arr[0]\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return [min_val, max_val]\n    \ndef reverse_array(arr):\n    '''\n    Given an array, reverse it in-place.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr\n    \ndef smallest_subarray_with_given_sum(arr, s):\n    '''\n    Given an array of positive numbers and a positive number \u2018S,\u2019 find the length of the smallest contiguous subarray whose sum is greater than or equal to \u2018S\u2019. Return 0 if no such subarray exists.\n    '''\n    # starting index and ending index of smallest subarray\n    start = 0\n    min_len = len(arr) + 1\n    # total sum\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n        # if the sum is greater than s, then move the left pointer further\n        while sum >= s:\n            min_len = min(min_len, i-start+1)\n            sum -= arr[start]\n            start += 1\n    if min_len == len(arr) + 1:\n        return 0\n    return min_len\n",
        "num_ids": 140
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr) - 1)\n",
        "num_ids": 23
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number / 2.0\n    while True:\n        better = (approx + number / approx) / 2.0\n        if better == approx:\n            return better\n        approx = better\n",
        "num_ids": 50
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # x is a guess of the answer\n    x = number\n",
        "num_ids": 17
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = float(number) / 2.0\n    while True:\n        better = (approx + number / approx) / 2.0\n        if abs(approx - better) < 0.001:\n            return better\n        approx = better\n",
        "num_ids": 61
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number + 1) / 2\n    while True:\n        z = (x + y) / 2\n        if z == y:\n            return y\n        y = z\n        if y == x:\n            return y\n",
        "num_ids": 61
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = number\n    x = 0\n    while True:\n        x = 0.5 * (root + (number / root))\n        if x == root:\n            return root\n        root = x\n",
        "num_ids": 49
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number / 2) + 1\n    while x!= y:\n        y = (y + (number / y)) / 2\n        x += 1\n    return y\n",
        "num_ids": 49
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # print('\\ncalculating square root of ', number)\n    x = number\n    y = 1\n    while x - y**2 > 0.0000000001:\n        # print('x = ', x, 'y = ', y, 'x - y^2 = ', x - y**2)\n        x = (x + y**2)/2\n        y = (y + x/y)/2\n    # print('x = ', x, 'y = ', y)\n    return y\n",
        "num_ids": 116
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # First off, we want to take a rough estimate of the starting value of the root,\n    # so we can avoid an infinite loop.\n    guess = int(number / 2 + 1)\n    #print(guess)\n    #print(guess ** 2)\n",
        "num_ids": 65
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2\n    y = number/2\n    while abs(x - y) > 0.01:\n        z = (x + y)/2\n        if z*z > number:\n            y = z\n        else:\n            x = z\n    return z\n",
        "num_ids": 67
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2\n    while True:\n        y = (x + number/x) / 2\n        if y == x:\n            break\n        x = y\n    return x\n    \n    \nif __name__ == \"__main__\":\n    # testing\n    for i in range(25):\n        print(i, ':', babylonian_squareroot(i))",
        "num_ids": 91
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for x in range(n)] for x in range(n)] \n    max_len = 1\n    for i in range(n): \n        dp[i][i] = 1\n    for start_index in range(n-1, -1, -1): \n        for end_index in range(start_index+1, n): \n            if str[start_index] == str[end_index]: \n                dp[start_index][end_index] = dp[start_index+1][end_index-1] + 2\n            else: \n                dp[start_index][end_index] = max(dp[start_index+1][end_index], dp[start_index][end_index-1]) \n            max_len = max(max_len, dp[start_index][end_index]) \n",
        "num_ids": 214
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    table = [[0 for x in range(n)] for y in range(n)] \n    maxLength = 1\n    i = 0\n    while(i < n): \n        table[i][i] = 1\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (str[i] == str[i + 1]): \n            table[i][i + 1] = 2\n            start = i \n            maxLength = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (str[i] == str[j] and table[i + 1][j - 1] == k - 2): \n                table[i][j] = table[i + 1][j - 1] + 2\n                if (k > maxLength): \n                    start = i \n                    maxLength = k \n            i = i + 1\n        k = k + 1\n    print \"Longest palindromic subsequence is: \", \n    for i in range(maxLength): \n        print str[start],\n        start = start + 1\n    print \"\\n\"\n    return maxLength\n",
        "num_ids": 316
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    t = [[False for i in range(n)] for i in range(n)]\n    for i in range(n):\n        t[i][i] = True\n",
        "num_ids": 49
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    p = [[0 for x in range(n+1)] for y in range(n+1)] \n    for i in range(1, n+1): \n        for j in range(1, n+1): \n            if (str[i-1] == str[j-1] and i!= j): \n                p[i][j] = p[i-1][j-1] + 1\n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1]) \n    return p[n][n] \n",
        "num_ids": 152
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # create a n x n table to store results of subproblems \n    n = len(str) \n    L = [[None]*n for i in xrange(n)] \n    \n    # strings of length 1 are palindrome of length 1 \n    for i in xrange(n): \n        L[i][i] = 1\n",
        "num_ids": 84
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    p = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        p[i][i] = 1\n    for i in range(n - 1): \n        if(str[i] == str[i + 1]): \n            p[i][i + 1] = 2\n    for j in range(3, n + 1): \n        for i in range(n - j + 1): \n            if (str[i] == str[i + j - 1] and p[i + 1][i + j - 2] < 0): \n                p[i][i + j - 1] = 2\n            else: \n                p[i][i + j - 1] = max(p[i][i + j - 2] - 1, p[i + 1][i + j - 1]) \n    return p[0][n - 1] \n",
        "num_ids": 227
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    maxi = 1\n    for i in range(n):\n        for j in range(i,n):\n            if str[i:j+1] == str[i:j+1][::-1] and j-i+1> maxi:\n                maxi = j-i+1\n    return maxi\n",
        "num_ids": 85
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    \n    # Create a table to store results of subproblems \n    L = [[0 for x in range(n)] for x in range(n)] \n    \n    # Strings of length 1 are palindrome of length 1 \n    for i in range(n): \n        L[i][i] = 1\n        \n    # Build the table. Note that the lower  \n    # diagonal values of table are \n    # useless and not filled in the process.  \n    # The values are filled in a \n    # manner similar to Matrix Chain \n    # Multiplication DP (Bottom Up) \n    for gap in range(1, n): \n        for i in range(n-gap): \n            j = i+gap \n            if str[i] == str[j] and gap == 1: \n                L[i][j] = 2\n            elif str[i] == str[j] and L[i+1][j-1]>0: \n                L[i][j] = L[i+1][j-1]+2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n",
        "num_ids": 292
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for i in range(n - 1): \n        if (str[i] == str[i + 1]): \n            L[i][i + 1] = 2\n        else: \n            L[i][i + 1] = 0\n    for j in range(2, n): \n        for i in range(n - j): \n            k = i + j\n            if (str[i] == str[k] and L[i + 1][k - 1] == j - 1): \n                L[i][k] = L[i + 1][k - 1] + 2\n            else: \n                L[i][k] = max(L[i][k - 1], L[i + 1][k]) \n    return L[0][n - 1]\n",
        "num_ids": 236
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)]for y in range(n)] \n",
        "num_ids": 32
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def harmonic_sum_helper(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return (1 + (1 / n)) + (harmonic_sum_helper(n - 1))\n    return harmonic_sum_helper(n)\n",
        "num_ids": 78
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n):\n        total += 1 / i\n    return total\n",
        "num_ids": 29
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum += 1/i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + (harmonic_sum(n-1))\n",
        "num_ids": 34
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (sum([(1 / x) for x in range(1, n + 1)]))\n",
        "num_ids": 25
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    return n + harmonic_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 / n) + sum([1 / i for i in range(1, n)])\n",
        "num_ids": 26
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 0:\n        return 0\n    sum = 0\n    while n!= 1:\n        sum += 1 / n\n        n -= 1\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n",
        "num_ids": 27
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n\n",
        "num_ids": 8
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    counts = {}\n    inter = []\n    for num in array_nums1:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n",
        "num_ids": 53
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    list_set = set(array_nums1).intersection(array_nums2)\n    list_set = list(list_set)\n    return list_set\n",
        "num_ids": 43
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    answer = []\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    for i in set1:\n        if i in set2:\n            answer.append(i)\n    return answer\n",
        "num_ids": 61
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return set(array_nums1).intersection(set(array_nums2))\n",
        "num_ids": 24
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # intersection = []\n    # for i in array_nums1:\n    #     if i in array_nums2:\n    #         intersection.append(i)\n    # return intersection\n",
        "num_ids": 49
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    dict_nums = {}\n    for num in array_nums1:\n        if num in dict_nums:\n            dict_nums[num] += 1\n        else:\n            dict_nums[num] = 1\n    intersection_array = []\n    for num in array_nums2:\n        if num in dict_nums and dict_nums[num] > 0:\n            dict_nums[num] -= 1\n            intersection_array.append(num)\n    return intersection_array\n",
        "num_ids": 124
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #return [i for i in set(array_nums1) if i in array_nums2]\n    return list(set(array_nums1) & set(array_nums2))\n",
        "num_ids": 50
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1).intersection(set(array_nums2)))\n",
        "num_ids": 26
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    print(array_nums1, array_nums2)\n    print(set(array_nums1).intersection(set(array_nums2)))\n",
        "num_ids": 41
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1 = sorted(array_nums1)\n    nums2 = sorted(array_nums2)\n    \n    length1 = len(nums1)\n    length2 = len(nums2)\n    i = 0\n    j = 0\n    intersection_array = []\n    while i < length1 and j < length2:\n        if nums1[i] == nums2[j]:\n            intersection_array.append(nums1[i])\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n",
        "num_ids": 157
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count=0\n    for t in tup:\n        if t==x:\n            count=count+1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0\n    for item in tup: \n        if item == x: \n            c = c + 1\n    return c\n",
        "num_ids": 35
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for i in tup:\n        if (i == x):\n            count = count + 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for ele in tup:\n        if ele == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0\n    for i in tup:\n        if i == x:\n            counter += 1\n    return counter\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n",
        "num_ids": 49
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for index in range(len(list)):\n        list.insert(index,element)\n    return list\n",
        "num_ids": 28
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(0,len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in list:\n        new_list.append(i)\n        new_list.append(element)\n    return new_list\ndef insert_element2(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if i==0:\n            new_list.append(element)\n        new_list.append(list[i])\n    return new_list\ndef insert_element3(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if i==0:\n            new_list.append(element)\n        new_list.append(list[i])\n    new_list.append(element)\n    return new_list\ndef insert_element4(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if i==0:\n            new_list.append(element)\n        new_list.append(list[i])\n    new_list.append(element)\n    return new_list\ndef insert_element5(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if i==0:\n            new_list.append(element)\n        new_list.append(list[i])\n    new_list.append(element)\n    new_list.reverse()\n    return new_list\ndef insert_element6(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if i==0:\n            new_list.append(element)\n        new_list.append(list[i])\n    new_list.append(element)\n    new_list.reverse()\n    return new_list\ndef insert_element7(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if i==0:\n            new_list.append(element)\n        new_list.append(list[i])\n    new_list.append(element)\n    new_list.reverse()\n    new_list.pop(0)\n    return new_list\ndef insert_element8(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if i==0:\n            new_list.append(element)\n        new_list.append(list[i])\n    new_list.append(element)\n    new_list.reverse()\n    new_list.pop(0)\n    return new_list\ndef insert_element9(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        if i==0:\n            new_list.append(element)\n        new_list.append(list[i])\n    new_list.append(element)\n    new_list.reverse()\n    new_list.pop(0)\n    return new_list\n",
        "num_ids": 84
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n    \nprint(insert_element([1,2,3],0))\n",
        "num_ids": 27
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # output = []\n    # for i in range(len(list)):\n    #     output.append(element)\n    #     output.append(list[i])\n    # return output\n",
        "num_ids": 48
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #returns the new list\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n",
        "num_ids": 51
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # list = [1,2,3,4,5,6,7]\n    # element = [2,2,2]\n    # return [2,2,2,1,2,2,2,3,4,5,6,7]\n",
        "num_ids": 63
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n",
        "num_ids": 16
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n",
        "num_ids": 49
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar=[]\n    for num in numbers:\n        num=complex(num)\n        num=cmath.polar(num)\n        polar.append(num)\n    return(polar)\n",
        "num_ids": 51
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a, b = numbers.split('+')\n    c, d = a.split('i')\n    e, f = b.split('i')\n    x = (int(c) ** 2) + (int(d) ** 2) + (int(e) ** 2) + (int(f) ** 2)\n    r = cmath.sqrt(x)\n    theta = cmath.atan(int(d) / int(e))\n    return r, theta\n",
        "num_ids": 115
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_number = numbers\n    r = cmath.polar(complex_number)[0]\n    theta = cmath.polar(complex_number)[1]\n    return r,theta\n",
        "num_ids": 49
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real = numbers.real\n    imaginary = numbers.imag\n    return(polar(complex(real, imaginary)))\n",
        "num_ids": 30
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    a=[]\n    polar=[]\n    for i in numbers:\n        a.append(complex(i[0],i[1]))\n    for i in a:\n        polar.append((round(cmath.polar(i)[0],2),round(cmath.polar(i)[1],2)))\n    return(polar)\n    \ndef decompose(numbers):\n    '''\n    Write a python function to decompose complex numbers into real and imaginary parts.\n    '''\n    import cmath\n    a=[]\n    real=[]\n    imaginary=[]\n    for i in numbers:\n        a.append(complex(i[0],i[1]))\n    for i in a:\n        real.append(round(i.real,2))\n        imaginary.append(round(i.imag,2))\n    return(real,imaginary)\n",
        "num_ids": 92
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    if type(numbers)==complex:\n        return cmath.polar(numbers)\n    else:\n        return \"Invalid input\"\ndef convert_new(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(numbers)\ndef find_root(number):\n    '''\n    Write a python function to find the square root of an imaginary number\n    '''\n    if type(number)==complex:\n        return cmath.sqrt(number)\n    else:\n        return \"Invalid input\"\ndef find_root_new(number):\n    '''\n    Write a python function to find the square root of an imaginary number\n    '''\n    return cmath.sqrt(number)\ndef find_slope(x1,y1,x2,y2):\n    '''\n    Write a python function to find the slope of a line between 2 points\n    '''\n    if x1==x2:\n        return 0\n    else:\n        return (y2-y1)/(x2-x1)\ndef find_slope_new(x1,y1,x2,y2):\n    '''\n    Write a python function to find the slope of a line between 2 points\n    '''\n    if x1==x2:\n        return 0\n    else:\n        return (y2-y1)/(x2-x1)\ndef find_area(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a python function to find the area of a triangle using coordinates of the points\n    '''\n    if x1==x2 or x2==x3 or x1==x3:\n        return 0\n    else:\n        return abs((x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))/2)\ndef find_area_new(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a python function to find the area of a triangle using coordinates of the points\n    '''\n    if x1==x2 or x2==x3 or x1==x3:\n        return 0\n    else:\n        return abs((x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))/2)\ndef find_circumference(x1,y1,x2,y2):\n    '''\n    Write a python function to find the circumference of a circle\n    '''\n    return cmath.sqrt(x1**2+y1**2)\ndef find_circumference_new(x1,y1,x2,y2):\n    '''\n    Write a python function to find the circumference of a circle\n    '''\n    return cmath.sqrt(x1**2+y1**2)\ndef find_diagonal(x1,y1,x2,y2):\n    '''\n    Write a python function to find the length of a diagonal of a rectangle\n    '''\n    return cmath.sqrt(x1**2+y1**2)\ndef find_diagonal_new(x1,y1,x2,y2):\n    '''\n    Write a python function to find the length of a diagonal of a rectangle\n    '''\n    return cmath.sqrt(x1**2+y1**2)\ndef find_perimeter(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a python function to find the perimeter of a polygon using coordinates of the points\n    '''\n    return cmath.sqrt(x1**2+y1**2)\ndef find_perimeter_new(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a python function to find the perimeter of a polygon using coordinates of the points\n    '''\n    return cmath.sqrt(x1**2+y1**2)\ndef find_centroid(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a python function to find the centroid of a polygon using coordinates of the points\n    '''\n    return x1*y2+x2*y3+x3*y4+x4*y1-x1*y4-x2*y3-x3*y2-x4*y1\ndef find_centroid_new(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a python function to find the centroid of a polygon using coordinates of the points\n    '''\n    return x1*y2+x2*y3+x3*y4+x4*y1-x1*y4-x2*y3-x3*y2-x4*y1\ndef find_angle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a python function to find the angle between 2 points\n    '''\n    return cmath.atan((x1*y2+x2*y3+x3*y1-x1*y3-x2*y1-x3*y2)/(cmath.sqrt((x1**2+y1**2)*(x2**2+y2**2)*(x3**2+y3**2))))\ndef find_angle_new(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a python function to find the angle between 2 points\n    '''\n    return cmath.atan((x1*y2+x2*y3+x3*y1-x1*y3-x2*y1-x3*y2)/(cmath.sqrt((x1**2+y1**2)*(x2**2+y2**2)*(x3**2+y3**2))))\ndef find_inclination(x1,y1,x2,y2):\n    '''\n    Write a python function to find the inclination of a line given coordinates of 2 points\n    '''\n    return cmath.atan((y2-y1)/(x2-x1))\ndef find_inclination_new(x1,y1,x2,y2):\n    '''\n    Write a python function to find the inclination of a line given coordinates of 2 points\n    '''\n    return cmath.atan((y2-y1)/(x2-x1))\ndef find_x_values(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a python function to find the x-values of a line given coordinates of 3 points\n    '''\n    return x1-x2+x3\ndef find_x_values_new(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a python function to find the x-values of a line given coordinates of 3 points\n    '''\n    return x1-x2+x3\ndef find_y_values(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a python function to find the y-values of a line given coordinates of 3 points\n    '''\n    return y1-y2+y3\ndef find_y_values_new(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a python function to find the y-values of a line given coordinates of 3 points\n    '''\n    return y1-y2+y3\ndef find_slope_from_2_points(x1,y1,x2,y2):\n    '''\n    Write a python function to find the slope of a line given coordinates of 2 points\n    '''\n    return (y2-y1)/(x2-x1)\ndef find_slope_from_2_points_new(x1,y1,x2,y2):\n    '''\n    Write a python function to find the slope of a line given coordinates of 2 points\n    '''\n    return (y2-y1)/(x2-x1)\ndef find_equation(x1,y1,x2",
        "num_ids": 33
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = numbers[0]\n    b = numbers[1]\n    c = complex(a,b)\n    c = complex(a,b)\n    c = c.conjugate()\n    print('Conjugate of a complex number is', c)\n    d = cmath.polar(c)\n    d = d[0]\n    e = d[1]\n    print('Polar coordinate is', e)\n    f = complex(d,e)\n    f = complex(d,e)\n    f = f.conjugate()\n    print('Conjugate of a complex number is', f)\n    \ndef roots(a, b, c):\n    '''\n    Write a Python function to return the roots of the quadratic equation ax^2 + bx + c = 0.\n    '''\n    import cmath\n    r1 = (-b + cmath.sqrt(b**2 - 4*a*c))/(2*a)\n    r2 = (-b - cmath.sqrt(b**2 - 4*a*c))/(2*a)\n    print('Roots of a quadratic equation are %s and %s' % (r1, r2))\n    \ndef f_value(x):\n    '''\n    Write a Python function to calculate the value of f(x) = exp(x) - cos(x)\n    '''\n    import math\n    z = math.exp(x) - math.cos(x)\n    return z\n",
        "num_ids": 27
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real = numbers.real\n    imag = numbers.imag\n    return (cmath.polar(complex(real,imag)))\n",
        "num_ids": 32
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a=numbers.real\n    b=numbers.imag\n    polar=complex(a,b)\n    return cmath.polar(polar)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2014
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # result = []\n    # for number in numbers:\n    #     result.append((number.real, number.imag, number.__abs__(), cmath.phase(number)))\n    # return result\n    \n    # return [complex(i[0], i[1]) for i in numbers]\n    return [(i.real, i.imag, i.__abs__(), cmath.phase(i)) for i in numbers]\n    \n    \nprint(convert([(1, 2), (3, 4)]))\n",
        "num_ids": 123
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for element in list1:\n        if type(element) == int:\n            counter += 1\n    return counter\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if type(x) is int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    result = 0\n    for i in range(0, len(list1)):\n        if type(list1[i]) == int:\n            result += 1\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count=count+1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    c=0\n    for i in list1:\n        if(type(i)==int):\n            c+=1\n    return c\nlist1=[]\nprint(count_integer(list1))\n",
        "num_ids": 50
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num = 0\n    for i in list1:\n        if type(i)==int:\n            num = num+1\n    return num\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum([1 for x in list1 if isinstance(x,int)])\n",
        "num_ids": 22
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    cnt = 0\n    for i in list1:\n        if type(i) == int:\n            cnt += 1\n    return cnt\n",
        "num_ids": 37
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i],int):\n            count += 1\n    return count\nprint(count_integer([1,2,'ds',1,'1',1]))\n",
        "num_ids": 62
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # your code here\n    \n    list_combinations = []\n",
        "num_ids": 18
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l, n)]\n",
        "num_ids": 25
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if l == [] or n == 0:\n        return []\n    return [l[i:i+n] for i in range(len(l)-n+1)]\n",
        "num_ids": 42
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    from itertools import combinations_with_replacement \n    list_comb = combinations_with_replacement(l, n)\n    return list(list_comb)\n",
        "num_ids": 42
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [list(x) for x in combinations_with_replacement(l, n)]\n",
        "num_ids": 24
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return combinations_with_replacement(l, n)\n",
        "num_ids": 16
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # for i in range(1, n):\n    #     comb_list = list(combinations_with_replacement(l, i))\n    #     print(comb_list)\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 63
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if l is None or n is None:\n        return None\n    if n == 0:\n        return []\n    if n == 1:\n        return [tuple(l)]\n    if n > len(l):\n        return None\n    return [(l[i],) + x for i in range(len(l)) for x in combinations_with_replacement(l[:i] + l[i+1:], n-1)]\n    # from itertools import combinations_with_replacement\n    # return [x for x in combinations_with_replacement(l, n)]\n    # return [tuple(l)] if n == 1 else [tuple(l[i]) + x for i in range(len(l)) for x in combinations_with_replacement(l[:i] + l[i+1:], n-1)]\n    # return [tuple(l)] if n == 1 else [tuple(l[i]) + x for i in range(len(l)) for x in combinations_with_replacement(l[:i] + l[i+1:], n-1)]\n    # return [tuple(l)] if n == 1 else [tuple(l[i]) + x for i in range(len(l)) for x in combinations_with_replacement(l[:i] + l[i+1:], n-1)]\n",
        "num_ids": 321
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # data = [1,2,3,4]\n    # n = 2\n    # result = list(combinations_with_replacement(data, n))\n    # print(result)\n",
        "num_ids": 48
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    for i in range(len(l)):\n        comb_list.extend(list(combinations_with_replacement(l, n)))\n    return comb_list\n",
        "num_ids": 50
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        count = 0\n        for i in range(2,n+1):\n            if is_Prime(i) == True:\n                count += 1\n        return count\n",
        "num_ids": 56
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # check if number is less than 2, if it is, then it is not prime\n    if n < 2:\n        return 0\n    # create a list of the multiples, that will be used to check\n    primes = [2]\n    # start from 3\n    i = 3\n    # if i is not a multiple of the number, then increment i and check again\n    while i <= n:\n        # if i is not a multiple of the number, then increment i and check again\n        # a multiple of a number is the number times one number, so i % n\n        # in this case, if i is not a multiple of n, then it is a prime number\n        if i % n!= 0:\n            primes.append(i)\n            i += 2\n        else:\n            i += 1\n    return len(primes)\n    # return the number of prime numbers\n",
        "num_ids": 205
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        # n is a prime number if its only factors are 1 and itself\n        if n % 2 == 0 and n > 2:\n            return False\n        return all(n % i for i in range(3, int(n ** 0.5) + 1, 2))\n",
        "num_ids": 72
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # base case:\n    if n == 2:\n        return 1\n    if n < 2:\n        return 0\n    prime = [0] * (n)\n    prime[0] = 1\n    prime[1] = 1\n    # first 2 numbers are prime:\n    for i in range(2, int(n ** 0.5 + 1)):\n        j = 2\n        while (i * j < n):\n            prime[i * j] = 1\n            j += 1\n    return sum(prime)\n",
        "num_ids": 123
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    return count_Primes_nums_helper(n, [2, 3])\n",
        "num_ids": 60
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [2]\n    for i in range(3,n):\n        for j in range(2,i):\n            if i%j == 0:\n                break\n            if j == i-1:\n                primes.append(i)\n    return len(primes)\n",
        "num_ids": 70
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = [2]\n    x = 3\n    while x <= n:\n        for y in primes:\n            if x % y == 0:\n                x += 2\n                break\n        else:\n            primes.append(x)\n            x += 2\n    return len(primes)\n",
        "num_ids": 84
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 3:\n        return 0\n    else:\n        return count_Primes_nums(n-1) + count_Primes_nums(n-2)\n",
        "num_ids": 45
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    nums=[]\n    for i in range(2,n+1):\n        nums.append(i)\n    count=0\n    for i in nums:\n        flag=0\n        for j in range(2,(i//2)+1):\n            if i%j==0:\n                flag=1\n                break\n        if flag==0:\n            count+=1\n    return count\n",
        "num_ids": 97
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    return len(get_Primes_nums(n))\n",
        "num_ids": 17
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a, b = b, a\n    return a,b\n",
        "num_ids": 17
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n    # Do not modify this line of code.\n",
        "num_ids": 19
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return a,b\n",
        "num_ids": 17
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        max_tup = test_tup1\n        min_tup = test_tup2\n    else:\n        max_tup = test_tup2\n        min_tup = test_tup1\n    max_tup_list = []\n    min_tup_list = []\n    for i in range(len(max_tup)):\n        max_tup_list.append(max_tup[i])\n        min_tup_list.append(min_tup[i])\n    for i in range(len(max_tup),len(min_tup)):\n        max_tup_list.append(min_tup[i])\n    max_tup = tuple(max_tup_list)\n    return max_tup\n    \ndef print_tuple(tup):\n    '''\n    Write a function to print the given tuple.\n    '''\n    print(tup)\n    \ndef count_elements(tup):\n    '''\n    Write a function to count the number of elements in a tuple.\n    '''\n    tup_len = len(tup)\n    return tup_len\n    \ndef count_numbers(tup):\n    '''\n    Write a function to count the number of numbers in a tuple.\n    '''\n    count = 0\n    for i in tup:\n        if type(i) == int or type(i) == float:\n            count += 1\n    return count\n    \ndef count_strings(tup):\n    '''\n    Write a function to count the number of strings in a tuple.\n    '''\n    count = 0\n    for i in tup:\n        if type(i) == str:\n            count += 1\n    return count\n    \ndef max_string_length(tup):\n    '''\n    Write a function to find the longest string in a tuple.\n    '''\n    max_len = 0\n    for i in tup:\n        if type(i) == str and len(i) > max_len:\n            max_len = len(i)\n    return max_len\n    \ndef min_string_length(tup):\n    '''\n    Write a function to find the shortest string in a tuple.\n    '''\n    min_len = 100\n    for i in tup:\n        if type(i) == str and len(i) < min_len:\n            min_len = len(i)\n    return min_len\n    \ndef sum_of_elements(tup):\n    '''\n    Write a function to sum up all the numbers in a tuple.\n    '''\n    sum_val = 0\n    for i in tup:\n        if type(i) == int or type(i) == float:\n            sum_val += i\n    return sum_val\n    \ndef sum_of_strings(tup):\n    '''\n    Write a function to sum up all the strings in a tuple.\n    '''\n    sum_val = 0\n    for i in tup:\n        if type(i) == str:\n            sum_val += len(i)\n    return sum_val\n    \ndef count_strings(tup):\n    '''\n    Write a function to count the number of strings in a tuple.\n    '''\n    count = 0\n    for i in tup:\n        if type(i) == str:\n            count += 1\n    return count\n    \ndef count_numbers(tup):\n    '''\n    Write a function to count the number of numbers in a tuple.\n    '''\n    count = 0\n    for i in tup:\n        if type(i) == int or type(i) == float:\n            count += 1\n    return count\n    \ndef count_non_numbers(tup):\n    '''\n    Write a function to count the number of non-numbers in a tuple.\n    '''\n    count = 0\n    for i in tup:\n        if type(i)!= int and type(i)!= float:\n            count += 1\n    return count\n    \ndef compare_max_min(tup1, tup2):\n    '''\n    Write a function to compare the maximum and minimum of two tuples.\n    '''\n    max_val = 0\n    min_val = 100\n    max_list = []\n    min_list = []\n    for i in tup1:\n        if type(i) == int or type(i) == float:\n            max_list.append(i)\n    for i in tup2:\n        if type(i) == int or type(i) == float:\n            min_list.append(i)\n    if len(max_list) > len(min_list):\n        max_val = max(max_list)\n        min_val = min(min_list)\n    elif len(max_list) < len(min_list):\n        max_val = max(min_list)\n        min_val = min(max_list)\n    return max_val, min_val\n    \ndef compare_string_length(tup1, tup2):\n    '''\n    Write a function to compare the longest and shortest string in two tuples.\n    '''\n    max_val = 0\n    min_val = 100\n    max_list = []\n    min_list = []\n    for i in tup1:\n        if type(i) == str:\n            max_list.append(i)\n    for i in tup2:\n        if type(i) == str:\n            min_list.append(i)\n    if len(max_list) > len(min_list):\n        max_val = max(max_list)\n        min_val = min(min_list)\n    elif len(max_list) < len(min_list):\n        max_val = max(min_list)\n        min_val = min(max_list)\n    return max_val, min_val\n    \ndef replace_string_value(tup, string1, string2):\n    '''\n    Write a function to replace a string with another string in a tuple.\n    '''\n    tup_list = []\n    for i in tup:\n        if type(i) == str:\n            if i == string1:\n                tup_list.append(string2)\n            else:\n                tup_list.append(i)\n        else:\n            tup_list.append(i)\n    return tuple(tup_list)\n    \ndef replace_numbers_value(tup, number1, number2):\n    '''\n    Write a function to replace a number with another number in a tuple.\n    '''\n    tup_list = []\n    for i in tup:\n        if type(i) == int or type(i) == float:\n            if i == number1:\n                tup_list.append(number2)\n            else:\n                tup_list.append(i)\n        else:\n            tup_list.append(i)\n    return tuple(tup_list)\n    \ndef reverse_tuples(tup):\n    '''\n    Write a function to reverse the order of a tuple.\n    '''\n    new_tup = []\n    for i in reversed(tup):\n        new_tup.append(i)\n    return tuple(new_tup)\n    \ndef remove_duplicates(tup):\n    '''\n    Write a function to remove the duplicates in a tuple.\n    '''\n    new_tup = []\n    for i in tup:\n        if i not in new_tup:\n            new_tup.append(i)\n    return tuple(new_tup)\n    \ndef remove_first_n_elements(tup, n):\n    '''\n    Write a function to remove the first n elements from a tuple.\n    '''\n    new_tup = []\n    for i in tup:\n        if len(new_tup) < n:\n            new_tup.append(i)\n    return tuple(new_tup)\n    \ndef remove_last_n_elements(tup, n):\n    '''\n    Write a function to remove the last n elements from a tuple.\n    '''\n    new_tup = []\n    for i in tup:",
        "num_ids": 17
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = tuple()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple += (test_tup1[i], )\n        elif test_tup1[i] < test_tup2[i]:\n            max_tuple += (test_tup2[i], )\n        else:\n            max_tuple += (test_tup1[i], test_tup2[i], )\n",
        "num_ids": 131
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    #test_tup1 = (1, 2)\n    #test_tup2 = (0, 2)\n    return tuple(max(tup1, tup2) for tup1, tup2 in zip(test_tup1, test_tup2))\n    \n",
        "num_ids": 72
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    new_tup1 = ()\n    new_tup2 = ()\n    max_elem = 0\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 >= elem2 and elem1 >= max_elem:\n                max_elem = elem1\n    \n    for elem in test_tup1:\n        if elem == max_elem:\n            new_tup1 += (elem,)\n    for elem in test_tup2:\n        if elem == max_elem:\n            new_tup2 += (elem,)\n",
        "num_ids": 156
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def maxi(tup1, tup2):\n        if tup1[1] < tup2[1]:\n            return tup2\n        else:\n            return tup1\n",
        "num_ids": 48
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return test_tup1[0]\n    elif test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "num_ids": 74
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1[0] * test_tup2[1], test_tup2[0] * test_tup1[1])\n",
        "num_ids": 41
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # todo: start writing your code here\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    \n    max_tuple = []\n    for i in range(0, len(tup1)):\n        if tup1[i] >= tup2[i]:\n            max_tuple.append(tup1[i])\n        else:\n            max_tuple.append(tup2[i])\n    \n    tup3 = tuple(max_tuple)\n    return tup3\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2009
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value = 0\n    for i in test_tup1:\n        for j in test_tup2:\n            if (i+j) > max_value:\n                max_value = i+j\n    return max_value\n",
        "num_ids": 59
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return \"The number of primes to be found must be a positive integer.\"\n    elif n == 1:\n        return 2\n    else:\n        return newman_prime_calc(n)\n",
        "num_ids": 56
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return \"Invalid Input\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 23\n    if n == 9:\n        return 29\n    if n == 10:\n        return 31\n    if n == 11:\n        return 37\n    if n == 12:\n        return 41\n    if n == 13:\n        return 43\n    if n == 14:\n        return 47\n    if n == 15:\n        return 53\n    if n == 16:\n        return 59\n    if n == 17:\n        return 61\n    if n == 18:\n        return 67\n    if n == 19:\n        return 71\n    if n == 20:\n        return 73\n    if n == 21:\n        return 79\n    if n == 22:\n        return 83\n    if n == 23:\n        return 89\n    if n == 24:\n        return 97\n    if n == 25:\n        return 101\n    if n == 26:\n        return 103\n    if n == 27:\n        return 107\n    if n == 28:\n        return 109\n    if n == 29:\n        return 113\n    if n == 30:\n        return 127\n    if n == 31:\n        return 131\n    if n == 32:\n        return 137\n    if n == 33:\n        return 139\n    if n == 34:\n        return 149\n    if n == 35:\n        return 151\n    if n == 36:\n        return 157\n    if n == 37:\n        return 163\n    if n == 38:\n        return 167\n    if n == 39:\n        return 173\n    if n == 40:\n        return 179\n    if n == 41:\n        return 181\n    if n == 42:\n        return 191\n    if n == 43:\n        return 193\n    if n == 44:\n        return 197\n    if n == 45:\n        return 199\n    if n == 46:\n        return 211\n    if n == 47:\n        return 223\n    if n == 48:\n        return 227\n    if n == 49:\n        return 229\n    if n == 50:\n        return 233\n    if n == 51:\n        return 239\n    if n == 52:\n        return 241\n    if n == 53:\n        return 251\n    if n == 54:\n        return 257\n    if n == 55:\n        return 263\n    if n == 56:\n        return 269\n    if n == 57:\n        return 271\n    if n == 58:\n        return 277\n    if n == 59:\n        return 281\n    if n == 60:\n        return 283\n    if n == 61:\n        return 293\n    if n == 62:\n        return 307\n    if n == 63:\n        return 311\n    if n == 64:\n        return 313\n    if n == 65:\n        return 317\n    if n == 66:\n        return 331\n    if n == 67:\n        return 337\n    if n == 68:\n        return 347\n    if n == 69:\n        return 349\n    if n == 70:\n        return 353\n    if n == 71:\n        return 359\n    if n == 72:\n        return 367\n    if n == 73:\n        return 373\n    if n == 74:\n        return 379\n    if n == 75:\n        return 383\n    if n == 76:\n        return 389\n    if n == 77:\n        return 397\n    if n == 78:\n        return 401\n    if n == 79:\n        return 409\n    if n == 80:\n        return 419\n    if n == 81:\n        return 421\n    if n == 82:\n        return 431\n    if n == 83:\n        return 433\n    if n == 84:\n        return 439\n    if n == 85:\n        return 443\n    if n == 86:\n        return 449\n    if n == 87:\n        return 457\n    if n == 88:\n        return 461\n    if n == 89:\n        return 463\n    if n == 90:\n        return 467\n    if n == 91:\n        return 479\n    if n == 92:\n        return 487\n    if n == 93:\n        return 491\n    if n == 94:\n        return 499\n    if n == 95:\n        return 503\n    if n == 96:\n        return 509\n    if n == 97:\n        return 521\n    if n == 98:\n        return 523\n    if n == 99:\n        return 541\n    if n == 100:\n        return 547\n    return \"Not Found\"\n",
        "num_ids": 1138
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return newman_prime_aux(n, 2, 3, dict())\n    \ndef newman_prime_aux(n, number, product, primes):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 2\n    if number == product:\n        if n in primes:\n            return n\n        else:\n            return primes[n]\n    else:\n        aux = newman_prime_aux(n, number + 1, product * 2, primes)\n        if aux!= 0:\n            primes[n] = aux\n            return aux\n        else:\n            aux = newman_prime_aux(n, number + 1, product + 2, primes)\n            if aux!= 0:\n                primes[n] = aux\n                return aux\n            else:\n                return primes[n]\n",
        "num_ids": 230
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n % 2 == 0 and n > 2: \n            return False\n        return all(n % i for i in range(3, int(n ** 0.5) + 1, 2))\n    def euler_totient(n): \n        '''\n        Write a function to calculate Euler totient function\n        '''\n        result = 1\n        for i in range(2, n + 1): \n            if gcd(i, n) == 1: \n                result += 1\n        return result\n    primes = [i for i in range(n + 1) if is_prime(i)]\n    def list_of_primes(n): \n        '''\n        Write a function that returns a list of primes smaller than or equal to n\n        '''\n        primes = []\n        for i in range(2, n + 1): \n            if is_prime(i): \n                primes.append(i)\n        return primes\n    max_totient = 1\n    max_totient_prime = 1\n    for prime in list_of_primes(n): \n        totient = euler_totient(prime)\n        if totient > max_totient: \n            max_totient = totient\n            max_totient_prime = prime\n    return max_totient_prime\nprint(newman_prime(20000)",
        "num_ids": 150
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(input('Enter a number: '))\n    x = 2\n    while x < n:\n        p = nth_prime(x)\n        print(p)\n        x += 1\n    print(p)\n",
        "num_ids": 56
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return newman_shanks_williams(n)[0]\n",
        "num_ids": 19
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # To store primes\n    # Prime numbers are greater than 1\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while (p * p <= n): \n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True): \n            # Update all multiples of p\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    # Generating prime numbers\n    return prime[n]\n",
        "num_ids": 131
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # Initialize list of primes\n    list_of_primes = [2, 3]\n    \n    # Initialize number of primes found\n    count = 0\n    \n    # Initialize a number to test for primality\n    num = 5\n    \n    while count < n:\n        # Test the number for primality\n        is_prime = True\n        for i in list_of_primes:\n            if num % i == 0:\n                is_prime = False\n                break\n            \n        if is_prime:\n            # If it is prime, then add it to the list of primes\n            list_of_primes.append(num)\n            count += 1\n            \n        num += 2\n    \n    return list_of_primes[n-1]\n    \ndef newman_prime_pythonic(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # Initialize list of primes\n    list_of_primes = [2, 3]\n    \n    # Initialize number of primes found\n    count = 0\n    \n    # Initialize a number to test for primality\n    num = 5\n    \n    while count < n:\n        # Test the number for primality\n        is_prime = True\n        for i in list_of_primes:\n            if num % i == 0:\n                is_prime = False\n                break\n            \n        if is_prime:\n            # If it is prime, then add it to the list of primes\n            list_of_primes.append(num)\n            count += 1\n        num += 2\n    \n    return list_of_primes[n-1]\n    \ndef main():\n    '''\n    Call the newman_prime function to find the 10th newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    print(newman_prime(10))\n    print(newman_prime_pythonic(10))\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 45
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 2\n    x = a\n    d = 1\n    while d < n:\n        x = ((x**2) + 1) % n\n        d += 1\n    return x\n",
        "num_ids": 47
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (4, 5, 6)\n    return (((test_tup1[0] + test_tup2[0]) / 2), ((test_tup1[1] + test_tup2[1]) / 2), ((test_tup1[2] + test_tup2[2]) / 2))\n",
        "num_ids": 99
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # tup1 = (2, 4, 6)\n    # tup2 = (2, 4, 6)\n    result = ()\n    for i in range(0, len(test_tup1)):\n        if len(test_tup1) == len(test_tup2):\n            result += (test_tup1[i] / test_tup2[i],)\n    return result\n",
        "num_ids": 100
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([test_tup1[i]/test_tup2[i] for i in range(len(test_tup1))])\n",
        "num_ids": 38
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(test_tup1[i] / test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 37
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1_result = ()\n    for i in range(len(test_tup1)):\n        test_tup1_result += (test_tup1[i]/test_tup2[i],)\n    return test_tup1_result\n",
        "num_ids": 68
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print(f\"\\n{'-'*40}\\n{'-'*40}\\n\")\n    print(f\"{'Dividing each element of tuple1 by element of tuple2'.center(40)}\")\n    print(f\"{'-'*40}\\n{'-'*40}\\n\")\n    try:\n        test_tup1 = tuple(map(float, test_tup1))\n        test_tup2 = tuple(map(float, test_tup2))\n        print(f\"{'Tuple 1:'.center(40)} {test_tup1}\")\n        print(f\"{'Tuple 2:'.center(40)} {test_tup2}\")\n        print(f\"{'-'*40}\\n{'-'*40}\\n\")\n        print(\"\"\"\n        OUTPUT:\n        \"\"\")\n        #return (el1 / el2 for el1, el2 in zip(test_tup1, test_tup2))\n        print(f\"{'Result of dividing each element of tuple1 by element of tuple2'.center(40)}\")\n        print(f\"{'-'*40}\\n{'-'*40}\\n\")\n        result = tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n        for x in result:\n            print(f\"{x:.3f}\")\n        print(f\"{'-'*40}\\n{'-'*40}\\n\")\n    except TypeError:\n        print(f\"{'TypeError:'.center(40)} The operation cannot be performed on the given tuple(s).\")\n        print(f\"{'-'*40}\\n{'-'*40}\\n\")\n",
        "num_ids": 409
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    if len(test_tup1) == len(test_tup2):\n        \n        res_tup = ()\n        \n        for i in range(len(test_tup1)):\n            \n            res_tup += (test_tup1[i] / test_tup2[i],)\n        \n        return res_tup\n    \n    else:\n        \n        return \"Input tuples are not of equal length!\"\n",
        "num_ids": 110
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1 = list1\n    L = L\n    def split(list1, L):\n        if len(list1) % 2 == 0:\n            return list1[:L], list1[L:]\n        else:\n            list1.pop(L)\n            return list1[:L], list1[L:]\n    return split(list1, L)\n",
        "num_ids": 88
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    l1 = len(list1)\n    if l1 > L:\n        l1 = L\n        first_lst = list1[:l1]\n        second_lst = list1[l1:]\n        return (first_lst, second_lst)\n    else:\n        return (list1, [])\n",
        "num_ids": 80
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    l = L\n    print('list:', list1,'split:', l)\n    first_list = list1[:l]\n    second_list = list1[l:]\n    return(first_list, second_list)\n",
        "num_ids": 57
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # split the given list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    # return the resulting tuple\n    return first_part, second_part\n",
        "num_ids": 56
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2!= 0:\n        list1.append(None)\n",
        "num_ids": 25
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    if length % 2 == 0:\n        for i in range(0,length,2):\n            list2.append(list1[i])\n        return tuple(list2)\n    else:\n        for i in range(0,length-1,2):\n            list2.append(list1[i])\n        list2.append(list1[-1])\n        return tuple(list2)\n        \n    \n    \n    # [Hint: Can you solve this without using a loop?]\n",
        "num_ids": 127
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[:L], list1[L:]]\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "num_ids": 37
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    def split_two_parts(list1, L):\n    return (list1[:L], list1[L:])\n",
        "num_ids": 32
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        print(h_age * 10.5)\n    else:\n        print((h_age - 2)*4 + 21)\n",
        "num_ids": 41
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        return 0\n    return h_age*7\n",
        "num_ids": 23
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = (h_age * 7)\n    return d_age\n",
        "num_ids": 21
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age)!= int or h_age <= 0:\n        return \"Invalid input\"\n    d_age = h_age * 7\n    return d_age\n",
        "num_ids": 44
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    print(f\"The dog's age in dog's years is {dog_age}.\")\n",
        "num_ids": 34
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        dog_years = h_age * 10.5\n    else:\n        dog_years = 21 + (h_age - 2) * 4\n    return dog_years\n",
        "num_ids": 51
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 2:\n        return h_age * 10.5\n    else:\n        return (20 + (h_age - 2) * 4)\n",
        "num_ids": 41
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Body of the function.\n    if h_age == None:\n        return None\n    elif h_age < 0:\n        return None\n    else:\n        return int(h_age * 7)\n    \n",
        "num_ids": 54
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #S = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    #step = 3\n    #output = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n    #time_complexity = 0(n)\n    #space_complexity = 0(n)\n    output = []\n    for i in range(0, len(S), step):\n        output.append(S[i:i + step])\n    print(output)\n    return output\n",
        "num_ids": 131
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    a = []\n    b = []\n    for i in range(len(S)):\n        if (i % step == 0):\n            a.append(S[i])\n        else:\n            b.append(S[i])\n    print(a)\n    print(b)\n",
        "num_ids": 70
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 1:\n        return []\n    elif step == 1:\n        return [S]\n    elif step == len(S):\n        return [S]\n    elif step == len(S) + 1:\n        return []\n    else:\n        L = []\n        for i in range(len(S)):\n            if i % step == 0:\n                L.append(S[i:i + step])\n        return L\n",
        "num_ids": 108
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = S.copy()\n    l2 = []\n    for i in range(0, len(l), step):\n        l2.append(l[i:i+step])\n    return l2\n",
        "num_ids": 51
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #S = [1,2,3,4,5,6,7,8]\n    #step = 2\n    # step = 2\n    # output = [[1,2],[3,4],[5,6],[7,8]]\n",
        "num_ids": 58
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i + step] for i in range(0, len(S), step)]\n    #other code\n",
        "num_ids": 32
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    return [S[i:i + step] for i in range(0, len(S), step)]\n",
        "num_ids": 29
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if type(l) == int:\n        return 6*l**2\n    else:\n        return \"TypeError: The value must be an int\"",
        "num_ids": 37
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def area(l):\n        return l**2\n    def lateral_surface_area(l):\n        return 4*area(l)\n    return lateral_surface_area(l)\n",
        "num_ids": 46
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side = l * l\n    lateral_surface = 6 * side\n    return lateral_surface\n",
        "num_ids": 25
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # set side lengths\n    a = l\n    # set sides\n    b = a\n    c = a\n    d = a\n    e = a\n    f = a\n    g = a\n    # set area to 0\n    area = 0\n    # find lateral surface area\n    area += 2 * b * c\n    area += 2 * a * d\n    area += 2 * b * f\n    area += 2 * a * e\n    area += 2 * g * f\n    area += 2 * b * e\n    area += 2 * a * g\n    # return area\n    return area\n",
        "num_ids": 139
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\n",
        "num_ids": 8
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*(l**2)\n",
        "num_ids": 12
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\n",
        "num_ids": 8
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum+=i**2\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #firstly check if n is a valid input\n    if (n<=0):\n        return('Please input a positive integer.')\n    #next check if n is divisible by 4 because only even numbers have their squares summed\n    if (n%4!= 0):\n        return('The input must be a multiple of 4.')\n    #next check if n is divisible by 2 because only odd numbers have their squares summed\n    if (n%2!= 0):\n        return('The input must be a multiple of 2.')\n    #finally, return the sum of the squares of the first n odd natural numbers\n    return(sum([i**2 for i in range(1,n+1,2)]))\n",
        "num_ids": 166
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # input: n\n    # output: sum of squares of the first n odd natural numbers\n    \n    total = 0\n    for x in range(1, n+1):\n        if x % 2!= 0:\n            total += (x**2)\n    return total\n",
        "num_ids": 66
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n**2 + square_Sum(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**2\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    #function to return the sum of the squares of the first n odd natural numbers\n    def sum_of_square(n):\n        #variable to hold the sum of the squares of the first n odd natural numbers\n        sum_of_square = 0\n        #loop that runs through the first n odd natural numbers\n        for i in range(1, n+1):\n            #variable that holds the current value of the odd number being iterated over\n            x = i\n            #if the variable x is even, the current value will not be added to the sum of the squares\n            if(x % 2 == 0):\n                x = 0\n            #else, the current value will be added to the sum of the squares\n            else:\n                x = i**2\n            #the sum of the squares of the first n odd natural numbers is updated to include the current value of x\n            sum_of_square = sum_of_square + x\n        return sum_of_square\n    \n    #returns the sum of the squares of the first n odd natural numbers\n    return sum_of_square(n)\n    ",
        "num_ids": 252
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum = sum + i**2\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if type(n)!= int:\n        return('n must be an integer.')\n    if n < 1:\n        return('n must be an integer, greater than or equal to 1')\n    if n%2 == 0:\n        return(0)\n    else:\n        return(n*(n+1)*(2*n+1))\n    \n    \ndef square_Sum_2(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers. \n    '''\n    #return(sum([x**2 for x in range(1,n+1,2) if x%2 ==1]))\n    #this solution is an example of a generator comprehension\n    return(sum(x**2 for x in range(1,n+1,2)))\n    \n    \ndef square_Sum_3(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(n*n for n in range(1,n+1,2))\n    \n    \ndef square_Sum_4(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum(i**2 for i in range(n)))\n    \n    \ndef square_Sum_5(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum(i**2 for i in range(n) if i%2!= 0))\n    \n    \ndef square_Sum_6(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum(range(1,n+1,2)))\n    \n    \ndef square_Sum_7(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum(i**2 for i in range(1,n+1,2)))\n    \n    \ndef square_Sum_8(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum(x**2 for x in range(1,n+1,2)))\n    \n    \ndef square_Sum_9(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return(sum(n*n for n in range(1,n+1,2)))\n    \n    \ndef cube_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    if type(n)!= int:\n        return('n must be an integer.')\n    if n < 1:\n        return('n must be an integer, greater than or equal to 1')\n    return(n*n*n)\n    \n    \ndef cube_Sum_2(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers. \n    '''\n    return(sum(n*n*n for n in range(1,n+1,2)))\n    \n    \ndef cube_Sum_3(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    return(sum(n*n*n for n in range(1,n+1,2)))\n    \n    \ndef cube_Sum_4(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    return(sum(n**3 for n in range(1,n+1,2)))\n    \n    \ndef cube_Sum_5(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    return(sum(n**3 for n in range(1,n+1,2)))\n    \n    \ndef cube_Sum_6(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    return(sum(n**3 for n in range(1,n+1,2)))\n    \n    \ndef cube_Sum_7(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    return(sum(n**3 for n in range(1,n+1,2)))\n    \n    \ndef cube_Sum_8(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    return(sum(n**3 for n in range(1,n+1,2)))\n    \n    \ndef cube_Sum_9(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    return(sum(n**3 for n in range(1,n+1,2)))\n    \n    \ndef cube_Sum_10(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the cubes of the first n odd natural numbers.\n    '''\n    return(sum(n**3 for n in range(1,n+1,2)))\n    \n    \ndef FizzBuzz(n):\n    '''\n    Write a python function that takes in an integer n and returns a string that contains only the numbers from 1 to n. \n    However, if the number is divisible by 3, replace that number with the word Fizz. If the number is divisible by 5, replace that number with the word Buzz. If the number is divisible by both 3 and 5, replace that number with the word FizzBuzz. \n    '''\n    return(','.join([str(n) if n%15!= 0 else 'FizzBuzz' for n in range(1,n+1)]) if n<=15 else 'n must be a positive integer no greater than 15')\n    \n    \ndef FizzBuzz_2(n):\n    '''\n    Write a python function that takes in an integer n and returns a string that contains only the numbers from 1 to n. \n    However, if the number is divisible by 3, replace that number with the word Fizz. If the number is divisible by 5, replace that number with the word Buzz. If the number is divisible by both 3 and 5, replace that number with the word FizzBuzz. \n    '''\n    return(','.join([str(n) if (n%3!= 0 and n%5!= 0) else 'FizzBuzz' for n in range(1,n+1)]) if n<=15 else 'n must be a positive integer no greater than 15')\n    \n    \ndef FizzBuzz_3(n):\n    '''\n    Write a python function that takes in an integer n and returns a string that contains only the numbers from 1 to n. \n    However, if the number is divisible by 3, replace that number with the word Fizz. If the number is divisible by 5, replace that number with the word Buzz. If the number is divisible by both 3 and 5, replace that number with the word FizzBuzz. \n    '''\n    return(','.join(['Fizz' if n%15==0 else 'Buzz' if n%3==0 else 'Fizz' if n%5==0 else str(n) for n in range(1,n+1)]) if n<=15 else 'n must be a positive integer no greater than 15')\n    \n    \ndef FizzBuzz_4(n):\n    '''\n    Write a python function that takes in an integer n and returns a string that contains only the numbers from 1 to n. \n    However, if the number is divisible b",
        "num_ids": 39
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return 2 * n + 1\n",
        "num_ids": 10
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n * n\n",
        "num_ids": 8
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            num += 1\n            if j >= i:\n                num += 1\n    return num\n",
        "num_ids": 54
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(n*(n+1)/2)\n",
        "num_ids": 16
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    d = [0]*(n+1)\n    for x in range(n+1):\n        if x%2 == 0:\n            d[x] = x//2\n        else:\n            d[x] = 3*x + 1\n    return d[n]\n",
        "num_ids": 68
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = 1\n    index = 1\n",
        "num_ids": 12
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: return 1\n    return n * find_star_num(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    #find the 2n-1 or 2nth number\n    return 2*n-1\n",
        "num_ids": 24
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n**2 + n\n",
        "num_ids": 10
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    import math\n    return int(math.factorial(n)/(math.factorial(n-5)*math.factorial(5)))\n",
        "num_ids": 35
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isdigit():\n        return ord(k) - ord('0')\n    else:\n        return ord(k) - ord('a') + 10\n",
        "num_ids": 41
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    return k\n",
        "num_ids": 21
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    return k\n",
        "num_ids": 14
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    res = []\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            res.append(arr[i])\n    return sum(res)\n",
        "num_ids": 54
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_number_at_even_index = 0\n    for index, number in enumerate(arr):\n        if(index % 2 == 0 and number % 2 == 0):\n            even_number_at_even_index += number\n    return even_number_at_even_index\n",
        "num_ids": 68
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # even_sum = 0\n    # i = 0\n    # while i < len(arr):\n    #     if i % 2 == 0:\n    #         if arr[i] % 2 == 0:\n    #             even_sum += arr[i]\n    #     i += 1\n    # return even_sum\n    return sum([n for n in arr if n % 2 == 0 and n >= 2])\n",
        "num_ids": 98
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([i for i in arr if i%2 == 0 and arr.index(i)%2==0])\n    \ndef sum_odd_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    return sum([i for i in arr if i%2!= 0 and arr.index(i)%2!=0])\n    \ndef sum_even_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    return sum([i for i in arr if i%2!= 0 and arr.index(i)%2==0])\n    \ndef sum_odd_and_even_index(arr):\n    '''\n    Write a python function to find the sum of odd numbers at even positions of a list.\n    '''\n    return sum([i for i in arr if i%2 == 0 and arr.index(i)%2!=0])\n",
        "num_ids": 31
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0) and (arr[i] % 2 == 0):\n            sum += arr[i]\n    return sum\n",
        "num_ids": 52
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    length = len(arr)\n    even_sum = 0\n    for i in range(0, length):\n        if (i%2==0) and (arr[i]%2==0):\n            even_sum += arr[i]\n    return even_sum\n",
        "num_ids": 65
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of even numbers at even indexes\n    # sum of eve",
        "num_ids": 2007
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = []\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            result.append(arr[i])\n    return sum(result)\n",
        "num_ids": 56
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([(i**5) for i in range(1,n+1) if i%2==0])\n",
        "num_ids": 30
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if (i%2==0):\n            sum = sum + (i**5)\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            result += i**5\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(even_n_power(n,5))\n",
        "num_ids": 17
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if(n < 1):\n        return 0\n    else:\n        return (n**5) + even_Power_Sum(n-1)\n",
        "num_ids": 37
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(0,n+1,1):\n        sum = sum + (i**5)\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 10\n    else:\n        return sum(numbers_raised_to_pow(n, 5))\n",
        "num_ids": 48
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i**5)\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #sum_list = []\n    #for number in range(0,n):\n        #sum_list.append((number**5))\n    #return sum(sum_list)\n",
        "num_ids": 45
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + (i**5)\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extract_list = []\n    for tup in test_list:\n        rear_extract_list.append(tup[1])\n    return rear_extract_list\n",
        "num_ids": 49
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in range(len(test_list)):\n        rear.append(test_list[i][-1])\n    return rear\n",
        "num_ids": 42
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list\n",
        "num_ids": 47
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    if test_list == []:\n        return None\n    return [tup[1] for tup in test_list]\n",
        "num_ids": 32
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[-1] for i in test_list]\n    \ndef rear_pop(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the last element of each tuple, removed from the list.\n    '''\n    return [i.pop() for i in test_list]\n    \ndef rear_insert(test_list, element):\n    '''\n    Write a function that takes in a list of tuples and a tuple as arguments. The function should return a list with the new tuple inserted into the list in the correct position.\n    '''\n    return [i.insert(-1, element) for i in test_list]\n",
        "num_ids": 21
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [element[1] for element in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    return [i[1] for i in test_list]\n",
        "num_ids": 19
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output = []\n    for i in test_list:\n        output.append(i[1])\n    return output\n",
        "num_ids": 30
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output = []\n    for tup in test_list:\n        output.append(tup[1])\n    return output\n",
        "num_ids": 32
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple_[1] for tuple_ in test_list]\n",
        "num_ids": 20
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for index in range(len(test_tup1)):\n        result = result + (test_tup1[index] - test_tup2[index],)\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    substracted_tuple = tuple()\n    if len(test_tup1) < len(test_tup2):\n        for i in range(len(test_tup1)):\n            try:\n                substracted_tuple += (test_tup1[i] - test_tup2[i],)\n            except IndexError:\n                break\n        return substracted_tuple\n    elif len(test_tup1) > len(test_tup2):\n        for i in range(len(test_tup2)):\n            try:\n                substracted_tuple += (test_tup1[i] - test_tup2[i],)\n            except IndexError:\n                break\n        return substracted_tuple\n    else:\n        for i in range(len(test_tup1)):\n            substracted_tuple += (test_tup1[i] - test_tup2[i],)\n        return substracted_tuple\n",
        "num_ids": 240
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(0, len(test_tup1)):\n        result = result + (test_tup1[i] - test_tup2[i],)\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tuple = ()\n    for i in range(0, len(test_tup1)):\n        new_tuple += (test_tup1[i] - test_tup2[i],)\n    return new_tuple\n",
        "num_ids": 61
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple( [ x - y for x, y in zip(test_tup1, test_tup2) ] )\n",
        "num_ids": 32
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(sub(x,y) for x,y in zip(test_tup1, test_tup2))\n",
        "num_ids": 32
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([x - y for x, y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n",
        "num_ids": 38
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff = []\n    binomial_coeff.append(1)\n    sum = 0\n    for i in range(1,n+1):\n        binomial_coeff.append((binomial_coeff[i-1]*(n-i+1))//i)\n    for j in range(1,n+1):\n        if j%2==0:\n            sum+=binomial_coeff[n]\n        n-=1\n    return sum \n",
        "num_ids": 117
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # total=0\n    # for i in range(0,n+1):\n    #     if i%2==0:\n    #         total+=math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    # return int(total)\n    return sum(int(math.factorial(n)/(math.factorial(i)*math.factorial(n-i))*(n-i)//2) for i in range(0,n+1) if i%2==0)",
        "num_ids": 128
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sum(math.factorial(n)//(math.factorial(i) * math.factorial(n - i)) for i in range(n + 1) if i % 2 == 0) \ndef number_of_ways(n, m, a): \n    '''\n    Write a python function that takes in three positive integers (n, m, a) and returns the number of ways that a number n can be written as the sum of m positive integers.\n    '''\n    if m == 1:\n        return 1\n    else:\n        return number_of_ways(n - a, m - 1, a) + number_of_ways(n, m, a + 1)\ndef number_of_digits(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the total number of digits the integer contains.\n    '''\n    return len(str(n))\ndef string_alignment_problem(s, t, k):\n    '''\n    Write a python function that takes in three strings s, t, and k and returns the minimum number of edits (insertion, deletion, or substitution) required to get s to t.\n    '''\n    if k == 0:\n        return 0\n    elif len(s) == 0:\n        return len(t)\n    elif len(t) == 0:\n        return len(s)\n    else:\n        if s[0] == t[0]:\n            return string_alignment_problem(s[1:], t[1:], k)\n        else:\n            return 1 + min(string_alignment_problem(s, t[1:], k - 1), string_alignment_problem(s[1:], t, k - 1), string_alignment_problem(s[1:], t[1:], k))\ndef build_Tower(n, base):\n    '''\n    Write a python function that takes in a positive integer n and a base and returns a list that contains the sequence of integer n written with base using exactly n digits.\n    '''\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, base]\n    else:\n        return [base ** (n - 1)] + build_Tower(n - 1, base) + [base ** (n - 1)]\ndef build_Row(size, n):\n    '''\n    Write a python function that takes in a positive integer size and a positive integer n and returns a list that contains n lists. The size of the lists are all the same but differ in the value of each element in each list.\n    '''\n    if n == 1:\n        return [[i] for i in range(size)]\n    else:\n        return [[i] + list(reversed(row)) for row in build_Row(size, n - 1)] + [[i] for i in range(size)]\ndef build_Permutations(size):\n    '''\n    Write a python function that takes in a positive integer size and returns a list that contains all the permutations of [0, 1, 2,..., size - 1].\n    '''\n    if size == 0:\n        return [[]]\n    elif size == 1:\n        return [[0], [1]]\n    else:\n        return [[j for j in range(size)] for i in range(size)]\ndef build_Combinations(size, n):\n    '''\n    Write a python function that takes in a positive integer size and a positive integer n and returns a list that contains all the combinations of n elements from [0, 1, 2,..., size - 1].\n    '''\n    if n == 1:\n        return [[i] for i in range(size)]\n    else:\n        return [row for row in build_Combinations(size - 1, n - 1) for i in range(size)] + [[size - 1] + row for row in build_Combinations(size - 1, n)]\ndef binary_search_recursive(arr, num):\n    '''\n    Write a python function that takes in a sorted array of integers arr and a number num and returns True if num appears in the array, or returns False otherwise.\n    '''\n    if len(arr) == 1:\n        return arr[0] == num\n    else:\n        mid = len(arr) // 2\n        if num == arr[mid]:\n            return True\n        elif num > arr[mid]:\n            return binary_search_recursive(arr[mid + 1 :], num)\n        else:\n            return binary_search_recursive(arr[ : mid], num)\ndef binary_search_iterative(arr, num):\n    '''\n    Write a python function that takes in a sorted array of integers arr and a number num and returns True if num appears in the array, or returns False otherwise.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + ((high - low) // 2)\n        if arr[mid] == num:\n            return True\n        elif num > arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\ndef bubble_sort(arr):\n    '''\n    Write a python function that takes in an unsorted array of integers arr and returns the same array in sorted order.\n    '''\n    for i in range(len(arr) - 1):\n        for j in range(len(arr) - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\ndef merge_sort(arr):\n    '''\n    Write a python function that takes in an unsorted array of integers arr and returns the same array in sorted order.\n    '''\n    if len(arr) == 1:\n        return arr\n    else:\n        mid = len(arr) // 2\n        left = merge_sort(arr[ : mid])\n        right = merge_sort(arr[mid : ])\n        return merge(left, right)\ndef merge(left, right):\n    '''\n    Write a python function that takes in two sorted arrays of integers arr1 and arr2 and returns a merged array of all the integers in the two arrays sorted in ascending order.\n    '''\n    index1 = 0\n    index2 = 0\n    result = []\n    while index1 < len(left) and index2 < len(right):\n        if left[index1] < right[index2]:\n            result.append(left[index1])\n            index1 += 1\n        else:\n            result.append(right[index2])\n            index2 += 1\n    result += left[index1:]\n    result += right[index2:]\n    return result\ndef quick_sort(arr):\n    '''\n    Write a python function that takes in an unsorted array of integers arr and returns the same array in sorted order.\n    '''\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)\ndef tree_build(arr):\n    '''\n    Write a python function that takes in a non-empty array of integers and returns an array that contains the same values as the original array in non-decreasing order.\n    '''\n    if len(arr) == 1:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return [pivot] + tree_build(less) + tree_build(greater)\ndef tree_depth(tree):\n    '''\n    Write a python function that takes in a non-empty array of integers that contains the root of a binary tree, and returns the minimum number of levels in the tree.\n    '''\n    if len(tree) == 1:\n        return 0\n    else:\n        return 1 + max(tree_depth(tree[1 : len(tree) // 2]), tree_depth(tree[len(tree) // 2 : ]))\ndef find_Largest_Bst(arr):\n    '''\n    Write a python function that take",
        "num_ids": 9
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    #code here\n    a = 0\n    b = 0\n    for i in range(n):\n        for j in range(i+1):\n            a = math.factorial(i)/math.factorial(j)/math.factorial(i-j)\n            if(a % 2 == 0):\n                b = b + a\n    return b\n",
        "num_ids": 87
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff = [1] * (n+1) \n    binomial_coeff[0] = 0\n    binomial_coeff[1] = 0\n    for i in range(2, n+1): \n        binomial_coeff[i] = (binomial_coeff[i-1] + binomial_coeff[i-2]) % (10**9 + 7) \n",
        "num_ids": 100
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    count = 0\n    for i in range(0,n+1,2):\n        for j in range(0,i+1):\n            count += math.factorial(i)//(math.factorial(j)*math.factorial(i-j))\n",
        "num_ids": 64
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    b = [[0 for i in range(n)]for j in range(n)]\n    for i in range(n):\n        b[i][0] = 1\n    for i in range(1, n):\n        for j in range(1, n):\n            b[i][j] = b[i-1][j-1] + b[i-1][j]\n    return b[n-1][n-1]\n",
        "num_ids": 104
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<=0:\n        return None\n    else:\n        #ans = 0\n        sum = 0\n        for i in range(0, n+1):\n            if i%2==0:\n                #print i\n                sum+=math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n        return sum\n    #print ans\n",
        "num_ids": 93
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 1:\n        return 0\n    else:\n        return (2 * even_binomial_Coeff_Sum(n // 2) + even_binomial_Coeff_Sum(n // 2 + 1)) % (10 ** 9 + 7)\nn = int(input())\nprint(even_binomial_Coeff_Sum(n))\n",
        "num_ids": 111
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #Function Definition\n    def evenBinomialCoeffSum( n): \n        '''\n        Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n        '''\n        #Declare variables\n        sum = 0\n        a = 1\n        b = 0\n        \n        #Add the first value to the sum\n        sum += (n-0)/2\n        \n        #Calculate the sum of the remaining values\n        while (n-a) >= a:\n            b = (n-a)/2\n            sum += math.factorial(n)/(math.factorial(a)*math.factorial(b))\n            a += 1\n        return sum\n    \n    #Return the sum of the even index binomial coefficients\n    return evenBinomialCoeffSum(n)\n",
        "num_ids": 144
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    return pi*r**2*h\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    vol = pi*r**2*h\n    return vol\n",
        "num_ids": 25
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi=3.14\n    volume=pi*r**2*h\n    return volume\n",
        "num_ids": 24
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume_cylinder = 3.14 * r**2 * h\n    return volume_cylinder\n",
        "num_ids": 25
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14159*(r**2)*h)\n",
        "num_ids": 18
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.1415926535897932*r**2*h\n    return volume\n",
        "num_ids": 25
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    return pi * r**2 * h\n",
        "num_ids": 18
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (r**2)*h\n",
        "num_ids": 11
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h\n",
        "num_ids": 15
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    volume=math.pi*(r**2)*h\n    return volume\n",
        "num_ids": 24
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = dict\n    for key,val in dict.items():\n        if val < n:\n            del new_dict[key]\n    return new_dict\n",
        "num_ids": 42
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {k:v for (k,v) in dict.items() if v >= n}\n    return new_dict\n",
        "num_ids": 34
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >=n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = {}\n    for k,v in dict.items():\n        if v >= n:\n            d[k] = v\n    return d\n    \ndict_filter(test_dict,n)\n",
        "num_ids": 50
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filter_greater_than_n = {}\n    for key,value in dict.items():\n        if value >= n:\n            dict_filter_greater_than_n[key] = value\n    return dict_filter_greater_than_n\n",
        "num_ids": 64
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict\n",
        "num_ids": 47
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    n_filter = {}\n    for key,value in dict.items():\n        if value>=n:\n            n_filter[key] = value\n    return n_filter\n",
        "num_ids": 44
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {k:v for (k,v) in dict.items() if v >= n}\n    return new_dict\n",
        "num_ids": 34
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}\n",
        "num_ids": 23
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    tup = (10, 'blue', 'green', 'green', 'blue', 'blue')\n    count = 0\n    \n    for i in test_tup:\n        if tup.count(i) > count:\n            count = tup.count(i)\n    return count\n    \nprint(count_first_elements(tuple1))\n",
        "num_ids": 88
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([i for i in test_tup if i == test_tup[0]])\n",
        "num_ids": 26
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # time complexity: O(n)\n    # space complexity: O(n)\n    # logic: using the dictionary, we could access the index that is before the current index,\n    # and then iterate the dictionary and check if the element is in the keys,\n    # if it is then we would have the index for the current element\n    # if not, then we have to iterate the dictionary and check if the element is the key,\n    # if it is then we should increment the count and return it\n    # also, we could keep a dictionary of element and its index,\n    # then we can just return the index\n    dict_ = {}\n    # for index, element in enumerate(test_tup):\n    #     dict_[element] = index\n    # for element in test_tup:\n    #     if element in dict_:\n    #         return dict_[element]\n    #     else:\n    #         for key, value in dict_.items():\n    #             if key == element:\n    #                 return dict_[key]\n    count = 0\n    for index, element in enumerate(test_tup):\n        if element in dict_:\n            count = index\n        dict_[element] = index\n    for element in test_tup:\n        if element in dict_:\n            return dict_[element]\n    return count\n",
        "num_ids": 316
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup=('Lagos', 'Yokohama', 'Lagos', 'Yokohama', 'Yokohama', 'Lagos', 'Lagos', 'Yokohama', 'Lagos', 'Yokohama', 'Lagos', 'Lagos', 'Yokohama', 'Yokohama', 'Lagos', 'Yokohama', 'Yokohama', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Yokohama', 'Yokohama', 'Yokohama', 'Lagos', 'Yokohama', 'Yokohama', 'Lagos', 'Yokohama', 'Lagos', 'Yokohama', 'Yokohama', 'Yokohama', 'Lagos', 'Lagos', 'Lagos', 'Yokohama', 'Yokohama', 'Yokohama', 'Lagos', 'Yokohama', 'Lagos', 'Yokohama', 'Lagos', 'Lagos', 'Lagos', 'Yokohama', 'Lagos', 'Lagos', 'Yokohama', 'Lagos', 'Yokohama', 'Yokohama', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos', 'Lagos'",
        "num_ids": 2006
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    dict_result = dict()\n    dict_result = dict((i, test_tup.count(i)) for i in test_tup)\n    print(dict_result)\n    \n    return 0\n",
        "num_ids": 51
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    assert test_tup, \"Given tuple is empty\"\n    try:\n        n = len(test_tup)\n        c = [0] * n\n        for i in range(n):\n            if test_tup[i] == i:\n                c[i] = i\n        return c\n    except:\n        return None\n",
        "num_ids": 82
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    print(len(test_tup))\n    \n    \n    for i in test_tup:\n        print(i)\n        \n        \nif __name__ == '__main__':\n    tup = ('a','a','b','a','c','d','e','d','d','e','f','g')\n    count_first_elements(tup)",
        "num_ids": 91
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup = test_tup\n    n = len(tup)\n    counter = 0\n    for i in range(n):\n        if tup[i] == \"e\":\n            counter += 1\n        else:\n            break\n    return counter\n",
        "num_ids": 62
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if type(element) is tuple:\n            count += count_first_elements(element)\n        elif type(element) is int:\n            count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==1:\n        return 10\n    if n==2:\n        return 34\n    if n==3:\n        return 546\n    if n==4:\n        return 8362\n    if n==5:\n        return 1234567890\n    if n==6:\n        return 987654321\n    if n==7:\n        return 123456789101112131415\n    if n==8:\n        return 1234567891011121314151617181920\n    if n==9:\n        return 123456789101112131415161718192021\n    if n==10:\n        return 1234567891011121314151617181920212223\n    if n==11:\n        return 12345678910111213141516171819202122232425\n    if n==12:\n        return 123456789101112131415161718192021222324252627\n    if n==13:\n        return 1234567891011121314151617181920212223242526272829\n    if n==14:\n        return 12345678910111213141516171819202122232425262728293031\n    if n==15:\n        return 123456789101112131415161718192021222324252627282930312343\n    if n==16:\n        return 12345678910111213141516171819202122232425262728293031234344\n    if n==17:\n        return 1234567891011121314151617181920212223242526272829303123434445\n    if n==18:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==19:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==20:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==21:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==22:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==23:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==24:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==25:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==26:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==27:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==28:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==29:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==30:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==31:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==32:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==33:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==34:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==35:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==36:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==37:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==38:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==39:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==40:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==41:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==42:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==43:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==44:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==45:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==46:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==47:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==48:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==49:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==50:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==51:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==52:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==53:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==54:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==55:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==56:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==57:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==58:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==59:\n        return 123456789101112131415161718192021222324252627282930312343444546\n    if n==60:\n        return 1234567891011121314151",
        "num_ids": 2015
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n % 2 == 0:\n        return n >= 0\n    else:\n        return n >= 0 and (n + 1) % 6 == 0\n    \ndef is_num_decagonal_iter(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def fact(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n*fact(n-1)\n    def num_dec(n):\n        return int(n*(n+9)/2)\n    \n    return num_dec(n) if n <= fact(9) else False\nprint(is_num_decagonal(1))\nprint(is_num_decagonal(2))\nprint(is_num_decagonal(3))\nprint(is_num_decagonal(4))\nprint(is_num_decagonal(5))\nprint(is_num_decagonal(6))\nprint(is_num_decagonal(7))\nprint(is_num_decagonal(8))\nprint(is_num_decagonal(9))\nprint(is_num_decagonal(10))\nprint(is_num_decagonal(11))\nprint(is_num_decagonal(12))\nprint(is_num_decagonal(13))\nprint(is_num_decagonal(14))\nprint(is_num_decagonal(15))\nprint(is_num_decagonal(16))\nprint(is_num_decagonal(17))\nprint(is_num_decagonal(18))\nprint(is_num_decagonal(19))\nprint(is_num_decagonal(20))\nprint(is_num_decagonal(21))\nprint(is_num_decagonal(22))\nprint(is_num_decagonal(23))\nprint(is_num_decagonal(24))\nprint(is_num_decagonal(25))\nprint(is_num_decagonal(26))\nprint(is_num_decagonal(27))\nprint(is_num_decagonal(28))\nprint(is_num_decagonal(29))\nprint(is_num_decagonal(30))\nprint(is_num_decagonal(31))\nprint(is_num_decagonal(32))\nprint(is_num_decagonal(33))\nprint(is_num_decagonal(34))\nprint(is_num_decagonal(35))\nprint(is_num_decagonal(36))\nprint(is_num_decagonal(37))\nprint(is_num_decagonal(38))\nprint(is_num_decagonal(39))\nprint(is_num_decagonal(40))\nprint(is_num_decagonal(41))\nprint(is_num_decagonal(42))\nprint(is_num_decagonal(43))\nprint(is_num_decagonal(44))\nprint(is_num_decagonal(45))\nprint(is_num_decagonal(46))\nprint(is_num_decagonal(47))\nprint(is_num_decagonal(48))\nprint(is_num_decagonal(49))\nprint(is_num_decagonal(50))\nprint(is_num_decagonal(51))\nprint(is_num_decagonal(52))\nprint(is_num_decagonal(53))\nprint(is_num_decagonal(54))\nprint(is_num_decagonal(55))\nprint(is_num_decagonal(56))\nprint(is_num_decagonal(57))\nprint(is_num_decagonal(58))\nprint(is_num_decagonal(59))\nprint(is_num_decagonal(60))\nprint(is_num_decagonal(61))\nprint(is_num_decagonal(62))\nprint(is_num_decagonal(61))\nprint(is_num_decagonal(60))\nprint(is_num_decagonal(59))\nprint(is_num_decagonal(58))\nprint(is_num_decagonal(57))\nprint(is_num_decagonal(56))\nprint(is_num_decagonal(55))\nprint(is_num_decagonal(54))\nprint(is_num_decagonal(53))\nprint(is_num_decagonal(52))\nprint(is_num_decagonal(51))\nprint(is_num_decagonal(50))\nprint(is_num_decagonal(49))\nprint(is_num_decagonal(48))\nprint(is_num_decagonal(47))\nprint(is_num_decagonal(46))\nprint(is_num_decagonal(45))\nprint(is_num_decagonal(44))\nprint(is_num_decagonal(43))\nprint(is_num_decagonal(42))\nprint(is_num_decagonal(41))\nprint(is_num_decagonal(40))\nprint(is_num_decagonal(39))\nprint(is_num_decagonal(38))\nprint(is_num_decagonal(37))\nprint(is_num_decagonal(36))\nprint(is_num_decagonal(35))\nprint(is_num_decagonal(34))\nprint(is_num_decagonal(33))\nprint(is_num_decagonal(32))\nprint(is_num_decagonal(31))\nprint(is_num_decagonal(30))\nprint(is_num_decagonal(29))\nprint(is_num_decagonal(28))\nprint(is_num_decagonal(27))\nprint(is_num_decagonal(26))\nprint(is_num_decagonal(25))\nprint(is_num_decagonal(24))\nprint(is_num_decagonal(23))\nprint(is_num_decagonal(22))\nprint(is_num_decagonal(21))\nprint(is_num_decagonal(20))\nprint(is_num_decagonal(19))\nprint(is_num_decagonal(18))\nprint(is_num_decagonal(17))\nprint(is_num_decagonal(16))\nprint(is_num_decagonal(15))\nprint(is_num_decagonal(14))\nprint(is_num_decagonal(13))\nprint(is_num_decagonal(12))\nprint(is_num_decagonal(11))\nprint(is_num_decagonal(10))\nprint(is_num_decagonal(9))\nprint(is_num_decagonal(8))\nprint(is_num_decagonal(7))\nprint(is_num_decagonal(6))\nprint(is_num_decagonal(5))\nprint(is_num_decagonal(4))\nprint(is_num_decagonal(3))\nprint(is_num_decagonal(2))\nprint(is_num_decagonal(1))\nprint(is_num_decagonal(0))\nprint(is_num_decagonal(-1))\nprint(is_num_decagonal(-2))\nprint(is_num_decagonal(-3))\nprint(is_num_decagonal(-4))\nprint(is_num_decagonal(-5))\nprint(is_num_decagonal(-6))\nprint(is_num_decagonal(-7))\nprint(is_num_decagonal(-8))\nprint(is_num_decagonal(-9))\nprint(is_num_decagonal(-10))\nprint(is_num_decagonal(-11))\nprint(is_num_decagonal(-12))\nprint(is_num_decagonal(-13))\nprint(is_num_decagonal(-14))\nprint(is_num_decagonal(-15))\nprint(is_num_decagonal(-16))\nprint(is_num_decagonal(-17))\nprint(is_num_decagonal(-18))\nprint(is_num_decagonal(-19))\nprint(is_num_decagonal(-20))\nprint(is_num_decagonal(-21))\nprint(is_num_decagonal(-22))\nprint(is_num_decagonal(-23))\nprint(is_num_decagonal(-24))\nprint(is_num_decagonal(-25))\nprint(is_num_decagonal(-26))\nprint(is_num_decagonal(-27))\nprint(is_num_decagonal(-28))\nprint(is_num_decagonal(-29))\nprint(is_num_decagonal(-30))\nprint(is_num_decagonal(-31))\nprint(is_num_decagonal(-32))\nprint(is_num_decagonal(-33))\nprint(is_num_decagonal(-34))\nprint(is_num_decagonal(-35))\nprint(is_num_decagonal(-36))\nprint(is_num_decagonal(-37))\nprint",
        "num_ids": 2015
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (10 * n) + n\n",
        "num_ids": 14
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(10*n+9)/2)\n",
        "num_ids": 18
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    if not isinstance(n, int):\n        return False\n    \n    if n <= 0:\n        return False\n    \n    d = 0\n    k = 1\n    while d < n:\n        d = 10 * d + k\n        k += 1\n    \n    return d == n",
        "num_ids": 72
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(10*(1 + n) * n / 2)\n",
        "num_ids": 19
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    for i in range(n):\n        decagonal += (10 - i) * (i + 1)\n    return decagonal\n",
        "num_ids": 38
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n * 10 + 9) * n // 2\n",
        "num_ids": 16
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return int(n*(10*n-9)/2 + n)\n",
        "num_ids": 35
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n",
        "num_ids": 12
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    print(\"\\nTesting Sequential Search...\\n\")\n    dlist = sorted(dlist)\n    print(dlist)\n    index_found = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index_found = i\n            break\n    return (True, index_found)\n",
        "num_ids": 85
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1\n",
        "num_ids": 35
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = 0\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, position)\n        position += 1\n    return (False, -1)\n    \n    \nprint(sequential_search([0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 123, 456, 789], 55))\nprint(sequential_search([0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 123, 456, 789], 33))\nprint(sequential_search([0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 123, 456, 789], 69))\nprint(sequential_search([0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 123, 456, 789], 789))\nprint(sequential_search([0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 123, 456, 789], 13))\nprint(sequential_search([0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 123, 456, 789], 123))\nprint(sequential_search([0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 123, 456, 789], 8))\nprint(sequential_search([0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 123, 456, 789], -1))\nprint(sequential_search([0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 123, 456, 789], 0))\nprint(sequential_search([0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 123, 456, 789], -1))\nprint(sequential_search([], 1))\nprint(sequential_search([0], 1))\nprint(sequential_search([0, 1], 1))\nprint(sequential_search([0, 1, 2], 1))\nprint(sequential_search([0, 1, 2], 0))\nprint(sequential_search([0, 1, 2], 2))\nprint(sequential_search([0, 1, 2], 3))\nprint(sequential_search([0, 1, 2], 4))\nprint(sequential_search([0, 1, 2], 5))\nprint(sequential_search([0, 1, 2], 6))\nprint(sequential_search([0, 1, 2], 7))\nprint(sequential_search([0, 1, 2], 8))\nprint(sequential_search([0, 1, 2], 9))\nprint(sequential_search([0, 1, 2], 10))\nprint(sequential_search([0, 1, 2], -1))\n",
        "num_ids": 692
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for x in range(len(dlist)):\n        if dlist[x] == item:\n            return True, x\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return (found, pos)\n",
        "num_ids": 59
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    index = sequential_search_helper(dlist, item, index)\n    return index\n",
        "num_ids": 29
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    found = False\n    while index < len(dlist) and not found:\n        if dlist[index] == item:\n            found = True\n        else:\n            index = index + 1\n    if found:\n        return True, index\n    else:\n        return False, -1\n",
        "num_ids": 75
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return (found, pos)\n",
        "num_ids": 59
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n",
        "num_ids": 34
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return (len(set(test_list)) == len(test_list))\n",
        "num_ids": 21
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 22
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # return len(test_list) == len(set(test_list))\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 39
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # set converts the list to a set of unique values\n    # set function can also be used to create a set\n    if len(set(test_list)) == len(test_list):\n        return True\n    return False\n",
        "num_ids": 79
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list.sort()\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create an empty list that will store the unique elements of the given list\n    unique_list = []\n    # If the length of the given list is greater than 1\n    if len(test_list) > 1:\n        # iterate through each element in the list\n        for i in range(len(test_list)):\n            # if the element is not present in the unique list, add it to the unique list\n            if test_list[i] not in unique_list:\n                unique_list.append(test_list[i])\n    # return the unique list\n    return unique_list\n",
        "num_ids": 139
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res=[]\n    for i in range(len(nums1)):\n        res.append(nums1[i]-nums2[i])\n    return res\n",
        "num_ids": 43
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #return [num1 - num2 for num1,num2 in zip(nums1,nums2)]\n    return (list(map(lambda x,y: x-y,nums1,nums2)))\n",
        "num_ids": 54
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 30
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1,num2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]-nums2[i])\n    return new_list\n",
        "num_ids": 49
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1 = [0,5,7,8,9]\n    nums2 = [1,2,3,4,5]\n    sub_list = [0,3,5,7,9]\n    nums1 = [1,2,3,4,5]\n    nums2 = [0,5,7,8,9]\n    sub_list = [1,2,3,4,5]\n    sub_list = [a - b for a, b in zip(nums1, nums2)]\n    sub_list = [0,-1,2,3,4]\n    return sub_list\n    nums1 = [1,2,3,4,5]\n    nums2 = [0,5,7,8,9]\n    sub_list = [a - b for a, b in zip(nums1, nums2)]\n    sub_list = [1,2,3,4,5]\n    return sub_list\n",
        "num_ids": 234
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for n in nums1:\n        if n in nums2:\n            nums2.remove(n)\n    return nums2\n",
        "num_ids": 36
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 30
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #Creating an empty list to append the values \n    l=[]\n    #Splitting the string into a list\n    n=str(n)\n    for i in range(0,len(n)):\n        l.append(n[i])\n    #Iterating through the list\n    for i in range(0,len(n)):\n        #Comparing the frequency of each digit in the list with the digit itself\n        if l.count(n[i])>=int(n[i]):\n            return \"Not a magic number\"\n    return \"Magic number\"\n",
        "num_ids": 136
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    try:\n        int(n)\n    except ValueError:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict_freq = {}\n    for i in str(n):\n        if i in dict_freq:\n            dict_freq[i] += 1\n        else:\n            dict_freq[i] = 1\n    for key, value in dict_freq.items():\n        if value > int(key):\n            return False\n    return True\n",
        "num_ids": 86
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n)\n    for i in s:\n        if int(i) > int(s[0]):\n            return False\n    return True\n    \ndef isIncreasing(n):\n    '''\n    Write a python function to check whether a number is increasing. (a number is increasing if every digit in the number is greater than or equal to the previous digit)\n    '''\n    s = str(n)\n    for i in range(len(s)-1):\n        if int(s[i]) < int(s[i+1]):\n            return False\n    return True\n    \ndef validate_2(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n)\n    for i in s:\n        if int(i) > int(s[0]):\n            return False\n    return True\n    \ndef isDecreasing(n):\n    '''\n    Write a python function to check whether a number is decreasing. (a number is decreasing if every digit in the number is less than or equal to the previous digit)\n    '''\n    s = str(n)\n    for i in range(len(s)-1):\n        if int(s[i]) > int(s[i+1]):\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = dict()\n    for i in str(n):\n        if i in d:\n            if d[i] > int(i):\n                return False\n        d[i] = d.get(i,0) + 1\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in str(n):\n        if int(i) in digits:\n            if int(i) > int(i):\n                return False\n            elif int(i) > digits[digits.index(int(i))]:\n                return False\n            else:\n                digits[digits.index(int(i))] = -1\n    return True\n",
        "num_ids": 114
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # if there is no digit in the string, then return true\n    if len(n) == 0:\n        return True\n    # if there is no digit in the string, then return false\n    if len(n) == 1 and n[0] == '0':\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    str_n = str(n)\n    dict_n = {}\n    for i in str_n:\n        if i in dict_n:\n            dict_n[i] += 1\n        else:\n            dict_n[i] = 1\n    for i in dict_n:\n        if dict_n[i] > int(i):\n            return False\n    return True\n    \n    \ndef is_super_digit(n, k): \n    '''\n    Given an integer, find if it is super digit.\n    '''\n    if n < 10:\n        return True\n    while n > 9:\n        if validate(n):\n            return True\n        n = sum([int(i)**k for i in str(n)])\n    return False\n    \n    \ndef get_next_super_digit(n): \n    '''\n    Given a positive number, find the smallest positive number that is evenly divisible by all the numbers from 1 to n.\n    '''\n    result = n\n    while True:\n        if is_super_digit(result, 1):\n            return result\n        result += 1\n    return -1\n    \n    \ndef get_nth_super_digit(n):\n    '''\n    Given an integer n, find the nth super digit of it.\n    '''\n    return nth_super_digit(n, 1)\n    \n    \ndef nth_super_digit(n, k): \n    '''\n    Given an integer n and an integer k, find the nth super digit of k.\n    '''\n    if n < 1:\n        return -1\n    if n == 1:\n        return k\n    if k == 1:\n        return 1\n    \n    while n > 1:\n        k = k % 10\n        n -= 1\n    \n    return nth_super_digit(n, k)\n    \n    \ndef is_super_digit_dynamic(n, k): \n    '''\n    Given an integer n, find if it is super digit or not.\n    '''\n    if n < 10:\n        return True\n    num_digit = len(str(n))\n    divisor = 1\n    while divisor < n:\n        divisor *= 10\n    \n    return (nth_super_digit(num_digit, k) % divisor == 0)\n    \n    \ndef get_nth_super_digit_dynamic(n): \n    '''\n    Given a positive number, find the smallest positive number that is evenly divisible by all the numbers from 1 to n.\n    '''\n    result = n\n    while True:\n        if is_super_digit_dynamic(result, 1):\n            return result\n        result += 1\n    return -1\n    \n    \ndef get_nth_super_digit_dynamic_all_digits(n):\n    '''\n    Given an integer n, find the nth super digit of it.\n    '''\n    return nth_super_digit_dynamic_all_digits(n, 1)\n    \n    \ndef nth_super_digit_dynamic_all_digits(n, k): \n    '''\n    Given an integer n and an integer k, find the nth super digit of k.\n    '''\n    if n < 1:\n        return -1\n    if n == 1:\n        return k\n    if k == 1:\n        return 1\n    \n    while n > 1:\n        k = k % 10\n        n -= 1\n    \n    return nth_super_digit_dynamic_all_digits(n, k)\n    \n    \ndef get_super_digit_dynamic(n, k): \n    '''\n    Given an integer n, find the super digit of n.\n    '''\n    if n < 1:\n        return -1\n    if k == 1:\n        return n\n    \n    while n > 9:\n        n = n % 9\n        if n == 0:\n            n = 9\n    return nth_super_digit_dynamic_all_digits(k, n)\n    \n    \ndef nth_super_digit_dynamic_all_digits_pythonic(n, k): \n    '''\n    Given an integer n, find the nth super digit of it.\n    '''\n    if n < 1:\n        return -1\n    if n == 1:\n        return k\n    if k == 1:\n        return 1\n        \n    if n == 0:\n        return 9\n        \n    return nth_super_digit_dynamic_all_digits(n % 9, k * 10)\n    \n    \ndef get_super_digit_dynamic_pythonic(n, k): \n    '''\n    Given an integer n, find the super digit of n.\n    '''\n    if n < 1:\n        return -1\n    if k == 1:\n        return n\n    \n    if n == 0:\n        return 9\n    \n    return nth_super_digit_dynamic_all_digits_pythonic(n % 9, k * 10)\n    \n    \nif __name__ == '__main__':\n    print(get_next_super_digit(2))\n    print(get_next_super_digit(3))\n    print(get_next_super_digit(5))\n    print(get_next_super_digit(2**50))\n    print(get_next_super_digit(4))\n    print(get_next_super_digit(2**50))\n    print(get_nth_super_digit(2**50, 10))\n    print(get_nth_super_digit(2**50, 10))\n    print(get_nth_super_digit(2**50, 10**10))\n    print(get_nth_super_digit_dynamic(2**50, 10**10))\n    print(get_nth_super_digit_dynamic(2**50, 10**10))\n    print(get_nth_super_digit_dynamic_all_digits(2**50, 10**10))\n    print(get_nth_super_digit_dynamic_all_digits(2**50, 10**10))\n    print(get_super_digit_dynamic(2**50, 10**10))\n    print(get_super_digit_dynamic(2**50, 10**10))\n    print(get_super_digit_dynamic_all_digits(2**50, 10**10))\n    print(get_super_digit_dynamic_all_digits_pythonic(2**50, 10**10))\n    print(get_super_digit_dynamic_pythonic(2**50, 10**10))\n    print(get_nth_super_digit_dynamic_all_digits(2**50, 10**10**5))\n    print(get_nth_super_digit_dynamic_all_digits(2**50, 10**10**10))\n    print(get_nth_super_digit_dynamic_all_digits(2**50, 10**10**100))\n    print(get_nth_super_digit_dynamic_all_digits(2**50, 10**10**1000))\n    print(get_nth_super_digit_dynamic_all_digits(2**50, 10**10**10000))\n    print(get_nth_super_digit_dynamic_all_digits(2**50, 10**10**100000))\n    print(get_nth_super_digit_dynamic_all_digits(2**50, 10**10**1000000))\n    print(get_nth_super_digit_dynamic_all_digits(2**50, 10**10**10000000))\n    print(get_nth_super_digit_dynamic_all_digits(2**50, 10**10**100000000))\n    print(get_nth_super_digit_dynamic_all_digits(2**50, 10**10**1000000000))\n    print(get_nth_super_digit_dynamic_all_digits(2**50, 10**10**10000000000))\n    print(get_nth_super_digit_dynamic_all_digits(2**50, 10**10**100000000110))\n    print(get_nth_super_digit_dynamic_all_digit",
        "num_ids": 858
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    temp = n\n    digits = [int(i) for i in str(temp)]\n    \n    count = 0\n    while temp > 0:\n        count += temp % 10\n        temp = temp // 10\n        \n    return count <= max(digits)\n    \ndef find_largest_palindrome(n): \n    '''\n    Write a python function takes in an integer and find the largest palindrome made from the product of two n-digit numbers.\n    '''\n    l = 9 * n\n    if l % 10 == 0:\n        l += 1\n    \n    L = int(str(l - 1)[:-1]) * l\n    R = L + 1\n    \n    temp = L\n    while temp < R:\n        if validate(temp):\n            if validate(int(str(temp)[::-1])):\n                return temp\n        temp += 1\n        \ndef main():\n    n = 5\n    print(find_largest_palindrome(n))\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 136
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_frequency = {}\n    for i in str(n):\n        if i not in digit_frequency:\n            digit_frequency[i] = 1\n        else:\n            digit_frequency[i] += 1\n    if all(value <= digit_frequency.get(i) for i, value in digit_frequency.items()):\n        return True\n    return False\n",
        "num_ids": 87
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    elif len(list) == 1:\n        return list[0] == element\n    else:\n        new_list = []\n        for i in list:\n            if i!= element:\n                new_list.append(i)\n        return check_element(new_list,element)\n",
        "num_ids": 85
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #print('Running check_element function...')\n    return all(item == element for item in list)\n",
        "num_ids": 27
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return list[0] == element\n    else:\n        check_list = [list[0] == element, check_element(list[1:],element)]\n        return all(check_list)\n        ",
        "num_ids": 60
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list)>1:\n        return False\n    else:\n        if list[0] == element:\n            return True\n        else:\n            return False\n",
        "num_ids": 42
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!=element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pat = r'a.{2,3}b'\n    print(bool(re.match(pat, text)))\n    return bool(re.match(pat, text))\n",
        "num_ids": 44
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Code goes here\n    result=re.search('a.{2}|a.{3}',text)\n    if result:\n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = re.search(r'ab{2,3}', text)\n    return result!= None\n",
        "num_ids": 28
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #regex = r\"a[b{2}|b{3}]a\"\n    regex = r\"(ab)+ab\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_multiple_letters(text):\n    '''\n    Write a function that checks whether a string contains any of the following characters: 'a', 'e', 'i', 'o', 'u'\n    '''\n    regex = r\"[aeiou]\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_multiple_letters_all(text):\n    '''\n    Write a function that checks whether a string contains any of the following characters: 'a', 'e', 'i', 'o', 'u'\n    '''\n    regex = r\"([aeiou])+\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_specific_letter(text):\n    '''\n    Write a function that checks whether a string contains any of the following characters: 'a', 'e', 'i', 'o', 'u'\n    '''\n    regex = r\"[aeiou]\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_multiple_letter_no_repeat(text):\n    '''\n    Write a function that checks whether a string contains only letters and the letter 'a' is not repeated\n    '''\n    regex = r\"[a-z]{2}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_multiple_letter_no_repeat_2(text):\n    '''\n    Write a function that checks whether a string contains any of the following characters: 'a', 'e', 'i', 'o', 'u'\n    '''\n    regex = r\"[a-z]{2,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_2(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{2,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_3(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{3,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_4(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{4,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_5(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{5,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_6(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{6,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_7(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{7,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_8(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{8,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_9(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{9,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_10(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{10,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_11(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{11,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_12(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{12,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_13(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{13,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_14(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{14,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_15(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{15,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_16(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{16,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_17(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{17,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_18(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{18,}\"\n    if re.search(regex, text):\n        print(\"YES\")\n    else:\n        print(\"NO\")\ndef text_match_numbers_range_19(text):\n    '''\n    Write a function that checks whether a string contains any numbers\n    '''\n    regex = r\"[0-9]{19,}\"\n    if re",
        "num_ids": 20
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # text = \"abbb\"\n    # text = \"abcbb\"\n    # text = \"aabbbbc\"\n    # text = \"aabbbbcc\"\n    # text = \"aaabbb\"\n    # text = \"aaabbbaa\"\n    # text = \"baaaaabbaaa\"\n    # text = \"aabaabb\"\n    # text = \"abbbb\"\n    # text = \"aaaaaab\"\n    # text = \"aabbbb\"\n    # text = \"bbaabb\"\n    # text = \"abbbb\"\n    # text = \"aababb\"\n    # text = \"abbbbb\"\n    # text = \"bbbbb\"\n    # text = \"aaabbbb\"\n    # text = \"ababbb\"\n    # text = \"bbbab\"\n    # text = \"babbabb\"\n    # text = \"abbbbabbb\"\n    # text = \"abaaaab\"\n    # text = \"babbbb\"\n    # text = \"aaaabb\"\n    # text = \"bbbbb\"\n    # text = \"aabaaab\"\n    # text = \"aababb\"\n    # text = \"abbbbbabb\"\n    # text = \"abbbbbabaa\"\n    # text = \"aabbbbb\"\n    # text = \"babbbab\"\n    # text = \"aabbbbbababaab\"\n    # text = \"bbbbaaab\"\n    # text = \"abbbabbbbbbbbaab\"\n    # text = \"abbbb\"\n    # text = \"abbaabb\"\n    # text = \"abbbb\"\n    # text = \"abbbaabbbaaaab\"\n    # text = \"baabb\"\n    # text = \"abbbb\"\n    # text = \"baabbb\"\n    # text = \"abbbab\"\n    # text = \"abbb\"\n    # text = \"ababb\"\n    # text = \"aabbbbb\"\n    # text = \"bbbbbb\"\n    # text = \"aaabbbb\"\n    # text = \"aabbbbb\"\n    # text = \"aababb\"\n    # text = \"abbabaa\"\n    # text = \"babbbb\"\n    # text = \"aababbb\"\n    # text = \"abbabaababbabab\"\n    # text = \"aaaaaabbababaaa\"\n    # text = \"babbbabbababaabbaaabbabababbabbaaabbababababbbabbabaaaaababbbbaabbabbbbaababbabab\"\n    # text = \"babbbabbbbabbbabbbbbabbbabbababbbabbababbbbababb\"\n    # text = \"babbbbaabbabaabbbbabbbabbbbaabbabbbabbabbbabb\"\n    # text = \"babbbbbabbbbababbbbaaaababbabbbbaaabbbaaaabbbb\"\n    # text = \"aababbbbbbbaaaabbbabbbbababbbbbabaaabbabb\"\n    # text = \"babbbbaabbbbabbbbabbaaabbbbbabbbabbababb\"\n    # text = \"bbbabbabbbbaaabaaaabaababb\"\n    # text = \"aabaabb\"\n    # text = \"aabbababbabbabbbaabaaabb\"\n    # text = \"aabbab\"\n    # text = \"bbbaabbabb\"\n    # text = \"abbbbaabb\"\n    # text = \"bbbbbabb\"\n    # text = \"babbab\"\n    # text = \"aababbb\"\n    # text = \"aabbba\"\n    # text = \"babbbaa\"\n    # text = \"abbbbb\"\n    # text = \"bbbb\"\n    # text = \"babbab\"\n    # text = \"bbaabbb\"\n    # text = \"bbaaabbba\"\n    # text = \"aabbab\"\n    # text = \"babbab\"\n    # text = \"aabbbb\"\n    # text = \"bbbaaabbbb\"\n    # text = \"aabaaabaaabbababaaaaa\"\n    # text = \"bbbbbb\"\n    # text = \"bbbabb\"\n    # text = \"bbaabb\"\n    # text = \"bababa\"\n    # text = \"aabbabaaab\"\n    # text = \"bababa\"\n    # text = \"aabbbb\"\n    # text = \"aabaabbbbabbabaaaaabbababb\"\n    # text = \"bbabbabbbbaabbaaabbbbb\"\n    # text = \"bbabbbabbbbaabaaabbbbb\"\n    # text = \"babbbb\"\n    # text = \"babbbb\"\n    # text = \"bbaabbbaabbbabbbaabbbbb\"\n    # text = \"bbbbaab\"\n    # text = \"aabaabbabbbabaababaab\"\n    # text = \"aababbbaababbbbaaabbb\"\n    # text = \"bbaaabbb\"\n    # text = \"babbbbb\"\n    # text = \"abaaabb\"\n    # text = \"bbbabaaabbabbabbbaaaba\"\n    # text = \"babaab\"\n    # text = \"aabaab\"\n    # text = \"aabbbb\"\n    # text = \"aaabab\"\n    # text = \"babaaaaababbbabbbabbb\"\n    # text = \"aabbbbb\"\n    # text = \"babbbb\"\n    # text = \"bbaaabbbabbbaaabbbb\"\n    # text = \"babbabbbbb\"\n    # text = \"abbb\"\n    # text = \"baaabb\"\n    # text = \"bbbab\"\n    # text = \"babaab\"\n    # text = \"babab\"\n    # text = \"babaa\"\n    # text = \"abbbba\"\n    # text = \"bbaabbbab\"\n    # text = \"bbaabaab\"\n    # text = \"aababa\"\n    # text = \"bbbaabb\"\n    # text = \"aabbab\"\n    # text = \"babbb\"\n    # text = \"babbbbbabbbaababbbb\"\n    # text = \"bbaabbb\"\n    # text = \"babbb\"\n    # text = \"abbbbbbaa\"\n    # text = \"babababbbba\"\n    # text = \"bbabbbabbabbbbbbaabb\"\n    # text = \"bbbbbbaaabbbbbabbba\"\n    # text = \"baabaab\"\n    # text = \"babbbbbbbbbaabaaabbbba\"\n    # text = \"bbbbaa\"\n    # text = \"babbbaa\"\n    # text = \"abbaba\"\n    # text = \"aabaab\"\n    # text = \"aabaaab\"\n    # text = \"bbbbaa\"\n    # text = \"bbbbab\"\n    # text = \"aabaabaab\"\n    # text = \"baaaaab\"\n    # text = \"aabaabb\"\n    # text = \"aababa\"\n    # text = \"bbaabbbabbbaababaa\"\n    # text = \"aabbbabbb\"\n    # text = \"baaaabb\"\n    # text = \"abbbbb\"\n    # text = \"babbba\"\n    # text = \"babbb\"\n    # text = \"babbbabbbbaabaaabbb\"\n    # text = \"babbabaabbbbbabbbbb\"\n    # text = \"babbbaa\"\n    # text = \"bbaaabbb\"\n    # text = \"bbaaab\"\n    # text = \"abbbbb\"\n    # text = \"aabbbbbaabbbbbbbba\"\n    # text = \"babaabbab\"\n    # text = \"bbbabaabbababaabbbbb\"\n    # text = \"bbaaabbabbabbbbaaabbbbb\"\n    # text = \"babbab\"\n    # text = \"bababaabbabaabaaabaab\"\n    # text = \"babbaaab\"\n    # text = \"abbbbaa\"\n    # text = \"aabbbab\"\n    # text = \"bababb\"\n    # text = \"babb",
        "num_ids": 2000
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    matches = re.search(r'ab{2,3}', text)\n    if matches:\n        return True\n    return False\n    \ndef word_search(doc, search):\n    '''\n    Write a function that takes a string and a search word. The function should return a list of all the locations where the search word was found within the string.\n    '''\n    matches = []\n    regex = re.compile(r'\\w*' + search + r'\\w*', re.IGNORECASE)\n    for match in re.finditer(regex, doc):\n        matches.append(match.span())\n    return matches\n",
        "num_ids": 70
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = re.search(r\"ab{2,3}$\", text)\n    return result!= None\n",
        "num_ids": 29
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    pattern = 'a(bb|b).*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n        \n        \n        \n        \n        \n    # write your code here\n    # pass\n    \n    \n    ",
        "num_ids": 66
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.count('b') <= 2 and 'a' in text:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'a.b{2,3}',text)!= None\n",
        "num_ids": 24
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize result\n    max_sum = -1*sys.maxsize\n    # Initialize max sum at index i (0 <= i <= n)\n    for i in range(n):\n        max_sum = max(max_sum, a[i])\n    # Initialize max sum at index i (0 <= i <= n)\n    for i in range(n):\n        max_sum = max(max_sum, a[i])\n    # Repeat to form a sum array and find max sum\n    for i in range(n):\n        for j in range(k):\n            if(j==0):\n                max_sum = max(max_sum, sum(a[i:]))\n            else:\n                max_sum = max(max_sum, sum(a[i::k]))\n            max_sum = max(max_sum, sum(a[i:j]))\n    return max_sum\n",
        "num_ids": 215
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if not a:\n        return None\n    curr_sum = max_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if i >= k and curr_sum <= 0:\n            curr_sum = 0\n        elif i >= k:\n            max_sum = max(curr_sum, max_sum)\n    return max_sum\n",
        "num_ids": 97
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    maxSum = 0\n    for i in range(n): \n        for j in range(k): \n            if (i + j < n): \n                maxSum += a[i + j] \n    return maxSum\n",
        "num_ids": 56
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # pick the kth element of array a and add to it the sum of all elements of the array a.\n    # Pick the first element of array a and add it to the sum of all elements of the array a.\n    # Pick the second element of array a and add it to the sum of all elements of the array a.\n    # Pick the third element of array a and add it to the sum of all elements of the array a.\n    # Do this process of picking kth elements k times, one by one.\n    # Now take the maximum of the sums obtained from the above process.\n    # Repeat this process of picking kth elements k times, one by one.\n",
        "num_ids": 151
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    l=[]\n    for i in range(0,n,k):\n        sum=0\n        for j in range(i,n):\n            sum+=a[j]\n            l.append(sum)\n    max_sum=max(l)\n    return max_sum\n    \ndef max_sub_array_sum_k_consectutive(a,n,k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum=0\n    temp_sum=0\n    for i in range(n):\n        if i%k==0:\n            max_sum=temp_sum\n        temp_sum+=a[i]\n        if (i+1)%k==0:\n            temp_sum=max(temp_sum,max_sum)\n    return temp_sum\n    \ndef find_smallest_number_in_rotated_array(a,n):\n    '''\n    You are given an integer array sorted in ascending order (may contain duplicates), \n    you need to write a function that returns the smallest integer in this array.\n    '''\n    low=0\n    high=n-1\n    while low<high:\n        mid=low+(high-low)//2\n        if a[mid]>a[high]:\n            low=mid+1\n        elif a[mid]<a[high]:\n            high=mid\n        else:\n            high-=1\n    return a[low]\n",
        "num_ids": 87
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return -1\n    if k > n:\n        return -1\n",
        "num_ids": 26
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n==0:\n        return 0\n    if k<=0:\n        return 0\n    m = n*k\n    s = 0\n    for i in range(k):\n        s = s + a[i]\n    ma = s\n    for i in range(n):\n        s = s + a[i]\n        for j in range(i+1, min(i+k, n)):\n            s = s - a[j] + a[j-1]\n            ma = max(ma, s)\n    return ma\n",
        "num_ids": 131
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    curr_max = 0\n",
        "num_ids": 28
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 1 and k == 1:\n        return a[0]\n    if n == 1 and k > 1:\n        return max(a)\n",
        "num_ids": 38
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    '''\n    The idea is simple. We can keep track of the sums in a hash table and add the sum for each index and also keep track of the sum of the first k elements. Finally, return the maximum of the sum of k elements and the sum of elements of the first k elements. \n    '''\n    hash_table = {0: 0} # storing sum of all indices in hash table \n    max_sum = 0\n    sum_first_k = 0\n    for i in range(n):\n        sum_first_k += a[i]\n        if i < k:\n            sum_first_k -= hash_table.get(i, 0)\n        if i >= k:\n            sum_first_k -= hash_table[i - k]\n        if i >= k - 1:\n            hash_table[i] = hash_table.get(i, 0) + a[i] \n        if i >= k:\n            max_sum = max(max_sum, hash_table[i] - sum_first_k + a[i])\n    return max_sum\n",
        "num_ids": 184
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    return n * (n + 1) * (2 * n + 1) // 6\n    \ndef swap_case(s):\n    '''\n    Write a python function that takes a string as input and return a string where the case of each character is swapped.\n    '''\n    return s.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    n = int(n)\n    return (n*(n+2)*(2*n+1))/6\n",
        "num_ids": 32
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # a = 1\n    # a = 2\n    # a = 3\n    # a = 4\n    # a = 5\n    # a = 6\n    # a = 7\n    # a = 8\n    # a = 9\n    # a = 10\n    # a = 11\n    # a = 12\n    # a = 13\n    # a = 14\n    # a = 15\n    # a = 16\n    # a = 17\n    # a = 18\n    # a = 19\n    # a = 20\n    # a = 21\n    # a = 22\n    # a = 23\n    # a = 24\n    # a = 25\n    # a = 26\n    # a = 27\n    # a = 28\n    # a = 29\n    # a = 30\n    # a = 31\n    # a = 32\n    # a = 33\n    # a = 34\n    # a = 35\n    # a = 36\n    # a = 37\n    # a = 38\n    # a = 39\n    # a = 40\n    # a = 41\n    # a = 42\n    # a = 43\n    # a = 44\n    # a = 45\n    # a = 46\n    # a = 47\n    # a = 48\n    # a = 49\n    # a = 50\n    # a = 51\n    # a = 52\n    # a = 53\n    # a = 54\n    # a = 55\n    # a = 56\n    # a = 57\n    # a = 58\n    # a = 59\n    # a = 60\n    # a = 61\n    # a = 62\n    # a = 63\n    # a = 64\n    # a = 65\n    # a = 66\n    # a = 67\n    # a = 68\n    # a = 69\n    # a = 70\n    # a = 71\n    # a = 72\n    # a = 73\n    # a = 74\n    # a = 75\n    # a = 76\n    # a = 77\n    # a = 78\n    # a = 79\n    # a = 80\n    # a = 81\n    # a = 82\n    # a = 83\n    # a = 84\n    # a = 85\n    # a = 86\n    # a = 87\n    # a = 88\n    # a = 89\n    # a = 90\n    # a = 91\n    # a = 92\n    # a = 93\n    # a = 94\n    # a = 95\n    # a = 96\n    # a = 97\n    # a = 98\n    # a = 99\n    # a = 100\n    # a = 101\n    # a = 102\n    # a = 103\n    # a = 104\n    # a = 105\n    # a = 106\n    # a = 107\n    # a = 108\n    # a = 109\n    # a = 110\n    # a = 111\n    # a = 112\n    # a = 113\n    # a = 114\n    # a = 115\n    # a = 116\n    # a = 117\n    # a = 118\n    # a = 119\n    # a = 120\n    # a = 121\n    # a = 122\n    # a = 123\n    # a = 124\n    # a = 125\n    # a = 126\n    # a = 127\n    # a = 128\n    # a = 129\n    # a = 130\n    # a = 131\n    # a = 132\n    # a = 133\n    # a = 134\n    # a = 135\n    # a = 136\n    # a = 137\n    # a = 138\n    # a = 139\n    # a = 140\n    # a = 141\n    # a = 142\n    # a = 143\n    # a = 144\n    # a = 145\n    # a = 146\n    # a = 147\n    # a = 148\n    # a = 149\n    # a = 150\n    # a = 151\n    # a = 152\n    # a = 153\n    # a = 154\n    # a = 155\n    # a = 156\n    # a = 157\n    # a = 158\n    # a = 159\n    # a = 160\n    # a = 161\n    # a = 162\n    # a = 163\n    # a = 164\n    # a = 165\n    # a = 166\n    # a = 167\n    # a = 168\n    # a = 169\n    # a = 170\n    # a = 171\n    # a = 172\n    # a = 173\n    # a = 174\n    # a = 175\n    # a = 176\n    # a = 177\n    # a = 178\n    # a = 179\n    # a = 180\n    # a = 181\n    # a = 182\n    # a = 183\n    # a = 184\n    # a = 185\n    # a = 186\n    # a = 187\n    # a = 188\n    # a = 189\n    # a = 190\n    # a = 191\n    # a = 192\n    # a = 193\n    # a = 194\n    # a = 195\n    # a = 196\n    # a = 197\n    # a = 198\n    # a = 199\n    # a = 200\n    # a = 201\n    # a = 202\n    # a = 203\n    # a = 204\n    # a = 205\n    # a = 206\n    # a = 207\n    # a = 208\n    # a = 209\n    # a = 210\n    # a = 211\n    # a = 212\n    # a = 213\n    # a = 214\n    # a = 215\n    # a = 216\n    # a = 217\n    # a = 218\n    # a = 219\n    # a = 220\n    # a = 221\n    # a = 222\n    # a = 223\n    # a = 224\n    # a = 225\n    # a = 226\n    # a = 227\n    # a = 228\n    # a = 229\n    # a = 230\n    # a = 231\n    # a = 232\n    # a = 233\n    # a = 234\n    # a = 235\n    # a = 236\n    # a = 237\n    # a = 238\n    # a = 239\n    # a = 240\n    # a = 241\n    # a = 242\n    # a = 243\n    # a = 244\n    # a = 245\n    # a = 246\n    # a = 247\n    # a = 248\n    # a = 249\n    # a = 250\n    # a = 251\n    # a = 252\n    # a = 253\n    # a = 254\n    # a = 255\n    # a = 256\n    # a = 257\n    # a = 258\n    # a = 259\n    # a = 260\n    # a = 261\n    # a = 262\n    # a = 263\n    # a = 264\n    # a = 265\n    # a = 266\n    # a = 267\n    # a = 268\n    # a = 269\n    # a = 270\n    # a = 271\n    # a = 272\n    # a = 273\n    # a = 274\n    # a = 275\n    # a = 276\n    # a = 277\n    # a = 278\n    # a = 279\n    # a = 280\n    # a = 281\n    # a = 282\n    # a = 283\n    # a = 284\n    # a = 285\n    # a = 286\n    # a = 287\n    # a = 288\n    # a = 289\n    # a = 290\n    # a = 291\n    # a = 292\n    # a = 293\n    # a = 294\n    # a = 295\n    # a = 296\n    # a = 297\n    # a = 298\n    # a = 299\n    # a = 300\n    # a = 301\n    # a = 302\n    # a = 303\n    # a = 304\n    # a = 305\n    # a = 306\n    # a = 307\n    # a = 308\n    # a = 309\n    # a = 310\n    # a = 311\n    # a = 312\n    # a = 313\n    # a = 314\n    # a = 315\n    # a = 316\n    # a = 317\n    # a = 318\n    # a = 319\n    # a = 320\n    # a = 321\n    # a = 322\n    # a = 323\n    # a = 324\n    # a = 325\n    # a = 326\n    # a = 327\n    # a = 328\n    # a = 329\n    # a = 330\n    # a = 331\n    # a = 332\n    # a = 333\n    # a = 334\n    # ",
        "num_ids": 2009
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum += i * i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum += (i * i)\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_numbers=[]\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            even_numbers.append(i**2)\n    return sum(even_numbers)\n",
        "num_ids": 55
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if(i%2==0):\n            sum+=i*i\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(i**2 for i in range(n) if i%2==0)\n",
        "num_ids": 24
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    count = 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            count += (i**2)\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if i%2==0:\n            sum += i*i\n    return sum\nprint(square_Sum(10))\n",
        "num_ids": 47
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        max_len = 0\n        for sublist in list1:\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n    return max_len\n",
        "num_ids": 67
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l1 = []\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n            l1 = i\n    print(l1)\n",
        "num_ids": 58
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list_max_length = []\n    max_length = 0\n    for lis in list1:\n        if len(lis) > max_length:\n            list_max_length = lis\n            max_length = len(lis)\n    print(list_max_length, max_length)\n",
        "num_ids": 73
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=[]\n    for i in list1:\n        if len(i)>len(max_length):\n            max_length=i\n    return max_length\n",
        "num_ids": 44
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if max_length < len(i):\n            max_length = len(i)\n    return max_length\n",
        "num_ids": 44
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=0\n    for l in list1:\n        if len(l)>max_len:\n            max_len=len(l)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    result = []\n    for i in range(len(list1)):\n        if len(list1[i]) > length:\n            result = list1[i]\n            length = len(list1[i])\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=[]\n    for each in list1:\n        max_len.append(len(each))\n    return max(max_len)\n",
        "num_ids": 38
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base cases\n    if n <= 2:\n        return n\n",
        "num_ids": 18
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    '''\n    The problem is equivalent to painting a fence of n stairs with k colors such that at most 2 adjacent stairs have the same color. Let the number of ways of painting the fence be denoted by f(n, k). There are 2 ways to assign colors to n posts such that at most 2 adjacent posts have the same color:\n    1. We can paint the fence in such a way that every post gets assigned a color. In this case, f(n, k) = C(n, k).\n    2. We can choose any 2 posts and paint them in opposite colors. In this case, f(n, k) = C(n-2, k) + C(n-2, k) + C(n-2, k).\n    Hence f(n, k) = 2C(n-2, k) + C(n-2, k).\n    '''\n    \n    # If there are less than 2 posts, then we have only one way to paint the fence.\n    if(n < 2):\n        return 1\n",
        "num_ids": 38
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or n == 1 or k == 1:\n        return 1\n    else:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)\n",
        "num_ids": 57
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==0 or n==1 or k==0:\n        return 0\n    if k==1:\n        return n\n",
        "num_ids": 32
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    colors = k\n    def countWaysUtil(n, colors):\n        if n<=0:\n            return 0\n        if n==1:\n            return colors\n        if n==2:\n            if colors==1:\n                return 2\n            else:\n                return 3\n        return countWaysUtil(n-2, colors)+countWaysUtil(n-1, colors-1)\n    return countWaysUtil(n, colors)\n",
        "num_ids": 112
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return count_no_of_ways_recursive(n, k, 1)\n",
        "num_ids": 22
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Array to store the number of ways for painting the fence for the different color combinations\n    count = [0]*k\n    # Base cases for the number of ways\n    count[0] = 1\n    count[1] = 1\n    # Iterating through the fence elements\n    for i in range(2, n):\n        # Iterating through the different combinations\n        for j in range(k):\n            # If the current element is a new color\n            if(j!= (count[j]-1)):\n                # Incrementing the number of ways\n                count[j] += count[j-1]\n            # If the current element is the same as the previous element\n            if(j == (count[j]-1)):\n                # Incrementing the number of ways\n                count[j] += count[j-2]\n    # Returning the number of ways\n    return count[-1]",
        "num_ids": 211
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base cases\n    if (n < 0) or (k < 0):\n        return 0\n    if (n == 0) or (k == 0):\n        return 1\n    if k == 1:\n        return n\n    if n == 1:\n        return 1\n",
        "num_ids": 65
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k*k\n    if n == 3:\n        return k*(k+1)*(k-1)//6\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    dp[1][0] = k\n    dp[2][0] = k*k\n    dp[2][1] = k*(k-1)\n    dp[3][0] = k*(k+1)*(k-1)//6\n    dp[3][1] = k*(k+1)*(k-2)//6\n    dp[3][2] = k*(k+1)*(k-1)//6\n    for i in range(4, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    return dp[n][k]\n",
        "num_ids": 260
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    '''\n    Approach: Dynamic Programming\n    '''\n    '''\n    The number of ways of painting the fence such that at most 2 adjacent posts have the same color can be calculated using the following relation.\n    \n    Number of ways of painting the fence = Number of ways of painting the fence with n-1 posts and k colors + Number of ways of painting the fence with n-2 posts and k colors.\n    \n    This relation can be used recursively to find the number of ways of painting the fence.\n    '''\n    MOD = 10**9 + 7\n    ways = [[0] * k for _ in range(n + 1)]\n    for i in range(k):\n        ways[0][i] = 1\n",
        "num_ids": 48
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n<=m):\n        return n\n    else:\n        return int(n/m)\n        \ndef solve(n,m):\n    print(find(n,m))\n",
        "num_ids": 48
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # n=int(input(\"enter the first number\"))\n    # m=int(input(\"enter the second number\"))\n    # c=n/m\n    # print(c)\n    # return c\n",
        "num_ids": 50
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return 0\n    if n == m:\n        return 1\n    \n    div = n//m\n    rem = n%m\n    if rem == 0:\n        return div\n    else:\n        return div+1\n",
        "num_ids": 61
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    #return n/m\n    #print(n//m)\n    return int(n/m)\n",
        "num_ids": 29
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n > m:\n        return n//m\n    elif n < m:\n        return -1\n    elif n == m:\n        return 1\n",
        "num_ids": 40
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n",
        "num_ids": 11
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n%m == 0):\n        return(n//m)\n    else:\n        return(n//m+1)\n",
        "num_ids": 34
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient\n",
        "num_ids": 16
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (n==0):\n        return 0\n    if (n<0):\n        return -1*find(m,n*-1)\n    else:\n        return (n//m)\n        \ndef isPrime(n):  \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    #Prime numbers are greater than 1  \n    if (n > 1):  \n        # check for factors  \n        for i in range(2, n):  \n            if (n % i == 0):  \n                return False\n        return True\n  \n    # if input number is less than  \n    # or equal to 1, it is not prime  \n    else:  \n        return False\n        \ndef getFactor(n):  \n    '''\n    Write a python function to get factors of a number.\n    '''\n    l=[]\n    for i in range(1,n+1):\n        if n % i == 0:\n            l.append(i)\n    return l\n        \ndef makeDict(s):  \n    '''\n    Write a python function to create a dictionary from a string.\n    '''\n    # make a dictionary with each word as the key and the  \n    # word as the value of the key \n    d = dict() \n    l = s.split(\" \") \n    for i in l: \n        d[i] = i \n    return d \n        \ndef lenOfLongestSubstring(s):  \n    '''\n    Write a python function to get length of longest substring without repeating characters.\n    '''\n    d = {}\n    max_length = 0\n    for i in range(0, len(s)):  \n        if s[i] in d:  \n            max_length = max(max_length, d[s[i]] - i)\n        else: \n            max_length = max(max_length, i+1)\n        d[s[i]] = i+1\n    return max_length\n        \ndef reverse(s):  \n    '''\n    Write a python function to get reverse of a string.\n    '''\n    return s[::-1]\n    \ndef reverseWords(s):  \n    '''\n    Write a python function to get reverse of each word in a string.\n    '''\n    return''.join(reversed(s.split())) \n    \ndef findRepeating(s):  \n    '''\n    Write a python function to find repeating characters in a string.\n    '''\n    for i in s:\n        if s.count(i)>1:\n            return i\n    return 'No repeating character found.'\n        \ndef getDupChar(s):  \n    '''\n    Write a python function to get a string with duplicated characters.\n    '''\n    t=s.lower()\n    t=list(t)\n    l=[]\n    for i in t:\n        if t.count(i)>1:\n            if i not in l:\n                l.append(i)\n    return ''.join(l)\n    \ndef filterString(s):  \n    '''\n    Write a python function to filter vowels from a string.\n    '''\n    t=s.lower()\n    t=list(t)\n    l=[]\n    for i in t:\n        if i not in l:\n            if i in ['a','e','i','o','u']:\n                l.append(i)\n    return ''.join(l)\n    \ndef findASCII(s):  \n    '''\n    Write a python function to find ASCII value of each character in a string.\n    '''\n    l=[]\n    for i in s:\n        l.append(ord(i))\n    return l\n",
        "num_ids": 28
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient\n",
        "num_ids": 16
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=w\n    b=h\n    c=(a**2+b**2)**(1/2)\n    return c\ndef rightanglearea(b,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    a=b\n    c=h\n    s=(a+b+c)/2\n    area=(s*(s-a)*(s-b)*(s-c))**(1/2)\n    return area\ndef rightanglediameter(b,h):\n    '''\n    Write a function to find the diameter of a right angled triangle.\n    '''\n    a=b\n    c=h\n    s=(a+b+c)/2\n    d=(s-a)*(s-b)*(s-c)**(1/2)\n    return d\ndef rightangledegree(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=math.degrees(math.acos((a**2+b**2-c**2)/(2*b*c)))\n    return degree\ndef rightangledegree2(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*180)/math.pi\n    return degree\ndef rightangledegree3(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*360)/(2*math.pi)\n    return degree\ndef rightangledegree4(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*2*math.pi)/(360)\n    return degree\ndef rightangledegree5(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*2*math.pi*360)/(2*math.pi)\n    return degree\ndef rightangledegree6(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*360*2*math.pi)/(360)\n    return degree\ndef rightangledegree7(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*360*2*math.pi*360)/(2*math.pi)\n    return degree\ndef rightangledegree8(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*360*2*math.pi*360*360)/(2*math.pi)\n    return degree\ndef rightangledegree9(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*360*2*math.pi*360*360*360)/(2*math.pi)\n    return degree\ndef rightangledegree10(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*360*2*math.pi*360*360*360*360)/(2*math.pi)\n    return degree\ndef rightangledegree11(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*360*2*math.pi*360*360*360*360*360)/(2*math.pi)\n    return degree\ndef rightangledegree12(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*360*2*math.pi*360*360*360*360*360*360)/(2*math.pi)\n    return degree\ndef rightangledegree13(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*360*2*math.pi*360*360*360*360*360*360*360)/(2*math.pi)\n    return degree\ndef rightangledegree14(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*360*2*math.pi*360*360*360*360*360*360*360*360)/(2*math.pi)\n    return degree\ndef rightangledegree15(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*360*2*math.pi*360*360*360*360*360*360*360*360*360)/(2*math.pi)\n    return degree\ndef rightangledegree16(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*360*2*math.pi*360*360*360*360*360*360*360*360*360*360)/(2*math.pi)\n    return degree\ndef rightangledegree17(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*360*2*math.pi*360*360*360*360*360*360*360*360*360*360*360)/(2*math.pi)\n    return degree\ndef rightangledegree18(h):\n    '''\n    Write a function to find the angle of a right angled triangle.\n    '''\n    c=h\n    a=c\n    b=c\n    degree=(math.acos((a**2+b**2-c**2)/(2*b*c))*360*2*math.pi",
        "num_ids": 52
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(math.sqrt(w**2+h**2))\n",
        "num_ids": 19
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    return int(math.sqrt(w**2 + h**2))\n",
        "num_ids": 22
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside = math.sqrt(w**2 + h**2)\n    return thirdside\n",
        "num_ids": 25
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2+w**2)\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == 0 or h == 0:\n        return 0\n    else:\n        return math.sqrt(w**2+h**2)\n",
        "num_ids": 37
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w*w+h*h),2)\n    ",
        "num_ids": 23
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w>0 and h>0:\n        return math.sqrt(w**2+h**2)\n    else:\n        return \"Invalid input\"\n",
        "num_ids": 40
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside=math.sqrt(w**2+h**2)\n    return thirdside\ndef isosceles_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside=math.sqrt(w**2+h**2)\n    if w==h:\n        return thirdside\n    else:\n        return \"This is not a isosceles triangle\"\ndef thirdside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside=math.sqrt(w**2+h**2)\n    return thirdside\ndef area_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside=math.sqrt(w**2+h**2)\n    s=(w*h)/2\n    area=(s*thirdside)/2\n    return area\ndef perimeter_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        s=(w+h)/2\n        return s*2\ndef semi_perimeter_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        s=(w+h)/2\n        return s*2\ndef side_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        s=(w+h)/2\n        return s\ndef isosceles_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return \"This is not a right angled triangle\"\n    else:\n        return \"This is a right angled triangle\"\ndef rightangle_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return \"This is not a right angled triangle\"\n    else:\n        return \"This is a right angled triangle\"\ndef area_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        s=(w*h)/2\n        return s\ndef perimeter_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        s=(w+h)/2\n        return s\ndef semi_perimeter_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        s=(w+h)/2\n        return s\ndef side_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        s=(w+h)/2\n        return s\ndef diagonal_line(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    diagonal=math.sqrt((w**2)+(h**2))\n    return diagonal\ndef rightangle_diagonal_line(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    diagonal=math.sqrt((w**2)+(h**2))\n    if w==h:\n        return \"This is not a right angled triangle\"\n    else:\n        return \"This is a right angled triangle\"\ndef otherside_rightanglediagonal(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    diagonal=math.sqrt((w**2)+(h**2))\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        return \"This is a right angled triangle\"\ndef diagonal_line(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    diagonal=math.sqrt((w**2)+(h**2))\n    return diagonal\ndef rightangle_diagonal_line(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    diagonal=math.sqrt((w**2)+(h**2))\n    if w==h:\n        return \"This is not a right angled triangle\"\n    else:\n        return \"This is a right angled triangle\"\ndef otherside_rightanglediagonal(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    diagonal=math.sqrt((w**2)+(h**2))\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        return \"This is a right angled triangle\"\ndef otherside_diagonal_line(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    diagonal=math.sqrt((w**2)+(h**2))\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        return \"This is a right angled triangle\"\ndef area_rightanglediagonal(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    diagonal=math.sqrt((w**2)+(h**2))\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        s=(w*h)/2\n        return s\ndef perimeter_rightanglediagonal(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        s=(w+h)/2\n        return s\ndef semi_perimeter_rightanglediagonal(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        s=(w+h)/2\n        return s\ndef area_rightanglediagonal(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    diagonal=math.sqrt((w**2)+(h**2))\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        s=(w*h)/2\n        return s\ndef perimeter_rightanglediagonal(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        s=(w+h)/2\n        return s\ndef semi_perimeter_rightanglediagonal(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return \"Triangle is isosceles\"\n    else:\n        s=(w+h)/2\n        return s\ndef area_rightanglediagonal(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    diagonal=math.sqrt((w**2)+(h**2))\n    if w==h:\n        retur",
        "num_ids": 31
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    \n    \n    \n    listval.sort()\n    print(listval[-1])\n",
        "num_ids": 27
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #maxval = listval[0]\n    maxval = 0\n    for item in listval:\n        if(item > maxval):\n            maxval = item\n    return maxval\n",
        "num_ids": 47
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    max_num = 0\n    if len(listval) == 1:\n        return listval[0]\n    elif len(listval) == 0:\n        return None\n    else:\n        for i in range(len(listval)):\n            if listval[i] > max_num:\n                max_num = listval[i]\n        return max_num\n",
        "num_ids": 93
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = None\n    for elem in listval:\n        if isinstance(elem, int) and maxval == None or maxval < elem:\n            maxval = elem\n        elif isinstance(elem, str) and maxval == None or maxval < elem:\n            maxval = elem\n        elif isinstance(elem, float) and maxval == None or maxval < elem:\n            maxval = elem\n    return maxval\n",
        "num_ids": 114
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = None\n    for i in listval:\n        if maxval is None:\n            maxval = i\n        else:\n            if isinstance(i, int) or isinstance(i, float):\n                maxval = i if i > maxval else maxval\n            elif isinstance(i, str):\n                maxval = i if len(i) > len(maxval) else maxval\n    return maxval\n",
        "num_ids": 102
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = None\n    for x in listval:\n        if maxval is None or maxval < x:\n            maxval = x\n    return maxval\n",
        "num_ids": 40
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for x in listval:\n        if x > max_val:\n            max_val = x\n    return max_val\n",
        "num_ids": 43
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #If list is empty, return None.\n    if not listval:\n        return None\n",
        "num_ids": 24
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for item in listval:\n        if item > max_value:\n            max_value = item\n    return max_value\n    \ndef sum_val(listval):\n    '''\n    Write a function to sum all items in a given heterogeneous list.\n    '''\n    sum_value = 0\n    for item in listval:\n        sum_value += item\n    return sum_value\n",
        "num_ids": 30
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [i for i in range(1, number + 1) if number % i == 0]\n    return sum(divisors)\n",
        "num_ids": 37
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    #total = 0\n    #for n in range(1, number):\n    #    if number % n == 0:\n    #        total += n\n    #return total\n    return sum([x for x in range(1,number+1) if number % x == 0])\nprint(sum_div(20))\nprint(sum_div(15))\nprint(sum_div(6))\nprint(sum_div(9))\nprint(sum_div(43))\nprint(sum_div(84))\nprint(sum_div(20))\nprint(sum_div(20))",
        "num_ids": 138
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divs = 0\n    for div in range(1,number):\n        if number % div == 0:\n            sum_divs += div\n    return sum_divs\n",
        "num_ids": 45
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 0:\n        raise ValueError('Number must be positive.')\n    if number == 1:\n        return 1\n    return number + sum_div(number-1)\n",
        "num_ids": 45
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([i for i in range(1,number) if number % i == 0])\n",
        "num_ids": 24
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 1\n    divisor = 2\n    while divisor < number:\n        if number % divisor == 0:\n            sum_div += divisor\n        divisor += 1\n    return sum_div\n",
        "num_ids": 58
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    #If the number is even, its number of divisors is equal to half the number of divisors (1 + 2 + 4 + 6 + 8)\n    #If the number is odd, it's number of divisors is equal to the number of divisors plus one (1 + 3 + 5 + 7 + 9 + 11)\n    #The number of divisors is equal to the square root of the number, and the divisor is 1, 2, 3, 5, and 6, so this sum is equal to the square of the number + 1\n    if (number % 2) == 0:\n        return (number / 2) + 1\n    else:\n        return (number * number) + 1\n",
        "num_ids": 162
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    sum = 0\n    for i in range(1, math.ceil(number ** 0.5)):\n        if number % i == 0:\n            sum += i\n            if i!= number // i:\n                sum += number // i\n    return sum\n",
        "num_ids": 67
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge(arr, l, m, r): \n        '''\n        This Function takes 3 parameters:\n        1) Array\n        2) Left index of the array\n        3) Middle index of the array\n        4) Right index of the array\n        '''\n        n1 = m - l + 1\n        n2 = r - m \n    \n        L = [0] * (n1) \n        R = [0] * (n2) \n    \n        for i in range(0, n1): \n            L[i] = arr[l + i] \n    \n        for j in range(0, n2): \n            R[j] = arr[m + 1 + j] \n    \n        i = 0     \n        j = 0     \n        k = l     \n    \n        while i < n1 and j < n2 : \n            if L[i] <= R[j]: \n                arr[k] = L[i] \n                i += 1\n            else: \n                arr[k] = R[j] \n                j += 1\n                inversions += n1 - i\n            k += 1\n    \n        while i < n1: \n            arr[k] = L[i] \n            i += 1\n            k += 1\n    \n        while j < n2: \n            arr[k] = R[j] \n            j += 1\n            k += 1\n    \n    def mergeSort(arr,l,r): \n        if l < r: \n            m = (l+(r-1))//2\n    \n            mergeSort(arr, l, m) \n            mergeSort(arr, m+1, r) \n            merge(arr, l, m, r) \n    \n    mergeSort(arr, 0, len(arr) - 1) \n    return inversions\n",
        "num_ids": 382
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return count_inversions(arr)\n    \ndef count_inversions(arr):\n    '''\n    This function will count inversions in an array\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    mid = n // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    inversions_left = count_inversions(left_half)\n    inversions_right = count_inversions(right_half)\n    inversions = count_split_inversions(arr, left_half, right_half)\n    return inversions_left + inversions_right + inversions\n",
        "num_ids": 120
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergeSort(arr)",
        "num_ids": 9
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return _helper(arr)\n",
        "num_ids": 11
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr)\n",
        "num_ids": 11
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort_inv_count(arr)\n",
        "num_ids": 15
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    #Initialize result \n    res = 0\n    #Sort the array\n    arr.sort()\n    #Count of inversions in an array \n    i = 0\n    #Looping through every element \n    while (i < n): \n        #Add the number of inversions to result \n        res += arr[i]\n        #Increment i \n        i += 2\n    return res \n    ",
        "num_ids": 106
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inversions = 0\n",
        "num_ids": 16
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #return inversion_count(arr)\n    return merge_sort(arr)\n",
        "num_ids": 22
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n",
        "num_ids": 66
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for sublist in list1:\n        for i in sublist:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) > 0:\n        if type(list1[0]) == list:\n            return flatten_list(list1[0]) + flatten_list(list1[1:])\n        else:\n            return list1\n    return []\n    \n",
        "num_ids": 66
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Your code here\n    return [item for sublist in list1 for item in sublist]\n",
        "num_ids": 25
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for elem in list1:\n        if type(elem) == list:\n            flat_list += flatten_list(elem)\n        else:\n            flat_list.append(elem)\n    return flat_list\n",
        "num_ids": 64
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flatten_list = []\n    for i in list1:\n        if type(i) == list:\n            flatten_list.extend(flatten_list(i))\n        else:\n            flatten_list.append(i)\n    return flatten_list\n",
        "num_ids": 67
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list1 = [[1, 2, 3], [4, 5], [6], [7, 8, 9]]\n    return [e for sublist in list1 for e in sublist]\n",
        "num_ids": 46
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    l = []\n    def check(value):\n        if type(value) is list:\n            l.extend(value)\n        else:\n            l.append(value)\n    for value in list1:\n        check(value)\n    return l\n",
        "num_ids": 63
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # recursive function to flatten list\n    def flatten(list_of_lists):\n        result = []\n        for element in list_of_lists:\n            if type(element) is list:\n                result += flatten(element)\n            else:\n                result.append(element)\n        return result\n    return flatten(list1)\n",
        "num_ids": 83
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return flatten_list_helper(list1, [])\n",
        "num_ids": 18
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    sum, max = 0, 0\n    for tup in stdata:\n        sum += tup[1]\n        if tup[1] > max:\n            max = tup[1]\n    return sum, max\n",
        "num_ids": 55
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    max_aggregate = defaultdict(lambda: 0)\n    \n    for s, t in stdata:\n        max_aggregate[s] += t\n        \n    return max_aggregate\n    \n    \ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    \n    min_aggregate = defaultdict(lambda: 0)\n    \n    for s, t in stdata:\n        min_aggregate[s] += t\n        \n    return min_aggregate\n    \n    \ndef sum_aggregate(stdata):\n    '''\n    Write a function to calculate the sum aggregate from the list of tuples.\n    '''\n    \n    sum_aggregate = defaultdict(lambda: 0)\n    \n    for s, t in stdata:\n        sum_aggregate[s] += t\n        \n    return sum_aggregate\n",
        "num_ids": 50
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = {}\n    for element in stdata:\n        if element[0] in agg_dict:\n            agg_dict[element[0]] += element[1]\n        else:\n            agg_dict[element[0]] = element[1]\n    return max(agg_dict.values())\n",
        "num_ids": 74
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data=defaultdict(list)\n    for i in stdata:\n        data[i[0]].append(i[1])\n    new_data=sorted(data.items(),key=lambda i:max(i[1]),reverse=True)\n    print(new_data)\n    return new_data\n",
        "num_ids": 76
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #create a default dictonary\n    d = defaultdict(list)\n    #iterate through the list of tuples\n    for i in stdata:\n        #append the first item of each tuple into the list of dictionaries\n        d[i[0]].append(i[1])\n    #get a list of keys from the dictionary\n    keys = d.keys()\n    #sort the list\n    keys.sort()\n    #iterate through the keys\n    for k in keys:\n        #calculate the maximum aggregate\n        d[k] = max(d[k])\n    #print the maximum aggregate for the key k\n    print(\"Maximum aggregate is: {}\".format(d[k]))\n",
        "num_ids": 166
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = []\n    if len(stdata) > 0:\n        for key, value in stdata.items():\n            if key =='max_aggregate':\n                for item in value:\n                    data.append(item)\n    return data\ndef avg_aggregate(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    data = []\n    if len(stdata) > 0:\n        for key, value in stdata.items():\n            if key == 'avg_aggregate':\n                for item in value:\n                    data.append(item)\n    return data\ndef get_max(d, keyname):\n    '''\n    Write a function to return the maximum value from the dictionary.\n    '''\n    max_val = 0\n    for item in d.values():\n        if item[keyname] > max_val:\n            max_val = item[keyname]\n    return max_val\ndef get_min(d, keyname):\n    '''\n    Write a function to return the minimum value from the dictionary.\n    '''\n    min_val = 99999999999999\n    for item in d.values():\n        if item[keyname] < min_val:\n            min_val = item[keyname]\n    return min_val\ndef get_avg(d, keyname):\n    '''\n    Write a function to return the average value from the dictionary.\n    '''\n    sum_val = 0\n    count = 0\n    for item in d.values():\n        sum_val = sum_val + item[keyname]\n        count = count + 1\n    return sum_val/count\ndef get_count(d, keyname):\n    '''\n    Write a function to return the total count from the dictionary.\n    '''\n    count = 0\n    for item in d.values():\n        count = count + 1\n    return count\ndef get_average(d, keyname):\n    '''\n    Write a function to return the average value from the dictionary.\n    '''\n    sum_val = 0\n    count = 0\n    for item in d.values():\n        sum_val = sum_val + item[keyname]\n        count = count + 1\n    return sum_val/count\ndef get_sum(d, keyname):\n    '''\n    Write a function to return the sum value from the dictionary.\n    '''\n    sum_val = 0\n    for item in d.values():\n        sum_val = sum_val + item[keyname]\n    return sum_val\ndef get_average_deviation(d, keyname):\n    '''\n    Write a function to return the average deviation value from the dictionary.\n    '''\n    sum_val = 0\n    count = 0\n    for item in d.values():\n        sum_val = sum_val + item[keyname]\n        count = count + 1\n    if count == 0:\n        return 0\n    return (sum_val/count) - get_avg(d, keyname)\ndef get_standard_deviation(d, keyname):\n    '''\n    Write a function to return the standard deviation value from the dictionary.\n    '''\n    sum_val = 0\n    count = 0\n    for item in d.values():\n        sum_val = sum_val + pow(item[keyname] - get_avg(d, keyname), 2)\n        count = count + 1\n    if count == 0:\n        return 0\n    return pow(sum_val/count, 0.5)\ndef get_variance(d, keyname):\n    '''\n    Write a function to return the variance value from the dictionary.\n    '''\n    sum_val = 0\n    count = 0\n    for item in d.values():\n        sum_val = sum_val + pow(item[keyname] - get_avg(d, keyname), 2)\n        count = count + 1\n    if count == 0:\n        return 0\n    return sum_val/count\ndef get_mode(d, keyname):\n    '''\n    Write a function to return the mode value from the dictionary.\n    '''\n    max_val = 0\n    max_cnt = 0\n    for item in d.values():\n        if item[keyname] > max_val:\n            max_val = item[keyname]\n    for item in d.values():\n        if item[keyname] == max_val:\n            if max_cnt < item['cnt']:\n                max_cnt = item['cnt']\n    if max_cnt == 0:\n        return 0\n    return max_val\ndef get_median(d, keyname):\n    '''\n    Write a function to return the median value from the dictionary.\n    '''\n    data = []\n    for item in d.values():\n        data.append(item[keyname])\n    data.sort()\n    n = len(data)\n    if n%2 == 0:\n        return (data[int(n/2)-1] + data[int(n/2)])/2\n    else:\n        return data[int(n/2)]\ndef get_range(d, keyname):\n    '''\n    Write a function to return the range value from the dictionary.\n    '''\n    max_val = get_max(d, keyname)\n    min_val = get_min(d, keyname)\n    return max_val - min_val\ndef get_sum_deviation(d, keyname):\n    '''\n    Write a function to return the sum deviation value from the dictionary.\n    '''\n    sum_val = 0\n    for item in d.values():\n        sum_val = sum_val + (item[keyname] - get_avg(d, keyname))\n    return sum_val\ndef get_variance_deviation(d, keyname):\n    '''\n    Write a function to return the variance deviation value from the dictionary.\n    '''\n    sum_val = 0\n    count = 0\n    for item in d.values():\n        sum_val = sum_val + pow((item[keyname] - get_avg(d, keyname)), 2)\n        count = count + 1\n    if count == 0:\n        return 0\n    return pow(sum_val/count, 0.5)\ndef get_skewness(d, keyname):\n    '''\n    Write a function to return the skewness value from the dictionary.\n    '''\n    sum_val = 0\n    count = 0\n    for item in d.values():\n        sum_val = sum_val + pow((item[keyname] - get_avg(d, keyname)), 3)\n        count = count + 1\n    if count == 0:\n        return 0\n    return sum_val/count\ndef get_kurtosis(d, keyname):\n    '''\n    Write a function to return the kurtosis value from the dictionary.\n    '''\n    sum_val = 0\n    count = 0\n    for item in d.values():\n        sum_val = sum_val + pow((item[keyname] - get_avg(d, keyname)), 4)\n        count = count + 1\n    if count == 0:\n        return 0\n    return sum_val/count\ndef get_standard_deviation_deviation(d, keyname):\n    '''\n    Write a function to return the standard deviation deviation value from the dictionary.\n    '''\n    sum_val = 0\n    count = 0\n    for item in d.values():\n        sum_val = sum_val + pow((item[keyname] - get_avg(d, keyname)), 2)\n        count = count + 1\n    if count == 0:\n        return 0\n    return pow((sum_val/count), 0.5)\ndef get_variance_deviation_deviation(d, keyname):\n    '''\n    Write a function to return the variance deviation deviation value from the dictionary.\n    '''\n    sum_val = 0\n    count = 0\n    for item in d.values():\n        sum_val = sum_val + pow((item[keyname] - get_avg(d, keyname)), 2)\n        count = count + 1\n    if count == 0:\n        return 0\n    return pow(sum_val/count, 0.5",
        "num_ids": 85
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return stdata[0][1]\n",
        "num_ids": 12
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = lambda x, y: x if x > y else y\n    print(aggregate(4,3))\n    print(max(stdata, key=lambda x: x[1]))\n    return max(stdata, key=lambda x: x[1])[1]\n",
        "num_ids": 69
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = []\n    for st in stdata:\n        result.append(max(st))\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max = 0\n    max_list = []\n    for i in stdata:\n        if i[1] > max:\n            max = i[1]\n            max_list = []\n            max_list.append(i)\n        elif i[1] == max:\n            max_list.append(i)\n    return max_list\n",
        "num_ids": 84
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # top down\n    memo = [[None]*(n+1) for _ in range(n+1)]\n    def count_binary_seq_topdown(n, memo):\n        if memo[n][n] is not None:\n            return memo[n][n]\n        if n == 0:\n            return 1\n        if n == 1:\n            return 2\n        if n == 2:\n            return 4\n        memo[n][n] = count_binary_seq_topdown(n-1, memo) + count_binary_seq_topdown(n-2, memo)\n        return memo[n][n]\n    print(count_binary_seq_topdown(n, memo))\n",
        "num_ids": 168
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        if (i & (i+1)) == (i >> n) << n:\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count=0\n    for i in range(2**(2*n)):\n        if ((i>>n)&1==(i>>(2*n))&1):\n            count+=1\n    return count\n    \ndef count_binary_seq_recursive(n):\n    if n<=1:\n        return n\n    else:\n        return count_binary_seq_recursive(n-1)+count_binary_seq_recursive(n-2)\n    \ndef count_binary_seq_top_down_dp(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp=[[0 for i in range(2**(2*n))] for j in range(n+1)]\n    for i in range(2**(2*n)):\n        dp[1][i]=i%2\n    for i in range(1,n+1):\n        for j in range(2**(2*n)):\n            dp[i][j]=(dp[i-1][j]+(dp[i-2][j] if j>=2**(i-1) else 0))%(2**(2*n))\n    return dp[n][0]\n    \ndef count_binary_seq_top_down_dp_with_memoization(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp=[[0 for i in range(2**(2*n))] for j in range(n+1)]\n    mod=10**9+7\n    for i in range(2**(2*n)):\n        dp[1][i]=i%2\n    \n    for i in range(1,n+1):\n        for j in range(2**(2*n)):\n            dp[i][j]=(dp[i-1][j]+(dp[i-2][j] if j>=2**(i-1) else 0))%(2**(2*n))\n            \n    return dp[n][0]\n    \ndef count_binary_seq_bottom_up_dp(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp=[0 for i in range(2**(2*n))]\n    mod=10**9+7\n    dp[1]=1\n    for i in range(2,n+1):\n        for j in range(2**(2*n)):\n            dp[j]=(dp[j]+(dp[j^(2**(i-1))] if j>=2**(i-1) else 0))%(2**(2*n))\n            \n    return dp[0]\n    \ndef count_binary_seq_bottom_up_dp_with_memoization(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp=[0 for i in range(2**(2*n))]\n    mod=10**9+7\n    dp[1]=1\n    memo=[0 for i in range(2**(2*n))]\n    memo[1]=1\n    for i in range(2,n+1):\n        for j in range(2**(2*n)):\n            dp[j]=(dp[j]+(dp[j^(2**(i-1))] if j>=2**(i-1) else 0))%(2**(2*n))\n            \n    return dp[0]\n    \ndef count_binary_seq_bottom_up_dp_with_memoization_and_extra_variable(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp=[0 for i in range(2**(2*n))]\n    mod=10**9+7\n    dp[1]=1\n    memo=[0 for i in range(2**(2*n))]\n    memo[1]=1\n    for i in range(2,n+1):\n        for j in range(2**(2*n)):\n            dp[j]=(dp[j]+(dp[j^(2**(i-1))] if j>=2**(i-1) else 0))%(2**(2*n))\n        \n    return dp[0]\n    \ndef count_binary_seq_bottom_up_dp_with_extra_variable(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp=[0 for i in range(2**(2*n))]\n    mod=10**9+7\n    dp[1]=1\n    for i in range(2,n+1):\n        for j in range(2**(2*n)):\n            dp[j]=(dp[j]+(dp[j^(2**(i-1))] if j>=2**(i-1) else 0))%(2**(2*n))\n            \n    return dp[0]\n    \ndef count_binary_seq_bottom_up_dp_with_extra_variable_mod(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp=[0 for i in range(2**(2*n))]\n    mod=10**9+7\n    dp[1]=1\n    for i in range(2,n+1):\n        for j in range(2**(2*n)):\n            dp[j]=(dp[j]+(dp[j^(2**(i-1))] if j>=2**(i-1) else 0))%mod\n            \n    return dp[0]\n    \ndef count_binary_seq_bottom_up_dp_with_extra_variable_for_mod(n,mod):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp=[0 for i in range(2**(2*n))]\n    dp[1]=1\n    for i in range(2,n+1):\n        for j in range(2**(2*n)):\n            dp[j]=(dp[j]+(dp[j^(2**(i-1))] if j>=2**(i-1) else 0))%mod\n            \n    return dp[0]\n    \ndef count_binary_seq_bottom_up_dp_with_extra_variable_mod_and_memoization(n,mod):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp=[0 for i in range(2**(2*n))]\n    dp[1]=1\n    memo=[0 for i in range(2**(2*n))]\n    memo[1]=1\n    for i in range(2,n+1):\n        for j in range(2**(2*n)):\n            dp[j]=(dp[j]+(dp[j^(2**(i-1))] if j>=2**(i-1) else 0))%mod\n            \n    return dp[0]\n    \ndef count_binary_seq_bottom_up_dp_with_extra_variable_for_mod_and_memoization(n,mod):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp=[0 for i in range(2**(2*n))]\n    dp[1]=1\n    memo=[0 for i in rang",
        "num_ids": 36
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2 ** (2 * n)\n",
        "num_ids": 12
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Your code here\n    dp = [[[0 for j in range(2*n+1)] for i in range(n+1)] for k in range(n+1)]\n    for i in range(n+1):\n        dp[0][i][n] = 1\n    for i in range(1, n+1):\n        for j in range(n+1):\n            for k in range(n+1):\n                if j + k < n + 1:\n                    dp[i][j][k] = dp[i-1][j][k]\n                else:\n                    dp[i][j][k] = dp[i-1][j][k] + dp[i-1][j+1][k-n]\n    return dp[n][0][n] - 1\n",
        "num_ids": 191
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return count_binary_seq_helper(n, n, [])\n",
        "num_ids": 20
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2 ** (n * 2)\n",
        "num_ids": 12
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    sum1 = sum2 = 0\n    for i in range(1, 2**n): \n        # calculate sum1 and sum2 \n        sum1 = sum1 + int((bin(i).split('b')[1])[:n], 2)\n        sum2 = sum2 + int((bin(i).split('b')[1])[-n:], 2)\n        #print(bin(i).split('b')[1][:n], bin(i).split('b')[1][-n:])\n",
        "num_ids": 124
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initializing list of sequences\n    seq = []\n    # Iterating through all the sequences\n    for i in range(2**(2*n)):\n        # Converting the binary number to string\n        number = str(bin(i))\n        # Removing '0b' from the string\n        number = number[2:]\n        # Iterating through the number\n        for j in range(0,len(number)):\n            # Converting the string into binary sequence\n            seq.append(number[j])\n    # print(seq)\n    # Counting the number of sequences\n    count = 0\n    for i in seq:\n        if i == '1':\n            count += 1\n    return count\n",
        "num_ids": 166
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**(2*n)\n",
        "num_ids": 12
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    elif not d:\n        return 1\n    return 1 + max(dict_depth(d[k]) for k in d)\n",
        "num_ids": 48
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + (max(map(dict_depth, d.values())) if isinstance(d, dict) else 0)\n",
        "num_ids": 32
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        if len(d) == 0:\n            return 1\n        else:\n            depth = 0\n            for key in d:\n                d_depth = dict_depth(d[key])\n                if d_depth > depth:\n                    depth = d_depth\n            return depth + 1\n    return 0\n",
        "num_ids": 82
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n",
        "num_ids": 41
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n    elif len(d.keys()) == 0:\n        return 0\n    else:\n        # if d is an empty dictionary, returns 0\n        return 1 + max([dict_depth(d[k]) for k in d.keys()])\n",
        "num_ids": 72
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depths = [_depth(d)]\n    if isinstance(d, dict):\n        depths.append(_depth(d.values()))\n        depths.append(_depth(d.keys()))\n    if isinstance(d, list):\n        depths.append(_depth(d))\n    return max(depths)\n",
        "num_ids": 80
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    l=0\n    u=len(ranges)-1\n    while(l<=u):\n        mid=(l+u)//2\n        if arr[ranges[mid]]==index:\n            return arr[ranges[mid]]\n        elif arr[ranges[mid]]<index:\n            l=mid+1\n        elif arr[ranges[mid]]>index:\n            u=mid-1\n    return arr[ranges[u]]\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2004
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,ranges[index]) :\n        if(arr[i]==arr[i+rotations[index]]) :\n            return arr[i]\n        \nif __name__ == \"__main__\" :\n    arr = [1,2,3,4,5,6,7,8,9,0]\n    ranges = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n    rotations = [1,3,5,7,9]\n    for index in range(0,len(rotations)) :\n        print(\"The element at index {} is {}\".format(rotations[index],find_Element(arr,ranges,rotations,index)))",
        "num_ids": 182
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        if index>=len(arr):\n            index = index%len(arr)\n        else:\n            break\n    return arr[index]\n",
        "num_ids": 46
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    left, right = 0, len(arr)-1\n    rotations = rotations % len(arr)\n    while left <= right : \n        mid = (left+right)//2\n        if arr[mid] == ranges[index] :\n            return arr[mid]\n        elif ranges[index] > arr[mid] :\n            left = mid+1\n        else :\n            right = mid-1\n    if right < 0 :\n        return arr[0]\n    else :\n        left = 0\n        while left <= right : \n            mid = (left+right)//2\n            if arr[mid] == ranges[index] :\n                return arr[mid]\n            elif ranges[index] > arr[mid] :\n                left = mid+1\n            else :\n                right = mid-1\n    return arr[right]\n",
        "num_ids": 199
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index) :\n        ranges=rotations[i]\n        arr=rotate(arr,ranges)\n    return arr[index]\n",
        "num_ids": 41
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if (ranges[i][0] <= index < ranges[i][1]) : \n            return arr[i]\n",
        "num_ids": 44
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,ranges) : \n        if index < 0 :\n            index = index + ranges\n        if arr[i] > arr[index] :\n            rotations = rotations + (ranges - i)\n    return rotations\n",
        "num_ids": 62
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    length = len(arr)\n    n = index\n    #print(arr)\n    for i in range(0,rotations) :\n        #print(arr)\n        #print(n)\n        if(n < length) :\n            temp = arr[n]\n            for j in range(n,length-1) :\n                arr[j] = arr[j+1]\n            arr[length-1] = temp\n            n = n+1\n        elif(n == length) :\n            n = 0\n        else :\n            return None\n    #print(arr)\n    return arr[index]\n",
        "num_ids": 147
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        if(index>=len(arr)) :\n            index=index-len(arr)\n        else :\n            break\n    return(arr[index])\n",
        "num_ids": 50
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    try:\n        temp = arr[0]\n        counter = 0\n        for i in range(1,len(arr)):\n            if arr[i] >= ranges[0] and arr[i] <= ranges[1] :\n                counter +=1\n        if counter == len(arr) :\n            if temp > ranges[1] :\n                return rotations[1]\n            else:\n                return rotations[0]\n        else:\n            if arr[index] >= ranges[0] and arr[index] <= ranges[1]:\n                return rotations[index]\n            else:\n                if arr[index] >= ranges[1] :\n                    return rotations[1]\n                else:\n                    return rotations[0]\n    except:\n        return 'None'\n",
        "num_ids": 182
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #we can use list comprehension for this function\n",
        "num_ids": 13
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list_w=[]\n    for word in words:\n        if word.startswith('p'):\n            list_w.append(word)\n    return list_w[0:2]\n",
        "num_ids": 49
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return list(filter(lambda x: x[0] == 'p', words))\n",
        "num_ids": 22
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for i in words:\n        if i.startswith('p') == True:\n            result.append(i)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if len(words)>=2:\n        x = list(filter(lambda word: word.startswith('p'), words))\n        return x\n    else:\n        return None\n",
        "num_ids": 46
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    i = 0\n    p = re.compile(r'^p')\n    while i < len(words):\n        m = p.match(words[i])\n        if m:\n            print(words[i], words[i+1])\n            i += 2\n        else:\n            i += 1\n",
        "num_ids": 75
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = [word for word in words if word.startswith('p')]\n    print(words)\nstart_withp(['apple', 'banana', 'pear', 'peach'])\n",
        "num_ids": 50
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word.startswith('p')]\n",
        "num_ids": 21
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list1=[]\n    list2=[]\n    for i in words:\n        if(i[0]==\"p\"):\n            list1.append(i)\n    for i in list1:\n        if(i not in list2):\n            list2.append(i)\n    return list2[0],list2[1]\n",
        "num_ids": 83
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    r = re.compile(r'\\b[p]\\w*\\b')\n    for word in words:\n        if r.findall(word):\n            print(word)\nstart_withp(['python', 'panda', 'puppy', 'pandas'])\n",
        "num_ids": 71
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # return -1 if k > n\n    if k > n:\n        return -1\n    # base cases\n    if k == 1:\n        return max(a[:index])\n",
        "num_ids": 46
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # code here\n    dp = [0]*(n+1)\n    dp[0] = a[0]\n    for i in range(1, n+1):\n        dp[i] = max(dp[i-1]+a[i], a[i])\n    return max(dp[:index]) + max(dp[index:index+k])\n",
        "num_ids": 88
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # initializing first and second minimum values as -1\n    s1 = -1\n    s2 = -1\n    # initializing the current sum\n    cur_sum = 0\n    # initializing the maximum sum as -1\n    max_sum = -1\n    # initializing the maximum prefix sum as -1\n    max_pref_sum = -1\n    # iterating from the beginning to the given index\n    for i in range(n):\n        # updating the current sum\n        cur_sum += a[i]\n        # if the current sum is less than s1, then just update s1\n        if cur_sum < s1:\n            s1 = cur_sum\n        # if the current sum is greater than s2, then update s2\n        elif cur_sum > s2:\n            s2 = cur_sum\n        # if the current sum is greater than the previous max sum, then update the max sum\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n            max_pref_sum = s1\n        # if the current sum is greater than the kth element, then update the kth element sum and the max sum\n        if i >= k:\n            if cur_sum > a[i]:\n                a[i] = cur_sum\n                max_sum = cur_sum\n    # return the maximum sum and the maximum prefix sum\n    return max_sum, max_pref_sum\n",
        "num_ids": 335
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return -2**31\n    dp = [[0]*k for _ in range(n)]\n    for j in range(k):\n        dp[j][j] = a[j]\n    for j in range(k, n):\n        dp[j][j] = a[j]\n        for i in range(j-1, -1, -1):\n            for l in range(k):\n                if i+l < j:\n                    dp[j][j] = max(dp[j][j], dp[i][l] + a[j])\n    return dp[n-1][k-1]\n",
        "num_ids": 156
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # dp[i][k] is the maximum sum of increasing subsequence in prefix array ending at i with the kth element being k\n    # dp[i][k] = max(dp[j][k] + dp[i - j][k - j]) for j in range(0, i)\n    dp = [[0] * (k + 1) for i in range(n + 1)]\n",
        "num_ids": 95
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k >= n:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # If kth element is beyond limit, then just return 0\n    if k > n:\n        return 0\n    # If kth element is the last element, then just return the sum of array\n    if k == n:\n        return sum(a)\n    # If index is beyond limit, then return 0\n    if index == n:\n        return 0\n    # If kth element is the first element, then return the sum of array\n    if k == 0:\n        return sum(a)\n    # If we already stored the result, then just return it\n    if index + 1 in cache:\n        return cache[index + 1]\n    # The case when kth element is in between. We will try to return the maximum of following three cases:\n    # 1. Max of including kth element, without kth element, without kth element\n    # 2. Max of including kth element, without kth element, with kth element\n    # 3. Max of including kth element, with kth element, without kth element\n    # We will save the result in cache[index + 1]\n    temp = max_sum_increasing_subseq(a, n, index + 1, k) + a[index]\n    cache[index + 1] = max(temp, max_sum_increasing_subseq(a, n, index + 1, k - 1) + a[index])\n    return cache[index + 1]\n",
        "num_ids": 327
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Find the maximum sum of increasing subsequence from prefix until ith index\n    # and also including a given kth element which is after i, i.e., k > i.\n    max_sum = 0\n    for i in range(index, k):\n        max_sum += a[i]\n",
        "num_ids": 71
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(index == n):\n        return 0\n    max1 = 0\n    for i in range(index, n):\n        curr_sum = 0\n        for j in range(index, i+1):\n            curr_sum = curr_sum + a[j]\n        max1 = max(max1, curr_sum)\n    max2 = 0\n    for i in range(index, n):\n        if(k < i):\n            curr_sum = 0\n            for j in range(index, k):\n                curr_sum = curr_sum + a[j]\n            max2 = max(max2, curr_sum)\n    return max(max1, max2)\n",
        "num_ids": 169
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # The sum of the current sequence.\n    sum = 0\n    # The maximum sum of increasing subsequence.\n    max_sum = 0\n    # Maximum sum upto index i-1 in prefix\n    max_sum_upto_index_k = 0\n    # Maximum sum upto index i-2 in prefix\n    max_sum_upto_index_k_1 = 0\n",
        "num_ids": 91
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if(m>n):\n        return tuplex[:n]\n    elif(m<n):\n        return tuplex[m:]\n    else:\n        return tuplex\ndef tuple_to_list(tuplex):\n    '''\n    Write a function to change a tuple to a list\n    '''\n    return list(tuplex)\ndef list_to_tuple(listx):\n    '''\n    Write a function to change a list to a tuple\n    '''\n    return tuple(listx)\ndef set_to_list(tuplex):\n    '''\n    Write a function to change a set to a list\n    '''\n    return list(tuplex)\ndef list_to_set(listx):\n    '''\n    Write a function to change a list to a set\n    '''\n    return set(listx)\ndef dict_to_tuple(dictx):\n    '''\n    Write a function to change a dictionary to a tuple\n    '''\n    return tuple(dictx.items())\ndef tuple_to_dict(tuplex):\n    '''\n    Write a function to change a tuple to a dictionary\n    '''\n    return dict(tuplex)\ndef index_search(listx,elem):\n    '''\n    Write a function to search the index of an element in a list\n    '''\n    return listx.index(elem)\ndef insert_elem_to_list(listx,elem,index):\n    '''\n    Write a function to insert an element to the list at a given index\n    '''\n    return listx.insert(index,elem)\ndef delete_elem_to_list(listx,elem):\n    '''\n    Write a function to delete an element in a list\n    '''\n    return listx.remove(elem)\ndef delete_elem_index_to_list(listx,index):\n    '''\n    Write a function to delete an element in a list at a given index\n    '''\n    return listx.pop(index)\ndef delete_elem_all_index_to_list(listx,index):\n    '''\n    Write a function to delete all elements in a list at a given index\n    '''\n    return listx.pop(index)\ndef delete_elem_all_index_to_list(listx):\n    '''\n    Write a function to delete all elements in a list\n    '''\n    return listx.clear()\ndef sort_list(listx):\n    '''\n    Write a function to sort the list\n    '''\n    return listx.sort()\ndef sort_list_reverse(listx):\n    '''\n    Write a function to sort the list in reverse\n    '''\n    return listx.sort(reverse=True)\ndef tuple_sort(tuplex):\n    '''\n    Write a function to sort a tuple\n    '''\n    return sorted(tuplex)\ndef index_of_elem_in_tuple(tuplex,elem):\n    '''\n    Write a function to return the index of an element in a tuple\n    '''\n    return tuplex.index(elem)\ndef replace_elem_in_tuple(tuplex,elem,newelem):\n    '''\n    Write a function to replace an element in a tuple\n    '''\n    return tuplex.replace(elem,newelem)\ndef remove_elem_in_tuple(tuplex,elem):\n    '''\n    Write a function to remove an element from a tuple\n    '''\n    return tuplex.remove(elem)\ndef replace_elem_index_in_tuple(tuplex,index,newelem):\n    '''\n    Write a function to replace an element in a tuple at a given index\n    '''\n    return tuplex.pop(index)\ndef remove_elem_index_in_tuple(tuplex,index):\n    '''\n    Write a function to remove an element in a tuple at a given index\n    '''\n    return tuplex.pop(index)\ndef remove_all_elem_in_tuple(tuplex,elem):\n    '''\n    Write a function to remove all elements in a tuple\n    '''\n    return tuplex.remove(elem)\ndef remove_all_elem_index_in_tuple(tuplex,index):\n    '''\n    Write a function to remove all elements in a tuple at a given index\n    '''\n    return tuplex.pop(index)\ndef count_elem_in_tuple(tuplex,elem):\n    '''\n    Write a function to count how many times an element appears in a tuple\n    '''\n    return tuplex.count(elem)\ndef list_to_tuple_with_elem(listx,elem):\n    '''\n    Write a function to change a list to a tuple with a given element\n    '''\n    return tuple(listx+[elem])\ndef tuple_to_list_with_elem(tuplex,elem):\n    '''\n    Write a function to change a tuple to a list with a given element\n    '''\n    return list(tuplex+[elem])\ndef tuple_slice_in_tuple(tuplex,start,end):\n    '''\n    Write a function to slice a tuple in a given range\n    '''\n    return tuplex[start:end]\ndef tuple_slice_in_list(tuplex,start,end):\n    '''\n    Write a function to slice a tuple in a given range\n    '''\n    return list(tuplex[start:end])\ndef list_slice_in_tuple(listx,start,end):\n    '''\n    Write a function to slice a list in a given range\n    '''\n    return listx[start:end]\ndef list_slice_in_list(listx,start,end):\n    '''\n    Write a function to slice a list in a given range\n    '''\n    return listx[start:end]\ndef add_elem_to_tuple(tuplex,elem):\n    '''\n    Write a function to add an element to a tuple\n    '''\n    return tuplex+[elem]\ndef add_elem_to_list(listx,elem):\n    '''\n    Write a function to add an element to a list\n    '''\n    return listx+[elem]\ndef add_elem_to_set(setx,elem):\n    '''\n    Write a function to add an element to a set\n    '''\n    return setx|set([elem])\ndef add_elem_to_dict(dictx,elem):\n    '''\n    Write a function to add an element to a dictionary\n    '''\n    dictx.setdefault(elem,[])\ndef add_elem_to_dict_index(dictx,elem,index):\n    '''\n    Write a function to add an element to a dictionary at a given index\n    '''\n    dictx.setdefault(elem,[]).insert(index,None)\ndef add_elem_to_dict_index_all(dictx,elem,index):\n    '''\n    Write a function to add an element to a dictionary at a given index\n    '''\n    dictx.setdefault(elem,[]).insert(index,None)\ndef add_elem_to_dict_index_all_reverse(dictx,elem,index):\n    '''\n    Write a function to add an element to a dictionary at a given index in reverse order\n    '''\n    dictx.setdefault(elem,[]).insert(index,None)\ndef remove_elem_to_tuple(tuplex,elem):\n    '''\n    Write a function to remove an element from a tuple\n    '''\n    return tuplex-tuplex([elem])\ndef remove_elem_to_list(listx,elem):\n    '''\n    Write a function to remove an element from a list\n    '''\n    return listx-listx([elem])\ndef remove_elem_to_set(setx,elem):\n    '''\n    Write a function to remove an element from a set\n    '''\n    return setx-set([elem])\ndef remove_elem_to_dict(dict",
        "num_ids": 24
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = []\n    for i in range(len(tuplex)):\n        if i == m-1:\n            tuplex_inner = tuplex[i]\n            for j in range(len(tuplex_inner)):\n                if j == n-1:\n                    new_tuplex.append(tuplex_inner[j])\n        else:\n            new_tuplex.append(tuplex[i])\n    return new_tuplex\ndef colon_tuplex_plus(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple plus.\n    '''\n    new_tuplex = []\n    for i in range(len(tuplex)):\n        if i == m-1:\n            tuplex_inner = tuplex[i]\n            for j in range(len(tuplex_inner)):\n                if j == n-1:\n                    new_tuplex.append(tuplex_inner[j] + 1)\n        else:\n            new_tuplex.append(tuplex[i])\n    return new_tuplex\ndef colon_tuplex_minus(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple minus.\n    '''\n    new_tuplex = []\n    for i in range(len(tuplex)):\n        if i == m-1:\n            tuplex_inner = tuplex[i]\n            for j in range(len(tuplex_inner)):\n                if j == n-1:\n                    new_tuplex.append(tuplex_inner[j] - 1)\n        else:\n            new_tuplex.append(tuplex[i])\n    return new_tuplex\ndef get_colon(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex(tuplex,m,n)\ndef get_colon_plus(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple plus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_plus(tuplex,m,n)\ndef get_colon_minus(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple minus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_minus(tuplex,m,n)\ndef get_colon_minus_1(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple minus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_minus(tuplex,m,n)\ndef get_colon_plus_1(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple plus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_plus(tuplex,m,n)\ndef get_colon_plus_2(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple plus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_plus(tuplex,m,n)\ndef get_colon_minus_2(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple minus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_minus(tuplex,m,n)\ndef get_colon_plus_3(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple plus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_plus(tuplex,m,n)\ndef get_colon_minus_3(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple minus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_minus(tuplex,m,n)\ndef get_colon_plus_4(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple plus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_plus(tuplex,m,n)\ndef get_colon_minus_4(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple minus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_minus(tuplex,m,n)\ndef get_colon_minus_5(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple minus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_minus(tuplex,m,n)\ndef get_colon_plus_5(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple plus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_plus(tuplex,m,n)\ndef get_colon_plus_6(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple plus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_plus(tuplex,m,n)\ndef get_colon_minus_6(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple minus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_minus(tuplex,m,n)\ndef get_colon_minus_7(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple minus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_minus(tuplex,m,n)\ndef get_colon_plus_7(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple plus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_plus(tuplex,m,n)\ndef get_colon_plus_8(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple plus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_plus(tuplex,m,n)\ndef get_colon_minus_8(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple minus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_minus(tuplex,m,n)\ndef get_colon_plus_9(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple plus.\n    '''\n    if m == n:\n        return tuplex\n    else:\n        return colon_tuplex_plus(tuplex,m,n)\ndef get_colon_minus_9(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple minus.\n    '",
        "num_ids": 18
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l=[]\n    for i in range(len(tuplex)):\n        l.append(tuplex[i])\n    l.append((m,n))\n    return tuple(l)\n",
        "num_ids": 50
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    colon_list = []\n    \n    for j in range(n):\n        for i in range(m):\n            colon_list.append(tuplex[i][j])\n    \n    return tuple(colon_list)\n",
        "num_ids": 61
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    lis = []\n    for i in range(m):\n        lis.append(tuplex[i][:n])\n    return tuple(lis)\n",
        "num_ids": 38
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    n_tuplex=[]\n    for i in range(m):\n        l_tuplex=[]\n        for j in range(n):\n            l_tuplex.append(tuplex[(i*n)+j])\n        n_tuplex.append(l_tuplex)\n    return n_tuplex\n",
        "num_ids": 83
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # \u6ce8\u610f\uff0c\u8fd9\u91cc\u9700\u8981\u590d\u5236\u4e00\u4efd\u65b0\u7684\u5143\u7ec4\uff0c\u5426\u5219\u539f\u5143\u7ec4\u5c06\u88ab\u6539\u53d8\u3002\n    new_tuplex = deepcopy(tuplex)\n    return tuple(new_tuplex[0:m] + new_tuplex[n:])\n",
        "num_ids": 101
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuple_list = []\n    for i in range(m):\n        tuple_list.append(tuplex[i*n:(i+1)*n])\n    return tuple_list\n    \n",
        "num_ids": 50
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_list=list(tuplex)\n    tuplex_colon=[]\n    for i in range(n):\n        tuplex_colon.append(tuplex_list[m*i:m*(i+1)])\n    tuplex_colon=tuple(tuplex_colon)\n    return tuplex_colon\n",
        "num_ids": 92
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = ()\n    for i in range(m-1):\n        new_tuplex = new_tuplex + (tuplex[i],)\n    new_tuplex = new_tuplex + (tuplex[m-1],)\n    for i in range(m,n):\n        new_tuplex = new_tuplex + (tuplex[i],)\n    return new_tuplex\n",
        "num_ids": 109
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return None\n    if len(nums1) > len(nums2):\n        list1 = nums1\n        list2 = nums2\n    else:\n        list1 = nums2\n        list2 = nums1\n",
        "num_ids": 78
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the list in reverse order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n",
        "num_ids": 35
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    for i in range(N):\n        res.append(nums1[i]*nums2[i])\n    return sorted(res)[-N:]\n",
        "num_ids": 45
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(0, N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    products.sort(reverse=True)\n    return products[0:N]\n",
        "num_ids": 62
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def generate_products(nums1, nums2, N):\n        res = []\n        for i in range(N):\n            for j in range(N):\n                res.append(nums1[i]*nums2[j])\n        return res\n    return max(generate_products(nums1, nums2, N))\n",
        "num_ids": 85
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    nums1.sort()\n    nums2.sort()\n",
        "num_ids": 20
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    if N == 1:\n        return min(nums1[-1] * nums2[-1], nums1[0] * nums2[0])\n    elif N == 2:\n        return max(nums1[-1] * nums2[-1], nums1[0] * nums2[0])\n    else:\n        nums1 = nums1[-N:]\n        nums2 = nums2[:N]\n    return max(nums1[0] * nums2[0], nums1[-1] * nums2[-1])\n",
        "num_ids": 162
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialise variables\n    n1_max = 0\n    n2_max = 0\n    output_list = []\n    # find the largest product for each list\n    for i in range(0, N):\n        if n1_max < nums1[i]:\n            n1_max = nums1[i]\n        if n2_max < nums2[i]:\n            n2_max = nums2[i]\n    # find products and store in output_list\n    for i in range(0, N):\n        if n1_max * nums2[i] > n2_max * nums1[i]:\n            output_list.append(n1_max * nums2[i])\n        else:\n            output_list.append(n2_max * nums1[i])\n    # return the list of products\n    return output_list\n",
        "num_ids": 210
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    m = {}\n    ans = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            p = nums1[i] * nums2[j]\n            if p not in m:\n                m[p] = 1\n            else:\n                m[p] += 1\n    for i in range(N):\n        if m[max(m.keys())] > 1:\n            m[max(m.keys())] -= 1\n        else:\n            ans.append(max(m.keys()))\n            m.pop(max(m.keys()))\n    return ans\n",
        "num_ids": 156
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        result.append(nums1[i]*nums2[i])\n    return sorted(result, reverse=True)[0:N]\n",
        "num_ids": 50
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\ndef add(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a+b\ndef substract(a,b):\n    '''\n    Write a python function to substract a number to another.\n    '''\n    return a-b\ndef multiply(a,b):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a*b\ndef divide(a,b):\n    '''\n    Write a python function to divide two numbers.\n    '''\n    return a/b\ndef power(a,b):\n    '''\n    Write a python function to find a number raised to the power of another number.\n    '''\n    return a**b\ndef modulus(a,b):\n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    return a%b\nprint(minimum(100,200))\nprint(maximum(100,200))\nprint(add(100,200))\nprint(substract(100,200))\nprint(multiply(100,200))\nprint(divide(100,200))\nprint(power(100,200))\nprint(modulus(100,200))",
        "num_ids": 84
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(\"The maximum number is : \",a)\n    else:\n        print(\"The maximum number is : \",b)\nmaximum(3,4)\nmaximum(100,1000)\n",
        "num_ids": 51
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n",
        "num_ids": 12
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    return b\n",
        "num_ids": 17
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return(a)\n    else:\n        return(b)\n",
        "num_ids": 25
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a,'is maximum')\n    elif b>a:\n        print(b,'is maximum')\n    else:\n        print('Both are equal')\na=int(input(\"Enter the number 1:\"))\nb=int(input(\"Enter the number 2:\"))\nmaximum(a,b)\n",
        "num_ids": 80
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = []\n    for i in str1:\n        str2.append(i)\n    tuple_of_str = tuple(str2)\n    return tuple_of_str\n",
        "num_ids": 47
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    char_list = []\n    for i in range(len(str1)):\n        char_list.append(str1[i])\n    return tuple(char_list)\n",
        "num_ids": 44
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = list(str1)\n    tpl = tuple(lst)\n    return tpl\n    pass\n    \ndef merge_the_tools(string, k):\n    '''\n    Given a string and a positive integer k, find the length of the longest substring that \n    contains at most k distinct characters.\n    '''\n    # your code goes here\n    \n    # i, j = 0, k\n    # temp = set()\n    # while i < len(string):\n    #     if len(temp) < k:\n    #         temp.add(string[i])\n    #         i += 1\n    #     else:\n    #         print(string[j:i])\n    #         temp = set()\n    #         j += k\n    #         i = j\n        \n    # print(string[j:i])\n    # print(temp)\n    # print(len(temp))\n    # pass\n    \n    string_len = len(string)\n    max_substring_len = string_len // k\n    \n    for i in range(0, string_len, k):\n        j = i + max_substring_len\n        sub_string = string[i: j]\n        unique_chars = set(sub_string)\n        print(unique_chars)\n        print(len(unique_chars))\n        # print(len(sub_string))\n        # print(j)\n        # print(i)\n        # print(string_len)\n    pass\n    \ndef reverse_string(string):\n    '''\n    Given a string, return the reversed version of that string.\n    '''\n    # your code goes here\n    # print(string[::-1])\n    # return string[::-1]\n    \n    # string = list(string)\n    # reverse_string = []\n    # string_len = len(string)\n    # for i in range(string_len):\n    #     reverse_string.append(string[string_len - i - 1])\n    # return ''.join(reverse_string)\n    \n    # i = 0\n    # j = len(string) - 1\n    # while i < j:\n    #     string[i], string[j] = string[j], string[i]\n    #     i += 1\n    #     j -= 1\n    # return ''.join(string)\n    pass\n    \ndef get_longest_substring_with_k_distinct_characters(string, k):\n    '''\n    Given a string and an integer, find the length of the longest substring that contains \n    k distinct characters.\n    '''\n    # your code goes here\n    # dict = {}\n    # longest_substring = ''\n    # for i in range(len(string)):\n    #     if string[i] not in dict:\n    #         dict[string[i]] = 1\n    #     else:\n    #         dict[string[i]] += 1\n    #     if len(dict) <= k:\n    #         longest_substring += string[i]\n    #     else:\n    #         while len(dict) > k:\n    #             left_index = longest_substring.rfind(string[i - 1])\n    #             if left_index == -1:\n    #                 left_index = 0\n    #             else:\n    #                 left_index = left_index + 1\n    #             if left_index == 0:\n    #                 break\n    #             longest_substring = longest_substring[:left_index]\n    #             del dict[string[i - 1]]\n    #             i -= 1\n    #         longest_substring += string[i]\n    #         dict[string[i]] = 1\n    # return longest_substring\n    \n    # string = list(string)\n    # longest_substring = ''\n    # for i in range(len(string)):\n    #     if string[i] not in longest_substring:\n    #         longest_substring += string[i]\n    #     else:\n    #         while string[i] in longest_substring:\n    #             index = longest_substring.rfind(string[i])\n    #             longest_substring = longest_substring[:index]\n    #             i -= 1\n    #         longest_substring += string[i]\n    # return longest_substring\n    \n    dict = {}\n    longest_substring = ''\n    i = 0\n    j = 0\n    while i < len(string):\n        if string[i] not in dict:\n            dict[string[i]] = 1\n        else:\n            dict[string[i]] += 1\n        if len(dict) <= k:\n            longest_substring += string[i]\n            i += 1\n        else:\n            while len(dict) > k:\n                if dict[string[j]] == 1:\n                    del dict[string[j]]\n                else:\n                    dict[string[j]] -= 1\n                j += 1\n                i += 1\n            longest_substring += string[i]\n            dict[string[i]] = 1\n    return longest_substring\n    pass\n    \ndef common_substring_with_k_deletions(string1, string2, k):\n    '''\n    Given two strings, find the longest common substring, which has exactly k \n    deletions.\n    '''\n    # your code goes here\n    \n    # string1 = string1.lower()\n    # string2 = string2.lower()\n    # str1_length = len(string1)\n    # str2_length = len(string2)\n    # str1 = set(string1)\n    # str2 = set(string2)\n    # if len(str1) > len(str2):\n    #     max_length = len(str1)\n    #     min_length = len(str2)\n    # else:\n    #     max_length = len(str2)\n    #     min_length = len(str1)\n    # substring = ''\n    # for i in range(1, max_length):\n    #     if i > min_length:\n    #         break\n    #     for j in range(i, max_length + 1):\n    #         if j > min_length:\n    #             break\n    #         sub1 = string1[i - 1: j]\n    #         sub2 = string2[i - 1: j]\n    #         if sub1 in str1 and sub1 in str2:\n    #             if len(sub1) > len(substring):\n    #                 substring = sub1\n    #         if sub2 in str1 and sub2 in str2:\n    #             if len(sub2) > len(substring):\n    #                 substring = sub2\n    # return substring\n    \n    # string1 = string1.lower()\n    # string2 = string2.lower()\n    # str1_length = len(string1)\n    # str2_length = len(string2)\n    # str1 = set(string1)\n    # str2 = set(string2)\n    # if len(str1) > len(str2):\n    #     max_length = len(str1)\n    #     min_length = len(str2)\n    # else:\n    #     max_length = len(str2)\n    #     min_length = len(str1)\n    # substring = ''\n    # for i in range(1, max_length):\n    #     if i > min_length:\n    #         break\n    #     for j in range(i, max_length + 1):\n    #         if j > min_length:\n    #             break\n    #         sub1 = string1[i - 1: j]\n    #         sub2 = string2[i - 1: j]\n    #         if sub1 in str1 and sub1 in str2:\n    #             if len(sub1) > len(substring):\n    #                 substring = sub1\n    #         if sub2 in str1 and sub2 in st",
        "num_ids": 647
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = []\n    for i in range(len(str1)):\n        lst.append(str1[i])\n    return tuple(lst)\n",
        "num_ids": 41
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # This solution requires only one shift and logical AND operation\n    # Bitwise AND on n with n - 1 will set the lowest set bit in the binary \n    # representation of n.\n    # return n & ~n - 1 \n    '''\n    Another solution is to use bitwise operator to set the lowest set bit.\n    '''\n    return n ^ (n >> 1)\n",
        "num_ids": 12
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Return the value of the leftmost bit that is 1.\n    # If we only have the rightmost bit, return 0 if it is 0, 1 if it is 1.\n    # If we have the rightmost bit and the next bit, return 0 if they are both 0, 1 if one is 1 and 2 if they are both 1.\n    \n    # n % 2 == 1 is the same as n & 1 == 1, but the former is faster.\n    return (n & -n).bit_length() - 1\n",
        "num_ids": 119
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return 1 << len(bin(n & ~(n - 1))) - 1\n",
        "num_ids": 21
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = (n & -n) \n    return n\n",
        "num_ids": 17
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    binary = bin(n)\n    binary = binary.replace('0b','')\n    x = len(binary) - 1\n    while(binary[x] == '1'):\n        x = x - 1\n    binary = binary[:x + 1] + '0'\n    n = int(binary, 2)\n    return n\n",
        "num_ids": 82
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = n - 1\n    if n % 2 == 0:\n        while i % 2 == 0:\n            i //= 2\n    else:\n        i = n & -n\n        while i % 2!= 1:\n            i //= 2\n    return i\n",
        "num_ids": 65
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    import math\n    return n ^ (n-1)\n",
        "num_ids": 16
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n^(n>>1)\n",
        "num_ids": 12
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    left_most_set_bit = -1\n    for i in range(32):\n        if n>>i & 1 == 0:\n            left_most_set_bit = i\n            break\n    return n | (1 << left_most_set_bit)\n",
        "num_ids": 64
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Calculate the rightmost set bit in n, which is also the rightmost unset bit\n    # in its complement.\n    return n & ~(n - 1)\n",
        "num_ids": 42
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r==0 and h==0:\n        print('Enter non zero value')\n    elif r==0 and h!=0:\n        print('Enter value of radius')\n    elif r!=0 and h==0:\n        print('Enter value of height')\n    else:\n        s=math.pi*(r**2)*h/3\n        return round(s,2)\n",
        "num_ids": 95
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * (r ** 2) * h) / 3\n",
        "num_ids": 20
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r=float(r)\n    h=float(h)\n    V=1/3*math.pi*(r**2)*h\n    return V\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    r=float(r)\n    h=float(h)\n    V=math.pi*(r**2)*h\n    return V\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r=float(r)\n    V=4/3*math.pi*(r**3)\n    return V\n",
        "num_ids": 31
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone = 1/3*math.pi*r**2*h\n    return round(volume_cone,2)\n",
        "num_ids": 32
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi * r**2 * h / 3\n    return vol\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h/3)\n",
        "num_ids": 19
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print(\"Cone Volume:\",0.33*math.pi*(r**2)*h)\n    return 0.33*math.pi*(r**2)*h\n",
        "num_ids": 43
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone = math.pi * (r ** 2) * (h/3)\n    return volume_cone\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume_cylinder = math.pi * (r ** 2) * (h/3)\n    return volume_cylinder\ndef volume_right_pyramid(a,h):\n    '''\n    Write a function to find the volume of a right pyramid.\n    '''\n    volume_right_pyramid = (1/3) * (a ** 2) * (h)\n    return volume_right_pyramid\ndef volume_parallelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    volume_parallelepiped = (a*b*c)/3\n    return volume_parallelepiped\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume_sphere = 4/3 * math.pi * (r ** 3)\n    return volume_sphere\ndef volume_cone_recursive(r,h,i=1):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if i > 6:\n        return 0\n    elif i == 1:\n        return math.pi * (r ** 2) * (h/3)\n    elif i == 2:\n        return (1/3) * (r ** 2) * (h)\n    elif i == 3:\n        return (1/3) * (r ** 2) * (h)\n    elif i == 4:\n        return (1/3) * (r ** 2) * (h)\n    elif i == 5:\n        return (1/3) * (r ** 2) * (h)\n    elif i == 6:\n        return (1/3) * (r ** 2) * (h)\n    else:\n        return volume_cone_recursive(r,h,i+1)\ndef volume_cylinder_recursive(r,h,i=1):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    if i > 6:\n        return 0\n    elif i == 1:\n        return math.pi * (r ** 2) * (h/3)\n    elif i == 2:\n        return (1/3) * (r ** 2) * (h)\n    elif i == 3:\n        return (1/3) * (r ** 2) * (h)\n    elif i == 4:\n        return (1/3) * (r ** 2) * (h)\n    elif i == 5:\n        return (1/3) * (r ** 2) * (h)\n    elif i == 6:\n        return (1/3) * (r ** 2) * (h)\n    else:\n        return volume_cylinder_recursive(r,h,i+1)\ndef volume_right_pyramid_recursive(a,h,i=1):\n    '''\n    Write a function to find the volume of a right pyramid.\n    '''\n    if i > 6:\n        return 0\n    elif i == 1:\n        return (1/3) * (a ** 2) * (h)\n    elif i == 2:\n        return (1/3) * (a ** 2) * (h)\n    elif i == 3:\n        return (1/3) * (a ** 2) * (h)\n    elif i == 4:\n        return (1/3) * (a ** 2) * (h)\n    elif i == 5:\n        return (1/3) * (a ** 2) * (h)\n    elif i == 6:\n        return (1/3) * (a ** 2) * (h)\n    else:\n        return volume_right_pyramid_recursive(a,h,i+1)\ndef volume_parallelepiped_recursive(a,b,c,i=1):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    if i > 6:\n        return 0\n    elif i == 1:\n        return (1/3) * (a * b * c)\n    elif i == 2:\n        return (1/3) * (a * b * c)\n    elif i == 3:\n        return (1/3) * (a * b * c)\n    elif i == 4:\n        return (1/3) * (a * b * c)\n    elif i == 5:\n        return (1/3) * (a * b * c)\n    elif i == 6:\n        return (1/3) * (a * b * c)\n    else:\n        return volume_parallelepiped_recursive(a,b,c,i+1)\ndef volume_sphere_recursive(r,i=1):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if i > 6:\n        return 0\n    elif i == 1:\n        return 4/3 * math.pi * (r ** 3)\n    elif i == 2:\n        return 4/3 * math.pi * (r ** 3)\n    elif i == 3:\n        return 4/3 * math.pi * (r ** 3)\n    elif i == 4:\n        return 4/3 * math.pi * (r ** 3)\n    elif i == 5:\n        return 4/3 * math.pi * (r ** 3)\n    elif i == 6:\n        return 4/3 * math.pi * (r ** 3)\n    else:\n        return volume_sphere_recursive(r,i+1)\ndef volume_cone_iterative(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    def f(r,h):\n        return (1/3) * (r ** 2) * (h)\n    def g(r,h):\n        return volume_cone_recursive(r,h,1)\n    print(g(r,h))\n    return g(r,h)\ndef volume_cylinder_iterative(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    def f(r,h):\n        return math.pi * (r ** 2) * (h/3)\n    def g(r,h):\n        return volume_cylinder_recursive(r,h,1)\n    print(g(r,h))\n    return g(r,h)\ndef volume_right_pyramid_iterative(a,h):\n    '''\n    Write a function to find the volume of a right pyramid.\n    '''\n    def f(a,h):\n        return (1/3) * (a ** 2) * (h)\n    def g(a,h):\n        return volume_right_pyramid_recursive(a,h,1)\n    print(g(a,h))\n    return g(a,h)\ndef volume_parallelepiped_iterative(a,b,c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    def f(a,b,c):\n        return (1/3) * (a * b * c)\n    def g(a,b,c):\n        return volume_parallelepiped_recursive(a,b,c,1)\n    print(g(a,b,c))\n    return g(a,b,c)\ndef volume_sphere_iterative(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    def f(r):\n        return 4/3 * math.pi * (r ** 3)\n    def g(r):\n        return volume_sphere_recursive(r,1)\n    print(g(r))\n    return g(r)\ndef volume_cone_iterative2(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    def f(r,h):\n        return (1/3) * (r ** 2) * (h)\n    de",
        "num_ids": 31
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=math.pi\n    return pi*r*r*h/3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi=math.pi\n    return pi*r*r*h\ndef volume_pyramid(s,w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    pi=math.pi\n    return (pi*(s**2)*h)/3\ndef volume_cuboid(s,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return s*w*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi=math.pi\n    return (4/3)*pi*r**3\ndef volume_box(l,w,h):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return l*w*h\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pi=math.pi\n    return pi*r*r*h/3\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=math.pi\n    return pi*r*r*h\ndef area_pyramid(s,w,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    pi=math.pi\n    return ((s**2)*h)/3\ndef area_cuboid(s,w,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return s*w*h\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi=math.pi\n    return 4*pi*r**2\ndef area_box(l,w,h):\n    '''\n    Write a function to find the surface area of a box.\n    '''\n    return 2*l*w+2*l*h+2*w*h\ndef volume_per_unit_area(s,w,h):\n    '''\n    Write a function to find the volume per unit surface area of a cube.\n    '''\n    return s*w*h\ndef volume_per_unit_area_pyramid(s,w,h):\n    '''\n    Write a function to find the volume per unit surface area of a pyramid.\n    '''\n    return s*w*h/3\ndef area_per_unit_volume(r):\n    '''\n    Write a function to find the surface area per unit volume of a sphere.\n    '''\n    pi=math.pi\n    return 4*pi*r**2/3\ndef volume_per_unit_volume_sphere(r):\n    '''\n    Write a function to find the volume per unit volume of a sphere.\n    '''\n    pi=math.pi\n    return 4/3*pi*r**3\ndef area_per_unit_volume_pyramid(s,w,h):\n    '''\n    Write a function to find the surface area per unit volume of a pyramid.\n    '''\n    return ((s**2)*h)/3\ndef area_per_unit_volume_cuboid(s,w,h):\n    '''\n    Write a function to find the surface area per unit volume of a cuboid.\n    '''\n    return s*w*h/3\ndef pyramid_stats(s,w,h):\n    '''\n    Write a function to calculate the following.\n    Find the volume of the pyramid.\n    Find the surface area of the pyramid.\n    Find the volume per unit surface area of the pyramid.\n    Find the volume per unit volume of the pyramid.\n    '''\n    vol_pyramid=volume_pyramid(s,w,h)\n    area_pyramid=area_pyramid(s,w,h)\n    vol_per_unit_area=volume_per_unit_area(s,w,h)\n    vol_per_unit_volume=volume_per_unit_volume_pyramid(s,w,h)\n    return vol_pyramid,area_pyramid,vol_per_unit_area,vol_per_unit_volume\ndef cone_stats(r,h):\n    '''\n    Write a function to calculate the following.\n    Find the volume of the cone.\n    Find the surface area of the cone.\n    Find the volume per unit surface area of the cone.\n    '''\n    vol_cone=volume_cone(r,h)\n    area_cone=area_cone(r,h)\n    vol_per_unit_area=volume_per_unit_area_cone(r,h)\n    return vol_cone,area_cone,vol_per_unit_area\ndef cylinder_stats(r,h):\n    '''\n    Write a function to calculate the following.\n    Find the volume of the cylinder.\n    Find the surface area of the cylinder.\n    Find the volume per unit surface area of the cylinder.\n    '''\n    vol_cylinder=volume_cylinder(r,h)\n    area_cylinder=area_cylinder(r,h)\n    vol_per_unit_area=volume_per_unit_area_cylinder(r,h)\n    return vol_cylinder,area_cylinder,vol_per_unit_area\ndef cuboid_stats(l,w,h):\n    '''\n    Write a function to calculate the following.\n    Find the volume of the cuboid.\n    Find the surface area of the cuboid.\n    Find the volume per unit surface area of the cuboid.\n    '''\n    vol_cuboid=volume_cuboid(l,w,h)\n    area_cuboid=area_cuboid(l,w,h)\n    vol_per_unit_area=volume_per_unit_area_cuboid(l,w,h)\n    return vol_cuboid,area_cuboid,vol_per_unit_area\ndef sphere_stats(r):\n    '''\n    Write a function to calculate the following.\n    Find the volume of the sphere.\n    Find the surface area of the sphere.\n    Find the volume per unit surface area of the sphere.\n    '''\n    vol_sphere=volume_sphere(r)\n    area_sphere=area_sphere(r)\n    vol_per_unit_area=volume_per_unit_area_sphere(r)\n    return vol_sphere,area_sphere,vol_per_unit_area\ndef box_stats(l,w,h):\n    '''\n    Write a function to calculate the following.\n    Find the volume of the box.\n    Find the surface area of the box.\n    Find the volume per unit surface area of the box.\n    '''\n    vol_box=volume_box(l,w,h)\n    area_box=area_box(l,w,h)\n    vol_per_unit_area=volume_per_unit_area_box(l,w,h)\n    return vol_box,area_box,vol_per_unit_area\ndef find_mean(l,w,h):\n    '''\n    Write a function to find the mean of the length,width and height of a cube.\n    '''\n    mean_l=l/6\n    mean_w=w/6\n    mean_h=h/6\n    return mean_l,mean_w,mean_h\ndef find_variance(l,w,h):\n    '''\n    Write a function to find the variance of the length,width and height of a cube.\n    '''\n    mean_l,mean_w,mean_h=find_mean(l,w,h)\n    var_l=(l-mean_l)**2\n    var_w=(w-mean_w)**2\n    var_h=(h-mean_h)**2\n    return var_l,var_w,var_h\ndef find_std_dev(l,w,h):\n    '''\n    Write a function to find the standard deviation of the length,width and height of a cube.\n    '''\n    mean",
        "num_ids": 4
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # time complexity of O(log n)\n    # we need to check power of 2 in O(1) and bitwise and operation takes O(1)\n    # If we need to check all the powers of 2 from 0 to n, then the complexity is O(n)\n    x = 0\n    while (2 ** x) <= n: \n        x += 1\n    return 2 ** (x - 1)\n",
        "num_ids": 96
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    high=0\n    while(n):\n        high=high+1\n        n=n>>1\n    return high\n",
        "num_ids": 31
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i < n: \n        i <<= 1\n    return i \n",
        "num_ids": 26
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n and not(n & (n - 1))): \n        return n \n    while (n): \n        n &= (n - 1) \n    return n \n",
        "num_ids": 47
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while True:\n        if 2 ** i <= n:\n            i += 1\n        else:\n            return 2 ** (i - 1)\n",
        "num_ids": 40
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i = i*2\n    return i // 2\n",
        "num_ids": 27
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while(2 ** i < n): \n        i += 1\n    return i-1\n",
        "num_ids": 29
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # O(log(n))\n    power = 0\n    while (n >= 2**power): \n        power += 1\n    return power\n",
        "num_ids": 38
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n == 0): \n        return 0\n    return 1 if (n < 2) else 2 if (n % 2 == 0) else 2 << (highest_Power_of_2(n - 1) - 1)\n    \ndef reverse_Int(n):\n    '''\n    Write a function to reverse a given number. You should try to solve this in place (in O(1) space).\n    '''\n    if (n == 0): \n        return 0\n    return int(str(n)[::-1])\n",
        "num_ids": 28
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n & n-1:\n        n &= n-1\n    return n\n",
        "num_ids": 23
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return(2*find_sum(n)-1) \n",
        "num_ids": 17
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n    \n    # return lucas(n - 1) + lucas(n - 2)\n    # First call to function lucas()\n    # lucas(3) is 3 + 2\n    # Third call to function lucas()\n    # lucas(3 - 1) + lucas(3 - 2) is 2 + 1\n    # Return lucas(3 - 1) + lucas(3 - 2)\n    # 2 + 1 = 3\n    \n    # lucas(4) is 3 + 2\n    # lucas(4 - 1) + lucas(4 - 2) is 1 + 1\n    # Return lucas(4 - 1) + lucas(4 - 2)\n    # 1 + 1 = 2\n    \n    # lucas(5) is 2 + 1\n    # lucas(5 - 1) + lucas(5 - 2) is 1 + 0\n    # Return lucas(5 - 1) + lucas(5 - 2)\n    # 1 + 0 = 1\n",
        "num_ids": 281
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Base case\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    # Recursive step\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n    \ndef reverse_string(string):\n    '''\n    Write a function that reverses a string. The input string is given as an array of characters char[].\n    Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n    You may assume all the characters consist of printable ascii characters.\n    '''\n    # Initialize pointers for the beginning and end of the array\n    start = 0\n    end = len(string) - 1\n",
        "num_ids": 31
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2 \n    if n == 1: \n        return 1 \n",
        "num_ids": 28
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_numbers = [2, 1]\n    for i in range(2, n):\n        new_lucas_numbers = lucas_numbers[-1] + lucas_numbers[-2]\n        lucas_numbers.append(new_lucas_numbers)\n    return lucas_numbers[n - 1]\n",
        "num_ids": 90
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n",
        "num_ids": 25
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    # Base cases \n    if n == 0: \n        return 2\n    if n == 1: \n        return 1\n",
        "num_ids": 34
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 2:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 41
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [2, 1]\n    for i in range(2, n):\n        lucas.append(lucas[-1] + lucas[-2])\n    return lucas[n]\n    \ndef find_lucas_n(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = [2, 1]\n    if n <= 2:\n        return lucas[n]\n    else:\n        for i in range(2, n):\n            lucas.append(lucas[-1] + lucas[-2])\n        return lucas[n]\n",
        "num_ids": 73
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string.format(element) for element in list_]\n    return list_\n",
        "num_ids": 25
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        print(string % i)\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    print([string.format(i) for i in list_])\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_copy = list_[:]\n    for i in range(len(list_copy)):\n        list_copy[i] = string.format(list_copy[i])\n    return list_copy\n",
        "num_ids": 51
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(i, string) for i in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list(map(lambda x: string.format(x), list_))\n    return list_\n",
        "num_ids": 28
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    str_ = ''\n    for i in range(len(list_)):\n        str_ += string.format(list_[i])\n    return str_\n",
        "num_ids": 40
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    return list_[0] + string + list_[1]\n",
        "num_ids": 20
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = dict(zip(l1, l2))\n    dict2 = dict(zip(l2, l3))\n    print(dict1)\n    print(dict2)\n    merged_dictionary = {k: v for k, v in dict1.items()}\n    merged_dictionary.update(dict2)\n    print(merged_dictionary)\n",
        "num_ids": 92
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # if len(l1) > len(l2):\n    #     length = len(l1)\n    # else:\n    #     length = len(l2)\n",
        "num_ids": 44
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict(zip(l1,l2))\n    d2 = dict(zip(l1,l3))\n    return [d1, d2]\n",
        "num_ids": 42
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary_list = {}\n    for i in range(len(l1)):\n        dictionary_list[l1[i]] = {l2[i]:l3[i]}\n    return dictionary_list\n",
        "num_ids": 53
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        d1[l3[i]] = l2[i]\n    print(d1)\n",
        "num_ids": 73
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    output_dict = {}\n    for index in range(len(l1)):\n        output_dict[l1[index]] = {l2[index]: {l3[index]: l3[index]}}\n    return output_dict\n    ",
        "num_ids": 59
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = list()\n    for i in range(len(l1)):\n        temp = dict()\n        for j in range(len(l2)):\n            temp[l2[j]] = l3[i][j]\n        result.append(temp)\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    #we have to iterate through all the lists to get the max len of all the list.\n    max_len = 0\n    for item in l1:\n        if len(item) > max_len:\n            max_len = len(item)\n    for item in l2:\n        if len(item) > max_len:\n            max_len = len(item)\n    for item in l3:\n        if len(item) > max_len:\n            max_len = len(item)\n",
        "num_ids": 121
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for i in l1:\n        d1.setdefault(i[0], []).append(i[1])\n    for i in l2:\n        d2.setdefault(i[0], []).append(i[1])\n    for i in l3:\n        d3.setdefault(i[0], []).append(i[1])\n    return d1, d2, d3\n",
        "num_ids": 115
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # l1 = [1, 2, 3]\n    # l2 = ['a', 'b', 'c']\n    # l3 = [10, 20, 30]\n",
        "num_ids": 43
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n",
        "num_ids": 52
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n",
        "num_ids": 67
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n",
        "num_ids": 67
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return ((get_max_sum_help(n/2) + get_max_sum_help(n/3) + get_max_sum_help(n/4) + get_max_sum_help(n/5))) if n % 2 == 0 else n\n    \ndef get_max_sum_help(n):\n    '''\n    Write a recursive function to find the maximum sum possible for a given number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    else:\n        return max(n, (get_max_sum_help(n-2) + get_max_sum_help(n-3) + get_max_sum_help(n-4) + get_max_sum_help(n-5)))\n",
        "num_ids": 112
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1, n):\n        if (i % 2!= 0 and i % 3!= 0 and i % 4!= 0 and i % 5!= 0):\n            max_sum += i\n    return max_sum\n",
        "num_ids": 65
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    sums = [0]*(n+1)\n    sums[1] = 1\n    sums[2] = 2\n    sums[3] = 3\n    sums[4] = 5\n    sums[5] = 11\n    for i in range(6,n+1):\n        sums[i] = max((sums[i-1]+sums[i//2]+sums[i//3]+sums[i//5]),i)\n    return sums[-1]\n",
        "num_ids": 133
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def f(n):\n        if n < 1:\n            return 0\n        else:\n            return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    return f(n)\n",
        "num_ids": 68
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(n)\n    if (n == 0):\n        return 0\n    if (n == 1):\n        return 1\n    if (n == 2):\n        return 2\n    else:\n        return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n",
        "num_ids": 101
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1,n):\n        if (i % 2!= 0 and i % 3!= 0 and i % 5!= 0):\n            if ((i/2) % 2!= 0 and (i/2) % 3!= 0 and (i/2) % 5!= 0):\n                if (max_sum < i):\n                    max_sum = i\n    return max_sum\n",
        "num_ids": 104
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def inner(n):\n        if n == 0:\n            return 0\n        return max(n + inner(n//2), n + inner(n//3), n + inner(n//4), n + inner(n//5))\n    return inner(n)\n",
        "num_ids": 64
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for list_item in input_list:\n        if isinstance(list_item, list):\n            list_item_length = len(list_item)\n        else:\n            list_item_length = 1\n        if max_length < list_item_length:\n            max_length = list_item_length\n    return max_length\n",
        "num_ids": 89
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n",
        "num_ids": 46
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    print(max_list)\n",
        "num_ids": 62
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    count = 0\n    for sublist in input_list:\n        if len(sublist) > count:\n            count = len(sublist)\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = [len(i) for i in input_list]\n    return input_list[length.index(max(length))]\n",
        "num_ids": 34
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n",
        "num_ids": 40
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_length = [len(x) for x in input_list]\n    return input_list[list_length.index(max(list_length))]\n",
        "num_ids": 40
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if not input_list:\n        return None\n    return max(input_list, key=lambda x: len(x))\n",
        "num_ids": 32
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if max_length < len(i):\n            max_length = len(i)\n    return max_length\n",
        "num_ids": 45
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for list_item in input_list:\n        if len(list_item) > max_length:\n            max_length = len(list_item)\n    return max_length\n    \ndef sum_of_integers(input_list):\n    '''\n    Write a function to add all the integers in the list.\n    '''\n    return sum(input_list)\n",
        "num_ids": 11
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n    \ndef convert_to_binary(test_str):\n    '''\n    Write a function to convert a given String into binary.\n    '''\n    return''.join([bin(ord(char)) for char in test_str])\n",
        "num_ids": 21
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup_set = set(test_tup)\n    return len(tup_set) == len(test_tup)\n",
        "num_ids": 34
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)-1):\n        for j in range(i+1,len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = tuple(test_tup)\n    return len(tup) == len(set(tup))\n",
        "num_ids": 30
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    new_list = []\n    for i in test_tup:\n        if i not in new_list:\n            new_list.append(i)\n    if len(new_list) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for x in test_tup:\n        if test_tup.count(x) > 1:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Initialize empty dictionary\n    dict = {}\n    for i in range(len(str1)):\n        if str1[i] not in dict:\n            dict[str1[i]] = 1\n        else:\n            dict[str1[i]] += 1\n    for j in range(len(str1)):\n        if dict[str1[j]] == 1:\n            return str1[j]\n    return None\n",
        "num_ids": 103
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    for char in str1:\n        if char in dict1:\n            dict1[char] += 1\n        else:\n            dict1[char] = 1\n",
        "num_ids": 46
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # My Solution\n    unique_chars = []\n    for char in str1:\n        if char not in unique_chars:\n            unique_chars.append(char)\n        else:\n            unique_chars.remove(char)\n    if len(unique_chars) == 0:\n        print('No characters in the string are unique.')\n    else:\n        print(f'The first non-repeating character is {unique_chars[0]}')\n",
        "num_ids": 113
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return [i for i in str1 if str1.count(i) == 1]\n",
        "num_ids": 23
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    non_rep_chars = []\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            non_rep_chars.append(str1[i])\n    return non_rep_chars\n",
        "num_ids": 66
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    s=[]\n    for i in str1:\n        if i not in s:\n            s.append(i)\n        else:\n            s.remove(i)\n            break\n    print(s)\n    if len(s)==0:\n        print('All characters are repeating')\n    else:\n        return(s[0])\n",
        "num_ids": 83
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for i in range(len(str1)):\n        if str1[i] in dict:\n            dict[str1[i]] = dict[str1[i]] + 1\n        else:\n            dict[str1[i]] = 1\n    for i in range(len(str1)):\n        if dict[str1[i]] == 1:\n            return str1[i]\n    return '_'\n",
        "num_ids": 105
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    unique_chars = list(set(str1))\n    # print(unique_chars)\n    for i in range(len(unique_chars)):\n        if str1.count(unique_chars[i]) == 1:\n            return unique_chars[i]\n    return '_'\n",
        "num_ids": 75
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # str1 = \"aabccdeee\"\n    # dict1 = {}\n    # for i in str1:\n    #     if i in dict1.keys():\n    #         dict1[i] += 1\n    #     else:\n    #         dict1[i] = 1\n    # for i in dict1.keys():\n    #     if dict1[i] == 1:\n    #         return i\n    # return None\n    non_repeating = [k for (k,v) in Counter(str1).items() if v == 1]\n    if len(non_repeating) > 0:\n        return non_repeating[0]\n    return None\n    \n",
        "num_ids": 164
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # if string[0] == string[len(string)-1]:\n    #     return True\n    # return False\n    \n    return (re.match(regex, string) is not None)\nprint(check_char(\"aba\"))\nprint(check_char(\"abb\"))\n",
        "num_ids": 67
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\n    \n",
        "num_ids": 17
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (string[0] == string[-1])\n",
        "num_ids": 16
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n",
        "num_ids": 16
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string.strip() \n    if(string[0] == string[-1]): \n        return True\n    else: \n        return False\n",
        "num_ids": 40
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 1 or len(string) == 0:\n        return False\n    elif len(string) == 2:\n        return string[0] == string[1]\n    return True if (string[0] == string[-1] and check_char(string[1:-1])) else False\n",
        "num_ids": 76
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n",
        "num_ids": 14
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 30
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string) is not None \nprint(check_char('abcdef'))\nprint(check_char('abcdefg'))\nprint(check_char('abc'))\nprint(check_char('a'))\nprint(check_char('.com'))\nprint(check_char('12345'))\nprint(check_char('1234.567'))\n",
        "num_ids": 97
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 1:\n        print('Yes, it starts and ends with the same character.')\n        return True\n    else:\n        print('No, it does not start and end with the same character.')\n        return False\n        \ncheck_char('abccba')\n",
        "num_ids": 69
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        elif a < c:\n            return c\n        else:\n            return a\n    else:\n        if a < c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c\n",
        "num_ids": 75
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    else:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b\n",
        "num_ids": 75
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = sorted([a,b,c])\n    return nums[1]\n",
        "num_ids": 23
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        a,b = b,a\n    if a>c:\n        a,c = c,a\n    if b>c:\n        b,c = c,b\n    if a==b==c:\n        return a\n    elif a==b:\n        return a\n    elif b==c:\n        return b\n    else:\n        return c\n",
        "num_ids": 95
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    elif b > a:\n        if b < c:\n            return b\n        elif a > c:\n            return a\n        else:\n            return c\n    elif c > a:\n        if c < b:\n            return c\n        elif a > b:\n            return a\n        else:\n            return b\n",
        "num_ids": 118
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    c=int(c)\n    #Median numbers\n    if a>b:\n        if a>c:\n            median=a\n        else:\n            median=c\n    else:\n        if b>c:\n            median=b\n        else:\n            median=c\n    return median\n    ",
        "num_ids": 94
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = sorted([a,b,c])\n    # print(nums)\n    nums_length = len(nums)\n    midpoint = nums_length // 2\n    median = nums[midpoint]\n    print(median)\n",
        "num_ids": 64
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if(a<b<c):\n        return b\n    elif(a>b>c):\n        return b\n    elif(a<b>c):\n        return b\n    elif(a>b<c):\n        return b\n    elif(b<a<c):\n        return a\n    elif(b>a>c):\n        return a\n    elif(b<a>c):\n        return a\n    elif(b>a<c):\n        return a\n    elif(c<a<b):\n        return a\n    elif(c>a>b):\n        return a\n    elif(c<a>b):\n        return a\n    elif(c>a<b):\n        return a\n",
        "num_ids": 181
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    mylist = [a,b,c]\n    mylist.sort()\n    if len(mylist) == 3:\n        return mylist[1]\n    elif len(mylist) == 2:\n        return (mylist[0] + mylist[1])/2\n    else:\n        return mylist[0]\nprint(median_numbers(1,2,3))\nprint(median_numbers(10,2,3))\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,4))\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)\nprint(median_numbers(1,2,3) == 2)",
        "num_ids": 2015
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a < c:\n            median = a\n        elif b > c:\n            median = b\n        else:\n            median = c\n    elif a < b:\n        if b > c:\n            median = b\n        elif a > c:\n            median = a\n        else:\n            median = c\n    elif a == b:\n        if b == c:\n            median = a\n        elif a > c:\n            median = a\n        else:\n            median = c\n    else:\n        median = a\n    return median\n",
        "num_ids": 150
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits_of_nums = []\n    for num in nums:\n        digits_of_nums.append(sum(int(digit) for digit in str(num)))\n    return digits_of_nums\n",
        "num_ids": 55
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for i in nums:\n        sum_of_digits += sum(int(digit) for digit in str(i))\n    return sum_of_digits\n",
        "num_ids": 51
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    def sum_digits(num):\n        sum = 0\n        while num > 0:\n            sum += num%10\n            num //= 10\n        return sum\n    \n    if not nums:\n        return 0\n    return sum([sum_digits(num) for num in nums])\n",
        "num_ids": 74
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([sum([int(d) for d in str(num)]) for num in nums])\n",
        "num_ids": 27
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_list.append(sum(int(i) for i in str(num)))\n    return sum_list\n",
        "num_ids": 44
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        for digit in str(num):\n            result += int(digit)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in list(str(nums))])\n",
        "num_ids": 22
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(num) for num in nums])\n",
        "num_ids": 17
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += sum(map(int, str(num)))\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # if len(nums) == 1:\n    #     if nums[0] >= 10:\n    #         return nums[0]\n    #     return 0\n    # else:\n    #     return nums[0] + sum_of_digits(nums[1:])\n",
        "num_ids": 72
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # return tuple([(a ^ b) for a, b in zip(test_tup1, test_tup2)])\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n",
        "num_ids": 61
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1, test_tup2 = tuple(test_tup1), tuple(test_tup2)\n    xor_tup = tuple(map(lambda x,y: x^y, test_tup1, test_tup2))\n    return xor_tup\n",
        "num_ids": 73
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = lambda tup1, tup2: tuple(a^b for a,b in zip(tup1, tup2))\n    return xor(test_tup1, test_tup2)\n    \ndef test_bitwise_xor():\n    test_tup1 = (0, 1, 2, 3, 4, 5)\n    test_tup2 = (0, 1, 2, 3, 4, 5)\n    expected = (0, 0, 2, 3, 4, 5)\n    result = bitwise_xor(test_tup1, test_tup2)\n    if result == expected:\n        print(\"Passed\")\n    else:\n        print(result)\n",
        "num_ids": 171
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res_tup = ()\n    for i,j in zip(test_tup1,test_tup2):\n        res_tup += (i^j, )\n    return res_tup\n",
        "num_ids": 51
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x,y in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    \ndef bitwise_and(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise and operation across the given tuples.\n    '''\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1,test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(test_tup1[i] ^ test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 37
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x^y for x,y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([a ^ b for a, b in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list_freq = []\n    for i in range(len(test_list)):\n        test_list_freq.append(test_list[i][1])\n",
        "num_ids": 45
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    # create empty dictionary\n    freq_dict = {}\n    \n    # iterate through the list\n    for tup in test_list:\n        # if the tuple is in the dictionary, increase the count by 1\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        # if the tuple is not in the dictionary, set the count to 1\n        else:\n            freq_dict[tup] = 1\n        \n    # return the number of unique tuples in the dictionary\n    return len(freq_dict)\n",
        "num_ids": 135
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n",
        "num_ids": 8
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\n",
        "num_ids": 53
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tuples in test_list:\n        unique_tuples.add(tuple(tuples))\n",
        "num_ids": 36
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = set(test_list)\n    return unique_list\n",
        "num_ids": 20
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(x) for x in test_list))\n",
        "num_ids": 21
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your function definition goes here\n    return len(set(test_list))\n",
        "num_ids": 21
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_dict = dict()\n    for item in test_list:\n        test_dict[item] = test_dict.get(item,0)+1\n    return len(test_dict)\n",
        "num_ids": 48
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = dict()\n    for i in test_list:\n        freq_dict[i] = freq_dict.get(i, 0) + 1\n    return freq_dict\n    \n",
        "num_ids": 52
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)\n",
        "num_ids": 53
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] + test_tup2[i],)\n",
        "num_ids": 57
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] + test_tup2[i],)\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        final_tup = final_tup + ((test_tup1[i] + test_tup2[i]),)\n    return final_tup\n",
        "num_ids": 64
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)\n",
        "num_ids": 53
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(tup1 + tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 37
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)==len(test_tup2):\n        return tuple([i+j for i,j in zip(test_tup1,test_tup2)])\n    else:\n        return None\n",
        "num_ids": 58
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup = []\n    for i in range(len(test_tup1)):\n        tup.append(test_tup1[i] + test_tup2[i])\n    return tuple(tup)\n",
        "num_ids": 56
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    return min(a,b)\n",
        "num_ids": 39
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a < b:\n        return b\n    else:\n        return a\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef is_positive(a):\n    '''\n    Write a python function to test if a given number is positive or negative.\n    '''\n    if a>0:\n        return True\n    else:\n        return False\ndef is_even(a):\n    '''\n    Write a python function to test if a given number is even or odd.\n    '''\n    if a%2==0:\n        return True\n    else:\n        return False\ndef is_odd(a):\n    '''\n    Write a python function to test if a given number is even or odd.\n    '''\n    if a%2!=0:\n        return True\n    else:\n        return False\ndef is_palindrome(a):\n    '''\n    Write a python function to test if a given number is a palindrome.\n    '''\n    rev=0\n    temp=a\n    while(temp>0):\n        rev=rev*10+temp%10\n        temp=temp//10\n    if rev==a:\n        return True\n    else:\n        return False\ndef factorial(a):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    fact=1\n    for i in range(1,a+1):\n        fact=fact*i\n    return fact\ndef fibonacci(a):\n    '''\n    Write a python function to return the nth term in the fibonacci series.\n    '''\n    if a==1 or a==0:\n        return a\n    else:\n        return(fibonacci(a-1)+fibonacci(a-2))\ndef is_prime(a):\n    '''\n    Write a python function to test if a given number is prime or not.\n    '''\n    for i in range(2,a):\n        if a%i==0:\n            return False\n    return True\ndef reverse(a):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return a[::-1]\ndef is_leap(a):\n    '''\n    Write a python function to test if a given year is leap or not.\n    '''\n    if a%400==0:\n        return True\n    elif a%4==0 and a%100!=0:\n        return True\n    else:\n        return False\ndef LCM(a,b):\n    '''\n    Write a python function to compute the least common multiple of two numbers.\n    '''\n    x=max(a,b)\n    while(True):\n        if x%a==0 and x%b==0:\n            return x\n        x=x+1\ndef HCF(a,b):\n    '''\n    Write a python function to compute the greatest common divisor of two numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return HCF(b,a%b)\ndef exponent(a,b):\n    '''\n    Write a python function to compute the exponent of a number.\n    '''\n    return a**b\ndef square_root(a):\n    '''\n    Write a python function to compute the square root of a number.\n    '''\n    return a**0.5\ndef percentage(a,b):\n    '''\n    Write a python function to compute the percentage of two numbers.\n    '''\n    return a/b*100\ndef average(a,b,c):\n    '''\n    Write a python function to compute the average of three numbers.\n    '''\n    return percentage(a+b+c,3)\ndef median(a,b,c):\n    '''\n    Write a python function to compute the median of three numbers.\n    '''\n    temp=[a,b,c]\n    temp.sort()\n    if temp[1]==a:\n        return a\n    elif temp[1]==b:\n        return b\n    else:\n        return c\ndef date(dd,mm,yyyy):\n    '''\n    Write a python function to calculate the number of days, weeks, months and years in a given date.\n    '''\n    day=0\n    week=0\n    month=0\n    year=0\n    if is_leap(yyyy):\n        day=monthrange(yyyy,mm)[1]\n    else:\n        day=monthrange(yyyy,mm)[0]\n    if mm in [1,3,5,7,8,10,12]:\n        week=day//7\n        day=day%7\n    elif mm in [4,6,9,11]:\n        week=day//7\n        day=day%7\n        day=day+30\n    month=month+1\n    if mm==2 and is_leap(yyyy):\n        day=day+1\n    if day>=28 and mm==2:\n        day=day+1\n    year=yyyy+month//12\n    month=month%12+1\n    return dd,day,week,month,year\ndef weekday(dd,mm,yyyy):\n    '''\n    Write a python function to calculate the day of the week of a given date.\n    '''\n    day=0\n    if is_leap(yyyy):\n        day=monthrange(yyyy,mm)[1]\n    else:\n        day=monthrange(yyyy,mm)[0]\n    weekday=datetime.date(yyyy,mm,dd).weekday()\n    return weekday,day\ndef prime_factors(a):\n    '''\n    Write a python function to print all the prime factors of a number.\n    '''\n    for i in range(2,a+1):\n        if a%i==0:\n            if is_prime(i):\n                print(i)\ndef gcd(a,b):\n    '''\n    Write a python function to print the greatest common divisor of two numbers.\n    '''\n    if a<b:\n        (a,b)=(b,a)\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\ndef lcm(a,b):\n    '''\n    Write a python function to print the least common multiple of two numbers.\n    '''\n    return a*b//gcd(a,b)\ndef palindrome_num(a):\n    '''\n    Write a python function to check if a given number is palindrome or not.\n    '''\n    if str(a)==str(a)[::-1]:\n        return True\n    else:\n        return False\ndef all_factors(a):\n    '''\n    Write a python function to print all the factors of a number.\n    '''\n    print(1)\n    for i in range(2,int(a**0.5)+1):\n        if a%i==0:\n            print(i)\ndef is_perfect(a):\n    '''\n    Write a python function to check if a given number is perfect or not.\n    '''\n    sum=0\n    for i in range(1,a):\n        if a%i==0:\n            sum=sum+i\n    if sum==a:\n        return True\n    else:\n        return False\ndef is_abundant(a):\n    '''\n    Write a python function to check if a given number is abundant or not.\n    '''\n    sum=0\n    for i in range(1,int(a/2)+1):\n        if a%i==0:\n            sum=sum+i\n    if sum>a:\n        return True\n    else:\n        return False\ndef is_powerful(a):\n    '''\n    Write a python function to check if a given number is powerful or not.\n    '''\n    sum=0\n    for i in range(1,int(a/2)+1):\n        if a%i==0:\n            sum=sum+i**2\n    if sum==a:\n        return True\n    else:\n        return False\ndef digital_root(a):\n    '''\n    Write a python function to compute the digital root of a number.\n    '''\n    sum=0\n    while(a>0):",
        "num_ids": 14
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "num_ids": 20
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n",
        "num_ids": 12
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return(a)\n    else:\n        return(b)\n",
        "num_ids": 25
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a < b):\n        return a\n    else:\n        return b\ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a > b):\n        return a\n    else:\n        return b\ndef even(a):   \n    '''\n    Write a python function to find whether a number is even or not.\n    '''\n    if (a % 2 == 0):\n        return True\n    else:\n        return False\ndef odd(a):   \n    '''\n    Write a python function to find whether a number is odd or not.\n    '''\n    if (a % 2 == 0):\n        return False\n    else:\n        return True\ndef prime(a):   \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if (a == 2 or a == 3 or a == 5 or a == 7):\n        return True\n    elif (a == 1):\n        return False\n    else:\n        for i in range(2,a):\n            if(a % i == 0):\n                return False\n        return True\ndef armstrong(a):   \n    '''\n    Write a python function to check whether a number is armstrong or not.\n    '''\n    sum = 0\n    temp = a\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == a:\n        return True\n    else:\n        return False\ndef palindrome(a):   \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    b = a\n    rev = 0\n    while(b > 0):\n        dig = b % 10\n        rev = rev*10 + dig\n        b = b//10\n    if (a == rev):\n        return True\n    else:\n        return False\ndef perfect(a):   \n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum1 = 0\n    for i in range(1,a):\n        if(a % i == 0):\n            sum1 += i\n    if (sum1 == a):\n        return True\n    else:\n        return False\ndef fibonacci(n):   \n    '''\n    Write a python function to find nth term in fibonacci series.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef factorial(n):   \n    '''\n    Write a python function to find factorial of a number.\n    '''\n    if n == 1:\n        return n\n    else:\n        return n*factorial(n-1)\ndef harmonic(a):   \n    '''\n    Write a python function to find harmonic of a number.\n    '''\n    sum = 0\n    for i in range(1,a+1):\n        sum += 1/i\n    return sum\ndef bday(a,b,c):   \n    '''\n    Write a python function to check whether a person can attend a party on his bday or not.\n    '''\n    if(c == a and b >= 25):\n        return True\n    elif(c == a and b < 25):\n        return False\n    else:\n        return True\ndef hour(a):   \n    '''\n    Write a python function to calculate the number of hours in a given number of minutes.\n    '''\n    return a//60\ndef minutes(a):   \n    '''\n    Write a python function to calculate the number of minutes in a given number of hours.\n    '''\n    return a%60\ndef date(a,b,c):   \n    '''\n    Write a python function to calculate the number of days in a given month and year.\n    '''\n    return (a*30)+(b-2)\ndef half(a):   \n    '''\n    Write a python function to calculate the number of days in a given month and year when the month has 30 days.\n    '''\n    return a//2\ndef leap(a):   \n    '''\n    Write a python function to calculate the number of days in a given month and year when the month has 30 days.\n    '''\n    if (a % 4 == 0 and a % 100!= 0) or (a % 400 == 0):\n        return True\n    else:\n        return False\ndef weekday(a):   \n    '''\n    Write a python function to calculate the weekday of a given date.\n    '''\n    if a < 8:\n        return 0\n    elif a < 16:\n        return 1\n    elif a < 24:\n        return 2\n    elif a < 32:\n        return 3\n    elif a < 40:\n        return 4\n    elif a < 48:\n        return 5\n    elif a < 56:\n        return 6\n    elif a < 64:\n        return 7\ndef area(a,b):   \n    '''\n    Write a python function to calculate the area of a circle.\n    '''\n    return a*b*3.14\ndef volume(a):   \n    '''\n    Write a python function to calculate the volume of a sphere.\n    '''\n    return (4/3)*a*a*a\ndef molar(a):   \n    '''\n    Write a python function to calculate molarity.\n    '''\n    return a/5.5\ndef weight(a):   \n    '''\n    Write a python function to calculate weight.\n    '''\n    return a*1000\ndef force(a,b):   \n    '''\n    Write a python function to calculate force.\n    '''\n    return a*b\ndef energy(a):   \n    '''\n    Write a python function to calculate energy.\n    '''\n    return a*a\ndef pressure(a,b):   \n    '''\n    Write a python function to calculate pressure.\n    '''\n    return a/b\ndef time(a,b,c):   \n    '''\n    Write a python function to calculate time.\n    '''\n    return a+b+c\ndef speed(a,b):   \n    '''\n    Write a python function to calculate speed.\n    '''\n    return a/b\ndef temp(a,b):   \n    '''\n    Write a python function to calculate temperature.\n    '''\n    return a/b\ndef distance(a,b):   \n    '''\n    Write a python function to calculate distance.\n    '''\n    return a*b\ndef luminous(a,b):   \n    '''\n    Write a python function to calculate luminous.\n    '''\n    return a*b\ndef area_of_triangle(a,b,c):   \n    '''\n    Write a python function to calculate area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return(math.sqrt(s*(s-a)*(s-b)*(s-c)))\ndef is_even(a):   \n    '''\n    Write a python function to check whether a number is even or not.\n    '''\n    if a % 2 == 0:\n        return True\n    else:\n        return False\ndef is_odd(a):   \n    '''\n    Write a python function to check whether a number is odd or not.\n    '''\n    if a % 2 == 0:\n        return False\n    else:\n        return True\ndef is_factor(a,b):   \n    '''\n    Write a python function to check whether a number is a factor of another or not.\n    '''\n    if a % b == 0:\n        return True\n    else:\n        return False\ndef is_multiple(a,b):   \n    '''\n    Write a python function to check whether a number is a multiple of another or not.\n    '''\n    if a % b == 0:\n        return True\n    else:\n        return False\ndef is_divisible(a,b):   \n    '''\n    Write a python function to check whether a number is divisible by another or not.\n    '''\n    if a % b == 0:\n        return True",
        "num_ids": 14
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef string_split(string,chars):\n    '''\n    Write a python function to split a string by a character or a set of characters\n    '''\n    list=string.split(chars)\n    return list\ndef string_join(list,chars):\n    '''\n    Write a python function to join a list of strings by a character or a set of characters\n    '''\n    string=chars.join(list)\n    return string\ndef swap_case(string):\n    '''\n    Write a python function to swap the case of a string. That is, lower case becomes upper case and vice versa.\n    '''\n    return string.swapcase()\ndef split_and_join(string,chars):\n    '''\n    Write a python function to split a string into characters and then join the characters together using a separator.\n    '''\n    return chars.join(string)\ndef capitalize(string):\n    '''\n    Write a python function to capitalize the first character of a string.\n    '''\n    return string.capitalize()\ndef find(string,char):\n    '''\n    Write a python function to find the index of a character in a string. If the character is not found in the string, then return -1.\n    '''\n    return string.find(char)\ndef number_to_string(num):\n    '''\n    Write a python function to convert a number into a string.\n    '''\n    return str(num)\ndef number_to_list(num):\n    '''\n    Write a python function to convert a number into a list.\n    '''\n    return list(num)\ndef list_to_number(list):\n    '''\n    Write a python function to convert a list into a number.\n    '''\n    return int(\"\".join(str(i) for i in list))\ndef list_of_indexes(string,chars):\n    '''\n    Write a python function to find all the indexes of a character in a string.\n    '''\n    return [i for i in range(len(string)) if string[i] == chars]\ndef length_of_string(string):\n    '''\n    Write a python function to return the length of a string.\n    '''\n    return len(string)\ndef reverse_string(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return string[::-1]\ndef factorial(num):\n    '''\n    Write a python function to return the factorial of a number.\n    '''\n    return num!=1\ndef sum_of_digits(num):\n    '''\n    Write a python function to return the sum of digits of a number.\n    '''\n    return sum(map(int,str(num)))\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return string==string[::-1]\ndef change_string(string,chars):\n    '''\n    Write a python function to change a string to a specific character.\n    '''\n    return string.replace(chars,\"\")\ndef is_permutation(string1,string2):\n    '''\n    Write a python function to check whether two strings are permutations of each other or not.\n    '''\n    return sorted(string1)==sorted(string2)\ndef palindrome_permutation(string):\n    '''\n    Write a python function to check whether a string is a permutation of a palindrome or not.\n    '''\n    dic={}\n    string=string.replace(\" \",\"\")\n    for i in string:\n        dic[i]=dic.get(i,0)+1\n    flag=0\n    for key,value in dic.items():\n        if value%2==1:\n            flag+=1\n    return True if flag==0 else False\ndef rotate(string,chars):\n    '''\n    Write a python function to rotate a string by a set of characters.\n    '''\n    return chars*(len(string)//2)\ndef replace_first(string,char,chars):\n    '''\n    Write a python function to replace the first occurence of a character in a string with another character.\n    '''\n    return string.replace(char,chars,1)\ndef first_and_last_index(string,chars):\n    '''\n    Write a python function to return the first and last index of a character in a string. If the character is not found in the string, then return -1.\n    '''\n    if string.find(chars)!=-1:\n        return [string.find(chars),string.rfind(chars)]\n    else:\n        return [-1]\ndef string_validators(string):\n    '''\n    Write a python function to check whether a string contains any alphanumeric characters, alphabetical characters, digits, lowercase and uppercase characters.\n    '''\n    return [x.isalnum(),x.isalpha(),x.isdigit(),x.islower(),x.isupper()]\ndef string_format(string):\n    '''\n    Write a python function to format a string.\n    '''\n    return string.title()\ndef list_sort(list):\n    '''\n    Write a python function to sort a list of strings.\n    '''\n    return sorted(list)\ndef sort_list_of_string(list):\n    '''\n    Write a python function to sort a list of strings by length.\n    '''\n    return sorted(list,key=len)\ndef string_match(string,chars):\n    '''\n    Write a python function to check whether a string contains any special character.\n    '''\n    return [x for x in string if x in chars]\ndef encode_decode_strings(string):\n    '''\n    Write a python function to encode a string.\n    '''\n    return string.maketrans(string.maketrans(' ',''),'%20')\ndef string_alternative(string):\n    '''\n    Write a python function to return the string made of the first two and the last two characters of a string. If the string length is less than 2, return the empty string.\n    '''\n    if len(string)<2:\n        return ''\n    else:\n        return string[:2]+string[-2:]\ndef multiple_replace(string):\n    '''\n    Write a python function to replace multiple spaces in a string with '%20'.\n    '''\n    return re.sub(r\"\\s{2,}\",\" \",string)\ndef leap_year(year):\n    '''\n    Write a python function to check whether a year is a leap year or not.\n    '''\n    return year%4==0 and (year%100!=0 or year%400==0)\ndef palindrome(string):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    return string==string[::-1]\ndef zero_matrix(matrix):\n    '''\n    Write a python function to set all elements of a matrix to zero.\n    '''\n    for i in matrix:\n        for j in matrix:\n            matrix[i][j]=0\n    return matrix\ndef is_isogram(string):\n    '''\n    Write a python function to check whether a string is an isogram or not.\n    '''\n    return len(string)==len(set(string.lower()))\ndef longest_substring_without_repeating_characters(string):\n    '''\n    Write a python function to get the length of the longest substring without repeating characters.\n    '''\n    start=0\n    end=0\n    max_length=0\n    unique_chars=[]\n    while end<len(string):\n        if string[end] not in unique_chars:\n            unique_chars.append(string[end])\n            max_length=max(max_length,len(unique_chars))\n            end+=1\n        else:\n            unique_chars=[]\n            start=end\n            end+=1\n    return max_length\ndef is_anagram(string",
        "num_ids": 122
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    count=0\n    for i in tuplex:\n        if i==tuple1:\n            count+=1\n    if count==0:\n        return \"False\"\n    else:\n        return \"True\"\n",
        "num_ids": 53
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    print(tuple1)\n    return True if tuple1 in tuplex else False\n    \n",
        "num_ids": 25
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if any(tuplex == x for x in tuple1):\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1==tuplex:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuple1) == tuple and type(tuplex) == tuple:\n        if tuple1 in tuplex:\n            print(\"True\")\n        else:\n            print(\"False\")\n    elif type(tuple1) == tuple and type(tuplex) == str:\n        if tuplex in tuple1:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Input is not a tuple\")\n",
        "num_ids": 111
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0]==tuplex[0] and tuple1[1]==tuplex[1] and tuple1[2]==tuplex[2]:\n        return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n            break\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    listx = list(tuple1)\n    #print(listx)\n    for x in tuplex: \n        if x in listx: \n            return True \n    return False \n    ",
        "num_ids": 51
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 23
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    res = 0\n    while(x): \n        res = res + (x & 1) \n        x >>= 1\n    return res \n",
        "num_ids": 37
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return \"Even\"\n    return \"Odd\"\n    \n    \ndef add(x,y):\n    '''\n    Write a python function to add two given numbers.\n    '''\n    return x+y\n    \n    \ndef is_Prime(x):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if x<2:\n        return False\n    else:\n        for i in range(2,x):\n            if(x%i)==0:\n                return False\n        return True\n        \n        \ndef odd_even_check(x):\n    '''\n    Write a python function to check whether the given number is odd or even.\n    '''\n    if x%2==0:\n        return \"Even\"\n    return \"Odd\"\n    \n    \ndef palindrome_check(x):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    temp=x\n    rev=0\n    while(x>0):\n        dig=x%10\n        rev=rev*10+dig\n        x=x//10\n    if(temp==rev):\n        return True\n    return False\n    \n    \ndef palindrome_string(x):\n    '''\n    Write a python function to convert the given number into palindrome string.\n    '''\n    temp=x\n    rev=0\n    while(x>0):\n        dig=x%10\n        rev=rev*10+dig\n        x=x//10\n    print(rev)\n    \ndef is_Perfect(x):\n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    sum=0\n    for i in range(1,x):\n        if x%i==0:\n            sum=sum+i\n    if sum==x:\n        return True\n    return False\n    \n    \ndef is_Abundant(x):\n    '''\n    Write a python function to check whether the given number is abundant or not.\n    '''\n    sum=0\n    for i in range(1,x):\n        if x%i==0:\n            sum=sum+i\n    if sum>x:\n        return True\n    return False\n    \n    \ndef is_Armstrong(x):\n    '''\n    Write a python function to check whether the given number is armstrong or not.\n    '''\n    sum=0\n    for i in range(1,x):\n        if x%i==0:\n            sum=sum+i\n    if sum==x:\n        return True\n    return False\n    \n    \ndef is_Strong(x):\n    '''\n    Write a python function to check whether the given number is strong or not.\n    '''\n    sum=0\n    for i in range(1,x):\n        if x%i==0:\n            sum=sum+i\n    if x==sum:\n        return True\n    return False\n    \n    \ndef is_Power(x,y):\n    '''\n    Write a python function to check whether the given number is power of another given number or not.\n    '''\n    if x**y==x:\n        return True\n    return False\n    \n    \ndef is_Even(x):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if x%2==0:\n        return True\n    return False\n    \n    \ndef is_Odd(x):\n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if x%2==0:\n        return False\n    return True\n    \n    \ndef is_Multiple(x,y):\n    '''\n    Write a python function to check whether the given number is multiple of another given number or not.\n    '''\n    if x%y==0:\n        return True\n    return False\n    \n    \ndef is_Greater(x,y):\n    '''\n    Write a python function to check whether the given number is greater than another given number or not.\n    '''\n    if x>y:\n        return True\n    return False\n    \n    \ndef is_Smaller(x,y):\n    '''\n    Write a python function to check whether the given number is smaller than another given number or not.\n    '''\n    if x<y:\n        return True\n    return False\n    \n    \ndef is_Divisible(x,y):\n    '''\n    Write a python function to check whether the given number is divisible by another given number or not.\n    '''\n    if x%y==0:\n        return True\n    return False\n    \n    \ndef is_Divisible_3(x):\n    '''\n    Write a python function to check whether the given number is divisible by 3 or not.\n    '''\n    if x%3==0:\n        return True\n    return False\n    \n    \ndef is_Divisible_5(x):\n    '''\n    Write a python function to check whether the given number is divisible by 5 or not.\n    '''\n    if x%5==0:\n        return True\n    return False\n    \n    \ndef is_Divisible_15(x):\n    '''\n    Write a python function to check whether the given number is divisible by 15 or not.\n    '''\n    if x%15==0:\n        return True\n    return False\n    \n    \ndef is_Divisible_3_5(x):\n    '''\n    Write a python function to check whether the given number is divisible by 3 or 5 or not.\n    '''\n    if x%15==0:\n        return True\n    return False\n    \n    \ndef is_Divisible_by_15(x):\n    '''\n    Write a python function to check whether the given number is divisible by 15 or not.\n    '''\n    if x%15==0:\n        return True\n    return False\n    \n    \ndef is_Leap_Year(x):\n    '''\n    Write a python function to check whether the given year is leap year or not.\n    '''\n    if x%4==0 and x%100!=0:\n        return True\n    if x%100==0 and x%400!=0:\n        return False\n    if x%400==0:\n        return True\n    return False\n    \n    \ndef is_Prime_Number(x):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if x<2:\n        return False\n    for i in range(2,x):\n        if(x%i)==0:\n            return False\n    return True\n    \n    \ndef is_Perfect_Number(x):\n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    sum=0\n    for i in range(1,x):\n        if x%i==0:\n            sum=sum+i\n    if sum==x:\n        return True\n    return False\n    \n    \ndef is_Abundant_Number(x):\n    '''\n    Write a python function to check whether the given number is abundant or not.\n    '''\n    sum=0\n    for i in range(1,x):\n        if x%i==0:\n            sum=sum+i\n    if sum>x:\n        return True\n    return False\n    \n    \ndef is_Even_Number(x):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if x%2==0:\n        return True\n    return False\n    \n    \ndef is_Odd_Number(x):\n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if x%2==0:\n        return False\n    return True\n    \n    \ndef is_Multiple_of_3(x):\n    '''\n    Write a python function to check whether the given number is multiple of 3 or not.\n    '''\n    if x%3==0:\n        return True\n    return False\n    \n    \ndef is_Multiple_of_5(x):\n    '''\n    Write a python function to check whether the given number is multiple of 5 or not.\n    '''\n    if x",
        "num_ids": 5
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return \"even\"\n    else:\n        return \"odd\"\n    pass\n",
        "num_ids": 30
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2==0\n",
        "num_ids": 10
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2!= 0): \n        return \"odd\"\n    else: \n        return \"even\"\n",
        "num_ids": 31
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    p = 0\n    for i in range(x):\n        if (x % 2 == 0): \n            print(\"The number\", x, \"is even.\")\n            break\n        elif (x % 2 == 1):\n            p = 1\n            print(\"The number\", x, \"is odd.\")\n            break\n        else:\n            print(\"The number is not valid.\")\n            break\n    return p\n",
        "num_ids": 96
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    for i in range(1,x+1):\n        if x%i==0:\n            parity=parity+1\n    if parity%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x%2==0)\n",
        "num_ids": 12
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    a = []\n    for i in n:\n        a.append(i)\n    a.sort()\n    print(a)\n    b = []\n    for i in a:\n        b.append(i)\n    for i in n:\n        if i in b:\n            b.remove(i)\n    b.reverse()\n    print(b)\n    for i in b:\n        a.remove(i)\n    for i in b:\n        a.insert(0,i)\n    print(a)\n    return a\n",
        "num_ids": 138
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    if n < 10:\n        return n\n    n_str = str(n)\n    s = sorted(n_str, reverse=True)\n    return int(\"\".join(s))\n",
        "num_ids": 58
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    res = [int(i) for i in str(n)]\n    if len(res) <= 1:\n        return n\n    \n    pos = len(res) - 1\n    while pos > 0 and res[pos - 1] >= res[pos]:\n        pos -= 1\n    if pos == 0:\n        res.sort()\n        return res\n    \n    key = res[pos - 1]\n    j = len(res) - 1\n    while j >= pos:\n        if res[j] > key:\n            res[pos - 1], res[j] = res[j], res[pos - 1]\n            break\n        j -= 1\n    res[pos:] = sorted(res[pos:])\n    return int(''.join(str(i) for i in res))\n    \n    \n    ",
        "num_ids": 190
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    res = []\n    for i in str(n):\n        res.append(i)\n    a=[]\n    a.append(str(n))\n    for i in range(len(res)):\n        for j in range(i+1,len(res)):\n            b=[]\n            b.append(res[i])\n            b.append(res[j])\n            s=''.join(b)\n            if s>a[0]:\n                a.append(s)\n    return(int(max(a)))\n",
        "num_ids": 128
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_num = str(n)\n    lst_num = list(str_num)\n    lst_num.sort()\n    i = 0\n    while lst_num[i] == '0':\n        i += 1\n    lst_num[:i] = lst_num[:i][::-1]\n    lst_num[i:] = lst_num[i:][::-1]\n    result = ''\n    for i in lst_num:\n        result += i\n    return int(result)\n",
        "num_ids": 130
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = []\n    for digit in str(n):\n        digits.append(int(digit))\n    i = 0\n    while i < len(digits) - 1:\n        if digits[i] > digits[i+1]:\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n            break\n        i += 1\n    i = 0\n    while i < len(digits):\n        if digits[i]!= 9:\n            digits.append(digits[i])\n            digits[i] = 9\n            break\n        i += 1\n    return int(''.join(map(str, digits)))\n",
        "num_ids": 161
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n = sorted(n)\n    n = int(''.join(n))\n    return n\n",
        "num_ids": 33
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = [int(i) for i in str(n)]\n    i = len(n) - 1\n    while i > 0 and n[i-1] >= n[i]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(n) - 1\n    while n[j] <= n[i-1]:\n        j -= 1\n",
        "num_ids": 92
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    x = list(map(int, str(n)))\n    for i in range(len(x)-1, -1, -1):\n        for j in range(i):\n            if x[j] > x[j+1]:\n                x[j], x[j+1] = x[j+1], x[j]\n                break\n    return int(''.join(map(str, x)))\n",
        "num_ids": 98
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if len(n) == 1:\n        return n\n    \n    number = int(n)\n    while True:\n        bigger = number\n        for i in range(len(n)-1):\n            bigger = bigger * 10\n            if int(n[i]) < int(n[i+1]):\n                break\n            bigger = bigger + int(n[i+1])\n        \n        if bigger == int(n):\n            return str(bigger)\n        else:\n            number += 1\n",
        "num_ids": 123
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def take_1(n):\n        return n[0]\n    comb = []\n    smallest_pairs = []\n    for n1 in nums1:\n        for n2 in nums2:\n            heapq.heappush(comb, (n1 + n2, n1, n2))\n    while k > 0:\n        if comb:\n            smallest_pairs.append(heapq.heappop(comb)[1:])\n            k -= 1\n        else:\n            break\n    return smallest_pairs\n",
        "num_ids": 131
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(heap, (nums1[i]+nums2[j], i, j))\n",
        "num_ids": 67
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (-(nums1[i]+nums2[j]), i, j))\n            elif -(nums1[i]+nums2[j]) > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-(nums1[i]+nums2[j]), i, j))\n    result = []\n    for _, i, j in heap:\n        result.append([nums1[i], nums2[j]])\n    return result\n",
        "num_ids": 194
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if k == 0:\n        return []\n    pq = []\n    res = []\n    nums1.sort()\n    nums2.sort()\n    i, j = 0, 0\n    while k:\n        if nums1[i] + nums2[j] > pq[0][0]:\n            j += 1\n        else:\n            heapq.heappushpop(pq, (nums1[i] + nums2[j], i, j))\n            res.append((nums1[i], nums2[j]))\n            k -= 1\n            i += 1\n    return res",
        "num_ids": 176
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    if len(nums1) * len(nums2) < k:\n        return res\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, [num + num2, num, num2])\n            elif num + num2 < heap[0][0]:\n                heapq.heappushpop(heap, [num + num2, num, num2])\n    for i in range(k):\n        res.append(heapq.heappop(heap)[1:])\n    return res\n",
        "num_ids": 163
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i]+nums2[j],i,j))\n    res = []\n    for i in range(k):\n        res.append([nums1[heap[0][1]],nums2[heap[0][2]]])\n        heapq.heappop(heap)\n    return res\n",
        "num_ids": 127
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #return sorted(list(zip(nums1, nums2)))[:k]\n    #O(KLogK)\n    #O(K)\n    #O(K)\n    #O(K)\n    heap = []\n    for i, num1 in enumerate(nums1):\n        for j, num2 in enumerate(nums2):\n            if i+j < k:\n                heapq.heappush(heap, (-abs(num1 - num2), (num1, num2)))\n            else:\n                if heap and -heap[0][0] > num1 - num2:\n                    break\n    return [x[1] for x in heap]\n",
        "num_ids": 168
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            elif (nums1[i] + nums2[j]) < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    return [(nums1[i], nums2[j]) for (s, i, j) in heap]\n",
        "num_ids": 199
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    if len(nums1) == 0 or len(nums2) == 0:\n        return result\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(max_heap) < k:\n                heapq.heappush(max_heap, (-num1 - num2, num1, num2))\n            elif num1 + num2 < max_heap[0][0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, (-num1 - num2, num1, num2))\n    while len(max_heap) > 0:\n        temp = heapq.heappop(max_heap)\n        result.append([temp[1], temp[2]])\n    return result\n",
        "num_ids": 211
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    return [(nums1[i], nums2[j]) for _, i, j in heap]\n",
        "num_ids": 191
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    #print(list1)\n    list2 = []\n    list3 = []\n    for i in range(0, len(list1)):\n        if i == len(list1) - 1:\n            break\n        else:\n            if list1[i][0] < list1[i + 1][0]:\n                list2.append(list1[i])\n            elif list1[i][0] > list1[i + 1][0]:\n                list3.append(list1[i])\n",
        "num_ids": 129
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    assert type(list1) == list\n    \n    sorted_list = sorted(list1, key=lambda tup: tup[1])\n    \n    return sorted_list[0][0] * sorted_list[0][1]\n",
        "num_ids": 59
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #initialize min to a higher number for comparison\n    min = 1\n    #traverse through the list,\n    for i in range(0, len(list1), 2):\n        #if the product of the elements is less than the current minimum,\n        if (list1[i][0]*list1[i+1][0])<min:\n            #set the current minimum to the product of the elements\n            min = list1[i][0]*list1[i+1][0]\n    #return the minimum\n    return min\n",
        "num_ids": 128
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = list1\n    list2 = sorted(list2, key=lambda x: x[0]*x[1])\n    return list2[0]\nprint(min_product_tuple([(3,4),(1,2),(2,4),(5,3),(6,7)]))\nprint(min_product_tuple([(3,4),(1,3),(2,6),(5,4),(6,7)]))\n",
        "num_ids": 113
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not list1:\n        return None\n    if len(list1) == 1:\n        return list1[0]\n    min_prod = min(list1[0][0] * list1[1][1], list1[1][0] * list1[0][1])\n    for i in range(2, len(list1)):\n        curr_prod = list1[i][0] * list1[i - 1][1]\n        if curr_prod < min_prod:\n            min_prod = curr_prod\n    return min_prod\n",
        "num_ids": 144
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(min(list1[0]),min(list1[1]))\nprint(min_product_tuple([(3,4,5,6),(1,2,3,4)]))\n",
        "num_ids": 51
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    tuple_list=[]\n    for i in list1:\n        for j in i:\n            tuple_list.append(j)\n    list1=list(set(tuple_list))\n    list1.sort()\n    print(list1)\n    min_list=[]\n    for i in range(len(list1)-1):\n        min_list.append(list1[i]*list1[i+1])\n    print(min(min_list))\n",
        "num_ids": 116
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = list1[0][0] * list1[0][1]\n    for i in range(len(list1)):\n        if list1[i][0] * list1[i][1] < min_prod:\n            min_prod = list1[i][0] * list1[i][1]\n    return min_prod\n",
        "num_ids": 90
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    list1 = list(list1)\n    sorted_list = sorted(list1, key = lambda x: x[0]*x[1])\n    return sorted_list[0][0]*sorted_list[0][1]\n",
        "num_ids": 68
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    def min_product(tup1,tup2):\n        tup_min = ()\n        tup1_len = len(tup1)\n        tup2_len = len(tup2)\n        if tup1_len == tup2_len:\n            for i in range(tup1_len):\n                if tup1[i] < tup2[i]:\n                    tup_min = tup1\n                    break\n                elif tup1[i] > tup2[i]:\n                    tup_min = tup2\n                    break\n                elif tup1[i] == tup2[i]:\n                    tup_min = tup1\n        elif tup1_len > tup2_len:\n            tup_min = tup1\n        elif tup1_len < tup2_len:\n            tup_min = tup2\n        return tup_min\n",
        "num_ids": 226
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    smallest = listval[0]\n    for item in listval:\n        if item < smallest:\n            smallest = item\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l = []\n    for i in range(len(listval)):\n        l.append(listval[i][0])\n    return min(l)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    l = []\n    for i in range(len(listval)):\n        l.append(listval[i][0])\n    return max(l)\n    \ndef sum_val(listval):\n    '''\n    Write a function to find the sum of all the values in a given heterogeneous list.\n    '''\n    l = []\n    for i in range(len(listval)):\n        l.append(listval[i][0])\n    return sum(l)\n    \ndef mean_val(listval):\n    '''\n    Write a function to find the average value in a given heterogeneous list.\n    '''\n    l = []\n    for i in range(len(listval)):\n        l.append(listval[i][0])\n    return sum(l)/len(l)\n",
        "num_ids": 44
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return\n    else:\n        temp=listval[0]\n        for i in listval:\n            if i<temp:\n                temp=i\n        return temp\n",
        "num_ids": 53
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # for i in listval:\n    #     min_val = i\n    #     for j in i:\n    #         if j < min_val:\n    #             min_val = j\n    #     listval.remove(i)\n    #     listval.append(min_val)\n    # return listval\n    return min(listval)\n",
        "num_ids": 87
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val=listval[0]\n    for i in listval:\n        if i<min_val:\n            min_val=i\n    return min_val\n",
        "num_ids": 43
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if min_val>i:\n            min_val = i\n    return min_val\n",
        "num_ids": 43
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n    \nprint(min_val([1, 2, 3, 4, 5, -4]))",
        "num_ids": 72
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n    # return min(listval)\n",
        "num_ids": 57
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    a = listval\n    min_val = 0\n    i = 0\n    while i < len(a):\n        if a[i] < min_val:\n            min_val = a[i]\n        i += 1\n    return min_val\n",
        "num_ids": 62
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake_to_camel_dict = {}\n    split_word = re.findall('[A-Z][^A-Z]*', word)\n    for i in split_word:\n        snake_to_camel_dict[i] = i.title()\n    camel_case_str = ''.join(snake_to_camel_dict.get(x, x) for x in word)\n    return camel_case_str\n",
        "num_ids": 110
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_([a-z])', lambda m: m.group(1).upper(), word)\nprint(snake_to_camel(\"my_camel_function\"))\nprint(snake_to_camel(\"my_camel_case\"))\nprint(snake_to_camel(\"my_camel_case_function\"))\n",
        "num_ids": 85
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Lowercase first character\n    # Remove everything after the last \"_\"\n    # Make everything after the first letter upper case\n    # Delete the \"-\" if there is no upper case character after the \"_\"\n    # Put all words together\n",
        "num_ids": 55
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    str_list = list(word)\n    capital_str = []\n    lower_str = []\n    for s in str_list:\n        if s.isupper():\n            capital_str.append(s)\n        elif s.islower():\n            lower_str.append(s)\n    capital_str.extend(lower_str)\n    capital_str[0] = capital_str[0].upper()\n    return ''.join(capital_str)\n",
        "num_ids": 113
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word=word.split(\"_\")\n    for i,v in enumerate(word):\n        word[i] = word[i].capitalize()\n    \n    return \"\".join(word)\n",
        "num_ids": 49
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n",
        "num_ids": 28
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Write your code here.\n    return ''.join(x.title() for x in word.split('_'))\n",
        "num_ids": 31
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake_to_camel_dict = {\n        'is_snake_case': 'is_camel_case',\n        'camelCase': 'camel_case',\n        'Snake_case': 'Snake_case',\n        'snake_case_str':'snake_case_str',\n        'Snake_case_str': 'Snake_case_str',\n        'snakecase':'snakecase',\n        'snakeCase':'snakeCase',\n        'snake_case':'snake_case',\n        'snake-case':'snake_case',\n        'snake_case_str':'snake_case_str',\n        'SnakeCaseStr': 'SnakeCaseStr',\n        'camelCaseStr': 'camelCaseStr',\n        'Snake-Case-Str': 'Snake-Case-Str',\n        'CamelCaseStr': 'CamelCaseStr',\n        'SnakeCase': 'SnakeCase',\n        'camelCase': 'camel_case',\n        'CamelCase': 'Camel_Case',\n        'Camel_Case': 'Camel_Case',\n        'Camel-Case': 'Camel_Case',\n        'CamelCaseStr': 'CamelCaseStr',\n        'snake_case_str':'snake_case_str',\n        'Snake_case_str': 'Snake_case_str',\n        'snakeCaseStr':'snake_case_str',\n        'SnakeCaseStr': 'Snake_case_str',\n        'snakecaseStr':'snake_case_str',\n        'Snake-Case-Str': 'Snake_case_str',\n        'CamelCaseStr': 'CamelCaseStr',\n        'snake_case':'snake_case',\n        'Snake_case': 'Snake_case',\n        'Snakecase': 'Snake_case',\n        'Snake_case': 'Snake_case',\n        'SnakeCase': 'Snake_case',\n        'Snake_Case': 'Snake_case',\n        'Snakecase': 'Snake_case',\n        'Snake_Case': 'Snake_case',\n        'Camel_Case': 'Camel_Case',\n        'SnakeCaseStr': 'Snake_case_str',\n        'snake_case_str':'snake_case_str',\n        'Snake_case_str': 'Snake_case_str',\n        'snakeCaseStr':'snake_case_str',\n        'SnakeCaseStr': 'Snake_case_str',\n        'snakecaseStr':'snake_case_str',\n        'Snake_case_str': 'Snake_case_str',\n        'SnakecaseStr': 'Snake_case_str',\n        'snake_case_str':'snake_case_str',\n        'Snake_case_str': 'Snake_case_str',\n        'CamelCaseStr': 'CamelCaseStr',\n        'snakecaseStr':'snake_case_str',\n        'Snake_case_str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'snakeCaseStr':'snake_case_str',\n        'snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'snake_Case_str': 'Snake_case_str',\n        'Snake_Case_str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'SnakeCaseStr': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case': 'Snake_case',\n        'CamelCase': 'Camel_Case',\n        'Snake_Case': 'Snake_case',\n        'CamelCaseStr': 'CamelCaseStr',\n        'Camel_Case': 'Camel_Case',\n        'Camel_Case_Str': 'Camel_Case_Str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'snakeCaseStr':'snake_case_str',\n        'CamelCase': 'Camel_Case',\n        'Camel_Case': 'Camel_Case',\n        'CamelCaseStr': 'CamelCaseStr',\n        'Camel_Case_Str': 'Camel_Case_Str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'snakecaseStr':'snake_case_str',\n        'Camel_Case_Str': 'Camel_Case_Str',\n        'Camel_Case_Str': 'Camel_Case_Str',\n        'Camel_Case_Str': 'Camel_Case_Str',\n        'CamelCaseStr': 'Camel_Case_Str',\n        'SnakeCaseStr': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'SnakeCaseStr': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'snakecaseStr':'snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_case_str',\n        'Snake_Case_Str': 'Snake_cas",
        "num_ids": 2011
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    if isinstance(word, str):\n        return ''.join([x.capitalize() if i > 0 else x for i, x in enumerate(word.split('_'))])\n    else:\n        return word\n",
        "num_ids": 56
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    output = [word[0].upper()]\n    for letter in word[1:]:\n        if letter.isupper():\n            output.append('_')\n        output.append(letter.upper())\n    return ''.join(output)\n",
        "num_ids": 59
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    for item in l:\n        if item % 2 == 0:\n            odds.append(item)\n    return odds\n",
        "num_ids": 37
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    even = []\n    for i in l:\n        if i%2==0:\n            even.append(i)\n    return even\n",
        "num_ids": 35
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l_copy = l[:]\n    for i in l:\n        if (i % 2 == 0):\n            l_copy.remove(i)\n    return l_copy\n",
        "num_ids": 44
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for item in l:\n        if item % 2 == 0:\n            new_list.append(item)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    numbers = l\n    result = list(filter(lambda x: (x%2==0), numbers))\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds=[]\n    for x in l:\n        if x % 2!= 0:\n            odds.append(x)\n    l=l[0:len(l)-len(odds)]\n    return l\n",
        "num_ids": 55
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [2,4,3,6,9,12,23,56,6,3,7,3,6,23,2,5]\n    odd_numbers = []\n    for i in l:\n        if i % 2 == 0:\n            odd_numbers.append(i)\n    return odd_numbers\n",
        "num_ids": 81
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in list1:\n        print(i[n])\n    return\n",
        "num_ids": 21
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i[n])\n    return list2\n",
        "num_ids": 32
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    element = []\n    for x in list1:\n        element.append(x[n])\n    return element\n",
        "num_ids": 29
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return (list1[n-1])\n",
        "num_ids": 13
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    nth_element = None\n    if n <= len(list1) and n > 0:\n        nth_element = list1[n-1]\n    else:\n        print(\"The list does not have nth element\")\n    return nth_element\n",
        "num_ids": 63
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Initialize two variables: one for the nth element and one for the length of the list.\n    nth_element = None\n    list_length = len(list1)\n",
        "num_ids": 44
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    nth = []\n    for item in list1:\n        nth.append(item[n])\n    return nth\n",
        "num_ids": 32
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    \n    return list1[n-1]\n",
        "num_ids": 14
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(i)\n",
        "num_ids": 24
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # for i in list1:\n    #     if i in list2:\n    #         return True\n    # return False\n    #or\n    # return bool(set(list1).intersection(list2))\n    return bool(set(list1).intersection(list2))\n",
        "num_ids": 69
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    print(list1,list2)\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n    \nprint(overlapping([1,2,3],[2,3,4]))\nprint(overlapping([1,2,3],[1,2,3]))\nprint(overlapping([1,2,3],[2,3]))\nprint(overlapping([1,2,3],[3,5]))\nprint(overlapping([1,2,3],[2,4]))\nprint(overlapping([1,2,3],[1,2,3,4]))\nprint(overlapping([1,2,3],[4,5,6]))\nprint(overlapping([1,2,3],[3,5]))\nprint(overlapping([1,2,3],[2,4]))\nprint(overlapping([1,2,3],[3,4,5]))\nprint(overlapping([1,2,3],[3,4,5]))\n",
        "num_ids": 257
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\ndef check(list1,list2):\n    for element in list1:\n        if element not in list2:\n            return element\n",
        "num_ids": 57
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if (list1.count(list2) == 0):\n        return False\n    else:\n        return True\n",
        "num_ids": 29
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if j == i:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    lst1=[]\n    lst2=[]\n    for x in list1:\n        if x not in lst1:\n            lst1.append(x)\n        else:\n            return False\n    for x in list2:\n        if x not in lst2:\n            lst2.append(x)\n        else:\n            return False\n    return True\n",
        "num_ids": 92
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return i\n    return \"No overlapping value in a sequence\"\n",
        "num_ids": 33
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        print(\"No pair with max product is present.\")\n        return 0\n    elif len(arr) == 2:\n        return arr[0]*arr[1]\n    else:\n        max1 = max(arr[0], arr[1])\n        max2 = min(arr[0], arr[1])\n        for i in range(2,len(arr)):\n            if arr[i]*max1 > arr[i]*max2:\n                max2 = max1\n                max1 = arr[i]\n            elif arr[i]*max1 < arr[i]*max2:\n                max2 = arr[i]\n        return max1*max2\n        \nprint(max_Product([1,2,3,4,5]))\n",
        "num_ids": 191
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max=0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j]>max:\n                max=arr[i]*arr[j]\n                index1=i\n                index2=j\n                #print(\"i\",i,\"j\",j,\"max\",max)\n    print(\"pair with highest product is between\",index1,\"and\",index2)\n",
        "num_ids": 113
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n == 1:\n        return False\n    maxProduct = arr[0] * arr[1] \n    l = 0\n    r = 1\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] * arr[j] > maxProduct): \n                l = i \n                r = j \n                maxProduct = arr[i] * arr[j] \n    return (l, r, maxProduct)\n",
        "num_ids": 126
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr_len = len(arr)\n    max_prod = 0\n    for i in range(0, arr_len - 1):\n        for j in range(i + 1, arr_len):\n            prod = arr[i] * arr[j]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n",
        "num_ids": 89
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maxProduct = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] * arr[j] > maxProduct: \n                maxProduct = arr[i] * arr[j]\n    return maxProduct \n",
        "num_ids": 75
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 1\n    max_product_pair = ()\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if max_product < arr[i] * arr[j]:\n                max_product = arr[i] * arr[j]\n                max_product_pair = (arr[i], arr[j])\n    print(f\"Max product pair is: {max_product_pair}\")\n    return max_product_pair\n",
        "num_ids": 121
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        raise ValueError('Need atleast two elements in the array')\n",
        "num_ids": 28
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        print (\"At least two elements expected.\")\n        return\n",
        "num_ids": 25
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return \"No valid pair\"\n    if len(arr) == 2:\n        if arr[0]*arr[1]>arr[1]*arr[0]:\n            return f\"The pair with highest product is {arr[0]} and {arr[1]}\"\n        else:\n            return f\"The pair with highest product is {arr[1]} and {arr[0]}\"\n    smaller = max_Product(arr[1:])\n    if smaller[0]==\"No valid pair\":\n        return \"No valid pair\"\n    if arr[0]*arr[len(arr)-1] > arr[len(arr)-1]*arr[0]:\n        return smaller\n    else:\n        return f\"The pair with highest product is {arr[0]} and {arr[len(arr)-1]}\"\nprint(max_Product([-2,8,9]))\n",
        "num_ids": 217
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    # Initialize max_product to 1 as minimum product value is 1\n    max_product = 1\n    # Initialize result to array of two elements\n    result = [None, None]\n    # For each element in array\n    for i in range(n):\n        # Set max_product to the maximum of max_product and arr[i]\n        max_product = max(max_product, arr[i])\n        # If max_product is greater than arr[i]\n        if max_product * arr[i] > max_product * result[0]:\n            # Set result[0] = max_product\n            result[0] = max_product\n            # Set result[1] = i\n            result[1] = i\n    # Return array result\n    return result\n",
        "num_ids": 189
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input = [('a', 'b', 'c'), ('a', 'b', 'd'), ('b', 'c', 'd'), ('c', 'd', 'e')] \n    # Output = ('a', 'b', 'c') \n    \n    # Input = [('a', 'b', 'c'), ('a', 'b', 'd'), ('b', 'c', 'd'), ('c', 'd', 'e')] \n    # Output = ('a', 'b', 'c') \n    \n    # Input = [('a', 'b', 'c'), ('a', 'b', 'd'), ('b', 'c', 'd'), ('c', 'd', 'e')] \n    # Output = ('a', 'b', 'c') \n    \n    # Input = [('a', 'b', 'c'), ('a', 'b', 'd'), ('b', 'c', 'd'), ('c', 'd', 'e'), ('a', 'b', 'c')] \n    # Output = ('a', 'b', 'c') \n",
        "num_ids": 253
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = list(filter(lambda x: Input[0] in x, Input))\n    return result[0] if result else None\n    \nInput = [('a', 1), ('b', 2), ('c', 3), ('a', 4)]\nprint(group_tuples(Input)",
        "num_ids": 68
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    dct = {}\n    for elem in Input:\n        if elem[0] in dct:\n            dct[elem[0]].append(elem)\n        else:\n            dct[elem[0]] = [elem]\n    d = list(dct.values())\n    return [max(sublst, key=lambda x:len(x)) for sublst in d]\n",
        "num_ids": 100
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n    for x in range(len(Input)):\n        if Input[x] == Input[x-1]:\n            common_first_element.append(Input[x])\n        else:\n            common_first_element = []\n    if common_first_element:\n        return(common_first_element[0])\n    else:\n        return(None)\n",
        "num_ids": 95
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for tup in Input:\n        if tup[0] in result:\n            continue\n        else:\n            result.append(tup[0])\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input = [('a', 'b', 'c'), ('d', 'e', 'f', 'g'), ('h', 'i', 'j', 'k')]\n    # Output = ['a']\n    # Input = [('a', 'b', 'c'), ('d', 'e', 'f', 'g'), ('a', 'i', 'j', 'k')]\n    # Output = ['a']\n    # Input = [('a', 'b', 'c'), ('d', 'e', 'f', 'g'), ('h', 'i', 'j', 'k'), ('a', 'i', 'j', 'k')]\n    # Output = ['a', 'i', 'j', 'k']\n    # Input = [('a', 'b', 'c'), ('d', 'e', 'f', 'g'), ('h', 'i', 'j', 'k'), ('a', 'b', 'c'), ('d', 'e', 'f', 'g')]\n    # Output = ['a']\n    \n    # using set\n    # set1 = set(map(frozenset, Input))\n    # print(set1)\n    # output = list(set1)\n    # print(output)\n    \n    \n    # # Method 1\n    # output = []\n    # for i in range(len(Input)):\n    #     list_of_tuple = list(Input[i])\n    #     if len(set(list_of_tuple)) == 1:\n    #         output.append(list(set(list_of_tuple))[0])\n    # print(output)\n    \n    \n    # # Method 2\n    # output = []\n    # for i in Input:\n    #     if len(set(i)) == 1:\n    #         output.append(set(i)[0])\n    # print(output)\n    \n    \n    # Method 3\n    output = []\n    dict = {}\n    for i in Input:\n        for j in i:\n            dict[j] = dict.get(j, 0) + 1\n    for key, value in dict.items():\n        if value == len(Input):\n            output.append(key)\n    print(output)\n",
        "num_ids": 522
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for x in range(len(Input)):\n        Input[x] = list(Input[x])\n        Output.append(Input[x][0])\n    print(Output)\n",
        "num_ids": 50
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = [('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'c')]\n    Output = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n",
        "num_ids": 100
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Get all the first elements from the tuple using map()\n    first_elements = list(map(lambda x: x[0], Input))\n    # Now, we have the first elements of all tuples in a list.\n    # Now, we will count each element's frequency using count()\n    freq = Counter(first_elements) \n    # Now, we will iterate the list with freq and print the elements with highest frequency\n    for key, value in freq.items(): \n        if value == max(freq.values()):\n            print(key, end=', ')\n",
        "num_ids": 140
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return([item[0] for item in Input])\n",
        "num_ids": 15
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)\n",
        "num_ids": 14
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n            max_element = lst[i]\n    return max_element\n",
        "num_ids": 61
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst,key=len)\n",
        "num_ids": 14
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            result = i\n    print(result)\nFind_Max([['a','b','c','d'], ['f','g','h'], ['i','j'], ['k','l','m','n']])\n",
        "num_ids": 90
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len=0\n    for i in lst:\n        if len(i)>max_len:\n            max_len=len(i)\n            max_list=i\n    return max_list\n",
        "num_ids": 52
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    temp = max(lst, key=len)\n    return temp\n    \ndef common_elements(list1,list2): \n    '''\n    Write a Python program to find the common elements between two lists.\n    '''\n    list1=list(set(list1))\n    list2=list(set(list2))\n    return list1+list2\n    \ndef find_missing_number(lst): \n    '''\n    Write a Python program to find the missing number in a given integer array.\n    '''\n    #max_value=max(lst)\n    #min_value=min(lst)\n    #for i in range(min_value,max_value):\n    #    if(i not in lst):\n    #        return i\n    #return i\n    min_value=min(lst)\n    max_value=max(lst)\n    for i in range(min_value,max_value):\n        if(i not in lst):\n            return i\n    return i\n    \ndef get_unique_elements(lst): \n    '''\n    Write a Python program to get unique elements from a list.\n    '''\n    return list(set(lst))\n    \ndef get_sum_of_all_elements(lst): \n    '''\n    Write a Python program to get the sum of all the even elements in a list.\n    '''\n    return sum([i for i in lst if i%2==0])\n    \ndef remove_duplicate_values(lst): \n    '''\n    Write a Python program to remove duplicate values from a list.\n    '''\n    return list(set(lst))\n    \ndef get_sum_of_all_sublists(lst): \n    '''\n    Write a Python program to get the sum of all sublists of a list.\n    '''\n    return sum(sum(lst,[]))\n    \ndef get_all_occurrence_of_number_in_list(lst,x): \n    '''\n    Write a Python program to get all the occurrences of a given number in a given list.\n    '''\n    return [i for i in range(len(lst)) if lst[i]==x]\n    \ndef get_sum_of_two_lists(lst1,lst2): \n    '''\n    Write a Python program to get the sum of two lists.\n    '''\n    return list(map(sum,zip(lst1,lst2)))\n    \ndef get_max_occurrence_of_number(lst): \n    '''\n    Write a Python program to get the maximum occurrence of a given number in a given list.\n    '''\n    lst=list(set(lst))\n    max_count=0\n    for i in range(len(lst)):\n        if(lst.count(lst[i])>max_count):\n            max_count=lst.count(lst[i])\n            max_number=lst[i]\n    return max_number,max_count\n    \ndef get_range_of_number_in_list(lst,x): \n    '''\n    Write a Python program to get the range of a given list.\n    '''\n    return max(lst)-min(lst)\n    \ndef get_square_root_of_list(lst): \n    '''\n    Write a Python program to get the square root of a list.\n    '''\n    import math\n    return [math.sqrt(x) for x in lst]\n    \ndef get_multiplication_of_list_and_constant(lst,x): \n    '''\n    Write a Python program to get the multiplication of a list and a constant.\n    '''\n    return [i*x for i in lst]\n    \ndef get_list_of_sum_of_divisible_numbers(lst,x): \n    '''\n    Write a Python program to get a list of sum of divisible numbers.\n    '''\n    lst1=[i for i in range(len(lst)) if lst[i]%x==0]\n    return [sum(lst[i:j]) for i in range(len(lst)) for j in range(i,len(lst)+1) if sum(lst[i:j])<=x]\n    \ndef get_number_of_occurrence_of_element_in_list(lst,x): \n    '''\n    Write a Python program to get the number of occurrences of an element in a given list.\n    '''\n    return lst.count(x)\n    \ndef get_number_of_occurrence_of_element_in_list_for_loop(lst,x): \n    '''\n    Write a Python program to get the number of occurrences of an element in a given list.\n    '''\n    count=0\n    for i in lst:\n        if(i==x):\n            count+=1\n    return count\n    \ndef find_number_of_elements_greater_than_second_list(lst): \n    '''\n    Write a Python program to find the number of elements in a list that are greater than second list.\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        if(lst[i]>lst[1]):\n            lst1.append(lst[i])\n    return len(lst1)\n    \ndef get_highest_number_in_list_of_lists(lst): \n    '''\n    Write a Python program to get the highest number from a list of lists.\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(max(lst[i]))\n    return max(lst1)\n    \ndef find_smallest_number(lst): \n    '''\n    Write a Python program to find the smallest number in a list.\n    '''\n    return min(lst)\n    \ndef find_element_in_list_of_lists(lst,x): \n    '''\n    Write a Python program to find element in a list of lists.\n    '''\n    return [i for lst1 in lst for i in lst1 if i==x]\n    \ndef get_element_occurrence_count_in_list_of_lists(lst): \n    '''\n    Write a Python program to get the element occurrence count in a list of lists.\n    '''\n    return [lst.count(i) for i in lst[0]]\n    \ndef get_element_occurrence_count_in_list_of_lists_for_loop(lst): \n    '''\n    Write a Python program to get the element occurrence count in a list of lists.\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        count=0\n        for j in range(len(lst[i])):\n            if(lst[i][j] in lst1):\n                count+=1\n            else:\n                lst1.append(lst[i][j])\n        lst1.append(count)\n    return lst1\n    \ndef get_element_occurrence_count_in_list_of_lists_for_loop_1(lst): \n    '''\n    Write a Python program to get the element occurrence count in a list of lists.\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        count=0\n        for j in range(len(lst[i])):\n            if(lst[i][j] in lst1):\n                count+=1\n            lst1.append(lst[i][j])\n        lst1.append(count)\n    return lst1\n    \ndef find_element_greater_than_second_list(lst): \n    '''\n    Write a Python program to find an element from a list that is greater than the second element from the list.\n    '''\n    return max([i for i in lst if i>lst[1]])\n    \ndef find_element_greater_than_second_list_for_loop(lst): \n    '''\n    Write a Python program to find an element from a list that is greater than the secon",
        "num_ids": 21
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    try:\n        a = max(lst, key=len)\n        return a\n    except ValueError:\n        return None\n        ",
        "num_ids": 34
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    return max(lst, key=len)\n",
        "num_ids": 16
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if(len(i) > max_len):\n            max_len = len(i)\n            max_str = i\n    print(max_str)\n    return max_len\n",
        "num_ids": 61
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if max_len < len(i):\n            max_len = len(i)\n",
        "num_ids": 38
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for number in list1:\n        sum += round(number)\n    print(sum * len(list1))\n",
        "num_ids": 34
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    # write your code here\n    sum_num = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        sum_num += list1[i]\n    return sum_num*len(list1)\n",
        "num_ids": 69
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #list1 = []\n    sum = 0\n    length = len(list1)\n    list1 = [round(i) for i in list1]\n    for i in list1:\n        sum += i\n    print(\"The sum of the numbers rounded and multiplied by the length of the list is\", sum * length)\n",
        "num_ids": 76
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total += round(x)\n    print(total*len(list1))\n",
        "num_ids": 34
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for num in list1:\n        num = round(num)\n        sum1 += num\n    print(sum1 * len(list1))\n",
        "num_ids": 42
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum=0\n    for i in list1:\n        sum+=round(i)\n    print(len(list1)*sum)\n    \nround_and_sum([1.2, 2.1, 3.9, 4.8, 8.8, 9.9, 11.8])\n",
        "num_ids": 71
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))\n    return total * len(list1)\n    \nround_and_sum([1.0, 4.8, 9.7])\n",
        "num_ids": 65
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_list = 0\n    list1 = list1.split(',')\n    for i in range(len(list1)):\n        list1[i] = round(float(list1[i]), 1)\n        sum_list += list1[i]\n    print('The total sum is: {}'.format(sum_list))\n    print('The sum times the length of the list is: {}'.format(sum_list * len(list1)))\n",
        "num_ids": 108
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        i = round(i)\n        total_sum += i\n    print(total_sum * len(list1))\n",
        "num_ids": 45
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    print(total_sum * len(list1))\n",
        "num_ids": 40
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s = s + i**3\n    return s\n",
        "num_ids": 29
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for x in range(1, n + 1):\n        if x % 2 == 0:\n            sum = sum + x * x * x\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube = 0\n    for i in range(0,n):\n        if(i%2 == 0):\n            cube = cube + i**3\n    return cube\n    pass\n",
        "num_ids": 44
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubeSum = 0\n    for i in range(1, n + 1):\n        if (i % 2 == 0):\n            cubeSum += i ** 3\n    return cubeSum\n",
        "num_ids": 44
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum=0\n    for i in range(n):\n        if i%2==0:\n            cube_sum+=i**3\n    return cube_sum\n",
        "num_ids": 42
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(0, n+1):\n        if i % 2 == 0:\n            total += i**3\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Variable to store the sum\n    sum = 0\n    # Iterate from 2 to n(both inclusive)\n    for x in range(1, n+1):\n        # Check if the number is even\n        if x % 2 == 0:\n            # Add to the sum if even\n            sum += x * x * x\n    # Return the sum\n    return sum\n",
        "num_ids": 87
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i % 2 == 0):\n            sum = sum + i ** 3\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 3\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while(i<=n):\n        if i % 2 == 0:\n            sum += i ** 3\n        i += 1\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n    # return delimiter.join([str(elem) for elem in test_tup])\n",
        "num_ids": 38
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + ','\n    return result[:-1]\n",
        "num_ids": 36
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = ''\n    for i in test_tup:\n        test_str += i\n        if i!= test_tup[-1]:\n            test_str += '-'\n    return test_str\n",
        "num_ids": 54
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) == 0:\n        return ''\n    else:\n        return str(test_tup[0]) + str(test_tup[1])\n",
        "num_ids": 45
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # return delimiter.join(test_tup)\n    return (\"\".join(test_tup))\n",
        "num_ids": 28
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    return delimiter.join(test_tup)\n",
        "num_ids": 17
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenate_str = \"\"\n    for i in test_tup:\n        concatenate_str = concatenate_str + str(i) + delimiter\n    return concatenate_str\n",
        "num_ids": 52
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)])/n\n",
        "num_ids": 24
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    res = n*(n+1)*(n+2)*(n+3)/24\n    return res\n",
        "num_ids": 28
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # pass # Remove pass after completeing your function\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum / n\n",
        "num_ids": 45
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    num=0\n    for x in range(1,n+1):\n        num=num+x**3\n    return num/n\n",
        "num_ids": 35
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    avg = sum/(n)\n    return avg\n",
        "num_ids": 42
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n<=0:\n        print(\"Invalid input\")\n        return\n",
        "num_ids": 20
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return (n*(n+1)**2)/4\n",
        "num_ids": 17
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1,n+1):\n        cubes.append(i**3)\n    return sum(cubes)/n\n",
        "num_ids": 41
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    def find_average_of_cubes(n):\n        return sum([i**3 for i in range(1, n+1)])/n\n",
        "num_ids": 38
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = (n * (n + 1) * (n + 2)) / 6\n    print(sum_of_cubes)\n    average = sum_of_cubes**(1/3)\n    return average\n    \ndef is_palindrome(n):\n    '''\n    Write a python function which checks whether the given number is palindrome or not.\n    '''\n    temp = n\n    sum = 0\n    while(n > 0):\n        rem = n % 10\n        sum = sum * 10 + rem\n        n = n // 10\n    if sum == temp:\n        return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return(test_tuple[-1])\n",
        "num_ids": 14
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[len(test_tuple) - 1]\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n",
        "num_ids": 12
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # your code here\n    # hint: use a list comprehension to get a list of only rear elements\n    \n    pass\n",
        "num_ids": 30
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            count = count+1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for y in list1:\n        if x in y:\n            count = count + 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2008
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)): \n        sub = [] \n        for j in range(i, len(list1)): \n            sub.append(list1[j]) \n            if x in sub: \n                count += 1\n    return count \n",
        "num_ids": 75
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if isinstance(list1[i], list):\n            if x in list1[i]:\n                count += 1\n        else:\n            if x == list1[i]:\n                count += 1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if x in item:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 1]\n",
        "num_ids": 19
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    for n in nums:\n        if n % 2 == 1:\n            yield n\n",
        "num_ids": 26
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda num: num % 2!= 0, nums))\n",
        "num_ids": 22
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # YOUR CODE HERE\n    return [num for num in nums if num % 2!= 0]\n",
        "num_ids": 26
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    def is_odd(n):\n        return n % 2!= 0\n    return list(filter(is_odd, nums))\n",
        "num_ids": 36
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2 == 1:\n            result.append(num)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            filtered_nums.append(num)\n    return filtered_nums\n",
        "num_ids": 47
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if i % 2!= 0]\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x:x%2==1,nums))\nprint(filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]))\n",
        "num_ids": 51
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dts = dt.split('-')\n    return(dts[2]+'-'+dts[1]+'-'+dts[0])\n",
        "num_ids": 39
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    '''\n    take a date in yyyy-mm-dd format and convert to dd-mm-yyyy format\n    '''\n    regex = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    result = re.match(regex, dt)\n    if result:\n        date_list = result.groups()\n        return '-'.join(date_list)\n    else:\n        print('Wrong format')\n",
        "num_ids": 82
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Write your code here\n",
        "num_ids": 9
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # split the date in 3 parts and use list to store them\n    date, month, year = dt.split('-')\n    # change the year to all caps\n    year = year.upper()\n    # change the month to all caps\n    month = month.upper()\n    # join the 3 parts of the date and print the date\n    print(''.join([date, '-', month, '-', year]))\n",
        "num_ids": 100
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Parse the string date into a datetime object\n    date = datetime.datetime.strptime(dt, \"%Y-%m-%d\")\n",
        "num_ids": 40
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = ''.join(dt.split('-'))\n    dt = ''.join(dt.split('/'))\n    return dt\n",
        "num_ids": 36
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split(\"-\")\n    print(date)\n    day = date[0]\n    month = date[1]\n    year = date[2]\n    day = day[::-1]\n    day = day[:2]\n    month = month[::-1]\n    month = month[:2]\n    year = year[::-1]\n    year = year[:2]\n    return(day + \"-\" + month + \"-\" + year)\n",
        "num_ids": 116
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    temp = re.findall('[0-9]+',dt)\n    temp = [int(i) for i in temp]\n    temp = [str(i) for i in temp]\n    for i in range(len(temp)):\n        if len(temp[i]) == 1:\n            temp[i] = '0'+temp[i]\n    temp = ''.join(temp)\n    return temp[-2:]+'-'+temp[:-2]\n",
        "num_ids": 113
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.strip(' ')\n    dt = re.sub(r'(\\d{2})',r'\\1',dt)\n    dt = re.sub(r'(\\d{4})',r'\\1-',dt)\n    dt = re.sub(r'(\\d{2})',r'\\1-',dt)\n    return dt\n",
        "num_ids": 89
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    #print(dt)\n    #print(dt[0])\n    #print(dt[1])\n    #print(dt[2])\n    dd = dt[2]\n    mm = dt[1]\n    yyyy = dt[0]\n    dd = dd.lstrip('0')\n    print(dd)\n    mm = mm.lstrip('0')\n    yyyy = yyyy.lstrip('0')\n    print(dd)\n    print(mm)\n    print(yyyy)\n    print('-'.join([dd,mm,yyyy]))\n",
        "num_ids": 152
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length // 2\n",
        "num_ids": 19
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 114
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    N = len(my_list)\n    gap = N//2\n    while gap > 0:\n        for i in range(gap,N):\n            current = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > current:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = current\n        gap //= 2\n",
        "num_ids": 108
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sublist_count = len(my_list) // 2\n    while sublist_count > 0:\n        for start_position in range(sublist_count):\n            gap_insertion_sort(my_list, start_position, sublist_count)\n        sublist_count = sublist_count // 2\n",
        "num_ids": 76
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Initialize values\n    inc = len(my_list) // 2\n    while inc:\n        for i, val in enumerate(my_list):\n            while i >= inc and my_list[i - inc] > val:\n                my_list[i] = my_list[i - inc]\n                i -= inc\n            my_list[i] = val\n        inc = 1 if inc == 2 else inc * 5 // 11\n    return my_list\n",
        "num_ids": 110
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 114
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 114
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap //= 2\n",
        "num_ids": 106
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n",
        "num_ids": 14
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples are not of equal length\")\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 65
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #we need to extract the elements from each tuple and then compare them\n    #use list comprehension, the syntax is [element for element in list if condition]\n    #use the same syntax for filtering\n    new_tuple = tuple([element for element in test_tup1 if element in test_tup2])\n    return(new_tuple)\n",
        "num_ids": 82
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([a&b for a,b in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [min(x,y) for x,y in zip(test_tup1,test_tup2)]\n",
        "num_ids": 31
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i==j:\n                res.append(i)\n    return res\n",
        "num_ids": 48
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [ x for x in test_tup1 if x in test_tup2]\n",
        "num_ids": 24
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            new_tup = new_tup + (test_tup1[i],)\n",
        "num_ids": 68
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i1 and i2 for i1, i2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return list(zip(test_tup1,test_tup2))\n",
        "num_ids": 21
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return(tuple(i & j for i, j in zip(test_tup1, test_tup2)))\n",
        "num_ids": 31
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    from cmath import sqrt\n    if a == 0:\n        return sqrt(c / b)\n    elif b == 0:\n        return -1 * sqrt(c / a)\n    elif c == 0:\n        return 0\n    else:\n        return (b * c - b ** 2 * a) / (2 * a ** 2)\n",
        "num_ids": 86
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def distance(a1, b1, c1, a2, b2, c2):\n        '''\n        Write a function to find the distance between two points on a parabola.\n        '''\n        # some helper functions\n        def helper_function(a, b, c):\n            return ((a ** 2) + (b ** 2)) / (2 * c)\n        def helper_function_2(a, b, c):\n            return ((a ** 2) - (b ** 2)) / (2 * c)\n        # find the distance from the focus to the directrix\n        r = ((c1 ** 2) - (b1 ** 2)) / (2 * a1)\n        # find the two points of the directrix\n        directrix_x = helper_function_2(a, b, c)\n        directrix_y = helper_function(a, b, c)\n        # find the distance from the focus to the directrix\n        d = ((directrix_x ** 2) + (directrix_y ** 2)) ** 0.5\n        # if the length of the two points are the same, return infinity\n        if d == 0:\n            return float('inf')\n        else:\n            return d\n    # return the directrix\n    return distance(a, b, c, 0, 0, 0)\n",
        "num_ids": 260
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if not all(isinstance(x, (int, float)) for x in (a, b, c)):\n        return None\n    if a == 0:\n        if b!= 0 or c!= 0:\n            return None\n    if a == b == c == 0:\n        return None\n    if a == 0:\n        return None\n    if a == c == 0:\n        return None\n    if b == 0:\n        return None\n    if c == 0:\n        return None\n    if a == b == 0:\n        return None\n    if a == 0:\n        return None\n    if c == 0:\n        return None\n    if b == 0:\n        return None\n    if c == 0:\n        return None\n    if a == 0:\n        return None\n    if c == 0:\n        return None\n    if b == 0:\n        return None\n    return (-b / (2*a))\n",
        "num_ids": 219
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    d = b**2 - 4*a*c \n    if d < 0: \n        # No real roots, return none\n        return None, None\n    elif d == 0:\n        # One real root\n        x = -b/(2*a)\n        return x, None\n    else:\n        # Two real roots\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        return x1, x2\n",
        "num_ids": 134
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0: \n        return 0\n    else: \n        return -b / (2 * a)\n",
        "num_ids": 30
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def f(x):\n        return a*(x**2)+b*x+c\n    \n    def df(x):\n        return 2*a*x+b\n    \n    xi = -b/(2*a)\n    \n    if f(xi) == 0:\n        return xi\n    \n    return xi, f(xi), df(xi)\n",
        "num_ids": 89
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        raise ValueError(\"Coefficient a cannot be equal to 0\")\n    else:\n        return -b / (2 * a)\n    \ndef parabola_vertex(a, b, c):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    if a == 0:\n        raise ValueError(\"Coefficient a cannot be equal to 0\")\n    else:\n        return -b / (2 * a)\n",
        "num_ids": 40
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                print(\"This parabola is a circle\")\n            else:\n                print(\"This parabola is a vertical line\")\n        else:\n            print(\"This parabola is a horizontal line\")\n    else:\n        x = (-b / (2*a))\n        y = (a*x*x + b*x + c)\n        print(\"The directrix of this parabola is at ({:.2f}, {:.2f})\".format(x, y))\n",
        "num_ids": 134
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = (b*b)-(4*a*c)\n    if (d >= 0):\n        x1 = (-b + sqrt(d))/(2*a)\n        x2 = (-b - sqrt(d))/(2*a)\n        return x1, x2\n    else:\n        return 'No directrix.'\n",
        "num_ids": 82
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1.sort()\n    list2.sort()\n",
        "num_ids": 16
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    result = False\n    if list1 is not None and list2 is not None:\n        if len(list1) < len(list2):\n            list_long = list2\n            list_short = list1\n        else:\n            list_long = list1\n            list_short = list2\n",
        "num_ids": 72
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    else:\n        for item1 in list1:\n            for item2 in list2:\n                if item1 == item2:\n                    return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if (len(list1) <= 0 or len(list2) <= 0):\n        return False\n    for i in list1:\n        for j in list2:\n            if (i == j):\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        for element2 in list2:\n            if element == element2:\n                return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # return True if at least one element in list1 is in list2\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    else:\n        return True\n    \ndef common_element_2(list1, list2):\n    # if a common element in list1, then it is also in list2\n    # return False if they have no common element\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    else:\n        return list1[0] in list2\n        \ndef common_element_3(list1, list2):\n    # if a common element in list1, then it is also in list2\n    # return False if they have no common element\n    # use the set() function to get unique values in each list\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    else:\n        if set(list1).intersection(set(list2)):\n            return True\n        else:\n            return False\n            \ndef common_element_4(list1, list2):\n    # if a common element in list1, then it is also in list2\n    # return False if they have no common element\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    else:\n        return list(set(list1).intersection(list2))\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ",
        "num_ids": 2008
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #iterate through list1 to get all elements\n    list1_elements = []\n    for element in list1:\n        if element not in list1_elements:\n            list1_elements.append(element)\n    #iterate through list2 to get all elements\n    list2_elements = []\n    for element in list2:\n        if element not in list2_elements:\n            list2_elements.append(element)\n    #iterate through the elements in list1 to find matches\n    for element in list1_elements:\n        if element in list2_elements:\n            return True\n    return False\n",
        "num_ids": 152
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        for i in list2:\n            if i in list1:\n                return True\n    else:\n        for i in list1:\n            if i in list2:\n                return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2) * height)/2\n",
        "num_ids": 16
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) * height / 2\n",
        "num_ids": 16
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2) / 2) * height\n",
        "num_ids": 17
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2\n",
        "num_ids": 13
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)*height/2\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    return (base1+base2) / 2 * height\n",
        "num_ids": 18
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)//2*height\n",
        "num_ids": 16
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    result = False\n    if number > arr[0]:\n        for i in range(len(arr)):\n            if arr[i] > number:\n                result = True\n            else:\n                result = False\n                break\n    elif number == arr[0]:\n        result = True\n    else:\n        result = False\n    return result\n",
        "num_ids": 83
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    length = len(arr)\n    for i in range(length):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i < number:\n            return False\n    return True\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element < number:\n            return False\n    return True\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[len(arr) - 1]:\n        return True\n    else:\n        return False\n    \n    \ndef get_array_greater(arr, number):\n    '''\n    Write a function to get the elements of the given array that are greater than the entered number.\n    '''\n    result = []\n    for i in arr:\n        if check_greater(arr, i):\n            result.append(i)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if number < num:\n            return False\n    return True\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i>number:\n            return True\n    return False\n    ",
        "num_ids": 25
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] < number:\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > max(arr)\n",
        "num_ids": 11
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pat=r\"a.*?b\"\n    result=re.findall(pat,text)\n    if len(result)==0:\n        return False\n    else:\n        return True\nprint(text_match_one(\"ac\"))\nprint(text_match_one(\"abc\"))\nprint(text_match_one(\"abbc\"))\n",
        "num_ids": 82
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(ab)+')\n    result = pattern.search(text)\n    return result!= None\n",
        "num_ids": 34
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = '[A-Za-z]*[A-Za-z]+[A-Za-z]*b[A-Za-z]*'\n    result = re.findall(pattern, text)\n    return result\n",
        "num_ids": 60
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print(re.findall(r'ab*', text))\n",
        "num_ids": 18
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'\\ba+\\b')\n    result = pattern.findall(text)\n    print(result)\n",
        "num_ids": 36
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab*\")\n    if pattern.search(text):\n        return \"Found a match!\"\n    else:\n        return(\"Not matched!\")\n    #substitute the regex expression\n    #pattern = re.compile(r\"ab*\",re.IGNORECASE)\n    #text = \"caabbba\"\n    #print(pattern.sub(\"-\",text))\n",
        "num_ids": 99
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    return result!= None\n    # return True if text is not None else False\n",
        "num_ids": 45
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\wb*'\n    if re.search(pattern, text):\n        return 'Found match!'\n    else:\n        return('Not matched!')\n",
        "num_ids": 43
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #text = \"This is a string!\"\n    text = \"The cat in the hat sat on the flat mat.\"\n    result = re.match(r\"a+b+\",text)\n    print(result)\n    if result:\n        print(\"Yes, it's a match!\")\n    else:\n        print(\"No match!\")\n    print(result.group())\n",
        "num_ids": 89
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'ab*?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n",
        "num_ids": 41
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    l = len(str(n))\n    if n < 10 :\n        return n\n    else :\n        return last_Digit(n//10)\n",
        "num_ids": 39
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if (n < 0) :\n        n = n * (-1)\n    n = str(n)\n    n = n[len(n)-1:]\n    return int(n)\n",
        "num_ids": 47
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        n = abs(n)\n    last_digit = n % 10\n    return last_digit\n",
        "num_ids": 32
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    # Your code here\n    n = list(map(int, str(n)))\n    return n[-1]\n    \nif __name__ == '__main__':\n    # Take the input number from the user\n    n = int(input(\"Enter the number: \"))\n    \n    # Function call\n    result = last_Digit(n)\n    \n    # Display the result\n    print(\"The last digit is \", result",
        "num_ids": 104
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return -last_Digit(-n)\n    elif n == 0 :\n        return 0\n    else :\n        return n % 10\n",
        "num_ids": 42
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        n = -n\n    return n % 10\n",
        "num_ids": 21
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    num=n\n    sum=0\n    while num > 0 :\n        rem=num%10\n        sum=sum+rem\n        num=num//10\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n",
        "num_ids": 37
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for item in list1:\n        if item < 0:\n            new_list.append(item)\n    return new_list\n    \ndef main():\n    list1 = [12, -7, 5, 64, -14]\n    print(neg_nos(list1))\n",
        "num_ids": 75
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] < 0:\n            new_list.append(list1[i])\n    return new_list\nprint(neg_nos([2,3,1,-6,6,-8,10]))\n",
        "num_ids": 76
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    print(list2)\n",
        "num_ids": 39
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_num = []\n    for i in list1:\n        if i < 0:\n            neg_num.append(i)\n    return neg_num\n    \ndef reverse_list(list1):\n    '''\n    Write a python function to reverse the list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[len(list1)-i-1])\n    return new_list\n    \ndef str_list_count(list1):\n    '''\n    Write a python function to count the number of str in the list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == str:\n            count = count + 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for i in list1:\n        if i < 0:\n            neg_nos.append(i)\n    return neg_nos\n",
        "num_ids": 40
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    return neg_nums\n",
        "num_ids": 43
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [number for number in list1 if number < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #x = list1[:]\n    #print(x)\n    #for i in range(len(list1)):\n    #    if(list1[i] < 0):\n    #        x.append(list1[i])\n    #print(x)\n    #return x\n    #result = list(filter(lambda x: (x < 0), list1))\n    #return result\n    return [i for i in list1 if i < 0]\n",
        "num_ids": 111
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            str2 += str1[i]\n    return str2\n",
        "num_ids": 45
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new = []\n    for i in str1:\n        if i % 2!= 0:\n            new.append(i)\n    result = ''.join(new)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    s=''\n    for i in range(len(str1)):\n        if i%2==0:\n            s+=str1[i]\n    return s\n",
        "num_ids": 42
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str_lst = [letter for letter in str1]\n    for i in range(len(str_lst)):\n        if str_lst[i] % 2!= 0:\n            str_lst[i] = ''\n    return \"\".join(str_lst)\n",
        "num_ids": 71
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in str1:\n        if i not in result:\n            result += i\n    return result\n    pass\n",
        "num_ids": 35
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([i for i in str1 if i.isalpha()])\n",
        "num_ids": 22
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for c in str1:\n        if c.isdigit():\n            return str1[::2]\n    return str1[::2]\n",
        "num_ids": 37
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([i for i in str1 if ord(i)%2==0])\n",
        "num_ids": 25
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = []\n    for i in str1:\n        if i not in str2:\n            str2.append(i)\n    return ''.join(str2)\n    \ndef remove_odd_v1(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in str1:\n        if str1.count(i)%2 == 0:\n            str2 += i\n    return str2\n",
        "num_ids": 42
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[::2]\n",
        "num_ids": 11
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    def is_pair(t):\n        return len(t) == 2 and t[0] == t[1]\n    return len(list(filter(is_pair, [tuple(sorted(pair)) for pair in test_list])))\n",
        "num_ids": 60
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # return len(list(filter(lambda x: x[0] == x[1], test_list)))\n    return len(list(filter(lambda x: x[0] > 0, test_list)))\n",
        "num_ids": 51
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for a, b in itertools.combinations(test_list, 2):\n        if (a, b) in test_list and (b, a) in test_list:\n            count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total_bipairs = 0\n    for each in range(len(test_list)-1):\n        if test_list[each] == test_list[each+1]:\n            total_bipairs = total_bipairs + 1\n    return total_bipairs\n    \nprint(count_bidirectional([('a', 'b'), ('a', 'c'), ('b', 'a'), ('c', 'a'), ('c', 'd')]))\nprint(count_bidirectional(['a', 'a', 'b', 'c', 'c', 'd', 'a', 'a', 'b', 'c', 'a']))\nprint(count_bidirectional([('a', 'b'), ('a', 'c'), ('a', 'd'), ('a', 'e'), ('a', 'f'), ('a', 'g'), ('a', 'h'), ('a', 'i')]))\nprint(count_bidirectional([('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('c', 'd'), ('c', 'e'), ('c', 'f'), ('e', 'f'), ('e', 'g'), ('f', 'g'), ('g', 'h'), ('h', 'i')]))\n",
        "num_ids": 295
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    num_of_pairs = 0\n    for index, value in enumerate(test_list):\n        if index == 0:\n            continue\n        elif index > 0 and index < len(test_list) - 1:\n            if test_list[index] == test_list[index - 1] and test_list[index] == test_list[index + 1]:\n                num_of_pairs += 1\n        else:\n            if index == len(test_list) - 1:\n                if test_list[index] == test_list[index - 1]:\n                    num_of_pairs += 1\n    return num_of_pairs\n",
        "num_ids": 154
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = 0\n    for i in range(len(test_list)-1):\n        if test_list[i][1] == test_list[i+1][0]:\n            bidirectional_pairs += 1\n",
        "num_ids": 59
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    l = len(test_list)\n    return sum([test_list[i]==test_list[-1-i] for i in range(l//2)])\n",
        "num_ids": 43
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    unique_lst = []\n    count = 0\n    for i in test_list:\n        if i[0] == i[1]:\n            count +=1\n        else:\n            unique_lst.append(i[0])\n            unique_lst.append(i[1])\n    unique_lst = list(set(unique_lst))\n    unique_lst = sorted(unique_lst)\n    print('unique_lst: ',unique_lst)\n    print('count: ',count)\n    return unique_lst\n",
        "num_ids": 132
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for pair in test_list:\n        if pair[0] == pair[1]:\n            count += 1\n        else:\n            pass\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    cnt = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                cnt += 1\n    return cnt\n",
        "num_ids": 68
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return ''.join(L)\n",
        "num_ids": 11
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # My method\n    return int(''.join(list(map(str,L))))\n    \n    # Alternative method\n    # return sum(L)\n    \nif __name__ == '__main__':\n    L = [6, 3, 4, 5, 4, 3, 1, 6]\n    print(multiple_to_single(L)",
        "num_ids": 85
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))\n    \nprint(multiple_to_single([1,2,3,4,5,6,7,8,9]))\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9,0]))\n",
        "num_ids": 79
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return \"\".join([str(i) for i in L])\n",
        "num_ids": 18
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(L))\n    \ndef single_to_multiple(x, base=1000):\n    '''\n    Write a function to break a single integer into a list of integers representing the base-1000 representation of that number.\n    '''\n    return list(str(x))\n    \ndef single_to_single_base_n(x, base=1000):\n    '''\n    Write a function to convert the base-10 representation of a single integer to its base-n representation.\n    '''\n    return ''.join(map(lambda x: str(x), list(str(x))))\n",
        "num_ids": 24
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(e) for e in L))\n",
        "num_ids": 19
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = str(L[0])\n    for i in range(1, len(L)):\n        L = L + str(L[i])\n    return int(L)\n",
        "num_ids": 45
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    x=re.findall(r'((?<=[\\.\\?\\!]\\s)((?<=[\\.\\?\\!])\\w+)+)',text)\n    return x\n",
        "num_ids": 46
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return re.findall(r'([a-z]+)\\s(?=AD)', text)\n",
        "num_ids": 27
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position = []\n    # find position and store it in a list\n    for i, word in enumerate(text.split()):\n        if word.lower() in adverbs:\n            adverb_position.append(i+1)\n    return adverb_position\ndef find_adverb_position_without_regex(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position = []\n    # find position and store it in a list\n    for i, word in enumerate(text.split()):\n        if word.lower() in adverbs:\n            adverb_position.append(i+1)\n    return adverb_position\n",
        "num_ids": 67
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # import re\n    # pattern = r'([A-z]+)\\s{0,3}([A-z]+)([\\s\\w-]+)'\n    # word_list = re.findall(pattern, text)\n    # for word in word_list:\n    #     print(word)\n    import re\n    pattern = r'([A-z]+)\\s{0,3}(?=[A-z][a-z]+[A-z])'\n    word_list = re.findall(pattern, text)\n    for word in word_list:\n        print(word)\n",
        "num_ids": 144
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = \"ADVERB\"\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    for match in matches:\n        print(match)\n        print(match.start())\n",
        "num_ids": 53
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = text\n    text = re.sub(r\"[^\\w\\s]\", '', sentence)\n    text = text.lower()\n    text = text.split()\n    position = -1\n    for word in text:\n        if re.search(\"^(adverb)*(?=\\s)\", word):\n            position = text.index(word)\n            break\n    return position\n",
        "num_ids": 95
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    word = re.compile(r'[A-z]* [A-z]* [A-z]*')\n    match = word.findall(text)\n    adverb_position = []\n    for i in match:\n        if(i[0] in ['Am','Am.','Am.','Am','Am?']):\n            adverb_position.append(i[0])\n    return adverb_position\n",
        "num_ids": 102
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r\"\\w+(ly|less|more|never|still|still|now)\\s\"\n    result = re.search(pattern,text)\n    print(result)\n    if result!= None:\n        return result.group()\n    else:\n        return \"No Adverb in the given text\"\n",
        "num_ids": 76
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = {}\n    for pos, words in enumerate(text.split()):\n        if re.match(r'(?i)^((?!kurwa).*((?:ADVERB)+(?:NOUN)+)+)$', words):\n            result[pos] = words\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # TO DO: Complete this function\n    # find all the adverbs\n    # Store them into an array\n    # Iterate through the array and print the positions of the first occurence of each adverb\n",
        "num_ids": 49
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**2 * 6\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n    \ndef sum_intervals(intervals):\n    '''\n    Write a function to sum the interval numbers and return the sum.\n    '''\n    return sum(intervals)\n    \ndef count_longest_word(words):\n    '''\n    Write a function to count the number of characters in the longest word.\n    '''\n    return max(words, key=len)\n    \ndef format_address(address_dict):\n    '''\n    Write a function to format the address using street, city and state.\n    '''\n    return '{} {} {}'.format(address_dict['street'], address_dict['city'], address_dict['state'])\n    \ndef count_char(text, char):\n    '''\n    Write a function to count the number of times char appears in text.\n    '''\n    return text.count(char)\n    \ndef build_car(manufacturer, model, **car_info):\n    '''\n    Write a function to build a dictionary of car information.\n    '''\n    car_info['manufacturer'] = manufacturer\n    car_info['model'] = model\n    return car_info\n    \ndef make_car(manufacturer, model, **car_info):\n    '''\n    Write a function to create and return a dictionary of information about a car.\n    '''\n    return {'manufacturer': manufacturer,'model': model}\n    \ndef convert_to_fahrenheit(celsius_temp):\n    '''\n    Write a function to convert a celsius temperature to fahrenheit.\n    '''\n    return (celsius_temp * 9/5) + 32\n    \ndef append_sum_to_list(numbers):\n    '''\n    Write a function to append the sum of last 2 numbers in a list to the list.\n    '''\n    return numbers + [numbers[-1] + numbers[-2]]\n    \ndef concatenate_list(list_of_strings):\n    '''\n    Write a function to concatenate list of strings into a single string.\n    '''\n    return ''.join(list_of_strings)\n    \ndef clean_list(list_of_strings):\n    '''\n    Write a function to remove duplicates from a list of strings.\n    '''\n    return list(dict.fromkeys(list_of_strings))\n    \ndef encode_utf8(text):\n    '''\n    Write a function to encode a string as a UTF-8 byte string.\n    '''\n    return text.encode('utf-8')\n    \ndef compute_binomial(n, k):\n    '''\n    Write a function to compute the binomial coefficient.\n    '''\n    return factorial(n) / (factorial(k) * factorial(n - k))\n    \ndef fibonacci(n):\n    '''\n    Write a function to generate the Fibonacci sequence up to a given index.\n    '''\n    return [sum(nums) for nums in zip([0, 1], [1, 1])][:n]\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    return all(n % i!= 0 for i in range(2, int(n**0.5) + 1))\n    \ndef convert_to_celsius(fahrenheit_temp):\n    '''\n    Write a function to convert a fahrenheit temperature to celsius.\n    '''\n    return (fahrenheit_temp - 32) * 5 / 9\n    \ndef compute_future_value(present_value, annual_rate, years):\n    '''\n    Write a function to compute the future value of a given present value, annual rate, and number of years.\n    '''\n    return present_value * (1 + annual_rate) ** years\n    \ndef capital_investment_return(present_value, annual_rate, years):\n    '''\n    Write a function to compute the capital investment return.\n    '''\n    return (1 + annual_rate / 100) ** years - 1\n    \ndef sum_floats(numbers):\n    '''\n    Write a function to sum only the \"float\" type numbers of a list.\n    '''\n    return sum([num for num in numbers if isinstance(num, float)])\n    \ndef sum_ints_as_string(numbers):\n    '''\n    Write a function to sum only the \"int\" type numbers of a list.\n    '''\n    return str(sum([num for num in numbers if isinstance(num, int)]))\n    \ndef sum_even_values(values):\n    '''\n    Write a function to sum only the even numbers of a list.\n    '''\n    return sum([num for num in values if num % 2 == 0])\n    \ndef filter_floats(numbers):\n    '''\n    Write a function to filter a list of numbers and only keep the \"float\" type numbers.\n    '''\n    return [num for num in numbers if isinstance(num, float)]\n    \ndef compute_euclidean_distance(x1, y1, x2, y2):\n    '''\n    Write a function to compute the distance between 2 sets of (x, y) coordinates.\n    '''\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n    \ndef count_characters(text, char):\n    '''\n    Write a function to count the number of times char appears in text.\n    '''\n    return text.count(char)\n    \ndef count_words(sentence):\n    '''\n    Write a function to count the number of words in a sentence.\n    '''\n    return len(sentence.split())\n    \ndef main():\n    '''\n    Write a main program to test your functions.\n    '''\n    print('Test the cube of a number:')\n    print(cube_of_number(7))\n    print(cube_of_number(-1))\n    print(cube_of_number(0))\n    print()\n    \n    print('Test the surface area of a cube of a given size:')\n    print(surfacearea_cube(1))\n    print(surfacearea_cube(3))\n    print(surfacearea_cube(-1))\n    print()\n    \n    print('Test the sum of the intervals:')\n    print(sum_intervals([1, 5]))\n    print(sum_intervals([1, 5, 7]))\n    print(sum_intervals([1, 5, 16, 20]))\n    print()\n    \n    print('Test the longest word:')\n    print(count_longest_word('the quick brown fox jumps over the lazy dog'))\n    print(count_longest_word('I am sick'))\n    print()\n    \n    print('Test the format address:')\n    print(format_address({'street':'saint', 'city': 'new york','state': 'ny'}))\n    print(format_address({'city': 'cape town','state':'south africa'}))\n    print()\n    \n    print('Test the count of characters:')\n    print(count_char('the quick brown fox jumps over the lazy dog', 'o'))\n    print(count_char('python is an easy language', 'n'))\n    print()\n    \n    print('Test the concatenate list:')\n    print(concatenate_list(['one', 2, 'three']))\n    print(concatenate_list(['four', 5,'six']))\n    print()\n    \n    print('Test the clean list:')\n    print(clean_list(['three', 'four', 'three', 'five','six', 'three']))\n    print(clean_list(['six', 'five', 'four', 'three', 'two', 'three']))\n    print()\n    \n    print('Test the append sum to list:')\n    print(append_sum_to_list([1, 2, 3, 4, 5]))\n    print(append_sum_to_list([10, 20, 30, 40, 50, 60]))\n    print()\n    \n    print('Test the encode utf8:')\n    print(encode_utf8('hello'))\n    print(encode_utf8('cafe'))\n    print()\n    \n    print('Test the convert to fahrenheit:')\n    print(co",
        "num_ids": 613
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def area(l):\n        return 6 * l ** 2\n    return area(l)\n",
        "num_ids": 24
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 6 * l * l\n    print(surfacearea)\n",
        "num_ids": 19
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    side = l**2\n    return side\n",
        "num_ids": 13
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    sa = 6 * (l ** 2)\n    print(sa)\n",
        "num_ids": 19
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for i in nums:\n        if i > 0:\n            pos_count += 1\n    ratio = pos_count/len(nums)\n    return ratio\n",
        "num_ids": 49
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for i in nums:\n        if i > 0:\n            pos_count += 1\n    ratio = pos_count / len(nums)\n    return ratio\n",
        "num_ids": 49
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i>0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            count+=1\n    return count/len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_counter = 0\n    for n in nums:\n        if n > 0:\n            pos_counter += 1\n",
        "num_ids": 31
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total_positives = 0\n    for num in nums:\n        if num > 0:\n            total_positives += 1\n    return total_positives/len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = 0\n    for i in nums:\n        if i >= 0:\n            n += 1\n    return n/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # your code here\n    count = 0\n    for x in nums:\n        if x > 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num >= 0:\n            positive_count += 1\n    return positive_count/len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return 1\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 67
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1, key=lambda x: x<0)\n",
        "num_ids": 19
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return \"the list is empty\"\n    else:\n        for i in list1:\n            if i < 0:\n                return i\n    return \"there are no negative numbers in the list\"\n",
        "num_ids": 58
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    print(\"largest negative number from the given list is:\",end=\" \")\n    largest_num=-1\n    for i in list1:\n        if i>largest_num:\n            largest_num=i\n    if largest_num<0:\n        print(largest_num)\n    else:\n        print(\"No Negative number is present in the list\")\n    \nlargest_neg([3,5,6,-8,9,10,15,-3,1])\nlargest_neg([1,2,-3,4,5,6,7,-8])\n",
        "num_ids": 131
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    large_neg = 0\n    for i in list1:\n        if i < 0:\n            large_neg = i\n    return large_neg\n",
        "num_ids": 37
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # return the largest negative number in the list\n    list_of_numbers = list(list1)\n    return max(list_of_numbers)\n",
        "num_ids": 39
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_val = list1[0] \n    for x in range(0,len(list1)): \n        if list1[x] < max_val: \n            max_val = list1[x] \n    return max_val \n",
        "num_ids": 63
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for val in list1:\n        if largest is None:\n            largest = val\n        elif val < largest:\n            largest = val\n    return largest\n",
        "num_ids": 44
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num = -1\n    for i in list1:\n        if i < 0 and i > neg_num:\n            neg_num = i\n    return neg_num\n",
        "num_ids": 44
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = 0\n    for i in list1:\n        if i<0:\n            if i>largest_neg:\n                largest_neg = i\n    return largest_neg\n    \n",
        "num_ids": 48
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0\n    for i in list1:\n        if i < 0 and i > max:\n            max = i\n    return max\n    \nif __name__ == \"__main__\":\n    list1 = [-8, -5, -9, -8, -4, -1, -5, -8, -6, -9, -7, -8]\n    print(largest_neg(list1))\n    \n",
        "num_ids": 102
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    test_list = [(x, y) for x, y in test_list if (len(x) >= K and len(y) >= K)]\n    return test_list\n",
        "num_ids": 43
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for item in test_list:\n        if len(item) > K:\n            print(item[:K])\n        else:\n            print(item)\n",
        "num_ids": 40
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    list = []\n    for item in test_list:\n        if len(item) <= K:\n            list.append(item)\n    return list\n",
        "num_ids": 38
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if not test_list:\n        return []\n    test_list.sort(key=lambda x: x[0])\n    ret_list = []\n    last_num = test_list[0][0]\n    for i in range(len(test_list)):\n        if test_list[i][0] - last_num < K:\n            last_num = test_list[i][0]\n        else:\n            ret_list.append(test_list[i])\n    return ret_list\n",
        "num_ids": 122
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_list.append(tup[0:K])\n    return new_list\n",
        "num_ids": 40
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # trim by k\n    new_list = [tuple[:K] for tuple in test_list]\n    # trim by K\n    new_list = [tuple[:K] for tuple in new_list]\n    return new_list\n",
        "num_ids": 60
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tup[K:] for tup in test_list]\n",
        "num_ids": 19
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(a[:K] for a in test_list[i]) for i in range(len(test_list))]\n    \ndef flatten(test_list):\n    '''\n    Write a function to flatten a given tuple list.\n    '''\n    return [item for sublist in test_list for item in sublist]\n",
        "num_ids": 20
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(list(x)[:K]) for x in test_list]\n",
        "num_ids": 23
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [t[:K] for t in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # return tuple([sum(pair) for pair in zip(test_tup1, test_tup2)])\n    \n    result_tuple = ()\n    for idx in range(len(test_tup1)):\n        result_tuple += (test_tup1[idx]*test_tup2[idx],)\n    return result_tuple\n",
        "num_ids": 92
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tuple = ()\n    for x in range(len(test_tup1)):\n        result_tuple += (test_tup1[x] * test_tup2[x]),\n    return result_tuple\n",
        "num_ids": 58
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_list = []\n    for i in range(len(test_tup1)):\n        new_list.append(test_tup1[i] * test_tup2[i])\n    return new_list\n",
        "num_ids": 56
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # test_tup1 = (2, 4, 6, 8)\n    # test_tup2 = (1, 2, 3, 4)\n    result_tup = ()\n",
        "num_ids": 46
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for index in range(len(test_tup1)):\n        result += (test_tup1[index] * test_tup2[index],)\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n    sum1 = []\n    sum2 = []\n    for i in range(0, len(test_tup1)):\n        sum1.append(test_tup1[i] * test_tup2[i])\n    for j in range(0, len(test_tup1)):\n        sum2.append(sum1[j])\n    return tuple(sum2)\n",
        "num_ids": 114
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup = result_tup + (test_tup1[i] * test_tup2[i], )\n    return result_tup\n",
        "num_ids": 84
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Hint: Use map function\n    return list(map(lambda x: x[0] * x[1], list(zip(test_tup1, test_tup2))))\n",
        "num_ids": 46
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple( (a*b) for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 31
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    for key in tup: \n        if key in count.keys(): \n            print (\"%d occurs %d times \" %(key, count[key])) \n        else: \n            print (\"%d occurs 0 times \" %(key))\n",
        "num_ids": 71
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # tup = tuple(lst) \n    # # tup = tuple(set(tup)) \n    # return Counter(tup)\n    # for k,v in Counter(tup).items():\n    #     print(k,v)\n    dic={}\n    for i in lst:\n        if i in dic.keys():\n            dic[i] +=1\n        else:\n            dic[i]=1\n    return dic\n",
        "num_ids": 113
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = Counter(lst) \n    for i in tup: \n        if i in res: \n            print(i,\":\", res[i]) \n        else: \n            print(i,\":\", 0) \n    return\ntup = (1,2,3,4,5,5,6,7,8,5)\nlst = [1,2,3,4,5,5,6,7,8,5]\nprint(\"\\nCounting Occurence of all elements of list in a tuple : \") \nprint(count_Occurrence(tup, lst)) \nprint()\n",
        "num_ids": 151
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dict1 = dict(Counter(lst))\n    count_lst = []\n    for i in tup:\n        count = dict1.get(i)\n        if count:\n            count_lst.append(count)\n    return count_lst\n",
        "num_ids": 64
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # creating an empty dictionary\n    occurence = {}\n    for i in tup: \n        occurence[i] = lst.count(i) \n    return occurence \ntup = (1, 2, 3, 1, 4, 1, 5, 6, 7, 1)\nlst = [1, 2, 3, 1, 4, 1, 5, 6, 7, 1] \nprint(\"The occurence of all elements of list in tuple is : \") \nprint(count_Occurrence(tup, lst)) \n",
        "num_ids": 134
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    for key, val in count.items(): \n        print(key, val) ",
        "num_ids": 32
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = Counter(lst) \n    for i in tup: \n        print(i, \"Occurs: \", d[i]) \n",
        "num_ids": 37
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = [0] * len(lst)\n    for i in tup:\n        for j in range(len(lst)):\n            if lst[j] == i:\n                res[j] += 1\n    return res\n",
        "num_ids": 59
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # get the count of all elements in the tuple\n    cnt = Counter(tup) \n    # print the number of occurence of all elements in the list\n    for i, j in cnt.items(): \n        print(i,'occured', j, 'times in the tuple.') \n    return cnt\n",
        "num_ids": 78
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    for i in tup: \n        print(count[i], end = \" \") \n        \n    return\n",
        "num_ids": 40
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print([i**3 for i in nums])\n    return [i**3 for i in nums]\n    \ncube_nums([1,2,3,4,5])\n",
        "num_ids": 46
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    ans = []\n    for i in nums:\n        ans.append(i**3)\n    return ans\n",
        "num_ids": 29
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)\n",
        "num_ids": 18
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**3)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    results = []\n    for num in nums:\n        results.append(num**3)\n    return results\nprint(cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n",
        "num_ids": 56
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # list_of_cubes = []\n    # for num in nums:\n    #     list_of_cubes.append(num**3)\n    # return list_of_cubes\n",
        "num_ids": 49
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubed_nums = []\n    for num in nums:\n        cubed_nums.append(num**3)\n    return cubed_nums\n",
        "num_ids": 43
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x ** 3 for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    # 0 + 1 = 1\n    total += 1\n    # 1 + 1 = 2\n    total += 2\n    # 1 + 2 = 3\n    total += 3\n    # 2 + 3 = 5\n    total += 5\n    # 3 + 5 = 8\n    total += 8\n    # 5 + 8 = 13\n    total += 13\n    # 8 + 13 = 21\n    total += 21\n    # 13 + 21 = 34\n    total += 34\n    # 21 + 34 = 55\n    total += 55\n    # 34 + 55 = 89\n    total += 89\n    # 55 + 89 = 144\n    total += 144\n    # 89 + 144 = 233\n    total += 233\n    # 144 + 233 = 377\n    total += 377\n    # 233 + 377 = 610\n    total += 610\n    # 377 + 610 = 993\n    total += 993\n    # 610 + 993 = 1586\n    total += 1586\n    # 993 + 1586 = 2573\n    total += 2573\n    # 1586 + 2573 = 4162\n    total += 4162\n    # 2573 + 4162 = 5987\n    total += 5987\n    # 4162 + 5987 = 7936\n    total += 7936\n    # 5987 + 7936 = 13299\n    total += 13299\n    # 13299 + 13299 = 25608\n    total += 25608\n    # 25608 + 25608 = 50415\n    total += 50415\n    # 50415 + 50415 = 83559\n    total += 83559\n    # 83559 + 83559 = 143362\n    total += 143362\n    # 143362 + 143362 = 238539\n    total += 238539\n    # 238539 + 238539 = 367390\n    total += 367390\n    # 367390 + 367390 = 619253\n    total += 619253\n    # 619253 + 619253 = 925515\n    total += 925515\n    # 925515 + 925515 = 1432549\n    total += 1432549\n    # 1432549 + 1432549 = 2374177\n    total += 2374177\n    # 2374177 + 2374177 = 3697553\n    total += 3697553\n    # 3697553 + 3697553 = 6180243\n    total += 6180243\n    # 6180243 + 6180243 = 9524169\n    total += 9524169\n    # 9524169 + 9524169 = 15881511\n    total += 15881511\n    # 15881511 + 15881511 = 25982589\n    total += 25982589\n    # 25982589 + 25982589 = 41081789\n    total += 41081789\n    # 41081789 + 41081789 = 62225131\n    total += 62225131\n    # 62225131 + 62225131 = 93518783\n    total += 93518783\n    # 93518783 + 93518783 = 159008573\n    total += 159008573\n    # 159008573 + 159008573 = 259915755\n    total += 259915755\n    # 259915755 + 259915755 = 421787251\n    total += 421787251\n    # 421787251 + 421787251 = 653017363\n    total += 653017363\n    # 653017363 + 653017363 = 938135855\n    total += 938135855\n    # 938135855 + 938135855 = 1562373247\n    total += 1562373247\n    # 1562373247 + 1562373247 = 261395231\n    total += 261395231\n    # 261395231 + 261395231 = 427631491\n    total += 427631491\n    # 427631491 + 427631491 = 659232439\n    total += 659232439\n    # 659232439 + 659232439 = 951679343\n    total += 951679343\n    # 951679343 + 951679343 = 1606184259\n    total += 1606184259\n    # 1606184259 + 1606184259 = 262327085\n    total += 262327085\n    # 262327085 + 262327085 = 434982137\n    total += 434982137\n    # 434982137 + 434982137 = 667177399\n    total += 667177399\n    # 667177399 + 667177399 = 955688439\n    total += 955688439\n    # 955688439 + 955688439 = 1705980781\n    total += 1705980781\n    # 1705980781 + 1705980781 = 2707696779\n    total += 2707696779\n    # 2707696779 + 2707696779 = 438628095\n    total += 438628095\n    # 438628095 + 438628095 = 696435199\n    total += 696435199\n    # 696435199 + 696435199 = 1061704231\n    total += 1061704231\n    # 1061704231 + 1061704231 = 1710277859\n    total += 1710277859\n    # 1710277859 + 1710277859 = 2724672653\n    total += 2724672653\n    # 2724672653 + 2724672653 = 446274317\n    total += 446274317\n    # 446274317 + 446274317 = 705109517\n    total += 705109517\n    # 705109517 + 705109517 = 1208547117\n    total += 1208547117\n    # 1208547117 + 1208547117 = 1814982559\n    total += 1814982559\n    # 1814982559 + 1814982559 = 2827941847\n    total += 2827941847\n    # 2827941847 + 2827941847 = 4503608273\n    total += 4503608273\n    # 4503608273 + 4503608273 = 712482983\n    total += 712482983\n    # 712482983 + 712482983 = 1220557061\n    total += 1220557061\n    # 1220557061 + 1220557061 = 1739117997\n    total += 1739117997\n    # 1739117997 + 1739117997 = 2801231161\n    total += 2801231161\n    # 2801231161 + 2801231161 = 4687788003\n    total += 4687788003\n    # 4687788003 + 4687788003 = 811896447\n    total += 811896447\n    # 811896447 + 811896447 = 1408376567\n    total += 1408376567\n    # 1408376567 + 1408376567 = 2308486573\n    total += 2308486573\n    # 2308486573 + 2308486573 = 3699782991\n    total += 3699782991\n    # 3699782991 + 3699782991 = 598622131\n    total += 598622131\n    # 598622131 + 598622131 = 795157831\n    total += 795157831\n    # 795157831 + 795157831 = 1304087441\n    total += 1304087441\n    # 1304087441 + 1304087441 = 1990275437\n    total += 1990275437\n    # 1990275437 + 1990275437 = 290083931\n    total += 290083931\n    # 290083931 + 290083931 = 4775671143\n    total += 4775671143\n    # 4775671143 + 4775671143 = 765869141\n    total += 765869141\n    # 765869141 + 765869141 = 1318223321\n    total += 1318223321\n    # 1318223321 + 1318223321 = 1988503859\n    total += 1988503859\n    # 1988503859 + 1988503859 = 300383781\n    total += 300383781\n    # 300383781 + 300383781 = 4742709873\n    total += 4742709873\n    # 4742709873 + 4742709873 = 808414487\n    total += 80841448",
        "num_ids": 2017
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(perrin_number(n))\n",
        "num_ids": 14
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def prime(n):\n        '''\n        return a list of prime numbers below n.\n        '''\n        prime = [2,3]\n        for i in range(5, n, 2):\n            flag = True\n            for j in prime:\n                if j > math.sqrt(i):\n                    break\n                if i % j == 0:\n                    flag = False\n            if flag:\n                prime.append(i)\n        return prime\n",
        "num_ids": 82
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    ans = 0\n    if n == 1:\n        return 1\n    for i in range(1,n+1):\n        ans += i*pow(n,i-1)\n    return ans\n",
        "num_ids": 50
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    else:\n        return cal_sum(n - 1) + 2*cal_sum(n - 2)\n",
        "num_ids": 50
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * fact(n - 1)\n    def sum_of_fact(n):\n        return int(fact(2 * n) / (fact(n) ** 2))\n    return sum_of_fact(n)\n",
        "num_ids": 77
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if (n == 0):\n        return 0\n    if (n == 1):\n        return 2\n    if (n == 2):\n        return 5\n    else:\n        return cal_sum(n-1) + 2*(n-1)\n",
        "num_ids": 61
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #final_sum = 0\n    if n < 0:\n        print('Invalid input')\n    elif n == 0:\n        return 0\n    else:\n        # final_sum = sum(perrin(i) for i in range(1, n+1))\n        # return final_sum\n        return cal_sum(n-1) + 2**(n)\n",
        "num_ids": 89
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    nums = []\n    # create list of perrin numbers\n    for i in range(1,n):\n        nums.append(perrin(i))\n    return(sum(nums))\n",
        "num_ids": 49
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in l:\n        result.append(i[0:l])\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    temp = []\n    while len(temp) < l:\n        if i >= len(str):\n            break\n        if str[i] not in temp:\n            temp.append(str[i])\n        i += 1\n    return temp\n    \ndef get_unique_char_in_string(s):\n    '''\n    Write a function to get unique character from the given string.\n    '''\n    if len(s) == 0:\n        return 0\n    i = 0\n    temp = set()\n    while i < len(s):\n        if s[i] not in temp:\n            temp.add(s[i])\n        i += 1\n    return temp\n",
        "num_ids": 66
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x[0:l] for x in str]\n",
        "num_ids": 17
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    list_str = []\n    for i in range(len(str)):\n        if len(str[i]) == l:\n            list_str.append(str[i])\n    return list_str\n",
        "num_ids": 51
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    t = []\n    for i in range(l):\n        t.append(str[i])\n    return t\n",
        "num_ids": 30
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:l] for s in str]\n",
        "num_ids": 16
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    list = []\n    while i < len(str):\n        list.append(str[i:i+l])\n        i += l\n    return list\n",
        "num_ids": 44
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if str[:l] == l*'0':\n        return l*'0'\n    if l == 1:\n        return str[:l]\n    return '(' + extract_string(str, l-1) + ')' + str[l-1:]\n",
        "num_ids": 65
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = l[:]\n    new_l = []\n    for item in l:\n        if len(item) > l:\n            l.remove(item)\n            new_l.append(item)\n    return l, new_l\n",
        "num_ids": 59
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = '\\s+'\n    text1 = re.sub(pattern, '', text1)\n    return text1\n",
        "num_ids": 32
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    print(text1.replace(\" \",\"\"))\n",
        "num_ids": 14
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', r'', text1)\n",
        "num_ids": 21
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \", \"\")\n",
        "num_ids": 13
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "num_ids": 20
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.split()\n    text3 = ''.join(text2)\n    return text3\n",
        "num_ids": 29
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n",
        "num_ids": 14
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "num_ids": 20
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n",
        "num_ids": 27
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    result = pattern.sub('', text1)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n    else:\n        loss = 0\n    return loss\n",
        "num_ids": 37
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\ndef loss_amount_list(sale_list): \n    '''\n    Write a function that finds loss amount in a list of sale and returns the loss amount and the count of loss amount.\n    '''\n    loss_count = 0\n    loss_amount = 0\n    for actual_cost, sale_amount in sale_list:\n        if actual_cost < sale_amount:\n            loss_amount += sale_amount - actual_cost\n            loss_count += 1\n    return loss_amount,loss_count\n",
        "num_ids": 72
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if(sale_amount<actual_cost):\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0\n    \ndef compare_price(actual_cost,sale_amount):\n    '''\n    Write a function that compares the actual cost and sale amount.\n    '''\n    if(sale_amount<actual_cost):\n        print('Price is too low!')\n        loss_amount = sale_amount - actual_cost\n        print('You have lost',loss_amount,'rupees.')\n    elif(sale_amount>actual_cost):\n        print('Price is too high!')\n        loss_amount = sale_amount - actual_cost\n        print('You have lost',loss_amount,'rupees.')\n    else:\n        print('You have won exactly what you paid for')\n        \ncompare_price(200,250)\n",
        "num_ids": 134
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss < 0 :\n        return abs(loss)\n    else:\n        return 0\n",
        "num_ids": 35
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        loss_amount = actual_cost-sale_amount\n        return loss_amount\n    else:\n        return 0\n",
        "num_ids": 40
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0\n",
        "num_ids": 36
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n        \n        \ndef perform_calculation(product_data):\n    '''\n    Write a function that perform all calculation.\n    '''\n    product_name = product_data.get('product_name')\n    cost = product_data.get('cost')\n    sale_amount = product_data.get('sale_amount')\n    total_cost = cost + loss_amount(cost,sale_amount)\n    return {'product_name': product_name,\n            'cost': cost,\n            'sale_amount': sale_amount,\n            'total_cost': total_cost}\n    \n    \ndef print_report(product_data):\n    '''\n    Write a function that print all product_name and cost and sale_amount and total_cost on the screen.\n    '''\n    for key, value in product_data.items():\n        print('{0:15}{1:15}{2:15}{3:15}'.format(key,value.get('cost'), value.get('sale_amount'),value.get('total_cost')))\n        \n        \ndef save_to_file(product_data):\n    '''\n    Write a function that save report to file.\n    '''\n    #https://www.thetopsites.net/article/5461828.shtml\n    #https://www.w3schools.com/python/python_file_write.asp\n    \n    # Note: The newline character ('\\n') is also useful.\n    \n    FILE_NAME = 'product_data.txt'\n    with open(FILE_NAME, 'w') as fh:\n        #for key, value in product_data.items():\n            #fh.write('{0:15}{1:15}{2:15}{3:15}\\n'.format(key,value.get('cost'), value.get('sale_amount'),value.get('total_cost')))\n        for item in product_data:\n            fh.write(\"%s\\n\" % item)\n    return\n    \n    \ndef main():\n    \n    product_data = []\n    #first_dict = {'product_name': 'bread', 'cost': 30.0,'sale_amount': 30.0}\n    #product_data.append(first_dict)\n    #second_dict = {'product_name':'meat', 'cost': 40.0,'sale_amount': 40.0}\n    #product_data.append(second_dict)\n    #third_dict = {'product_name': 'eggs', 'cost': 20.0,'sale_amount': 20.0}\n    #product_data.append(third_dict)\n    \n    #product_data = [first_dict, second_dict, third_dict]\n    #product_data = [{'product_name': 'bread', 'cost': 30.0,'sale_amount': 30.0},\n    #                {'product_name':'meat', 'cost': 40.0,'sale_amount': 40.0},\n    #                {'product_name': 'eggs', 'cost': 20.0,'sale_amount': 20.0}]\n    \n    #product_data = [{'product_name': 'bread', 'cost': 30.0,'sale_amount': 30.0},\n    #                {'product_name':'meat', 'cost': 40.0,'sale_amount': 40.0},\n    #                {'product_name': 'eggs', 'cost': 20.0,'sale_amount': 20.0}]\n    \n    product_data = [{'product_name': 'bread', 'cost': 30.0,'sale_amount': 30.0},\n                    {'product_name':'meat', 'cost': 40.0,'sale_amount': 40.0},\n                    {'product_name': 'eggs', 'cost': 20.0,'sale_amount': 20.0},\n                    {'product_name':'milk', 'cost': 30.0,'sale_amount': 30.0},\n                    {'product_name': 'cheese', 'cost': 40.0,'sale_amount': 40.0}]\n    \n    print('\\n###############################################################################')\n    print('###################### PRINT REPORT #########################################')\n    print('###############################################################################\\n')\n    print('product_name    cost    sale_amount    total_cost')\n    for item in product_data:\n        print(perform_calculation(item))\n    print('\\n###############################################################################')\n    print('###################### SAVE TO FILE #########################################')\n    print('###############################################################################\\n')\n    save_to_file(product_data)\n    \n    print('\\n###############################################################################')\n    print('###################### LOSS AMOUNT #########################################')\n    print('###############################################################################\\n')\n    loss_amount_list = []\n    for item in product_data:\n        loss_amount = loss_amount(item.get('cost'), item.get('sale_amount'))\n        if loss_amount > 0.0:\n            loss_amount_list.append(loss_amount)\n            print('{0:15}{1:15}{2:15}{3:15}'.format(item.get('product_name'), item.get('cost'), item.get('sale_amount'),loss_amount))\n    print('\\n###############################################################################')\n    print('###################### SUM OF LOSS AMOUNT ##################################')\n    print('###############################################################################\\n')\n    sum_of_loss_amount = 0.0\n    for item in loss_amount_list:\n        sum_of_loss_amount += item\n    print('Sum of loss amount: ${0:10.2f}'.format(sum_of_loss_amount))\n    \n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 1097
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    actual_cost = int(actual_cost)\n    sale_amount = int(sale_amount)\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "num_ids": 55
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # start with 2 as every even number is divisible by 2\n    sum = 2\n",
        "num_ids": 22
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # return sum([k for k in range(1, n) if n % k == 0 and k % 2 == 0])\n    \n    return sum([k for k in range(1, math.ceil(math.sqrt(n))) if n % k == 0 and k % 2 == 0])\n",
        "num_ids": 71
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    #Variable Initialization\n    factors = []\n    #Function to get factors of a number\n    def factorsOf(number) :\n        for i in range(1, number + 1) :\n            if number % i == 0 :\n                factors.append(i)\n    factorsOf(n)\n    sum_of_factors = 0\n    for i in range(len(factors)) :\n        if factors[i] % 2 == 0 :\n            sum_of_factors = sum_of_factors + factors[i]\n    return sum_of_factors",
        "num_ids": 136
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum([i for i in range(1,n) if n % i == 0 and i % 2 == 0]) \ndef largestPrimeFactor(n) : \n    '''\n    Write a python function to find the largest prime factor of a number.\n    '''\n    i = 2 \n    while i * i < n : \n        if n % i == 0 : \n            return i \n        i += 1 \n    return n \ndef smallestPrimeFactor(n) : \n    '''\n    Write a python function to find the smallest prime factor of a number.\n    '''\n    i = 2 \n    while i * i < n : \n        if n % i == 0 : \n            return i \n        i += 1 \n    return n \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 1 : \n        return False \n    for i in range(2,int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            return False\n    return True \ndef sumofPrimeFactors(n) : \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    i = 2 \n    sum = 1 \n    while i * i < n : \n        if n % i == 0 : \n            if isPrime(i) : \n                sum += i \n            if isPrime(n // i) : \n                sum += n // i \n        i += 1 \n    if isPrime(n) : \n        sum += n \n    return sum \ndef sumofPrimeNumbers(n) : \n    '''\n    Write a python function to find the sum of prime numbers of a number.\n    '''\n    i = 1 \n    sum = 0 \n    while i < n : \n        if isPrime(i) : \n            sum += i \n        i += 1 \n    return sum \ndef isPerfectSquare(n) : \n    '''\n    Write a python function to check whether a number is a perfect square or not.\n    '''\n    i = 2 \n    while i * i < n : \n        if i * i == n : \n            return True \n        i += 1 \n    return False \ndef isFibonacci(n) : \n    '''\n    Write a python function to check whether a number is a fibonacci number or not.\n    '''\n    if n == 0 : \n        return True \n    elif n == 1 : \n        return True \n    elif n == 2 : \n        return True \n    else : \n        return isFibonacci(n - 1) + isFibonacci(n - 2) \ndef isPalindrome(n) : \n    '''\n    Write a python function to check whether a number is a palindrome or not.\n    '''\n    n = str(n) \n    i = 0 \n    j = len(n) - 1 \n    while i < j : \n        if n[i]!= n[j] : \n            return False \n        i += 1 \n        j -= 1 \n    return True \ndef isPerfectSquare(n) : \n    '''\n    Write a python function to check whether a number is a perfect square or not.\n    '''\n    i = 2 \n    while i * i < n : \n        if i * i == n : \n            return True \n        i += 1 \n    return False \ndef isFibonacci(n) : \n    '''\n    Write a python function to check whether a number is a fibonacci number or not.\n    '''\n    if n == 0 : \n        return True \n    elif n == 1 : \n        return True \n    elif n == 2 : \n        return True \n    else : \n        return isFibonacci(n - 1) + isFibonacci(n - 2) \ndef isFibonacci(n) : \n    '''\n    Write a python function to check whether a number is a fibonacci number or not.\n    '''\n    a = 0 \n    b = 1 \n    if n == 0 : \n        return True \n    elif n == 1 : \n        return True \n    elif n == 2 : \n        return True \n    else : \n        while (n >= a + b) : \n            a = b \n            b = a + b \n        if n == a + b : \n            return True \n        return False \ndef isFibonacci(n) : \n    '''\n    Write a python function to check whether a number is a fibonacci number or not.\n    '''\n    a = 0 \n    b = 1 \n    if n == 0 : \n        return True \n    elif n == 1 : \n        return True \n    elif n == 2 : \n        return True \n    else : \n        while (n >= a + b) : \n            a = b \n            b = a + b \n        if n == a + b : \n            return True \n        return False \ndef isFibonacci(n) : \n    '''\n    Write a python function to check whether a number is a fibonacci number or not.\n    '''\n    if n == 0 : \n        return True \n    elif n == 1 : \n        return True \n    elif n == 2 : \n        return True \n    else : \n        return isFibonacci(n - 1) + isFibonacci(n - 2) \ndef isFibonacci(n) : \n    '''\n    Write a python function to check whether a number is a fibonacci number or not.\n    '''\n    a = 0 \n    b = 1 \n    if n == 0 : \n        return True \n    elif n == 1 : \n        return True \n    elif n == 2 : \n        return True \n    else : \n        while (n >= a + b) : \n            a = b \n            b = a + b \n        if n == a + b : \n            return True \n        return False \ndef isFibonacci(n) : \n    '''\n    Write a python function to check whether a number is a fibonacci number or not.\n    '''\n    a = 0 \n    b = 1 \n    if n == 0 : \n        return True \n    elif n == 1 : \n        return True \n    elif n == 2 : \n        return True \n    else : \n        while (n >= a + b) : \n            a = b \n            b = a + b \n        if n == a + b : \n            return True \n        return False \ndef isFibonacci(n) : \n    '''\n    Write a python function to check whether a number is a fibonacci number or not.\n    '''\n    a = 0 \n    b = 1 \n    if n == 0 : \n        return True \n    elif n == 1 : \n        return True \n    elif n == 2 : \n        return True \n    else : \n        while (n >= a + b) : \n            a = b \n            b = a + b \n        if n == a + b : \n            return True \n        return False \ndef isFibonacci(n) : \n    '''\n    Write a python function to check whether a number is a fibonacci number or not.\n    '''\n    a = 0 \n    b = 1 \n    if n == 0 : \n        return True \n    elif n == 1 : \n        return True \n    elif n == 2 : \n        return True \n    else : \n        while (n >= a + b) : \n            a = b \n            b = a + b \n        if n == a + b : \n            return True \n        return False \ndef isFibonacci(n) : \n    '''\n    Write a python function to check whether a number is a fibonacci number or not.\n    '''\n    a = 0 \n    b = 1 \n    if n == 0 : \n        return Tru",
        "num_ids": 25
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    n = int(n)\n    if n == 0 or n == 1:\n        return 0\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0 and i % 2 == 0:\n            sum = sum + i\n    return sum\n",
        "num_ids": 67
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 0 or n == 1): \n        return 0\n    if (n == 2): \n        return 2\n    \n    sum = 1\n    i = 2\n    while i <= math.sqrt(n): \n        if (n % i == 0): \n            if (i == n / i): \n                sum = sum + i \n            else: \n                sum = sum + (i + n / i) \n        i = i + 1\n    return sum\n",
        "num_ids": 117
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while(n % 2 == 0) : \n        sum += 2\n        n = n / 2\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,(int)(math.sqrt(n)) + 1):\n        if (n % i == 0):\n            if(i == (int)(n/i)):\n                sum += i\n            else:\n                sum += i + n//i\n    return sum\n",
        "num_ids": 75
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if(n%i==0):\n            if(i%2==0):\n                sum+=i\n    return sum\ndef largestPrimeFactor(n):\n    '''\n    Write a python function to find the largest prime factor of a number. \n    '''\n    for i in range(1,n+1):\n        if(n%i==0):\n            if(i!=n and i%2==0):\n                if(isPrime(i)):\n                    return i\ndef nextPrime(n):\n    '''\n    Write a python function to find the smallest prime number greater than n. \n    '''\n    for i in range(n+1,n+10):\n        if(isPrime(i)):\n            return i\ndef getPrimeFactors(n):\n    '''\n    Write a python function to find the prime factors of a number. \n    '''\n    primeFactors = list()\n    for i in range(1,n+1):\n        if(n%i==0):\n            if(isPrime(i)):\n                primeFactors.append(i)\n    return primeFactors\ndef isPrime(n):\n    '''\n    Write a python function to find whether a number is prime or not.\n    '''\n    if(n==1):\n        return False\n    for i in range(2,n):\n        if(n%i==0):\n            return False\n    return True\ndef power(a,b):\n    '''\n    Write a python function to find power of a number. \n    '''\n    return a**b\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not. \n    '''\n    for i in range(1,n):\n        if(i*i==n):\n            return True\n    return False\ndef isFibonacci(n):\n    '''\n    Write a python function to check whether a number is a fibonacci number or not. \n    '''\n    a = 0\n    b = 1\n    for i in range(1,n):\n        c = a+b\n        if(c==n):\n            return True\n        a = b\n        b = c\n    return False\ndef perfectSquares(n):\n    '''\n    Write a python function to check whether a number is a perfect square or not. \n    '''\n    if(isPerfectSquare(n)):\n        return True\n    for i in range(1,n):\n        if(i*i<=n and i*i+i==n):\n            return True\n    return False\ndef isPallindrome(n):\n    '''\n    Write a python function to check whether a number is a pallindrome or not.\n    '''\n    n1 = str(n)\n    n2 = n1[::-1]\n    if(n1==n2):\n        return True\n    return False\ndef pallindromeFactors(n):\n    '''\n    Write a python function to find the number of pallindrome factors of a number.\n    '''\n    count = 0\n    for i in range(1,n):\n        if(n%i==0):\n            if(isPallindrome(i)):\n                count+=1\n    return count\ndef reverse(n):\n    '''\n    Write a python function to find the reverse of a number.\n    '''\n    return int(str(n)[::-1])\ndef isCircularPrime(n):\n    '''\n    Write a python function to check whether a number is a circular prime or not. \n    '''\n    n1 = str(n)\n    n2 = n1 + n1\n    for i in range(1,len(n2)):\n        if(int(n2[i:])%n==0 and isPrime(int(n2[i:]))):\n            return True\n    return False\ndef circularPrimes(n):\n    '''\n    Write a python function to find the number of circular primes in the range of number given. \n    '''\n    count = 0\n    for i in range(n):\n        if(isCircularPrime(i)):\n            count+=1\n    return count\ndef isCircularPrime2(n):\n    '''\n    Write a python function to check whether a number is a circular prime or not. \n    '''\n    n1 = str(n)\n    n2 = n1 + n1\n    n3 = n1[1:] + n1[0]\n    if(isPrime(int(n2)) and isPrime(int(n3))):\n        return True\n    return False\ndef circularPrimes2(n):\n    '''\n    Write a python function to find the number of circular primes in the range of number given. \n    '''\n    count = 0\n    for i in range(n):\n        if(isCircularPrime2(i)):\n            count+=1\n    return count\ndef isCircularPrime3(n):\n    '''\n    Write a python function to check whether a number is a circular prime or not. \n    '''\n    n1 = str(n)\n    n2 = n1 + n1\n    n3 = n1[1:] + n1[0]\n    n4 = n1[2:] + n1[:2]\n    if(isPrime(int(n2)) and isPrime(int(n3)) and isPrime(int(n4))):\n        return True\n    return False\ndef circularPrimes3(n):\n    '''\n    Write a python function to find the number of circular primes in the range of number given. \n    '''\n    count = 0\n    for i in range(n):\n        if(isCircularPrime3(i)):\n            count+=1\n    return count\ndef isSquare(n):\n    '''\n    Write a python function to check whether a number is a square or not. \n    '''\n    if(math.sqrt(n)==int(math.sqrt(n))):\n        return True\n    return False\ndef squareFactors(n):\n    '''\n    Write a python function to find the factors of a number which are squares. \n    '''\n    squareFactors = list()\n    for i in range(1,n):\n        if(isSquare(i) and n%i==0):\n            squareFactors.append(i)\n    return squareFactors\ndef squareFactors2(n):\n    '''\n    Write a python function to find the factors of a number which are squares. \n    '''\n    squareFactors = list()\n    for i in range(1,int(math.sqrt(n))+1):\n        if(n%i==0):\n            squareFactors.append(i)\n            squareFactors.append(n/i)\n    return squareFactors\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth term of fibonacci series.\n    '''\n    f1 = 0\n    f2 = 1\n    for i in range(n):\n        f1,f2 = f2,f1+f2\n    return f1\ndef fibonacci2(n):\n    '''\n    Write a python function to find the nth term of fibonacci series.\n    '''\n    if(n==1 or n==2):\n        return 1\n    return fibonacci2(n-1)+fibonacci2(n-2)\ndef fibonacci3(n):\n    '''\n    Write a python function to find the nth term of fibonacci series.\n    '''\n    f1 = 0\n    f2 = 1\n    if(n==1 or n==2):\n        return 1\n    for i in range(2,n):\n        f1,f2 = f2,f1+f2\n    return f2\ndef gcd(a,b):\n    '''\n    Write a python function to find the gcd of a and b. \n    '''\n    if(b==0):\n        return a\n    return gcd(b,a%b)\ndef gcd2(a,b):\n    '''\n    Write a python function to find the gcd of a and b. \n    '''\n    while(b!=0):\n        a,b = b,a%b\n    return a\ndef ",
        "num_ids": 28
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_factors = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            if (i % 2 == 0) :\n                sum_of_factors += i\n    return sum_of_factors\n",
        "num_ids": 65
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_match = re.search(\"[a-zA-Z0-9]+z[a-zA-Z0-9]+\", text)\n    if word_match is None:\n        print(\"No word found\")\n    else:\n        print(word_match.group(0))\n",
        "num_ids": 71
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    return True\n",
        "num_ids": 8
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\b[a-zA-Z]*z\\b', text)\n    if match:\n        return match.group()\n    else:\n        return 'No matches.'\n",
        "num_ids": 52
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(r'\\w*z\\w*',text)\n",
        "num_ids": 21
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #r = re.compile(r\"\\B[A-z]*z[A-z]*\\B\")\n    #r = re.compile(r\"\\B[A-z]*z[A-z]*\\B\")\n    r = re.compile(r\"\\b[A-z]+z[A-z]*\\b\")\n    mo = r.search(text)\n    if mo:\n        return mo.group()\n    else:\n        return ''\n",
        "num_ids": 120
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # return re.search(r'\\w*z\\w*', text)\n    # return re.search(r'z\\w+', text)\n    return re.search(r'z\\w*', text)\n",
        "num_ids": 55
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    words = re.findall('\\w+z\\w+', text)\n    print(words)\n    return words\n",
        "num_ids": 31
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(\"z\",text)\n",
        "num_ids": 13
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('[zZ]', text)\n    #return (re.search('[zZ]', text))\n",
        "num_ids": 32
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    a = r'[a-zA-Z]+[z]+[a-zA-Z]+'\n    return bool(re.search(a, text))\n",
        "num_ids": 41
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 2:\n        return 28\n    else:\n        return 30\n",
        "num_ids": 73
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 1:\n        return 'It contains 31 days!'\n    elif monthnum2 % 2 == 0:\n        return 'It contains 30 days!'\n",
        "num_ids": 43
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    #monthnum2 = int(input(\"Please enter a month number: \"))\n    if monthnum2 == 1:\n        print(\"January contains 31 days\")\n    elif monthnum2 == 2:\n        print(\"February contains 28 or 29 days\")\n    elif monthnum2 == 3:\n        print(\"March contains 31 days\")\n    elif monthnum2 == 4:\n        print(\"April contains 30 days\")\n    elif monthnum2 == 5:\n        print(\"May contains 31 days\")\n    elif monthnum2 == 6:\n        print(\"June contains 30 days\")\n    elif monthnum2 == 7:\n        print(\"July contains 31 days\")\n    elif monthnum2 == 8:\n        print(\"August contains 31 days\")\n    elif monthnum2 == 9:\n        print(\"September contains 30 days\")\n    elif monthnum2 == 10:\n        print(\"October contains 31 days\")\n    elif monthnum2 == 11:\n        print(\"November contains 30 days\")\n    elif monthnum2 == 12:\n        print(\"December contains 31 days\")\n    else:\n        print(\"Invalid month number\")\n    return\n",
        "num_ids": 265
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 2:\n        return 28\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return 'INVALID INPUT!'\n",
        "num_ids": 111
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return 'February contains 28 or 29 days'\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return 'The month contains 31 days'\n    elif monthnum2 in [4, 6, 9, 11]:\n        return 'The month contains 30 days'\n    else:\n        return 'Wrong month number'\n",
        "num_ids": 95
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    while True:\n        if monthnum2>12 or monthnum2<1:\n            monthnum2=int(input(\"Please enter a number between 1-12! : \"))\n        else:\n            break\n    return monthnum2\n",
        "num_ids": 57
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return None\n",
        "num_ids": 91
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2 in range(1,13)):\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"31 days in the month.\")\n    elif monthnum2 == 2:\n        print(\"28 days in the month.\")\n    else:\n        print(\"30 days in the month.\")\n",
        "num_ids": 91
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #reverse each string in the list\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n",
        "num_ids": 41
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for item in stringlist:\n        newlist.append(item[::-1])\n    return newlist\n",
        "num_ids": 34
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # step 1: initialize empty list\n    rev_stringlist = []\n    # step 2: iterate over list of strings\n    for word in stringlist:\n        # step 3: call reverse_string() on string in list\n        rev_stringlist.append(reverse_string(word))\n    # step 4: return reversed list\n    return rev_stringlist\n",
        "num_ids": 85
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for word in stringlist:\n        new_list.append(word[::-1])\n    return new_list\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Set the new list.\n    newlist = []\n    # Create a for-loop to loop through each string in the stringlist.\n    for string in stringlist:\n        # Append the string in the list, but reversed.\n        newlist.append(string[::-1])\n    # Return the newlist.\n    return newlist\n",
        "num_ids": 82
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n    \nprint(reverse_string_list([\"String1\",\"String2\",\"String3\"]))\n",
        "num_ids": 59
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]\n",
        "num_ids": 18
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for string in stringlist:\n        newlist.append(string[::-1])\n    return newlist\n",
        "num_ids": 34
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    # Copy the given list of string values to the reversedlist variable.\n    reversedlist = stringlist.copy()\n    \n    # Create a new variable to store the current index of the list.\n    index = 0\n    \n    # Loop through the given list and store each string in the new reversedlist variable.\n    for string in stringlist:\n        reversedlist[index] = stringlist[index][::-1]\n        index += 1\n    \n    # Return the newly created list.\n    return reversedlist\n",
        "num_ids": 124
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "num_ids": 37
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst = [] \n    lst_len = len(lst) \n    min_length = 1\n    for i in range(0, lst_len): \n        for j in range(i, lst_len): \n            if len(lst[i:j+1]) <= min_length and len(lst[i:j+1]) >= 1: \n                min_length = len(lst[i:j+1]) \n    for i in range(0, lst_len): \n        for j in range(i, lst_len): \n            if len(lst[i:j+1]) == min_length: \n                min_lst.append(lst[i:j+1]) \n    return min_lst \n",
        "num_ids": 190
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # print(lst)\n    sublist = []\n    for i in range(len(lst)): \n        for j in range(i, len(lst)): \n            sublist.append(lst[i:j+1])\n            # print(lst[i:j+1])\n    # print(sublist)\n    min_length = len(sublist[0])\n    for i in range(len(sublist)): \n        if len(sublist[i]) < min_length: \n            min_length = len(sublist[i])\n            min_list = sublist[i]\n    # print(min_list)\n    return min_list\n",
        "num_ids": 166
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_index = 0\n    for i in range(len(lst)):\n        if min_len > len(lst[i]):\n            min_len = len(lst[i])\n            min_index = i\n    return(min_index)\n",
        "num_ids": 78
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return min(lst, key = lambda x: len(x))\n",
        "num_ids": 19
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i])<min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist\n",
        "num_ids": 75
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst1=[]\n    for i in lst:\n        if len(i)==1:\n            lst1.append(i)\n    if len(lst1)>0:\n        return lst1[0]\n    lst2=[]\n    for i in lst:\n        if len(i)>1:\n            lst2.append(i)\n    if len(lst2)>0:\n        return lst2[0]\n    return -1\n",
        "num_ids": 119
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_len = len(lst)\n    min_len = len(lst[0])\n    sub = lst[0]\n    for i in range(1,lst_len):\n        if(len(lst[i])<min_len):\n            min_len = len(lst[i])\n            sub = lst[i]\n    return sub\n",
        "num_ids": 92
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_lst = i\n    return min_lst\n",
        "num_ids": 72
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0]) \n    for i in range(len(lst)): \n        if min_len > len(lst[i]): \n            min_len = len(lst[i]) \n            min_sub = i \n    return lst[min_sub] \n",
        "num_ids": 79
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    current_min = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < current_min:\n            current_min = len(lst[i])\n    return current_min\n",
        "num_ids": 64
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \ndef triangle_area(l,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*l*b\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14*r**2\n    \ndef right_triangle_area(b,h):\n    '''\n    Write a function to find the area of a right triangle.\n    '''\n    return 0.5*b*h\n    \ndef trapezoid_area(l1,l2,b):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return (l1+l2)*b/2\n    \ndef parallelogram_area(l1,l2,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return l1*l2*b\n    \ndef is_right_angled(l1,l2,l3):\n    '''\n    Write a function to determine if 3 given lengths can form a right triangle.\n    '''\n    return l1**2 + l2**2 == l3**2\n    \ndef area_of_parallelogram(l1,l2,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return l1*l2*b\n    \ndef area_of_right_triangle(b,h):\n    '''\n    Write a function to find the area of a right triangle.\n    '''\n    return 0.5*b*h\n    \ndef area_of_trapezoid(l1,l2,b1,b2):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return l1*l2*(b1+b2)/2\n    \ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14*r**2\n    \ndef circumference_of_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n    \ndef circumference_of_circle_from_diameter(r):\n    '''\n    Write a function to find the circumference of a circle from the diameter.\n    '''\n    return 2*3.14*r\n    \ndef circumference_of_circle_from_circumference(c):\n    '''\n    Write a function to find the diameter of a circle from the circumference.\n    '''\n    return c/2*3.14\n    \ndef area_of_ellipse(b,a):\n    '''\n    Write a function to find the area of an ellipse.\n    '''\n    return 3.14*a*b\n    \ndef circumference_of_ellipse(b,a):\n    '''\n    Write a function to find the circumference of an ellipse.\n    '''\n    return 2*3.14*a*b\n    \ndef circumference_of_ellipse_from_diameter(b,a):\n    '''\n    Write a function to find the circumference of an ellipse from the diameter.\n    '''\n    return 2*3.14*a*b\n    \ndef circumference_of_ellipse_from_circumference(c):\n    '''\n    Write a function to find the diameter of an ellipse from the circumference.\n    '''\n    return c/2*3.14\n    \ndef area_of_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*b*h\n    \ndef perimeter_of_parallelogram(l1,l2,b):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    return 2*(l1+l2)\n    \ndef perimeter_of_triangle(l1,l2,l3):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return l1+l2+l3\n    \ndef perimeter_of_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2*3.14*r\n    \ndef perimeter_of_rectangle(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(l+b)\n    \ndef perimeter_of_right_triangle(b,h):\n    '''\n    Write a function to find the perimeter of a right triangle.\n    '''\n    return 2*(b+h)\n    \ndef perimeter_of_trapezoid(l1,l2,b1,b2):\n    '''\n    Write a function to find the perimeter of a trapezoid.\n    '''\n    return 2*(l1+l2)+(b1+b2)\n    \ndef perimeter_of_circle_from_diameter(d):\n    '''\n    Write a function to find the perimeter of a circle from the diameter.\n    '''\n    return 2*3.14*d\n    \ndef perimeter_of_circle_from_circumference(c):\n    '''\n    Write a function to find the diameter of a circle from the circumference.\n    '''\n    return c/2*3.14\n    \ndef area_of_circle_from_diameter(d):\n    '''\n    Write a function to find the area of a circle from the diameter.\n    '''\n    return 3.14*d**2\n    \ndef area_of_circle_from_circumference(c):\n    '''\n    Write a function to find the area of a circle from the circumference.\n    '''\n    return 3.14*c**2\n    \ndef area_of_circle_from_perimeter(p):\n    '''\n    Write a function to find the area of a circle from the perimeter.\n    '''\n    return p*p/4*3.14\n    \ndef perimeter_of_circle_from_area(a):\n    '''\n    Write a function to find the perimeter of a circle from the area.\n    '''\n    return 2*3.14*(a**0.5)\n    \ndef diameter_of_circle_from_perimeter(p):\n    '''\n    Write a function to find the diameter of a circle from the perimeter.\n    '''\n    return p/2*3.14\n    \ndef diameter_of_circle_from_area(a):\n    '''\n    Write a function to find the diameter of a circle from the area.\n    '''\n    return 2*(a**0.5)/3.14\n    \ndef diameter_of_circle_from_circumference(c):\n    '''\n    Write a function to find the diameter of a circle from the circumference.\n    '''\n    return c*2/3.14\n    \ndef area_of_triangle_from_perimeter(p):\n    '''\n    Write a function to find the area of a triangle from the perimeter.\n    '''\n    return p/2*(p/2 - 1)\n    \ndef area_of_triangle_from_area(a):\n    '''\n    Write a function to find the area of a triangle from the area.\n    '''\n    return a*(2**0.5)/2\n    \ndef perimeter_of_triangle_from_area(a):\n    '''\n    Write a function to find the perimeter of a triangle from the area.\n    '''\n    return 3*a**0.5\n    \ndef circumference_of_triangle_from_circumference(c):\n    '''\n    Write a function to find the circumference of a triangle from the circumference.\n    '''\n    return c*2/3\n    \ndef circumference_of_triangle_from_perimeter(p):\n    '''\n    Write a function to find the circumference of a triangle from the perimeter.\n    '''\n    return p*3**0.5/2\n    \ndef area_of_right_triangle_from_perimeter(p):\n    '''\n    Write a function to find the area of a right triangle from the perimeter.\n    '''\n    return ",
        "num_ids": 5
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \ndef triangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area=l*b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(l*b)\n",
        "num_ids": 10
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]','',str1)\n",
        "num_ids": 19
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join(filter(lambda x: not x.isupper(), str1))\n    \ndef remove_special(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return re.sub('[^a-zA-Z]', '', str1)\n",
        "num_ids": 24
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r\"[A-Z]\", \"\", str1)\n    return str1\n",
        "num_ids": 28
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = \"abcdcdeefgh\"\n    str2 = \"abcdeefg\"\n    str3 = \"abcdeefgh\"\n    str4 = \"ABCDEFGH\"\n    str5 = \"abcdeefg\"\n    str6 = \"AAABCD\"\n    str7 = \"ABCDAAABCD\"\n    str8 = \"ABCDAAABCD\"\n    str9 = \"ABCDAAABCD\"\n    str10 = \"ABCDAAABCD\"\n    str11 = \"ABCDAAABCD\"\n    str12 = \"ABCDAAABCD\"\n    str13 = \"ABCDAAABCD\"\n    str14 = \"ABCDAAABCD\"\n    str15 = \"ABCDAAABCD\"\n    str16 = \"ABCDAAABCD\"\n    str17 = \"ABCDAAABCD\"\n    str18 = \"ABCDAAABCD\"\n    str19 = \"ABCDAAABCD\"\n    str20 = \"ABCDAAABCD\"\n    str21 = \"ABCDAAABCD\"\n    str22 = \"ABCDAAABCD\"\n    str23 = \"ABCDAAABCD\"\n    str24 = \"ABCDAAABCD\"\n    str25 = \"ABCDAAABCD\"\n    str26 = \"ABCDAAABCD\"\n    str27 = \"ABCDAAABCD\"\n    str28 = \"ABCDAAABCD\"\n    str29 = \"ABCDAAABCD\"\n    str30 = \"ABCDAAABCD\"\n    str31 = \"ABCDAAABCD\"\n    str32 = \"ABCDAAABCD\"\n    str33 = \"ABCDAAABCD\"\n    str34 = \"ABCDAAABCD\"\n    str35 = \"ABCDAAABCD\"\n    str36 = \"ABCDAAABCD\"\n    str37 = \"ABCDAAABCD\"\n    str38 = \"ABCDAAABCD\"\n    str39 = \"ABCDAAABCD\"\n    str40 = \"ABCDAAABCD\"\n    str41 = \"ABCDAAABCD\"\n    str42 = \"ABCDAAABCD\"\n    str43 = \"ABCDAAABCD\"\n    str44 = \"ABCDAAABCD\"\n    str45 = \"ABCDAAABCD\"\n    str46 = \"ABCDAAABCD\"\n    str47 = \"ABCDAAABCD\"\n    str48 = \"ABCDAAABCD\"\n    str49 = \"ABCDAAABCD\"\n    str50 = \"ABCDAAABCD\"\n    str51 = \"ABCDAAABCD\"\n    str52 = \"ABCDAAABCD\"\n    str53 = \"ABCDAAABCD\"\n    str54 = \"ABCDAAABCD\"\n    str55 = \"ABCDAAABCD\"\n    str56 = \"ABCDAAABCD\"\n    str57 = \"ABCDAAABCD\"\n    str58 = \"ABCDAAABCD\"\n    str59 = \"ABCDAAABCD\"\n    str60 = \"ABCDAAABCD\"\n    str61 = \"ABCDAAABCD\"\n    str62 = \"ABCDAAABCD\"\n    str63 = \"ABCDAAABCD\"\n    str64 = \"ABCDAAABCD\"\n    str65 = \"ABCDAAABCD\"\n    str66 = \"ABCDAAABCD\"\n    str67 = \"ABCDAAABCD\"\n    str68 = \"ABCDAAABCD\"\n    str69 = \"ABCDAAABCD\"\n    str70 = \"ABCDAAABCD\"\n    str71 = \"ABCDAAABCD\"\n    str72 = \"ABCDAAABCD\"\n    str73 = \"ABCDAAABCD\"\n    str74 = \"ABCDAAABCD\"\n    str75 = \"ABCDAAABCD\"\n    str76 = \"ABCDAAABCD\"\n    str77 = \"ABCDAAABCD\"\n    str78 = \"ABCDAAABCD\"\n    str79 = \"ABCDAAABCD\"\n    str80 = \"ABCDAAABCD\"\n    str81 = \"ABCDAAABCD\"\n    str82 = \"ABCDAAABCD\"\n    str83 = \"ABCDAAABCD\"\n    str84 = \"ABCDAAABCD\"\n    str85 = \"ABCDAAABCD\"\n    str86 = \"ABCDAAABCD\"\n    str87 = \"ABCDAAABCD\"\n    str88 = \"ABCDAAABCD\"\n    str89 = \"ABCDAAABCD\"\n    str90 = \"ABCDAAABCD\"\n    str91 = \"ABCDAAABCD\"\n    str92 = \"ABCDAAABCD\"\n    str93 = \"ABCDAAABCD\"\n    str94 = \"ABCDAAABCD\"\n    str95 = \"ABCDAAABCD\"\n    str96 = \"ABCDAAABCD\"\n    str97 = \"ABCDAAABCD\"\n    str98 = \"ABCDAAABCD\"\n    str99 = \"ABCDAAABCD\"\n    str100 = \"ABCDAAABCD\"\n    str101 = \"ABCDAAABCD\"\n    str102 = \"ABCDAAABCD\"\n    str103 = \"ABCDAAABCD\"\n    str104 = \"ABCDAAABCD\"\n    str105 = \"ABCDAAABCD\"\n    str106 = \"ABCDAAABCD\"\n    str107 = \"ABCDAAABCD\"\n    str108 = \"ABCDAAABCD\"\n    str109 = \"ABCDAAABCD\"\n    str110 = \"ABCDAAABCD\"\n    str111 = \"ABCDAAABCD\"\n    str112 = \"ABCDAAABCD\"\n    str113 = \"ABCDAAABCD\"\n    str114 = \"ABCDAAABCD\"\n    str115 = \"ABCDAAABCD\"\n    str116 = \"ABCDAAABCD\"\n    str117 = \"ABCDAAABCD\"\n    str118 = \"ABCDAAABCD\"\n    str119 = \"ABCDAAABCD\"\n    str120 = \"ABCDAAABCD\"\n    str121 = \"ABCDAAABCD\"\n    str122 = \"ABCDAAABCD\"\n    str123 = \"ABCDAAABCD\"\n    str124 = \"ABCDAAABCD\"\n    str125 = \"ABCDAAABCD\"\n    str126 = \"ABCDAAABCD\"\n    str127 = \"ABCDAAABCD\"\n    str128 = \"ABCDAAABCD\"\n    str129 = \"ABCDAAABCD\"\n    str130 = \"ABCDAAABCD\"\n    str131 = \"ABCDAAABCD\"\n    str132 = \"ABCDAAABCD\"\n    str133 = \"ABCDAAABCD\"\n    str134 = \"ABCDAAABCD\"\n    str135 = \"ABCDAAABCD\"\n    str136 = \"ABCDAAABCD\"\n    str137 = \"ABCDAAABCD\"\n    str138 = \"ABCDAAABCD\"\n    str139 = \"ABCDAAABCD\"\n    str140 = \"ABCDAAABCD\"\n    str141 = \"ABCDAAABCD\"\n    str142 = \"ABCDAAABCD\"\n    str143 = \"ABCDAAABCD\"\n    str144 = \"ABCDAAABCD\"\n    str145 = \"ABCDAAABCD\"\n    str146 = \"ABCDAAABCD\"\n    str147 = \"ABCDAAABCD\"\n    str148 = \"ABCDAAABCD\"\n    str149 = \"ABCDAAABCD\"\n    str150 = \"ABCDAAABCD\"\n    str151 = \"ABCDAAABCD\"\n    str152 = \"ABCDAAABCD\"\n    str153 = \"ABCDAAABCD\"\n    str154 = \"ABCDAAABCD\"\n    str155 = \"ABCDAAABCD\"\n    str156 = \"ABCDAAABCD\"\n    str157 = \"ABCDAAABCD\"\n    str158 = \"ABCDAAABCD\"\n    str159 = \"ABCDAAABCD\"\n    str160 = \"ABCDAAABCD\"\n    str161 = \"ABCDAAABCD\"\n    str162 = \"ABCDAAABCD\"\n    str163 = \"ABCDAAABCD\"\n    str164 = \"ABCDAAABCD\"\n    str165 = \"ABCDAAABCD\"\n    str166 = \"ABCDAAABCD\"\n    str167 = \"ABCDAAABCD\"\n    str168 = \"ABCDAAABCD",
        "num_ids": 2010
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    import re\n    pattern = '[A-Z]*'\n    str1 = str1.lower()\n    match = re.findall(pattern,str1)\n    return match\n    \n    \n",
        "num_ids": 49
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #return str1.lower().capitalize()\n    # return str1.replace(str1, str1.lower())\n    # return ''.join(str1.split(str1.lower()))\n    return str1.lower()\n",
        "num_ids": 58
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i].islower():\n            str2 += str1[i]\n    return str2\n",
        "num_ids": 47
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join(e for e in str1 if e.isupper() == False)\n",
        "num_ids": 24
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = []\n    for s in str1:\n        if s.islower():\n            res.append(s)\n    res = ''.join(res)\n    return res\n",
        "num_ids": 45
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # return re.sub(r'[A-Z]', \"\", str1)\n    return re.sub('(?i)[A-Z]+', \"\", str1)\n",
        "num_ids": 44
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return list(map(lambda x: x[0], lst)) \n",
        "num_ids": 20
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]",
        "num_ids": 15
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst] \n",
        "num_ids": 17
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sub[0] for sub in lst] \n",
        "num_ids": 17
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([l for l in str if l.isupper()])\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(c.isupper() for c in str)\n",
        "num_ids": 17
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    num_upper = sum(1 for i in str if i.isupper())\n    return num_upper\n",
        "num_ids": 27
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for ch in str:\n        if ch.isupper():\n            ctr += 1\n    return ctr\n",
        "num_ids": 32
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n",
        "num_ids": 18
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum([1 for i in str if i.isupper()])\nprint(upper_ctr('cAsEC'))\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([c for c in str if c.isupper()])\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for letter in str:\n        if letter.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    combinations = _list_combinations(list1, [], combinations)\n    return combinations\n",
        "num_ids": 30
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==0:\n        return []\n    elif len(list1)==1:\n        return [list1]\n    elif len(list1)==2:\n        return [list1,[list1[-1]+list1[0]]]\n    else:\n        return [list1+[list1[-1]+list1[0]]]+combinations_list(list1[1:-1])\n",
        "num_ids": 103
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            combinations.append([list1[i],list1[j]])\n    return combinations\n",
        "num_ids": 60
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    temp = []\n    if len(list1) == 1:\n        return [[x] for x in list1]\n    if len(list1) == 2:\n        return [[x,y] for x in list1 for y in list1 if x!= y]\n    else:\n        for i in range(len(list1)):\n            x = list1[i]\n            temp += combinations_list([x] + list1[i+1:])\n    return temp\n",
        "num_ids": 114
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb = []\n    list1 = list1[:]\n    if len(list1) == 0:\n        return comb\n    if len(list1) == 1:\n        return [list1]\n    for i in range(len(list1)):\n        temp = list1[:i] + list1[i+1:]\n        for j in combinations_list(temp):\n            comb.append([list1[i]] + j)\n    return comb\n",
        "num_ids": 109
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combos = []\n    n = len(list1)\n    for i in range(1, n):\n        combos += list(combinations(list1, i))\n    return combos\n",
        "num_ids": 47
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # find all possible combinations for list\n    lst = []\n    for i in range(0, len(list1)+1):\n        lst.append(list(itertools.combinations(list1, i)))\n    # print(\"List of combinations:\", lst)\n    return lst\n",
        "num_ids": 72
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1[0]]\n    else:\n        return comb(list1[0], combinations_list(list1[1:]))\n",
        "num_ids": 46
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        #recursive\n        list2 = []\n        list3 = []\n        for i in range(len(list1)):\n            list2.append(list1[i])\n            list3.append(list1[i])\n            if i!= len(list1) - 1:\n                list2.append(list1[0:i] + list1[i+1:])\n                list3.append(list1[0:i] + list1[i+1:])\n        return combinations_list(list2) + combinations_list(list3)\n",
        "num_ids": 172
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    else:\n        comb = combinations_list(list1[1:])\n        return comb + [list1[0] + comb_el for comb_el in combinations_list(list1[1:])]\n",
        "num_ids": 69
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    arr_size = len(arr)\n    left = [None] * arr_size\n    right = [None] * arr_size\n    left[0] = arr[0]\n    right[-1] = arr[-1]\n",
        "num_ids": 58
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = 1\n    max_ending_here = 1\n    start = 0\n    end = 0\n    start_index = 0\n    end_index = 0\n    n = len(arr)\n    for i in range(n):\n        max_ending_here = max_ending_here * arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = start_index\n            end = i\n        if max_ending_here < 1:\n            max_ending_here = 1\n            start_index = i+1\n    return max_so_far\n",
        "num_ids": 156
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = 1\n    max_ending_here = 1\n    start = 0\n    end = 0\n",
        "num_ids": 30
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_sum = -float('inf')\n    min_sum = float('inf')\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        if product > max_sum:\n            max_sum = product\n        if product < min_sum:\n            min_sum = product\n",
        "num_ids": 81
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    return max_subarray(arr, 0, len(arr))\n",
        "num_ids": 18
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) <= 0:\n        raise Exception('Array length must be greater than 0')\n",
        "num_ids": 25
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = arr[0]\n    curr_prod = arr[0]\n",
        "num_ids": 25
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_global = arr[0]\n    max_so_far_end = 0\n    max_so_far_start = 0\n    curr_max_product = arr[0]\n",
        "num_ids": 71
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    product = 1\n    result = [product] * len(arr)\n    for i in range(len(arr)):\n        result[i] = product\n        product *= arr[i]\n",
        "num_ids": 48
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for x in dict:\n        if dict[x]!= dict[n]:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(i == dict[0] for i in dict.values()) if len(dict)!= 0 else False\n",
        "num_ids": 29
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return n == dict.values()[0]\n",
        "num_ids": 34
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    flag = True\n    for key in dict.keys():\n        if dict[key] == dict[n]:\n            flag = True\n        else:\n            flag = False\n    return flag\n",
        "num_ids": 46
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # if all values are same\n    if len(set(dict.values())) == 1:\n        return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for k,v in dict.items():\n        values.append(v)\n    return values[0] == v\n",
        "num_ids": 35
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    check = set(dict.values())\n    if len(check) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    elif n == 1:\n        return False\n    else:\n        return check_value(dict, n-1)\n",
        "num_ids": 47
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        dict1 = dict.values()\n        for i in dict1:\n            if dict1[0] == i:\n                continue\n            else:\n                return False\n        return True\n    else:\n        dict1 = dict.values()\n        for i in range(len(dict1)):\n            for j in range(i+1, len(dict1)):\n                if dict1[i] == dict1[j]:\n                    continue\n                else:\n                    return False\n        return True\n",
        "num_ids": 136
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    return False\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not dict1:\n        return None\n    for key in list(dict1):\n        if not dict1[key]:\n            dict1.pop(key)\n    return dict1\n",
        "num_ids": 46
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = dict1\n    for key, value in dict2.items():\n        if value == []:\n            del dict2[key]\n    return dict2\n",
        "num_ids": 41
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value!= ''}\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!=''}\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value}\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {i:dict1[i] for i in dict1 if dict1[i]!=''}\n",
        "num_ids": 28
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: val for key, val in dict1.items() if val!= ''}\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    temp = {}\n    for key, value in dict1.items():\n        if value:\n            temp[key] = value\n",
        "num_ids": 32
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #  We can find the length of the subsequence using DP.\n    #  Let dp[i] be the product of the longest increasing subsequnce ending at i.\n    #  At any point, if the number at index i is the maximum element in its subsequnce, \n    #  then dp[i] = product of everything before i\n    #  Else, dp[i] = the max of dp[i-1] * nums[i] and dp[i-1]\n    \n    dp = [1] * len(arr)\n    max_product = 1\n    \n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j]*arr[i])\n        max_product = max(max_product, dp[i])\n        \n    return max_product\n        \n        \nif __name__ == '__main__':\n    #  arr = [5,4,3,2,1]\n    #  arr = [2,3,10,6,4,8,7]\n    arr = [10, 4, 5, 90, 18, 75, 36, 48, 27]\n    print(max_product(arr))\n",
        "num_ids": 311
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n    \n    \nprint(max_product([10, 3, 5, 6, 20])",
        "num_ids": 134
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Traverse the array for the length of the array\n    for i in range(n):\n        # Initialize minimum and maximum element\n        minimum = arr[i]\n        maximum = arr[i]\n        # Find the minimum and maximum element in the remaining array\n        for j in range(i+1, n):\n            if arr[j] < minimum:\n                minimum = arr[j]\n            if arr[j] > maximum:\n                maximum = arr[j]\n        # Update the minimum and maximum element\n        if maximum * minimum > result:\n            result = maximum * minimum\n",
        "num_ids": 144
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    max_val = max(arr)\n    prod = 1\n    \n    i = 0\n    while prod*max_val < max_val:\n        prod *= arr[i]\n        i += 1\n        \n    return prod\n",
        "num_ids": 85
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if max_prod < np.prod(arr[i:j+1]):\n                max_prod = np.prod(arr[i:j+1])\n",
        "num_ids": 78
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    print(arr)\n    i = 1\n    while i < len(arr):\n        print('i',i,'\\t',arr[i])\n        if arr[i] < arr[i-1]:\n            break\n        i += 1\n    if i == len(arr):\n        return arr[0]\n    print(i)\n    j = len(arr)-1\n    while j > i-1:\n        print('j',j,'\\t',arr[j])\n        if arr[j] < arr[j+1]:\n            break\n        j -= 1\n    print(j)\n    m = max(arr[i:j+1])\n    if arr[j]*arr[j+1] > m:\n        m = arr[j]*arr[j+1]\n    return m\n",
        "num_ids": 192
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    prod = 1\n    max_prod = 1\n    \n    for i in range(len(arr)):\n        \n        prod = arr[i]\n        \n        for j in range(i+1,len(arr)):\n            \n            prod = prod*arr[j]\n            \n            if prod > max_prod:\n                \n                max_prod = prod\n                \n    return max_prod\n",
        "num_ids": 105
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    global_max = arr[0]\n    max_ending_here = arr[0]\n    for num in arr[1:]:\n        max_ending_here = max(num, max_ending_here * num)\n        global_max = max(global_max, max_ending_here)\n    return global_max\n    \ndef longest_increasing_subsequence(arr):\n    '''\n    Write a function that takes in an array and returns an array of the size of the longest increasing subsequence.\n    The values of this array should be 1 for an increasing subsequence of size 1, 2 for an increasing subsequence of size 2, and so on.\n    There should only be one longest increasing subsequence.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    for i in range(len(arr)):\n        temp = 1\n        for j in range(i+1, len(arr)):\n            temp *= arr[j]\n            if temp > max_product:\n                max_product = temp\n    return max_product\n",
        "num_ids": 73
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(map(operator.add, test_tup[:-1], test_tup[1:]))\n    \nprint(add_pairwise((1, 2, 3)))",
        "num_ids": 44
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_tuple = ()\n    for i in range(0,len(test_tup)):\n        if i < len(test_tup)-1:\n            new_tuple += (test_tup[i]+test_tup[i+1],)\n        else:\n            new_tuple += (test_tup[i]+test_tup[0],)\n    return new_tuple\n",
        "num_ids": 100
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x, y = test_tup\n    return x+y, y+x\n",
        "num_ids": 22
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return [test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)]\n    \nprint(add_pairwise((4, 4, 7, 8)))\n",
        "num_ids": 56
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1]\n",
        "num_ids": 20
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = 0\n    for i in range(0, len(test_tup)-1):\n        res += test_tup[i] + test_tup[i+1]\n    return res\n",
        "num_ids": 50
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    list1 = test_tup\n    list2 = test_tup\n    list3 = []\n    if len(list1) < 2:\n        return False\n    else:\n        for i in range(len(list1) - 1):\n            list3.append(list1[i] + list1[i+1])\n        return list3\n",
        "num_ids": 85
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_tup = ()\n    for i in range(0,len(test_tup)):\n        if i == 0:\n            sum_tup = sum_tup + (test_tup[i] + test_tup[i+1],)\n        elif i == len(test_tup)-1:\n            sum_tup = sum_tup + (test_tup[i] + test_tup[i-1],)\n        else:\n            sum_tup = sum_tup + (test_tup[i] + test_tup[i+1],test_tup[i] + test_tup[i-1],)\n    print(sum_tup)\n",
        "num_ids": 172
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    s = 0\n    for i in range(len(test_tup)-1):\n        s += test_tup[i]\n    return s\n",
        "num_ids": 38
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #first, we have to unpack the tuple. \n    #the comma in the tuple is needed because its a single element. \n    (a, b) = test_tup\n    #we can use a + b, because we have added the tuple\n    add_tup = (a, b, a+b)\n    return add_tup\n",
        "num_ids": 84
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(0, n):\n        product = product * arr[i]\n    return product\n",
        "num_ids": 32
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(0, n): \n        prod = prod * arr[i] \n    return prod \n",
        "num_ids": 37
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) == 1: \n        return arr[0] % n \n    remainder = find_remainder(arr[:len(arr)//2], n) * find_remainder(arr[len(arr)//2:], n) \n    return remainder % n \n",
        "num_ids": 74
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(len(arr)): \n        prod = prod * arr[i]\n    return prod % n \n",
        "num_ids": 39
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = 1\n    for i in range(n): \n        remainder = (remainder * arr[i]) % n\n    return remainder \n",
        "num_ids": 41
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(0,n):\n        result = (result * arr[i]) % n\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n",
        "num_ids": 29
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for x in arr:\n        result = (result * x) % n\n    return result\n    \ndef find_mult_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    The function will be called find_mult_remainder(arr, n)\n    '''\n    result = 1\n    for x in arr:\n        result = (result * x) % n\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod % n\n",
        "num_ids": 28
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n): \n        product = (product * arr[i]) % n \n    return product \n    \nif __name__ == '__main__': \n    arr = [ 2, 3, 9, 7, 6, 8, 5] \n    n = 10\n    print(find_remainder(arr, n)) ",
        "num_ids": 89
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1): \n        if l[i]!= (l[i+1] - 1): \n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return all(l[i] == l[i-1]+1 for i in range(1, len(l))) \n",
        "num_ids": 31
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l)==list(range(min(l),max(l)+1))\n",
        "num_ids": 24
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    max_num = max(l) \n    min_num = min(l) \n    range_num = max_num - min_num \n    if range_num == len(l) - 1: \n        print(\"yes\") \n    else: \n        print(\"no\") \n",
        "num_ids": 72
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return ((l==sorted(l)) and any(l[i+1]-l[i]==1 for i in range(len(l)-1)))\n",
        "num_ids": 39
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return any(l[i]-l[i-1]==1 for i in range(1,len(l)))\n",
        "num_ids": 30
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    try:\n        if len(l)<=1:\n            return(False)\n        else:\n            l.sort()\n            for i in range(len(l)-1):\n                if l[i+1]-l[i]!= 1:\n                    return(False)\n            return(True)\n    except:\n        return(False)\n",
        "num_ids": 85
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = sorted(l)\n    for i in range(0, len(l)-1):\n        if(l[i+1]-l[i]==1):\n            continue\n        else:\n            return False\n    return True\n  \ndef check_Consecutive_2(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = sorted(l)\n    for i in range(0, len(l)-1):\n        if(l[i+1]-l[i]==1):\n            continue\n        else:\n            return False\n    return True\n  \ndef check_Consecutive_3(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = sorted(l)\n    i = 0\n    while(i<len(l)-1):\n        if(l[i+1]-l[i]==1):\n            i = i+1\n        else:\n            return False\n    return True\n  \nl = [1, 2, 3, 4, 5] \n  \nprint(check_Consecutive(l))\nprint(check_Consecutive_2(l))\nprint(check_Consecutive_3(l))",
        "num_ids": 118
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            continue\n        else: \n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    # Return the intersection of the 2 tuples\n    return tuple(set(test_list1).intersection(test_list2))\n",
        "num_ids": 35
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n",
        "num_ids": 24
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    # test_list1 = ['Python', 'C', 'C++']\n    # test_list2 = ['C++', 'C', 'Java']\n    \n    return [tuple_ele for tuple_ele in test_list1 if tuple_ele in test_list2]\n",
        "num_ids": 69
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # initialize the intersection list\n    intersection_list = []\n    # get the common elements\n    intersection_list = list(set(test_list1) & set(test_list2))\n    return intersection_list\n",
        "num_ids": 54
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection_list.append(i)\n    return intersection_list\n",
        "num_ids": 47
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return intersection\n",
        "num_ids": 44
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #return set(test_list1) & set(test_list2)\n    #if set(test_list1) == set(test_list2):\n        #return set(test_list1)\n    #else:\n        #return None\n    return list(set(test_list1) & set(test_list2))\n",
        "num_ids": 81
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # we have to sort the list of tuples\n    # set of tuples will be like : {('A',1), ('A',1), ('B',1), ('A',2)}\n    # we have to remove all duplicate tuples in the list\n    # we need to find all the tuples with common elements\n    # we need to set intersection of these tuples\n    \n    # here the test_list1 = [(1,2,3),(1,2,3),(1,2,4),(1,2,5)] and test_list2 = [(2,4,5),(1,2,3),(3,4,5)]\n    \n    # we need to sort the list\n    # then from the first list we should remove all duplicate tuples \n    # and from the second list we should also remove all duplicate tuples\n    # now we will have list of unique tuples\n    # example : [(1,2,3),(1,2,4)] and [(2,4,5),(1,2,3),(3,4,5)]\n    # now we will have a single list of tuples\n    # we will find the intersection of each of these tuples\n    # example : [(1,2,3),(1,2,4),(2,4,5)]\n    \n    # sort the list1\n    # list2 = [(1,2,3),(1,2,4),(1,2,5),(2,4,5)]\n    # print(sorted(list1))\n    # print(list1)\n    \n    # sorted_list1 = sorted(list1)\n    # print(sorted_list1)\n    \n    # print(sorted_list1[0][0])\n    # print(list1[0][0])\n    \n    # x = set(list1)\n    # x.intersection(list2)\n    # x = set(list2)\n    \n    # x.intersection(list1)\n    # x = set(list2)\n    \n    # print(x)\n    # print(list(x))\n    \n    # print(set(list1))\n    # print(set(list2))\n    \n    # new_list = []\n    \n    # for item in list1:\n    #     if item in list2:\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).issubset(set(list2)):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # set(list1)\n    # set(list2)\n    \n    # print(list(set(list1).intersection(set(list2))))\n    \n    # new_list = list(set(list1).intersection(set(list2)))\n    # print(new_list)\n    \n    # new_list = []\n    \n    # for item in list1:\n    #     if item in list2:\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    \n    # for item in list1:\n    #     if item in list2:\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).issubset(set(list2)):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    \n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    \n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print(new_list)\n    \n    # new_list = []\n    # for item in list1:\n    #     if set(item).intersection(set(list2)) == set(item):\n    #         new_list.append(item)\n    \n    # print",
        "num_ids": 1958
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1.intersection(set2)\n",
        "num_ids": 38
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #method 1\n    # t1 = test_list1\n    # t2 = test_list2\n    # t1_set = set(t1)\n    # t2_set = set(t2)\n    # intersection = t1_set.intersection(t2_set)\n    # return list(intersection)\n",
        "num_ids": 80
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #str1=input('Enter the String:')\n    #ch=input('Enter the character to be replaced:')\n    #newch=input('Enter the new character:')\n    str1=str1.replace(ch,newch)\n    print(str1)\n",
        "num_ids": 66
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if ch in str1:\n        str1=str1.replace(ch,newch)\n    return str1\n",
        "num_ids": 30
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1[i] = newch\n    return ''.join(str1)\n",
        "num_ids": 56
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str(str1)\n    return str1.replace(ch,newch)\n",
        "num_ids": 25
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr=''\n    for i in range(0,len(str1)):\n        if str1[i]==ch:\n            newstr=newstr+newch\n        else:\n            newstr=newstr+str1[i]\n    return newstr\n",
        "num_ids": 66
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for chr in str1:\n        if chr == ch:\n            str2 += newch\n        else:\n            str2 += chr\n    return str2\n",
        "num_ids": 48
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2\n",
        "num_ids": 58
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return [i[0] for i in sorted([(i, j) for i,j in dict1.items()], key=lambda x: x[1], reverse=True)]\n",
        "num_ids": 44
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda x: x[1])}\ndef longest_palindrome(s):\n    '''\n    Write a function to find the longest palindromic substring.\n    '''\n    if s == None or s == '':\n        return ''\n    longest_palindrome = ''\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == s[i:j][::-1]:\n                if len(longest_palindrome) < j-i:\n                    longest_palindrome = s[i:j]\n    return longest_palindrome\ndef longest_palindromic_subsequence(s):\n    '''\n    Write a function to find the longest palindromic subsequence in a string.\n    '''\n    if s == None or s == '':\n        return ''\n    longest_palindrome = ''\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == s[i:j][::-1]:\n                if len(longest_palindrome) < j-i:\n                    longest_palindrome = s[i:j]\n    return longest_palindrome\ndef longest_palindromic_substring(s):\n    '''\n    Write a function to find the longest palindromic substring in a given string.\n    You can assume that the input string is a plain English word.\n    '''\n    if s == None or s == '':\n        return ''\n    longest_palindrome = ''\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == s[i:j][::-1]:\n                if len(longest_palindrome) < j-i:\n                    longest_palindrome = s[i:j]\n    return longest_palindrome\ndef longest_palindromic_substring_v2(s):\n    '''\n    Write a function to find the longest palindromic substring in a given string.\n    You can assume that the input string is a plain English word.\n    '''\n    if s == None or s == '':\n        return ''\n    longest_palindrome = ''\n    for i in range(len(s)):\n        current_palindrome = ''\n        for j in range(i, len(s)):\n            current_palindrome = current_palindrome + s[j]\n            if current_palindrome == current_palindrome[::-1]:\n                if len(longest_palindrome) < len(current_palindrome):\n                    longest_palindrome = current_palindrome\n    return longest_palindrome\ndef longest_palindromic_substring_v3(s):\n    '''\n    Write a function to find the longest palindromic substring in a given string.\n    You can assume that the input string is a plain English word.\n    '''\n    if s == None or s == '':\n        return ''\n    longest_palindrome = ''\n    current_palindrome = ''\n    for i in range(len(s)):\n        current_palindrome = current_palindrome + s[i]\n        if current_palindrome == current_palindrome[::-1]:\n            if len(longest_palindrome) < len(current_palindrome):\n                longest_palindrome = current_palindrome\n        j = 1\n        while i-j >= 0 and i+j < len(s):\n            current_palindrome = current_palindrome + s[i-j] + s[i+j]\n            if current_palindrome == current_palindrome[::-1]:\n                if len(longest_palindrome) < len(current_palindrome):\n                    longest_palindrome = current_palindrome\n            j += 1\n    return longest_palindrome\ndef longest_palindromic_substring_v4(s):\n    '''\n    Write a function to find the longest palindromic substring in a given string.\n    You can assume that the input string is a plain English word.\n    '''\n    if s == None or s == '':\n        return ''\n    longest_palindrome = ''\n    current_palindrome = ''\n    for i in range(len(s)):\n        current_palindrome = current_palindrome + s[i]\n        if current_palindrome == current_palindrome[::-1]:\n            if len(longest_palindrome) < len(current_palindrome):\n                longest_palindrome = current_palindrome\n        j = 1\n        while i-j >= 0 and i+j < len(s) and j <= (len(s)-1)/2:\n            current_palindrome = current_palindrome + s[i-j] + s[i+j]\n            if current_palindrome == current_palindrome[::-1]:\n                if len(longest_palindrome) < len(current_palindrome):\n                    longest_palindrome = current_palindrome\n            j += 1\n    return longest_palindrome\ndef longest_palindromic_substring_v5(s):\n    '''\n    Write a function to find the longest palindromic substring in a given string.\n    You can assume that the input string is a plain English word.\n    '''\n    if s == None or s == '':\n        return ''\n    longest_palindrome = ''\n    current_palindrome = ''\n    for i in range(len(s)):\n        current_palindrome = current_palindrome + s[i]\n        if current_palindrome == current_palindrome[::-1]:\n            if len(longest_palindrome) < len(current_palindrome):\n                longest_palindrome = current_palindrome\n        j = 1\n        while i-j >= 0 and i+j < len(s) and j <= (len(s)-1)/2:\n            current_palindrome = current_palindrome + s[i-j] + s[i+j]\n            if current_palindrome == current_palindrome[::-1]:\n                if len(longest_palindrome) < len(current_palindrome):\n                    longest_palindrome = current_palindrome\n            j += 1\n    return longest_palindrome\ndef longest_palindromic_substring_v6(s):\n    '''\n    Write a function to find the longest palindromic substring in a given string.\n    You can assume that the input string is a plain English word.\n    '''\n    if s == None or s == '':\n        return ''\n    longest_palindrome = ''\n    current_palindrome = ''\n    for i in range(len(s)):\n        current_palindrome = current_palindrome + s[i]\n        if current_palindrome == current_palindrome[::-1]:\n            if len(longest_palindrome) < len(current_palindrome):\n                longest_palindrome = current_palindrome\n        j = 1\n        while i-j >= 0 and i+j < len(s) and j <= (len(s)-1)/2:\n            current_palindrome = current_palindrome + s[i-j] + s[i+j]\n            if current_palindrome == current_palindrome[::-1]:\n                if len(longest_palindrome) < len(current_palindrome):\n                    longest_palindrome = current_palindrome\n            j += 1\n    return longest_palindrome\ndef longest_palindromic_substring_v7(s):\n    '''\n    Write a function to find the longest palindromic substring in a given string.\n    You can assume that the input string is a plain English word.\n    '''\n    if s == None or s == '':\n        return ''\n    longest_palindrome = ''\n    current_palindrome = ''\n    for i in rang",
        "num_ids": 41
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return dict1\ndef sort_counter_2(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1], reverse=True)}\ndef sort_counter_3(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return list(dict1.values())\n",
        "num_ids": 40
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda kv: kv[1], reverse=True)\n",
        "num_ids": 27
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return Counter(dict1).most_common()\n",
        "num_ids": 14
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {}\n    for key in sorted(dict1, key=dict1.get, reverse=True):\n        sorted_dict[key] = dict1[key]\n    return sorted_dict\n",
        "num_ids": 52
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = sorted(sorted_dict.items(), key=lambda x: x[1])\n    return sorted_dict\n",
        "num_ids": 45
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = 0\n    smallest = 0\n    for i in nums:\n        if largest < i:\n            largest = i\n        if smallest == 0:\n            smallest = i\n        if smallest > i:\n            smallest = i\n    print(\"The largest number in the list is:\", largest)\n    print(\"The smallest number in the list is:\", smallest)\n    print(\"The sum of the largest and smallest number is:\", largest + smallest)\n",
        "num_ids": 108
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n    # or return sum(sorted(nums)[-2:])\n",
        "num_ids": 34
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return(sum(sorted(nums)[:2]))\n    \ndef find_outlier(integers):\n    '''\n    Write a python function to find the outlier in the given list.\n    '''\n    integers.sort()\n    return(integers[0] if integers[0]!= integers[1] else integers[-1])\n    \ndef geometric_sequence(nums):\n    '''\n    Write a python function to find the geometric sum of the given array of numbers.\n    '''\n    return(sum(nums)**(1.0/len(nums)))\n",
        "num_ids": 22
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    num_list = []\n    for num in nums:\n        num_list.append(num)\n    num_list.sort()\n    print(f\"The largest and smallest value in the list is {num_list[0]} and {num_list[-1]} respectively\")\n    print(f\"The sum of the largest and smallest value in the list is {num_list[-1]+num_list[0]}\")\n",
        "num_ids": 101
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    sum = 0\n    max = nums[0]\n    min = nums[0]\n    \n    for i in range(len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n        elif nums[i] < min:\n            min = nums[i]\n    \n    sum = max + min\n    \n    return sum\n",
        "num_ids": 113
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return f'Sum of the largest and smallest value in the array is {sum}'\n",
        "num_ids": 40
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n",
        "num_ids": 17
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    pass\n    return \"Not implemented\"\n",
        "num_ids": 12
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\nprint(is_lower('hello'))\n",
        "num_ids": 19
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    print(\"Converting to lower case...\")\n    lowercase = string.lower()\n    return lowercase\n",
        "num_ids": 27
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    #return string.lower()\n    return string.lower() if type(string) == str else string\n",
        "num_ids": 26
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # code here\n    return string.lower()\n",
        "num_ids": 14
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #return re.sub('[a-z]+', \"\", str1, 0, re.I)\n    # return re.sub('[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1, 0, re.I)\n    # return re.sub(r'[a-z]+', \"\", str1, 0, re.IGNORECASE)\n    # return re.sub(r'[a-z]+', \"\", str1, flags=re.IGNORECASE)\n    # return re.sub(r'[a-z]+', \"\", str1, flags=re.IGNORECASE)\n    # return re.sub(r'[a-z]+', \"\", str1, flags=re.IGNORECASE)\n    return re.sub(r'[a-z]+', \"\", str1, flags=re.IGNORECASE | re.I)\n    # return re.sub(r'[a-z]+', \"\", str1, flags=re.I | re.IGNORECASE)\n    # return re.sub(r'[a-z]+', \"\", str1, flags=re.IGNORECASE)\n    # return re.sub(r'[a-z]+', \"\", str1, flags=re.I)\n    # return re.sub(r'[a-z]+', \"\", str1, flags=re.I)\n    # return re.sub(r'[a-z]+', \"\", str1, flags=re.IGNORECASE)\n    # return re.sub(r'[a-z]+', \"\", str1, flags=re.IGNORECASE)\n    # return re.sub(r'[a-z]+', \"\", str1, flags=re.I)\n    # return re.sub(r'[a-z]+', \"\", str1, flags=re.I)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n    # return re.sub(r'[a-z]+', \"\", str1)\n",
        "num_ids": 2012
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]')\n    return pattern.sub('', str1)\n",
        "num_ids": 30
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('(?<=[a-z])[A-Z]|(?<![A-Z])[A-Z](?=[a-z])', '', str1)\n",
        "num_ids": 49
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #str1 = input(\"Enter string: \")\n    list1 = list(str1)\n    new_list = []\n    for i in list1:\n        if (i.isupper() == True):\n            i = i.lower()\n            new_list.append(i)\n        else:\n            new_list.append(i)\n    string1 = ''.join(new_list)\n    return string1\n",
        "num_ids": 102
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if(str1[i].isupper()):\n            str2+=str1[i]\n    return str2\ndef check_double(str1):\n    '''\n    Write a function to check if a given string contains a double.\n    '''\n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            return True\n    return False\ndef has_vowels(str1):\n    '''\n    Write a function to check if a given string contains vowels.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            return True\n    return False\ndef is_pangram(str1):\n    '''\n    Write a function to check if a given string is a pangram.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(vowels)):\n        if not str1.__contains__(vowels[i]):\n            return False\n    return True\ndef get_unique_characters(str1):\n    '''\n    Write a function to get unique characters in a string.\n    '''\n    return len(set(str1))\ndef rotate_matrix(mat):\n    '''\n    Write a function to rotate a matrix 90 degree counter clockwise.\n    '''\n    n = len(mat[0])\n    m = len(mat)\n    for layer in range(n//2):\n        first = layer\n        last = n-1-layer\n        for i in range(first,last):\n            offset = i-first\n            top = mat[first][i]\n            mat[first][i] = mat[last-offset][first]\n            mat[last-offset][first] = mat[last][last-offset]\n            mat[last][last-offset] = mat[i][last]\n            mat[i][last] = top\n    return mat\ndef shift_characters(str1):\n    '''\n    Write a function to shift characters in a string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            new_str+=str1[i]\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            new_str+=str1[i]\n    return new_str\ndef create_matrix(n,m):\n    '''\n    Write a function to create a matrix of n rows and m columns.\n    '''\n    mat = [[0 for i in range(m)] for j in range(n)]\n    return mat\ndef add_two_matrices(mat1, mat2):\n    '''\n    Write a function to add two matrices.\n    '''\n    mat3 = create_matrix(len(mat1),len(mat1[0]))\n    for i in range(len(mat1)):\n        for j in range(len(mat1[i])):\n            mat3[i][j] = mat1[i][j] + mat2[i][j]\n    return mat3\ndef create_diagonal_matrix(n):\n    '''\n    Write a function to create a diagonal matrix of order n.\n    '''\n    mat = create_matrix(n, n)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                mat[i][j] = 1\n    return mat\ndef remove_matrix_element(mat1,mat2):\n    '''\n    Write a function to remove a specified element from the matrix.\n    '''\n    mat3 = create_matrix(len(mat1),len(mat1[0]))\n    for i in range(len(mat1)):\n        for j in range(len(mat1[i])):\n            if(i!=j):\n                mat3[i][j] = mat1[i][j]\n    return mat3\ndef split_string(str1):\n    '''\n    Write a function to split a string into individual words.\n    '''\n    words = []\n    word = ''\n    for i in range(len(str1)):\n        if(str1[i]==' '):\n            words.append(word)\n            word = ''\n        else:\n            word+=str1[i]\n    if word:\n        words.append(word)\n    return words\ndef zero_pad(num,pad):\n    '''\n    Write a function to zero pad a number.\n    '''\n    string_num = str(num)\n    len_string = len(string_num)\n    if pad>len_string:\n        for i in range(pad-len_string):\n            string_num = '0'+string_num\n    return string_num\ndef find_missing_number(arr):\n    '''\n    Write a function to find the missing number from the array.\n    '''\n    missing_num = 0\n    for i in range(len(arr)):\n        missing_num+=i\n    for i in range(len(arr)):\n        missing_num-=arr[i]\n    return missing_num\ndef find_first_repeated_char(str1):\n    '''\n    Write a function to find the first repeated character from the string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i])>1:\n            return str1[i]\n    return -1\ndef find_missing_char(str1,str2):\n    '''\n    Write a function to find the missing character from the given strings.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(str1)):\n        list1.append(str1[i])\n    for i in range(len(str2)):\n        list2.append(str2[i])\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            return list1[i]\n    for i in range(len(list2)):\n        if list2[i] not in list1:\n            return list2[i]\n    return -1\ndef find_missing_char_3(str1,str2):\n    '''\n    Write a function to find the missing character from the given strings.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(str1)):\n        list1.append(str1[i])\n    for i in range(len(str2)):\n        list2.append(str2[i])\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            return list1[i]\n    for i in range(len(list2)):\n        if list2[i] not in list1:\n            return list2[i]\n    return -1\ndef find_missing_char_4(str1,str2):\n    '''\n    Write a function to find the missing character from the given strings.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(str1)):\n        list1.append(str1[i])\n    for i in range(len(str2)):\n        list2.append(str2[i])\n    set1 = set(list1)\n    set2 = set(list2)\n    set3 = set1.symmetric_difference(set2)\n    return list(set3)[0]\ndef rotate_matrix_90_degree(mat):\n    '''\n    Write a function to rotate a matrix 90 degree counter clockwise.\n    '''\n    n = len(mat[0])\n    m = len(mat)\n    for layer in range(n//2):\n        first = layer\n        last = n-1-layer\n        for i in range(first,last):\n            offset = i-first\n            top = mat[first][i]\n            mat[first][i] = mat",
        "num_ids": 82
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('\\w*[a-z]\\w*','',str1)\n",
        "num_ids": 25
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]')\n    return pattern.sub('', str1)\n",
        "num_ids": 30
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pat = re.compile(r'[a-z]')\n    result = pat.sub('', str1)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # pattern = re.compile(r'[a-z]')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub('',str1)\n    # print(str1)\n    # pattern = re.compile(r'([a-z]+)')\n    # print(pattern)\n    # pattern.sub(",
        "num_ids": 2013
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n!= 0 :\n        return n % 10\n        n = n // 10\n    return 0\n",
        "num_ids": 27
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if(n>0) :\n        return n%10\n    elif(n<0) :\n        return (n%10)*(-1)\n    else :\n        return n\ndef max_of_three(x,y,z) :\n    '''\n    Write a python function to find the maximum of three given numbers.\n    '''\n    return max(x,y,z)\ndef reverse(s) :\n    '''\n    Write a python function to reverse the given string.\n    '''\n    return s[::-1]\ndef factorial(n) :\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    return math.factorial(n)\ndef is_palindrome(s) :\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    return s==reverse(s)\ndef common_member(a,b) :\n    '''\n    Write a python function to check whether two given lists have common elements or not.\n    '''\n    return a.intersection(b)\ndef reverse_string(s) :\n    '''\n    Write a python function to reverse the given string.\n    '''\n    if(len(s)>1) :\n        return s[::-1]\n    else :\n        return s\ndef append_and_delete(s1,s2,n) :\n    '''\n    Write a python function to append n times the given string in the original string and then delete n times the given string from the original string.\n    '''\n    return s1+n*s2+s1[0:len(s1)-n]\ndef max_of_four(x,y,z,k) :\n    '''\n    Write a python function to find the maximum of four given numbers.\n    '''\n    return max(x,y,z,k)\ndef fibonacci(n) :\n    '''\n    Write a python function to return the fibonacci number of the given index.\n    '''\n    return n*(n+1)//2\ndef is_prime(n) :\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n<2 :\n        return False\n    else :\n        for i in range(2,n//2) :\n            if(n%i==0) :\n                return False\n    return True\ndef total_occurrence(s) :\n    '''\n    Write a python function to find the total occurrences of each word in the given string.\n    '''\n    list_words=s.split()\n    word_freq={}\n    for i in list_words :\n        word_freq[i]=s.count(i)\n    return word_freq\ndef sum_of_list(l) :\n    '''\n    Write a python function to find the sum of the elements of the given list.\n    '''\n    return sum(l)\ndef palindrome(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    return str(n)==reverse(str(n))\ndef min_max(l) :\n    '''\n    Write a python function to find the maximum and minimum of the given list.\n    '''\n    return min(l),max(l)\ndef last_occurrence(s,c) :\n    '''\n    Write a python function to find the last occurrence of the given character in the given string.\n    '''\n    return s.rfind(c)\ndef count_occurrence(s,c) :\n    '''\n    Write a python function to find the number of occurrences of the given character in the given string.\n    '''\n    return s.count(c)\ndef sum_of_matrix(m) :\n    '''\n    Write a python function to sum the elements of the given matrix.\n    '''\n    return sum(m)\ndef check_pallindrome(s) :\n    '''\n    Write a python function to check whether the given string is pallindrome or not.\n    '''\n    return s==s[::-1]\ndef common_elements(l1,l2) :\n    '''\n    Write a python function to find common elements in two given lists.\n    '''\n    return l1.intersection(l2)\ndef prime_factors(n) :\n    '''\n    Write a python function to find prime factors of the given number.\n    '''\n    l=[]\n    for i in range(2,n) :\n        if(n%i==0) :\n            l.append(i)\n    return l\ndef my_method(s) :\n    '''\n    Write a python function to reverse the given string using the slicing method.\n    '''\n    return s[::-1]\ndef common_elements_in_two_strings(s1,s2) :\n    '''\n    Write a python function to find common elements in two given strings.\n    '''\n    return set(s1).intersection(set(s2))\ndef prime_factors_2(n) :\n    '''\n    Write a python function to find prime factors of the given number.\n    '''\n    for i in range(2,n) :\n        if(n%i==0) :\n            return i\n    return n\ndef anagram(s1,s2) :\n    '''\n    Write a python function to check whether two given strings are anagram or not.\n    '''\n    s1=sorted(s1)\n    s2=sorted(s2)\n    return s1==s2\ndef reverse_string_2(s) :\n    '''\n    Write a python function to reverse the given string using the built in function.\n    '''\n    return s[::-1]\ndef common_elements_in_two_strings_2(s1,s2) :\n    '''\n    Write a python function to find common elements in two given strings.\n    '''\n    set1=set(s1)\n    set2=set(s2)\n    return set1.intersection(set2)\ndef prime_factors_3(n) :\n    '''\n    Write a python function to find prime factors of the given number.\n    '''\n    l=[]\n    for i in range(2,n) :\n        if(n%i==0) :\n            l.append(i)\n    return l\ndef prime_factors_4(n) :\n    '''\n    Write a python function to find prime factors of the given number.\n    '''\n    for i in range(2,n) :\n        if(n%i==0) :\n            return i\n    return n\ndef celsius_to_fahrenheit(c) :\n    '''\n    Write a python function to convert the given celsius to fahrenheit.\n    '''\n    return c*9/5+32\ndef fahrenheit_to_celsius(f) :\n    '''\n    Write a python function to convert the given fahrenheit to celsius.\n    '''\n    return (f-32)*5/9\ndef check_prime_number(n) :\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n<2 :\n        return False\n    for i in range(2,n//2) :\n        if(n%i==0) :\n            return False\n    return True\ndef fibonacci_number(n) :\n    '''\n    Write a python function to return the fibonacci number of the given index.\n    '''\n    return fibonacci(n)\ndef palindrome_number(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    if(n>0) :\n        return str(n)==str(n)[::-1]\n    else :\n        return str(n*-1)==str(n*-1)[::-1]\ndef check_prime_number_2(n) :\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n<2 :\n        return False\n    for i in range(2,n//2) :\n        if(n%i==0) :\n            return False",
        "num_ids": 41
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # METHOD 1\n    # a = str(n)\n    # return a[0]\n    # # METHOD 2\n    # return n%10\n    # # METHOD 3\n    # return n//10**0\n",
        "num_ids": 55
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n>0:\n        digit = n%10\n        print(digit)\n        n = n//10\n",
        "num_ids": 29
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 9 :\n        n = n/10\n    return n\n",
        "num_ids": 20
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "num_ids": 13
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    num = n\n    if num < 0 :\n        num = num * (-1)\n    if num > 0 and num < 10 :\n        return (num)\n    elif num >= 10 and num < 100 :\n        return (num % 10)\n    elif num >= 100 and num < 1000 :\n        return (num % 100)\n    elif num >= 1000 and num < 10000 :\n        return (num % 1000)\n    elif num >= 10000 and num < 100000 :\n        return (num % 10000)\n    elif num >= 100000 and num < 1000000 :\n        return (num % 100000)\n    elif num >= 1000000 and num < 10000000 :\n        return (num % 1000000)\n    elif num >= 10000000 and num < 100000000 :\n        return (num % 10000000)\n    elif num >= 100000000 :\n        return (num % 100000000)\n    elif num < 0 :\n        return (num % -10)\n        \ndef is_vowel(ch) :\n    '''\n    Write a Python function that returns True if a character is a vowel and False otherwise.\n    '''\n    return ch in ['a','e','i','o','u','A','E','I','O','U']\n",
        "num_ids": 28
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n[0]\n    \ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n[-1]\n",
        "num_ids": 10
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 9:\n        n = n // 10\n    return n\n",
        "num_ids": 20
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    for i in str(n) :\n        return int(i)\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i % 2!=0:\n            odd_list.append(i)\n    return odd_list\nprint(Split([1,2,3,4,5,6,7]))\n",
        "num_ids": 62
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list\n",
        "num_ids": 42
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n",
        "num_ids": 42
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    temp = []\n    for i in list:\n        if i%2 == 1:\n            temp.append(i)\n    return temp\n",
        "num_ids": 35
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # new_list=[]\n    # for i in list:\n    #     if i%2!=0:\n    #         new_list.append(i)\n    # return new_list\n    return [i for i in list if i%2!=0]\n",
        "num_ids": 66
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return odd_list\ndef Split_float(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return odd_list\ndef Split_sum(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    sum=0\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n            sum+=i\n    return sum\ndef Split_sum_float(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    sum=0\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n            sum+=i\n    return sum\ndef Split_max(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return max(odd_list)\ndef Split_min(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return min(odd_list)\ndef Split_all_data(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return odd_list\ndef Split_even_data(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list=[]\n    for i in list:\n        if i%2==0:\n            even_list.append(i)\n    return even_list\ndef Split_even_data_float(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list=[]\n    for i in list:\n        if i%2==0:\n            even_list.append(i)\n    return even_list\ndef Split_even_data_sum(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list=[]\n    sum=0\n    for i in list:\n        if i%2==0:\n            even_list.append(i)\n            sum+=i\n    return sum\ndef Split_even_data_sum_float(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list=[]\n    sum=0\n    for i in list:\n        if i%2==0:\n            even_list.append(i)\n            sum+=i\n    return sum\ndef Split_even_data_max(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list=[]\n    for i in list:\n        if i%2==0:\n            even_list.append(i)\n    return max(even_list)\ndef Split_even_data_min(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list=[]\n    for i in list:\n        if i%2==0:\n            even_list.append(i)\n    return min(even_list)\ndef Split_all_data_sum(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return odd_list\ndef Split_all_data_sum_float(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return odd_list\ndef Split_all_data_max(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return max(odd_list)\ndef Split_all_data_min(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return min(odd_list)\ndef Split_odd_data_sum(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return sum(odd_list)\ndef Split_odd_data_sum_float(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return sum(odd_list)\ndef Split_odd_data_sum_all(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return sum(odd_list)\ndef Split_odd_data_max(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return max(odd_list)\ndef Split_odd_data_min(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return min(odd_list)\ndef Split_even_data_sum(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list=[]\n    sum=0\n    for i in list:\n        if i%2==0:\n            even_list.append(i)\n            sum+=i\n    return sum\ndef Split_even_data_sum_float(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list=[]\n    sum=0\n    for i in list:\n        if i%2==0:\n            even_list.append(i)\n            sum+=i\n    return sum\ndef Split_even_data_sum_all(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list=[]\n    sum=0\n    for i in list:\n        if i%2==0:\n            even_list.append(i)\n            sum+=i\n    return sum\ndef Split_even_data_ma",
        "num_ids": 57
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [n for n in list if n%2 == 1]\n",
        "num_ids": 18
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for num in list:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds\n",
        "num_ids": 38
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in list:\n        if i % 2 == 0:\n            lst1.append(i)\n        else:\n            lst2.append(i)\n    return lst1,lst2\nlst = [1,2,3,4,5,6,7,8]\na,b = Split(lst)\nprint(a,b)\n",
        "num_ids": 104
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list=[]\n    for item in list:\n        if item%2==0:\n            new_list.append(item)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [x**3 for x in range(1,n+1)]\n    return sum(cubes) - sum(range(1,n+1))\n",
        "num_ids": 41
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_numbers = 0\n    for i in range(1, n + 1) :\n        sum_cubes += i * i * i\n        sum_numbers += i\n",
        "num_ids": 52
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    a = int(input(\"Enter the number : \"))\n    def sum_of_cubes(a) :\n        sum = 0\n        while a >= 1 :\n            sum += a**3\n            a -= 1\n        return sum\n    return sum_of_cubes(a) - sum\n",
        "num_ids": 71
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n) : \n        return int((n*(n+1)*(2*n+1))/6)\n    \n    def sum(n) :\n        return n*(n+1)/2\n",
        "num_ids": 59
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0 \n    sum2 = 0\n    \n    for i in range(1,n+1) :\n        sum1 += i**3\n        sum2 += i\n    \n    return sum1 - sum2\n",
        "num_ids": 55
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    return abs(sum_of_numbers**3 - sum_of_cubes)\n",
        "num_ids": 78
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    def sum_of_squares(n) :\n        '''\n        Write a python function to return the sum of the squares of the first n natural numbers.\n        '''\n        sum = 0\n        for i in range(1,n+1) :\n            sum += i**2\n        return sum\n        \n    def sum_of_cubes(n) :\n        '''\n        Write a python function to return the sum of the cubes of the first n natural numbers.\n        '''\n        sum = 0\n        for i in range(1,n+1) :\n            sum += i**3\n        return sum\n    \n    \n    sum_of_cubes(n)\n    sum_of_squares(n)\n    return sum_of_cubes(n) - sum_of_squares(n)\n",
        "num_ids": 80
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    def sum_of_cubes(n) : \n        '''\n        Write a python function to sum of cubes of the first n natural numbers.\n        '''\n        \n        return n*(n+1)*(2*n+1)/6\n    \n    return sum_of_cubes(n)**3 - sum_of_cubes(n)\n",
        "num_ids": 48
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_squares = (n*(n+1)*(2*n+1))/6\n    sum_of_cube = ((n*(n+1)*(2*n+1)*(3*n+2))/6)\n    return int(sum_of_cube - sum_of_squares)\n",
        "num_ids": 79
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cube_of_natural_number(n) :\n        '''\n        Write a function which returns the sum of cubes of first n natural numbers.\n        '''\n        sum_of_n = (n*(n+1)*(2*n+1))/6\n        return sum_of_n\n",
        "num_ids": 35
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    XOR_sum = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            XOR_sum += (A[i] ^ A[j])\n    return XOR_sum\n    \ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            XOR_sum += (A[i] ^ A[j])\n    return XOR_sum\n    \nif __name__ == \"__main__\" : \n    A = [1,3,5,7,9]\n    N = len(A)\n    print(\"Number of odd pair whose XOR is odd is \", find_Odd_Pair(A,N)",
        "num_ids": 121
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count = 0\n    \n    for i in range(0,N-1) : \n        for j in range(i+1,N) : \n            if ((A[i] ^ A[j]) & 1) : \n                count += 1\n    \n    return count \n",
        "num_ids": 71
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if ((A[i]^A[j])&1) == 1:\n                count+=1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if((A[i] ^ A[j]) & 1) : \n                count += 1\n                break\n    return count\nA = [1, 5, 6, 3, 4, 7] \nprint(find_Odd_Pair(A, len(A))) \n",
        "num_ids": 102
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #A = [2, 4, 5, 6, 7, 8]\n    #N = len(A)\n    #OddPair = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j]) % 2) == 1:\n                #print(A[i]^A[j], \": \", i, j)\n                OddPair+=1\n    return OddPair\nA = [2, 4, 5, 6, 7, 8]\nN = len(A)\nOddPair = find_Odd_Pair(A,N)\nprint(\"Odd Pair : \", OddPair)",
        "num_ids": 170
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if ((A[i] ^ A[j]) & 1) == 1 : \n                count = count+1\n    return count\n    \n    \ndef find_Odd_Pair_in_Array(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    Input : \n    A : input array of numbers\n    N : size of array\n    Output : \n    returns the count\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if ((A[i] ^ A[j]) & 1) == 1 : \n                count = count+1\n    return count\n    \n    \ndef find_Odd_Pair_Brute_Force(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    Input : \n    A : input array of numbers\n    N : size of array\n    Output : \n    returns the count\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if ((A[i] ^ A[j]) & 1) == 1 : \n                count = count+1\n    return count\n    \n    \ndef find_Odd_Pair_Brute_Force_Count_Twice(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    Input : \n    A : input array of numbers\n    N : size of array\n    Output : \n    returns the count\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if ((A[i] ^ A[j]) & 1) == 1 : \n                count = count+1\n    return count*2\n",
        "num_ids": 68
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    a_set = set(A)\n    count = 0\n    for i in range(1,N) : \n        x = i ^ (i+1)\n        if x in a_set : \n            count += 1\n    return count \n    # Code here \n",
        "num_ids": 67
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if A is None : \n        return 0\n    else : \n        return count_Pair(A,0,N-1,N)\n    \ndef count_Pair(A,start,end,N) : \n    \n    count = 0\n    if N == 1 : \n        if (A[0] ^ A[0]) % 2!= 0 : \n            count += 1\n        return count\n    \n    mid = (start + end) // 2\n    count = count + count_Pair(A,start,mid,N/2)\n    count = count + count_Pair(A,mid+1,end,N/2)\n    \n    i = start\n    j = mid + 1\n    xor = 0\n    while i <= mid and j <= end : \n        xor = xor ^ A[i]\n        xor = xor ^ A[j]\n        if xor % 2 == 1 : \n            count += 1\n        i += 1\n        j += 1\n    return count\n",
        "num_ids": 243
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(0,N) : \n        for j in range(i+1,N):\n            xor=A[i]^A[j]\n            if(xor & 1) : \n                count=count+1\n    return count\ndef find_Odd_Pair_Sort(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A.sort()\n    count=0\n    for i in range(0,N-1) : \n        for j in range(i+1,N):\n            if(A[j]&1 and A[j-1]&1==0) : \n                count=count+1\n            elif(A[j]&1==0) : \n                break\n    return count\ndef find_Odd_Pair_Hash(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    hash_Table={}\n    for i in range(0,N) : \n        hash_Table[A[i]]=hash_Table.get(A[i],0) + 1\n    count=0\n    for key in hash_Table.keys() : \n        if(hash_Table[key]&1) : \n            count=count+1\n    return count\n",
        "num_ids": 91
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)\n",
        "num_ids": 31
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # create a new empty string\n    new_string = ''\n",
        "num_ids": 17
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n",
        "num_ids": 29
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        if string[i].islower():\n            string[i] = string[i].upper()\n        else:\n            string[i] = string[i].lower()\n    return ''.join(string)\n",
        "num_ids": 71
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n",
        "num_ids": 29
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    print(string)\n    toggle_list = []\n    for i in string:\n        if i.isupper() == True:\n            toggle_list.append(i.lower())\n        elif i.islower() == True:\n            toggle_list.append(i.upper())\n        else:\n            toggle_list.append(i)\n",
        "num_ids": 83
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert to list\n    characters = [c for c in string]\n    # Iterate over list and flip case\n    for i in range(len(characters)):\n        if characters[i].islower():\n            characters[i] = characters[i].upper()\n        else:\n            characters[i] = characters[i].lower()\n    # Convert back to string\n    return ''.join(characters)\n",
        "num_ids": 102
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    print(string.swapcase())\n    return\n",
        "num_ids": 15
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(int(i) - int(j) for i, j in zip(str(n1), str(n2)))\n",
        "num_ids": 33
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(x) - int(y)) for x, y in zip(str(n1), str(n2)))\n",
        "num_ids": 35
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = list(str(n1))\n    n2 = list(str(n2))\n    n1.sort()\n    n2.sort()\n    distance = 0\n    for i,n in enumerate(n1):\n        if n!= n2[i]:\n            distance += 1\n    return distance\n",
        "num_ids": 78
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    length = len(n1)\n    s = 0\n    for i in range(length):\n        s += abs(int(n1[i]) - int(n2[i]))\n    return s\n",
        "num_ids": 71
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def sum_digits(n):\n        # Returns the sum of digits in integer n\n        return sum([int(i) for i in str(n)])\n",
        "num_ids": 40
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    str_num1 = str(n1)\n    str_num2 = str(n2)\n    int_digit_sum = 0\n    for digit1, digit2 in zip(str_num1, str_num2):\n        int_digit_sum += abs(int(digit1) - int(digit2))\n    return int_digit_sum\n",
        "num_ids": 85
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    n1 = str(n1)\n    n2 = str(n2)\n    \n    def get_digit(number, position):\n        return int(number[position])\n    \n    n1_digits = [get_digit(n1, i) for i in range(len(n1))]\n    n2_digits = [get_digit(n2, i) for i in range(len(n2))]\n    \n    n1_digits_sum = sum(n1_digits)\n    n2_digits_sum = sum(n2_digits)\n    \n    diff = abs(n1_digits_sum - n2_digits_sum)\n    return diff\n    \ndef digit_distance_nums_test():\n    n1 = 123\n    n2 = 1\n    \n    result = digit_distance_nums(n1, n2)\n    print(result)\n    \ndef main():\n    digit_distance_nums_test()\n",
        "num_ids": 239
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    len_n1 = len(n1)\n    len_n2 = len(n2)\n    len_n1_bigger = len_n1 >= len_n2\n    sum_diff = 0\n    for i in range(len(n1)):\n        if len_n1_bigger:\n            n1_i = n1[i]\n            n2_i = n2[i]\n        else:\n            n1_i = n1[i]\n            n2_i = n2[i]\n        sum_diff += int(n1_i) - int(n2_i)\n    return sum_diff\n    \ndef digit_distance_strs(s1, s2):\n    '''\n    Write a python function to find the sum of the per-character difference between two strings.\n    '''\n    s1 = str(s1)\n    s2 = str(s2)\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n    len_s1_bigger = len_s1 >= len_s2\n    sum_diff = 0\n    for i in range(len(s1)):\n        if len_s1_bigger:\n            s1_i = s1[i]\n            s2_i = s2[i]\n        else:\n            s1_i = s1[i]\n            s2_i = s2[i]\n        sum_diff += ord(s1_i) - ord(s2_i)\n    return sum_diff\n    \ndef digit_distance_ints(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    len_n1 = len(n1)\n    len_n2 = len(n2)\n    len_n1_bigger = len_n1 >= len_n2\n    sum_diff = 0\n    for i in range(len(n1)):\n        if len_n1_bigger:\n            n1_i = n1[i]\n            n2_i = n2[i]\n        else:\n            n1_i = n1[i]\n            n2_i = n2[i]\n        sum_diff += int(n1_i) - int(n2_i)\n    return sum_diff\n    \ndef find_substring_with_same_frequency(s1, s2):\n    '''\n    Write a python function to find the substring with same frequency of characters in two strings.\n    '''\n    substrings_with_same_frequencies = []\n    s1_chars_freq = {}\n    s2_chars_freq = {}\n    for char in s1:\n        if char in s1_chars_freq:\n            s1_chars_freq[char] += 1\n        else:\n            s1_chars_freq[char] = 1\n    for char in s2:\n        if char in s2_chars_freq:\n            s2_chars_freq[char] += 1\n        else:\n            s2_chars_freq[char] = 1\n    for i in range(len(s1)):\n        for j in range(i+1, len(s1)+1):\n            s1_chars_freq_temp = s1_chars_freq.copy()\n            s2_chars_freq_temp = s2_chars_freq.copy()\n            for k in range(i, j):\n                if s1[k] in s1_chars_freq_temp:\n                    s1_chars_freq_temp[s1[k]] -= 1\n                if s1[k] in s2_chars_freq_temp:\n                    s2_chars_freq_temp[s1[k]] -= 1\n            substrings_with_same_frequencies.append(s1[i:j])\n    substrings_with_same_frequencies = list(dict.fromkeys(substrings_with_same_frequencies))\n    substrings_with_same_frequencies.sort()\n    return substrings_with_same_frequencies[0]\n    \ndef find_anagrams_of_a_string(s1, s2):\n    '''\n    Write a python function to find the anagrams of a given string.\n    '''\n    s1 = str(s1)\n    s2 = str(s2)\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n    len_s1_bigger = len_s1 >= len_s2\n    s1_chars_freq = {}\n    s2_chars_freq = {}\n    for char in s1:\n        if char in s1_chars_freq:\n            s1_chars_freq[char] += 1\n        else:\n            s1_chars_freq[char] = 1\n    for char in s2:\n        if char in s2_chars_freq:\n            s2_chars_freq[char] += 1\n        else:\n            s2_chars_freq[char] = 1\n    for char in s1_chars_freq:\n        if char in s2_chars_freq:\n            if s1_chars_freq[char] == s2_chars_freq[char]:\n                s2_chars_freq.pop(char)\n            else:\n                return False\n        else:\n            return False\n    if len_s1_bigger:\n        if len_s1 - len(s2_chars_freq) == 1:\n            return True\n    else:\n        if len_s2 - len(s1_chars_freq) == 1:\n            return True\n    return False\n    \ndef find_anagrams_of_a_string_with_prefix(s1, s2):\n    '''\n    Write a python function to find the anagrams of a given string, with the prefix given as an argument.\n    '''\n    s1 = str(s1)\n    s2 = str(s2)\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n    len_s1_bigger = len_s1 >= len_s2\n    s1_chars_freq = {}\n    s2_chars_freq = {}\n    for char in s1:\n        if char in s1_chars_freq:\n            s1_chars_freq[char] += 1\n        else:\n            s1_chars_freq[char] = 1\n    for char in s2:\n        if char in s2_chars_freq:\n            s2_chars_freq[char] += 1\n        else:\n            s2_chars_freq[char] = 1\n    for char in s1_chars_freq:\n        if char in s2_chars_freq:\n            if s1_chars_freq[char] == s2_chars_freq[char]:\n                s2_chars_freq.pop(char)\n            else:\n                return False\n        else:\n            return False\n    if len_s1_bigger:\n        if len_s1 - len(s2_chars_freq) == 1:\n            return True\n    else:\n        if len_s2 - len(s1_chars_freq) == 1:\n            return True\n    return False\n    \ndef find_substrings(s1, s2):\n    '''\n    Write a python function to find the substrings of a string s1.\n    '''\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n    len_s1_bigger = len_s1 >= len_s2\n    s1_chars_freq = {}\n    for char in s1:\n        if char in s1_chars_freq:\n            s1_chars_freq[cha",
        "num_ids": 90
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1)) == 1:\n        return abs(n1-n2)\n",
        "num_ids": 26
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -999999999999\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n",
        "num_ids": 80
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) == 1:\n        return a[0]\n    max_sum = a[0]\n    for i in range(size):\n        max_sum = max(max_sum, a[i])\n        for j in range(i+1, size):\n            max_sum = max(max_sum, max_sum + a[j])\n    return max_sum\n",
        "num_ids": 93
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    for i in range(size):\n        if a[i] < 0:\n            max_sum += a[i]\n            break\n        if a[i] > max_sum:\n            max_sum = a[i]\n",
        "num_ids": 66
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    sum = 0\n    for i in range(0, size):\n        sum = sum + a[i]\n        if sum > max_sum:\n            max_sum = sum\n",
        "num_ids": 51
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_sum_list = []\n    for i in range(size):\n        for j in range(i, size):\n            if sum(a[i:j+1]) > max_sum:\n                max_sum = sum(a[i:j+1])\n                max_sum_list = a[i:j+1]\n    return max_sum, max_sum_list\n",
        "num_ids": 100
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -2**31 - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n",
        "num_ids": 40
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    return max(sum(a[i:j]) for i in range(size) for j in range(i+1, size+1))\n",
        "num_ids": 35
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # for each element in the list, if the sublist ending at it is larger than the current largest sublist sum,\n    # set the current largest sublist sum equal to the sum of the sublist ending at that element\n    largest_sub_list_sum = a[0]\n    for i in range(0, size):\n        largest_sub_list_sum = max(largest_sub_list_sum, sum_sub_list(a, i, size))\n    return largest_sub_list_sum\n",
        "num_ids": 118
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # base case\n    if size <= 0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    sorted_union = list(set(test_list1 + test_list2))\n    sorted_union.sort()\n    return tuple(sorted_union)\n",
        "num_ids": 72
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1).union(set(test_tup2))))\n",
        "num_ids": 27
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #return tuple(sorted(set(test_tup1).union(test_tup2)))\n    #return tuple(sorted(list(set(test_tup1).union(test_tup2))))\n    return sorted(list(set(test_tup1).union(test_tup2)))\n    #return sorted(set(test_tup1).union(test_tup2))\n",
        "num_ids": 99
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    sorted_union = sorted(union_set)\n    return sorted_union\n",
        "num_ids": 61
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set_1 = set(test_tup1)\n    set_2 = set(test_tup2)\n    union_set = sorted(list(set_1.union(set_2)))\n    return tuple(union_set)\n",
        "num_ids": 59
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    return sorted(set(test_list1 + test_list2))\n",
        "num_ids": 49
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    for x in test_tup1:\n        if x not in union_list:\n            union_list.append(x)\n    for x in test_tup2:\n        if x not in union_list:\n            union_list.append(x)\n    union_list = sorted(union_list)\n    return tuple(union_list)\n",
        "num_ids": 92
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = list(union_set)\n    union_list.sort()\n    return tuple(union_list)\n",
        "num_ids": 54
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    sorted_list = sorted(list(set(test_tup1) | set(test_tup2)))\n    return tuple(sorted_list)\n",
        "num_ids": 40
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    assert isinstance(test_tup1, tuple), \"Input 1 is not a tuple.\"\n    assert isinstance(test_tup2, tuple), \"Input 2 is not a tuple.\"\n",
        "num_ids": 46
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max=0\n    for i in range(len(lst)):\n        sum=0\n        for j in lst[i]:\n            sum+=1\n        if(sum>max):\n            max=sum\n    return(max)\n",
        "num_ids": 59
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length\n",
        "num_ids": 56
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for x in lst:\n        if len(x) > max_len:\n            max_len = len(x)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "num_ids": 48
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    return max_len\n",
        "num_ids": 56
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length=0\n    for i in lst:\n        if len(i)>length:\n            length=len(i)\n    return length\n",
        "num_ids": 37
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len=0\n    current_len=0\n    for i in lst:\n        if(i==0):\n            max_len=max(max_len,current_len)\n            current_len=0\n            continue\n        current_len+=1\n    max_len=max(max_len,current_len)\n    return max_len\n",
        "num_ids": 87
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLen = 0\n    for i in range(len(lst)):\n        sublst = lst[i]\n        count = 0\n        for j in range(len(sublst)):\n            if sublst[j] == 1:\n                count+=1\n            else:\n                if count > maxLen:\n                    maxLen = count\n                count = 0\n        if count > maxLen:\n            maxLen = count\n    return maxLen\n",
        "num_ids": 110
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = []\n    for i in lst:\n        length.append(len(i))\n    return max(length)\n",
        "num_ids": 32
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = []\n    for i in range(len(lst)):\n        length.append(len(lst[i]))\n    return max(length)\n",
        "num_ids": 41
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #Finds the first occurence of the quotation marks in text\n    start = re.search(\"\\\"\", text).start()\n    #Finds the last occurence of the quotation marks in text\n    end = re.search(\"\\\"\", text).end()\n    #Returns the substring between the first and last occurence of the quotation marks in text\n    return text[start:end]\n",
        "num_ids": 92
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = r\"([^'\\\"]*)([^'\\\"]*'[^'\\\"]*'[^'\\\"]*)*([^'\\\"]*)\"\n    match = re.search(regex, text)\n    if match is not None:\n        return match.group(1)\n    return match\n",
        "num_ids": 78
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\\"(.*)\\\"'\n    result = re.findall(pattern, text)\n    if result:\n        return result[0]\n    return None\n",
        "num_ids": 43
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    a = re.findall(r'\\\"(.+?)\\\"', text)\n    return a\n",
        "num_ids": 26
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r\"\\\"(.*?)\\\"\")\n    result = pattern.findall(text)\n    print(result)\n",
        "num_ids": 36
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.split('\\n')\n    result = []\n    for line in text:\n        if re.match('^[a-zA-Z0-9\\-\\_\\:\\@\\&\\+\\.\\=\\*\\/\\%]+[\\s]*$', line):\n            result.append(line)\n    return result\n",
        "num_ids": 83
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text is None:\n        return ''\n    reg = re.compile(\"\\\"(.+?)\\\"\")\n    values = []\n    for match in reg.finditer(text):\n        values.append(match.group(1))\n    return values\n    #print(text)\n    #return text\n",
        "num_ids": 74
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Remove quotation marks\n    text = text.replace('\"', '')\n    # Extract values\n    values = re.findall(\"([^\\s]+)\", text)\n    return values\n",
        "num_ids": 47
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    quotes_regex = re.compile(r'\\\".*\\\"')\n    return quotes_regex.findall(text)\n",
        "num_ids": 35
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if len(re.findall(\"'(.+)'\", text)) > 0:\n        return re.findall(\"'(.+)'\", text)[0]\n    elif len(re.findall('\"(.+)\",', text)) > 0:\n        return re.findall('\"(.+)\",', text)[0]\n    elif len(re.findall('\"(.+)\"', text)) > 0:\n        return re.findall('\"(.+)\"', text)[0]\n    elif len(re.findall(\"'(.+)'\", text)) > 0:\n        return re.findall(\"'(.+)'\", text)[0]\n    elif len(re.findall('\"(.+)\"', text)) > 0:\n        return re.findall('\"(.+)\"', text)[0]\n    elif len(re.findall('\"(.+)\"', text)) > 0:\n        return re.findall('\"(.+)\"', text)[0]\n    else:\n        return \"No strings found\"\n",
        "num_ids": 245
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if arr[i]!= arr[j]:\n                    count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    print(arr)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if (arr[i]!= arr[j]):\n                count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs=0\n    for i in range(n):\n        for j in range(n):\n            if i!=j and arr[i]!=arr[j]:\n                pairs+=1\n    return pairs\n",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    temp=set()\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                temp.add(arr[i])\n                temp.add(arr[j])\n    return len(temp)\n",
        "num_ids": 70
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n",
        "num_ids": 7
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    import numpy as np\n    # arr = np.array(arr)\n    arr.sort()\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    count = 0\n    for i in range(len(arr)):\n        if d[arr[i]]!= 1:\n            count += len(arr)-i\n    return count\n    \ndef count_Pairs_opt(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    import numpy as np\n    # arr = np.array(arr)\n    arr.sort()\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    count = 0\n    for i in range(len(arr)):\n        if d[arr[i]]!= 1:\n            count += len(arr)-i\n    return count\n",
        "num_ids": 121
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    import math\n    m = n\n    # Create a dictionary with keys as pairs and value as their frequency\n    d = dict()\n    for i in range(0,n):\n        for j in range(0,n):\n            if i!= j:\n                d[arr[i],arr[j]] = d.get((arr[i],arr[j]),0) + 1\n    #print(\"dictionary\",d)\n    #Count all pairs\n    count = 0\n    #for each key in dictionary\n    for key in d.keys():\n        count = count + d[key]*(d[key]-1)/2\n",
        "num_ids": 148
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    # Iterate over the list \n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i]!= arr[j]): \n                count = count + 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    x = 0\n    for i in range(0,len(arr)):\n        for j in range(0,len(arr)):\n            if arr[i]!=arr[j] and i!=j:\n                x = x+1\n    return x\n",
        "num_ids": 65
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # base case\n    if n <= 1:\n        return 0\n    # intialize result\n    result = 0\n    #iterate through the array\n    for i in range(n-1):\n        # iterate through the array\n        for j in range(i+1,n):\n            # check if the pair is unequal\n            if arr[i]!= arr[j]:\n                result = result + 1\n    return result\n",
        "num_ids": 103
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\ndef isPalindrome(word): \n    '''\n    Write a python function to check whether the input string is a palindrome or not.\n    '''\n    word = word.lower()\n    word = split(word)\n    i = 0\n    j = len(word) - 1\n    while i < j:\n        if word[i]!= word[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\ndef isStrictPalindrome(word): \n    '''\n    Write a python function to check whether the input string is a strict palindrome or not.\n    '''\n    word = word.lower()\n    word = split(word)\n    i = 0\n    j = len(word) - 1\n    while i < j:\n        if word[i]!= word[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\ndef isSubset(word, subset): \n    '''\n    Write a python function to check whether the given word is a subset of the given string.\n    '''\n    return all([True if char in subset else False for char in word])\ndef isSubstring(word, substring): \n    '''\n    Write a python function to check whether the given substring is a substring of the given word.\n    '''\n    return substring in word\ndef isValidParenthesis(word): \n    '''\n    Write a python function to check whether the input string is a valid parenthesis or not.\n    '''\n    # This function can also be done using Stack class.\n    for char in word:\n        if char not in ['(', ')', '{', '}', '[', ']']:\n            return False\n    pairs = {')':'(', '}':'{', ']':'['}\n    stack = []\n    for char in word:\n        if char in pairs:\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == pairs[char]:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(char)\n    return True\ndef generateParenthesis(n): \n    '''\n    Write a python function to generate all the valid parenthesis for a given number.\n    '''\n    parenthesis = []\n    def generate(parenthesis, num, left, right):\n        if left == right and num == 0:\n            parenthesis.append(parenthesis)\n            return\n        if left < num:\n            generate(parenthesis + ['('], num - 1, left + 1, right)\n        if right < left:\n            generate(parenthesis + [')'], num - 1, left, right + 1)\n    generate(parenthesis, n, 0, 0)\n    return parenthesis\ndef parenthesisBalanceCheck(word): \n    '''\n    Write a python function to check whether the given string is balance or not.\n    '''\n    parenthesis = {')':'(', '}':'{', ']':'['}\n    stack = []\n    for char in word:\n        if char in parenthesis:\n            if len(stack) == 0:\n                return False\n            elif parenthesis[char]!= stack.pop():\n                return False\n        else:\n            stack.append(char)\n    return len(stack) == 0\ndef countSubstrings(word): \n    '''\n    Write a python function to count the number of substrings in a string.\n    '''\n    # This function can also be done using dynamic programming.\n    length = len(word)\n    ans = 0\n    for i in range(length):\n        for j in range(i, length):\n            if isSubstring(word[i:j+1], word[i:j+1][::-1]):\n                ans += 1\n    return ans\ndef camelCase(word): \n    '''\n    Write a python function to check whether the input string is in camelcase or not.\n    '''\n    return word.isupper()\ndef snakeCase(word): \n    '''\n    Write a python function to check whether the input string is in snakecase or not.\n    '''\n    return word.islower()\ndef startswithUppercase(word): \n    '''\n    Write a python function to check whether the input string starts with an uppercase or not.\n    '''\n    return word[0].isupper()\ndef longestSubstring(word): \n    '''\n    Write a python function to find the longest substring in a given string.\n    '''\n    length = len(word)\n    ans = []\n    for i in range(length):\n        for j in range(i, length):\n            if isSubstring(word[i:j+1], word[i:j+1][::-1]):\n                ans.append(word[i:j+1])\n    return max(ans, key = len)\ndef isStrictlyIncreasing(word): \n    '''\n    Write a python function to check whether the input string is strictly increasing or not.\n    '''\n    word = split(word)\n    for i in range(len(word) - 1):\n        if word[i] > word[i+1]:\n            return False\n    return True\ndef isUppercaseSubstring(word): \n    '''\n    Write a python function to check whether the input string has uppercase character or not.\n    '''\n    word = split(word)\n    for char in word:\n        if char.isupper():\n            return True\n    return False\ndef encrypt(word): \n    '''\n    Write a python function to encrypt the input string using rot13.\n    '''\n    # This can also be done using pyperclip module.\n    word = word.lower()\n    ans = ''\n    for char in word:\n        if ord(char) in range(ord('a'), ord('z') + 1):\n            ans += chr(ord(char) + 13)\n        else:\n            ans += char\n    return ans\ndef decrypt(word): \n    '''\n    Write a python function to decrypt the input string using rot13.\n    '''\n    # This can also be done using pyperclip module.\n    word = word.lower()\n    ans = ''\n    for char in word:\n        if ord(char) in range(ord('a'), ord('z') + 1):\n            ans += chr(ord(char) - 13)\n        else:\n            ans += char\n    return ans\ndef sortStack(stack): \n    '''\n    Write a python function to sort the given stack.\n    '''\n    # This can also be done using the heap module.\n    temp = stack.pop()\n    sortStack(stack)\n    insertInSortedOrder(stack, temp)\ndef insertInSortedOrder(stack, item): \n    '''\n    Write a python function to insert the given item in a sorted order.\n    '''\n    if len(stack) == 0 or item >= stack[-1]:\n        stack.append(item)\n        return\n    temp = stack.pop()\n    insertInSortedOrder(stack, item)\n    stack.append(temp)\ndef createQueue(): \n    '''\n    Write a python function to create a queue.\n    '''\n    return []\ndef isQueueEmpty(queue): \n    '''\n    Write a python function to check whether the given queue is empty or not.\n    '''\n    return len(queue) == 0\ndef enqueue(queue, item): \n    '''\n    Write a python function to add an item in the given queue.\n    '''\n    queue.append(item)\ndef dequeue(queue): \n    '''\n    Write a python function to delete the item from the given queue.\n    '''\n    if isQueueEmpty(queue):\n        return 'Queue is empty.'\n    return queue.pop(0)\ndef printQueue(queue): \n    '''\n    Write a python function to print the items of the given queue.\n    '''\n    print(*queue, sep ='')\ndef maxQueue(queue): \n    '''\n    Write a python function to find the maximum item from the given queue.\n    '''\n    if isQueueEmpty(queue):\n        return 'Queue is empty.'\n    return max(queue)\ndef isCircularQueue(queue): \n    '''\n    Write a python function to check whether the given queue is circular or not.\n    '''\n    return len",
        "num_ids": 5
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\ndef convert_to_numbers(s):\n    '''\n    Write a Python program to convert a given string to all uppercase if it contains at least 2 uppercase characters in the first 4 characters.\n    '''\n    if(any(c.isupper() for c in s[:4])):\n        return s.upper()\n    return s\ndef remove_vowels(s):\n    '''\n    Write a Python program to remove all consonants from a string and print the resultant string.\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    for x in s.lower():\n        if x not in vowels:\n            s = s.replace(x, \"\")\n    return s\ndef multiplication_table():\n    '''\n    Write a Python program to create a multiplication table (from 1 to 10) of a number.\n    '''\n    for i in range(1, 11):\n        for j in range(1, 11):\n            print(i * j, end=\" \")\n        print(\"\")\ndef count_char(s):\n    '''\n    Write a Python program to count occurrences of a substring in a string.\n    '''\n    return s.count(\"P\")\ndef find_substring(s):\n    '''\n    Write a Python program to count occurrence of a substring in a given string.\n    '''\n    # If the substring is found in the string return true, else return false.\n    return s.count(\"h\")\ndef is_pangram(s):\n    '''\n    Write a Python program to check whether a string is PANGRAM or not.\n    '''\n    # s = 'The quick brown fox jumps over the lazy dog'\n    s = set(s)\n    s = ''.join(s)\n    abc = 'abcdefghijklmnopqrstuvwxyz'\n    abc = abc.upper()\n    s1 = set(abc)\n    if(s == s1):\n        return True\n    return False\ndef list_manipulation(list):\n    '''\n    Write a Python program to insert an element before each element of a list.\n    '''\n    list.insert(-1, \"*\")\n    return list\ndef make_sentences(s):\n    '''\n    Write a Python program to convert a string into a list of sentences.\n    '''\n    # Take a string input\n    # Return a list of strings\n    return s.split(\",\")\ndef change_case(s):\n    '''\n    Write a Python program to convert the first letter of each word to uppercase letter in a given string.\n    '''\n    return s.title()\ndef check_pangram(s):\n    '''\n    Write a Python program to check whether a string is PANGRAM or not.\n    '''\n    # s = 'The quick brown fox jumps over the lazy dog'\n    abc = 'abcdefghijklmnopqrstuvwxyz'\n    abc = abc.upper()\n    s1 = set(abc)\n    if(s == s1):\n        return True\n    return False\ndef list_slicing(list):\n    '''\n    Write a Python program to clone or copy a list.\n    '''\n    # Sample list: [\"apple\", \"banana\", \"cherry\"]\n    # Expected Output: [\u201capple\u201d, \u201cbanana\u201d, \u201ccherry\u201d]\n    return list[:]\ndef rotate_list(list):\n    '''\n    Write a Python program to rotate a list by specified number of elements.\n    '''\n    # Sample list: [10, 20, 30, 40]\n    # Rotate by 2: [30, 40, 10, 20]\n    return list[-2:] + list[:-2]\ndef palindrome_sentence(s):\n    '''\n    Write a Python program to check whether a string is palindrome or not.\n    '''\n    # s = 'was it a car or a cat i saw'\n    s = s.replace(\" \",\"\")\n    return s == s[::-1]\ndef reverse_list(list):\n    '''\n    Write a Python program to reverse a list.\n    '''\n    # Sample list: [10, 20, 30, 40]\n    # Expected Output: [40, 30, 20, 10]\n    return list[::-1]\ndef check_unique_list(list):\n    '''\n    Write a Python program to check whether a list contains all unique elements or not.\n    '''\n    # Sample list: [10, 20, 30, 40, 40]\n    # Expected Output: False\n    return len(list) == len(set(list))\ndef convert_list_to_dictionary(list):\n    '''\n    Write a Python program to convert a list of tuples into a dictionary.\n    '''\n    # Sample list: [(1, 'Red'), (2, 'Green'), (3, 'Black')]\n    # Expected Output: {1: 'Red', 2: 'Green', 3: 'Black'}\n    d = {}\n    for i in list:\n        d[i[0]] = i[1]\n    return d\ndef rotate_matrix(matrix):\n    '''\n    Write a Python program to rotate a matrix by 90 degrees (Clockwise).\n    '''\n    # Input matrix:\n    # [ [1, 2, 3],\n    #   [4, 5, 6],\n    #   [7, 8, 9] ]\n    # Output:\n    # [ [7, 4, 1],\n    #   [8, 5, 2],\n    #   [9, 6, 3] ]\n    for i in range(len(matrix)):\n        for j in range(i,len(matrix)):\n            matrix[i][j],matrix[j][i] = matrix[j][i], matrix[i][j]\n    for i in matrix:\n        i.reverse()\n    return matrix\ndef selection_sort(list):\n    '''\n    Write a Python program to sort a list of elements using the selection sort algorithm.\n    '''\n    # time complexity = O(n^2)\n    # Sample list: [3, 5, 2, 1, 4]\n    for i in range(len(list)):\n        min_index = i\n        for j in range(i+1,len(list)):\n            if list[min_index] > list[j]:\n                min_index = j\n        list[i],list[min_index] = list[min_index],list[i]\n    return list\ndef list_sort(list):\n    '''\n    Write a Python program to sort a list of elements using the bubble sort algorithm.\n    '''\n    # time complexity = O(n^2)\n    # Sample list: [3, 5, 2, 1, 4]\n    # Sorted list: [1, 2, 3, 4, 5]\n    for i in range(len(list)):\n        for j in range(i+1,len(list)):\n            if list[i] > list[j]:\n                list[i],list[j] = list[j],list[i]\n    return list\ndef heap_sort(list):\n    '''\n    Write a Python program to sort a list of elements using the heap sort algorithm.\n    '''\n    # time complexity = O(n*log(n))\n    # Sample list: [3, 5, 2, 1, 4]\n    # Sorted list: [1, 2, 3, 4, 5]\n    import heapq\n    heapq.heapify(list)\n    return [heapq.heappop(list) for i in range(len(list))]\ndef merge_sort(list):\n    '''\n    Write a Python program to sort a list of elements using the merge sort algorithm.\n    '''\n    # time complexity = O(n*log(n))\n    # Sample list: [3, 5, 2, 1, 4]\n    # Sorted list: [1, 2, 3, 4, 5]\n    if len(list) <= 1:\n        return list\n    # Split the list into two halves\n    mid = len(list) // 2\n    left_list = merge_sort(list[:mid])\n    right_list = merge_sort(list[mid:])\n    # Merge the two sorted halves\n    left_index, right_index = 0, 0\n    merged_list = []",
        "num_ids": 142
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        sum = n % 10 + sum_digits(n // 10)\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 29
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return (n%10 + sum_digits(n//10))\n",
        "num_ids": 30
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(n / 10)\n",
        "num_ids": 29
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n%10+sum_digits(n//10)\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(int(n / 10))\n",
        "num_ids": 35
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(d) for d in str(n)])\n",
        "num_ids": 19
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(int(n / 10))\n",
        "num_ids": 31
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digits_sum = 0\n    while n > 0:\n        digits_sum += n % 10\n        n //= 10\n    return digits_sum\n",
        "num_ids": 39
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #flag = True\n    for i in range(len(list1)-1):\n        if(list1[i] <= list1[i+1]):\n            #flag = True\n            pass\n        else:\n            return False\n    return True\n    \ndef main():\n    #list1 = [1,2,3,4,5,6,7,8,9,10]\n    list1 = [1,2,3,3,3,3,4,4,5,6]\n    #list1 = [1,2,3,4]\n    print(issort_list(list1))\n",
        "num_ids": 147
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list2 = list1.copy()\n    list2.sort()\n    if list1 == list2:\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 44
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n",
        "num_ids": 13
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    is_sorted = True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            is_sorted = False\n            break\n    \n    if is_sorted:\n        return True\n    else:\n        return False\n",
        "num_ids": 75
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n",
        "num_ids": 13
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    if list1[0] > list1[1]:\n        return False\n    return issort_list(list1[1:])\n",
        "num_ids": 49
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if (list1[i] > list1[i + 1]):\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>=list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        if i < len(list1)-1:\n            if list1[i]>list1[i+1]:\n                return False\n        else:\n            return True\n    return True\n    \nprint(issort_list([1,2,3,4,5,6,7]))\n",
        "num_ids": 84
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}]*length\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    #return [{}] * length\n    #return [{} for i in range(length)]\n    return list(map(dict, itertools.repeat({}, length)))\n",
        "num_ids": 44
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length <= 0:\n        return []\n    return [{} for i in range(length)]\n",
        "num_ids": 26
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict = {}\n    for _ in range(length):\n        empty_dict.append(dict())\n    return empty_dict\n",
        "num_ids": 34
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dicts = [{}]*length\n    return list_of_dicts\n",
        "num_ids": 26
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # list1 = [['dog', 'cat', 'horse', 'goat','mouse', 'elephant'], ['grant','michael', 'hector', 'brandon', 'carter', 'julie']]\n    for i in list1:\n        i.sort()\n    return list1\n",
        "num_ids": 73
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sort_list = []\n    for i in list1:\n        sort_list.append(sorted(i))\n    return sort_list\n",
        "num_ids": 36
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(sorted(i))\n    return new_list\n",
        "num_ids": 36
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sublist.sort()\n        sorted_list.append(sublist)\n    return sorted_list\n",
        "num_ids": 44
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Initialize a variable to hold the sorted sublists\n    sorted_list = []\n",
        "num_ids": 23
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for item in list1:\n        item.sort()\n        \n    return list1\n    \n    \n",
        "num_ids": 27
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #list1 = [['Kotlin', 'Swift', 'Python'], ['c#', 'c++', 'haskell'], ['Java', 'Ruby', 'Go']]\n",
        "num_ids": 45
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort(key = lambda x: x[0])\n    return list1\n",
        "num_ids": 23
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for sublist in list1:\n        sublist.sort()\n        list2.append(sublist)\n    return list2\n",
        "num_ids": 39
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # initialize list of lists\n    new_list = []\n    # create a for loop to iterate through list of lists\n    for l in list1:\n        # create an empty sublist\n        sub_list = []\n        # create a for loop to iterate through each element in l\n        for element in l:\n            # append each element to sub_list\n            sub_list.append(element)\n        # append sub_list to new_list\n        new_list.append(sub_list)\n    # create an empty list to store sorted strings\n    sorted_list = []\n    # create a for loop to iterate through new_list\n    for l in new_list:\n        # sort l\n        l.sort()\n        # create a for loop to iterate through l\n        for element in l:\n            # append each element to sorted_list\n            sorted_list.append(element)\n    return sorted_list\n",
        "num_ids": 217
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in range(len(nums)):\n        unique_nums = []\n        for j in range(len(nums[i])):\n            if nums[i][j] not in unique_nums:\n                unique_nums.append(nums[i][j])\n        nums[i] = unique_nums\n    return nums\n",
        "num_ids": 88
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return sorted(set(nums))\n",
        "num_ids": 12
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in nums:\n        nums.sort()\n        unique_nums = []\n        for num in nums:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums\n",
        "num_ids": 62
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(reduce(lambda x,y: x + y, nums)))\n",
        "num_ids": 24
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    uniques = list(set(nums))\n    return uniques\n",
        "num_ids": 19
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_lst = list(nums)\n    for i in nums_lst:\n        nums_lst.pop(nums_lst.index(i))\n    return nums_lst\n",
        "num_ids": 54
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n",
        "num_ids": 12
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = [eval(nums[i]) for i in range(len(nums))]\n    #print(nums)\n    unique_nums = set()\n    unique_nums_list = []\n    for i in nums:\n        for j in i:\n            unique_nums.add(j)\n    for num in unique_nums:\n        unique_nums_list.append(num)\n    print(unique_nums_list)\n    return len(unique_nums_list)\n",
        "num_ids": 125
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    unique = []\n    for num in nums:\n        if num not in seen:\n            unique.append(num)\n            seen.add(num)\n    return unique\n",
        "num_ids": 49
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # if len(list_data)==1:\n    #     return 1\n    # else:\n    #     return list_data[0]*unique_product(list_data[1:])\n",
        "num_ids": 49
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    dict_data = {}\n    for i in list_data:\n        if i not in dict_data:\n            dict_data[i] = 1\n        else:\n            dict_data[i] += 1\n    print(dict_data)\n    print('Unique products: ', prod([i**dict_data[i] for i in dict_data]))\n",
        "num_ids": 86
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for data in list_data:\n        if list_data.count(data) == 1:\n            product *= data\n    return product\n",
        "num_ids": 40
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10]\n    return(np.prod(np.unique(list_data)))\n",
        "num_ids": 160
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1,2,3,1,2,3,1,1,4,5,6,7,8,9,9,4,5,6,7,8,9,9]\n    product = 1\n    for i in list_data:\n        product = product * i\n    return product\n",
        "num_ids": 78
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for item in unique_list:\n        product *= item\n    print(product)\n    ",
        "num_ids": 43
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if(len(list_data)>0):\n        unique_numbers = set(list_data)\n        product = 1\n        for i in unique_numbers:\n            product = product * i\n        print(product)\n    else:\n        print(0)\n",
        "num_ids": 66
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = list(set(list_data))\n    prod = 1\n    for num in list_data:\n        prod *= num\n    return prod\n",
        "num_ids": 42
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product = product * number\n    print(f'Unique product is {product}')\n",
        "num_ids": 50
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for item in list_data:\n        if item not in unique_list:\n            unique_list.append(item)\n    print(unique_list)\n    result = 1\n    for item in unique_list:\n        result = result * item\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    print('\\n<--Function -->\\n')\n    SA=math.pi*(r**2) + 2*math.pi*r*h\n    print('\\nSurface area of a Cylinder =',SA,'\\n')\n    return SA\n",
        "num_ids": 63
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*math.pi*r*(r + h)\n    return surfacearea\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*(r**2)*h\n    return volume\n",
        "num_ids": 20
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.14159*r*r+3.14159*r*h\n",
        "num_ids": 22
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    area = 2 * pi * r * (r + h)\n    return(area)\n",
        "num_ids": 29
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    a = pi * r**2\n    b = 2 * pi * r * h\n    s = a + b\n    return s\n",
        "num_ids": 41
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    print(3.14*(r**2)*h)\n",
        "num_ids": 17
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265\n    s = 2 * pi * r * (r + h)\n    return s\n",
        "num_ids": 30
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265\n    a = 2*pi*r*h\n    b = 2*pi*r*r\n    c = pi*r*r\n    total = a + b + c\n    return total\n",
        "num_ids": 55
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*3.1415*r*(r+h)\n    print(\"the surface area is:\",surface_area)\n",
        "num_ids": 36
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*(r+h)\n",
        "num_ids": 18
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n",
        "num_ids": 18
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # compare lengths\n    if len(A) > len(B):\n        return False\n    # iterate over the sublist\n    for i in range(0, len(B) - len(A) + 1):\n        # compare each index of sublist with the list\n        for j in range(0, len(A)):\n            if B[i + j]!= A[j]:\n                break\n        else:\n            return True\n    return False",
        "num_ids": 108
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        if A==B:\n            return 1\n        else:\n            for i in range(len(B)):\n                if B[i]!=A[0]:\n                    return 0\n                else:\n                    A.pop(0)\n            if A==B:\n                return 1\n            else:\n                return 0\n    else:\n        return 0\n",
        "num_ids": 98
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array2(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array3(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array4(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array5(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array6(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array7(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array8(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array9(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array10(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array11(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array12(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array13(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array14(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array15(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array16(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array17(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array18(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array19(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array20(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A==B[i:i+len(A)]:\n            return True\n    return False\n        \ndef is_Sub_Array21(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n    ",
        "num_ids": 15
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i]==B[0]:\n            for j in range(len(B)):\n                if A[i+j]==B[j]:\n                    if j==len(B)-1:\n                        return True\n                else:\n                    break\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag = 0\n    n = len(A) \n    m = len(B) \n    for i in range(0, m-n+1): \n        j = 0\n        while (j < n) and (B[i+j] == A[j]): \n            j += 1\n        if (j == n): \n            flag = 1\n    if flag == 1: \n        print(\"List \" + A + \" is a Sublist of \" + B) \n    else: \n        print(\"List \" + A + \" is not a Sublist of \" + B) \n",
        "num_ids": 142
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    count=0\n    if(len(A)>len(B)):\n        return False\n    for i in range(len(B)):\n        if(B[i]==A[0]):\n            for j in range(1,len(A)):\n                if(A[j]!=B[i+j]):\n                    break\n                else:\n                    if(j==len(A)-1):\n                        count=1\n    if(count==1):\n        return True\n    else:\n        return False\n",
        "num_ids": 126
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Using naive method \n    # Checking len of B is equal to A \n    # if len(A) == len(B): \n    #     for i in range(len(A)): \n    #         if A[i] == B[i]: \n    #             print(A[i],end=\" \") \n    #     print() \n    # else: \n    #     print(\"None\") \n    \n    # Using Sliding window technique \n    # First we check whether len of B is equal to len of A or not \n    # if len(A) == len(B): \n    #     i = 0\n    #     j = 0\n    #     while j < len(A): \n    #         flag = 1\n    #         # print(i,j)\n    #         while i < len(B) and B[i] == A[j]: \n    #             # print(i,j,A[j])\n    #             i += 1\n    #             j += 1\n    #             if i == len(B): \n    #                 break\n    #         if j == len(A): \n    #             print(\"True\") \n    #             break\n    #         elif i > j: \n    #             flag = 0\n    #             break\n    #         elif i < j: \n    #             i = 0\n    #             j = 0\n    #     if flag == 0: \n    #         print(\"False\") \n    # else: \n    #     print(\"False\") \n    # O(n)\n    if len(B) == len(A) and len(B)!= 0: \n        if A in B: \n            return True\n        return False\n    else: \n        return False\n",
        "num_ids": 419
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n1 = len(A)\n    n2 = len(B)\n",
        "num_ids": 20
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while (n > 0):\n        factorial = factorial * n\n        n = n - 1\n    return factorial%10\nn = int(input())\nprint(last_Digit_Factorial(n))\n",
        "num_ids": 59
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n<0): \n        print(\"Factorial does not exist for negative numbers\")\n    elif (n==0): \n        return 1\n    else: \n        return n*last_Digit_Factorial(n-1)\n",
        "num_ids": 60
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # base case\n    if n == 0: \n        return 1\n    # calling the function itself recursively with n-1\n    return n * last_Digit_Factorial(n-1)\n",
        "num_ids": 50
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 1: \n        return 1\n    else: \n        return (n * last_Digit_Factorial(n-1))\nn = int(input('Enter a number: '))\nprint(last_Digit_Factorial(n))\n",
        "num_ids": 63
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return(math.factorial(n)%10)\n",
        "num_ids": 16
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        return 0\n    elif n==0:\n        return 1\n    else:\n        return n%10*last_Digit_Factorial(n//10)\n",
        "num_ids": 48
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    while (n > 1): \n        fact = fact * n \n        n = n - 1\n    return fact \n",
        "num_ids": 36
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    sum = 0\n    while n>0:\n        sum += n%10\n        n//=10\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return math.factorial(n) % 10\nn=int(input(\"Enter a number:\"))\nprint(last_Digit_Factorial(n))\n",
        "num_ids": 39
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while(n>=1):\n        factorial = factorial * n\n        n = n-1\n    print('Factorial of',n,'is',factorial)\n    return factorial % 10\ndef last_Digit_factorial_Recursive(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n==1):\n        return 1\n    else:\n        return n * last_Digit_factorial_Recursive(n-1)\ndef simpleInterest(p,t,r):\n    '''\n    Write a python function to find the simple interest of given three numbers.\n    '''\n    return p*t*r/100\ndef simpleInterest_Recursive(p,t,r):\n    '''\n    Write a python function to find the simple interest of given three numbers.\n    '''\n    if(t==0):\n        return p*r/100\n    else:\n        return (p+simpleInterest_Recursive(p,t-1,r))\ndef vowels_count(s):\n    '''\n    Write a python function to find the count of vowels in a given string.\n    '''\n    count = 0\n    vowels = ['a','e','i','o','u']\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\ndef reverse_string(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return s[::-1]\ndef reverse_string_recursive(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    if(len(s)==1):\n        return s\n    else:\n        return s[-1] + reverse_string_recursive(s[:-1])\ndef palindrome_check(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    return s==reverse_string(s)\ndef fibonacci(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\ndef factorial_of_number(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n*factorial_of_number(n-1)\ndef first_and_last(s):\n    '''\n    Write a python function to print first and last character of a given string.\n    '''\n    return (s[0],s[-1])\ndef minimum_number(s):\n    '''\n    Write a python function to find the minimum number of a given string.\n    '''\n    return min(s)\ndef print_vowels(s):\n    '''\n    Write a python function to find the vowels in a given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    for i in s:\n        if i in vowels:\n            print(i)\ndef maximum_number(s):\n    '''\n    Write a python function to find the maximum number of a given string.\n    '''\n    return max(s)\ndef number_of_occurrence(s,c):\n    '''\n    Write a python function to find the number of occurrence of a character in a string.\n    '''\n    return s.count(c)\ndef unique_element(s):\n    '''\n    Write a python function to find the unique element in a given string.\n    '''\n    for i in s:\n        if s.count(i)==1:\n            return i\ndef find_duplicates(s):\n    '''\n    Write a python function to find the duplicates in a given string.\n    '''\n    return list(set(s) - set(sorted(s)))\ndef unique_word(s):\n    '''\n    Write a python function to find the unique word in a given string.\n    '''\n    return list(set(s.split()))\ndef palindrome_number(n):\n    '''\n    Write a python function to find the palindrome number of a given number.\n    '''\n    temp = n\n    sum1 = 0\n    while n>0:\n        r = n%10\n        sum1 = sum1*10+r\n        n = n//10\n    return sum1\ndef palindrome_number_recursive(n):\n    '''\n    Write a python function to find the palindrome number of a given number.\n    '''\n    return n if palindrome_number(n)==n else palindrome_number_recursive(palindrome_number(n))\ndef reverse_number(n):\n    '''\n    Write a python function to reverse a number.\n    '''\n    if n < 0:\n        s = str(n)\n        l = list(s)\n        l.reverse()\n        r = ''\n        for i in l:\n            r += i\n        return int(r)\n    else:\n        return int(str(n)[::-1])\ndef reverse_number_recursive(n):\n    '''\n    Write a python function to reverse a number.\n    '''\n    if n<0:\n        s = str(n)[::-1]\n        return int(s)\n    else:\n        return int(str(n)[::-1])\ndef common_elements(l1,l2):\n    '''\n    Write a python function to find the common elements in two given lists.\n    '''\n    return list(set(l1) & set(l2))\ndef sum_of_squares_of_digits(n):\n    '''\n    Write a python function to find the sum of squares of digits of a given number.\n    '''\n    s = str(n)\n    l = list(s)\n    sum1 = 0\n    for i in l:\n        sum1 = sum1 + int(i)**2\n    return sum1\ndef sum_of_squares_of_digits_recursive(n):\n    '''\n    Write a python function to find the sum of squares of digits of a given number.\n    '''\n    return sum_of_squares_of_digits(sum_of_squares_of_digits(sum_of_squares_of_digits(n)))\ndef sum_of_factorials(n):\n    '''\n    Write a python function to find the sum of factorials of a given number.\n    '''\n    s = str(n)\n    l = list(s)\n    sum1 = 0\n    for i in l:\n        sum1 = sum1 + factorial_of_number(int(i))\n    return sum1\ndef sum_of_factorials_recursive(n):\n    '''\n    Write a python function to find the sum of factorials of a given number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n+sum_of_factorials_recursive(n-1)\ndef sum_of_factorials_of_digits(n):\n    '''\n    Write a python function to find the sum of factorials of digits of a given number.\n    '''\n    s = str(n)\n    l = list(s)\n    sum1 = 0\n    for i in l:\n        sum1 = sum1 + sum_of_factorials(int(i))\n    return sum1\ndef sum_of_factorials_of_digits_recursive(n):\n    '''\n    Write a python function to find the sum of factorials of digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return int(n%10) + sum_of_factorials_of_digits_recursive(int(n/10))\ndef factorial_of_sum(n):\n    '''\n    Write a python function to find the factorial of sum of digits of a given number.\n    '''\n    ",
        "num_ids": 3
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    assert(len(list1) == len(list2) == len(list3))\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result\n",
        "num_ids": 82
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = [item for item in zip(list1,list2,list3)]\n    return flat_list\n",
        "num_ids": 30
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # n=len(list1)\n    # if n==len(list2) and n==len(list3):\n    #     newlist=list1+list2+list3\n    #     print(newlist)\n    # else:\n    #     print(\"Error!\")\n    return [item for t in zip(list1, list2, list3) for item in t]\n",
        "num_ids": 93
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        res.append(list1[i])\n        res.append(list2[i])\n        res.append(list3[i])\n    return res\n",
        "num_ids": 57
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [elem for l in zip(list1,list2,list3) for elem in l]\n",
        "num_ids": 28
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3) or len(list2)!= len(list3):\n        return \"Inputs do not have the same length\"\n    else:\n        interleaved_list = []\n        for i in range(len(list1)):\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[i])\n            interleaved_list.append(list3[i])\n        return interleaved_list\n",
        "num_ids": 132
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for t in zip(list1,list2,list3) for x in t]\n",
        "num_ids": 26
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [val for pair in zip(list1,list2,list3) for val in pair]\n",
        "num_ids": 26
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved\n",
        "num_ids": 67
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved\n",
        "num_ids": 67
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(0,len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar\n",
        "num_ids": 69
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = (1,2,3,4,5)\n    test_tup2 = (1,2,3,4,6)\n    dissimilar = set(test_tup1).difference(test_tup2)\n    return dissimilar\n",
        "num_ids": 68
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [a for a in test_tup1 + test_tup2 if (test_tup1 + test_tup2).count(a) == 1]\n",
        "num_ids": 42
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissim_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissim_list.append(test_tup1[i])\n    return dissim_list\n",
        "num_ids": 73
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # TODO: start writing your code here\n    return None\n",
        "num_ids": 17
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1).symmetric_difference(set(test_tup2)))\n",
        "num_ids": 30
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    res = set1.difference(set2)\n    return sorted(list(res))\n",
        "num_ids": 50
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i,j in zip(test_tup1, test_tup2):\n        if i!= j:\n            dissimilar.append(i)\n            dissimilar.append(j)\n    return dissimilar\n",
        "num_ids": 63
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar_list.append(i)\n    return dissimilar_list\n",
        "num_ids": 53
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [i for i in test_tuple if even_fnc(i)]\n",
        "num_ids": 22
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [x for x in test_tuple if even_fnc(x)]\n",
        "num_ids": 22
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = tuple(test_tuple)\n    return tuple(filter(even_fnc, test_tuple))\n",
        "num_ids": 33
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = ()\n    for i in test_tuple:\n        if(isinstance(i, tuple)):\n            even_tuple += even_ele(i, even_fnc)\n        elif(isinstance(i, float)):\n            even_tuple += (i,)\n        elif(isinstance(i, str)):\n            even_tuple += (i,)\n        elif(isinstance(i, int)):\n            if(even_fnc(i)):\n                even_tuple += (i,)\n        else:\n            even_tuple += (i,)\n    return even_tuple\n",
        "num_ids": 152
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for each_tuple in test_tuple:\n        if type(each_tuple) is tuple:\n            even_fnc(each_tuple)\n        else:\n            return each_tuple\n",
        "num_ids": 51
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = ()\n    for i in test_tuple:\n        if even_fnc(i):\n            result += (i,)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = ()\n    for ele in test_tuple:\n        if even_fnc(ele):\n            even_tuple += (ele,)\n    return even_tuple\n    \nprint(\"-\" * 30)\nprint(even_ele(((2, 3, 4, 5, 6), (3, 4, 5, 6), (4, 5, 6, 7)), lambda x: len(x) % 2 == 0))\nprint(even_ele(('a', 'b', 'c', 'd', 'e'), lambda x: x.isalpha()))\n",
        "num_ids": 135
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for t in test_tuple:\n        if (type(t) == tuple) or (type(t) == list):\n            new_tuple = new_tuple + even_ele(t, even_fnc)\n        elif (type(t) == int) and even_fnc(t):\n            new_tuple = new_tuple + (t,)\n    return new_tuple\n",
        "num_ids": 105
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_ele(item, even_fnc)\n        elif even_fnc(item):\n            test_tuple.remove(item)\n    return test_tuple\n",
        "num_ids": 64
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # return (even_fnc(t) for t in test_tuple)\n    return map(even_fnc, test_tuple)\n    \n",
        "num_ids": 39
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + 2*s*s\n    \ndef lateral_surface_Area(b,s):\n    '''\n    Write a python function to find the lateral surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b*s + b*s + b*s)\n",
        "num_ids": 20
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = s*b + s*s*b*2\n    return surface_area\n",
        "num_ids": 25
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (0.5 * b * b) * s\n",
        "num_ids": 16
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_Area = b*s*1/2\n    print(\"The surface area of a square pyramid with a base edge of {0} and height of {1} is {2}\".format(b,s,surface_Area))\n",
        "num_ids": 55
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = b * b * s\n    return surface_area\n",
        "num_ids": 19
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    from math import sqrt\n    return (b*b*s)/(4*sqrt(2))\n",
        "num_ids": 27
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return round(((b**2)*s)/2,2)\n",
        "num_ids": 18
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base = float(input(\"Enter the base edge : \"))\n    height = float(input(\"Enter the height of the pyramid : \"))\n    s = (1/2) * base * height\n    print(\"The surface area of a square pyramid with a given base edge and height is : \",s,\" units\")\n",
        "num_ids": 72
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = (b**2) + (s**2)\n    r = a**0.5\n    sa = b*s + b*r + r*s\n    return sa\n    \nb = float(input(\"What is the base edge of the square pyramid? \"))\ns = float(input(\"What is the height of the square pyramid? \"))\nprint(f\"The surface area of the square pyramid is {surface_Area(b,s)}.\")\n    ",
        "num_ids": 108
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"Dictionary is empty\")\n        return True\n    else:\n        print(\"Dictionary is not empty\")\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return dict1\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('Empty')\n    else:\n        print('Not Empty')\n",
        "num_ids": 30
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('The dictionary is empty')\n        return True\n    else:\n        print('The dictionary is not empty')\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Dictionary is empty\")\n    else:\n        print(f\"Dictionary contains {len(dict1)} elements.\")\n",
        "num_ids": 43
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print(\"Dict has elements\")\n    else:\n        print(\"Dict is empty\")\n",
        "num_ids": 30
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False\n",
        "num_ids": 20
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return catalan(num)\n",
        "num_ids": 10
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    result = 0\n    for i in range(num):\n        result += catalan_number(i) * catalan_number(num - 1 - i)\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    catalan_num = 0\n    for i in range(num):\n        catalan_num += (4 * catalan_number(i) * catalan_number(num-1-i))\n    return catalan_num\n",
        "num_ids": 77
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return\n",
        "num_ids": 5
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return (catalan_number(num - 1) * (4 * num - 2)) // (num + 1)\n",
        "num_ids": 44
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    cache = [1, 1]\n    for i in range(2, num + 1):\n        cache.append(0)\n        for j in range(i):\n            cache[i] += cache[j] * cache[i - j - 1]\n    return cache[num]\n",
        "num_ids": 68
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if not num:\n        return 0\n    result = [1, 1]\n    for i in range(1, num):\n        result.append(result[i] * (4 * i + 2) // (i + 2))\n    return result[-1]\n",
        "num_ids": 64
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise Exception('Input must be positive.')\n    elif num == 0:\n        return 1\n    else:\n        return catalan_number(num - 1) * (4 * catalan_number(num - 1) + 2 * (num - 1)) // (num + 1)\n",
        "num_ids": 75
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    return sum(catalan_number(i) * catalan_number(num-1-i) for i in range(num))\n",
        "num_ids": 44
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    result = 1\n    for i in range(1, num+1):\n        result = result * (2*i+1)/(i+1)\n    return result\n    \ndef generator(value):\n    '''\n    Write a generator which yields the next Catalan number\n    after every call.\n    '''\n    \n    result = 1\n    for i in range(1, value+1):\n        result = result * (2*i+1)/(i+1)\n        yield result\n",
        "num_ids": 45
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # 1st Approach: using regex\n    result = re.findall(r'\\w+ly', text)\n    if not result:\n        print('No adverbs ending with ly found')\n        return None\n    for index, item in enumerate(result):\n        result[index] = item[:-2] + 'ly'\n    return result\n",
        "num_ids": 83
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    #Create an empty list for the results\n    result = []\n",
        "num_ids": 19
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'\\w*ly\\b')\n    mo = pattern.findall(text)\n    return mo\nprint(find_adverbs(\"Viktor is a very good runner and runner runner\"))\nprint(find_adverbs(\"She was running and running and running and running\"))\n",
        "num_ids": 73
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_end = r\"[ly]$\"\n    adverb_list = re.findall(adverb_end, text)\n    return adverb_list\nprint(find_adverbs(\"I am flying to San Francisco\"))\nprint(find_adverbs(\"The wolf howled out of the room\"))\n",
        "num_ids": 73
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in text:\n        if re.search(r'ly$',i):\n            result.append(i)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'(?<=[a-zA-Z0-9])(ly$|ly\\b)', text)\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r\"(ly\\w{0,7}ly)\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(match)\n",
        "num_ids": 45
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # result = re.findall(r'\\bl[^ly]ly\\b', text)\n    # print(result)\n    # print(text)\n    # print('\\n')\n    # for m in re.finditer(r'\\bl[^ly]ly\\b', text):\n    #     print(m.start(), m.end())\n    # return result\n    for m in re.finditer(r'\\bl[^ly]ly\\b', text):\n        print(m.start(), m.end())\n",
        "num_ids": 128
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[Aa]dv[ae]r(ly)\\b'\n    print(\"find_adverb(\\\"The adventures of Sinbad\")\n    match = re.search(pattern, text)\n    print(match.group())\n    print(match.start())\n    print(match.end())\n    \n    print(\"--------------------------------------------------------------------\")\n",
        "num_ids": 86
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    my_str = text\n    \n    result = re.findall(r'\\bl\\b',my_str)\n    print(result)\n    \nfind_adverbs('she was sick for two weeks')\n",
        "num_ids": 52
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, (-item[1], item[0]))\n        elif item[1] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-item[1], item[0]))\n    return [item[1] for item in heap]\n",
        "num_ids": 113
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    print(items)\n    return heapq.nlargest(n,items)\n",
        "num_ids": 33
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) == n:\n            heapq.heappushpop(heap, item)\n        else:\n            heapq.heappush(heap, item)\n    return heapq.nlargest(n, heap)\n",
        "num_ids": 74
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # your code goes here\n    heap = []\n    for item,price in items:\n        heapq.heappush(heap,(-price,item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    #print(heap)\n    result = []\n    for i in range(len(heap)):\n        result.append(heap[i][1])\n    return result\nprint(expensive_items([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5'), ('item4', '7.99')], 2))\n",
        "num_ids": 155
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n > len(items):\n        return []\n    else:\n        heap = []\n        for i in range(n):\n            heapq.heappush(heap,(-items[i][1],items[i][0]))\n        return [heapq.heappop(heap)[1] for i in range(n)]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2010
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        price = item[0]\n        name = item[1]\n        heapq.heappush(heap, (price,name))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    result = []\n    while heap:\n        price, name = heapq.heappop(heap)\n        result.append(name)\n    return result\n",
        "num_ids": 111
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item,price in items:\n        heapq.heappush(heap,(-price,item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n",
        "num_ids": 59
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # This is a O(n log n) solution.\n    # O(n log n) because O(n) time to create the minheap and O(n) time to pop the smallest values.\n    # O(n) space because minheap stores n/2 values.\n",
        "num_ids": 67
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    return [heapq.heappop(items) for _ in range(n)]\n",
        "num_ids": 35
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    most_expensive = heapq.nlargest(n,items,key=lambda x: x[1])\n    print(most_expensive)\nexpensive_items([('Item1', 23.5), ('Item2', 15.75),('Item3', 10.35)], 2)\n",
        "num_ids": 67
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    last_part = l[n:]\n    l = last_part + first_part\n    return l\n    \n    \ndef split_Arr2(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    new_list = []\n    for i in range(len(l)):\n        if i == n:\n            new_list.append(l[n])\n        new_list.append(l[i])\n    return new_list\n",
        "num_ids": 58
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[0:n]\n    l2 = l[n:]\n    return l2 + l1\n",
        "num_ids": 30
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n    \ndef sum_arr(l):\n    '''\n    Write a python function to sum all the elements of a list.\n    '''\n    return sum(l)\n    \ndef search_arr(l, n):\n    '''\n    Write a python function to search an element n in a list. If found return index of element else return -1.\n    '''\n    try:\n        return l.index(n)\n    except:\n        return -1\n    \ndef remove_arr(l, n):\n    '''\n    Write a python function to remove n from the list. If n is not found return the list.\n    '''\n    try:\n        l.remove(n)\n    except:\n        pass\n    return l\n    \ndef min_arr(l):\n    '''\n    Write a python function to return the minimum number from the array. If the list is empty return None\n    '''\n    if len(l) == 0:\n        return None\n    min_n = l[0]\n    for i in l:\n        if i < min_n:\n            min_n = i\n    return min_n\n    \ndef max_arr(l):\n    '''\n    Write a python function to return the maximum number from the array. If the list is empty return None\n    '''\n    if len(l) == 0:\n        return None\n    max_n = l[0]\n    for i in l:\n        if i > max_n:\n            max_n = i\n    return max_n\n    \ndef pop_arr(l):\n    '''\n    Write a python function to return the last element of the list and remove it from the list.\n    '''\n    if len(l) == 0:\n        return None\n    return l.pop()\n    \ndef insert_arr(l, n, i):\n    '''\n    Write a python function to insert n in the ith position in the list. If the list is too short return the list.\n    '''\n    if len(l) >= i:\n        l.insert(i, n)\n    return l\n    \ndef map_arr(l, f):\n    '''\n    Write a python function to map the function f to each element of the list l.\n    '''\n    return list(map(f, l))\n    \ndef filter_arr(l, f):\n    '''\n    Write a python function to filter the list l based on the function f.\n    '''\n    return list(filter(f, l))\n    \ndef reduce_arr(l, f):\n    '''\n    Write a python function to reduce the list l based on the function f.\n    '''\n    from functools import reduce\n    return reduce(f, l)\n    \ndef find_fib(n):\n    '''\n    Write a python function to return the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return find_fib(n-1) + find_fib(n-2)\n    \ndef reverse_str(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef reverse_arr(l):\n    '''\n    Write a python function to reverse a list.\n    '''\n    l.reverse()\n    return l\n    \ndef shuffle_arr(l):\n    '''\n    Write a python function to shuffle a list.\n    '''\n    import random\n    random.shuffle(l)\n    return l\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check if a string is palindrome.\n    '''\n    if len(s) < 2:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return is_palindrome(s[1:-1])\n    \ndef is_unique_arr(l):\n    '''\n    Write a python function to check if a list contains only unique elements.\n    '''\n    return len(l) == len(set(l))\n    \ndef merge_arr(l1, l2):\n    '''\n    Write a python function to merge two lists.\n    '''\n    return l1 + l2\n    \ndef sort_arr(l):\n    '''\n    Write a python function to sort a list.\n    '''\n    l.sort()\n    return l\n    \ndef sort_arr_reverse(l):\n    '''\n    Write a python function to sort a list in reverse order.\n    '''\n    l.sort(reverse=True)\n    return l\n    \ndef remove_duplicates_arr(l):\n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    return list(dict.fromkeys(l))\n    \ndef rotate_arr(l, n):\n    '''\n    Write a python function to rotate a list by n elements.\n    '''\n    return l[n:] + l[:n]\n    \ndef sum_arr_recursive(l):\n    '''\n    Write a python function to return the sum of elements of a list recursively.\n    '''\n    if len(l) == 0:\n        return 0\n    return l[0] + sum_arr_recursive(l[1:])\n    \ndef reverse_arr_recursive(l):\n    '''\n    Write a python function to reverse the list recursively.\n    '''\n    if len(l) == 0:\n        return []\n    return [l[-1]] + reverse_arr_recursive(l[:-1])\n    \ndef remove_value(l, n):\n    '''\n    Write a python function to remove n from the list l.\n    '''\n    if n in l:\n        l.remove(n)\n    return l\n    \ndef rearrange_arr(l, n):\n    '''\n    Write a python function to rearrange a list so that the element at index i moves to index i+n if i+n < len(l).\n    '''\n    for i in range(len(l)):\n        if (i+n) < len(l):\n            l[i], l[i+n] = l[i+n], l[i]\n    return l\n    \ndef search_min(l):\n    '''\n    Write a python function to return the minimum element in a list l. If the list is empty return None.\n    '''\n    if len(l) == 0:\n        return None\n    return min(l)\n    \ndef search_max(l):\n    '''\n    Write a python function to return the maximum element in a list l. If the list is empty return None.\n    '''\n    if len(l) == 0:\n        return None\n    return max(l)\n    \ndef search_occur(l, n):\n    '''\n    Write a python function to return the number of occurances of n in a list l. If n not in l return 0.\n    '''\n    return l.count(n)\n    \ndef sort_by_len(l):\n    '''\n    Write a python function to sort a list l by the length of the element in descending order.\n    '''\n    return sorted(l, key=len, reverse=True)\n    \ndef find_maximum_path(l, m, n):\n    '''\n    Write a python function to find the maximum path sum of a matrix with m rows and n columns.\n    '''\n    mat = [[0]*n for i in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                mat[i][j] = l[i][j]\n            elif i == 0:\n                mat[i][j] = mat[i][j-1] + l[i][j]\n            elif j == 0:\n                mat[i][j] = mat[i-1][j] + l[i][j]\n            else:\n                mat[i][j] = max(mat[i][j-1], mat[i-1][j]) + l[i][j]\n    return mat[m-1][n-1]\n    \ndef find_maximum_path_bruteforce(l, m, n):\n    '",
        "num_ids": 200
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:]\n",
        "num_ids": 14
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l_first = l[:n]\n    l_last = l[n:]\n    l_first.extend(l_last)\n    return l_first\n",
        "num_ids": 42
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    x = l.copy()\n    x.pop(n)\n    return l[:n] + x\n",
        "num_ids": 28
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[0:n]\n    l2 = l[n:]\n    return l1+l2\n",
        "num_ids": 30
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "num_ids": 19
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # return tuple(listx)\n    print(tuple(listx))\nlist_tuple(['a', 1, 2])\n",
        "num_ids": 34
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if not listx:\n        return None\n    else:\n        return tuple(listx)\n",
        "num_ids": 25
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "num_ids": 19
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return(tuplex)\n",
        "num_ids": 21
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef list_string(listx):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    return ''.join(listx)\n",
        "num_ids": 12
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialise list\n    mylist = list(nums)\n    # sort the list\n    mylist.sort()\n    # output the biggest difference between the largest and the smallest value\n    return mylist[-1] - mylist[0]\n",
        "num_ids": 60
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n",
        "num_ids": 24
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return(nums[-1]-nums[0])\n",
        "num_ids": 24
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_value = max(nums)\n    min_value = min(nums)\n    big_difference = max_value - min_value\n    return big_difference\n",
        "num_ids": 45
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # for i in nums:\n    #     print(i)\n    nums.sort()\n    return nums[len(nums)-1]-nums[0]\n",
        "num_ids": 44
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n",
        "num_ids": 15
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    return max(nums) - min(nums)\n",
        "num_ids": 27
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = nums[0] - nums[len(nums)-1]\n    print(diff)\n",
        "num_ids": 28
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    sorted_list = sorted(nums)\n    return sorted_list[len(sorted_list)-1] - sorted_list[0]\n",
        "num_ids": 37
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if i ** 0.5 == int(i ** 0.5):\n            perfect_squares.append(i)\n    return perfect_squares\n",
        "num_ids": 58
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    # Iterate through all numbers between a and b\n    for i in range(a, b + 1):\n        # Check if the number is a perfect square\n        if math.sqrt(i) == int(math.sqrt(i)):\n            # If so, add it to our list of perfect squares\n            squares.append(i)\n",
        "num_ids": 88
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    return sum([x for x in range(a,b+1) if (x**.5) == (x**.5).is_integer()])\n",
        "num_ids": 54
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i**0.5)\n    return squares\n",
        "num_ids": 55
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    #perfect_squares = []\n",
        "num_ids": 11
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    lst_sqr = []\n    for i in range(a, b+1):\n        if int(i**0.5) == i**0.5:\n            lst_sqr.append(i)\n    return lst_sqr\n",
        "num_ids": 62
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            print(i)\n",
        "num_ids": 38
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for n in range(a,b+1):\n        if n**0.5 == int(n**0.5):\n            perfect_squares.append(n)\n    return perfect_squares\n",
        "num_ids": 58
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return sorted([x ** 2 for x in range(a, b + 1) if x ** 2 >= a and x ** 2 <= b])\n",
        "num_ids": 34
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    if a**2 == b**2:\n        return a**2\n    x = a**2\n    while x < b:\n        x += a\n        if x**2 == b**2:\n            return x**2\n    return -1\n",
        "num_ids": 76
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(complex(x,y))\n    return r\n",
        "num_ids": 22
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return(complex(x*cmath.cos(y),x*cmath.sin(y)))\n",
        "num_ids": 26
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.exp(complex(0,-1)*y),y\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x/cmath.exp(complex(0,1)*y),y\ndef matrix_multiplication(m1,m2):\n    '''\n    Write a function to calculate matrix multiplication.\n    '''\n    return [[sum([m1[i][k]*m2[k][j] for k in range(len(m1[0]))]) for j in range(len(m2[0]))] for i in range(len(m1))]\ndef transpose(m):\n    '''\n    Write a function to calculate the transpose of a matrix.\n    '''\n    return [[m[j][i] for j in range(len(m))] for i in range(len(m[0]))]\ndef quadratic_equation(a,b,c):\n    '''\n    Write a function to solve a quadratic equation.\n    '''\n    d = b**2 - 4*a*c\n    if d>0:\n        return (-b-cmath.sqrt(d))/(2*a),(-b+cmath.sqrt(d))/(2*a)\n    elif d==0:\n        return -b/(2*a)\n    else:\n        return 0,0\ndef fibonacci(n):\n    '''\n    Write a function to compute the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n-1)+fibonacci(n-2)\ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a number.\n    '''\n    if n == 0:\n        return 1\n    return n*factorial(n-1)\ndef reverse_string(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    return s[::-1]\ndef reverse_list(L):\n    '''\n    Write a function to reverse a list.\n    '''\n    return [L[-i] for i in range(1,len(L)+1)]\ndef rotate_list(L,n):\n    '''\n    Write a function to rotate a list by n.\n    '''\n    return L[n:]+L[:n]\ndef palindrome(s):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    return s == s[::-1]\ndef is_member(L,x):\n    '''\n    Write a function to check whether an element is a member of a list.\n    '''\n    return x in L\ndef has_duplicates(L):\n    '''\n    Write a function to check whether a list has duplicated elements.\n    '''\n    return len(L)!=len(set(L))\ndef has_adjacent_duplicates(L):\n    '''\n    Write a function to check whether a list has adjacent duplicated elements.\n    '''\n    for i in range(len(L)-1):\n        if L[i]==L[i+1]:\n            return True\n    return False\ndef get_adjacent_duplicates(L):\n    '''\n    Write a function to get all adjacent duplicated elements in a list.\n    '''\n    dup = []\n    for i in range(len(L)-1):\n        if L[i]==L[i+1]:\n            dup.append(L[i])\n    return dup\ndef delete_adjacent_duplicates(L):\n    '''\n    Write a function to delete all adjacent duplicated elements in a list.\n    '''\n    return [L[i] for i in range(len(L)) if i==0 or L[i]!=L[i-1]]\ndef reverse_pair(L):\n    '''\n    Write a function to reverse the pair of adjacent elements in a list.\n    '''\n    for i in range(0,len(L)-1,2):\n        L[i],L[i+1] = L[i+1],L[i]\n    return L\ndef odd_even_position(L):\n    '''\n    Write a function to find the odd and even positions of a list.\n    '''\n    evens = []\n    odds = []\n    for i in range(len(L)):\n        if i%2==0:\n            evens.append(L[i])\n        else:\n            odds.append(L[i])\n    return evens,odds\ndef remove_duplicates(L):\n    '''\n    Write a function to remove all duplicates in a list.\n    '''\n    return list(dict.fromkeys(L))\ndef get_count(L):\n    '''\n    Write a function to get the count of a element in a list.\n    '''\n    return sum(1 for x in L)\ndef remove_all(L,x):\n    '''\n    Write a function to remove all the occurrences of a specified element in a list.\n    '''\n    newL = []\n    for i in range(len(L)):\n        if L[i]!=x:\n            newL.append(L[i])\n    return newL\ndef search_minimum(L):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    return min(L)\ndef search_maximum(L):\n    '''\n    Write a function to find the maximum value in a list.\n    '''\n    return max(L)\ndef remove_minimum(L):\n    '''\n    Write a function to remove the minimum value in a list.\n    '''\n    L.remove(min(L))\n    return L\ndef remove_maximum(L):\n    '''\n    Write a function to remove the maximum value in a list.\n    '''\n    L.remove(max(L))\n    return L\ndef remove_nth(L,n):\n    '''\n    Write a function to remove the nth value in a list.\n    '''\n    L.pop(n)\n    return L\ndef swap_elements(L):\n    '''\n    Write a function to swap the first and last values in a list.\n    '''\n    L[0],L[-1]=L[-1],L[0]\n    return L\ndef rotate_left(L):\n    '''\n    Write a function to rotate a list left.\n    '''\n    return [L[(i+1)%len(L)] for i in range(len(L))]\ndef rotate_right(L):\n    '''\n    Write a function to rotate a list right.\n    '''\n    return [L[(i+len(L)-1)%len(L)] for i in range(len(L))]\ndef remove_all_but_one(L):\n    '''\n    Write a function to remove all values other than the first value.\n    '''\n    L.pop(1)\n    return L\ndef print_matrix(m):\n    '''\n    Write a function to print a matrix in a human readable format.\n    '''\n    for row in m:\n        print(row)\ndef matrix_addition(m1,m2):\n    '''\n    Write a function to add two matrices.\n    '''\n    return [[m1[i][j]+m2[i][j] for j in range(len(m1[0]))] for i in range(len(m1))]\ndef matrix_subtraction(m1,m2):\n    '''\n    Write a function to subtract two matrices.\n    '''\n    return [[m1[i][j]-m2[i][j] for j in range(len(m1[0]))] for i in range(len(m1))]\ndef matrix_multiplication_by_constant(m,c):\n    '''\n    Write a function to multiply a matrix by a constant.\n    '''\n    return [[m[i][j]*c for j in range(len(m[0]))] for i in range(len(m))]\ndef matrix_transpose(m):\n    '''\n    Write a function to transpose a matrix.\n    '",
        "num_ids": 15
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y\n",
        "num_ids": 47
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y = complex(x),complex(y)\n    radius = x.real\n    theta = y.imag\n    x = radius * cmath.cos(theta)\n    y = radius * cmath.sin(theta)\n    return x,y\n    \ndef rectangular_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x,y = complex(x),complex(y)\n    radius = x.real**2+y.real**2\n    theta = cmath.atan2(y.real,x.real)\n    return radius,theta\n    \n    \n",
        "num_ids": 61
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x_rect = r*math.cos(theta)\n    y_rect = r*math.sin(theta)\n    return (x_rect,y_rect)\n",
        "num_ids": 55
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r, phi = x, y\n    x = r*cmath.cos(phi)\n    y = r*cmath.sin(phi)\n    return x,y\n",
        "num_ids": 44
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z=complex(x,y)\n    z=cmath.polar(z)\n    z=cmath.rect(z[0],z[1])\n    z=round(z.real,4),round(z.imag,4)\n    return z\n",
        "num_ids": 65
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y\ndef polar_rect2(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y\ndef main():\n    x = 2\n    y = 3.14\n    x1,y1 = polar_rect(x,y)\n    print(x1,y1)\n    x2,y2 = polar_rect2(x1,y1)\n    print(x2,y2)\nmain()\n",
        "num_ids": 110
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=int(input())\n    theta=int(input())\n    #Assumed that theta is in radians\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    print(x.real,y.real)\n",
        "num_ids": 71
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n    return newList\n    \ndef same_List(newList): \n    '''\n    Write a python function to add 'age' to all the elements in a list.\n    '''\n    newList = [x+10 for x in newList]\n    print(newList)\n    return newList\n    \ndef even_List(newList): \n    '''\n    Write a python function to add 'age' to all the even elements in a list.\n    '''\n    newList = [x for x in newList if x%2==0]\n    print(newList)\n    return newList\n",
        "num_ids": 33
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n    return newList\n",
        "num_ids": 39
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(\"Original list : \", newList)\n    length=len(newList)\n    temp=newList[0]\n    newList[0]=newList[length-1]\n    newList[length-1]=temp\n    print(\"After swapping: \",newList)\n",
        "num_ids": 66
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n    return newList\n",
        "num_ids": 39
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    lastElement = newList[-1]\n    newList[-1] = newList[0]\n    newList[0] = lastElement\n    return newList\n",
        "num_ids": 51
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\nprint(swap_List([1,2,3,4,5]))\n",
        "num_ids": 51
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_ele = newList[0]\n    last_ele = newList[-1]\n    newList[-1] = first_ele\n    newList[0] = last_ele\n",
        "num_ids": 48
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n",
        "num_ids": 45
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size-1]\n    newList[size-1] = temp\n    return newList\n",
        "num_ids": 51
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def factorial(n):\n        f = 1\n        for i in range(1, n+1):\n            f *= i\n        return f\n    \n    def binomialCoeff(n,k):\n        if n == k or k == 0:\n            return 1\n        elif k > n:\n            return 0\n        return factorial(n) / (factorial(k) * factorial(n-k))\n    \n    return sum([binomialCoeff(n,k) for k in range(0,n+1)])\n",
        "num_ids": 132
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #k is the index of the term\n    res = 1\n    if (n>=k):\n        for i in range(k):\n            res = res*(n-i)\n            res = res/float(i+1)\n    return(res)\n    \n",
        "num_ids": 66
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (factorial(n) / (factorial(k) * factorial(n - k))) \n",
        "num_ids": 27
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = [[0 for i in range(k + 1)] for j in range(n + 1)] \n    for i in range(n + 1): \n        for j in range(min(i, k) + 1): \n            if j == 0 or j == i: \n                coeff[i][j] = 1\n            else: \n                coeff[i][j] = (coeff[i - 1][j - 1] +\n                                coeff[i - 1][j]) \n    return coeff[n][k] \ndef find_binomial(n,k,ans):\n    coeff = binomial_Coeff(n,k) \n    print(coeff,n,k,ans)\n    ans = ans + coeff \n    if n == k or k == 0:\n        return ans\n    return find_binomial(n-1,k,ans)\ndef find_binomial_recursive(n,k):\n    global count\n    count += 1\n    if n == k or k == 0:\n        return 1\n    return find_binomial_recursive(n-1,k) + find_binomial_recursive(n-1,k-1)\n",
        "num_ids": 286
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # (n k) = nCk\n    # (n n - k) = (n - k)Ck\n    # nCk = n! / ((n - k)! * k!)\n",
        "num_ids": 48
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(1, k+1):\n        res = res * (n-i+1) // i\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k < 0 or k > n: \n        return 0\n    if k == 0 or k == n: \n        return 1\n",
        "num_ids": 34
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if k == 0:\n        return 1\n    return (binomial_Coeff(n-1, k) + binomial_Coeff(n-1, k-1))\n",
        "num_ids": 68
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return sum(binomial(n,i)*binomial(n,k-i) for i in range(k+1))\n",
        "num_ids": 32
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # C = [[0 for i in range(k)] for j in range(n+1)] \n    # for i in range(n+1):\n    #     for j in range(min(i,k) + 1):\n    #         if j == 0 or j == i:\n    #             C[i][j] = 1\n    #         else:\n    #             C[i][j] = (i) * C[i-1][j-1] + C[i-1][j]\n    # return sum(C[n][k-1:])\n    return factorial(n) // (factorial(k) * factorial(n-k))\n",
        "num_ids": 159
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    lista = ip.split('.')\n    for i in range(len(lista)):\n        if lista[i] == '0':\n            lista[i] = ''\n    newip = \".\".join(lista)\n    return newip\ndef is_isbn_or_key(word):\n    '''\n    Write a function to check whether a string is a valid ISBN-10 or ISBN-13.\n    '''\n    isbn_or_key = re.search(r\"\\b[\\d\\-]+\\b\",word)\n    if isbn_or_key:\n        isbn_or_key = isbn_or_key.group()\n        if len(isbn_or_key) == 13 or len(isbn_or_key) == 10:\n            if isbn_or_key.isdigit():\n                return True\n    return False\ndef is_email(email):\n    '''\n    Write a regular expression to check an email address is in a given format.\n    '''\n    reg_ex = re.search(r'\\b[\\w._%+-]+@\\w+\\.\\w+\\.?\\w+\\b',email)\n    if reg_ex:\n        return True\n    return False\ndef most_frequent_word(paragraph):\n    '''\n    Write a Python function that returns the most frequent word in a given paragraph.\n    '''\n    paragr = paragraph.split()\n    paragr_set = set(paragr)\n    count = dict()\n    for word in paragr_set:\n        count[word] = paragr.count(word)\n    max_count = max(count.values())\n    for word, count in count.items():\n        if count == max_count:\n            return word\ndef sum_of_intervals(intervals):\n    '''\n    Write a function that returns the sum of two intervals.\n    '''\n    sum_intervals = []\n    for i in range(len(intervals)):\n        for j in range(len(intervals)):\n            if i!= j:\n                new_interval = (min(intervals[i][0],intervals[j][0]),max(intervals[i][1],intervals[j][1]))\n                sum_intervals.append(new_interval)\n    return sum_intervals\ndef insert_interval(intervals):\n    '''\n    Write a function that inserts an interval into a list of intervals so that the resulting list is sorted in \n    non-decreasing order of the start intervals.\n    '''\n    for i in range(len(intervals)):\n        for j in range(len(intervals)):\n            if i!= j:\n                if intervals[i][0] > intervals[j][0]:\n                    temp = intervals[i]\n                    intervals[i] = intervals[j]\n                    intervals[j] = temp\n    return intervals\ndef return_list_of_departments(employees):\n    '''\n    Write a function that returns a list of departments for a given list of employees.\n    '''\n    employees_dep = {}\n    for employee in employees:\n        if employee.get_department() not in employees_dep:\n            employees_dep[employee.get_department()] = 1\n        else:\n            employees_dep[employee.get_department()] += 1\n    return employees_dep.keys()\ndef return_list_of_departments_2(employees):\n    '''\n    Write a function that returns a list of departments for a given list of employees.\n    '''\n    department = set()\n    for employee in employees:\n        department.add(employee.get_department())\n    return department\ndef common_child(s1, s2):\n    '''\n    Write a function to check if two strings share a common child string.\n    '''\n    #return s1.find(s2)\n    if len(s1) < len(s2):\n        s1, s2 = s2, s1\n    #print('Original S1:', s1, 'Original S2:', s2)\n    i, j = 0, 0\n    while i < len(s1) and j < len(s2):\n        if s1[i] == s2[j]:\n            #print(i, j)\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n    #print('i:', i, 'j:', j)\n    if i == len(s1):\n        return s2[0:j]\n    return False\ndef remove_duplicate_chars(input_str):\n    '''\n    Write a function to remove duplicate characters in a string without using any inbuilt functions like set, dict, etc.\n    '''\n    char_set = set()\n    for i in range(len(input_str)):\n        if input_str[i] not in char_set:\n            char_set.add(input_str[i])\n    return \"\".join(list(char_set))\ndef remove_duplicate_chars_2(input_str):\n    '''\n    Write a function to remove duplicate characters in a string without using any inbuilt functions like set, dict, etc.\n    '''\n    list_str = list(input_str)\n    #print('Input String:', input_str)\n    #print('List:', list_str)\n    char_set = set()\n    for i in range(len(list_str)):\n        if list_str[i] not in char_set:\n            char_set.add(list_str[i])\n            list_str[i] = ''\n    #print('List after removing duplicate:', list_str)\n    return \"\".join(list_str)\ndef find_duplicates(input_str):\n    '''\n    Write a function to find all the duplicate characters in a string.\n    '''\n    duplicates = set()\n    for i in range(len(input_str)):\n        if input_str.count(input_str[i]) > 1:\n            duplicates.add(input_str[i])\n    return duplicates\ndef find_duplicates_2(input_str):\n    '''\n    Write a function to find all the duplicate characters in a string.\n    '''\n    duplicates = set()\n    for i in range(len(input_str)):\n        if input_str.count(input_str[i]) > 1:\n            duplicates.add(input_str[i])\n    return duplicates\ndef find_duplicates_3(input_str):\n    '''\n    Write a function to find all the duplicate characters in a string.\n    '''\n    duplicates = []\n    for i in range(len(input_str)):\n        if input_str.count(input_str[i]) > 1 and input_str[i] not in duplicates:\n            duplicates.append(input_str[i])\n    return duplicates\ndef palindrome_permutation(input_str):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    input_str = input_str.replace(' ','').lower()\n    freq_char = dict()\n    for c in input_str:\n        if c in freq_char:\n            freq_char[c] += 1\n        else:\n            freq_char[c] = 1\n    odd_count = 0\n    for v in freq_char.values():\n        if v % 2 == 1:\n            odd_count += 1\n    if len(input_str) % 2 == 0 and odd_count > 1:\n        return False\n    elif len(input_str) % 2 == 1 and odd_count > 0:\n        return False\n    return True\ndef palindrome_permutation_2(input_str):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    input_str = input_str.replace(' ','').lower()\n    freq_char = dict()\n    for c in input_str:\n        if c in freq_char:\n            freq_char[c] += 1\n        else:\n            freq_char[c] = 1\n    odd_count = 0\n    fo",
        "num_ids": 82
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.search(r'\\.0+',ip):\n        return re.sub(r'\\.0+','',ip)\n    else:\n        return ip\n",
        "num_ids": 41
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    a = re.search(r'(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])',ip)\n    return a.group(0)\n",
        "num_ids": 116
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #regex\n    #regex = r'((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))'\n    #regex = r'^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$'\n    regex = r'^(([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n    if re.match(regex, ip):\n        return ip.replace(\" \", \"\")\n    else:\n        return \"Please enter a valid IPv4 Address!\"\n",
        "num_ids": 300
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0(?P<n_zeros>\\d+)', r'\\g<n_zeros>', ip)\n",
        "num_ids": 39
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    #return re.sub(r\"^0\", '', ip)\n",
        "num_ids": 21
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #Your code here\n    ip=str(ip)\n    return re.sub('^0+','',ip)\n",
        "num_ids": 30
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('\\.0+', '.', ip)\n",
        "num_ids": 18
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.match('^0+\\.[0-9]+',ip):\n        ip=re.sub('^0+\\.','',ip)\n    return ip\n",
        "num_ids": 42
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if '.' in ip:\n        split_ip = ip.split('.')\n        for i, val in enumerate(split_ip):\n            split_ip[i] = str(int(val))\n        return '.'.join(split_ip)\n    elif ':' in ip:\n        split_ip = ip.split(':')\n        for i, val in enumerate(split_ip):\n            split_ip[i] = str(int(val, 16))\n        return ':'.join(split_ip)\n    else:\n        return ip\n",
        "num_ids": 135
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=0\n    odd=0\n    for i in list1:\n        if(i%2==0):\n            even+=1\n        else:\n            odd+=1\n    return (even-odd)\n",
        "num_ids": 52
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = []\n    even = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even[0] - odd[0]\n",
        "num_ids": 61
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    for i in list1:\n        if i%2 == 0:\n            list2.append(i)\n    print(list2[0], list2[1])\n    print(list1[0], list1[1])\n    print(list1[0]-list2[0])\n    print(list1[1]-list2[1])\n",
        "num_ids": 90
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_odd = []\n    first_even = []\n    for index, num in enumerate(list1):\n        if index % 2 == 0:\n            first_even.append(num)\n        else:\n            first_odd.append(num)\n    return sum(first_even) - sum(first_odd)\n",
        "num_ids": 78
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # O(n)\n",
        "num_ids": 9
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # list1 = [1,2,3,4,5,6,7,8]\n    # first_odd = list1[1::2]\n    # first_even = list1[0::2]\n    # diff = [x1 - x2 for (x1, x2) in zip(first_odd, first_even)]\n    # diff = set(diff)\n    # diff = list(diff)\n    # diff.sort()\n    # return diff[0]\n    \n    # return sum(list1[::2]) - sum(list1[1::2])\n    odd_num = []\n    even_num = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_num.append(list1[i])\n        else:\n            odd_num.append(list1[i])\n    diff = even_num[0] - odd_num[0]\n    return diff\n    \n    \nlist1 = [1,2,3,4,5,6,7,8]\nprint(diff_even_odd(list1))\n",
        "num_ids": 264
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i%2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    diff_list = even_list[0] - odd_list[0]\n    return diff_list\n",
        "num_ids": 82
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for index in range(len(list1)):\n        if index % 2 == 0:\n            even.append(list1[index])\n        else:\n            odd.append(list1[index])\n",
        "num_ids": 60
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            list2.append(list1[i])\n    print(list2)\n    list2 = list2[0]\n    print(list2)\n    list3 = []\n    for i in range(len(list1)):\n        if i%2!= 0:\n            list3.append(list1[i])\n    print(list3)\n    list3 = list3[0]\n    print(list3)\n    diff_list = []\n    diff_list.append(list3 - list2)\n    print(diff_list)\n",
        "num_ids": 160
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    index = 0\n    for x in list1:\n        if (index % 2 == 0) and (index!= 0):\n            odd = x\n        elif (index % 2!= 0) and (index!= 0):\n            even = x\n        index += 1\n    print(odd - even)\n",
        "num_ids": 74
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if(n!=m):\n        return -1\n    flag = 0\n    for i in range(n) :\n        if(str1[i]!=str2[i]) :\n            flag = 1\n            break\n    if(flag==1) :\n        return -1\n    str1 = list(str1)\n    str2 = list(str2)\n    str1.sort()\n    str2.sort()\n    if(str1!=str2) :\n        return -1\n    str1 = ''.join(str1)\n    str2 = ''.join(str2)\n    cnt = 0\n    while(str1!=str2) :\n        for i in range(n) :\n            if(str1[i]!=str2[i]) :\n                p = str1.find(str2[i])\n                q = str2.find(str1[i])\n                if(p<q) :\n                    str1 = str1[:p]+str2[i]+str1[p+1:]\n                    str2 = str2[:q]+str1[i]+str2[q+1:]\n                    cnt+=1\n                else :\n                    str1 = str1[:q]+str2[i]+str1[q+1:]\n                    str2 = str2[:p]+str1[i]+str2[p+1:]\n                    cnt+=1\n                break\n    return cnt\n",
        "num_ids": 361
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def are_similar(str1, str2) : \n        length = len(str1) \n        count = 0\n        for i in range(0, length): \n            if (str1[i]!= str2[i]) : \n                count += 1\n        return count \n",
        "num_ids": 72
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n",
        "num_ids": 22
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1) \n    m = len(str2) \n    if (n!= m): \n        return -1\n    str1 = '0b' + str1\n    str2 = '0b' + str2\n    count = 0\n    for i in range(2,n): \n        if (str1[i]!= str2[i]): \n            # If the current character is not matching then we need to replace \n            # that character with the next character from the other string \n            count += 1\n            # This will move the character to the next position in the string \n            # So, we need to replace the current character with the current character from the other string \n            # This will move the current character to the next position in the string \n            # So, we need to swap the current character with the next character from the other string \n            str1 = str1[:i] + str2[i] + str1[i+1:] \n            str2 = str2[:i] + str1[i] + str2[i+1:] \n    # return count \n    return count \nprint(min_Swaps(\"10010\",\"10110\"))\n",
        "num_ids": 283
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1) \n    m = len(str2) \n    \n    if(n!= m) : \n        return -1\n    \n    str1 = [int(i) for i in str1] \n    str2 = [int(i) for i in str2] \n",
        "num_ids": 76
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    #if len(str1)!= len(str2) : \n        #return -1\n    l1,l2 = len(str1),len(str2)\n    \n    i = 0\n    j = 0\n    while i < l1 and j < l2 : \n        if str1[i]!= str2[j] : \n            count += 1\n            if len(str1) == len(str2) :\n                if l1 > l2 : \n                    if str1[i+1:] == str2[j:] : \n                        break\n                elif str1[i:] == str2[j+1:] : \n                    break\n                else : \n                    j += 1\n            elif str1[i+1:] == str2[j:] : \n                break\n            else : \n                j += 1\n        i += 1\n        j += 1\n    return count\n",
        "num_ids": 220
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return bin(int(str1,2)^int(str2,2)).count('1')\n",
        "num_ids": 26
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return len(str1)-min(len(str1),len(str2))+len(str2)-min(len(str1),len(str2))\n",
        "num_ids": 40
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(0, len(str1)): \n        if str1[i]!= str2[i]: \n            count = count + 1\n    return count \n    \ndef min_Swaps_sol(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n=len(str1)\n    arr=[0 for i in range(n)]\n    for i in range(0,n):\n        arr[i]=i\n    for i in range(0,n):\n        if str1[i]!=str2[i]:\n            if i+1<n:\n                t=arr[i+1]\n            else:\n                t=arr[0]\n            if i+1<n:\n                arr[i]=arr[i+1]\n            else:\n                arr[i]=arr[0]\n            arr[i+1]=t\n    return arr\n",
        "num_ids": 146
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n    \n    if len_str1!= len_str2 :\n        return -1\n    \n    return min(get_swaps(str1,str2,len_str1),get_swaps(str2,str1,len_str1))\n    \ndef get_swaps(s1,s2,n) :\n    '''\n    Given two binary strings of same length n. The task is to count minimum number of swaps required to convert one string to other.\n    A swap is defined as exchanging the value of any two elements in the string. \n    '''\n    diff = 0\n    \n    for i in range(n) :\n        if s1[i]!= s2[i] :\n            diff += 1\n    return diff//2\n",
        "num_ids": 46
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sum = 0\n    for element in tuple_list:\n        sum += sys.getsizeof(element)\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print('Size of tuple',len(tuple_list)*2,'bytes')\n",
        "num_ids": 21
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = sys.getsizeof(tuple_list)\n    return tuple_size\n",
        "num_ids": 26
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size\ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    size = 0\n    for i in range(len(list_list)):\n        size += sys.getsizeof(list_list[i])\n    return size\nprint(\"Tuple Size: \" + str(tuple_size(tuple_list)))\nprint(\"List Size: \" + str(list_size(list_list)))",
        "num_ids": 79
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n    \ndef tuple_check(tuple_list):\n    '''\n    Write a function that takes a list and returns a tuple\n    containing the first and last elements of the list.\n    '''\n    first_elem = tuple_list[0]\n    last_elem = tuple_list[len(tuple_list) - 1]\n    return (first_elem, last_elem)\n    \ndef tuple_to_string(tuple_list):\n    '''\n    Write a function that takes a tuple and returns a string of its values.\n    '''\n    return_string = \"\"\n    for item in tuple_list:\n        return_string += str(item) + \" \"\n    return return_string\n    \ndef tuple_sort(tuple_list):\n    '''\n    Write a function that takes a list and returns a tuple of the sorted list.\n    '''\n    return tuple(sorted(tuple_list))\n",
        "num_ids": 15
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #print(tuple_list)\n    a = 0\n    for i in tuple_list:\n        a += sys.getsizeof(i)\n    return a\n",
        "num_ids": 42
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # your code here\n    return 0\n",
        "num_ids": 12
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    # First element of arr1, if smaller than the first element of arr2\n    comp = -1\n",
        "num_ids": 33
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[0] <= arr2[0]:\n        m = len(arr1)\n        n = len(arr2)\n    else:\n        m = len(arr2)\n        n = len(arr1)\n",
        "num_ids": 56
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if not arr1:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = 0\n    j = 0\n    while i + j < k:\n        if i == len(arr1):\n            return arr2[j + k - 1]\n        if j == len(arr2):\n            return arr1[i + k - 1]\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return min(arr1[i], arr2[j])\n",
        "num_ids": 177
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    # if arr1[k//2-1] > arr2[k//2-1]:\n    #     return find_kth(arr1[:k//2], arr2[k//2:], k - k//2)\n    # else:\n    #     return find_kth(arr1[k//2:], arr2[:k//2], k - k//2)\n    \n    m, n = len(arr1), len(arr2)\n    if k > m + n:\n        return find_kth(arr1, arr2[n:], k - n)\n    if k > n:\n        return find_kth(arr1[m:], arr2, k - m)\n    \n    if arr1[m//2-1] > arr2[n//2-1]:\n        return find_kth(arr1[:m//2], arr2[:n//2], k)\n    else:\n        return find_kth(arr1[m//2:], arr2[n//2:], k)\n    \n",
        "num_ids": 318
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    \n    if n == 0:\n        return arr2[k-1]\n    if m == 0:\n        return arr1[k-1]\n    \n    if k > n+m:\n        return -1\n",
        "num_ids": 72
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[len(arr1)//2] < arr2[len(arr2)//2]:\n        arr1, arr2 = arr2, arr1\n",
        "num_ids": 41
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # To solve this problem we will use this technique -> we will find the middle of each array and\n    # then compare kth element with it.\n    \n    # We will try to solve this problem using two pointer approach.\n    # There are two variables -> left and right pointer.\n    # We will try to do this in a single pass.\n    \n    # There are two steps -> (1) We will pick the middle index of two array.\n    #                      (2) we will compare the kth element with the middle element.\n    \n    # If k is equal to middle element, we will return it.\n    # If k is greater than middle element, we will assign left pointer to middle element.\n    # if k is less than middle element, we will assign right pointer to middle element.\n    \n    # We will do this for (1) -> we will calculate the middle index of two arrays.\n    # Here we will try to find the middle element using two pointer approach.\n    \n    # First we will consider two pointers left and right pointer.\n    # Initially, left and right pointer will be pointing to the first index of both array.\n    # We will then loop through the array.\n    \n    # Inside the loop we will check the condition:\n    # If left pointer value is smaller than right pointer value then we will assign the value of right\n    # pointer to middle element.\n    # Otherwise we will assign the value of left pointer to middle element.\n    \n    # After the loop is done, we will check the condition and return the value.\n    \n    # Now we will do this for (2) -> we will compare the kth element with the middle element.\n    # We will use the same logic.\n    \n    # As we have done for (1) and (2), we will use two variables -> left and right\n    # Initially, left and right pointer will be pointing to the first index of both array.\n    # We will then loop through the array.\n    \n    # Inside the loop we will check the condition:\n    # If k is less than middle element, we will assign right pointer to middle element.\n    # Otherwise we will assign the value of left pointer to middle element.\n    \n    # After the loop is done, we will check the condition and return the value.\n    \n    left = 0\n    right = 0\n    \n    while True:\n        # If left pointer is greater than or equal to right pointer, then return False.\n        # Means we have no element in between left and right pointer\n        if left >= right:\n            return False\n            \n        # This is the middle index.\n        mid = (left + right) // 2\n        \n        # If k is equal to middle element, we will return it.\n        if k == mid:\n            return arr1[k]\n        \n        # If k is greater than middle element, we will assign left pointer to middle element.\n        if k > mid:\n            left = mid\n        \n        # If k is less than middle element, we will assign right pointer to middle element.\n        if k < mid:\n            right = mid\n            \n",
        "num_ids": 700
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    if not arr1 or not arr2:\n        return -1\n        \n    if k < 1:\n        return -1\n        \n    l1 = len(arr1)\n    l2 = len(arr2)\n    \n    low = 0\n    high = l1+l2-1\n    \n    while low <= high:\n        mid = (low + high)//2\n        # if kth element is in the left array\n        if (k <= l1+mid) and (arr1[mid] == k):\n            return mid\n        # if kth element is in the right array\n        elif (k > mid) and (k <= l1+mid+1):\n            low = mid+1\n        else:\n            high = mid-1\n            \n    return -1\n    \nif __name__ == '__main__':\n    arr1 = [1, 2, 4, 5, 6]\n    arr2 = [2, 3, 6, 7]\n    \n    k = 3\n    \n    print(find_kth(arr1, arr2, k))\n    \n    k = 3\n    \n    print(find_kth(arr2, arr1, k))",
        "num_ids": 282
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binary_search(arr, left, right, key):\n        if left > right:\n            return -1\n        mid = left + (right - left) // 2\n        if arr[mid] == key:\n            return mid\n        if arr[mid] > key:\n            return binary_search(arr, left, mid - 1, key)\n        else:\n            return binary_search(arr, mid + 1, right, key)\n    \n    def find(arr1, arr2, k):\n        if arr1[0] < arr2[0]:\n            num = binary_search(arr2, 0, len(arr2) - 1, arr1[0])\n            if num == -1:\n                return None\n            elif num == 0:\n                return arr2[0]\n            else:\n                arr2 = arr2[:num] + arr2[num + 1:]\n                k -= 1\n                if k == 0:\n                    return arr2[0]\n                else:\n                    return find(arr1, arr2, k)\n        else:\n            num = binary_search(arr1, 0, len(arr1) - 1, arr2[0])\n            if num == -1:\n                return None\n            elif num == 0:\n                return arr1[0]\n            else:\n                arr1 = arr1[:num] + arr1[num + 1:]\n                k -= 1\n                if k == 0:\n                    return arr1[0]\n                else:\n                    return find(arr1, arr2, k)\n    \n    return find(arr1, arr2, k)\n",
        "num_ids": 380
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if number == sum:\n        return \"Number is armstrong\"\n    else:\n        return \"Number is not armstrong\"\n",
        "num_ids": 69
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    copy_number = number\n    while(number > 0):\n        remainder = number % 10\n        sum += remainder ** 3\n        number = int(number / 10)\n    if sum == copy_number:\n        print('The given number is armstrong.')\n    else:\n        print('The given number is not armstrong.')\n",
        "num_ids": 86
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n",
        "num_ids": 39
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_lst = [int(x) for x in str(number)]\n    result = sum([y**len(num_lst) for y in num_lst])\n    if result == number:\n        return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if(type(number)!= int):\n        raise Exception(\"Given number is not integer\")\n    if(number < 0):\n        raise Exception(\"Given number is negative\")\n    #List comprehension\n    return sum([int(i)**len(str(number)) for i in str(number)]) == number\n",
        "num_ids": 73
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit_numbers = [int(x) for x in str(number)]\n    power_numbers = []\n    for digit in digit_numbers:\n        power_numbers.append(digit ** len(digit_numbers))\n    if sum(power_numbers) == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # find the length of the number\n    num_len = len(number)\n    # initialize sum\n    sum = 0\n    # convert the number into a string\n    num = str(number)\n    # find the sum of the cube of each digit\n    for num in num:\n        sum += int(num) ** num_len\n    # check whether the sum is equal to the number\n    if sum == number:\n        # if yes, then print the number is an armstrong number\n        print(\"The number is an armstrong number.\")\n    # otherwise, print the number is not an armstrong number\n    else:\n        print(\"The number is not an armstrong number.\")\n",
        "num_ids": 156
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_list = [int(i) for i in str(number)]\n    armstrong_num = 0\n    for num in num_list:\n        armstrong_num += num**3\n    return armstrong_num\n    \ndef check_armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_list = [int(i) for i in str(number)]\n    armstrong_num = 0\n    for num in num_list:\n        armstrong_num += num**3\n    if armstrong_num == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 69
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number <= 0:\n        return \"Invalid Input. Please input positive number\"\n    number_as_string = str(number)\n    length = len(number_as_string)\n    sum = 0\n    for i in range(length):\n        sum += int(number_as_string[i]) ** length\n    if sum == number:\n        return \"Armstrong\"\n    else:\n        return \"Not an Armstrong Number\"\n",
        "num_ids": 102
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 0:\n        raise ValueError('Number cannot be negative')\n    temp = number\n    sum = 0\n    while temp > 0:\n        temp, rem = divmod(temp, 10)\n        sum += rem ** 3\n    if number == sum:\n        return True\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    n = number\n    for i in range(1,n+1):\n        sum = sum + i\n    avg = sum / n\n    print(\"Sum is {0}, average is {1:.2f}\".format(sum, avg))\n",
        "num_ids": 71
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    average = 0\n",
        "num_ids": 12
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #sum = 0\n    #avg = 0\n    #if number is 1:\n    #    sum = 1\n    #    avg = 1\n    #if number is greater than 1:\n    #    sum = number + number -1\n    #    avg = sum / number\n    #return sum, avg\n",
        "num_ids": 76
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number + 1):\n        total += i\n    print(\"Sum: \", total)\n    print(\"Average: \", total / number)\n    return total, total / number\n",
        "num_ids": 51
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 1:\n        return 1, 1\n",
        "num_ids": 15
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n",
        "num_ids": 13
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n",
        "num_ids": 12
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    average = sum / number\n    print(sum)\n    print(average)\n",
        "num_ids": 40
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number + 1):\n        sum = sum + i\n        average = sum / number\n    return average\n",
        "num_ids": 36
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number+1):\n        total+=i\n    average = total/number\n    return total,average\n",
        "num_ids": 36
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        return True\n    else : \n        return False\n    \ndef is_Even_Iterative(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    while (n > 0) : \n        if (n % 2 == 0) : \n            return True\n        else : \n            return False\n",
        "num_ids": 37
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return True if n % 2 == 0 else False\n",
        "num_ids": 14
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n    return None\n",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n%2 == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n    \n    \ndef is_Prime(n) :\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    count = 0\n    for i in range(2,n) :\n        if n%i == 0 :\n            count += 1\n    if count == 0 :\n        return True\n    else :\n        return False\n        \n        \ndef is_Palindrome(n) :\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    n1 = str(n)\n    n2 = str(n)[::-1]\n    if n1 == n2 :\n        return True\n    else :\n        return False\n    \n        \ndef is_Armstrong(n) :\n    '''\n    Write a python function to check whether the given number is armstrong or not.\n    '''\n    n1 = str(n)\n    total = 0\n    for i in n1 :\n        total += int(i)**3\n    if total == n :\n        return True\n    else :\n        return False\n        \n        \ndef is_Happy(n) :\n    '''\n    Write a python function to check whether the given number is happy or not.\n    '''\n    n1 = str(n)\n    total = 0\n    for i in n1 :\n        total += int(i)**2\n    if total == 1 :\n        return True\n    else :\n        return False\n        \n        \ndef is_Perfect(n) :\n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    sum1 = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            sum1 += i\n    if sum1 == n :\n        return True\n    else :\n        return False\n        \n        \ndef is_Abundant(n) :\n    '''\n    Write a python function to check whether the given number is abundant or not.\n    '''\n    sum1 = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            sum1 += i\n    if n < sum1 :\n        return True\n    else :\n        return False\n        \n        \ndef is_Sum_Of_Two_Perfect(n) :\n    '''\n    Write a python function to check whether the given number is sum of two perfect numbers or not.\n    '''\n    sum1 = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            sum1 += i\n    if sum1 < n :\n        return True\n    else :\n        return False\n        \n        \ndef is_Sum_Of_Two_Abundant(n) :\n    '''\n    Write a python function to check whether the given number is sum of two abundant numbers or not.\n    '''\n    sum1 = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            sum1 += i\n    if sum1 > n :\n        return True\n    else :\n        return False\n        \n        \ndef is_Sum_Of_Two_Sum_Of_Half(n) :\n    '''\n    Write a python function to check whether the given number is sum of two numbers which are sum of half of the given number or not.\n    '''\n    sum1 = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            sum1 += i\n    if sum1 < n :\n        sum2 = 0\n        for i in range(1,n) :\n            if sum1 + i < n :\n                sum2 += i\n        if sum2 < n :\n            return True\n        else :\n            return False\n    else :\n        return False\n        \n        \ndef is_Sum_Of_Two_Sum_Of_Half_Perfect(n) :\n    '''\n    Write a python function to check whether the given number is sum of two numbers which are sum of half of the given number which is perfect or not.\n    '''\n    sum1 = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            sum1 += i\n    if sum1 < n :\n        sum2 = 0\n        for i in range(1,n) :\n            if sum1 + i < n and is_Perfect(sum1 + i) :\n                sum2 += i\n        if sum2 < n :\n            return True\n        else :\n            return False\n    else :\n        return False\n        \n        \ndef is_Sum_Of_Three_Sum_Of_Half(n) :\n    '''\n    Write a python function to check whether the given number is sum of three numbers which are sum of half of the given number or not.\n    '''\n    sum1 = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            sum1 += i\n    if sum1 < n :\n        sum2 = 0\n        for i in range(1,n) :\n            if sum1 + i < n :\n                sum2 += i\n        if sum2 < n :\n            sum3 = 0\n            for i in range(1,n) :\n                if sum1 + i + i < n :\n                    sum3 += i\n            if sum3 < n :\n                return True\n            else :\n                return False\n        else :\n            return False\n    else :\n        return False\n        \n        \ndef is_Sum_Of_Three_Sum_Of_Half_Perfect(n) :\n    '''\n    Write a python function to check whether the given number is sum of three numbers which are sum of half of the given number which is perfect or not.\n    '''\n    sum1 = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            sum1 += i\n    if sum1 < n :\n        sum2 = 0\n        for i in range(1,n) :\n            if sum1 + i < n and is_Perfect(sum1 + i) :\n                sum2 += i\n        if sum2 < n :\n            sum3 = 0\n            for i in range(1,n) :\n                if sum1 + i + i < n and is_Perfect(sum1 + i + i) :\n                    sum3 += i\n            if sum3 < n :\n                return True\n            else :\n                return False\n        else :\n            return False\n    else :\n        return False\n        \n        \ndef is_Sum_Of_Five_Sum_Of_Half(n) :\n    '''\n    Write a python function to check whether the given number is sum of five numbers which are sum of half of the given number or not.\n    '''\n    sum1 = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            sum1 += i\n    if sum1 < n :\n        sum2 = 0\n        for i in range(1,n) :\n            if sum1 + i < n :\n                sum2 += i\n        if sum2 < n :\n            sum3 = 0\n            for i in range(1,n) :\n                if sum1 + i + i < n :\n                    sum3 += i\n            if sum3 < n :\n                sum4 = 0\n                for i in range(1,n) :\n                    if sum1 + i + i + i < n :\n                        sum4 += i\n                if sum4 < n :\n                    return True\n                else :\n                    return False\n            else :\n                return False\n        else :\n            return False\n    else :\n        return False\n        \n        \ndef is_Sum_Of_Five_Sum_Of_Half_Perfect(n) :\n    '''\n    Write a python function to check whether the given number is sum of five numbers which are sum of half of the given number which is perfect or not.\n    '''\n    sum1 = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            sum1 += i\n    if sum1 < n :\n        sum2 = 0\n        for i in range(1,n) :\n            if sum1 + i < n and is_Perfect(sum1 + i) :\n                sum2 += i\n        if sum2 < n :\n            sum3 = 0\n            for i in range(1,n) :\n                if sum1 + i + ",
        "num_ids": 121
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        print(\"The given number is even.\")\n    else :\n        print(\"The given number is odd.\")\n",
        "num_ids": 35
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n    \ndef find_even_number(l):\n    '''\n    Write a python function to find the even numbers from the given list.\n    '''\n    even_numbers = []\n    for number in l:\n        if is_Even(number):\n            even_numbers.append(number)\n    return even_numbers\n",
        "num_ids": 44
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = list(str1)\n    s_set = set(s)\n    for i in s_set:\n        if s.count(i) > 1:\n            return i\n    return None\n",
        "num_ids": 50
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return 'No repeating character'\n",
        "num_ids": 62
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) >= 2:\n            return str1[i]\n",
        "num_ids": 39
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in str1:\n        if d[i] > 1:\n            return i\n    return None\n",
        "num_ids": 69
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    str2 = set(str1)\n    for i in str2:\n        if str1.count(i)>1:\n            return i\n",
        "num_ids": 47
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(0, len(str1)):\n        if str1.count(str1[i])>1:\n            return str1[i]\n    return 'No Repeated Character Found'\n",
        "num_ids": 51
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #create a dictionary\n    str_dict={}\n    #loop through the string\n    for char in str1:\n        #if the character is in the dictionary add 1\n        if char in str_dict:\n            str_dict[char]+=1\n        #if not add it to the dictionary with a value of 1\n        else:\n            str_dict[char]=1\n    #loop through the dictionary and return the key for the value that is equal to 2\n    for key,value in str_dict.items():\n        if value==2:\n            return key\n    return None\n",
        "num_ids": 136
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Iterate over the string and store all the characters in a hash map\n    # When a duplicate is found, return the character\n    char_map = {}\n    for char in str1:\n        if char in char_map:\n            return char\n        else:\n            char_map[char] = True\n",
        "num_ids": 73
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return 'No repeated character'\n",
        "num_ids": 47
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    while n > 0:\n        if n % 2 == 0:\n            ludic_list.append(n)\n        n = n // 2\n    return ludic_list\n",
        "num_ids": 51
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        if luc(i) <= n:\n            ludic.append(luc(i))\n    return ludic\n",
        "num_ids": 44
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i == 1:\n            ludic.append(i)\n            continue\n        if i == 2:\n            ludic.append(i)\n            continue\n        if i == 3:\n            ludic.append(i)\n            continue\n        for j in range(1, i+1):\n            if i % j == 0:\n                ludic.append(i)\n                break\n    return ludic\n",
        "num_ids": 117
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n+1):\n        if is_ludic(i) == True:\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 48
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        sum_of_digits = sum([int(digit) for digit in str(i)])\n        if i == sum_of_digits:\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 70
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [2, 3, 5, 7]\n    for i in range(n - 4):\n        ludic.append(ludic[-1] + ludic[-2] + ludic[-3])\n    return ludic\n",
        "num_ids": 59
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 43
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1,n+1) if is_ludic(i)]\n",
        "num_ids": 26
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # check if n is less than 100\n    # if not, return a string with n as it is\n    if n < 100:\n        return str(n)\n",
        "num_ids": 40
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while True:\n        if check_ludic(i, n):\n            ludic.append(i)\n        i += 1\n        if i > n:\n            break\n    return ludic\n",
        "num_ids": 59
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip()\n    arr = s.split(\" \")\n    print(arr)\n    s = \" \".join(reversed(arr))\n    print(s)\n",
        "num_ids": 46
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    list_of_words = s.split(' ')\n    reversed_words = list_of_words[::-1]\n    return''.join(reversed_words)\n",
        "num_ids": 46
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split() takes the string and returns a list of words\n    return''.join(s.split()[::-1]) # splice the list\n    # return s.split()[::-1]\n    # return ''.join(list(s)[::-1]) # join with no delimiter\n    # return ''.join(reversed(s)) # use the reversed function\n",
        "num_ids": 90
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(' ')\n    s =''.join(reversed(s))\n    return s\n",
        "num_ids": 29
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    print(s.split())\n    print(s.split()[::-1])\n    return \" \".join(s.split()[::-1])\nprint(reverse_words(\"hello world\"))\n",
        "num_ids": 49
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(' ')\n    s =''.join(reversed(s))\n    return s\n",
        "num_ids": 29
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    lst = s.split()\n    return''.join(lst[::-1])\n",
        "num_ids": 24
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    import math\n    if num == 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                print(num,\"is not a prime number\")\n                print(i,\"times\",num//i,\"is\",num)\n                break\n        else:\n            print(num,\"is a prime number\")\n            \n    else:\n        print(num,\"is not a prime number\")\n        \nprime_num(233)\n",
        "num_ids": 104
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num > 2 and num % 2 == 0:\n        return False\n    else:\n        for n in range(3, int(num**0.5)+1, 2):\n            if num % n == 0:\n                return False\n        return True\n",
        "num_ids": 85
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num>1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n            return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, int(num / 2) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num%i == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    else:\n        for n in range(2, num):\n            if num % n == 0:\n                return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    is_prime = True\n    for i in range(2, num):\n        if num % i == 0:\n            is_prime = False\n    if is_prime:\n        print('The number is a prime number')\n    else:\n        print('The number is not a prime number')\n",
        "num_ids": 70
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, int(num/2)+1):\n        if num%i == 0:\n            return False\n    return True\n    \n    # If you've used the isPrime function in class, you can use the built-in\n    # check if a number is prime with the 'if num in list' syntax:\n    # if num in [1, 2, 3, 5, 7]:\n    #     return False\n    # else:\n    #     return True\n    \n    # TODO: Write your function here\n    pass\n    \n    \ndef next_prime(num):\n    '''\n    Write a function that returns the next prime number after the given number.\n    '''\n    if num <= 1:\n        return 2\n    else:\n        while not(prime_num(num)):\n            num += 1\n        return num\n    \n    # TODO: Write your function here\n    pass\n    \n    \ndef prime_factors(num):\n    '''\n    Write a function that returns a list of prime factors of the given number.\n    '''\n    i = 2\n    factors = []\n    while i*i <= num:\n        if num%i:\n            i += 1\n        else:\n            num //= i\n            factors.append(i)\n    if num > 1:\n        factors.append(num)\n    return factors\n    \n    # TODO: Write your function here\n    pass\n    \n    \ndef largest_prime_factor(num):\n    '''\n    Write a function that returns the largest prime factor of the given number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        for i in range(2, num//2+1):\n            if num%i == 0 and prime_num(i):\n                return i\n    return num\n    \n    # TODO: Write your function here\n    pass\n    \n    \ndef smallest_multiple(num):\n    '''\n    Write a function that returns the smallest number that is evenly divisible by\n    all of the numbers from 1 to the given number.\n    '''\n    i = 1\n    while True:\n        if all(i%n == 0 for n in range(1, num+1)):\n            return i\n        i += 1\n    \n    # TODO: Write your function here\n    pass\n    \n    \ndef main():\n    # Part 1\n    \n    print(\"Prime number check:\")\n    \n    print(\"1:\", prime_num(1))\n    print(\"2:\", prime_num(2))\n    print(\"3:\", prime_num(3))\n    print(\"4:\", prime_num(4))\n    print(\"5:\", prime_num(5))\n    print(\"6:\", prime_num(6))\n    \n    \n    print(\"\\nFactors of 12:\")\n    print(prime_factors(12))\n    \n    print(\"\\nNext prime of 12:\")\n    print(next_prime(12))\n    \n    print(\"\\nNext prime of 49:\")\n    print(next_prime(49))\n    \n    print(\"\\nNext prime of 32:\")\n    print(next_prime(32))\n    \n    \n    # Part 2\n    \n    print(\"\\nLargest prime factor of 600851475143:\")\n    print(largest_prime_factor(600851475143))\n    \n    \n    # Part 3\n    \n    print(\"\\nSmallest multiple of all numbers from 1 to 12:\")\n    print(smallest_multiple(12))\n    \n    \n    # Part 4\n    \n    # print(\"\\nPrime factorization of 24:\")\n    # print(prime_factors(24))\n    # print(\"\\n\")\n    \n    # print(\"\\nNext prime factor of 24:\")\n    # print(next_prime(24))\n    \n    # print(\"\\nNext prime factor of 24:\")\n    # print(next_prime(24))\n    \n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 464
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*(math.pi)/180\n    return radian\n",
        "num_ids": 20
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi*degree/180\ndef distance(lat1, lon1, lat2, lon2):\n    '''\n    Write a function to calculate the distance between two points on a sphere.\n    '''\n    phi1 = radian_degree(lat1)\n    phi2 = radian_degree(lat2)\n    dphi = radian_degree(lat2-lat1)\n    dlambda = radian_degree(lon2-lon1)\n    a = math.sin(dphi/2)*math.sin(dphi/2) + math.cos(phi1)*math.cos(phi2)*math.sin(dlambda/2)*math.sin(dlambda/2)\n    return 2*6371*math.atan2(math.sqrt(a),math.sqrt(1-a))\ndef geo_distance(lon1, lat1, lon2, lat2):\n    '''\n    Write a function to calculate the distance between two points on a sphere.\n    '''\n    phi1 = radian_degree(lat1)\n    phi2 = radian_degree(lat2)\n    dphi = radian_degree(lat2-lat1)\n    dlambda = radian_degree(lon2-lon1)\n    a = math.sin(dphi/2)*math.sin(dphi/2) + math.cos(phi1)*math.cos(phi2)*math.sin(dlambda/2)*math.sin(dlambda/2)\n    return 2*6371*math.atan2(math.sqrt(a),math.sqrt(1-a))\ndef geo_midpoint(lon1, lat1, lon2, lat2):\n    '''\n    Write a function to calculate the midpoint between two points on a sphere.\n    '''\n    phi1 = radian_degree(lat1)\n    phi2 = radian_degree(lat2)\n    dphi = radian_degree(lat2-lat1)\n    dlambda = radian_degree(lon2-lon1)\n    a = math.sin(dphi/2)*math.sin(dphi/2) + math.cos(phi1)*math.cos(phi2)*math.sin(dlambda/2)*math.sin(dlambda/2)\n    return 2*6371*math.atan2(math.sqrt(a),math.sqrt(1-a))\ndef geo_area(lon1, lat1, lon2, lat2, lon3, lat3):\n    '''\n    Write a function to calculate the area of a triangle on a sphere.\n    '''\n    phi1 = radian_degree(lat1)\n    phi2 = radian_degree(lat2)\n    phi3 = radian_degree(lat3)\n    dphi = radian_degree(lat3-lat1)\n    dlambda = radian_degree(lon3-lon1)\n    a = math.sin(dphi/2)*math.sin(dphi/2) + math.cos(phi1)*math.cos(phi2)*math.sin(dlambda/2)*math.sin(dlambda/2)\n    b = math.sin(dphi/2)*math.sin(dphi/2) + math.cos(phi2)*math.cos(phi3)*math.sin(dlambda/2)*math.sin(dlambda/2)\n    c = math.sin(dphi/2)*math.sin(dphi/2) + math.cos(phi1)*math.cos(phi3)*math.sin(dlambda/2)*math.sin(dlambda/2)\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef geo_area2(lon1, lat1, lon2, lat2, lon3, lat3):\n    '''\n    Write a function to calculate the area of a triangle on a sphere.\n    '''\n    phi1 = radian_degree(lat1)\n    phi2 = radian_degree(lat2)\n    phi3 = radian_degree(lat3)\n    dphi = radian_degree(lat3-lat1)\n    dlambda = radian_degree(lon3-lon1)\n    a = math.sin(dphi/2)*math.sin(dphi/2) + math.cos(phi1)*math.cos(phi2)*math.sin(dlambda/2)*math.sin(dlambda/2)\n    b = math.sin(dphi/2)*math.sin(dphi/2) + math.cos(phi2)*math.cos(phi3)*math.sin(dlambda/2)*math.sin(dlambda/2)\n    c = math.sin(dphi/2)*math.sin(dphi/2) + math.cos(phi1)*math.cos(phi3)*math.sin(dlambda/2)*math.sin(dlambda/2)\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef geo_centroid(lon1, lat1, lon2, lat2, lon3, lat3):\n    '''\n    Write a function to calculate the centroid of a triangle on a sphere.\n    '''\n    phi1 = radian_degree(lat1)\n    phi2 = radian_degree(lat2)\n    phi3 = radian_degree(lat3)\n    dphi = radian_degree(lat3-lat1)\n    dlambda = radian_degree(lon3-lon1)\n    a = math.sin(dphi/2)*math.sin(dphi/2) + math.cos(phi1)*math.cos(phi2)*math.sin(dlambda/2)*math.sin(dlambda/2)\n    b = math.sin(dphi/2)*math.sin(dphi/2) + math.cos(phi2)*math.cos(phi3)*math.sin(dlambda/2)*math.sin(dlambda/2)\n    c = math.sin(dphi/2)*math.sin(dphi/2) + math.cos(phi1)*math.cos(phi3)*math.sin(dlambda/2)*math.sin(dlambda/2)\n    s = (a+b+c)/2\n    return (2*c*math.cos(math.asin((a-b-c)/(2*math.sqrt(s*(s-a)*(s-b)*(s-c)))))-1)\ndef geo_midpoint2(lon1, lat1, lon2, lat2):\n    '''\n    Write a function to calculate the midpoint between two points on a sphere.\n    '''\n    phi1 = radian_degree(lat1)\n    phi2 = radian_degree(lat2)\n    dphi = radian_degree(lat2-lat1)\n    dlambda = radian_degree(lon2-lon1)\n    a = math.sin(dphi/2)*math.sin(dphi/2) + math.cos(phi1)*math.cos(phi2)*math.sin(dlambda/2)*math.sin(dlambda/2)\n    b = math.sin(dphi/2)*math.sin(dphi/2) + math.cos(phi2)*math.cos(phi2)*math.sin(dlambda/2)*math.sin(dlambda/2)\n    c = math.sin(dphi/2)*math.sin(dphi/2) + math.cos(phi1)*math.cos(phi2)*math.sin(dlambda/2)*math.sin(dlambda/2)\n    s = (a+b+c)/2\n    return (2*c*math.cos(math.asin((a-b-c)/(2*math.sqrt(s*(s-a)*(s-b)*(s-c))))),math.asin((a-b-c)/(2*math.sqrt(s*(s-a)*(s-b)*(s-c))))*180/math.pi)\ndef geo_centroid2(lon1, lat1, lon2, lat2, lon3, lat3):\n    '''\n    Write a function to calculate the centroid of a triangle on a sphere.\n    '''\n    phi1 = radian_degree(lat1)\n    phi2 = radian_degree(lat2)\n    phi",
        "num_ids": 30
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree/360)*(2*math.pi)\n",
        "num_ids": 17
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree * math.pi) / 180\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree*(math.pi/180)\n    return degree\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree_radian = degree * math.pi / 180\n    return degree_radian\n",
        "num_ids": 23
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    #YOUR CODE HERE\n    radian = degree*(math.pi)/180\n    return radian\n",
        "num_ids": 27
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        print('Found {} at start index {} and end index {}.'.format(match.group(), match.start(), match.end()))\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n",
        "num_ids": 73
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    start = 0\n    end = 0\n    while True:\n        start = text.find(pattern, start)\n        if start == -1:\n            return None\n        end = start + len(pattern)\n        \n        yield text[start:end]\n        \n        start = end\n",
        "num_ids": 72
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Your code here\n    match = re.search(pattern, text)\n    return match.group() if match else None\n",
        "num_ids": 31
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if type(text) is not str or type(pattern) is not str:\n        return 'Invalid type.'\n    result = re.search(pattern, text)\n    if result is None:\n        return 'Not found.'\n    return (result[0], result.start(), result.end())\n",
        "num_ids": 70
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # print(text, pattern)\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return start, end\n    else:\n        return None\n",
        "num_ids": 58
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    substring_match = re.search(pattern, text)\n    if substring_match:\n        start = substring_match.start()\n        end = substring_match.end()\n        return substring_match.group(), start, end\n    return None, None, None\n",
        "num_ids": 68
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n",
        "num_ids": 14
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    matches = regex.finditer(text)\n    for match in matches:\n        print(match.group())\n",
        "num_ids": 41
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    # 1. Split the text on whitespace. \n    # 2. Check each piece of text for a match.\n    # 3. If a match is found, return it. If no match is found, return None.\n    #\n    # If you need an example of how to write this function, see the test function. \n    # You can start with the example in the test function.\n    \n    \n    #     1. Split the text on whitespace. \n    text_list = text.split()\n    #print(text_list)\n",
        "num_ids": 129
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    search_results = re.search(pattern, text)\n    if search_results is None:\n        return '', 0, 0\n    return search_results.group(0), search_results.start(), search_results.end()\n",
        "num_ids": 56
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]\n    bell[0] = 1\n    for i in range(1, n):\n        bell.append(bell[i] + bell[i-1])\n    return bell[n]\n",
        "num_ids": 52
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = 0\n    for i in range(n):\n        bell_num += i\n    return bell_num\n",
        "num_ids": 31
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 694508, 4227557, 282475049,\n             201043829921, 1457102044755, 855875555440, 5565878142098, 4304277420877, 297278084342982,\n             2533247329842527, 18542417690508395, 113795384985337511, 687483803581465475, 4989809740332722397,\n             2827450991744114411, 19981729752954984901, 13539969559277045252, 855875555440, 5565878142098,\n             4479515463544361591, 29782840862218059891, 26707713154448528571, 223324194922644380359,\n             17486463015008649061, 111803293874248614649, 687483803581465475, 4989809740332722397,\n             2827450991744114411, 19981729752954984901, 13539969559277045252, 855875555440, 5565878142098,\n             4479515463544361591, 29782840862218059891, 26707713154448528571, 223324194922644380359,\n             17486463015008649061, 111803293874248614649, 687483803581465475, 4989809740332722397,\n             2827450991744114411, 19981729752954984901, 13539969559277045252, 855875555440, 5565878142098,\n             4479515463544361591, 29782840862218059891, 26707713154448528571, 223324194922644380359,\n             17486463015008649061, 111803293874248614649, 687483803581465475, 4989809740332722397,\n             2827450991744114411, 19981729752954984901, 13539969559277045252, 855875555440, 5565878142098,\n             4479515463544361591, 29782840862218059891, 26707713154448528571, 223324194922644380359,\n             17486463015008649061, 111803293874248614649, 687483803581465475, 4989809740332722397,\n             2827450991744114411, 19981729752954984901, 13539969559277045252, 855875555440, 5565878142098,\n             4479515463544361591, 29782840862218059891, 26707713154448528571, 223324194922644380359,\n             17486463015008649061, 111803293874248614649, 687483803581465475, 4989809740332722397,\n             2827450991744114411, 19981729752954984901, 13539969559277045252, 855875555440, 5565878142098,\n             4479515463544361591, 29782840862218059891, 26707713154448528571, 223324194922644380359,\n             17486463015008649061, 111803293874248614649, 687483803581465475, 4989809740332722397,\n             2827450991744114411, 19981729752954984901, 13539969559277045252, 855875555440, 5565878142098,\n             4479515463544361591, 29782840862218059891, 26707713154448528571, 223324194922644380359,\n             17486463015008649061, 111803293874248614649, 687483803581465475, 4989809740332722397,\n             2827450991744114411, 19981729752954984901, 13539969559277045252, 855875555440, 5565878142098,\n             4479515463544361591, 29782840862218059891, 26707713154448528571, 223324194922644380359,\n             17486463015008649061, 111803293874248614649, 687483803581465475, 4989809740332722397,\n             2827450991744114411, 19981729752954984901, 13539969559277045252, 855875555440, 5565878142098,\n             4479515463544361591, 29782840862218059891, 26707713154448528571, 223324194922644380359,\n             17486463015008649061, 111803293874248614649, 687483803581465475, 4989809740332722397,\n             2827450991744114411, 19981729752954984901, 13539969559277045252, 855875555440, 5565878142098,\n             4479515463544361591, 29782840862218059891, 26707713154448528571, 223324194922644380359,\n             17486463015008649061, 111803293874248614649, 687483803581465475, 4989809740332722397,\n             2827450991744114411, 19981729752954984901, 13539969559277045252, 855875555440, 5565878142098,\n             4479515463544361591, 29782840862218059891, 26707713154448528571, 223324194922644380359,\n             17486463015008649061, 111803293874248614649, 687483803581465475, 4989809740332722397,\n             2827450991744114411, 19981729752954984901, 13539969559277045252, 855875555440, 5565878142098,\n             4479515463544361591, 29782840862218059891, 26707713154448528571, 223324194922644380359,\n             17486463015008649061, 111803293874248614649, 687483803581465475, 4989809740332722397,\n             2827450991744114411, 19981729752954984901, 13539969559277045252, 855875555440, 5565878142098,\n             4479515463544361591, 29782840862218059891, 26707713154448528571, 223324194922644380359,\n             17486463015008649061, 111803293874248614649, 687483803581465475, 4989809740332722397,\n             2827450991744114411, 19981729752954984901, 13539969559277045252, 855875555440, 5565878142098,\n             4479515463544361591, 29782840862218059891, 26707713154448528571, 223324194922644380359,\n             17486463015008649061, 111803293874248614649, 687483803581465475, 4989809740332722397,\n             2",
        "num_ids": 1975
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    i=1\n    while i <=n:\n        bell = bell +i*bell\n        i=i+1\n    return bell\n",
        "num_ids": 39
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0, 1, 1]\n    if n < len(bell):\n        return bell[n]\n    else:\n        for i in range(3, n+1):\n            bell.append(bell[i-1] + bell[i-2])\n        return bell[-1]\n",
        "num_ids": 73
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Bell number is sum of catalan number \n    bell = 0\n    for i in range(0, n):\n        bell += catalan_Number(i)\n    return bell\n",
        "num_ids": 45
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return bell(n)\n",
        "num_ids": 9
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]*(n+1)\n    bell[0] = bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n",
        "num_ids": 68
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1,n+1):\n        bell.append(bell[i-1]+bell[i-1])\n    return bell[n]\n",
        "num_ids": 47
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell=0\n    for i in range(1,n+1):\n        bell+=1/i\n    return bell\n",
        "num_ids": 31
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    length = len(list1)\n    L = length - L\n    print(list1[0:L], list1[L:])\n    return list1[0:L], list1[L:]\n",
        "num_ids": 50
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]+list1[L+1:]\n    # if L is greater than the lenght of the list, return an empty list.\n",
        "num_ids": 39
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    del list1[L-1]\n    return list1\n",
        "num_ids": 17
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    return list1[:k] + list1[k+1:]\n",
        "num_ids": 26
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    list2 = []\n    \n    for i in range(0, L):\n        list2.append(list1[i])\n        \n    list2.pop(k)\n    \n    print(list2)\n    \nif __name__ == \"__main__\":\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 2\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 4, 5, 6, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 3\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 6, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 4\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 5\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 6\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 7\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 5, 6, 7]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 8\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 5, 6, 7]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 9\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 5, 6, 7]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 10\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 5, 6, 7]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 11\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 12\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 13\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 14\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 15\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 16\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 17\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 18\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 19\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 20\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 21\n    \n    remove_kth_element(list1, L)\n    \n    '''\n    Test output should be:\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    \n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    L = len(list1)\n    \n    k = 22\n    \n    remove",
        "num_ids": 48
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L.pop(L[len(list1) - 1])\n",
        "num_ids": 18
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = list1[:L] + list1[L+1:]\n    return new_list\n",
        "num_ids": 28
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[n][N] for n in range(len(test_list)))\n",
        "num_ids": 26
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list):\n        return \"Invalid index\"\n    else:\n        return max([row[N-1] for row in test_list])\n",
        "num_ids": 42
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N-1] for row in test_list])\n",
        "num_ids": 20
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([l[N] for l in test_list])\n",
        "num_ids": 18
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return None\n    else:\n        col = []\n        for i in range(len(test_list[0])):\n            col.append(test_list[i][N])\n        return max(col)\n",
        "num_ids": 64
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([test_list[i][N] for i in range(len(test_list))])\n",
        "num_ids": 27
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    result = []\n    for row in range(len(test_list)):\n        result.append(test_list[row][N])\n    return max(result)\n",
        "num_ids": 42
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([test_list[i][N] for i in range(len(test_list))])\n",
        "num_ids": 27
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for element in test_list:\n        max_list.append(max(element))\n    return max_list[N-1]\n",
        "num_ids": 41
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) > 0:\n        return [max(row[N]) for row in test_list]\n    return 0\n",
        "num_ids": 35
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    new_list2 = []\n    for i in lst:\n        new_list.append(i[0])\n        new_list2.append(i[1])\n    return [new_list, new_list2]\n",
        "num_ids": 63
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [lst[0][0], lst[0][1]]\n    for i in range(len(lst)):\n        if result[0] > lst[i][0]:\n            result[0] = lst[i][0]\n        if result[1] < lst[i][1]:\n            result[1] = lst[i][1]\n    return result\n",
        "num_ids": 96
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[el[0] for el in lst],[el[1] for el in lst]]\n",
        "num_ids": 26
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #using loop for looping over each sublist\n    for i in range(len(lst)):\n        lst[i].append(lst[i][0])\n        lst[i].pop(0)\n    #return the lst\n    return lst\n",
        "num_ids": 66
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    my_list = [lst[i] for i in range(len(lst))]\n    res = [my_list[0], my_list[1]]\n    return res\n",
        "num_ids": 46
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #result = []\n    #for item in lst:\n    #    result.append([item[0],item[1]])\n    #return result\n    return [[item[0],item[1]] for item in lst]\n",
        "num_ids": 57
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = [[1,2],[3,4],[5,6],[7,8]]\n    lst1 = []\n    lst2 = []\n    for i in range(len(lst)):\n        lst1.append(lst[i][0])\n        lst2.append(lst[i][1])\n    return lst1, lst2\n",
        "num_ids": 91
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    for i in lst:\n        result.append(i[1])\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[i][0],lst[i][1]] for i in range(len(lst))]\n",
        "num_ids": 31
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for i in lst:\n        new_list.append(i[0])\n        new_list.append(i[1])\n    return [new_list[0::2], new_list[1::2]]\n",
        "num_ids": 61
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    length = len(test_list)\n    for i in range(0,length):\n        if i == 0:\n            result = test_list[i]\n        else:\n            result += test_list[i]\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    print(f\"The cummulative sum of all the values in the given list: {sum(test_list)}\")\n    \n    return sum(test_list)\n    \ncummulative_sum(my_tuple)\n",
        "num_ids": 57
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result_list = []\n    for i in range(len(test_list)):\n        result_list.append(sum(test_list[:i+1]))\n    return result_list\n",
        "num_ids": 49
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list.sort()\n    cummulative_sum=0\n    for i in test_list:\n        cummulative_sum+=i\n    return cummulative_sum\n    \ndef main():\n    \n    print(\"Test1 for function cummulative_sum:\")\n    test_list= (1,2,3,4,5)\n    print(\"Test List is \",test_list)\n    print(\"Cummulative sum of the test list is \",cummulative_sum(test_list))\n    \n    print(\"\\nTest2 for function cummulative_sum:\")\n    test_list= [1,2,3,4,5]\n    print(\"Test List is \",test_list)\n    print(\"Cummulative sum of the test list is \",cummulative_sum(test_list))\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 209
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    new_list = []\n    for i in test_list:\n        cummulative_sum += i\n        new_list.append(cummulative_sum)\n    return new_list\n",
        "num_ids": 56
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    cumulative_list = []\n    for item in test_list:\n        total += item\n        cumulative_list.append(total)\n    print(cumulative_list)\n    return cumulative_list\n",
        "num_ids": 55
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumm_sum = 0\n    new_list = []\n    for i in test_list:\n        cumm_sum += i\n        new_list.append(cumm_sum)\n    return new_list\n",
        "num_ids": 53
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    list1=[]\n    list1.append(test_list[0])\n    for i in range(len(test_list)):\n        list1.append(list1[i]+test_list[i])\n    return list1\nprint(cummulative_sum([2,6,4,5,9,2,5,4]))\n",
        "num_ids": 84
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    print('Cummulative sum:')\n    for i in test_list:\n        s=0\n        for j in i:\n            s+=j\n            print(s)\n    return\n",
        "num_ids": 47
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = [1, 2, 3, 4]\n    new_list = []\n    for i in range(len(test_list)):\n        if i == 0:\n            new_list.append(test_list[0])\n        else:\n            new_list.append(test_list[i] + new_list[i-1])\n    return new_list\n",
        "num_ids": 92
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(t) / len(t) for t in nums]\n",
        "num_ids": 21
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    for i in range(len(nums)):\n        if type(nums[i])!= tuple:\n            return False\n    new_list = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        new_list.append(total/len(nums[i]))\n    return new_list\n",
        "num_ids": 108
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    average = sum/len(nums)\n    return average\n",
        "num_ids": 35
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    l = len(nums[0])\n    avg_nums = []\n    for i in nums:\n        avg_nums.append(sum(i) / l)\n    return avg_nums\n    \n",
        "num_ids": 56
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    lst = []\n    for i in range(len(nums)):\n        lst.append(sum(nums[i])/len(nums[i]))\n    return lst\n",
        "num_ids": 49
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = []\n    for num in nums:\n        sum.append(sum(num)/len(num))\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = list(nums)\n    average_list = []\n    for i in range(len(tuple_list)):\n        sum = 0\n        for j in range(len(tuple_list[i])):\n            sum += tuple_list[i][j]\n        average = sum / len(tuple_list[i])\n        average_list.append(average)\n    return average_list\n",
        "num_ids": 101
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for i in nums:\n        avg = 0\n        for j in i:\n            avg += j\n        avg = avg/len(i)\n        average.append(avg)\n    return average\n",
        "num_ids": 58
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    nums_sum = 0\n    for i in nums:\n        total += sum(i)\n        nums_sum += len(i)\n    average = total / nums_sum\n    return average\n",
        "num_ids": 56
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    return [sum(row)/len(row) for row in zip(*nums)]\n    \ndef average_tuple_2(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    return [tuple(map(lambda x: sum(x)/len(x), zip(*nums))) ]\n    \n    \nif __name__ == '__main__':\n    \n    nums = ( ( 1, 2, 3),\n             ( 4, 5, 6),\n             ( 7, 8, 9) )\n    \n    print(average_tuple(nums))\n    print(average_tuple_2(nums))\n    ",
        "num_ids": 108
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x%y for x,y in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    # Implement your solution here\n    return tuple( ( x % y for x,y in zip(test_tup1, test_tup2) ) )\n    \n",
        "num_ids": 43
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(test_tup1[i] % test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 37
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(tup1 % tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 37
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    def modulo(tup1, tup2):\n        return tuple([i % j for i, j in zip(tup1, tup2)])\n    return modulo(test_tup1, test_tup2)\n",
        "num_ids": 58
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    current_pos = 0\n    jumps = 0\n    for step in steps:\n        if current_pos < d and step > 0:\n            jumps += 1\n            current_pos += step\n        elif current_pos > d:\n            current_pos -= step\n        else:\n            current_pos += step\n    return jumps\n",
        "num_ids": 80
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    min_jumps = 0 \n    current_position = [0,0]\n    for i in range(steps):\n        current_position[0] += d\n        if current_position[0] == 0:\n            min_jumps += 1\n            current_position[1] = 1\n            current_position[0] = 0\n        else:\n            current_position[1] += 1\n    return min_jumps\n",
        "num_ids": 102
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #return len(steps) // d\n    cnt = 0\n    while steps:\n        cnt += 1\n        if steps[0] >= d:\n            steps.pop(0)\n            continue\n        if steps[0] < d and steps[-1] >= d:\n            steps.pop(-1)\n            continue\n        if steps[0] < d and steps[-1] < d:\n            steps.pop(0)\n            steps.pop(-1)\n            continue\n        if steps[0] < d and steps[-1] < d:\n            steps.pop(0)\n            continue\n        if steps[0] > d and steps[-1] < d:\n            steps.pop(-1)\n            continue\n        if steps[0] > d and steps[-1] > d:\n            steps.pop(0)\n            continue\n        if steps[0] > d and steps[-1] > d:\n            steps.pop(-1)\n            continue\n    return cnt\n    # return len(steps) // d\n",
        "num_ids": 247
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for i in range(0,steps):\n        if i == d:\n            jumps += 1\n            d += 1\n        elif i > d:\n            jumps += 1\n            d += 2\n        else:\n            jumps += 1\n            d += 1\n    return(jumps)\n",
        "num_ids": 78
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    global memo\n    if (d, steps) in memo:\n        return memo[(d, steps)]\n    if steps == 0:\n        return 0\n    if steps < 0:\n        return -1\n    jumps = float('INF')\n    for i in range(1, steps + 1):\n        jumps = min(jumps, 1 + min_Jumps(steps - i, d - i))\n    memo[(d, steps)] = jumps\n    return jumps\n",
        "num_ids": 114
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return 0\n    if d == 1: return 1\n    if steps < d:\n        return 0\n    else:\n        return min_Jumps(steps - 1, d) + 1 + min_Jumps(steps - d, d)\n",
        "num_ids": 63
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    count = 0\n    if d == 0:\n        return steps\n    \n    if steps < d:\n        return -1\n    else:\n        while steps >= d:\n            count += 1\n            steps -= d\n            \n        return count\n",
        "num_ids": 61
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    jump = 0\n    if d > n:\n        return -1\n    if d == 0:\n        return 0\n    if d == 1:\n        return 1\n    for i in range(n - d + 1):\n        if steps[i] == d:\n            jump += 1\n            break\n        elif steps[i] > d:\n            break\n        elif steps[i] == 0 and i < n - 1:\n            jump += 1\n        else:\n            for j in range(1, d):\n                if i + j < n and steps[i + j] > 0:\n                    jump += 1\n                    break\n                elif i + j >= n:\n                    break\n                elif steps[i + j] == 0:\n                    jump += 1\n                    break\n                else:\n                    continue\n    return jump\n",
        "num_ids": 202
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    if d==0:\n        return 1\n    if d<0 or steps<=0:\n        return 0\n    \n    return min(1+min_Jumps(steps-d, d), 1+min_Jumps(steps, steps))\n",
        "num_ids": 62
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    if d == 0: \n        return 0\n    \n    if d > 0 and steps < d:\n        return -1\n    \n    if d == 1:\n        return 1\n        \n    return 2 + min_Jumps(steps-1, d-1)\n",
        "num_ids": 67
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    try:\n        assert isinstance(nums1,list)\n        assert isinstance(nums2,list)\n    except:\n        print(\"Passed argument is not a list\")\n    else:\n        try:\n            assert len(nums1) == len(nums2)\n        except:\n            print(\"Arrays are of unequal length\")\n        else:\n            result = []\n            for i in range(len(nums1)):\n                try:\n                    assert isinstance(nums1[i],int) and isinstance(nums2[i],int)\n                except:\n                    print(\"Arrays are of unequal type\")\n                    break\n                else:\n                    try:\n                        assert nums1[i]!= 0 and nums2[i]!= 0\n                    except:\n                        print(\"Division by zero\")\n                        result.append(0)\n                    else:\n                        result.append(nums1[i]/nums2[i])\n    return result\n",
        "num_ids": 234
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x / y for x,y in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    length = len(nums1) if len(nums1)<=len(nums2) else len(nums2)\n    nums = [0] * length\n    for i in range(length):\n        nums[i] = nums1[i]/nums2[i]\n    return nums\ndef odd_even(nums):\n    '''\n    Write a function that takes a list and return a list of\n    odd and even index elements respectively.\n    '''\n    odds,evens = [],[]\n    for i,n in enumerate(nums):\n        if i%2==0:\n            evens.append(n)\n        else:\n            odds.append(n)\n    return odds,evens\ndef sum_list(nums):\n    '''\n    Write a function to return the sum of all list elements.\n    '''\n    length = len(nums)\n    if length == 0:\n        return 0\n    return nums[0]+sum_list(nums[1:])\ndef reverse(nums):\n    '''\n    Write a function that returns a reversed copy of a list.\n    '''\n    if len(nums) == 0:\n        return nums\n    return [nums[-1]] + reverse(nums[:-1])\ndef duplicate(nums):\n    '''\n    Write a function that removes all duplicates from a list.\n    '''\n    if len(nums) == 0:\n        return nums\n    if len(nums) == 1:\n        return nums\n    return [nums[0]] + duplicate(nums[1:])\ndef max_element(nums):\n    '''\n    Write a function that finds the largest element in a list.\n    '''\n    if len(nums)==0:\n        return nums\n    if len(nums)==1:\n        return nums[0]\n    return max_element(nums[1:])\ndef element_in_list(nums,target):\n    '''\n    Write a function that checks if a target element exists\n    in a list.\n    '''\n    if len(nums)==0:\n        return False\n    if len(nums)==1:\n        return nums[0] == target\n    return element_in_list(nums[1:],target) or nums[0] == target\ndef remove_duplicates(nums):\n    '''\n    Write a function that removes duplicate elements from\n    a list.\n    '''\n    if len(nums) == 0:\n        return nums\n    if len(nums) == 1:\n        return nums\n    return [nums[0]] + remove_duplicates(nums[1:])\ndef search_list(nums,target):\n    '''\n    Write a function that checks whether a target element\n    exists in a list.\n    '''\n    if len(nums) == 0:\n        return False\n    if len(nums) == 1:\n        return nums[0] == target\n    if nums[0] == target:\n        return True\n    return search_list(nums[1:],target)\ndef ordered(nums):\n    '''\n    Write a function that checks whether a list is ordered\n    in ascending order.\n    '''\n    if len(nums) == 0:\n        return True\n    if len(nums) == 1:\n        return True\n    return nums[0]<=nums[1] and ordered(nums[1:])\ndef rotate_list(nums):\n    '''\n    Write a function that rotates a list by k elements.\n    '''\n    if len(nums) == 0:\n        return nums\n    if len(nums) == 1:\n        return nums\n    return [nums[-1]] + rotate_list(nums[:-1])\ndef print_list(nums):\n    '''\n    Write a function that prints a list in a vertical way.\n    '''\n    if len(nums) == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    return [print_list(nums[1:])] + [nums[0]]\ndef length(nums):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    if len(nums) == 0:\n        return 0\n    return 1 + length(nums[1:])\ndef max_index(nums):\n    '''\n    Write a function that finds the index of the largest element\n    in a list.\n    '''\n    if len(nums) == 0:\n        return -1\n    if len(nums) == 1:\n        return 0\n    return max_index(nums[1:]) + 1\ndef first_recurring(nums):\n    '''\n    Write a function that returns the first recurring\n    element in a list.\n    '''\n    if len(nums) == 0:\n        return -1\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] == nums[1]:\n        return first_recurring(nums[1:])\n    return nums[0]\ndef add_list(nums1,nums2):\n    '''\n    Write a function that adds two lists element-wise.\n    '''\n    if len(nums1) == 0:\n        return nums2\n    if len(nums2) == 0:\n        return nums1\n    return [nums1[0]+nums2[0]] + add_list(nums1[1:],nums2[1:])\ndef last_element(nums):\n    '''\n    Write a function that returns the last element of a list.\n    '''\n    if len(nums) == 0:\n        return -1\n    if len(nums) == 1:\n        return nums[0]\n    return last_element(nums[1:])\ndef get_list(nums,i):\n    '''\n    Write a function that gets a list of elements from a list,\n    specified by their index.\n    '''\n    if len(nums) == 0:\n        return -1\n    if len(nums) == 1:\n        return nums[0]\n    return nums[i]+get_list(nums[1:],i-1)\ndef sub_list(nums1,nums2):\n    '''\n    Write a function that subtracts two lists element-wise.\n    '''\n    if len(nums1) == 0:\n        return nums2\n    if len(nums2) == 0:\n        return nums1\n    return [nums1[0]-nums2[0]] + sub_list(nums1[1:],nums2[1:])\ndef print_reversed(nums):\n    '''\n    Write a function that prints a list in a reversed way.\n    '''\n    if len(nums) == 0:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    return print_reversed(nums[1:])+nums[0]\ndef delete_by_index(nums,i):\n    '''\n    Write a function that deletes the ith element of a list.\n    '''\n    if len(nums) == 0:\n        return nums\n    if len(nums) == 1:\n        return nums[0]\n    if i>len(nums)-1:\n        return delete_by_index(nums[1:],i)\n    return nums[:i]+delete_by_index(nums[i+1:],i)\ndef remove_element(nums,target):\n    '''\n    Write a function that removes the first\n    occurrence of a target element in a list.\n    '''\n    if len(nums) == 0:\n        return nums\n    if len(nums) == 1:\n        if nums[0] == target:\n            return []\n        return nums\n    if nums[0] == target:\n        return [nums[1]]+remove_element(nums[1:],target)\n    return [nums[0]]+remove_element(nums[1:],target)\ndef sum_of_othe",
        "num_ids": 110
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(0,len(nums1)):\n        new_list.append(nums1[i]/nums2[i])\n    return new_list\n",
        "num_ids": 52
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    lst1 = nums1.copy()\n    lst2 = nums2.copy()\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i]/lst2[i])\n    return lst\n",
        "num_ids": 71
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return list(map(lambda x: x[0] / x[1],zip(nums1,nums2)))\n",
        "num_ids": 31
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result=[]\n    if len(nums1)==len(nums2):\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n        return result\n    else:\n        print(\"Two lists do not have the same length\")\n        return None\n",
        "num_ids": 81
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return -1\n    else:\n        l = []\n        for i in range(0,len(nums1)):\n            l.append(nums1[i]/nums2[i])\n        return l\nprint(div_list([2,4,6],[2,4,6]))\nprint(div_list([2,4,6,8,10],[2,4,6,8,10]))\nprint(div_list([1,2],[0,2]))\nprint(div_list([0,2],[2,4]))\nprint(div_list([2,4,6,8,10],[1,2,3,4,5]))\nprint(div_list([1,2,3],[0,2,4]))\n",
        "num_ids": 199
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = []\n    for x in nums1:\n        res.append(x/nums2)\n    return res\n",
        "num_ids": 32
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #method 1\n    list = []\n    for i in nums1:\n        if i%nums2[0]==0:\n            list.append(i/nums2[0])\n    return list\n    \n    #method 2\n    return [i/nums2[0] for i in nums1]\n    \ndef div_list_2(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #method 1\n    nums1[:] = [i/nums2[0] for i in nums1]\n    return nums1\n    \n    #method 2\n    for i in range(len(nums1)):\n        nums1[i]=nums1[i]/nums2[0]\n    return nums1\n    \n    #method 3\n    return list(map(lambda x: x/nums2[0], nums1))\n    \n    #method 4\n    #return [i/nums2[0] for i in nums1]\n    \n    \n    \n",
        "num_ids": 147
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result_str = ''\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            result_str += test_str[i]\n        else:\n            result_str += test_str[i]\n    return result_str\n",
        "num_ids": 70
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join(sorted(list(filter(lambda x: x.isdigit(), test_str))))\n",
        "num_ids": 29
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize empty string\n    s_nums = ''\n    # loop over the test_str\n    for i in test_str:\n        # if the i is a number, add it to the string\n        if i.isdigit():\n            s_nums += i\n    # return the string with numbers at the end\n    return s_nums + test_str[len(s_nums):]\n",
        "num_ids": 97
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for i in test_str:\n        if i.isdigit():\n            result += i\n    return result + test_str\n",
        "num_ids": 38
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    lst=[]\n    nums=['1','2','3','4','5','6','7','8','9','0']\n    for i in test_str:\n        if i in nums:\n            lst.append(i)\n    \n    lst.extend(test_str)\n    strr=''.join(lst)\n    return strr\n",
        "num_ids": 90
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isalpha()]) + ''.join([i for i in test_str if i.isalpha()])\n",
        "num_ids": 43
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # replace all the non-numerics to empty string\n    # we want to do this to prevent cases like:\n    # \"1asdh324as54hfas\" -> \"1asdh324as54hfas\"\n    # \"3.4.5asd-dsa\" -> \"3.4.5\"\n    # \"234\" -> \"234\"\n    test_str = re.sub('[^0-9]', '', test_str)\n    \n    # create a list of all the numbers in the string\n    num_list = list(test_str)\n    \n    # create a list of the non-numerics in the string\n    non_num_list = list(test_str)\n    for i in range(len(non_num_list)):\n        if non_num_list[i]!= '0':\n            num_list[i] = ''\n    \n    # join the list of numbers with a space between\n    test_str =''.join(num_list)\n    \n    return test_str\n",
        "num_ids": 247
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    a = re.findall(r'\\d+', test_str)\n    res = ''\n    for i in range(len(a)):\n        if i == len(a) - 1:\n            res = res + test_str.replace(a[i],'' + a[i])\n        else:\n            res = res + test_str.replace(a[i],'' + a[i] +'')\n    return res\n",
        "num_ids": 105
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    non_num_str = ''\n    for letter in test_str:\n        if letter.isdigit():\n            num_str += letter\n        else:\n            non_num_str += letter\n    return non_num_str + num_str\n",
        "num_ids": 68
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    letters = ''\n    numbers = ''\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n        else:\n            letters += char\n    return letters + numbers\n",
        "num_ids": 52
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    import itertools\n    l = len(a)\n    if l <= 1:\n        return 0\n    # x = [i for i in range(1, l + 1)]\n    # z = list(itertools.combinations(x, 2))\n    # for i in z:\n    #     if i[0] % i[1]!= 0 or i[1] % i[0]!= 0:\n    #         z.remove(i)\n    # return max(z)\n",
        "num_ids": 120
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return largest_subset_helper(a, 0, {})\n",
        "num_ids": 19
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    a = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18]\n    a.sort()\n    \n    if len(a) == 1:\n        return 1\n    \n    max_size = 1\n    i = 1\n    while i < len(a):\n        n = a[i]\n        j = i - 1\n        while j >= 0:\n            if n % a[j] == 0:\n                j -= 1\n            else:\n                break\n        \n        if j < 0:\n            max_size += 1\n            j = i - 1\n            while j >= 0:\n                if a[j] % n == 0:\n                    j -= 1\n                else:\n                    break\n        i += 1\n    return max_size\n    \ndef test_largest_subset():\n    a = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18]\n    a.sort()\n    assert largest_subset(a) == 4\n    \n    b = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18]\n    b.sort(reverse=True)\n    assert largest_subset(b) == 4\n    \n    c = [1, 3, 2, 4, 14, 20, 18]\n    c.sort()\n    assert largest_subset(c) == 3\n    \n    d = [1, 3, 2, 4, 14, 20, 18]\n    d.sort(reverse=True)\n    assert largest_subset(d) == 3\n    \n    e = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18]\n    e.sort(reverse=True)\n    assert largest_subset(e) == 3\n    \n    f = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18, 6]\n    f.sort()\n    assert largest_subset(f) == 4\n    \n    g = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18, 6]\n    g.sort(reverse=True)\n    assert largest_subset(g) == 4\n    \n    h = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18, 6, 6]\n    h.sort()\n    assert largest_subset(h) == 4\n    \n    i = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18, 6, 6]\n    i.sort(reverse=True)\n    assert largest_subset(i) == 4\n    \n    j = [1, 2, 3, 4, 5, 6]\n    assert largest_subset(j) == 6\n    \n    k = [1, 2, 3, 4, 5, 6]\n    k.sort(reverse=True)\n    assert largest_subset(k) == 6\n    \n    l = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18, 6, 6]\n    l.sort(reverse=True)\n    assert largest_subset(l) == 6\n    \n    m = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18, 6, 6, 6, 1]\n    m.sort(reverse=True)\n    assert largest_subset(m) == 6\n    \n    n = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18, 6, 6, 6, 1, 1]\n    n.sort(reverse=True)\n    assert largest_subset(n) == 6\n    \n    o = [1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6]\n    o.sort(reverse=True)\n    assert largest_subset(o) == 6\n    \n    p = [1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6]\n    p.sort()\n    assert largest_subset(p) == 6\n    \n    q = [1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6, 1, 1]\n    q.sort()\n    assert largest_subset(q) == 6\n    \n    r = [1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6, 1, 1, 1]\n    r.sort()\n    assert largest_subset(r) == 6\n    \n    s = [1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6, 1, 1, 1, 1]\n    s.sort()\n    assert largest_subset(s) == 6\n    \n    t = [1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6, 1, 1, 1, 1, 1]\n    t.sort()\n    assert largest_subset(t) == 6\n    \n    u = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6, 1, 1, 1]\n    u.sort()\n    assert largest_subset(u) == 6\n    \n    v = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6, 1, 1, 1, 1, 1]\n    v.sort()\n    assert largest_subset(v) == 6\n    \n    w = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1]\n    w.sort()\n    assert largest_subset(w) == 6\n    \n    x = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    x.sort()\n    assert largest_subset(x) == 6\n    \n    y = [6, 18, 42, 1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    y.sort()\n    assert largest_subset(y) == 6\n    \n    z = [1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    z.sort()\n    assert largest_subset(z) == 6\n    \n    aa = [1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    aa.sort()\n    assert largest_subset(aa) == 6\n    \n    ab = [1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    ab.sort()\n    assert largest_subset(ab) == 6\n    \n    ac = [1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    ac.sort()\n    assert largest_subset(ac) == 6\n    \n    ad = [1, 3, 2, 4, 14, 20, 18, 6, 6, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "num_ids": 2006
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n=len(a)\n    d={}\n    for i in range(1,n):\n        for j in range(i):\n            if a[i]%a[j]==0:\n                d[a[i]]=d.get(a[i],0)+d.get(a[j],0)+1\n    l=list(d.keys())\n    l.sort(reverse=True)\n    for i in range(n):\n        if d[l[i]]==1:\n            return i+1\n    return n\n",
        "num_ids": 131
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return subset_divisible(a)\n",
        "num_ids": 12
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    import math\n    \n    n = len(a)\n    m = max(a)\n    # initialising dp table with 0 for all i,j values\n    dp = [[0 for i in range(m + 1)] for j in range(n + 1)]\n",
        "num_ids": 64
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return_val = []\n    \n    if len(a) == 0:\n        return return_val\n    \n    for i in range(len(a)):\n        new_a = a[:]\n        new_a.remove(i)\n        return_val = max([return_val, largest_subset(new_a)])\n    \n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if (a[i] % a[j]) == 0 or (a[j] % a[i]) == 0:\n                new_a = a[:]\n                new_a.remove(i)\n                new_a.remove(j)\n                return_val = max([return_val, largest_subset(new_a)])\n    \n    return_val.append(len(a))\n    return return_val\n    \nprint(largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "num_ids": 241
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return len(largest_subset_helper([], a, 0))\n",
        "num_ids": 20
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # print('input: ',a)\n    # a.sort(reverse = True)\n    \n    # print('sorted: ',a)\n    \n    # find the longest consecutive subset\n    longest_subset = []\n    current_subset = []\n    for i in range(len(a)):\n        current_subset.append(a[i])\n        if sum(current_subset)%3==0:\n            longest_subset = current_subset\n    # print('longest subset: ',longest_subset)\n    \n    \n    # find all possible subsets\n    all_subsets = []\n    for i in range(1,len(a)+1):\n        all_subsets += combinations(a,i)\n    \n    # print('all subsets: ',all_subsets)\n    \n    # remove the subsets that are not divisible by 3\n    divisible_subsets = []\n    for subset in all_subsets:\n        if sum(subset)%3 == 0:\n            divisible_subsets.append(subset)\n    # print('divisible subsets: ',divisible_subsets)\n    \n    # find the subset that is the largest\n    largest_subset_size = 0\n    for i in range(len(divisible_subsets)):\n        if sum(divisible_subsets[i])>=largest_subset_size:\n            largest_subset_size = sum(divisible_subsets[i])\n    \n    return largest_subset_size\n",
        "num_ids": 364
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # return sum(set(sorted(a)).difference(set(sorted(a)[::2])))\n    b = []\n    for i in a:\n        for j in a:\n            if i % j == 0 or j % i == 0:\n                b.append(i)\n    return max(b)\n",
        "num_ids": 78
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j = 0, 0\n    count = 0\n    \n    # first i elements in arr1\n    while count < n:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n        count += 1\n",
        "num_ids": 67
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return min(arr1[0], arr2[0])\n",
        "num_ids": 24
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[int(n/2)] + arr2[int(n/2)]) / 2\n    else:\n        return arr1[int(n/2)]\n",
        "num_ids": 53
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # if n == 0:\n    #     return 0\n    # if n == 1:\n    #     return min(arr1[0], arr2[0])\n    # if n == 2:\n    #     return (arr1[0] + arr2[0])/2\n    # if n == 3:\n    #     return (arr1[0] + arr2[0] + max(arr1[1], arr2[1]))/2\n",
        "num_ids": 109
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j = 0, 0\n    while True:\n        if n == 0:\n            return None\n        if j >= n:\n            return arr1[i + n//2]\n        if i >= n:\n            return arr2[j + n//2]\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if n % 2 == 0:\n                return (arr1[i] + arr2[j])/2\n            else:\n                return max(arr1[i], arr2[j])\n",
        "num_ids": 153
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    elif n == 2:\n        return (arr1[0] + arr2[0])/2.0\n    else:\n        arr3 = []\n        k = 0\n        for i in range(n):\n            if arr1[i] <= arr2[0]:\n                arr3.append(arr1[i])\n                k = k + 1\n            elif arr2[i] <= arr1[0]:\n                arr3.append(arr2[i])\n                k = k + 1\n            elif arr2[i] > arr1[0] and arr1[i] > arr2[0]:\n                arr3.append(arr1[i])\n                arr3.append(arr2[i])\n                k = k + 2\n        if k == n:\n            return (arr1[0] + arr2[0])/2.0\n        elif k == n + 1:\n            return min(arr1[0], arr2[0])\n        else:\n            return get_median(arr3, arr1, k)\n",
        "num_ids": 271
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if (n == 1):\n        return min(arr1[0], arr2[0])\n    if (n == 0):\n        return -1\n",
        "num_ids": 38
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    \n    if n % 2!= 0:\n        return arr1[n//2]\n    else:\n        return (arr1[n//2 - 1] + arr1[n//2]) / 2\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2010
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    \n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    \n    # determine pivot\n    if arr1[n//2] > arr1[n//2 - 1]:\n        pivot = n//2\n    else:\n        pivot = n//2 - 1\n",
        "num_ids": 88
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for i in nums:\n        res.append(i ** n)\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i]=nums[i]**n\n    return nums\nnums=[1,2,3,4]\nn=3\nprint(nth_nums(nums,n))\n",
        "num_ids": 64
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    pow_nums=[]\n    for i in range(len(nums)):\n        pow_nums.append(nums[i]**n)\n    return pow_nums\n",
        "num_ids": 49
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [number**n for number in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) < 1:\n        return None\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**n)\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i ** n for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i**n)\n    return new_list\n",
        "num_ids": 35
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == \"\":\n        return True\n    else:\n        if ord(string[0]) in range(ord(\"A\"), ord(\"Z\") + 1):\n            return True\n        else:\n            return False\n",
        "num_ids": 52
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\nprint(is_upper('Python'))\nprint(is_upper('python'))\n",
        "num_ids": 29
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    print(string.upper())\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList \n",
        "num_ids": 34
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList.pop(0)\n    last = newList.pop()\n    newList.insert(0,last)\n    newList.append(first)\n    return newList\n",
        "num_ids": 47
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size-1]\n    newList[size-1] = temp\n    return newList\n",
        "num_ids": 51
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    i = 0\n    while i < length:\n        newList[i], newList[length-1] = newList[length-1], newList[i]\n        i += 1\n    return newList\n",
        "num_ids": 60
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \n    \ndef get_list_sum(input_list):\n    '''\n    Write a Python function that takes a list of numbers and returns the sum of all the numbers in the list.\n    '''\n    sum = 0\n    for i in input_list:\n        sum+=i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp=newList[0]\n    newList[0]=newList[-1]\n    newList[-1]=temp\n    return newList",
        "num_ids": 37
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    list = newList\n    n = len(list) \n    a = list[0] \n    list[0] = list[n - 1] \n    list[n - 1] = a \n    return list \n",
        "num_ids": 56
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList) \n    temp = newList[0] \n    newList[0] = newList[length-1] \n    newList[length-1] = temp \n    return newList \n    \ndef main():\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList = [1, 2, 3, 4, 5, 6] \n    print(newList)\n    print(swap_List(newList))\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 56
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp=newList[0]\n    newList[0]=newList[len(newList)-1]\n    newList[len(newList)-1]=temp\n    return newList\n",
        "num_ids": 46
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 22/7\n    radius = r\n    circumference = 2 * pi * radius\n    area = pi * radius * radius\n    largest_triangle = circumference / (3 * sqrt(3))\n    largest_triangle = largest_triangle - area\n    return largest_triangle\n",
        "num_ids": 71
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3 * r * r) / 2\n",
        "num_ids": 14
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return math.pi * (r ** 2) * math.sqrt(2) / 2\n",
        "num_ids": 24
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r < 0 :\n        return('Invalid input')\n    return (r**2*3.14159)\n",
        "num_ids": 29
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r > 0 :\n        print(\"Area of the largest triangle in a semicircle with radius {} is {}\".format(r,math.pi*(r**2)))\n    else :\n        print(\"Radius cannot be negative\")\n",
        "num_ids": 56
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi, sqrt\n    return sqrt(r**2 - r**2/(8*pi))\n",
        "num_ids": 29
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area=0\n    for i in range(1,r+1) :\n        k=math.sqrt(i*(r**2-i))\n        if k>=0 and k<r :\n            area=i\n    return area\nprint(triangle_area(3))\nprint(triangle_area(2))\nprint(triangle_area(1))\nprint(triangle_area(0))\nprint(triangle_area(4))\nprint(triangle_area(5))\nprint(triangle_area(6))\nprint(triangle_area(7))\nprint(triangle_area(8))\nprint(triangle_area(9))\nprint(triangle_area(10))\nprint(triangle_area(11))\nprint(triangle_area(12))\nprint(triangle_area(13))\nprint(triangle_area(14))\nprint(triangle_area(15))\nprint(triangle_area(16))\nprint(triangle_area(17))\nprint(triangle_area(18))\nprint(triangle_area(19))\nprint(triangle_area(20))\nprint(triangle_area(21))\nprint(triangle_area(22))\nprint(triangle_area(23))\nprint(triangle_area(24))\nprint(triangle_area(25))\nprint(triangle_area(26))\nprint(triangle_area(27))\nprint(triangle_area(28))\nprint(triangle_area(29))\nprint(triangle_area(30))\nprint(triangle_area(31))\nprint(triangle_area(32))\nprint(triangle_area(33))\nprint(triangle_area(34))\nprint(triangle_area(35))\nprint(triangle_area(36))\nprint(triangle_area(37))\nprint(triangle_area(38))\nprint(triangle_area(39))\nprint(triangle_area(40))\nprint(triangle_area(41))\nprint(triangle_area(42))\nprint(triangle_area(43))\nprint(triangle_area(44))\nprint(triangle_area(45))\nprint(triangle_area(46))\nprint(triangle_area(47))\nprint(triangle_area(48))\nprint(triangle_area(49))\nprint(triangle_area(50))\nprint(triangle_area(51))\nprint(triangle_area(52))\nprint(triangle_area(53))\nprint(triangle_area(54))\nprint(triangle_area(55))\nprint(triangle_area(56))\nprint(triangle_area(57))\nprint(triangle_area(58))\nprint(triangle_area(59))\nprint(triangle_area(60))\nprint(triangle_area(61))\nprint(triangle_area(62))\nprint(triangle_area(61))\nprint(triangle_area(60))\nprint(triangle_area(59))\nprint(triangle_area(58))\nprint(triangle_area(57))\nprint(triangle_area(56))\nprint(triangle_area(55))\nprint(triangle_area(54))\nprint(triangle_area(53))\nprint(triangle_area(52))\nprint(triangle_area(51))\nprint(triangle_area(50))\nprint(triangle_area(49))\nprint(triangle_area(48))\nprint(triangle_area(47))\nprint(triangle_area(46))\nprint(triangle_area(45))\nprint(triangle_area(44))\nprint(triangle_area(43))\nprint(triangle_area(42))\nprint(triangle_area(41))\nprint(triangle_area(40))\nprint(triangle_area(39))\nprint(triangle_area(38))\nprint(triangle_area(37))\nprint(triangle_area(36))\nprint(triangle_area(35))\nprint(triangle_area(34))\nprint(triangle_area(33))\nprint(triangle_area(32))\nprint(triangle_area(31))\nprint(triangle_area(30))\nprint(triangle_area(29))\nprint(triangle_area(28))\nprint(triangle_area(27))\nprint(triangle_area(26))\nprint(triangle_area(25))\nprint(triangle_area(24))\nprint(triangle_area(23))\nprint(triangle_area(22))\nprint(triangle_area(21))\nprint(triangle_area(20))\nprint(triangle_area(19))\nprint(triangle_area(18))\nprint(triangle_area(17))\nprint(triangle_area(16))\nprint(triangle_area(15))\nprint(triangle_area(14))\nprint(triangle_area(13))\nprint(triangle_area(12))\nprint(triangle_area(11))\nprint(triangle_area(10))\nprint(triangle_area(9))\nprint(triangle_area(8))\nprint(triangle_area(7))\nprint(triangle_area(6))\nprint(triangle_area(5))\nprint(triangle_area(4))\nprint(triangle_area(3))\nprint(triangle_area(2))\nprint(triangle_area(1))\nprint(triangle_area(0))\nprint(triangle_area(1))\nprint(triangle_area(2))\nprint(triangle_area(3))\nprint(triangle_area(4))\nprint(triangle_area(5))\nprint(triangle_area(6))\nprint(triangle_area(7))\nprint(triangle_area(8))\nprint(triangle_area(9))\nprint(triangle_area(10))\nprint(triangle_area(11))\nprint(triangle_area(12))\nprint(triangle_area(13))\nprint(triangle_area(14))\nprint(triangle_area(15))\nprint(triangle_area(16))\nprint(triangle_area(17))\nprint(triangle_area(18))\nprint(triangle_area(19))\nprint(triangle_area(20))\nprint(triangle_area(21))\nprint(triangle_area(22))\nprint(triangle_area(23))\nprint(triangle_area(24))\nprint(triangle_area(25))\nprint(triangle_area(26))\nprint(triangle_area(27))\nprint(triangle_area(28))\nprint(triangle_area(29))\nprint(triangle_area(30))\nprint(triangle_area(31))\nprint(triangle_area(32))\nprint(triangle_area(33))\nprint(triangle_area(34))\nprint(triangle_area(35))\nprint(triangle_area(36))\nprint(triangle_area(37))\nprint(triangle_area(38))\nprint(triangle_area(39))\nprint(triangle_area(40))\nprint(triangle_area(41))\nprint(triangle_area(42))\nprint(triangle_area(43))\nprint(triangle_area(44))\nprint(triangle_area(45))\nprint(triangle_area(46))\nprint(triangle_area(47))\nprint(triangle_area(48))\nprint(triangle_area(49))\nprint(triangle_area(50))\nprint(triangle_area(51))\nprint(triangle_area(52))\nprint(triangle_area(53))\nprint(triangle_area(54))\nprint(triangle_area(55))\nprint(triangle_area(56))\nprint(triangle_area(57))\nprint(triangle_area(58))\nprint(triangle_area(59))\nprint(triangle_area(60))\nprint(triangle_area(61))\nprint(triangle_area(62))\nprint(triangle_area(61))\nprint(triangle_area(60))\nprint(triangle_area(59))\nprint(triangle_area(58))\nprint(triangle_area(57))\nprint(triangle_area(56))\nprint(triangle_area(55))\nprint(triangl",
        "num_ids": 2005
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi, sqrt\n    area = (2 * r) * sqrt((r * r) - (r * r))\n    return area\n",
        "num_ids": 38
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = r*r*math.pi/2\n    return area\n",
        "num_ids": 19
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return ((r**2)*3)/(2*math.sqrt(2))\n",
        "num_ids": 22
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(end==None):\n        end=len(array)\n    if(start<end):\n        mid=(start+end)//2\n        if(array[mid]==mid+1):\n            return(find_First_Missing(array,start=mid+1,end=end))\n        if(array[mid]==mid):\n            return(find_First_Missing(array,start=mid+1,end=end))\n        if(array[mid]<mid+1):\n            return(mid+1)\n    return(start+1)\n",
        "num_ids": 133
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # if there is only one element in the list, then return it\n    if start == end:\n        return start\n",
        "num_ids": 29
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!=i+1:\n            return i+1\n    return i+2\n",
        "num_ids": 52
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array) - 1\n    if end < start:\n        return -1\n    mid = (start + end) // 2\n    if array[mid] == mid:\n        return find_First_Missing(array,start=mid+1,end=end)\n    elif array[mid] > mid:\n        return find_First_Missing(array,start=start,end=mid-1)\n    else:\n        return find_First_Missing(array,start=mid+1,end=end)\n",
        "num_ids": 129
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end = len(array) if end is None else end\n    if start >= end:\n        return None\n    i = start\n    while i < end:\n        j = array[i]\n        if j < end and array[j]!= j:\n            array[i], array[j] = array[j], array[i]\n        else:\n            i += 1\n    for i in range(end):\n        if array[i]!= i:\n            return i\n    return end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2005
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)\n    for num in array[start:end]:\n        num_index = array.index(num)\n        if num_index!= num:\n            return num_index\n    return end\n",
        "num_ids": 59
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n    if start == end:\n        return start + 1\n    if end is None:\n        end = len(array) - 1\n    if start >= end:\n        return start + 1\n",
        "num_ids": 55
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    array_length=len(array)\n    #if end is not given then, set it to the array length\n    if end==None:\n        end=array_length\n    for i in range(start,end):\n        if array[i]!=i:\n            return i\n    return end+1",
        "num_ids": 73
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(end == None):\n        end = len(array)-1\n    if(start >= end):\n        return\n    mid = start + (end-start)//2\n    if(mid < end and array[mid] == mid):\n        return find_First_Missing(array,mid+1,end)\n    if(array[mid] == mid):\n        return find_First_Missing(array,start,mid-1)\n    return mid\n",
        "num_ids": 107
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not isinstance(array,list):\n        return -1\n    if len(array)<1:\n        return -1\n    if end==None:\n        end=len(array)\n    if not isinstance(start,int):\n        start=0\n    if not isinstance(end,int):\n        end=len(array)\n    if end<0:\n        end=len(array)+end\n    if start<0:\n        start=len(array)+start\n    if end<start:\n        return -1\n    if end>len(array):\n        end=len(array)\n    if start>len(array):\n        start=len(array)\n    if start==0 and end==len(array):\n        return 1\n    if array[start-1]!=start:\n        return start\n    if array[end-1]!=end:\n        return end\n    if start==end:\n        return start+1\n    if end-start==1:\n        if array[start-1]!=start:\n            return start\n        else:\n            if array[end-1]!=end:\n                return end\n            else:\n                return end+1\n    if end-start==2:\n        if array[start-1]==start and array[end-1]==end:\n            return end+1\n        else:\n            if array[start-1]==start:\n                return end\n            else:\n                return start\n    if start==1 and end==len(array):\n        return 2\n    if end-start==3:\n        if array[start-1]==start:\n            return array[end-1]\n        else:\n            if array[start-1]==end:\n                return array[start-1]\n            else:\n                return start\n    if end-start==4:\n        if array[start-1]==start and array[end-1]==end:\n            return end\n        else:\n            if array[start-1]==start:\n                if array[end-1]==end:\n                    return end+1\n                else:\n                    return end\n            else:\n                if array[end-1]==end:\n                    return array[start-1]\n                else:\n                    return start\n    if start==0:\n        return find_First_Missing(array,1,end-1)\n    if end==len(array):\n        return find_First_Missing(array,start,end-1)\n    return find_First_Missing(array,start+1,end)\n",
        "num_ids": 602
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n    \ndef num_valid_passwords(input_file):\n    '''\n    Write a function to determine the number of valid passwords for the given list of passwords.\n    '''\n    return sum(1 for _ in filter(is_valid, map(transform_input, input_file.readlines())))\n",
        "num_ids": 31
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for ch in string:\n        if ch =='':\n            new_string += '%20'\n        else:\n            new_string += ch\n    return new_string\n",
        "num_ids": 50
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \",\"%20\")\n    return string\n    \n",
        "num_ids": 21
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n",
        "num_ids": 14
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n",
        "num_ids": 43
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
        "num_ids": 44
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    EvenList = [] \n    for i in list: \n        if(i % 2 == 0): \n            EvenList.append(i)\n            \n    print(EvenList) \n",
        "num_ids": 49
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [n for n in list if n%2==0] \n",
        "num_ids": 19
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    odd = [] \n    even = [] \n",
        "num_ids": 14
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    odd=[]\n    even=[]\n    for i in list:\n        if(i%2==0):\n            even.append(i)\n        else:\n            odd.append(i)\n    return even,odd\nprint(Split([1,2,3,4,5,6,7,8,9,10,11]))\n",
        "num_ids": 83
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = [] \n    for i in range(len(list)): \n        if list[i] % 2 == 0: \n            even_list.append(list[i]) \n    return even_list \n",
        "num_ids": 56
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            print(list[i])\n",
        "num_ids": 34
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # x = []\n    # for i in list:\n    #     if i%2==0:\n    #         x.append(i)\n    # return x\n    return [i for i in list if i%2==0]\n",
        "num_ids": 58
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = [] \n    odd_numbers = []\n    for num in list: \n        if (num % 2 == 0): \n            even_numbers.append(num) \n        else: \n            odd_numbers.append(num) \n    print(\"Even numbers in the list: \", even_numbers) \n    print(\"Odd numbers in the list: \", odd_numbers) \n",
        "num_ids": 102
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    pass\ndef coor_recomb(tup, adjac):\n    '''\n    This function takes in the coordinate tuple and the list of adjacent coordinates.\n    It then returns a list of coordinates that the robot should visit, with a weighted score assigned to each of them.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    new = list(ele)\n    if len(new) == 1:\n        new.append(sub)\n    else:\n        new[1] = sub\n    return new\n",
        "num_ids": 44
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    print(ele)\n    sub.append(ele)\n    if 0 <= (ele[0] - 1):\n        if [ele[0] - 1, ele[1]] not in sub:\n            adjac(ele[0] - 1, sub)\n    if (ele[0] + 1) < 10:\n        if [ele[0] + 1, ele[1]] not in sub:\n            adjac(ele[0] + 1, sub)\n    if 0 <= (ele[1] - 1):\n        if [ele[0], ele[1] - 1] not in sub:\n            adjac(ele[1] - 1, sub)\n    if (ele[1] + 1) < 10:\n        if [ele[0], ele[1] + 1] not in sub:\n            adjac(ele[1] + 1, sub)\n    return sub\n",
        "num_ids": 206
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    a = [\n        (x+1, y),\n        (x-1, y),\n        (x, y+1),\n        (x, y-1)\n    ]\n    for ele in a:\n        if ele not in sub:\n            sub.append(ele)\n            \n    return sub\n",
        "num_ids": 82
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # this function will extract all the adjacent coordinates\n    # def adjac(ele, sub = []):\n    #     if len(ele) == 1:\n    #         return sub + [ele]\n    #     else:\n    #         for i in range(len(ele)):\n    #             return adjac(ele[:i] + ele[i+1:], sub + [ele[i]])\n    return [(ele[0] + 1, ele[1]), (ele[0] - 1, ele[1]), (ele[0], ele[1] + 1), (ele[0], ele[1] - 1)]\n",
        "num_ids": 148
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y, z = ele\n    return [\n        (x+1, y, z), (x, y+1, z), (x, y, z+1), (x-1, y, z),\n        (x, y-1, z), (x, y, z-1)\n    ] + sub\n",
        "num_ids": 78
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # it may seem self-explanatory, but it is not\n    # \"ele\" is the element to be checked\n    # \"sub\" is the list containing the coordinates of the vertices of the current element\n    # \"sub\" is modified by this function, hence it is called \"sub\"\n    if not sub: \n        sub = [ele]\n    else: \n        sub = sub.append(ele)\n    for i in range(len(sub)): \n        adj = [0,0]\n        adj[0] = sub[i][0] + 1\n        adj[1] = sub[i][1]\n        if adj[0] > 9:\n            adj[0] = 0\n            adj[1] = sub[i][1] + 1\n        if adj[0] < 0:\n            adj[0] = 9\n            adj[1] = sub[i][1]\n        if adj[1] > 9:\n            adj[1] = 0\n        if adj[1] < 0:\n            adj[1] = 9\n        # list is modified in place\n        sub[i] = adj\n    return sub\n",
        "num_ids": 268
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = [sub + [i] for i in [ele - 3, ele - 2, ele - 1, ele + 1, ele + 2, ele + 3]]\n    if [ele - 1, ele - 2, ele - 3] not in sub:\n        adj.append([ele - 1, ele - 2, ele - 3])\n    if [ele + 1, ele + 2, ele + 3] not in sub:\n        adj.append([ele + 1, ele + 2, ele + 3])\n    if [ele + 3, ele + 2, ele + 1] not in sub:\n        adj.append([ele + 3, ele + 2, ele + 1])\n    return adj\n",
        "num_ids": 158
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent_coordinate = []\n    for i in range(len(ele)):\n        if i == len(ele) - 1:\n            adjacent_coordinate.append((ele[i], ele[0]))\n        else:\n            adjacent_coordinate.append((ele[i], ele[i+1]))\n    if sub:\n        adjacent_coordinate = [x for x in adjacent_coordinate if x[0] in sub and x[1] in sub]\n    return adjacent_coordinate\n",
        "num_ids": 123
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    \n    left = (x, y-1)\n    right = (x, y+1)\n    up = (x-1, y)\n    down = (x+1, y)\n    \n    return [left, right, up, down]\n    \ndef get_coord(pos, initial = False): \n    '''\n    Write a function to convert the given coordinate tuple to a coordinate index if initial is set to True.\n    '''\n    x, y = pos\n    \n    if initial:\n        return (x + 1) + (y * 4)\n    else:\n        return y + (x * 4)\n",
        "num_ids": 44
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_').replace(' ','')\n",
        "num_ids": 24
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_').replace('-', '_')\n",
        "num_ids": 26
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_').replace('*','').replace('~', '_').replace('!', '_')\n",
        "num_ids": 39
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # text = \"Python Exercises\"\n    # print(text.replace(\" \", \"_\"))\n    # print(text.replace(\"_\", \" \"))\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text\n",
        "num_ids": 67
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # last_index = -1\n",
        "num_ids": 11
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for num in num_list:\n        if num == 0:\n            count += 1\n    for i in range(count):\n        num_list.remove(0)\n    for i in range(count):\n        num_list.append(0)\n",
        "num_ids": 66
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    moved_list = [i for i in num_list if i!= 0]\n    moved_list.extend([0] * num_list.count(0))\n    return moved_list\n",
        "num_ids": 50
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # for num in num_list:\n    #     if num == 0:\n    #         num_list.append(num)\n    #         num_list.remove(num)\n    # return num_list\n",
        "num_ids": 52
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # check if there are any zeroes in the list\n    if num_list.count(0):\n        # remove all zeroes\n        num_list.remove(0)\n        num_list.append(0)\n        # return the list with zeroes at the end\n        return num_list\n    else:\n        return num_list\n",
        "num_ids": 84
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Method 1\n",
        "num_ids": 7
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    size = len(num_list)\n    count = 0\n    for i in range(size):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    while count < size:\n        num_list[count] = 0\n        count += 1\n    return num_list\n",
        "num_ids": 87
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.sort()\n    for num in num_list:\n        if num == 0:\n            num_list.remove(0)\n            num_list.append(num)\n    return num_list\n",
        "num_ids": 52
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index = 0\n    while index < len(num_list) - 1:\n        if num_list[index] == 0:\n            num_list.append(0)\n            num_list.pop(index)\n        else:\n            index += 1\n    print(num_list)\n",
        "num_ids": 70
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for num in num_list:\n        if num == 0:\n            num_list.remove(num)\n            num_list.append(num)\n    return num_list\n",
        "num_ids": 44
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    arr.sort()\n    for i in range(n) : \n        s += arr[i] ^ arr[n-1-i]\n    return s\n",
        "num_ids": 45
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return reduce(lambda x, y: x^y,arr)\n",
        "num_ids": 18
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) :\n        for j in range(i+1,n):\n            sum += arr[i]^arr[j]\n    return sum\n",
        "num_ids": 47
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    # If length of array is even then return 0 \n    if (n % 2 == 0) : \n        return 0\n    else : \n        xor = 0\n        for i in range(0, n) : \n            for j in range(i + 1, n) : \n                xor += (arr[i] ^ arr[j]) \n        return xor \n",
        "num_ids": 94
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr_set = set() \n    for i in range(n) :\n        for j in range(i+1, n) :\n            arr_set.add(arr[i] ^ arr[j])\n    return sum(arr_set)\n",
        "num_ids": 61
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s=0\n    for i in range(n):\n        for j in range(i+1,n):\n            s^=arr[i]^arr[j]\n    return s\n",
        "num_ids": 47
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Method 1: brute force\n    sum_xor = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            sum_xor = sum_xor ^ arr[i] ^ arr[j]\n    return sum_xor\n",
        "num_ids": 70
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n) :\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            sum = sum + (arr[i] ^ arr[j])\n    return sum\n    \n",
        "num_ids": 53
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] ^ pair_xor_Sum(arr[2:], n)\n",
        "num_ids": 45
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    result = []\n    # build the heap \n    for num in iterable:\n        hq.heappush(h, num)\n    # heap sort\n    for _ in range(len(h)):\n        result.append(hq.heappop(h))\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while len(iterable) > 0:\n        result.append(hq.heappop(iterable))\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for val in iterable:\n        hq.heappush(heap, val)\n    return [hq.heappop(heap) for i in range(len(heap))]\n",
        "num_ids": 55
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a list of all numbers\n    # set a limit of 10000\n    # init a heap of 10000\n    # append the iterable to the heap and decrease heap size by 1\n    # pop the head of the heap and print the first 10\n    # pop the head of the iterable and compare to the head of the heap. if equal, print\n    # if not equal, append to the heap and decrease heap size by 1\n    # pop the head of the heap and print the first 10\n    # repeat\n",
        "num_ids": 115
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n",
        "num_ids": 39
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for val in iterable:\n        hq.heappush(h,val)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount < 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"Sale amount is equal to the actual cost\")\n    elif actual_cost < sale_amount:\n        print(\"Sale amount is greater than the actual cost\")\n    else:\n        print(\"Sale amount is less than the actual cost\")\n",
        "num_ids": 71
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(f\"{sale_amount} has no profit and no loss\")\n    elif actual_cost < sale_amount:\n        print(f\"{sale_amount} has no profit and loss of {actual_cost - sale_amount}\")\n    else:\n        print(f\"{sale_amount} has profit and loss of {sale_amount - actual_cost}\")\n",
        "num_ids": 100
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 29
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # actual_cost = 100\n    # sale_amount = 0\n    if actual_cost < sale_amount:\n        return 'profitable'\n    elif actual_cost > sale_amount:\n        return 'non-profitable'\n    else:\n        return 'perfect'\n",
        "num_ids": 67
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount<=actual_cost:\n        return True\n    else:\n        return False\n        \n",
        "num_ids": 28
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n    \nprint(noprofit_noloss(9, 9)) # true\nprint(noprofit_noloss(15, 20)) # true\nprint(noprofit_noloss(7, 15)) # false\n",
        "num_ids": 81
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount==actual_cost:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    wci = 13.12 + (0.6215*t) - (11.37*math.pow(v,0.16)) + (0.3965*t*math.pow(v,0.16))\n    return int(round(wci))\nprint(wind_chill(2,5))\n",
        "num_ids": 94
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = 35.74 + (0.6215*v) - (35.75*t) + (0.4275*t*v) + 0.094*math.pow(v,2)\n    return round(wind_chill)\n",
        "num_ids": 65
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.1270\n    f = 35.75\n    g = 0.1219\n    h = 35.75\n    i = 0.3965\n    j = 0.1699\n",
        "num_ids": 78
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #v is in km/h and t is in celsius\n    v = float(v)\n    t = float(t)\n    #print(v,t)\n    v = v*(5/18)\n    v = math.pow(v,0.16)\n    a = 35.74 + 0.6215 * t - 35.75 * v + 0.4275 * t * v\n    a = round(a)\n    return a\n",
        "num_ids": 109
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    ch = 13.12 + (0.6215 * t) - (11.37 * (v ** 0.16)) + (0.3965 * t * (v ** 0.16))\n    return math.floor(ch)\n",
        "num_ids": 56
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def wind_chill_helper(t,v):\n        '''\n        Returns the wind chill factor for a given temperature and wind velocity.\n        '''\n        a = 35.74\n        b = 0.6215\n        c = 35.75\n        d = 0.4275\n        e = v**0.16\n        f = math.pow((t+273.15),0.16)\n        return a-b*e/f+c*d*e/f\n    if isinstance(v,str) or isinstance(t,str):\n        return \"Invalid inputs\"\n    else:\n        return round(wind_chill_helper(t,v))\n",
        "num_ids": 124
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = 35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16)\n    return wind_chill\n",
        "num_ids": 53
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=float(v)\n    t=float(t)\n    if (v>1.5 and t>0 and t<=12):\n        return round(35.74+0.6215*t-35.75*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>2 and t>0 and t<=12):\n        return round(54.34+0.6215*t-34.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>3 and t>0 and t<=12):\n        return round(58.93+0.66*t-44.8*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>4 and t>0 and t<=12):\n        return round(80.48+0.64*t-51.3*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>5 and t>0 and t<=12):\n        return round(81.91+0.65*t-42.5*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>6 and t>0 and t<=12):\n        return round(82.48+0.64*t-44.1*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>7 and t>0 and t<=12):\n        return round(86.89+0.58*t-48.5*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>8 and t>0 and t<=12):\n        return round(89.44+0.57*t-47.8*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>9 and t>0 and t<=12):\n        return round(88.15+0.54*t-46.1*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>10 and t>0 and t<=12):\n        return round(89.45+0.54*t-47.4*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>11 and t>0 and t<=12):\n        return round(90.29+0.53*t-46.8*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>12 and t>0 and t<=12):\n        return round(90.56+0.52*t-46.9*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>13 and t>0 and t<=12):\n        return round(89.35+0.51*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>14 and t>0 and t<=12):\n        return round(89.23+0.5*t-46.4*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>15 and t>0 and t<=12):\n        return round(89.01+0.51*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>16 and t>0 and t<=12):\n        return round(88.62+0.5*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>17 and t>0 and t<=12):\n        return round(87.84+0.5*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>18 and t>0 and t<=12):\n        return round(87.25+0.5*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>19 and t>0 and t<=12):\n        return round(86.46+0.5*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>20 and t>0 and t<=12):\n        return round(85.97+0.5*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>21 and t>0 and t<=12):\n        return round(85.48+0.5*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>22 and t>0 and t<=12):\n        return round(85.19+0.5*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>23 and t>0 and t<=12):\n        return round(85.09+0.5*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>24 and t>0 and t<=12):\n        return round(84.69+0.5*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>25 and t>0 and t<=12):\n        return round(84.2+0.5*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>26 and t>0 and t<=12):\n        return round(83.79+0.5*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>27 and t>0 and t<=12):\n        return round(83.29+0.5*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>28 and t>0 and t<=12):\n        return round(83.29+0.5*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>29 and t>0 and t<=12):\n        return round(83.29+0.5*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,0.16))\n    elif (v>30 and t>0 and t<=12):\n        return round(83.29+0.5*t-46.7*math.pow(v,0.16)+0.4275*t*math.pow(v,",
        "num_ids": 1996
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 3:\n        return None\n    if t < 10:\n        return None\n    \n    v = float(v)\n    t = float(t)\n    \n    v = v*1.852\n    t = t + 273.15\n    v = math.pow(v,2)\n    \n    c = 35.74\n    v = c*v/(v-c*(t-35.74))\n    \n    return round(v)\n",
        "num_ids": 113
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    wci = 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16\n    return round(wci)\nprint(wind_chill(10,2))\n",
        "num_ids": 76
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    name_len = []\n    for i in sample_names:\n        if i.startswith(('a', 'A')):\n            continue\n        else:\n            name_len.append(len(i))\n    print('Total length of all names is: ', sum(name_len))\n",
        "num_ids": 73
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [s for s in sample_names if not s[0].islower()]\n    return len(''.join(sample_names))\n",
        "num_ids": 38
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if not sample_names:\n        return 0\n    else:\n        return sum([len(sample_name) for sample_name in sample_names if not sample_name[0].islower()])\n",
        "num_ids": 49
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = []\n    for i in range(len(sample_names)):\n        if sample_names[i][0].islower():\n            continue\n        else:\n            result.append(sample_names[i])\n    return len(result)\n",
        "num_ids": 61
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [name for name in sample_names if name[0].isupper()]\n    return sum(len(name) for name in sample_names)\n",
        "num_ids": 41
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for i in sample_names:\n        if i[0].islower():\n            sample_names.remove(i)\n            return sum(len(i) for i in sample_names)\n",
        "num_ids": 47
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for i in sample_names:\n        if i[0].islower():\n            sample_names.remove(i)\n    return sum(len(i) for i in sample_names)\n",
        "num_ids": 47
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for i in sample_names:\n        if i[0].islower():\n            sample_names.remove(i)\n            continue\n        else:\n            continue\n    return len(sample_names)\n",
        "num_ids": 50
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def remove_start(t):\n        if t[0].islower():\n            return None\n        return t[1:]\n    for i in sample_names:\n        if i.startswith(' '):\n            sample_names.remove(i)\n        else:\n            sample_names.remove(i)\n    sample_names = list(filter(remove_start, sample_names))\n    return sum(map(len, sample_names))\n",
        "num_ids": 107
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['A', 'B', 'a', 'b', 'a', 'b']\n    for i in sample_names:\n        if i[0].islower():\n            sample_names.remove(i)\n    return sample_names\n",
        "num_ids": 61
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        #print('item: ', item)\n        #print('1: ', item[1:item.index('(')])\n        #print('2: ', item[item.index('(')+1:item.index(')')])\n        print(item[1:item.index('(')].strip(), end=' ')\n        #print(item[item.index('(')+1:item.index(')')].strip())\n        #print(item[item.index('(')+1:item.index(')')])\n        print(item[item.index('(')+1:item.index(')')].strip())\n",
        "num_ids": 152
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = items[1:-1]\n    if new_items == '':\n        new_items = items[1:]\n    return new_items\n",
        "num_ids": 39
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if(re.search(r\"^\\([\\s\\S]*\\)$\", item)):\n            return re.search(r\"^\\([\\s\\S]*\\)$\", item).group()\n        elif(re.search(r\"^\\([\\s\\S]*\\)\", item)):\n            return re.search(r\"^\\([\\s\\S]*\\)\", item).group()\n        elif(re.search(r\"^[\\s\\S]*\\)$\", item)):\n            return re.search(r\"^[\\s\\S]*\\)$\", item).group()\n        elif(re.search(r\"^[\\s\\S]*\\)\", item)):\n            return re.search(r\"^[\\s\\S]*\\)\", item).group()\n",
        "num_ids": 204
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) < 1:\n        return ''\n",
        "num_ids": 16
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile(r'\\([^()]*\\)')\n    string = re.sub(regex, '', items)\n    return string\n",
        "num_ids": 41
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items\n",
        "num_ids": 27
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    p = re.compile('\\([^()]+\\)')\n    return p.sub('',items)\n",
        "num_ids": 28
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while '(' in items:\n        new_items = ''\n        index_start = items.index('(')\n        index_end = items.index(')')\n        while not items[index_start - 1] == ')':\n            index_start -= 1\n        while not items[index_end + 1] == '(':\n            index_end += 1\n        for index in range(index_start, index_end + 1):\n            new_items += items[index]\n        items = new_items\n    return items\n",
        "num_ids": 124
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove the parenthesis\n    for item in items:\n        if '(' in item:\n            item = re.sub(r'\\(.*\\)', '', item)\n        if ')' in item:\n            item = re.sub(r'\\).*', '', item)\n    return item\n",
        "num_ids": 73
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        return re.sub('[\\(\\[].*?[\\)\\]]', '', item)\n",
        "num_ids": 32
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return(n**3 + (n**2)*(n+1) + (n+1)**2)\n",
        "num_ids": 29
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))/2\n",
        "num_ids": 15
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n**2 + is_nonagonal(n-1)\n",
        "num_ids": 33
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    #\n    # Your code here\n    #\n    return int((n * (n + 1)) / 2)\n",
        "num_ids": 29
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    m = (1/6)*(-1 + (-1/2 + (-1/2)**2)**0.5)\n    return m*(n**2)\n",
        "num_ids": 42
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    sum_diagonals = 1\n    nono = 0\n    for i in range(1,n):\n        sum_diagonals = sum_diagonals + i + i\n        nono = nono + sum_diagonals\n    return nono\n    \n",
        "num_ids": 65
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def is_diagonal(n): \n        '''\n        Write a function to find the nth diagonal number.\n        '''\n        def is_perfect_square(n):\n            '''\n            Write a function to find whether a number is a perfect square or not.\n            '''\n            import math\n            def is_even(n): \n                '''\n                Write a function to check whether a number is even or not.\n                '''\n                if n % 2 == 0:\n                    return True\n                else:\n                    return False\n",
        "num_ids": 23
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 2:\n        return n\n    return (n*(n-1))//2\n",
        "num_ids": 26
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nth_num = 0\n    \n    for i in range(1, n+1):\n        nth_num += i**2\n    \n    return nth_num\n",
        "num_ids": 44
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # text = 'This is a good example'\n    # text2 = 'You are not good enough.'\n    # text3 = 'You are not good at all.'\n    # text4 = 'You are not good at all not even at all.'\n    # text5 = 'not good at all.'\n    # text6 = 'good at all not'\n    # text7 = 'good at all not at all.'\n    # text8 = 'good at all not at all'\n    # text9 = 'good at all at all.'\n    # text10 = 'good at all at all.'\n    text = 'good at all'\n    text2 = 'good at all not'\n    text3 = 'good at all not at all.'\n    text4 = 'good at all not at all'\n    text5 = 'good at all at all.'\n    text6 = 'good at all at all.'\n    text7 = 'good at all at all not'\n    text8 = 'good at all at all not at all.'\n    text9 = 'good at all at all not at all'\n    text10 = 'good at all at all at all'\n    text11 = 'good at all at all at all not'\n    text12 = 'good at all at all at all not at all.'\n    text13 = 'good at all at all at all not at all not at all'\n    text14 = 'good at all at all at all not at all not at all not at all'\n    text15 = 'good at all at all at all not at all not at all not at all not at all'\n    text16 = 'good at all at all at all not at all not at all not at all not at all not at all'\n    text17 = 'good at all at all at all not at all not at all not at all not at all not at all not at all'\n    text18 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all'\n    text19 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text20 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text21 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text22 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text23 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text24 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text25 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text26 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text27 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text28 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text29 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text30 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text31 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text32 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text33 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text34 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text35 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text36 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all'\n    text37 = 'good at all at all at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not at all not a",
        "num_ids": 2002
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.findall(r'(?<!\\A)z(?=\\w+\\Z)', text)\n    if match:\n        return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace(\" \",\"\")\n    if len(text) < 2:\n        return False\n    else:\n        if text[0] == 'z':\n            return False\n        else:\n            for i in range(1,len(text)):\n                if text[i] == 'z':\n                    if text[i-1]!= 'z':\n                        return False\n                    else:\n                        continue\n                else:\n                    continue\n    return True\n",
        "num_ids": 111
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.find('z') == 0 or text.find('z') == len(text)-1:\n        return False\n    else:\n        return True\n",
        "num_ids": 39
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'\\b[^\\b]z\\b[^\\b]', text)\ndef text_match_wordz_middle_re(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'^\\b[^\\b]z\\b[^\\b]$', text)\n",
        "num_ids": 31
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text=re.sub(r'[^\\w]', '', text)\n    return text.find('z')!=0 and text.find('z')!=len(text)-1\n",
        "num_ids": 48
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Create the regular expression.\n    regex = r\"[^a-z]z\"\n",
        "num_ids": 24
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r\"z\\b\")\n    result = pattern.findall(text)\n    print(result)\n    \n    return result\n",
        "num_ids": 40
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_3(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_4(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_5(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_6(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_7(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_8(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_9(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_10(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_11(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_12(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_13(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_14(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_15(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_16(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_17(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_18(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_19(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_20(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_21(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_22(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]=='z':\n            return False\n        else:\n            return True\n    else:\n        return False\ndef text_match_wordz_middle_23(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(\"z+\",text):\n        if text[0]==",
        "num_ids": 21
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]\n",
        "num_ids": 19
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = list(input)\n    input.reverse()\n    if(k>=0):\n        input = input[:k]\n    else:\n        k = k*(-1)\n        input = input[k:]\n    return input\n",
        "num_ids": 59
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    result = []\n    # result.append(input[k:])\n    # result.append(input[:k])\n    for i in range(0, k):\n        result.append(input[i])\n    for i in range(k, len(input)):\n        result.append(input[i])\n    return result\n    # return input[:k] + input[k:]\ndef reverse_Array_From_K(input, k):\n    result = []\n    for i in range(0, k):\n        result.append(input[i])\n    for i in range(k, len(input)):\n        result.append(input[i])\n    return result\ndef rotate_Array_Upto_K(input, k):\n    '''\n    Write a python function to rotate the given array by k.\n    '''\n    result = []\n    for i in range(k, len(input)):\n        result.append(input[i])\n    for i in range(0, k):\n        result.append(input[i])\n    return result\ndef rotate_Array_From_K(input, k):\n    '''\n    Write a python function to rotate the given array by k.\n    '''\n    result = []\n    for i in range(0, k):\n        result.append(input[i])\n    for i in range(k, len(input)):\n        result.append(input[i])\n    return result\ndef reverse_Array_Upto_K_Slow(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    result = input[:k]\n    for i in range(k, len(input)):\n        result.append(input[i])\n    return result\ndef reverse_Array_From_K_Slow(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    result = []\n    for i in range(0, k):\n        result.append(input[i])\n    for i in range(k, len(input)):\n        result.append(input[i])\n    return result\ndef rotate_Array_Upto_K_Slow(input, k):\n    '''\n    Write a python function to rotate the given array by k.\n    '''\n    result = input[k:]\n    for i in range(0, k):\n        result.append(input[i])\n    return result\ndef rotate_Array_From_K_Slow(input, k):\n    '''\n    Write a python function to rotate the given array by k.\n    '''\n    result = []\n    for i in range(0, k):\n        result.append(input[i])\n    for i in range(k, len(input)):\n        result.append(input[i])\n    return result\ndef sort_Array_From_K(input, k):\n    '''\n    Write a python function to sort the given array from k.\n    '''\n    result = []\n    for i in range(k, len(input)):\n        result.append(input[i])\n    for i in range(0, k):\n        result.append(input[i])\n    return result\n    # return input[k:] + input[:k]\ndef sort_Array_Upto_K(input, k):\n    '''\n    Write a python function to sort the given array upto a given position.\n    '''\n    result = []\n    for i in range(k, len(input)):\n        result.append(input[i])\n    for i in range(0, k):\n        result.append(input[i])\n    return result\n    # return input[k:] + input[:k]\ndef find_Duplicates(input):\n    '''\n    Write a python function to find the duplicates in the given array.\n    '''\n    result = []\n    for i in range(0, len(input)):\n        if input.count(input[i]) > 1:\n            if input[i] not in result:\n                result.append(input[i])\n    return result\n    # return [x for x in input if input.count(x) > 1]\ndef find_Duplicates_Fast(input):\n    '''\n    Write a python function to find the duplicates in the given array.\n    '''\n    result = []\n    for i in range(0, len(input)):\n        index = abs(input[i]) - 1\n        if input[index] < 0:\n            result.append(index + 1)\n        input[index] = -input[index]\n    return result\n    # return [i+1 for i in range(0, len(input)) if input[i] < 0]\ndef reverse_String(input):\n    '''\n    Write a python function to reverse a string.\n    '''\n    result = ''\n    for i in range(len(input)-1, -1, -1):\n        result += input[i]\n    return result\n    # return input[::-1]\ndef reverse_String_Slow(input):\n    '''\n    Write a python function to reverse a string.\n    '''\n    result = ''\n    for i in range(len(input)-1, -1, -1):\n        result += input[i]\n    return result\n    # return ''.join(reversed(input))\ndef isPalindrome(input):\n    '''\n    Write a python function to determine if the given string is a palindrome or not.\n    '''\n    return input == reverse_String(input)\n    # return input == ''.join(reversed(input))\ndef isPalindrome_Slow(input):\n    '''\n    Write a python function to determine if the given string is a palindrome or not.\n    '''\n    return input == reverse_String_Slow(input)\n    # return input == ''.join(reversed(input))\ndef generate_Array(input):\n    '''\n    Write a python function to generate a array of given size.\n    '''\n    return [x for x in range(0, input)]\n    # return list(range(0, input))\ndef generate_Array_Upto_K(input, k):\n    '''\n    Write a python function to generate a array of given size upto a given position.\n    '''\n    return [x for x in range(0, k)]\n    # return list(range(0, k))\ndef generate_Array_From_K(input, k):\n    '''\n    Write a python function to generate a array of given size from a given position.\n    '''\n    return [x for x in range(k, input)]\n    # return list(range(k, input))\ndef count_Appear_All(input, k):\n    '''\n    Write a python function to count the number of times a given element appears in a given array.\n    '''\n    count = 0\n    for i in range(0, len(input)):\n        if input[i] == k:\n            count += 1\n    return count\n    # return input.count(k)\ndef count_Appear_Some(input, k):\n    '''\n    Write a python function to count the number of times a given element appears in a given array.\n    '''\n    count = 0\n    for i in range(0, len(input)):\n        if input[i] == k:\n            count += 1\n    return count\n    # return sum(1 for i in range(0, len(input)) if input[i] == k)\ndef count_Appear_All_Slow(input, k):\n    '''\n    Write a python function to count the number of times a given element appears in a given array.\n    '''\n    count = 0\n    for i in range(0, len(input)):\n        if input[i] == k:\n            count += 1\n    return count\n    # return sum(1 for i in range(0, len(input)) if input[i] == k)\ndef count_Appear_Some_Slow(input, k):\n    '''\n    Write a python function to count the number of times a given element appears in a given array.\n    '''\n    count = 0\n    for i in range(0, len(input)):\n        if input[i] == k:\n            count += 1\n    return count\n    # return sum(1 for i in range",
        "num_ids": 50
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) < 2:\n        return input\n    arr = input[:k][::-1]\n    arr.extend(input[k:])\n    return arr\n    \ndef array_left_rotation(input, rotations):\n    '''\n    Given an array and a rotation, output the array rotated left or right. \n    '''\n    #length = len(input)\n    #rotations = rotations % length\n    #input = input[length - rotations:] + input[:length - rotations]\n    #return input\n    return input[rotations:] + input[:rotations]\n    \ndef array_left_rotation_with_reversal(input, rotations):\n    '''\n    Given an array and a rotation, output the array rotated left or right. \n    '''\n    length = len(input)\n    rotations = rotations % length\n    input = input[rotations:] + input[:rotations]\n    return input[::-1]\n",
        "num_ids": 44
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if input == None or len(input) == 0:\n        return -1\n    if k == 0:\n        return input\n    if k < 0:\n        return -1\n",
        "num_ids": 44
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = k-1\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    return input\n",
        "num_ids": 54
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input) or k <= 0:\n        print(\"Please enter valid input.\")\n        return\n    else:\n        input[:k] = input[:k][::-1]\n        input[k:] = input[k:][::-1]\n        print(input)\n        return input\n        \n        \ndef reverse_Array_Upto_K_recursive(input, k): \n    '''\n    Write a python function to reverse an array upto a given position\n    using recursion.\n    '''\n    if k == 0 or k > len(input):\n        print(\"Please enter valid input.\")\n        return\n    else:\n        input[:k] = input[:k][::-1]\n        input[k:] = input[k:][::-1]\n        print(input)\n        return reverse_Array_Upto_K_recursive(input, k-1)\n        \n        \n        \ndef reverse_Array_Upto_K_recursive_helper(input, k): \n    '''\n    Write a python function to reverse an array upto a given position using\n    recursion. The helper function will print out the reversed array and\n    return the reversed array.\n    '''\n    if k == 0 or k > len(input):\n        print(input)\n        return\n    else:\n        input[:k] = input[:k][::-1]\n        input[k:] = input[k:][::-1]\n        print(input)\n        return reverse_Array_Upto_K_recursive_helper(input, k-1)\n        \n        \n        \n        \ndef rotate_array_by_d(input, d): \n    '''\n    Write a python function to rotate an array by a given value.\n    '''\n    print(input[d:]+input[:d])\n    return input[d:]+input[:d]\n        \n        \n        \ndef rotate_array_by_d_recursive(input, d): \n    '''\n    Write a python function to rotate an array by a given value using\n    recursion.\n    '''\n    if d == 0 or d == len(input):\n        print(input)\n        return input\n    else:\n        print(input[d:]+input[:d])\n        return input[d:]+input[:d]\n        \n        \n        \n        \ndef rotate_array_by_d_recursive_helper(input, d): \n    '''\n    Write a python function to rotate an array by a given value using\n    recursion. The helper function will print out the rotated array and\n    return the rotated array.\n    '''\n    if d == 0 or d == len(input):\n        print(input)\n        return input\n    else:\n        print(input[d:]+input[:d])\n        return input[d:]+input[:d]\n        \n        \n        \n        \ndef get_nth_element(input, n):\n    '''\n    Write a python function to return the nth element of an array.\n    '''\n    if n > len(input) or n <= 0:\n        print(\"Please enter valid input.\")\n        return\n    else:\n        print(input[n-1])\n        return input[n-1]\n        \n        \n        \ndef get_nth_element_recursive(input, n):\n    '''\n    Write a python function to return the nth element of an array using\n    recursion.\n    '''\n    if n == 0 or n > len(input):\n        print(\"Please enter valid input.\")\n        return\n    else:\n        print(input[n-1])\n        return input[n-1]\n        \n        \n        \ndef get_nth_element_recursive_helper(input, n):\n    '''\n    Write a python function to return the nth element of an array using\n    recursion. The helper function will print out the nth element and\n    return the nth element.\n    '''\n    if n == 0 or n > len(input):\n        print(\"Please enter valid input.\")\n        return\n    else:\n        print(input[n-1])\n        return input[n-1]\n        \n        \n        \n        \ndef get_unique_characters(input):\n    '''\n    Write a python function to return a unique list of characters in the\n    input string.\n    '''\n    input = input.lower()\n    input = list(input)\n    print(list(set(input)))\n    return list(set(input))\n        \n        \n        \ndef get_unique_characters_recursive(input):\n    '''\n    Write a python function to return a unique list of characters in the\n    input string. The helper function will print out the unique list of\n    characters and return the unique list.\n    '''\n    input = input.lower()\n    input = list(input)\n    print(list(set(input)))\n    return list(set(input))\n    \n    \n    \n        \ndef get_unique_characters_helper(input):\n    '''\n    Write a python function to return a unique list of characters in the\n    input string. The helper function will print out the unique list of\n    characters and return the unique list.\n    '''\n    input = input.lower()\n    input = list(input)\n    print(list(set(input)))\n    return list(set(input))\n    \n    \n        \n        \n        \ndef remove_duplicates(input):\n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    input = list(set(input))\n    print(input)\n    return input\n    \n    \n    \ndef remove_duplicates_recursive(input):\n    '''\n    Write a python function to remove duplicates from a list using\n    recursion.\n    '''\n    if len(input) == 0:\n        print(input)\n        return\n    else:\n        input = list(set(input))\n        print(input)\n        return remove_duplicates_recursive(input)\n    \n    \n    \ndef remove_duplicates_helper(input):\n    '''\n    Write a python function to remove duplicates from a list using\n    recursion. The helper function will print out the unique list and\n    return the unique list.\n    '''\n    if len(input) == 0:\n        print(input)\n        return\n    else:\n        input = list(set(input))\n        print(input)\n        return remove_duplicates_helper(input)\n        \n        \n        \ndef get_highest_frequency_character(input):\n    '''\n    Write a python function to return the highest frequency character\n    in the input string.\n    '''\n    input = input.lower()\n    input = list(input)\n    highest_freq_count = 0\n    highest_freq_char = ''\n    for i in input:\n        input = list(input)\n        freq_count = input.count(i)\n        if freq_count > highest_freq_count:\n            highest_freq_count = freq_count\n            highest_freq_char = i\n    print(highest_freq_char)\n    return highest_freq_char\n        \n        \n        \ndef get_highest_frequency_character_recursive(input):\n    '''\n    Write a python function to return the highest frequency character\n    in the input string using recursion.\n    '''\n    input = input.lower()\n    input = list(input)\n    highest_freq_count = 0\n    highest_freq_char = ''\n    for i in input:\n        input = list(input)\n        freq_count = input.count(i)\n        if freq_count > highest_freq_count:\n            highest_freq_count = freq_count\n            highest_freq_char = i\n    print(highest_freq_char)\n    return highest_freq_char\n        \n        \n        \ndef get_highest_frequency_character_helper(input):\n    '''\n    Write a python function to return the highest frequency character\n    in the input string using recursion. The helper function will print\n    out the highest frequency character and return the highest frequency\n    character.\n    '''\n    input = input.lower()\n    input = list(input)\n    highest_freq_count = 0",
        "num_ids": 27
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    rev_array = []\n    for i in range(k, len(input)): \n        rev_array.append(input[i])\n    for i in range(k): \n        rev_array.append(input[i])\n    return rev_array\n",
        "num_ids": 64
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Implementing reverse_Array_Upto_K\n    print(\"Array reverse upto %s position:\" %(k))\n    input[:] = input[-1:-k-1:-1]\n    print(input)\n    return\n",
        "num_ids": 58
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = list(input)\n    left = 0\n    right = len(input) - 1\n    while left < k/2 and right >= k/2 and left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    if k%2 == 0:\n        return \"\".join(input[:k/2]) + \"\".join(input[k/2:])\n    else:\n        return \"\".join(input[:k/2 + 1]) + \"\".join(input[k/2 + 1:])\n",
        "num_ids": 142
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # code goes here\n    # return test_tup + (test_dict, )\n",
        "num_ids": 23
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup, test_dict)\n    return test_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    return test_tup + (test_dict,)\n",
        "num_ids": 17
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + tuple(test_dict.values())\n    return test_tup\n",
        "num_ids": 29
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Write your code here\n    return test_tup + (test_dict,)\n",
        "num_ids": 22
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup += (test_dict,)\n    return test_tup\n",
        "num_ids": 35
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1]/((n*n)-1)\n",
        "num_ids": 185
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # column = len(cost)\n    # row = len(cost[0])\n    # max_sum = -1\n    # max_avg = -1\n    # for i in range(row):\n    #     for j in range(column):\n    #         path_sum = 0\n    #         path_avg = 0\n    #         k = i\n    #         l = j\n    #         while k < row and l < column:\n    #             path_sum += cost[k][l]\n    #             if (k+1 < row and l+1 < column):\n    #                 path_avg = path_sum/((row-k)*(column-l))\n    #             elif (k+1 < row):\n    #                 path_avg = path_sum/((row-k)*(column-l+1))\n    #             elif (l+1 < column):\n    #                 path_avg = path_sum/((row-k+1)*(column-l))\n    #             else:\n    #                 path_avg = path_sum/(row*column)\n    #             k += 1\n    #             l += 1\n    #         if max_avg < path_avg:\n    #             max_avg = path_avg\n    #             max_sum = path_sum\n    # return max_sum\n",
        "num_ids": 322
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # for i in range(len(cost[0])):\n    #     print(cost[i])\n",
        "num_ids": 27
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    maxavg = 0\n    for i in range(len(cost)):\n        for j in range(len(cost)):\n            count, tot = 0, 0\n            if j + 1 < len(cost):\n                count += 1\n                tot += cost[i][j]\n            if i + 1 < len(cost):\n                count += 1\n                tot += cost[i][j]\n            avg = tot/count\n            if avg > maxavg:\n                maxavg = avg\n    return maxavg\n",
        "num_ids": 126
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    global maxPath\n    global max\n",
        "num_ids": 11
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # T: O(n^4) S: O(n)\n    def maxAverageOfPathRec(cost, i, j):\n        if i < 0 or i >= len(cost) or j < 0 or j >= len(cost[0]):\n            return float('-inf')\n        if i == len(cost) - 1 and j == len(cost[0]) - 1:\n            return cost[i][j]\n        return max(\n            maxAverageOfPathRec(cost, i + 1, j),\n            maxAverageOfPathRec(cost, i, j + 1),\n            cost[i][j] + max(maxAverageOfPathRec(cost, i + 1, j), maxAverageOfPathRec(cost, i, j + 1))\n        )\n    # T: O(n^3) S: O(n^2)\n    def maxAverageOfPathRec2(cost):\n        memo = [[0] * (len(cost[0])) for _ in range(len(cost))]\n        for j in range(len(cost[0])):\n            memo[len(cost) - 1][j] = cost[len(cost) - 1][j]\n        for i in range(len(cost) - 2, -1, -1):\n            for j in range(len(cost[0])):\n                memo[i][j] = max(memo[i + 1][j], memo[i][j + 1]) + cost[i][j]\n        return memo[0][0] / (len(cost) - 1)\n    return maxAverageOfPathRec(cost, 0, 0)\n",
        "num_ids": 381
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #find the number of rows and columns in matrix\n    N = len(cost)\n    #create a list to hold the max cost of each cell\n    maxCostList = [0 for _ in range(N)]\n    #maxCostList = [0]*N\n    #create a list to hold the number of cells visited in each cell\n    count = [0 for _ in range(N)]\n    #count = [0]*N\n    #create a list to hold the max cost of each cell's neighbors\n    costNeighborList = [0 for _ in range(N)]\n    #costNeighborList = [0]*N\n    #create a list to hold the average of each cell's neighbors\n    avgNeighborList = [0 for _ in range(N)]\n    #avgNeighborList = [0]*N\n    #create a list to hold the visited cells in the current path\n    visited = [[False for _ in range(N)] for _ in range(N)]\n    #visited = [[False]*N]*N\n    #create a list to hold the final path\n    finalPath = [[0 for _ in range(N)] for _ in range(N)]\n    #finalPath = [[0]*N]*N\n    #create a list to hold the final average of each cell\n    finalAvg = [0 for _ in range(N)]\n    #finalAvg = [0]*N\n    #create a list to hold the visited cells in the final path\n    finalVisited = [[False for _ in range(N)] for _ in range(N)]\n    #finalVisited = [[False]*N]*N\n    \n    #iterate over the matrix\n    for i in range(N):\n        for j in range(N):\n            #if the cell has not been visited\n            if not visited[i][j]:\n                #check if there is a neighbor cell on the right\n                if j < N-1:\n                    #check if the neighbor cell is visited\n                    if visited[i][j+1]:\n                        #if the neighbor cell is visited, add the cost of that cell to the current cell's cost\n                        costNeighborList[i] += cost[i][j+1]\n                        #increase the number of cells visited in the current path by 1\n                        count[i] += 1\n                        #increase the number of cells visited in the neighbor cell by 1\n                        count[i] += 1\n                        #add the neighbor cell's cost to the current cell's neighbor list\n                        costNeighborList[i] += cost[i][j+1]\n                        #add the current cell to the current neighbor's visited list\n                        visited[i][j+1] = True\n                #check if there is a neighbor cell down\n                if i < N-1:\n                    #check if the neighbor cell is visited\n                    if visited[i+1][j]:\n                        #if the neighbor cell is visited, add the cost of that cell to the current cell's cost\n                        costNeighborList[i] += cost[i+1][j]\n                        #increase the number of cells visited in the current path by 1\n                        count[i] += 1\n                        #increase the number of cells visited in the neighbor cell by 1\n                        count[i] += 1\n                        #add the neighbor cell's cost to the current cell's neighbor list\n                        costNeighborList[i] += cost[i+1][j]\n                        #add the current cell to the current neighbor's visited list\n                        visited[i+1][j] = True\n                #check if there is a neighbor cell diagonally down and to the right\n                if i < N-1 and j < N-1:\n                    #check if the neighbor cell is visited\n                    if visited[i+1][j+1]:\n                        #if the neighbor cell is visited, add the cost of that cell to the current cell's cost\n                        costNeighborList[i] += cost[i+1][j+1]\n                        #increase the number of cells visited in the current path by 1\n                        count[i] += 1\n                        #increase the number of cells visited in the neighbor cell by 1\n                        count[i] += 1\n                        #add the neighbor cell's cost to the current cell's neighbor list\n                        costNeighborList[i] += cost[i+1][j+1]\n                        #add the current cell to the current neighbor's visited list\n                        visited[i+1][j+1] = True\n                #check if there is a neighbor cell diagonally down and to the left\n                if i < N-1 and j > 0:\n                    #check if the neighbor cell is visited\n                    if visited[i+1][j-1]:\n                        #if the neighbor cell is visited, add the cost of that cell to the current cell's cost\n                        costNeighborList[i] += cost[i+1][j-1]\n                        #increase the number of cells visited in the current path by 1\n                        count[i] += 1\n                        #increase the number of cells visited in the neighbor cell by 1\n                        count[i] += 1\n                        #add the neighbor cell's cost to the current cell's neighbor list\n                        costNeighborList[i] += cost[i+1][j-1]\n                        #add the current cell to the current neighbor's visited list\n                        visited[i+1][j-1] = True\n                #check if there is a neighbor cell diagonally up and to the right\n                if i > 0 and j < N-1:\n                    #check if the neighbor cell is visited\n                    if visited[i-1][j+1]:\n                        #if the neighbor cell is visited, add the cost of that cell to the current cell's cost\n                        costNeighborList[i] += cost[i-1][j+1]\n                        #increase the number of cells visited in the current path by 1\n                        count[i] += 1\n                        #increase the number of cells visited in the neighbor cell by 1\n                        count[i] += 1\n                        #add the neighbor cell's cost to the current cell's neighbor list\n                        costNeighborList[i] += cost[i-1][j+1]\n                        #add the current cell to the current neighbor's visited list\n                        visited[i-1][j+1] = True\n                #check if there is a neighbor cell diagonally up and to the left\n                if i > 0 and j > 0:\n                    #check if the neighbor cell is visited\n                    if visited[i-1][j-1]:\n                        #if the neighbor cell is visited, add the cost of that cell to the current cell's cost\n                        costNeighborList[i] += cost[i-1][j-1]\n                        #increase the number of cells visited in the current path by 1\n                        count[i] += 1\n                        #increase the number of cells visited in the neighbor cell by 1\n                        count[i] += 1\n                        #add the neighbor cell's cost to the current cell's neighbor list\n                        costNeighborList[i] += cost[i-1][j-1]\n                        #add the current cell to the current neighbor's visited list\n                        visited[i-1][j-1] = True\n                #add the cost of the current cell to the current cell's max cost list\n                maxCostList[i] += cost[i][j]\n                #increase the number of cells visited in the current path by 1\n                count[i] += 1\n                #add the current cell to the current path's visited list\n                visited[i][j] = True\n    \n    #iterate over the max cost list\n    for i in range(N):\n        for j in range(N):\n            #check if the max cost of the current cell is greater than the current cell's max cost of neighbors\n            if maxCostList[i] > costNeighborList[i]:\n                #check if the max cost of the current cell is greater than the average of the current cell's neighbors\n                if maxCostList[i] > avgNeighborList[i]:\n                    #check if the max cost of the current cell is greater than the current cell's average\n                    if maxCostList[i] > avg[i]:\n                        #check if the max cost of the current cell is greater than the final max cost of the current path\n                        if maxCostList[i] > finalAvg[i]:\n                            #check if the max cost of the current cell is greater than the final max cost of the current path\n                            if maxCostList[i] > fina",
        "num_ids": 1944
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    path_map = {}\n",
        "num_ids": 9
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def find_paths(matrix,i,j):\n        if (i==len(matrix)-1) and (j==len(matrix[0])-1):\n            #print(matrix[i][j])\n            #print(len(path))\n            paths.append(path)\n            return\n        \n        if i==len(matrix)-1:\n            find_paths(matrix,i,j+1)\n            return\n        \n        if j==len(matrix[0])-1:\n            find_paths(matrix,i+1,j)\n            return\n        \n        path.append([i,j])\n        #print(path)\n        find_paths(matrix,i+1,j)\n        find_paths(matrix,i,j+1)\n        \n        path.pop()\n        return\n        \n    \n    paths=[]\n    path=[]\n    #print(len(cost))\n    find_paths(cost,0,0)\n    #print(paths)\n    \n    max_avg=0\n    for i in paths:\n        sum=0\n        for j in range(len(i)-1):\n            #print(i[j][0],i[j][1],i[j+1][0],i[j+1][1])\n            sum+=cost[i[j][0]][i[j][1]]\n        sum+=cost[i[j+1][0]][i[j+1][1]]\n        if sum/(len(i))>max_avg:\n            max_avg=sum/(len(i))\n            \n    return max_avg\n    \n    \n    \n    \nif __name__ == \"__main__\":\n    matrix=[\n            [1, 3, 3],\n            [2, 5, 4],\n            [2, 3, 3]\n        ]\n    \n    cost=[\n            [3, 4, 3],\n            [4, 3, 2],\n            [2, 4, 1]\n        ]\n    \n    print(maxAverageOfPath(cost))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1942
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[0][0]\n            elif i == 0:\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    \n    avg = sum(cost[n - 1])\n    for i in range(n):\n        if i!= 0:\n            avg -= dp[n - 1][i]\n    \n    avg /= n * n\n    return avg\n",
        "num_ids": 242
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for key in students:\n        if(students[key][0]>=h and students[key][1]>=w):\n            result[key] = students[key]\n    return result\n    \ndef find_average(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to calculate average height and weight of students with height and weight above the minimum.\n    '''\n    result = 0\n    count = 0\n    for key in students:\n        if(students[key][0]>=h and students[key][1]>=w):\n            result += students[key][0]\n            count += 1\n    return result/count\n    \ndef find_average_height(students,h):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height. Write a function to calculate average height of students with height above the minimal.\n    '''\n    result = 0\n    count = 0\n    for key in students:\n        if(students[key][0]>=h):\n            result += students[key][0]\n            count += 1\n    return result/count\n",
        "num_ids": 55
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0] >= h and v[1] >= w}\n",
        "num_ids": 33
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_list = []\n    for student in students:\n        if students[student][0] >= h and students[student][1] >= w:\n            filter_list.append(student)\n    return filter_list\n    \ndef count_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to count the number of students that have height and weight above the minimum.\n    '''\n    count = 0\n    for student in students:\n        if students[student][0] >= h and students[student][1] >= w:\n            count += 1\n    return count\n    \ndef get_data(students,student):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to get a tuple of the height and weight for the given student.\n    '''\n    return students[student]\n    \ndef print_data(students,student):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to print out the height and weight for the given student.\n    '''\n    print(students[student])",
        "num_ids": 10
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = []\n    for student in students:\n        if students[student][0] < h and students[student][1] < w:\n            result.append(student)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # students = {'jim':(180,70), 'bill':(180,80), 'joe':(170,120)}\n    # h = 100\n    # w = 110\n    # students = {k:v for k,v in students.items() if v[0]>=h and v[1]>=w}\n    # print(students)\n    return list(filter(lambda x:x[0]>=h and x[1]>=w, students))\n    \n",
        "num_ids": 119
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n    # your code goes here\n    \n    return students\n",
        "num_ids": 18
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0]>h and v[1]>w}\n",
        "num_ids": 33
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_dict={}\n    for student in students:\n        if students[student]>h and students[student]>w:\n            filtered_dict[student]=students[student]\n    return filtered_dict\n",
        "num_ids": 54
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {key: value for key, value in students.items() if value[0]>h and value[1]>w}\n    return filtered_data\n",
        "num_ids": 43
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for s in students:\n        if students[s][0] > h and students[s][1] > w:\n            result[s] = students[s]\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dict1 = dict()\n    count = 0\n    for num in nums1:\n        if num in dict1:\n            dict1[num] += 1\n        else:\n            dict1[num] = 1\n    \n    for num in nums2:\n        if num in dict1:\n            if dict1[num] > 0:\n                count += 1\n            dict1[num] -= 1\n    return count\n    \n    \ndef count_same_pair2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i, num1 in enumerate(nums1):\n        for j, num2 in enumerate(nums2):\n            if i == j and eq(num1, num2):\n                count += 1\n    return count\n    \ndef eq(num1, num2):\n    return num1 == num2\n    ",
        "num_ids": 82
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    list1 = list(nums1)\n    list2 = list(nums2)\n    l = len(nums1)\n    count = 0\n    for i in range(l):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0, len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i, num in enumerate(nums1):\n        if num == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0, len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for num1, num2 in zip(nums1, nums2):\n        if num1 == num2:\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # indices where the items in the lists are equal\n    indices = []\n",
        "num_ids": 20
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j] and i!= j:\n                count += 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j] and i!= j:\n                count += 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s = 0\n    for i in range(len(str(base))):\n        s += int(str(base)[i]) ** power\n    return s\n",
        "num_ids": 39
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    if power == 0:\n        return 1\n    else:\n        while power > 0:\n            total += base\n            base = base * base\n            power -= 1\n        return total\n",
        "num_ids": 50
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s = 0\n    while base > 0:\n        s += base % 10\n        base = base // 10\n    return s ** power\n    \n    \ndef power_base_sum_v2(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) ** power for i in str(base)])\n    \n    ",
        "num_ids": 24
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(d) for d in str(base)]) ** power\n",
        "num_ids": 21
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if isinstance(base, int) == False:\n        return 'Base is not an integer'\n    if isinstance(power, int) == False:\n        return 'Power is not an integer'\n    \n    total = 0\n    for i in str(base):\n        total += int(i)**power\n    return total\n",
        "num_ids": 78
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(1, power+1):\n        total += base**i\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # # Function to print sum of digits of a number to the specified power\n    # def power_sum(num, power):\n    #     # num = int(input(\"Enter a number: \"))\n    #     # power = int(input(\"Enter a power: \"))\n    #     sum_of_digits = 0\n    #     # num = float(num)\n    #     for i in range(0, power+1):\n    #         sum_of_digits += num % 10\n    #         num = num // 10\n    #     print(sum_of_digits)\n    # power_sum(base, power)\n    \n    sum_of_digits = 0\n    for i in range(1, power+1):\n        sum_of_digits += base ** i\n    print(sum_of_digits)\n",
        "num_ids": 198
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in str(base ** power):\n        result += int(i)\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_string = str(base)\n    power_string = str(power)\n    power_int = int(power)\n    power_base_sum = 0\n",
        "num_ids": 41
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i)**power for i in str(base)])\n",
        "num_ids": 21
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    x = re.findall(r'\"([^\"]*)\"', text1)\n    for i in x:\n        print(i)\n        \nextract_quotation('''The grass is greener where you water it.\nThe more you water it, the greener it becomes.\nThe laws of physics are not hard to understand.\nThe less you know, the harder it is to learn.'''.strip())\n",
        "num_ids": 5
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    print(re.findall(r'\"([^\"]*)\"',text1))\n",
        "num_ids": 23
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex_string = r\"\\\"(.*)\\\"\"\n    result = re.findall(regex_string,text1)\n    print(result)\n    print(len(result))\n",
        "num_ids": 48
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = re.compile(r'\"(\\w+)\"')\n    matches = regex.findall(text1)\n    print(\"\\nExtracted values : \\n\")\n    for x in matches:\n        print(x)\n",
        "num_ids": 59
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1\n    # print(re.findall(r'\"([^\"]*)\"', text))\n    return re.findall(r'\"([^\"]*)\"', text)\n",
        "num_ids": 48
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace(\" \",\"\")\n    text2 = text1.split(\",\")\n    return text2\n",
        "num_ids": 32
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # print(re.findall(\"\\\"[^\\\"]*\\\"\", text1))\n    return re.findall(\"\\\"[^\\\"]*\\\"\", text1)\n",
        "num_ids": 42
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    return re.findall(pattern, text1)\n    \ndef extract_quotation2(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\\'(.*?)\\'|\"(.*?)\"')\n    return re.findall(pattern, text)\n",
        "num_ids": 36
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text=text1.split('\\n')\n    for t in text:\n        if t[0:1]=='\"':\n            print(t[1:len(t)-1])\n",
        "num_ids": 47
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #print(re.findall('\".*?\"', text1))\n    return re.findall('\".*?\"', text1)\n",
        "num_ids": 34
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    mult_tup = ()\n    for idx, elem in enumerate(test_tup):\n        mult_tup += (elem * test_tup[(idx+1)%(len(test_tup))],)\n",
        "num_ids": 60
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) <= 0:\n        raise ValueError('Empty tuples are not allowed.')\n    \n    if len(test_tup) == 1:\n        return (test_tup[0], )\n",
        "num_ids": 56
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(x*y for x,y in zip(test_tup,test_tup[1:]))\n",
        "num_ids": 30
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i]*test_tup[i+1],)\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t1 = test_tup[0] * test_tup[1]\n    t2 = test_tup[1] * test_tup[2]\n    t3 = test_tup[2] * test_tup[0]\n    return t1, t2, t3\n",
        "num_ids": 73
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n",
        "num_ids": 30
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    mult_list = []\n    for i in range(0,len(test_tup)-1):\n        mult_list.append(test_tup[i] * test_tup[i+1])\n    return tuple(mult_list)\n",
        "num_ids": 61
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)-1):\n        new_tup = new_tup + (test_tup[i] * test_tup[i+1],)\n    return new_tup\n",
        "num_ids": 64
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    new_list = []\n    for i in range(len(test_tup) - 1):\n        new_list.append(test_tup[i] * test_tup[i + 1])\n    new_tuple = tuple(new_list)\n    return new_tuple\n    \n    ",
        "num_ids": 76
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tup = list(test_tup)\n    new_tup = [tup[0],tup[1]]\n    for i in range(2,len(tup)):\n        new_tup.append(tup[i]*tup[i+1])\n    return tuple(new_tup)\n",
        "num_ids": 79
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    ans = []\n    for i in range(len(lst1)):\n        ans.append(lst1[i] + lst2[i])\n    return ans\n",
        "num_ids": 44
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if(len(lst1)!= len(lst2)):\n        return None\n    else:\n        new_lst = []\n        for i in range(len(lst1)):\n            new_lst.append(lst1[i]+lst2[i])\n        return new_lst\n",
        "num_ids": 78
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n    #lst3 = []\n    #for i in range(0,len(lst1)):\n    #    lst3.append(lst1[i]+lst2[i])\n    #return lst3\n",
        "num_ids": 78
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #return [lst1[i] + lst2[i] for i in range(len(lst1))]\n    return [lst1[i] + lst2[i] for i in range(min(len(lst1), len(lst2)))]\n",
        "num_ids": 69
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(i) for i in zip(lst1,lst2)]\n",
        "num_ids": 23
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(x) for x in zip(lst1,lst2)]\n",
        "num_ids": 23
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    a = 0\n    if len(lst1) > len(lst2):\n        for i in range(len(lst2)):\n            lst2[i] += lst1[i]\n            a = lst2[i]\n            if i == len(lst2) - 1:\n                return lst2\n        for i in range(len(lst2),len(lst1)):\n            lst2.append(lst1[i])\n            a = lst2[i]\n            if i == len(lst1) - 1:\n                return lst2\n    else:\n        for i in range(len(lst1)):\n            lst1[i] += lst2[i]\n            a = lst1[i]\n            if i == len(lst1) - 1:\n                return lst1\n        for i in range(len(lst1),len(lst2)):\n            lst1.append(lst2[i])\n            a = lst1[i]\n            if i == len(lst2) - 1:\n                return lst1\ndef sum_list_2(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    a = 0\n    if len(lst1) > len(lst2):\n        for i in range(len(lst2)):\n            lst2[i] += lst1[i]\n            a = lst2[i]\n            if i == len(lst2) - 1:\n                return lst2\n        for i in range(len(lst2),len(lst1)):\n            lst2.append(lst1[i])\n            a = lst2[i]\n            if i == len(lst1) - 1:\n                return lst2\n    else:\n        for i in range(len(lst1)):\n            lst1[i] += lst2[i]\n            a = lst1[i]\n            if i == len(lst1) - 1:\n                return lst1\n        for i in range(len(lst1),len(lst2)):\n            lst1.append(lst2[i])\n            a = lst1[i]\n            if i == len(lst2) - 1:\n                return lst1\n",
        "num_ids": 273
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Write your code here\n    nums.sort()\n    group_iter = groupby(nums)\n    group_list = list(group_iter)\n    ans = []\n    for i in group_list:\n        ans.append(list(i[1]))\n    res = []\n    for i in ans:\n        if len(i)>1:\n            for j in i:\n                res.append(j)\n        else:\n            res.append(i[0])\n    return res\n    \n    # return sorted(list(set(nums)))\n",
        "num_ids": 137
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for i, val in enumerate(nums):\n        if i == 0:\n            result.append(val)\n        elif val!= nums[i-1]:\n            result.append(val)\n    return result\ndef longest_substring(s):\n    '''\n    Write a function to return the longest substring in a given string.\n    '''\n    length = len(s)\n    if length == 0:\n        return s\n    else:\n        count_list = [[0, 0]]\n        for i in range(length):\n            if s[i] == '0':\n                count_list[-1][0] += 1\n            else:\n                count_list.append([0, 0])\n        count_list[1:] = sorted(count_list[1:], key=lambda x: x[0])\n        new_count_list = []\n        for i, count_pair in enumerate(count_list):\n            if i == 0:\n                new_count_list.append(count_pair)\n            else:\n                if count_pair == new_count_list[-1]:\n                    new_count_list[-1][0] += 1\n                else:\n                    new_count_list.append(count_pair)\n        new_count_list = sorted(new_count_list, key=lambda x: x[1])\n        new_count_list = sorted(new_count_list, key=lambda x: x[0], reverse=True)\n        temp = new_count_list.pop(0)\n        result = s[0: temp[0]]\n        for count_pair in new_count_list:\n            if count_pair[1] == temp[1]:\n                result = result[0: count_pair[0]]\n            else:\n                result += s[count_pair[0]: count_pair[0]+count_pair[1]]\n            temp = count_pair\n        return result\ndef longest_substring_v2(s):\n    '''\n    Write a function to return the longest substring in a given string.\n    This is a better solution\n    '''\n    length = len(s)\n    if length == 0:\n        return s\n    else:\n        count_list = [[0, 0]]\n        for i in range(length):\n            if s[i] == '0':\n                count_list[-1][0] += 1\n            else:\n                count_list.append([0, 0])\n        count_list[1:] = sorted(count_list[1:], key=lambda x: x[0])\n        new_count_list = []\n        for i, count_pair in enumerate(count_list):\n            if i == 0:\n                new_count_list.append(count_pair)\n            else:\n                if count_pair == new_count_list[-1]:\n                    new_count_list[-1][0] += 1\n                else:\n                    new_count_list.append(count_pair)\n        new_count_list = sorted(new_count_list, key=lambda x: x[1], reverse=True)\n        temp = new_count_list.pop(0)\n        result = s[0: temp[0]]\n        for count_pair in new_count_list:\n            if count_pair[1] == temp[1]:\n                result = result[0: count_pair[0]]\n            else:\n                result += s[count_pair[0]: count_pair[0]+count_pair[1]]\n            temp = count_pair\n        return result\ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates in an unsorted array.\n    '''\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            nums[i] = '-'\n    return ''.join(nums)\ndef remove_duplicates_v2(nums):\n    '''\n    Write a function to remove duplicates in an unsorted array.\n    This is a better solution\n    '''\n    nums = [e for e, _ in groupby(nums)]\n    nums = [e for e in nums if e!= '-']\n    return nums\ndef remove_duplicates_v3(nums):\n    '''\n    Write a function to remove duplicates in an unsorted array.\n    This is a better solution\n    '''\n    return list(dict.fromkeys(nums))\ndef reverse_words(sentence):\n    '''\n    Write a function to reverse all the words in a given sentence.\n    '''\n    new_sentence = ''\n    sentence_list = sentence.split()\n    for word in reversed(sentence_list):\n        new_sentence += word\n        new_sentence +=''\n    return new_sentence[0: len(new_sentence)-1]\ndef reverse_words_v2(sentence):\n    '''\n    Write a function to reverse all the words in a given sentence.\n    This is a better solution\n    '''\n    return''.join(reversed(sentence.split()))\ndef reverse_words_v3(sentence):\n    '''\n    Write a function to reverse all the words in a given sentence.\n    This is a better solution\n    '''\n    sentence_list = sentence.split()\n    new_sentence_list = []\n    for word in reversed(sentence_list):\n        new_sentence_list.append(word)\n    return''.join(new_sentence_list)\ndef reverse_words_v4(sentence):\n    '''\n    Write a function to reverse all the words in a given sentence.\n    This is a better solution\n    '''\n    return''.join(sentence.split()[::-1])\ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate a given matrix.\n    This is a better solution\n    '''\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    for i in range(n):\n        matrix[i] = matrix[i][::-1]\n    return matrix\ndef rotate_matrix_v2(matrix):\n    '''\n    Write a function to rotate a given matrix.\n    This is a better solution\n    '''\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    matrix = [row[::-1] for row in matrix]\n    return matrix\ndef rotate_matrix_v3(matrix):\n    '''\n    Write a function to rotate a given matrix.\n    This is a better solution\n    '''\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    matrix = matrix[::-1]\n    for i in range(n):\n        matrix[i] = matrix[i][::-1]\n    return matrix\ndef rotate_matrix_v4(matrix):\n    '''\n    Write a function to rotate a given matrix.\n    This is a better solution\n    '''\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    matrix = [[row[i] for row in matrix] for i in range(n-1, -1, -1)]\n    return matrix\ndef rotate_matrix_v5(matrix):\n    '''\n    Write a function to rotate a given matrix.\n    This is a better solution\n    '''\n    return [[row[i] for row in matrix[::-1]] for i in range(len(matrix))]\ndef longest_consecutive_v1(nums):",
        "num_ids": 43
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_1 = [item for item, group in groupby(nums)]\n    return nums_1\n",
        "num_ids": 29
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # a very bad solution\n    # return [list(g) for k, g in groupby(nums)]\n    # slower than zip but more readable\n    return [x for x, _ in zip(nums, range(len(nums)))]\n    # more readable\n    # return [list(g) for k, g in groupby(nums)]\n    # even more readable\n    return [g[0] for _, g in groupby(nums)]\n",
        "num_ids": 111
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    my_list = list(groupby(nums))\n    for i in range(0,len(my_list)):\n        my_list[i] = [item for item, count in my_list[i]]\n    for i in range(0,len(my_list)):\n        my_list[i] = list(dict.fromkeys(my_list[i]))\n    return my_list\n    \nprint(consecutive_duplicates([1,1,2,2,3,3,3,4,4,4,4,4,4,5,6,7,7,7,7,7,7,7,8,9,9,9,9,9,9,9,9,9,9,9]))",
        "num_ids": 180
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    return [k for k, g in groupby(nums)]\n",
        "num_ids": 33
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) > 0:\n        #list is not empty\n        result = []\n        prev = None\n        for n in nums:\n            if n!= prev:\n                result.append(n)\n                prev = n\n        return result\n    else:\n        return nums\n",
        "num_ids": 72
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # nums = [2, 4, 6, 7, 7, 9, 10]\n    grouped_nums = groupby(nums)\n    return [key for key, _ in grouped_nums]\n",
        "num_ids": 52
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = [k for k, g in groupby(nums)]\n    return nums",
        "num_ids": 24
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\nprint(consecutive_duplicates([1,2,2,2,3,5,7,7]))\n",
        "num_ids": 75
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return round(math.pi*r*(r+math.sqrt((h**2)+r**2)),2)\n    \ndef lateral_surface_rect(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism given the length l and the width w.\n    '''\n    return round(2*l*w,2)\n    \ndef lateral_surface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism given the length l, the width w, and the height h.\n    '''\n    return round(2*l*w+2*h*l+2*h*w,2)\n",
        "num_ids": 27
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*(r+math.sqrt(r**2+h**2))\n    \ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\n    \ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return 2*math.pi*r*h+2*math.pi*r**2\n    \ndef lateral_surface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return 4*math.pi*r**2\n",
        "num_ids": 14
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi*r**2 + 2*math.pi*r*h)/3\n",
        "num_ids": 25
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=math.pi*r**2\n    s=s+3*math.pi*r*(r+h)\n    return s\ndef lateral_surface_cone_v2(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=2*math.pi*r*(r+h)\n    return s\n",
        "num_ids": 23
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r+math.pi*r*h\n    \ndef cylinder_cubed(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r*h\n",
        "num_ids": 14
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = (3.14*(r**2) + 3.14*(r**2)*math.acos((r/(2*(r**0.5))) - ((r/(2*(r**0.5)))/2)))*h\n    return surface_area\n",
        "num_ids": 68
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi*r*r) + (math.pi*r*r)\n    pass\n",
        "num_ids": 27
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r+math.pi*r*h\ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateral_surface_prism(l,b,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*l*b+2*math.pi*b*(l+h)\n",
        "num_ids": 24
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def lateralsurface_cone(r,h):\n        '''\n        Write a function to find the lateral surface area of a cone given radius r and the height h.\n        '''\n        return math.pi*(r**2+r*h+math.sqrt(h**2+r**2))\n    if type(r)==list:\n        if type(h)==list:\n            if len(r)==len(h):\n                return lateralsurface_cone(r[0],h[0])+lateralsurface_cone(r[1],h[1])+lateralsurface_cone(r[2],h[2])\n            else:\n                print(\"Lists r and h do not have the same length.\")\n                return 0\n        else:\n            print(\"r is not a list.\")\n            return 0\n    else:\n        print(\"h is not a list.\")\n        return 0\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    def lateralsurface_cylinder(r,h):\n        '''\n        Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n        '''\n        return 2*math.pi*r*(r+h)\n    if type(r)==list:\n        if type(h)==list:\n            if len(r)==len(h):\n                return lateralsurface_cylinder(r[0],h[0])+lateralsurface_cylinder(r[1],h[1])+lateralsurface_cylinder(r[2],h[2])\n            else:\n                print(\"Lists r and h do not have the same length.\")\n                return 0\n        else:\n            print(\"r is not a list.\")\n            return 0\n    else:\n        print(\"h is not a list.\")\n        return 0\n",
        "num_ids": 163
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r == 0:\n        return 3.14159 * h * h\n    elif r > 0 and h == 0:\n        return 3.14159 * r * r\n    else:\n        return 3.14159 * r * (r + math.sqrt(r * r + h * h))\n",
        "num_ids": 73
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n",
        "num_ids": 44
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #your code here\n    text=text.replace(\" \",\":\")\n    text=text.replace(\".\",\":\")\n    text=text.replace(\",\",\":\")\n    return text\n",
        "num_ids": 47
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_new = re.sub(r\"[,\\s.]\", \":\", text)\n    return text_new\n",
        "num_ids": 30
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace spaces\n    text = text.replace(\" \",\":\")\n    # replace comas\n    text = text.replace(\",\",\":\")\n    # replace dots\n    text = text.replace(\".\",\":\")\n    # replace semicolons\n    text = text.replace(\";\",\":\")\n    return text\n",
        "num_ids": 76
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # text = text.replace(' ', ':')\n    text = re.sub('[,.]', ':', text)\n    return text\n",
        "num_ids": 36
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #text = text.replace('.',':')\n    #text = text.replace(',','::')\n    #text = text.replace(' ',':')\n",
        "num_ids": 41
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub(r'[\\., ]', \":\", text)\n    return new_text\n",
        "num_ids": 30
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\.\\,]',':',text)\n",
        "num_ids": 21
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Your code here\n    text = text.replace(\" \",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n    # text = text.replace(\" \",\":\")\n    return text\n",
        "num_ids": 60
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[.,\\s]',' ',text)\n",
        "num_ids": 20
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    first_index = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            first_index = mid\n            end = mid - 1\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n",
        "num_ids": 96
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A)-1\n    while start <= end:\n        mid = (start+end)//2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1] < x:\n                return mid\n            else:\n                end = mid-1\n        elif A[mid] > x:\n            end = mid-1\n        else:\n            start = mid+1\n    return -1\n",
        "num_ids": 109
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if x < A[mid]:\n            end = mid - 1\n        elif x > A[mid]:\n            start = mid + 1\n        else:\n            if mid == 0 or x!= A[mid - 1]:\n                return mid\n            else:\n                end = mid - 1\n    return -1\n",
        "num_ids": 108
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # binary search\n    low, high = 0, len(A)-1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if x == A[mid]:\n            if mid > 0 and x == A[mid - 1]:\n                high = mid - 1\n            else:\n                return mid\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n",
        "num_ids": 112
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A)\n    while start < end:\n        mid = (start + end) // 2\n        if x > A[mid]:\n            start = mid + 1\n        elif x < A[mid]:\n            end = mid\n        else:\n            if mid == 0 or x!= A[mid - 1]:\n                return mid\n            else:\n                end = mid\n    return -1\n",
        "num_ids": 102
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A)-1\n    while start <= end:\n        mid = (start + end) // 2\n        if x == A[mid]:\n            return mid\n        elif x < A[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n",
        "num_ids": 80
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n",
        "num_ids": 33
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n",
        "num_ids": 67
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if A[mid] == x:\n            if mid - 1 < 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                r = mid - 1\n        elif A[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n",
        "num_ids": 113
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n",
        "num_ids": 16
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # we need to calculate the sum of products for all possible sublists\n    # for every element, we have two choices:\n    # 1. include the current element in sublist\n    # 2. not include the current element in sublist\n    \n    # for example [1, 2, 3] ->\n    # 1. we can choose [1], we can choose [2] and [3]\n    # 2. we can choose [2], we can choose [3]\n    # 3. we can choose [3]\n    \n    # so, in total, we have 3 sublists, which gives us 9 sublists\n    # for every sublist, we have two choices for each element\n    \n    # for example [1, 2, 3] ->\n    # 1. we can choose [1], we can choose [2] and [3]\n    # 2. we can choose [2], we can choose [3]\n    # 3. we can choose [3]\n    \n    # so, in total, we have 3 sublists, which gives us 9 sublists\n    # for every sublist, we have two choices for each element\n    \n    # for example [1, 2, 3, 4] ->\n    # 1. we can choose [1], we can choose [2] and [3] and [4]\n    # 2. we can choose [2], we can choose [3] and [4]\n    # 3. we can choose [3], we can choose [4]\n    \n    # so, in total, we have 3 sublists, which gives us 9 sublists\n    \n    # we can expand the above for every element, and we get:\n    # 1. for every element, we have 4 choices\n    # 2. for every element, we have 3 choices\n    # 3. for every element, we have 2 choices\n    # 4. for every element, we have 1 choices\n    \n    # so, in total, we have 4 * 3 * 2 * 1 = 36 sublists\n    # we can simply find the sum of all possible sublists and then divide by 9\n    \n    # and if we need to find sum of sublist for [1, 2], we can simply multiply [1] and [2]\n    \n    # so, we can simply create a table for all sublists and then store the products of every sublist\n    \n    # we can initialize the table with one row and two columns\n    # for every sublist, we initialize the first row, and the second row is [1, 2]\n    # for every sublist, we calculate the value for first row, and we calculate it for second row, so we get the value for [1, 2]\n    \n    # we have one row, and two columns:\n    # 1. row_num = 1, col_num = 2\n    # 2. row_num = 2, col_num = 2\n    # for every row, we have to find the value for a sublist, so we can simply do:\n    # 1. for every row, we will have two choices for each sublist\n    # 2. for every row, we will have two choices for each sublist\n    # 3. for every row, we will have two choices for each sublist\n    \n    # we can initialize the table with one row and two columns\n    # for every sublist, we initialize the first row, and the second row is [1, 2]\n    # for every sublist, we calculate the value for first row, and we calculate it for second row, so we get the value for [1, 2]\n    \n    # we have one row, and two columns:\n    # 1. row_num = 1, col_num = 2\n    # 2. row_num = 2, col_num = 2\n    # for every row, we have two choices for each sublist\n    # 1. we can choose [1], we can choose [2]\n    # 2. we can choose [2], we can choose [1]\n    \n    # we can initialize the table with one row and two columns\n    # for every sublist, we initialize the first row, and the second row is [1, 2]\n    # for every sublist, we calculate the value for first row, and we calculate it for second row, so we get the value for [1, 2]\n    \n    # we have one row, and two columns:\n    # 1. row_num = 1, col_num = 2\n    # 2. row_num = 2, col_num = 2\n    # for every row, we have two choices for each sublist\n    # 1. we can choose [1], we can choose [2]\n    # 2. we can choose [2], we can choose [1]\n    \n    # so, we can simply create a table for all sublists and then store the products of every sublist\n    # 1. for every row, we will have two choices for each sublist\n    # 2. for every row, we will have two choices for each sublist\n    # 3. for every row, we will have two choices for each sublist\n    \n    # we can initialize the table with one row and two columns\n    # 1. row_num = 1, col_num = 2\n    # 2. row_num = 2, col_num = 2\n    # for every row, we have two choices for each sublist\n    # 1. we can choose [1], we can choose [2]\n    # 2. we can choose [2], we can choose [1]\n    \n    # we can initialize the table with one row and two columns\n    # 1. row_num = 1, col_num = 2\n    # 2. row_num = 2, col_num = 2\n    # for every row, we have two choices for each sublist\n    # 1. we can choose [1], we can choose [2]\n    # 2. we can choose [2], we can choose [1]\n    \n    # so, we can simply create a table for all sublists and then store the products of every sublist\n    # 1. for every row, we will have two choices for each sublist\n    # 2. for every row, we will have two choices for each sublist\n    # 3. for every row, we will have two choices for each sublist\n    \n    # we can initialize the table with one row and two columns\n    # 1. row_num = 1, col_num = 2\n    # 2. row_num = 2, col_num = 2\n    # for every row, we have two choices for each sublist\n    # 1. we can choose [1], we can choose [2]\n    # 2. we can choose [2], we can choose [1]\n    \n    # we can initialize the table with one row and two columns\n    # 1. row_num = 1, col_num = 2\n    # 2. row_num = 2, col_num = 2\n    # for every row, we have two choices for each sublist\n    # 1. we can choose [1], we can choose [2]\n    # 2. we can choose [2], we can choose [1]\n    \n    # so, we can simply create a table for all sublists and then store the products of every sublist\n    # 1. for every row, we will have two choices for each sublist\n    # 2. for every row, we will have two choices for each sublist\n    # 3. for every row, we will have two choices for each sublist\n    \n    # we can initialize the table with one row and two columns\n    # 1. row_num = 1, col_num = 2\n    # 2. row_num = 2, col_num = 2\n    # for every row, we have two choices for each sublist\n    # 1. we can choose [1], we can choose [2]\n    # 2. we can choose [2], we can choose [1]\n    \n    # we can initialize the table with one row and two columns\n    # 1. row_num = 1, col_num = 2\n    # 2. row_num = 2, col_num = 2\n    # for every row, we have two choices for each sublist\n    # 1. we can choose [1], we can choose [2]\n    # 2. we can choose [2], we can choose [1]\n    \n    # so, we can simply create a table for all sublists and then store the products of every sublist\n    # 1. for every row, we will have two choices for each sublist\n    # 2. for every row, we will have two choices for each sublist\n    # 3. for every row, we will have two choices for each sublist\n    \n    # we can initialize the tabl",
        "num_ids": 1979
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total=1\n    for i in range(len(arr)):\n        total*=arr[i]\n    prod=total\n    for i in range(len(arr)):\n        if arr[i]!=0:\n            left=prod\n            right=prod\n            prod=0\n            for j in range(i,len(arr)):\n                prod=prod*arr[j]\n                right=right//arr[j]\n                if prod<left:\n                    left=prod\n            if right<prod:\n                prod=right\n            total=total-prod\n    return total\n    ",
        "num_ids": 151
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    s1 = 0\n    s2 = 0\n    for i in range(n):\n        s1 += arr[i]\n        s2 += arr[i]\n    for i in range(n):\n        for j in range(i,n):\n            s1 += arr[j]*arr[j+1]\n    for i in range(n-1):\n        for j in range(i+1,n):\n            s2 += arr[i]*arr[j]\n    return s1,s2\n",
        "num_ids": 131
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    len_arr = len(arr)\n    sum_of_products = 0\n    for index_left in range(len_arr):\n        for index_right in range(index_left, len_arr):\n            product = 1\n            for ele in arr[index_left:index_right+1]:\n                product *= ele\n            sum_of_products += product\n    return sum_of_products\n",
        "num_ids": 96
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total=0\n    for i in range(0, len(arr)):\n        sum=1\n        for j in range(i,len(arr)):\n            sum=sum*arr[j]\n            total=total+sum\n    return total\n",
        "num_ids": 61
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0 for x in range(n+1)] for y in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + arr[i-1] * arr[j-1]\n    return dp[n][n]\n",
        "num_ids": 145
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total=0\n    for i in range(len(arr)):\n        if i==0:\n            total+=arr[0]\n        else:\n            total*=arr[i]\n    return total\n",
        "num_ids": 51
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #use variable to store the total sum of subarray product\n    result = 0\n    #iterate over the whole array\n    for i in range(len(arr)):\n        # initialize a product variable\n        product = 1\n        # go over the whole array from i to the end\n        for j in range(i, len(arr)):\n            # update the product variable\n            product = product * arr[j]\n            # add the product variable to result variable\n            result += product\n    return result\n",
        "num_ids": 117
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    i = 0\n    while i <= n:\n        j = i\n        while j <= n:\n            prod = 1\n            for k in range(i, j):\n                prod = prod * arr[k]\n            sum = sum + prod\n            j = j + 1\n        i = i + 1\n    return sum\n",
        "num_ids": 92
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bin_n = bin(n)\n    return int(bin_n[:2]+'0'+bin_n[3:],2)\n",
        "num_ids": 37
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ ((n >> 1) & 0x55555555)\n",
        "num_ids": 20
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n & ~((1 << ((len(bin(n)) - 3)) - 1)))\n",
        "num_ids": 25
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n ^= (n >> 1) \n    n ^= (n >> 2)\n    n ^= (n >> 4)\n    n ^= (n >> 8)\n    n ^= (n >> 16)\n    return n\n",
        "num_ids": 57
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n ^ (n >> 1)) ^ (n >> 2) )\n",
        "num_ids": 20
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0x55555555  \n    n &= mask          \n    n |= n >> 1 & mask  \n    n |= n >> 2 & mask  \n    n |= n >> 4 & mask  \n    n |= n >> 8 & mask  \n    n |= n >> 16 & mask\n    return n\n",
        "num_ids": 78
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #n = 10\n    # To toggle the last and the first bit  \n    #print(~n) \n",
        "num_ids": 29
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = -1 << (n - 1) | 1 << n | 1 << (n + 1)  \n    return (n ^ mask)  \n",
        "num_ids": 36
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n ^ (n >> 1) ^ (n << 1))\n    \n",
        "num_ids": 21
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # code here\n    a = n\n    b = n & (~(0x55555555))\n    n = a ^ b\n    return n\n",
        "num_ids": 38
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # print(\"array:\", a)\n    if len(a) == 0:\n        return 0\n    elif x >= a[-1]:\n        return len(a)\n    elif x <= a[0]:\n        return 0\n    else:\n        pos = bisect.bisect_left(a, x)\n        if a[pos] == x:\n            return pos\n        else:\n            return pos-1\n",
        "num_ids": 102
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    i = bisect.bisect_left(a, x)\n    a.pop()\n    return i\n",
        "num_ids": 36
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a,x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a,x)\n    if i!= 0 and a[i-1] == x:\n        return i\n    else:\n        return i\ndef first_occurence(a, x):\n    '''\n    Write a function to return the index of the first occurence of a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a,x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\ndef last_occurence(a, x):\n    '''\n    Write a function to return the index of the last occurence of a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a,x)\n    if i!= 0 and a[i-1] == x:\n        return i\n    else:\n        return -1\ndef find_max_in_rotated_sorted_array(a):\n    '''\n    Write a function to find the maximum value in a rotated sorted array https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return None\n    if len(a) == 1:\n        return a[0]\n    if len(a) == 2:\n        return max(a[0], a[1])\n    i = len(a) - 1\n    if a[i] > a[i-1]:\n        return a[i]\n    else:\n        return find_max_in_rotated_sorted_array(a[:i])\ndef find_missing_number(a):\n    '''\n    Write a function to find the missing number in a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 1\n    for i in range(len(a)):\n        if a[i]!= i + 1:\n            return i + 1\n    return i + 2\ndef binary_search_recursive(a, x, left, right):\n    if right < left:\n        return -1\n    middle = (right + left) // 2\n    if a[middle] == x:\n        return middle\n    elif x < a[middle]:\n        return binary_search_recursive(a, x, left, middle - 1)\n    else:\n        return binary_search_recursive(a, x, middle + 1, right)\ndef search_rotated_sorted_array(a, x):\n    '''\n    Write a function to search for a value in a rotated sorted array https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return binary_search_recursive(a, x, 0, len(a) - 1)\ndef find_first_unique_number(a):\n    '''\n    Write a function to find the first non-repeating integer. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    if len(a) == 1:\n        return a[0]\n    count = {}\n    for i in a:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in count:\n        if count[i] == 1:\n            return i\n    return -1\ndef find_missing_numbers(nums):\n    '''\n    Write a function to find all the missing numbers in a sequence. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    missing_numbers = []\n    count = {}\n    for i in nums:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in range(1, len(nums) + 1):\n        if i not in count:\n            missing_numbers.append(i)\n    return missing_numbers\ndef search_next_greater_element(a):\n    '''\n    Write a function to find the next greater element for each element of a list https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    stack = []\n    result = []\n    for i in range(len(a)):\n        while len(stack)!= 0 and a[stack[-1]] < a[i]:\n            stack.pop()\n        if len(stack) == 0:\n            result.append(-1)\n        else:\n            result.append(stack[-1])\n        stack.append(i)\n    return result\ndef search_next_greater_element_v2(a):\n    '''\n    Write a function to find the next greater element for each element of a list https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    stack = []\n    result = []\n    for i in range(len(a)):\n        while len(stack)!= 0 and a[stack[-1]] < a[i]:\n            index = stack.pop()\n            result[index] = a[i]\n        stack.append(i)\n    return result\ndef find_duplicate(a):\n    '''\n    Write a function that takes an array of numbers and returns the duplicate, if any. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if a[abs(a[i])] >= 0:\n            a[abs(a[i])] = -a[abs(a[i])]\n        else:\n            return abs(a[i])\n    return -1\ndef find_duplicate_v2(a):\n    '''\n    Write a function that takes an array of numbers and returns the duplicate, if any. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        index = abs(a[i]) - 1\n        if a[index] < 0:\n            return abs(a[i])\n        else:\n            a[index] = -a[index]\n    return -1\ndef find_nth_fibonacci(n):\n    '''\n    Write a function that takes a number n as an argument and returns the nth fibonacci number. https://www.w3resource.com/python-exercises/data-structure",
        "num_ids": 44
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    i = bisect.bisect_left(a,x,0,n)\n    return i\n",
        "num_ids": 34
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    a.sort()\n    return a\n",
        "num_ids": 20
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(None)\n    length = len(a)\n    for i in range(length):\n        if x < a[i]:\n            return i\n    return length\n",
        "num_ids": 44
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    for i in range(n):\n        if a[i] > x:\n            return i\n    return n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    for i in range(n):\n        if a[i] >= x:\n            return i\n    return n\n",
        "num_ids": 37
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] >= x:\n        return 0\n    if a[-1] < x:\n        return len(a)\n    lo = 0\n    hi = len(a) - 1\n    while lo <= hi:\n        mid = (lo+hi)//2\n        if a[mid] > x:\n            hi = mid - 1\n        elif a[mid] < x:\n            lo = mid + 1\n        else:\n            return mid\n    return lo\n",
        "num_ids": 114
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    else:\n        return i\n",
        "num_ids": 42
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        return True\n    else: \n        return False\nprint(check_str('a3'))\nprint(check_str('aeiouAEIOU'))\nprint(check_str('Aa0'))\nprint(check_str('AaeiouAEIOU'))\nprint(check_str('iB'))\nprint(check_str('aeiou'))\n",
        "num_ids": 105
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string)): \n        return \"String starts with a vowel\"\n    else: \n        return \"String doesn't start with a vowel\"\nprint(check_str('this is a string'))\nprint(check_str('hello this is a string'))\nprint(check_str('0@$!@#'))\n",
        "num_ids": 85
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = string.lower()\n    if(re.match(regex, string)): \n        return \"String is starting with a vowel\"\n    else: \n        return \"String is not starting with a vowel\"\n",
        "num_ids": 53
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        return 'String starts with a vowel'\n    else: \n        return 'String doesn\\'t start with a vowel'",
        "num_ids": 42
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    print(\"Validating string :\",string)\n    if(re.match(regex,string)): \n        print(\"String is starting with a vowel or not.\\n\") \n    else: \n        print(\"String is not starting with a vowel or not.\\n\") \nif __name__ == \"__main__\":\n    string = \"Python\"\n    check_str(string) \n    string = \"pyThon\"\n    check_str(string) \n    string = \"Python3\"\n    check_str(string) \n    string = \"Java\"\n    check_str(string) \n    string = \"JavaScript\"\n    check_str(string) \n    string = \"MySQL\"\n    check_str(string) \n    string = \"I am Python 3 Developer\"\n    check_str(string) \n    string = \"12334445555\"\n    check_str(string) \n    string = \"Youtube.com\"\n    check_str(string) \n    string = \"I.am.Python.3.Developer\"\n    check_str(string) \n    string = \"I.am.Python3.Developer\"\n    check_str(string) \n    string = \"I.am.Python3.Developer@gmail.com\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com@gmail.com\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.in.India\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.in.India@gmail.com\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.in.India@gmail.com.and.I.am.a.University.Student\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student@gmail.com\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student.and.I.am.from.India\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student.and.I.am.from.India@gmail.com\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student.and.I.am.from.India@gmail.com.and.I.am.from.Australia\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student.and.I.am.from.India@gmail.com.and.I.am.from.Australia@icloud.com\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student.and.I.am.from.India@gmail.com.and.I.am.from.Australia@icloud.com.and.I.am.from.India\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student.and.I.am.from.India@gmail.com.and.I.am.from.Australia@icloud.com.and.I.am.from.India.and.I.am.in.India\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student.and.I.am.from.India@gmail.com.and.I.am.from.Australia@icloud.com.and.I.am.from.India.and.I.am.in.India@gmail.com\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student.and.I.am.from.India@gmail.com.and.I.am.from.Australia@icloud.com.and.I.am.from.India.and.I.am.in.India@gmail.com\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student.and.I.am.from.India@gmail.com.and.I.am.from.Australia@icloud.com.and.I.am.from.India.and.I.am.in.India.and.I.am.a.University.Student\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student.and.I.am.from.India@gmail.com.and.I.am.from.Australia@icloud.com.and.I.am.from.India.and.I.am.a.University.Student@gmail.com\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student.and.I.am.from.India@gmail.com.and.I.am.from.Australia@icloud.com.and.I.am.from.India.and.I.am.a.University.Student.and.I.am.from.India@gmail.com\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student.and.I.am.from.India@gmail.com.and.I.am.from.Australia@icloud.com.and.I.am.from.India.and.I.am.a.University.Student.and.I.am.from.India@gmail.com.and.I.am.from.India\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student.and.I.am.from.India@gmail.com.and.I.am.from.Australia@icloud.com.and.I.am.from.India.and.I.am.a.University.Student.and.I.am.from.India.and.I.am.in.India@gmail.com\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student.and.I.am.from.India@gmail.com.and.I.am.from.Australia@icloud.com.and.I.am.from.India.and.I.am.a.University.Student.and.I.am.from.India.and.I.am.in.India@gmail.com.and.I.am.in.India\"\n    check_str(string) \n    string = \"I.am.Python3.Developer.from.Udemy.com.and.I.am.a.University.Student.and.I.am.from.India@gmail.com.and.I.am.from.Australia@icloud.com.and.I.am.from.India.and.I.am.a.University.Student.and.I.am.from.India.and.I.am.in.India.and.I.am.",
        "num_ids": 1980
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        print('\"{}\" is starting with a vowel'.format(string))\n    else:\n        print('\"{}\" is not starting with a vowel'.format(string))\n        \nif __name__ == '__main__':\n    check_str('apple')\n    check_str('avocado')\n    check_str('example')\n    check_str('juice')\n    check_str('applepie')\n    check_str('qwert')\n    check_str('taco')\n    check_str('blabla')\n    check_str('lollolol')\n    check_str('apple')\n    check_str('applepie')\n    check_str('apple')\n    check_str('aaaeiouAEIOU')\n    check_str('aaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('abcde')\n    check_str('aaaeiouAEIOU')\n    check_str('aaeiouAEIOU')\n    check_str('aaeiouAEIOU')\n    check_str('aaeiouAEIOU')\n    check_str('aaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('aaaeiouAEIOU')\n    check_str('a",
        "num_ids": 1981
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex,string)):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string)!= None",
        "num_ids": 15
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n    #Code here\n    #Remove pass and write your logic here\n    \ndef check_str1(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(\"^[a-zA-Z]*$\",string):\n        return True\n    else:\n        return False\n    #Code here\n    #Remove pass and write your logic here\n",
        "num_ids": 50
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    try:\n        regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n        if re.search(regex, string): \n            return True\n        else:\n            return False\n    except TypeError:\n        raise TypeError(\"The input must be a string!\") \n",
        "num_ids": 80
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 1\n    else:\n        return geometric_sum(n-1)*2\n    \ndef main():\n    print(geometric_sum(0))\n    print(geometric_sum(1))\n    print(geometric_sum(2))\n    print(geometric_sum(3))\n    print(geometric_sum(4))\n    print(geometric_sum(5))\n    print(geometric_sum(6))\n    print(geometric_sum(7))\n    print(geometric_sum(8))\n    print(geometric_sum(9))\n    print(geometric_sum(10))\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 172
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 1\n    return n * geometric_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    sum = 1\n    for i in range(n-1):\n        sum = sum*(1/2)\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return 2*geometric_sum(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (1 / (2 * n - 1)) + geometric_sum(n - 1)\n",
        "num_ids": 39
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return 2*geometric_sum(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n > 1:\n        return n * geometric_sum(n - 1)\n    else:\n        return 1\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n - 1) + 1 / n\n",
        "num_ids": 32
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    import math\n    # Triangular Number = n(n+1)/2\n    def find_triangular_number(n):\n        return int((n*(n+1))/2)\n    #print(find_triangular_number(n))\n    \n    # getting the index of the first triangular number with n digits\n    i = 0\n    while (i < n):\n        i += 1\n        tri_num = find_triangular_number(i)\n        if(len(str(tri_num)) == n):\n            break\n    #print(i)\n    return i\n    \ndef find_Trangular_Index(n):\n    '''\n    Write a python function to find the index of the first triangular number with n digits. \n    '''\n    import math\n    # finding the index of the first triangular number\n    for i in range(n):\n        trinum = int((n*(n+1))/2)\n    return i\n    \ndef find_Largest_Triangular_Number(n):\n    '''\n    Write a python function to find the largest triangular number with n digits. \n    '''\n    import math\n    # finding the index of the largest triangular number\n    for i in range(n):\n        trinum = int((n*(n+1))/2)\n    return trinum\n    \ndef is_Triangular(n):\n    '''\n    Write a python function to check if a number is a triangular number. \n    '''\n    import math\n    # finding the index of the first triangular number\n    for i in range(n):\n        trinum = int((n*(n+1))/2)\n        if(n == trinum):\n            return True\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # The function takes a value of n.\n    # For example, if n is 3, then function should print 1\n    # n = 4, the function should print 6\n    # n = 5, the function should print 16\n    # n = 6, the function should print 26\n    # n = 7, the function should print 46\n    \n    # define a list of number from 1 to 10^n\n    # initialize result as 10^(n-1)\n    # iterate n from 1 to n and for each value of n, append to the list\n    # sort the list and return the element with index of 1\n",
        "num_ids": 141
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while True:\n        i += 1\n        n = int(math.log10(i) + 1)\n        if(len(str(i)) == n):\n            return i\n",
        "num_ids": 50
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    s = 0\n    # Find the sum of first n natural numbers\n    for i in range(1, n + 1): \n        s += i \n    # Initialize result \n    res = s; \n    # If n is 1 then return 0 \n    if (n == 1): \n        return 0\n    # Find the index of smallest triangular number with n digits \n    for i in range(1, n + 1): \n        res *= i \n        if (res >= s): \n            break\n    return i - 1; \n    ",
        "num_ids": 132
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    k = math.ceil((math.sqrt(1+8*n)))\n    low,high = int('1'*n),int('9'*n)\n    mid = (low + high)//2\n    for i in range(1,k):\n        num = int(str(mid)+'0'*i)\n        if (num*(num+1))/2<=n:\n            low = num\n        else:\n            high = num-1\n        mid = (low+high)//2\n    return mid\n",
        "num_ids": 128
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Number of digits in a triangular number\n    num_digits = int(math.log10(n) + 1)\n    \n    # We need to return this index\n    # number = 1\n    # while num_digits > 0:\n    #     number += num_digits\n    #     num_digits -= 1\n    # return number\n",
        "num_ids": 86
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    lst = [] \n    for i in range(1, n): \n        lst.append(i * (i + 1) / 2) \n    return int(lst[n - 1]) \n    \ndef is_Square(n): \n    '''\n    Write a python function to find if the number is square of an integer, for eg. The number 6 is a square of 3.\n    '''\n    if math.sqrt(n)%1 == 0: \n        return True\n    return False\ndef find_Roots(n):\n    '''\n    Write a python function to find all the three distinct perfect squares, whose sum is equal to n.\n    '''\n    n = int(n)\n    if n<=0:\n        return []\n    i = 1\n    lst = []\n    while(1):\n        if n%i == 0:\n            if i == 1:\n                lst.append(i)\n            else:\n                lst.append(i)\n                lst.append(int(n/i))\n            if i == int(math.sqrt(n)):\n                break\n        i+=1\n    return list(set(lst))\n",
        "num_ids": 123
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(0.5 * n * (n + 1)) \n",
        "num_ids": 19
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index=0\n    temp=0\n    s=0\n    for i in range(1,int(n)):\n        temp=i*(i+1)/2\n        if int(temp)<=n:\n            s=int(temp)\n            index=i\n    print(index)\n    \n",
        "num_ids": 75
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find nth triangular number\n    # n = number of digits\n    n = n + 1\n    k = 1\n    while True:\n        x = k * (k + 1) // 2\n        if len(str(x)) >= n:\n            break\n        k += 1\n    return x\n",
        "num_ids": 72
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create a dict object\n    test_dict = dict()\n",
        "num_ids": 17
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n    return test_dict\n",
        "num_ids": 47
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup)):\n        d[test_tup[i]] = test_tup[i + 1]\n    return d\n",
        "num_ids": 49
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print(test_tup)\n    test_dict = dict(zip(test_tup[::2], test_tup[1::2]))\n    print(test_dict)\n    \n    return\n    \n    \ndef list_of_tuples_to_dict(test_tup_list):\n    '''\n    Write a function to convert the given list of tuples to a key-value dictionary using the adjacent elements of each tuple. https://www.geeksforgeeks.org/python-convert-list-of-tuples-to-key-value-dict/\n    '''\n    print(test_tup_list)\n    test_dict = dict(zip(test_tup_list[::2], test_tup_list[1::2]))\n    print(test_dict)\n    \n    return\n    \n    \ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple using the adjacent keys. https://www.geeksforgeeks.org/python-convert-dictionary-to-tuple-with-adjacent-keys/\n    '''\n    print(test_dict)\n    test_tup = tuple(test_dict.items())\n    print(test_tup)\n    \n    return\n    \n    \ndef dict_to_list_of_tuples(test_dict):\n    '''\n    Write a function to convert the given dictionary to a list of tuples using the adjacent keys. https://www.geeksforgeeks.org/python-convert-dictionary-to-list-of-tuples-with-adjacent-keys/\n    '''\n    print(test_dict)\n    test_tup_list = list(test_dict.items())\n    print(test_tup_list)\n    \n    return\n    \n    \ndef add_to_dict(test_dict):\n    '''\n    Write a function to add a given key-value pair to the given dictionary. https://www.geeksforgeeks.org/python-adding-a-key-value-pair-to-a-dictionary/\n    '''\n    print(test_dict)\n    test_dict['new_key'] = 'new_value'\n    print(test_dict)\n    \n    return\n    \n    \ndef remove_from_dict(test_dict):\n    '''\n    Write a function to remove a given key-value pair from the given dictionary. https://www.geeksforgeeks.org/python-remove-a-key-value-pair-from-dictionary/\n    '''\n    print(test_dict)\n    test_dict.pop('key')\n    print(test_dict)\n    \n    return\n    \n    \ndef clear_dict(test_dict):\n    '''\n    Write a function to clear the dictionary. https://www.geeksforgeeks.org/python-clear-dictionary/\n    '''\n    print(test_dict)\n    test_dict.clear()\n    print(test_dict)\n    \n    return\n    \n    \ndef dict_size(test_dict):\n    '''\n    Write a function to return the size of a given dictionary. https://www.geeksforgeeks.org/python-dictionary-size/\n    '''\n    print(test_dict)\n    print(len(test_dict))\n    \n    return\n    \n    \ndef is_empty(test_dict):\n    '''\n    Write a function to return true if the given dictionary is empty, false otherwise. https://www.geeksforgeeks.org/python-check-if-dictionary-is-empty/\n    '''\n    print(test_dict)\n    print(test_dict == {})\n    \n    return\n    \n    \ndef dict_key_exists(test_dict):\n    '''\n    Write a function to check if a given key exists in a dictionary. https://www.geeksforgeeks.org/python-check-if-key-exists-in-dictionary/\n    '''\n    print(test_dict)\n    print('key' in test_dict)\n    \n    return\n    \n    \ndef get_dict_keys(test_dict):\n    '''\n    Write a function to get all keys of the given dictionary. https://www.geeksforgeeks.org/python-get-all-keys-of-a-dictionary/\n    '''\n    print(test_dict)\n    print(test_dict.keys())\n    \n    return\n    \n    \ndef get_dict_values(test_dict):\n    '''\n    Write a function to get all values of the given dictionary. https://www.geeksforgeeks.org/python-get-all-values-of-a-dictionary/\n    '''\n    print(test_dict)\n    print(test_dict.values())\n    \n    return\n    \n    \ndef iterate_dict(test_dict):\n    '''\n    Write a function to iterate over a dictionary. https://www.geeksforgeeks.org/python-iterate-dictionary/\n    '''\n    print(test_dict)\n    for key, value in test_dict.items():\n        print(key, value)\n        \n    return\n    \n    \ndef get_dict_items(test_dict):\n    '''\n    Write a function to get items of a given dictionary. https://www.geeksforgeeks.org/python-get-items-of-a-dictionary/\n    '''\n    print(test_dict)\n    print(test_dict.items())\n    \n    return\n    \n    \ndef convert_list_to_dictionary(test_list):\n    '''\n    Write a function to convert the given list to a dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-list-to-adjacent-pair-dictionary/\n    '''\n    print(test_list)\n    test_dict = dict(zip(test_list[::2], test_list[1::2]))\n    print(test_dict)\n    \n    return\n    \n    \ndef convert_list_of_tuples_to_dictionary(test_tup_list):\n    '''\n    Write a function to convert the given list of tuples to a dictionary using the adjacent elements of each tuple. https://www.geeksforgeeks.org/python-convert-list-of-tuples-to-key-value-dict/\n    '''\n    print(test_tup_list)\n    test_dict = dict(zip(test_tup_list[::2], test_tup_list[1::2]))\n    print(test_dict)\n    \n    return\n    \n    \ndef convert_tuple_to_list(test_tup):\n    '''\n    Write a function to convert the given tuple to a list using the adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-list/\n    '''\n    print(test_tup)\n    test_list = list(test_tup)\n    print(test_list)\n    \n    return\n    \n    \ndef convert_tuple_to_list_of_tuples(test_tup):\n    '''\n    Write a function to convert the given tuple to a list of tuples using the adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-list-of-tuples-with-adjacent-elements/\n    '''\n    print(test_tup)\n    test_list_of_tuples = list(test_tup)\n    print(test_list_of_tuples)\n    \n    return\n    \n    \ndef convert_dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple using the adjacent keys. https://www.geeksforgeeks.org/python-convert-dictionary-to-tuple-with-adjacent-keys/\n    '''\n    print(test_dict)\n    test_tup = tuple(test_dict.items())\n    print(test_tup)\n    \n    return\n    \n    \ndef convert_dict_to_list_of_tuples(test_dict):\n    '''\n    Write a function t",
        "num_ids": 7
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2],test_tup[1::2]))\n",
        "num_ids": 28
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
        "num_ids": 27
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n",
        "num_ids": 38
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    # Storing tuples in a list\n    li = [test_tup]\n    \n    # Using zip() to get a list of tuples\n    result = zip(*li)\n    \n    # Using dict() to convert list of tuples to dict\n    return dict(result)\n    \nprint(tuple_to_dict((2, 1, 2, 3, 4, 5)))\n",
        "num_ids": 94
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n",
        "num_ids": 13
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    else :\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n",
        "num_ids": 13
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    characters = set(s)\n    if (len(characters) == 1) :\n        return True\n    else :\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for c in set(s) :\n        if c == s[0] :\n            continue\n        else :\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s[0] == s[len(s)-1]\n",
        "num_ids": 18
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)==0:\n        return True\n    else :\n        first=s[0]\n        for c in s :\n            if c!=first :\n                return False\n        return True\n",
        "num_ids": 51
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return (s==s[0])\n",
        "num_ids": 12
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if (len(s) > 0) :\n        for i in range(0, len(s)-1) :\n            if s[i]!= s[i+1] :\n                return False\n        return True\n    else :\n        return False\n    \ndef all_Characters_same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if (len(s) > 0) :\n        return (s[0] == s[1])\n    else :\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return (all([i == s[0] for i in s]) == True)\n    # return (all([i == s[0] for i in s]) == True)\n",
        "num_ids": 43
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * (side ** 2)\n",
        "num_ids": 18
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4 * math.sqrt(3) / 4 * side ** 2\n",
        "num_ids": 20
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**3)/(6*math.sqrt(2))\n",
        "num_ids": 20
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side = float(side)\n    area = (3**(1/2))/4*(side**2)\n    return area\n",
        "num_ids": 34
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return round(math.sqrt(3)*side**2, 2)\n",
        "num_ids": 20
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**3)/(6*math.sqrt(2))\n",
        "num_ids": 20
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt((side**2)*(3))/4\n",
        "num_ids": 19
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the area of a tetrahedron.\n    # return the area of a tetrahedron.\n    # side = input(\"Please enter the side of the Tetrahedron\")\n    return int(side)**2*math.sqrt(2)/4\n",
        "num_ids": 64
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((2 * math.sqrt(3)) / 4) * side**2\n",
        "num_ids": 22
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return float(6 * (side * side))\n",
        "num_ids": 14
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    len_list = len(list)\n    # There should be atleast 2 elements to rotate\n    if len_list < 2:\n        return\n",
        "num_ids": 37
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    temp = list[n-m:n]\n    for i in range(0, n-m):\n        list[i] = list[i+m]\n    for i in range(n-m, n):\n        list[i] = temp[i-n+m]\n    return list\n",
        "num_ids": 80
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # list = [1,2,3,4,5,6,7,8,9]\n    # m = 5\n    # output: [3,4,5,1,2]\n",
        "num_ids": 48
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # todo this is actually not a circular array rotation, but a circular array rotation with a specific number of items\n    num_to_move = m\n    for i in range(num_to_move):\n        list.insert(0, list.pop())\n    return list\n",
        "num_ids": 65
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # print(\"rotate right\")\n    for _ in range(m):\n        temp = list[-1]\n        for i in range(len(list)-1, -1, -1):\n            list[i] = list[i - 1]\n        list[0] = temp\n    return list\n",
        "num_ids": 73
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n",
        "num_ids": 35
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[m:]\n    for i in range(len(list)):\n        list[i+m] = list[i]\n    return temp\n",
        "num_ids": 39
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list[:] = list[m:] + list[:m]\n    return list\n",
        "num_ids": 22
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    listLength = len(list)\n    rotateLength = listLength - m\n    rotatePart = list[rotateLength:]\n    rotatePart.extend(list[:rotateLength])\n    return rotatePart\n",
        "num_ids": 54
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    print \"List: \", list\n    print \"Number of items to rotate: \", m\n",
        "num_ids": 22
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == None:\n        print(\"List is empty.\")\n    else:\n        print(\"List is not empty.\")\n",
        "num_ids": 33
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all(x is not None for x in test_tup)\n",
        "num_ids": 19
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return False if any(x is None for x in test_tup) else True\n",
        "num_ids": 22
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return False if True in [x is None for x in test_tup] else True\n",
        "num_ids": 23
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return False\n    else:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for test in test_tup:\n        if test is None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None in test_tup\n",
        "num_ids": 11
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return True if None in test_tup else False\n",
        "num_ids": 15
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def digits_in_number(num):\n        digits = []\n        for i in range(1, len(str(num))+1):\n            digits.append(int(str(num)[::-1][i-1]))\n        return digits\n    def divisible_by_digits_in_range(startnum, endnum):\n        return [i for i in range(startnum, endnum) if len(set(digits_in_number(i))) == len(set(str(i)))]\n    return divisible_by_digits_in_range(startnum, endnum)\n",
        "num_ids": 145
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum+1) if all([x % int(y) == 0 for y in str(x)])]\n",
        "num_ids": 40
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum) if all([True if num%int(digit) == 0 else False for digit in str(num)])]\n",
        "num_ids": 42
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # TODO: Write the function here\n    return list(filter(lambda n: all(n%int(digit)==0 for digit in str(n)),range(startnum,endnum)))\n",
        "num_ids": 47
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [number for number in range(startnum, endnum + 1) if all([digit in str(number) for digit in str(number)])]\n",
        "num_ids": 38
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: x % (int(str(x)[0]) + 1) == 0 and x % (int(str(x)[1]) + 1) == 0 and x % (int(str(x)[2]) + 1) == 0 and x % (int(str(x)[3]) + 1) == 0 and x % (int(str(x)[4]) + 1) == 0 and x % (int(str(x)[5]) + 1) == 0, range(startnum, endnum + 1)))\n",
        "num_ids": 124
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    #return filter(lambda x: all([x % int(digit) == 0 for digit in str(x)]), range(startnum, endnum + 1))\n    return list(filter(lambda x: all([x % int(digit) == 0 for digit in str(x)]), range(startnum, endnum + 1)))\n",
        "num_ids": 79
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum + 1) if all(x == 0 or i % x == 0 for x in map(int, str(i))) == True]\n",
        "num_ids": 46
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def every_digit(number):\n        '''\n        This function checks if the number is divisible by every digit it contains\n        '''\n        return_value = True\n        if (int(number) % 10!= 0):\n            return_value = False\n        while (int(number) > 1):\n            if (int(number) % 10!= 0):\n                return_value = False\n                break\n            number = int(number) / 10\n        return return_value\n",
        "num_ids": 81
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return a*r*r/math.pi\n",
        "num_ids": 29
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    import math\n    if a > 360:\n        return None\n    else:\n        a = a*(math.pi/180)\n        s = math.pi*r**2\n        s = s*a\n        return s\ndef reverse_digit(n):\n    '''\n    Write a function to find the sum of the digits of the number. If it's an even number, the function should return the sum of the last two digits.\n    '''\n    n = str(n)\n    n = n[::-1]\n    s = 0\n    for i in n:\n        s += int(i)\n    return s\ndef custom_sum(n,a,b):\n    '''\n    Write a function to return a number of a given list. If the number is in the list, return the number. If the number is not in the list, return the sum of the number and the sum of the list.\n    '''\n    n = list(str(n))\n    a = list(str(a))\n    b = list(str(b))\n    if int(''.join(n)) in a:\n        return int(''.join(n))\n    elif int(''.join(n)) in b:\n        return int(''.join(n))\n    else:\n        n.append(a)\n        n.append(b)\n        return sum(n)\ndef money_needed(n):\n    '''\n    Write a function that takes the price of an item and returns the total amount of money needed to pay for the item. If the price is below 50, return 0.\n    '''\n    if n < 50:\n        return 0\n    else:\n        return int(n-50)\ndef zero_remover(n):\n    '''\n    Write a function that removes the zeroes from a string. \n    '''\n    n = list(str(n))\n    for i in range(len(n)):\n        if n[i] == '0':\n            n[i] = ''\n    n = ''.join(n)\n    return n\ndef break_words(stuff):\n    '''\n    Write a function to break up words for a given sentence. The function should take in a string and return a list of strings.\n    '''\n    n = list(stuff)\n    l = []\n    for i in n:\n        if i =='':\n            l.append(i)\n        else:\n            l.append(i)\n    return l\ndef parrot_trouble(talking, hour):\n    '''\n    Write a function that takes in two inputs, the parrot\u2019s talking and hour. \n    If the parrot is talking and the hour is before 7 or after 20, return \u201cFine. Be that way!\u201d. \n    Otherwise, return \u201cError 404\u201d.\n    '''\n    if talking == True:\n        if hour < 7 or hour > 20:\n            return 'Fine. Be that way!'\n        else:\n            return 'Error 404'\n    else:\n        return 'Error 404'\ndef even_numbers(n):\n    '''\n    Write a function that takes in a positive integer and returns a list of even numbers up to and including that number.\n    '''\n    n = list(str(n))\n    l = []\n    for i in n:\n        i = int(i)\n        if i == 0:\n            n = []\n            break\n        if i%2 == 0:\n            l.append(i)\n        else:\n            pass\n    return l\ndef make_abba(a, b):\n    '''\n    Write a function that takes in two strings and returns True if they're an ABBA and False if they're not.\n    '''\n    if a[0]!= b[1] or a[-1]!= b[0]:\n        return False\n    else:\n        return True\ndef make_tags(tag, word):\n    '''\n    Write a function that takes in a string of text and returns that text within a html open and close tag.\n    '''\n    tag = '<'+tag+'>'+word+'</'+tag+'>'\n    return tag\ndef get_middle(s):\n    '''\n    Write a function that takes in a string and returns the middle character(s). If the length of the string is odd, return the middle character. If the length is even, return the middle two characters.\n    '''\n    n = len(s)\n    if n%2 == 0:\n        return s[(n//2)-1:n//2+1]\n    else:\n        return s[(n//2):n//2+1]\ndef make_out_word(out, word):\n    '''\n    Write a function that takes in a \"out\" string length and a word string. Return a string that is the out word with the word in the middle.\n    '''\n    n = len(out)\n    if n%2 == 0:\n        return out[:n//2] + word + out[n//2:]\n    else:\n        return out[:n//2] + word + out[n//2+1:]\ndef first_and_last(message):\n    '''\n    Write a function that takes a message and returns the first and last letters of the message. \n    '''\n    message = list(message)\n    return [message[0],message[-1]]\ndef sort_last(tuples):\n    '''\n    Write a function that takes in a list of tuples and sorts them by their last element. \n    '''\n    return sorted(tuples,key=lambda x:x[-1])\ndef has_33(nums):\n    '''\n    Write a function to find if there are three numbers in a list that add up to the number.\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            for k in range(j+1,len(nums)):\n                if nums[i]+nums[j]+nums[k] == 2020:\n                    return nums[i]*nums[j]*nums[k]\ndef paper_doll(text):\n    '''\n    Write a function that takes in a string and returns that string with a new word that is formed by using the original word 3 times. \n    '''\n    t = list(text)\n    for i in range(len(t)):\n        t[i] = t[i]*3\n    return ''.join(t)\ndef blackjack(a, b, c):\n    '''\n    Write a function that takes in three numbers and returns True if the sum of the numbers is less than or equal to 21, False if the sum of the numbers is greater than 21.\n    '''\n    if sum([a,b,c]) <= 21:\n        return True\n    else:\n        return False\ndef in1to10(n, outside_mode):\n    '''\n    Write a function that takes in a number n and returns True if n is in the range 1 to 10, inclusive. If outside_mode is True, return True if n is greater or equal to 11 or less than or equal to 0. If outside_mode is False, return True if n is greater or equal to 1 or less than or equal to 10.\n    '''\n    if outside_mode == True:\n        if n >= 11 or n <= 0:\n            return True\n        else:\n            return False\n    elif outside_mode == False:\n        if n >= 1 and n <= 10:\n            return True\n        else:\n            return False\ndef in1to10_count(n, outside_mode):\n    '''\n    Write a function that takes in two numbers n and outside_mode. If outside_mode is True, return True if n is greater or equal to 11 or less than or equal to 0. If outside_mode is False, return True if n is greater or equal to 1 or less than or equal to 10. Call the function with a value of 5 and a outside_mode value of True.\n    '''\n    if outside_mode == True:\n        if n >= 11 or n <= 0:\n            return True\n        else:\n            return False\n    elif outside_mode == False:\n        if n >= 1 and n <= 10:\n            return True\n        else:\n            return False\ndef same_name(lst):\n    '''\n    Write a function that takes in a list of tuples. Return True if the last name of an",
        "num_ids": 23
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    def area(r,a):\n        s=(math.pi)*(r**2)\n        area=s*(a/360)\n        return area\n    if a>360:\n        return None\n    else:\n        return area(r,a)\n",
        "num_ids": 63
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area=r**2*(math.sin(a/360*2*math.pi))\n    return(area)\ndef perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle. The function takes the radius as an input. Function should return None if the radius is larger than 1000 units.\n    '''\n    perimeter=2*math.pi*r\n    return(perimeter)\ndef triangle_area(b,h):\n    '''\n    Write a function to find the area of a triangle. The function takes the base and height as inputs. Function should return None if the height is larger than 1000 units.\n    '''\n    area=(b*h)/2\n    return(area)\ndef rectangle_area(b,h):\n    '''\n    Write a function to find the area of a rectangle. The function takes the base and height as inputs. Function should return None if the height is larger than 1000 units.\n    '''\n    area=b*h\n    return(area)\ndef trapezoid_area(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezoid. The function takes the base1, base2 and height as inputs. Function should return None if the height is larger than 1000 units.\n    '''\n    area=1/2*(b1+b2)*h\n    return(area)\ndef parallelogram_area(b,h):\n    '''\n    Write a function to find the area of a parallelogram. The function takes the base and height as inputs. Function should return None if the height is larger than 1000 units.\n    '''\n    area=b*h\n    return(area)\ndef trapezoid_area(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezoid. The function takes the base1, base2 and height as inputs. Function should return None if the height is larger than 1000 units.\n    '''\n    area=1/2*(b1+b2)*h\n    return(area)\ndef cylinder_area(r,h):\n    '''\n    Write a function to find the area of a cylinder. The function takes the radius and height as inputs. Function should return None if the radius is larger than 1000 units.\n    '''\n    area=2*math.pi*r*h\n    return(area)\ndef sphere_area(r):\n    '''\n    Write a function to find the area of a sphere. The function takes the radius as an input. Function should return None if the radius is larger than 1000 units.\n    '''\n    area=4*math.pi*r**2\n    return(area)\ndef cone_area(r,h):\n    '''\n    Write a function to find the area of a cone. The function takes the radius and height as inputs. Function should return None if the radius is larger than 1000 units.\n    '''\n    area=1/3*math.pi*r*r*h\n    return(area)\ndef rectangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a rectangle. The function takes the base and height as inputs. Function should return None if the height is larger than 1000 units.\n    '''\n    perimeter=2*(b+h)\n    return(perimeter)\ndef triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a triangle. The function takes the base and height as inputs. Function should return None if the height is larger than 1000 units.\n    '''\n    perimeter=b+h+math.sqrt(b**2+h**2)\n    return(perimeter)\ndef trapezoid_perimeter(b1,b2,h):\n    '''\n    Write a function to find the perimeter of a trapezoid. The function takes the base1, base2 and height as inputs. Function should return None if the height is larger than 1000 units.\n    '''\n    perimeter=b1+b2+2*h\n    return(perimeter)\ndef cylinder_perimeter(r,h):\n    '''\n    Write a function to find the perimeter of a cylinder. The function takes the radius and height as inputs. Function should return None if the radius is larger than 1000 units.\n    '''\n    perimeter=2*(r*2+h)\n    return(perimeter)\ndef sphere_perimeter(r):\n    '''\n    Write a function to find the perimeter of a sphere. The function takes the radius as an input. Function should return None if the radius is larger than 1000 units.\n    '''\n    perimeter=4*math.pi*r\n    return(perimeter)\ndef cone_perimeter(r,h):\n    '''\n    Write a function to find the perimeter of a cone. The function takes the radius and height as inputs. Function should return None if the radius is larger than 1000 units.\n    '''\n    perimeter=3*math.pi*r+h+math.sqrt((h+r)**2+(h*r))\n    return(perimeter)\ndef sum_all(list_of_numbers):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the numbers in the list.\n    '''\n    sum_all=0\n    for i in list_of_numbers:\n        sum_all+=i\n    return(sum_all)\ndef sum_even(list_of_numbers):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the even numbers in the list.\n    '''\n    sum_even=0\n    for i in list_of_numbers:\n        if(i%2==0):\n            sum_even+=i\n    return(sum_even)\ndef sum_odd(list_of_numbers):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the odd numbers in the list.\n    '''\n    sum_odd=0\n    for i in list_of_numbers:\n        if(i%2!=0):\n            sum_odd+=i\n    return(sum_odd)\ndef product_all(list_of_numbers):\n    '''\n    Write a function that takes a list of numbers and returns the product of all the numbers in the list.\n    '''\n    product_all=1\n    for i in list_of_numbers:\n        product_all*=i\n    return(product_all)\ndef count_number(list_of_numbers,x):\n    '''\n    Write a function to count the number of times a number appears in a list.\n    '''\n    count=0\n    for i in list_of_numbers:\n        if(i==x):\n            count+=1\n    return(count)\ndef list_max(list_of_numbers):\n    '''\n    Write a function that takes a list of numbers and returns the largest number in the list. If the list is empty, return None.\n    '''\n    if(len(list_of_numbers)==0):\n        return(None)\n    else:\n        max_num=list_of_numbers[0]\n        for i in list_of_numbers:\n            if(i>max_num):\n                max_num=i\n        return(max_num)\ndef list_min(list_of_numbers):\n    '''\n    Write a function that takes a list of numbers and returns the smallest number in the list. If the list is empty, return None.\n    '''\n    if(len(list_of_numbers)==0):\n        return(None)\n    else:\n        min_num=list_of_numbers[0]\n        for i in list_of_numbers:\n            if(i<min_num):\n                min_num=i\n        return(min_num)\ndef list_avg(list_of_numbers):\n    '''\n    Write a function that takes a list of numbers and returns the average of all the numbers in the list.\n    '''\n    sum_avg=0\n    for i in list_of_numbers:\n        sum_avg+=i\n    avg=sum_avg/len(list_of_numbers)\n    return(avg)\ndef list_sum_odd(list_of_numbers):\n    '''\n    Write a function that takes a list of numbers and returns the sum of all the odd number",
        "num_ids": 21
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Replace None with the correct return value\n    if a<=360:\n        return None\n    else:\n        return r*r*math.acos(1-(a/360))\n",
        "num_ids": 47
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r<0) or (a<0):\n        return None\n    if (a>360):\n        return None\n    else:\n        area=math.pi*(r**2)*(a/360)\n        return area",
        "num_ids": 57
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r**2)*(a/360)\n        return area\ndef polygon_area(sides,l):\n    '''\n    Write a function to calculate the area of a polygon with given number of sides. The function should return None if sides is not equal to 3 or 4.\n    '''\n    if l!= 3 and l!= 4:\n        return None\n    else:\n        n = sides\n        x = l\n        area = (n*x**2)/(4*math.tan(math.pi/n))\n        return area\ndef circuit_area(l,b):\n    '''\n    Write a function to calculate the area of a rectangle. The function should return None if length or breadth is not a positive number.\n    '''\n    if l <= 0 or b <= 0:\n        return None\n    else:\n        area = l*b\n        return area\ndef area_of_disk(r):\n    '''\n    Write a function to calculate the area of a disk. The function takes radius as input. The function should return None if radius is not a positive number.\n    '''\n    if r <= 0:\n        return None\n    else:\n        area = math.pi*r**2\n        return area\ndef area_of_circle(r):\n    '''\n    Write a function to calculate the area of a circle. The function takes radius as input. The function should return None if radius is not a positive number.\n    '''\n    if r <= 0:\n        return None\n    else:\n        area = math.pi*r**2\n        return area\ndef area_of_triangle(b,h):\n    '''\n    Write a function to calculate the area of a triangle. The function takes base and height as input. The function should return None if base or height is not a positive number.\n    '''\n    if b <= 0 or h <= 0:\n        return None\n    else:\n        area = b*h/2\n        return area\ndef surface_area_of_cone(r,h):\n    '''\n    Write a function to calculate the surface area of a cone. The function takes radius and height as input. The function should return None if radius or height is not a positive number.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        area = (1/3)*(math.pi*r**2)*h\n        return area\ndef surface_area_of_cylinder(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder. The function takes radius and height as input. The function should return None if radius or height is not a positive number.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        area = 2*(math.pi*r*(r+h))\n        return area\ndef surface_area_of_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere. The function takes radius as input. The function should return None if radius is not a positive number.\n    '''\n    if r <= 0:\n        return None\n    else:\n        area = 4*math.pi*r**2\n        return area\ndef volume_of_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere. The function takes radius as input. The function should return None if radius is not a positive number.\n    '''\n    if r <= 0:\n        return None\n    else:\n        volume = (4/3)*(math.pi*r**3)\n        return volume\ndef volume_of_cube(l):\n    '''\n    Write a function to calculate the volume of a cube. The function takes side as input. The function should return None if side is not a positive number.\n    '''\n    if l <= 0:\n        return None\n    else:\n        volume = l**3\n        return volume\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder. The function takes radius and height as input. The function should return None if radius or height is not a positive number.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        volume = math.pi*r**2*h\n        return volume\ndef volume_of_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone. The function takes radius and height as input. The function should return None if radius or height is not a positive number.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        volume = 1/3*math.pi*r**2*h\n        return volume\ndef volume_of_prism(r,h):\n    '''\n    Write a function to calculate the volume of a prism. The function takes radius and height as input. The function should return None if radius or height is not a positive number.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        volume = r*h*h\n        return volume\ndef volume_of_pyramid(r,h):\n    '''\n    Write a function to calculate the volume of a pyramid. The function takes radius and height as input. The function should return None if radius or height is not a positive number.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        volume = (1/3)*math.pi*r**2*h\n        return volume\ndef volume_of_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere. The function takes radius as input. The function should return None if radius is not a positive number.\n    '''\n    if r <= 0:\n        return None\n    else:\n        volume = (4/3)*math.pi*r**3\n        return volume\ndef volume_of_cube(l):\n    '''\n    Write a function to calculate the volume of a cube. The function takes side as input. The function should return None if side is not a positive number.\n    '''\n    if l <= 0:\n        return None\n    else:\n        volume = l**3\n        return volume\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder. The function takes radius and height as input. The function should return None if radius or height is not a positive number.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        volume = math.pi*r**2*h\n        return volume\ndef volume_of_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone. The function takes radius and height as input. The function should return None if radius or height is not a positive number.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        volume = 1/3*math.pi*r**2*h\n        return volume\ndef volume_of_prism(r,h):\n    '''\n    Write a function to calculate the volume of a prism. The function takes radius and height as input. The function should return None if radius or height is not a positive number.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        volume = r*h*h\n        return volume\ndef volume_of_pyramid(r,h):\n    '''\n    Write a function to calculate the volume of a pyramid. The function takes radius and height as input. The function should return None if radius or height is not a positive number.\n    '''\n    if r <= 0 or h <= 0:\n        return None\n    else:\n        volume = (1/3)*math.pi*r**2*h\n        return volume\ndef energy_of_body(m,v):\n    '''\n    Write a function to calculate the energy of a body. The function takes mass and velocity as input. The function should return None if mass or velocity is not a positive number.\n    '''\n    if m <= 0 or v <= 0:\n        return None\n    else:\n        KE = 0.5*m*v**2\n        return KE\ndef force_on_body(m,x):\n    '''\n    Write a function to calculate the force on a body. The function takes mass and acceleration as input. The function should return None if mass or acceleratio",
        "num_ids": 33
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a<=360):\n        return None\n    else:\n        return (r**2)*math.acos(1-(r**2)/(2*a*r))\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a<=360):\n        return None\n    else:\n        return (r**2)*math.acos(1-(r**2)/(2*a*r))\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as an input. Function should return None if the radius is negative.\n    '''\n    if (r<0):\n        return None\n    else:\n        return (math.pi)*(r**2)\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between two points. The function takes the x and y coordinates of the first point and second point as inputs. Function should return None if any of the inputs is negative.\n    '''\n    if (x1<=0 or y1<=0 or x2<=0 or y2<=0):\n        return None\n    else:\n        return math.sqrt((x2-x1)**2+(y2-y1)**2)\ndef divisors(n):\n    '''\n    Write a function to return all divisors of a number. The function takes the number as input. Function should return None if the number is negative.\n    '''\n    if (n<0):\n        return None\n    else:\n        l=[]\n        for i in range(1,int(n/2)+1):\n            if (n%i==0):\n                l.append(i)\n        return l\ndef divisors(n):\n    '''\n    Write a function to return all divisors of a number. The function takes the number as input. Function should return None if the number is negative.\n    '''\n    if (n<0):\n        return None\n    else:\n        l=[]\n        for i in range(1,int(n/2)+1):\n            if (n%i==0):\n                l.append(i)\n        return l\ndef gcd(a,b):\n    '''\n    Write a function to find the gcd of two numbers. The function takes two numbers as inputs. Function should return None if any of the inputs is negative.\n    '''\n    if (a<0 or b<0):\n        return None\n    else:\n        if (a>=b):\n            if (a==0):\n                return b\n            else:\n                return gcd(a%b,b)\n        else:\n            if (b==0):\n                return a\n            else:\n                return gcd(b%a,a)\ndef gcd(a,b):\n    '''\n    Write a function to find the gcd of two numbers. The function takes two numbers as inputs. Function should return None if any of the inputs is negative.\n    '''\n    if (a<0 or b<0):\n        return None\n    else:\n        if (a>=b):\n            if (a==0):\n                return b\n            else:\n                return gcd(a%b,b)\n        else:\n            if (b==0):\n                return a\n            else:\n                return gcd(b%a,a)\ndef LCM(a,b):\n    '''\n    Write a function to find the lcm of two numbers. The function takes two numbers as inputs. Function should return None if any of the inputs is negative.\n    '''\n    if (a<0 or b<0):\n        return None\n    else:\n        return ((a*b)/gcd(a,b))\ndef LCM(a,b):\n    '''\n    Write a function to find the lcm of two numbers. The function takes two numbers as inputs. Function should return None if any of the inputs is negative.\n    '''\n    if (a<0 or b<0):\n        return None\n    else:\n        return ((a*b)/gcd(a,b))\ndef coin_denominations(l,r):\n    '''\n    Write a function to print the number of ways we can make change for a given amount of money. The function takes two parameters, the amount of money and the list of coin denominations as input. Function should return None if the amount of money is negative.\n    '''\n    if (r<0):\n        return None\n    else:\n        d={}\n        for i in range(len(l)):\n            d[l[i]]=i\n        return rec(d,0,r,0)\ndef rec(d,amt,rem,index):\n    '''\n    Write a function to print the number of ways we can make change for a given amount of money. The function takes three parameters, the dictionary of coin denominations, the amount of money, the remaining amount of money, and the index of the list of coin denominations. Function should return None if the amount of money is negative.\n    '''\n    if (rem<0):\n        return None\n    elif (amt==0):\n        if (rem==0):\n            return 1\n        else:\n            return 0\n    elif (rem<=l[index]):\n        return rec(d,amt,rem,index)\n    else:\n        return rec(d,amt,rem-l[index],index)+rec(d,amt,rem,index+1)\ndef coin_denominations(l,r):\n    '''\n    Write a function to print the number of ways we can make change for a given amount of money. The function takes two parameters, the amount of money and the list of coin denominations as input. Function should return None if the amount of money is negative.\n    '''\n    if (r<0):\n        return None\n    else:\n        return rec(0,r,0)\ndef rec(amt,rem,index):\n    '''\n    Write a function to print the number of ways we can make change for a given amount of money. The function takes three parameters, the amount of money, the remaining amount of money, and the index of the list of coin denominations. Function should return None if the amount of money is negative.\n    '''\n    if (amt<0):\n        return None\n    elif (rem==0):\n        if (amt==0):\n            return 1\n        else:\n            return 0\n    elif (amt>=l[index]):\n        return rec(amt-l[index],rem,index)\n    else:\n        return rec(amt,rem,index)+rec(amt,rem-l[index],index)\ndef coin_denominations(l,r):\n    '''\n    Write a function to print the number of ways we can make change for a given amount of money. The function takes two parameters, the amount of money and the list of coin denominations as input. Function should return None if the amount of money is negative.\n    '''\n    if (r<0):\n        return None\n    else:\n        return rec(0,r,0)\ndef rec(amt,rem,index):\n    '''\n    Write a function to print the number of ways we can make change for a given amount of money. The function takes three parameters, the amount of money, the remaining amount of money, and the index of the list of coin denominations. Function should return None if the amount of money is negative.\n    '''\n    if (amt<0):\n        return None\n    elif (rem==0):\n        if (amt==0):\n            return 1\n        else:\n            return 0\n    elif (amt>=l[index]):\n        return rec(amt-l[index],rem,index)\n    else:\n        return rec(amt,rem,index)+rec(amt,rem-l[index],index)\ndef coin_denominations(l,r):\n    '''\n    Write a function to print the number of ways we can make change for a given amount of money. The function takes two parameters, the amount of money and the list of coin denominations as input. Function should return None if the amount of money is negative.\n    '''\n    if (r<0):\n        return None\n    else:\n        return re",
        "num_ids": 21
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 360:\n        area = (r*r)*(math.pi/180)*a\n        return area\n    else:\n        print('Please enter a valid angle in degrees.')\n        return None\n",
        "num_ids": 51
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #Catch if the angle is larger than 360\n    if a>360:\n        return None\n    else:\n        return (r**2)*math.sin(a/360*math.pi*2)\n    \nprint(sector_area(5,80))\nprint(sector_area(5,360))\nprint(sector_area(5,400))\n",
        "num_ids": 86
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n",
        "num_ids": 29
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[[None]*(o+1) for i in range(n+1)] for j in range(m+1)] \n    result = \"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if L[i][j][k] == m:\n                    result = result + X[i-1]\n    return result\n",
        "num_ids": 304
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None for k in range(l+1)] for j in range(n+1)] for i in range(m+1)] \n",
        "num_ids": 61
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z)\n    L = [[[None]*(l+1) for i in range(n+1)] for i in range(m+1)] \n",
        "num_ids": 61
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[0 for x in range(l + 1)] for y in range(n + 1)] for z in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(l + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]) \n",
        "num_ids": 236
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n",
        "num_ids": 29
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # create a table to store results of subproblems \n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[None]*(n+1) for i in range(m+1)] \n",
        "num_ids": 66
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    c = [[0 for i in range(m+1)] for j in range(n+1)]\n    b = [[[0 for i in range(m+1)] for j in range(n+1)] for k in range(o+1)]\n    for i in range(m+1):\n        c[i][0] = 0\n    for j in range(n+1):\n        c[0][j] = 0\n    for k in range(o+1):\n        c[0][0] = 0\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    c[i][j] = c[i-1][j-1] + 1\n                    b[i][j][k] = 1\n                elif c[i-1][j] >= c[i][j-1] and c[i-1][j] >= c[i][j]:\n                    c[i][j] = c[i-1][j]\n                    b[i][j][k] = 2\n                elif c[i][j-1] >= c[i][j]:\n                    c[i][j] = c[i][j-1]\n                    b[i][j][k] = 3\n    for i in range(m+1):\n        print(c[i])\n    print(\"\")\n    for i in range(m+1):\n        print(b[i])\n    print(\"\")\n    max_index = c[m][n]\n    max_X = [m+1]\n    max_Y = [n+1]\n    max_Z = [o+1]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if c[i][j] == c[i][j-1] and b[i][j][k] == 3:\n                    max_Y[0] = j\n                elif c[i][j] == c[i-1][j] and b[i][j][k] == 2:\n                    max_X[0] = i\n                elif c[i][j] == c[i-1][j-1] and b[i][j][k] == 1:\n                    max_Z[0] = k\n    print(max_index, max_X, max_Y, max_Z)\n    print(\"\")\n    if max_index == 0:\n        return \"\"\n    else:\n        return lcs_of_three(X, Y, Z)\n",
        "num_ids": 671
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # create a dp table of (X+1) * (Y+1) * (Z+1) \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n",
        "num_ids": 56
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    # create a table to store the longest common subsequence \n    # for every pair of strings\n    L = [[[None] for i in range(o + 1)] for j in range(m + 1)]\n    \n    for i in range(m + 1): \n        for j in range(o + 1): \n            for k in range(n + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[k - 1] and X[i - 1] == Z[j - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]) \n    \n    # L[m][n][o] contains the length of LCS of X[0..n-1], Y[0..m-1] and Z[0..o-1]\n    return L[m][n][o]\n",
        "num_ids": 303
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([A-Z])',r' \\1',str1)\n",
        "num_ids": 25
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.split('(?<=[a-zA-Z])[A-Z]|(?<=[A-Z][a-zA-Z])[A-Z]',str1)\n    return''.join(result)\n",
        "num_ids": 59
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.sub(r'(?<=[a-z])([A-Z]+)',r' \\1',str1)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    spaced_str = re.sub(r\"(\\w)([A-Z])\",r\"\\1 \\2\",str1)\n    return spaced_str\n",
        "num_ids": 40
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # We first find all the capital letters in the string and replace them by \" capital letter \". We then split the string and join it again using spaces between words. \n    capital_words_spaces = re.sub(\"([A-Z])\", r\" \\1\", str1)\n    # The above code does not have a space before a capital letter. We add a space before every capital letter.\n    capital_words_spaces = capital_words_spaces.replace('\\\\', '\\\\\\\\')\n    # We replace the backslash (\\) by another one (\\/).\n    capital_words_spaces = capital_words_spaces.replace(' ', r'\\ ')\n    # We replace the space character ( ) by another one (\\ ) to ensure the string is a regular expression.\n    capital_words_spaces = capital_words_spaces.replace('(', r'\\(')\n    # We replace the left parenthesis ( ( by another one ( \\( to ensure the string is a regular expression.\n    capital_words_spaces = capital_words_spaces.replace(')', r'\\)')\n    # We replace the right parenthesis ( ) by another one (\\) to ensure the string is a regular expression.\n    capital_words_spaces = capital_words_spaces.replace('+', r'\\+')\n    # We replace the plus character (+) by another one (\\+) to ensure the string is a regular expression.\n    capital_words_spaces = capital_words_spaces.replace('*', r'\\*')\n    # We replace the star character (*) by another one (\\*) to ensure the string is a regular expression.\n    capital_words_spaces = capital_words_spaces.replace('.', r'\\.')\n    # We replace the dot character (.) by another one (\\.) to ensure the string is a regular expression.\n    capital_words_spaces = capital_words_spaces.replace('^', r'\\^')\n    # We replace the circumflex character (^) by another one (\\^) to ensure the string is a regular expression.\n    capital_words_spaces = capital_words_spaces.replace('[', r'\\[')\n    # We replace the left square bracket ([) by another one (\\[) to ensure the string is a regular expression.\n    capital_words_spaces = capital_words_spaces.replace(']', r'\\]')\n    # We replace the right square bracket (]) by another one (\\]) to ensure the string is a regular expression.\n    capital_words_spaces = capital_words_spaces.replace('|', r'\\|')\n    # We replace the vertical bar character (|) by another one (\\|) to ensure the string is a regular expression.\n    capital_words_spaces = capital_words_spaces.replace('{', r'\\{')\n    # We replace the curly brace ({) by another one (\\{) to ensure the string is a regular expression.\n    capital_words_spaces = capital_words_spaces.replace('}', r'\\}')\n    # We replace the curly brace (}) by another one (\\}) to ensure the string is a regular expression.\n    capital_words_spaces = capital_words_spaces.replace('?', r'\\?')\n    # We replace the question mark character (?) by another one (\\?) to ensure the string is a regular expression.\n    capital_words_spaces = capital_words_spaces.replace('\"', r'\\\"')\n    # We replace the double quote character (\") by another one (\\\").\n    capital_words_spaces = capital_words_spaces.replace('!', r'\\!')\n    # We replace the exclamation mark character (!) by another one (\\!).\n    capital_words_spaces = capital_words_spaces.replace('\\\\', r'\\\\')\n    # We replace the backslash (\\) by another one (\\\\) to ensure the string is a regular expression.\n    capital_words_spaces = capital_words_spaces.replace('-', r'\\-')\n    # We replace the hyphen character (-) by another one (\\-).\n    capital_words_spaces = capital_words_spaces.replace('>', r'\\>')\n    # We replace the greater than character (>) by another one (\\>).\n    capital_words_spaces = capital_words_spaces.replace('<', r'\\<')\n    # We replace the less than character (<) by another one (\\<).\n    capital_words_spaces = capital_words_spaces.replace('~', r'\\~')\n    # We replace the tilde character (~) by another one (\\~).\n    capital_words_spaces = capital_words_spaces.replace('`', r'\\`')\n    # We replace the grave accent character (`) by another one (\\`).\n    capital_words_spaces = capital_words_spaces.replace(' ', r'\\ ')\n    # We replace the space character ( ) by another one (\\ ) to ensure the string is a regular expression.\n    return''.join(capital_words_spaces.split())\n",
        "num_ids": 1199
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result_string = \"\"\n    regex = r\"([A-Z][a-z]+)+\"\n    find_list = re.findall(regex, str1)\n    for word in find_list:\n        result_string = result_string + \" \" + word\n    return result_string\n",
        "num_ids": 74
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # str1 = \"Hello, I am Suman. I live in Bangalore. And I am here to learn something new\"\n    words = re.split(r'(\\W+)', str1)\n    print(words)\n    new_str = ''\n    for word in words:\n        if word.isupper():\n            new_str = new_str +'' + word\n        else:\n            new_str = new_str + word\n    print(new_str)\n",
        "num_ids": 111
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # str1 = str1.capitalize()\n    # str1 = re.findall(r'[A-Z][a-z]*', str1)\n    # str1 = re.findall(r'[A-Z][a-z]*', str1)\n    # str1 = re.sub(r'([A-Z][a-z]*)', r' \\1', str1)\n    # print(str1)\n    # return str1\n    # above code does not work\n    # try another way\n    # str1 = str1.split(' ')\n    # str1 = [str1[i].capitalize() for i in range(len(str1)) if str1[i]!= '']\n    # str1 =''.join(str1)\n    # print(str1)\n    # return str1\n    # using replace\n    str1 = str1.split()\n    str1 =''.join([i.capitalize() for i in str1])\n    return str1\n",
        "num_ids": 240
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #print(re.findall(r'[A-Z][^A-Z]*',str1))\n    return re.sub(r'(?<=[a-z0-9])[A-Z]+(?=[a-z])',r' ',str1)\n    \ndef all_capitals_end_with_period(str1):\n    '''\n    Write a function to check whether a given string is a title. \n    A string is a title if it contains at least one capital letter followed by a non-capital letter. \n    You should be able to accept lowercase and uppercase letters.\n    '''\n    #print(re.findall(r'[A-Z][^A-Z]*[A-Z]',str1))\n    return re.findall(r'[A-Z][^A-Z]*[A-Z]',str1)\n    \ndef check_capital_first_word(str1):\n    '''\n    Write a function to check if a given string is a title or not. \n    You should be able to accept lowercase and uppercase letters.\n    '''\n    #print(re.findall(r'[A-Z][^A-Z]*[A-Z]',str1))\n    return re.findall(r'[A-Z][^A-Z]*[A-Z]',str1)\n",
        "num_ids": 64
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.sub(r'(?<=\\w)([A-Z])',r' \\1', str1)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in nums_str:\n        i = int(i)\n        nums.append(i)\n    nums.sort(reverse=True)\n    nums_str_sorted = []\n    for i in nums:\n        i = str(i)\n        nums_str_sorted.append(i)\n    return nums_str_sorted\n",
        "num_ids": 97
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        if num.isdigit():\n            nums.append(int(num))\n        else:\n            nums.append(num)\n    return nums\n",
        "num_ids": 56
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        nums_str[i] = int(nums_str[i])\n    nums_str.sort()\n    for i in range(len(nums_str)):\n        nums_str[i] = str(nums_str[i])\n    print(nums_str)\n",
        "num_ids": 88
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x : [int(i) if i.isdigit() else i for i in re.split(\"(\\d+)\",x)])\n    return nums_str\n",
        "num_ids": 51
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        if num_str[0] in '+-':\n            nums.append(float(num_str))\n        else:\n            nums.append(int(num_str))\n    nums.sort()\n    return nums\n",
        "num_ids": 76
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def is_float(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n",
        "num_ids": 35
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        nums_str[i] = int(nums_str[i])\n    nums_str.sort()\n    return nums_str\n",
        "num_ids": 52
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        nums_str[i] = int(nums_str[i])\n    nums_str.sort()\n    for i in range(len(nums_str)):\n        nums_str[i] = str(nums_str[i])\n    return nums_str\n",
        "num_ids": 86
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # nums_str = [\"1\", \"100\", \"45\", \"2\", \"1\"]\n    nums_str = [x for x in nums_str if x.isdigit()]\n    nums_str = sorted(nums_str)\n    print(nums_str)\n    return(nums_str)\n",
        "num_ids": 81
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Splitting the string\n    nums = nums_str.split()\n    # Converting the strings to integers\n    nums = list(map(int, nums))\n    # Sorting the list\n    nums.sort()\n    # Re-combining the list\n    nums = list(map(str, nums))\n    return''.join(nums)\n",
        "num_ids": 90
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return(test_list.append(test_tup))\n",
        "num_ids": 17
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return None\n",
        "num_ids": 19
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # YOUR CODE STARTS HERE\n    test_list.append(test_tup)\n    # YOUR CODE ENDS HERE\n",
        "num_ids": 31
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # print(\"list:\", test_list, \"\\ntuple:\", test_tup)\n",
        "num_ids": 24
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass #delete this line and replace with your code here\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if not test_list:\n        return test_tup\n    else:\n        return (test_list + test_tup)\n",
        "num_ids": 34
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    elif arr[i] < arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i*2+1) and check_min_heap_helper(arr, i*2+2)\n",
        "num_ids": 82
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # TODO: Implement this function\n    pass\n",
        "num_ids": 14
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Get the index of the first parent\n    parent = i // 2\n",
        "num_ids": 19
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    if i >= 1 and arr[i] > arr[i//2]:\n        return False\n    return True\n",
        "num_ids": 92
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    arr = [1, 2, 3, 4]\n    min_heap_flag = True\n    arr_len = len(arr)\n    for i in range(arr_len//2):\n        if arr[2*i] > arr[2*i + 1]:\n            min_heap_flag = False\n        if 2*i + 2 < arr_len and arr[2*i + 2] > arr[2*i + 1]:\n            min_heap_flag = False\n",
        "num_ids": 116
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= (len(arr) - 1) // 2:\n        return True\n",
        "num_ids": 22
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    parent = i\n    if i == 0:\n        return False\n    if arr[i] > arr[parent//2] and parent*2 < n:\n        return False\n    elif arr[i] > arr[parent] and parent*2 < n:\n        return False\n    if arr[parent] >= arr[parent*2] and parent*2 < n:\n        return False\n    return check_min_heap_helper(arr, parent//2)\n",
        "num_ids": 119
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 0 and i < len(arr):\n        left = 2*i + 1\n        right = 2*i + 2\n        if left < len(arr) and arr[i] < arr[left]:\n            return False\n        if right < len(arr) and arr[i] < arr[right]:\n            return False\n        check_min_heap_helper(arr, left)\n        check_min_heap_helper(arr, right)\n        return True\n    else:\n        return True\n",
        "num_ids": 123
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if i <= 0:\n    #     return True\n    #\n    # if arr[i] >= arr[(i * 2) + 1]:\n    #     return False\n    # if arr[i] > arr[(i * 2) + 2]:\n    #     return False\n    #\n    # return check_min_heap_helper(arr, (i * 2) + 1) and check_min_heap_helper(arr, (i * 2) + 2)\n",
        "num_ids": 117
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] > arr[int((i-1)/2)]:\n        return False\n    return check_min_heap_helper(arr, int((i-1)/2))\n",
        "num_ids": 59
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (jacobsthal_num(n-1) + jacobsthal_num(n-2)) % (n+1)\n",
        "num_ids": 63
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal_recurse(m, n):\n        if m == n:\n            return 1\n        elif m == 0:\n            return 0\n        elif m%2 == 0:\n            return jacobsthal_recurse(m/2, n) + jacobsthal_recurse(m/2 - 1, n)\n        else:\n            return jacobsthal_recurse(m-1, n) - jacobsthal_recurse(m-3, n)\n    return jacobsthal_recurse(1, n)\n",
        "num_ids": 141
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if(n < 2):\n        return 0\n    if(n == 2):\n        return 1\n    if(n == 3):\n        return 1\n    res = [0, 1, 1]\n    for i in range(4, n+1):\n        res.append(res[i-2] + res[i-1])\n    return res[n]\n",
        "num_ids": 88
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 1:\n        return -1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "num_ids": 75
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (jacobsthal_num(n-1) + jacobsthal_num(n-2))\n",
        "num_ids": 45
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        a, b = 1, 3\n        for i in range(n-1):\n            a, b = b, a + 2*b\n        return b\n",
        "num_ids": 66
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    num = [0, 1]\n    if n < 2:\n        return n\n    for i in range(2, n):\n        num.append(num[i - 1] + num[i - 2])\n    return num[-1]\n",
        "num_ids": 60
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j = 1\n    for i in range(2, n):\n        j = (j * 2) % i\n    return j\n",
        "num_ids": 33
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # start with 0 and 1, then get 2, then 3 etc\n    return n**2 - n + 1\n",
        "num_ids": 28
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # base case\n    if len(test_list) < K:\n        return None\n",
        "num_ids": 23
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    def minimum_k_records(test_list, K):\n        '''\n        https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n        '''\n        # store list in set to get rid of duplicates\n        test_list = set(test_list)\n        # store all the unique elements in a list\n        unique_list = []\n        for i in test_list:\n            if i not in unique_list:\n                unique_list.append(i)\n        # sort the list\n        unique_list.sort()\n        # print list\n        print(unique_list)\n        # initialize current list\n        curr_list = []\n        # initialize current list length\n        curr_list_length = 0\n        # initialize minimum length\n        min_length = len(test_list)\n        # initialize minimum length K\n        min_length_K = len(test_list)\n        # initialize number of unique elements\n        unique_elements = len(unique_list)\n        # initialize number of unique elements K\n        unique_elements_K = len(unique_list)\n        # initialize sum of records\n        sum_records = 0\n        # initialize the number of records\n        num_records = 0\n        # initialize current list position\n        current_list_position = 0\n        # print(\"Unique elements: \", unique_elements)\n        # print(\"Unique elements K: \", unique_elements_K)\n        # while loop for elements\n        while unique_elements > 0:\n            # while loop for current list\n            while curr_list_length < K:\n                # if element not already in current list\n                if unique_list[current_list_position] not in curr_list:\n                    # add element to current list\n                    curr_list.append(unique_list[current_list_position])\n                    # increment sum of records\n                    sum_records += 1\n                    # increment number of records\n                    num_records += 1\n                    # increment current list position\n                    current_list_position += 1\n                    # increment current list length\n                    curr_list_length += 1\n                    # update minimum length\n                    if len(curr_list) == K:\n                        min_length = len(curr_list)\n                        # update number of unique elements\n                        unique_elements -= 1\n                        # update number of unique elements K\n                        unique_elements_K -= 1\n                    # if number of unique elements K is 0\n                    if unique_elements_K == 0:\n                        # break out of inner loop\n                        break\n                # if element already in current list\n                else:\n                    # increment current list position\n                    current_list_position += 1\n                    # increment current list length\n                    curr_list_length += 1\n            # if curr list length is K\n            if curr_list_length == K:\n                # break out of outer loop\n                break\n            # if curr list length is not K\n            else:\n                # set minimum length K\n                min_length_K = len(curr_list)\n                # set current list position to 0\n                current_list_position = 0\n                # set current list length to 0\n                curr_list_length = 0\n                # decrement number of unique elements K by 1\n                unique_elements_K -= 1\n                # decrement number of unique elements\n                unique_elements -= 1\n                # set curr list to empty\n                curr_list = []\n                # set sum of records to 0\n                sum_records = 0\n                # set number of records to 0\n                num_records = 0\n        # print minimum length\n        print(\"Minimum length: \", min_length)\n        # print minimum length K\n        print(\"Minimum length K: \", min_length_K)\n        # print sum of records\n        print(\"Sum of records: \", sum_records)\n        # print number of records\n        print(\"Number of records: \", num_records)\n        # print current list\n        print(\"Current list: \", curr_list)\n    # if K is greater than or equal to total number of records\n    if K >= len(test_list):\n        # return original list\n        return test_list\n    # else if K is less than total number of records\n    else:\n        # call minimum_k_records function\n        minimum_k_records(test_list, K)\n",
        "num_ids": 977
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    i = 0\n    j = 0\n    len_list = len(test_list)\n    min_value = 100000\n    index_list = []\n    # i - starting point; j - ending point\n    while i < len_list and j < len_list:\n        # if i and j are less than K then increase j\n        if j - i < K:\n            j += 1\n        else:\n            j += 1\n            # if min_value is greater than list[j] - list[i] then assign min_value to list[j] - list[i]\n            if min_value > test_list[j] - test_list[i]:\n                min_value = test_list[j] - test_list[i]\n                index_list = [i, j]\n            i += 1\n    return index_list\n",
        "num_ids": 198
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    l = len(test_list)\n    test_list.sort()\n    return test_list[:K]\n",
        "num_ids": 30
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K]\n",
        "num_ids": 34
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    my_list = list(test_list)\n    my_list.sort()\n    my_list.reverse()\n    #print(my_list)\n    #print(len(my_list))\n    if len(my_list) >= K:\n        return(my_list[K-1])\n    else:\n        return(my_list[0])\n",
        "num_ids": 88
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    new_list = []\n    for record in test_list:\n        for key, val in record.items():\n            new_list.append((key, val))\n    print(new_list)\n    result_list = []\n    for index, (key, val) in enumerate(sorted(new_list, key=lambda x: x[1])):\n        if index < K:\n            result_list.append(key)\n        else:\n            break\n    return result_list\n",
        "num_ids": 117
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    \n    # import\n    from heapq import *\n    # call\n    k_records = []\n    min_heap = []\n    for record in test_list:\n        # add to heap\n        heappush(min_heap, record)\n        # heap is full\n        if len(min_heap) > K:\n            # pop smallest\n            heappop(min_heap)\n    # get k records\n    while min_heap:\n        k_records.append(heappop(min_heap))\n    \n    return k_records\n",
        "num_ids": 141
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return \"Not enough values in list\"\n    else:\n        return [test_list[0]] + min_k(test_list[1:], K)\n",
        "num_ids": 52
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list, key=lambda record: record[1])\n    return test_list[:K]\n",
        "num_ids": 33
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    r1 = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            r1.append(l1[i])\n    return r1\n",
        "num_ids": 59
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #TODO: complete this function\n    result_list = []\n    for i in range(0, len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            result_list.append(l1[i])\n    return result_list\n",
        "num_ids": 83
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    x = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3:\n            x.append(l1[i])\n    return x\n",
        "num_ids": 56
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = [2, 4, 6, 8, 10, 12]\n    l2 = [4, 6, 8, 10]\n    l3 = [4, 6, 8, 10, 12]\n    # print(l1[1])\n    # print(l2[1])\n    # print(l3[1])\n    # print(list(set(l1) & set(l2) & set(l3)))\n    # print(list(set(l1) & set(l2) & set(l3)))\n    # for x in range(0, len(l1)):\n    #     print(l1[x])\n    #     if l1[x] == l2[x]:\n    #         print(l1[x])\n    #     else:\n    #         print('not common')\n    # print(set(l1) & set(l2) & set(l3))\n",
        "num_ids": 219
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n",
        "num_ids": 23
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_list.append(l1[i])\n    return common_list\n",
        "num_ids": 67
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return []\n",
        "num_ids": 6
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # using dictionary\n    # mydict = {}\n    # for i in l1:\n    #     if i in mydict:\n    #         mydict[i] += 1\n    #     else:\n    #         mydict[i] = 1\n    # for i in l2:\n    #     if i in mydict:\n    #         mydict[i] += 1\n    #     else:\n    #         mydict[i] = 1\n    # for i in l3:\n    #     if i in mydict:\n    #         mydict[i] += 1\n    #     else:\n    #         mydict[i] = 1\n    # common = []\n    # for k, v in mydict.items():\n    #     if v == 3:\n    #         common.append(k)\n    # return common\n",
        "num_ids": 198
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            l.append(l1[i])\n    return l\n",
        "num_ids": 55
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for index in range(len(l1)):\n        if l1[index] in l2[index] and l2[index] in l3[index] and l1[index] in l3[index]:\n            common.append(l1[index])\n    return common\n",
        "num_ids": 73
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n",
        "num_ids": 12
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Edge Case: Empty List\n    if len(numbers) == 0:\n        return None\n    # Edge Case: Only one number in list\n    elif len(numbers) == 1:\n        return None\n    # Define variables to hold second smallest value\n    # Set min_value to first number in list\n    min_value = numbers[0]\n    # Set max_value to last number in list\n    max_value = numbers[-1]\n    # Set second_smallest_value to None\n    second_smallest_value = None\n    # Loop through the list of numbers\n    for number in numbers:\n        # If the current number is smaller than the current min_value\n        # and it's not the min_value itself,\n        # set the current number to the new min_value\n        if number < min_value and number!= min_value:\n            min_value = number\n        # If the current number is larger than the current max_value\n        # and it's not the max_value itself,\n        # set the current number to the new max_value\n        if number > max_value and number!= max_value:\n            max_value = number\n    # If min_value is not None and it's not the max_value\n    if min_value!= max_value:\n        # Set the second_smallest_value to the min_value\n        second_smallest_value = min_value\n    # Return the second_smallest_value\n    return second_smallest_value\n",
        "num_ids": 352
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    lst = sorted(numbers)\n    return lst[1]\n    ",
        "num_ids": 21
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n",
        "num_ids": 12
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n",
        "num_ids": 12
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return min(numbers)\n",
        "num_ids": 36
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return None\n    numbers.sort()\n    return numbers[1]\n    # Your code here\n",
        "num_ids": 32
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    largest = 0\n    second_largest = 0\n    for number in numbers:\n        if number > largest:\n            second_largest = largest\n            largest = number\n        elif number > second_largest:\n            second_largest = number\n    return second_largest\n",
        "num_ids": 63
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    largest_num = numbers[0]\n    second_largest = numbers[0]\n    for num in numbers:\n        if num > largest_num:\n            second_largest = largest_num\n            largest_num = num\n        elif num < second_largest:\n            second_largest = num\n    return second_largest\n",
        "num_ids": 77
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.search(text):\n        return \"found match\"\n    else:\n        return \"No match was found\"\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b+')\n    if pattern.search(text):\n        return \"found match\"\n    else:\n        return \"No match was found\"\ndef text_match_at_least_n(text, n):\n    '''\n    Write a function that matches a string that has an 'a' followed by at least n 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b{' + str(n) + '}')\n    if pattern.search(text):\n        return \"found match\"\n    else:\n        return \"No match was found\"\ndef text_match_exactly_n(text, n):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b{' + str(n) + '}')\n    if pattern.search(text):\n        return \"found match\"\n    else:\n        return \"No match was found\"\ndef text_match_exactly_n_or_more(text, n):\n    '''\n    Write a function that matches a string that has an 'a' followed by at least n 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b+')\n    if pattern.search(text):\n        return \"found match\"\n    else:\n        return \"No match was found\"\ndef text_match_exactly_n_from_end(text, n):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's from the end of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b{' + str(n) + '}$')\n    if pattern.search(text):\n        return \"found match\"\n    else:\n        return \"No match was found\"\ndef text_match_exactly_n_from_start(text, n):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's from the start of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'^.*b{' + str(n) + '}a')\n    if pattern.search(text):\n        return \"found match\"\n    else:\n        return \"No match was found\"\ndef text_match_word_boundaries(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's from the start of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'\\w+')\n    print(pattern.findall(text))\ndef text_match_word_boundaries_from_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's from the start of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'\\w+$')\n    print(pattern.findall(text))\ndef text_match_word_boundaries_everywhere(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's from the start of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'\\w+')\n    print(pattern.findall(text))\ndef text_match_non_word_boundaries(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's from the start of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'\\W')\n    print(pattern.findall(text))\ndef text_match_non_word_boundaries_from_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's from the start of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'\\W')\n    print(pattern.findall(text))\ndef text_match_whole_words(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's from the start of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    print(pattern.findall(text))\ndef text_match_non_whole_words(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's from the start of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'\\B[a-z]+\\B')\n    print(pattern.findall(text))\ndef text_match_match_previous_expression(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's from the start of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'\\B(?<=\\w)([a-z]+)[a-z]{2}(?=\\w)' )\n    print(pattern.findall(text))\ndef text_match_match_previous_expression_from_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's from the start of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'\\B(?<=\\w)([a-z]+)[a-z]{2}(?=\\w)' )\n    print(pattern.findall(text))\ndef text_match_match_previous_expression_non_word_boundaries(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b's from the start of the string. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'\\B(?<=\\W)[a-z]{1}[a-z]{2}(?=\\",
        "num_ids": 40
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r'ab*', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'a.+b'\n    if re.match(pattern, text):\n        print('Matched')\n    else:\n        print('Not Matched')\n",
        "num_ids": 42
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.match(r'a\\b+b', text):\n        return 'Match'\n    else:\n        return 'Not Match'\n",
        "num_ids": 36
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a\\bb+')\n    if pattern.search(text):\n        return \"Found pattern.\"\n    else:\n        return \"Not found.\"\n",
        "num_ids": 45
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab*')\n    result = pattern.finditer(text)\n    for i in result:\n        print(i)\n",
        "num_ids": 40
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.b*')\n    result = pattern.search(text)\n    return result!= None\n",
        "num_ids": 35
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(ab)*a\")\n    if pattern.search(text):\n        return \"Match\"\n    else:\n        return \"No match\"\n",
        "num_ids": 43
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'ab*'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n",
        "num_ids": 41
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r\".*[ab].*\", text)\n",
        "num_ids": 19
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    counter = 0\n    for string in test_list:\n        if string[::-1] in test_list:\n            counter += 1\n    return counter\n",
        "num_ids": 39
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    d = {}\n    for word in test_list:\n        word_rev = word[::-1]\n        if word_rev in d:\n            d[word_rev] += 1\n        else:\n            d[word_rev] = 1\n    return d\n",
        "num_ids": 65
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # time complexity is O(n)\n    count = 0\n    for i in test_list:\n        for j in test_list:\n            if i[::-1] == j:\n                count += 1\n",
        "num_ids": 52
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    print(test_list)\n    print(\"Length of list is {}\".format(len(test_list)))\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i<j and test_list[i][::-1] == test_list[j]:\n                count+=1\n    return count\n",
        "num_ids": 94
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    s = {}\n    for e in test_list:\n        s[e[::-1]] = s.get(e[::-1], 0) + 1\n    print(s)\n",
        "num_ids": 47
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[j] == test_list[i][::-1] and j!= i:\n                print('Pair found - {} and {}'.format(test_list[i], test_list[j]))\n                print('Count - {}'.format(count))\n",
        "num_ids": 95
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_dict = {}\n    for i in test_list:\n        if str(i)[::-1] in reverse_dict:\n            reverse_dict[str(i)[::-1]] += 1\n        else:\n            reverse_dict[str(i)[::-1]] = 1\n    return reverse_dict\n",
        "num_ids": 76
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    string_list = test_list.split(\" \")\n    reversed_strings = []\n    count_of_pairs = 0\n    for string in string_list:\n        reversed_strings.append(string[::-1])\n    for pair in zip(string_list, reversed_strings):\n        if pair[0] == pair[1]:\n            count_of_pairs += 1\n    return count_of_pairs\n",
        "num_ids": 106
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for i in range(len(test_list)):\n        j = len(test_list[i]) - 1\n        while j >= 0:\n            rev_str = test_list[i][j] + test_list[i][j + 1]\n            test_list.append(rev_str)\n            j -= 1\n    print(len(test_list))\n",
        "num_ids": 89
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for list_ in list1:\n        list_tup = tuple(list_)\n        if list_tup in dict:\n            dict[list_tup] += 1\n        else:\n            dict[list_tup] = 1\n    return dict\n",
        "num_ids": 68
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict2 = {}\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == list:\n            tuple_i = tuple(list1[i])\n            if tuple_i in dict2.keys():\n                count = count + 1\n            else:\n                dict2[tuple_i] = 1\n                count = 1\n    for key in dict2.keys():\n        dict2[key] = count\n    return dict2\n",
        "num_ids": 117
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def unique_sublists_helper(list1, new_list):\n        '''\n        Recursive helper function for unique_sublists()\n        '''\n        if new_list == []:\n            return []\n        if isinstance(new_list[0], list):\n            return unique_sublists_helper(list1, new_list[0]) + unique_sublists_helper(list1, new_list[1:])\n        else:\n            return [new_list[0]] + unique_sublists_helper(list1, new_list[1:])\n    # initializing the output dictionary\n    new_list = unique_sublists_helper(list1, list1[0])\n    result = {}\n    # iterating through the list and creating the result dictionary\n    for i in new_list:\n        if i in result.keys():\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n",
        "num_ids": 191
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    for i in list1:\n        for j in i:\n            if j not in list2:\n                list2.append(j)\n    print(list2)\n    d = {}\n    for i in list2:\n        if tuple(i) in d:\n            d[tuple(i)] += 1\n        else:\n            d[tuple(i)] = 1\n    print(d)\n",
        "num_ids": 103
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1.sort()\n    mydict={}\n    for i in list1:\n        mydict[tuple(i)]=list1.count(i)\n    return mydict\n",
        "num_ids": 46
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    final_list = []\n    for list in list1:\n        tuple1 = tuple(list)\n        if tuple1 in final_list:\n            continue\n        else:\n            final_list.append(tuple1)\n    return len(final_list)\n",
        "num_ids": 65
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_set = set()\n    sublist_count = {}\n    for element in list1:\n        sublist_set.add(tuple(element))\n    for element in sublist_set:\n        sublist_count[element] = list1.count(element)\n    return sublist_count\n    \n    \n",
        "num_ids": 79
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(x) : list1.count(x) for x in set(list1)}\n",
        "num_ids": 27
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError('Input should be a list')\n    unique_sublist_dict = {}\n    for item in list1:\n        if type(item) == list:\n            unique_sublist_dict[tuple(item)] = unique_sublist_dict.get(tuple(item), 0) + 1\n    return unique_sublist_dict\n",
        "num_ids": 96
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not num.isdigit():\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        return True if abs(float(num) - int(float(num))) < 0.01 and abs(float(num) - int(float(num))) >= 0 else False\n    except ValueError:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        return num.replace('.','',1).isdecimal() and '.' in num and num.count('.') == 1\n    elif isinstance(num, int) or isinstance(num, float):\n        return num % 1 == 0\n    else:\n        return False\n",
        "num_ids": 77
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.isdigit() and len(num) < 3 and len(num) > 1\n",
        "num_ids": 25
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    x = num.isdecimal()\n    return x\n",
        "num_ids": 16
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.isdecimal()\n    \ndef is_binary(num):\n    '''\n    Write a function to check whether a given string is a binary number with a precision of 2.\n    '''\n    return num.isdigit() and (num == '0' or num == '1')\n    \ndef is_hexadecimal(num):\n    '''\n    Write a function to check whether a given string is a hexadecimal number with a precision of 2.\n    '''\n    return num.isdigit() and (num == '0' or num == '1' or num == '2' or num == '3' or num == '4' or num == '5' or num == '6' or num == '7' or num == '8' or num == '9' or num == 'A' or num == 'B' or num == 'C' or num == 'D' or num == 'E' or num == 'F')\n    \ndef is_octal(num):\n    '''\n    Write a function to check whether a given string is a octal number with a precision of 2.\n    '''\n    return num.isdigit() and (num == '0' or num == '1' or num == '2' or num == '3' or num == '4' or num == '5' or num == '6' or num == '7')\n    \nif __name__ == \"__main__\":\n    \n    #Testing decimal\n    print(\"Testing decimal numbers:\")\n    print(\"\\t5:\", is_decimal('5'))\n    print(\"\\t5.0:\", is_decimal('5.0'))\n    print(\"\\t-5:\", is_decimal('-5'))\n    print(\"\\t-5.0:\", is_decimal('-5.0'))\n    print(\"\\t-5.0.0:\", is_decimal('-5.0.0'))\n    print(\"\\t5.0:\", is_decimal('5.0'))\n    print(\"\\t5:\", is_decimal('5'))\n    print(\"\\t0.5:\", is_decimal('0.5'))\n    print(\"\\t-0.5:\", is_decimal('-0.5'))\n    print(\"\\t0:\", is_decimal('0'))\n    print(\"\\t-0:\", is_decimal('-0'))\n    print(\"\\t5.1:\", is_decimal('5.1'))\n    print(\"\\t0.1:\", is_decimal('0.1'))\n    print(\"\\t-5.1:\", is_decimal('-5.1'))\n    print(\"\\t-0.1:\", is_decimal('-0.1'))\n    print(\"\\t0.0:\", is_decimal('0.0'))\n    print(\"\\t-0.0:\", is_decimal('-0.0'))\n    \n    #Testing binary\n    print(\"\\nTesting binary numbers:\")\n    print(\"\\t0:\", is_binary('0'))\n    print(\"\\t1:\", is_binary('1'))\n    print(\"\\t01:\", is_binary('01'))\n    print(\"\\t10:\", is_binary('10'))\n    print(\"\\t110:\", is_binary('110'))\n    print(\"\\t1010:\", is_binary('1010'))\n    print(\"\\t10101010:\", is_binary('10101010'))\n    print(\"\\t11101100101110:\", is_binary('11101100101110'))\n    \n    #Testing hexadecimal\n    print(\"\\nTesting hexadecimal numbers:\")\n    print(\"\\t0:\", is_hexadecimal('0'))\n    print(\"\\t1:\", is_hexadecimal('1'))\n    print(\"\\t2:\", is_hexadecimal('2'))\n    print(\"\\t3:\", is_hexadecimal('3'))\n    print(\"\\t4:\", is_hexadecimal('4'))\n    print(\"\\t5:\", is_hexadecimal('5'))\n    print(\"\\t6:\", is_hexadecimal('6'))\n    print(\"\\t7:\", is_hexadecimal('7'))\n    print(\"\\t8:\", is_hexadecimal('8'))\n    print(\"\\t9:\", is_hexadecimal('9'))\n    print(\"\\tA:\", is_hexadecimal('A'))\n    print(\"\\tB:\", is_hexadecimal('B'))\n    print(\"\\tC:\", is_hexadecimal('C'))\n    print(\"\\tD:\", is_hexadecimal('D'))\n    print(\"\\tE:\", is_hexadecimal('E'))\n    print(\"\\tF:\", is_hexadecimal('F'))\n    print(\"\\t0:\", is_hexadecimal('0'))\n    print(\"\\t1:\", is_hexadecimal('1'))\n    print(\"\\t2:\", is_hexadecimal('2'))\n    print(\"\\t3:\", is_hexadecimal('3'))\n    print(\"\\t4:\", is_hexadecimal('4'))\n    print(\"\\t5:\", is_hexadecimal('5'))\n    print(\"\\t6:\", is_hexadecimal('6'))\n    print(\"\\t7:\", is_hexadecimal('7'))\n    print(\"\\t8:\", is_hexadecimal('8'))\n    print(\"\\t9:\", is_hexadecimal('9'))\n    print(\"\\tA:\", is_hexadecimal('A'))\n    print(\"\\tB:\", is_hexadecimal('B'))\n    print(\"\\tC:\", is_hexadecimal('C'))\n    print(\"\\tD:\", is_hexadecimal('D'))\n    print(\"\\tE:\", is_hexadecimal('E'))\n    print(\"\\tF:\", is_hexadecimal('F'))\n    print(\"\\t0:\", is_hexadecimal('0'))\n    print(\"\\t1:\", is_hexadecimal('1'))\n    print(\"\\t2:\", is_hexadecimal('2'))\n    print(\"\\t3:\", is_hexadecimal('3'))\n    print(\"\\t4:\", is_hexadecimal('4'))\n    print(\"\\t5:\", is_hexadecimal('5'))\n    print(\"\\t6:\", is_hexadecimal('6'))\n    print(\"\\t7:\", is_hexadecimal('7'))\n    print(\"\\t8:\", is_hexadecimal('8'))\n    print(\"\\t9:\", is_hexadecimal('9'))\n    print(\"\\tA:\", is_hexadecimal('A'))\n    print(\"\\tB:\", is_hexadecimal('B'))\n    print(\"\\tC:\", is_hexadecimal('C'))\n    print(\"\\tD:\", is_hexadecimal('D'))\n    print(\"\\tE:\", is_hexadecimal('E'))\n    print(\"\\tF:\", is_hexadecimal('F'))\n    \n    #Testing octal\n    print(\"\\nTesting octal numbers:\")\n    print(\"\\t0:\", is_octal('0'))\n    print(\"\\t1:\", is_octal('1'))\n    print(\"\\t2:\", is_octal('2'))\n    print(\"\\t3:\", is_octal('3'))\n    print(\"\\t4:\", is_octal('4'))\n    print(\"\\t5:\", is_octal('5'))\n    print(\"\\t6:\", is_octal('6'))\n    print(\"\\t7:\", is_octal('7'))\n    print(\"\\t8:\", is_octal('8'))\n    print(\"\\t9:\", is_octal('9'))\n    print(\"\\t10:\", is_octal('10'))\n",
        "num_ids": 1749
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # if not num:\n    #     return False\n    # if num[0] == '+' or num[0] == '-':\n    #     num = num[1:]\n    # for i in num:\n    #     if i not in '123456789.':\n    #         return False\n    # if num[0] == '.' or num[-1] == '.':\n    #     return False\n    # if num.count('.') > 1:\n    #     return False\n    # return True\n    if not num:\n        return False\n    if num[0] in ('+', '-'):\n        num = num[1:]\n    if '.' not in num:\n        return False\n    for i in num:\n        if i not in '123456789.':\n            return False\n    if num[0] in ('.', '+', '-'):\n        return False\n    if num.count('.') > 1:\n        return False\n    return True\n",
        "num_ids": 236
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    #re.match(r'^\\d+\\.\\d+$', '1.23')\n    pattern = re.compile(r'^-?\\d+\\.\\d+$')\n    match = pattern.match(num)\n    if match:\n        return True\n    return False\n",
        "num_ids": 76
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    i = len(num) - 1\n    while i >= 0:\n        if num[i]!= '.':\n            return False\n        i -= 1\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unq = set(arr)\n    if len(unq) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        print('Invalid Array')\n    else:\n        unique_list = list(set(arr))\n        if len(unique_list) == 1:\n            print('The List contain only one element')\n        else:\n            print('The List doesn\\'t contain only one element')\n",
        "num_ids": 76
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        if arr.count(i) == 1:\n            return i\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    check = arr[0]\n    flag = 0\n    for i in range(1, len(arr)):\n        if check!= arr[i]:\n            flag = 1\n            break\n    if flag == 1:\n        print(f\"List {arr} contains duplicates\")\n    else:\n        print(f\"List {arr} contains only unique element\")\n    return\n",
        "num_ids": 96
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n",
        "num_ids": 13
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #x = set(arr)\n    #if len(x) > 1:\n    #    return False\n    #else:\n    #    return True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True\n",
        "num_ids": 87
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_list = []\n    for x in arr:\n        if x in unique_list:\n            return False\n        else:\n            unique_list.append(x)\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        if arr.count(i) == 1:\n            return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return False\n    else:\n        return True\n",
        "num_ids": 29
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    result = False\n    if len(arr) == 1:\n        result = True\n    else:\n        flag = 0\n        for i in range(0, len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    flag = 1\n                    break\n        if flag == 1:\n            result = False\n        else:\n            result = True\n    return result\n",
        "num_ids": 106
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_30=['4','6','9','11']\n    if monthnum3 in month_30:\n        return 'It contains 30 days'\n    else:\n        return 'It does not contain 30 days'\n",
        "num_ids": 52
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n",
        "num_ids": 97
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthlist = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum3 in monthlist:\n        return True\n    else:\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return 30\n    elif monthnum3 == 2:\n        return 29\n    else:\n        return 28\n",
        "num_ids": 44
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3%2==0 and monthnum3>=1 and monthnum3<=12:\n        return \"30\"\n    elif monthnum3%2!=0 and monthnum3>=1 and monthnum3<=12:\n        return \"31\"\n    else:\n        return \"Not a valid month\"\n",
        "num_ids": 79
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnumber_number = [1,3,5,7,8,10,12]\n    if monthnum3 in monthnumber_number:\n        print(\"It is a valid month.\")\n    else:\n        print(\"It is not a valid month.\")\n        \ncheck_monthnumber_number(2)\n",
        "num_ids": 73
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n",
        "num_ids": 97
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return 30\n    elif monthnum3 == 2:\n        return 28\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return 31\n    else:\n        print(\"Please enter the correct month number\")\n        \n        \ndef print_monthname_number(monthnum4):\n    '''\n    Write a function to print the month name in a year using the given month number from the user.\n    '''\n    if monthnum4 == 1:\n        return \"January\"\n    elif monthnum4 == 2:\n        return \"February\"\n    elif monthnum4 == 3:\n        return \"March\"\n    elif monthnum4 == 4:\n        return \"April\"\n    elif monthnum4 == 5:\n        return \"May\"\n    elif monthnum4 == 6:\n        return \"June\"\n    elif monthnum4 == 7:\n        return \"July\"\n    elif monthnum4 == 8:\n        return \"August\"\n    elif monthnum4 == 9:\n        return \"September\"\n    elif monthnum4 == 10:\n        return \"October\"\n    elif monthnum4 == 11:\n        return \"November\"\n    elif monthnum4 == 12:\n        return \"December\"\n    else:\n        print(\"Please enter the correct month number\")\n        \n        \ndef print_month_calendar(monthnum5, daynum2):\n    '''\n    Write a function to print the calendar of the given month using the given day number.\n    '''\n    if monthnum5 == 1:\n        if daynum2 == 1:\n            print(\" 1\\t2\\t3\\t4\\t5\\t6\\t7\\t8\\t9\\t10\\t11\\t12\\t13\\t14\\t15\\t16\\t17\\t18\\t19\\t20\\t21\\t22\\t23\\t24\\t25\\t26\\t27\\t28\\t29\\t30\\t31\")\n            print(\"\\t\\tSu\\tMo\\tTu\\tWe\\tTh\\tFr\\tSa\\tSo\\t\\t\\t\\t\\t\\t\\t\\t\")\n            print(\"1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\\t1\")\n            print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n            print(\"2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\\t2\")\n            print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n            print(\"3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\\t3\")\n            print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n            print(\"4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\\t4\")\n            print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n            print(\"5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\\t5\")\n            print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n            print(\"6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\\t6\")\n            print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n            print(\"7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\\t7\")\n            print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n            print(\"8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\\t8\")\n            print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n            print(\"9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\\t9\")\n            print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n            print(\"10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\\t10\")\n            print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n            print(\"11\\t11\\t11\\t11\\t11\\t11\\t11\\t11\\t11\\t11\\t11\\",
        "num_ids": 1589
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the given array \n    arr.sort() \n    # initialize variables \n    min_diff = arr[1] - arr[0] \n    # traverse the array and find the minimum difference \n    for i in range(n-1): \n        if min_diff > arr[i+1] - arr[i]: \n            min_diff = arr[i+1] - arr[i] \n    return min_diff \n",
        "num_ids": 107
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    min_diff = arr[1] - arr[0] \n    for i in range(n - 1): \n        if (arr[i + 1] - arr[i] < min_diff): \n            min_diff = arr[i + 1] - arr[i] \n    return min_diff \n",
        "num_ids": 83
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    # sort the array elements\n    arr.sort()\n",
        "num_ids": 17
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n-1):\n        if (arr[i+1] - arr[i] < min_diff):\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n",
        "num_ids": 77
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n): \n        if (arr[i] - arr[i - 1]) < min_diff: \n            min_diff = arr[i] - arr[i - 1] \n    return min_diff \n",
        "num_ids": 81
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    return min(arr) - max(arr)\n",
        "num_ids": 14
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # stores the minimum difference \n    min_diff = arr[1] - arr[0] \n    for i in range(0, n-1): \n        # Find the minimum element in remaining  \n        # unsorted array \n        for j in range(i + 1, n): \n            if (arr[j] - arr[i]) < min_diff: \n                min_diff = arr[j] - arr[i] \n    return min_diff \n    \ndef find_min_diff_no_extra_space(arr, n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array without using any additional data structure. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1:\n        return 0\n    arr.sort() \n    return min(arr[n-1] - arr[0], arr[n-2] - arr[1]) \n    \ndef find_triplet(arr, n): \n    '''\n    Write a python function to find the triplet in a given array that sum up to a given value. https://www.geeksforgeeks.org/find-triplet-sum-zero-given-array/\n    '''\n    # initialize sum and set three indices \n    sum, arr_sum = 0, 0\n    i, j, k = 0, 0, n - 1\n    \n    # while the sum is less than zero \n    while (sum < 0): \n        # for i < j < k \n        # update sum \n        sum = arr[i] + arr[j] + arr[k] \n        i += 1\n        j += 1\n        k -= 1\n        \n        # if sum becomes greater than zero \n        if sum > 0: \n            sum = 0\n            # update indices for next run \n            arr_sum = arr[i] + arr[j] + arr[k] \n            i += 1\n            j += 1\n            k -= 1\n            \n    # return the indices \n    return (arr_sum)\n    \ndef find_sum_of_three_elements(arr, n, sum): \n    '''\n    Write a python function to find the sum of three elements such that sum = 0. https://www.geeksforgeeks.org/sum-of-three-elements-such-that-sum-equals-zero/\n    '''\n    # sort the array \n    arr.sort() \n    \n    # initialize three indices \n    # for loop \n    for i in range(0, n - 2): \n        # initialize start and end \n        # pointers \n        start = i + 1\n        end = n - 1\n        \n        # while start is smaller than end \n        while (start < end): \n            \n            # check if sum is found, update start \n            # if sum is found, update start \n            if (arr[i] + arr[start] + arr[end] == sum): \n                return (arr[i] + arr[start] + arr[end]) \n            \n            # move either start or end \n            if (arr[i] + arr[start] + arr[end] < sum): \n                start += 1\n            else: \n                end -= 1\n    return (-1) \n    \ndef find_minimum_in_rotated_array(arr, n): \n    '''\n    Write a python function to find the minimum element in a given rotated array. https://www.geeksforgeeks.org/find-minimum-in-a-rotated-array/\n    '''\n    # first element is minimum \n    if (n == 0): \n        return arr[0] \n        \n    return min(arr[0], arr[n-1]) \n    \ndef find_k_distinct_elements(arr, k): \n    '''\n    Write a python function to find the k distinct elements in an array. https://www.geeksforgeeks.org/find-k-distinct-elements-in-an-array/\n    '''\n    n = len(arr) \n    distinct_elements = 0\n    # if distinct_elements == k \n    if (k == distinct_elements): \n        return k \n    \n    # traverse the array \n    for i in range(n): \n        \n        # if not visited before \n        if (arr[i] == -1): \n            \n            # mark as visited \n            arr[i] = distinct_elements \n            distinct_elements += 1\n            \n            # if distinct_elements == k \n            if (distinct_elements == k): \n                return k \n        \n    # return k if distinct_elements == k \n    return k \n    \ndef find_number_of_triples(arr, n, k): \n    '''\n    Write a python function to find the number of distinct triplets such that sum of elements in the triplet equals to k. https://www.geeksforgeeks.org/find-number-of-triples-sum-k/\n    '''\n    # initialize count \n    count = 0\n    \n    # loop over the elements in array \n    for i in range(0, n - 2): \n        \n        # initialize start and end \n        start = i + 1\n        end = n - 1\n        \n        # loop to find triplets \n        while (start < end): \n            \n            # calculate sum \n            sum = arr[i] + arr[start] + arr[end] \n            \n            # if sum is greater than k \n            # decrement end and update \n            # start such that the triplet is \n            # valid \n            if (sum > k): \n                end -= 1\n            \n            # if sum is less than k \n            # increment start and update \n            # end such that the triplet is valid \n            elif (sum < k): \n                start += 1\n            \n            # if sum is equal to k \n            # update count \n            else: \n                count += 1\n                start += 1\n                end -= 1\n                \n    return count \n    \ndef find_number_of_triples_no_extra_space(arr, n, k): \n    '''\n    Write a python function to find the number of distinct triplets such that sum of elements in the triplet equals to k. https://www.geeksforgeeks.org/find-number-of-triples-sum-k/\n    '''\n    # initialize count \n    count = 0\n    \n    # loop over the elements in array \n    for i in range(0, n - 2): \n        \n        # initialize start and end \n        start = i + 1\n        end = n - 1\n        \n        # loop to find triplets \n        while (start < end): \n            \n            # calculate sum \n            sum = arr[i] + arr[start] + arr[end] \n            \n            # if sum is greater than k \n            # decrement end and update \n            # start such that the triplet is \n            # valid \n            if (sum > k): \n                end -= 1\n            \n            # if sum is less than k \n            # increment start and update \n            # end such that the triplet is valid \n            elif (sum < k): \n                start += 1\n            \n            # if sum is equal to k \n            # update count \n            else: \n                count += 1\n                start += 1\n                end -= 1\n                \n    return count \n    \ndef find_missing_number(arr, n): \n    '''\n    Write a python function to find the missing number in an array. https://www.geeksforgeeks.org/find-missing-number-in-an-array/\n    '''\n    # sum of n numbers is 2n \n    # sum of array elements is \n    # sum - sum of n numbers \n    # missing number is the sum of \n    # the array elements - n * (n+1) / 2 \n    total = 0\n    \n    # calculate the sum of all \n    # array elements \n    for i in range(0, n): \n        total += arr[i] \n        \n    # return the sum of array \n    # elements - n * (n+",
        "num_ids": 122
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    mini = arr[1] - arr[0]\n    for i in range(1,n):\n        diff = arr[i] - arr[i-1]\n        if(diff < mini):\n            mini = diff\n    return mini\n",
        "num_ids": 64
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[1] - arr[0]\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if (arr[j] - arr[i] < min_diff): \n                min_diff = arr[j] - arr[i] \n    return min_diff\n",
        "num_ids": 84
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    ans = arr[1] - arr[0]\n    for i in range(n): \n        j = i + 1\n        while(j < n): \n            ans = min(ans, arr[j] - arr[i])\n            j += 1\n    return ans\n",
        "num_ids": 73
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    print(ctr)\n    return ctr\n",
        "num_ids": 39
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number = len(str)\n    return number\n",
        "num_ids": 14
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count = count + 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            ctr+=1\n    return ctr\n",
        "num_ids": 40
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\ndef sqr(num):\n    '''\n    Write a python function to return the square of a number.\n    '''\n    return num**2\ndef sum_of_numbers(n):\n    '''\n    Write a python function to return the sum of first n numbers.\n    '''\n    return (n*(n+1))/2\ndef avg_of_numbers(n):\n    '''\n    Write a python function to return the average of first n numbers.\n    '''\n    return sum_of_numbers(n)/n\ndef triangle_area(a,b,c):\n    '''\n    Write a python function to return the area of a triangle (Heron's formula).\n    '''\n    return (a*b*c)/(4*sqr(sqr(a)+sqr(b)+sqr(c)))\ndef polygon_area(a,b,c,d):\n    '''\n    Write a python function to return the area of a polygon (Heron's formula).\n    '''\n    return triangle_area(a,b,c)+triangle_area(a,b,d)\ndef f_to_c(f):\n    '''\n    Write a python function to return celsius from fahrenheit.\n    '''\n    return (f-32)*5/9\ndef c_to_f(c):\n    '''\n    Write a python function to return fahrenheit from celsius.\n    '''\n    return (c*9/5)+32\ndef c_to_k(c):\n    '''\n    Write a python function to return kelvin from celsius.\n    '''\n    return c+273.15\ndef k_to_c(k):\n    '''\n    Write a python function to return celsius from kelvin.\n    '''\n    return k-273.15\ndef km_to_mi(km):\n    '''\n    Write a python function to convert kilometres to miles.\n    '''\n    return km/1.609\ndef mi_to_km(mi):\n    '''\n    Write a python function to convert miles to kilometres.\n    '''\n    return mi*1.609\ndef mps_to_fps(mps):\n    '''\n    Write a python function to convert metres per second to frames per second.\n    '''\n    return mps*30\ndef fps_to_mps(fps):\n    '''\n    Write a python function to convert frames per second to metres per second.\n    '''\n    return fps/30\ndef volume(rad,h):\n    '''\n    Write a python function to calculate the volume of a sphere.\n    '''\n    return (4/3)*pi*rad**3*h\ndef temperature_change(temp,speed,time):\n    '''\n    Write a python function to calculate the change in temperature.\n    '''\n    return (temp-32)*speed*5/9*time\ndef pressure(a,b,c):\n    '''\n    Write a python function to calculate the pressure.\n    '''\n    return (b**2)/(a*c)\ndef age(birth,death):\n    '''\n    Write a python function to calculate the age of an individual.\n    '''\n    return death-birth\ndef e_to_k(e):\n    '''\n    Write a python function to calculate the temperature in kelvin.\n    '''\n    return e*1.602176565\ndef k_to_e(k):\n    '''\n    Write a python function to convert kelvin to egelectrons.\n    '''\n    return k/1.602176565\ndef k_to_c(k):\n    '''\n    Write a python function to convert kelvin to celsius.\n    '''\n    return k-273.15\ndef c_to_k(c):\n    '''\n    Write a python function to convert celsius to kelvin.\n    '''\n    return c+273.15\ndef k_to_f(k):\n    '''\n    Write a python function to convert kelvin to fahrenheit.\n    '''\n    return (k*9/5)+32\ndef f_to_k(f):\n    '''\n    Write a python function to convert fahrenheit to kelvin.\n    '''\n    return (f-32)*5/9+273.15\ndef speed_of_light(mps):\n    '''\n    Write a python function to calculate the speed of light in metres per second.\n    '''\n    return 3*10**8\ndef pressure_of_air(a,b,c,d):\n    '''\n    Write a python function to calculate the pressure of air.\n    '''\n    return (a*b)/(c*d)\ndef planck_constant(e):\n    '''\n    Write a python function to calculate the Planck constant.\n    '''\n    return e*6.62607015*10**-34\ndef wave_length(p):\n    '''\n    Write a python function to calculate the wavelength of a wave.\n    '''\n    return (2*pi*p)/3.5*10**8\ndef atomic_mass(m):\n    '''\n    Write a python function to calculate the mass of an atom in grams.\n    '''\n    return m*1.6605*10**-27\ndef amu(m):\n    '''\n    Write a python function to convert grams to amu.\n    '''\n    return m/1.6605*10**-27\ndef mass_of_air(rho,velocity):\n    '''\n    Write a python function to calculate the mass of air.\n    '''\n    return rho*velocity*velocity\ndef volume_of_air(temperature,density,velocity):\n    '''\n    Write a python function to calculate the volume of air.\n    '''\n    return mass_of_air(density,velocity)/(temperature*287.058)\ndef gravitational_acceleration(mass,acceleration):\n    '''\n    Write a python function to calculate the gravitational acceleration.\n    '''\n    return mass*acceleration\ndef gravitational_acceleration_on_earth(mass,acceleration):\n    '''\n    Write a python function to calculate the gravitational acceleration on earth.\n    '''\n    return mass*acceleration/6.67*10**-11\ndef density_of_air(p,r):\n    '''\n    Write a python function to calculate the density of air.\n    '''\n    return p/r/287.058\ndef density_of_water(rho,T,p,x):\n    '''\n    Write a python function to calculate the density of water.\n    '''\n    return rho*(1-x)+x*(p/(r*T))\ndef temperature_of_water(p,r,T,x):\n    '''\n    Write a python function to calculate the temperature of water.\n    '''\n    return r*T*(1-x)+p*x/(r*287.058)\ndef enthalpy(m,v,p):\n    '''\n    Write a python function to calculate the enthalpy of a liquid.\n    '''\n    return m*v*v/2+p\ndef enthalpy_of_water(p,v):\n    '''\n    Write a python function to calculate the enthalpy of water.\n    '''\n    return p*v*v/2\ndef enthalpy_of_air(p,v):\n    '''\n    Write a python function to calculate the enthalpy of air.\n    '''\n    return p*v*v/2\ndef heat_capacity(m,v,p):\n    '''\n    Write a python function to calculate the heat capacity of a liquid.\n    '''\n    return m*v*v+p\ndef heat_capacity_of_water(r,T,p,v):\n    '''\n    Write a python function to calculate the heat capacity of water.\n    '''\n    return r*T*(1-v)+p*v\ndef heat_capacity_of_air(r,T,v):\n    '''\n    Write a python function to calculate the heat capacity of air.\n    '''\n    return r*T*(1-v)\ndef enthalpy_of_change(m,v,p,delta):\n    '''\n    Write a python function to calculate the enthalpy of change.\n    '''",
        "num_ids": 1
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n%2!=0:\n        return False\n    if n==0:\n        return 0\n    n=n//2\n    c=0\n    for i in range(1,n+1):\n        if i%2==0:\n            c+=1\n    return c\ndef is_polite1(n):\n    # Write a function to find nth polite number.\n    # Implementing the logic discussed in the post \n    # https://www.geeksforgeeks.org/nth-polite-number/\n    # import math \n    # res = 0 \n    # while(n): \n    #     res += math.floor(math.log2(n)) \n    #     n = n >> 1\n    # return res \n    return math.floor(math.log2(n))\ndef count_sets(arr,n):\n    '''\n    Write a function to count the number of sets possible for a given array\n    using Dynamic Programming\n    '''\n    # import numpy as np \n    # table = np.zeros((n+1,n+1))\n    # for i in range(n+1):\n    #     for j in range(n+1):\n    #         if i==0:\n    #             table[i][j]=0\n    #         elif j==0:\n    #             table[i][j]=1\n    #         else:\n    #             if arr[i-1]<=j:\n    #                 table[i][j]=table[i-1][j-arr[i-1]]+table[i-1][j]\n    #             else:\n    #                 table[i][j]=table[i-1][j]\n    # return table[n][n]\n    # storing last row in table\n    table = [0 for i in range(n+1)]\n    # storing last column in table\n    # all numbers are set\n    for i in range(n+1):\n        table[i] = 1\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if j>=arr[i-1]:\n                table[i]+=table[i-1]\n    return table[n]\ndef count_sets_dp(arr,n):\n    # import numpy as np\n    # table = np.zeros((n+1,n+1))\n    table = [[0 for i in range(n+1)] for j in range(n+1)]\n    # storing last row in table\n    for i in range(n+1):\n        table[i][0]=1\n    # storing last column in table\n    # all numbers are set\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if j>=arr[i-1]:\n                table[i][j]=table[i-1][j-arr[i-1]]+table[i-1][j]\n            else:\n                table[i][j]=table[i-1][j]\n    return table[n][n]\ndef find_smallest_string(str1,str2):\n    # str1 and str2 are strings\n    n1,n2=len(str1),len(str2)\n    # import numpy as np\n    # table = np.zeros((n1+1,n2+1))\n    table = [[0 for i in range(n2+1)] for j in range(n1+1)]\n    for i in range(n1+1):\n        table[i][0]=i\n    for j in range(n2+1):\n        table[0][j]=j\n    # print(table)\n    for i in range(1,n1+1):\n        for j in range(1,n2+1):\n            # print(str1[i-1],str2[j-1])\n            # print(i,j,str1[i-1],str2[j-1])\n            if str1[i-1]==str2[j-1]:\n                table[i][j]=1+table[i-1][j-1]\n            else:\n                table[i][j]=max(table[i-1][j],table[i][j-1])\n    # print(table)\n    return table[n1][n2]\ndef find_smallest_string_dp(str1,str2):\n    # import numpy as np\n    # table = np.zeros((n1+1,n2+1))\n    table = [[0 for i in range(n2+1)] for j in range(n1+1)]\n    for i in range(n1+1):\n        table[i][0]=i\n    for j in range(n2+1):\n        table[0][j]=j\n    for i in range(1,n1+1):\n        for j in range(1,n2+1):\n            if str1[i-1]==str2[j-1]:\n                table[i][j]=1+table[i-1][j-1]\n            else:\n                table[i][j]=1+min(table[i-1][j],table[i][j-1])\n    return table[n1][n2]\ndef longest_subsequence(arr,n,k):\n    # arr is a list of integers\n    # n is the number of elements in arr\n    # k is the value k\n    # import numpy as np\n    # table = np.zeros((n+1,k+1))\n    table = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(n+1):\n        table[i][0]=1\n    for j in range(1,k+1):\n        table[0][j]=0\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            table[i][j] = table[i-1][j-1]\n            if arr[i-1]<=j:\n                table[i][j] = table[i][j]+table[i-1][j-arr[i-1]]\n            else:\n                table[i][j] = table[i][j]\n    return table[n][k]\ndef longest_subsequence_dp(arr,n,k):\n    # import numpy as np\n    # table = np.zeros((n+1,k+1))\n    table = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(n+1):\n        table[i][0]=1\n    for j in range(1,k+1):\n        table[0][j]=0\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            table[i][j] = table[i-1][j-1]\n            if arr[i-1]<=j:\n                table[i][j] = table[i][j]+table[i-1][j-arr[i-1]]\n            else:\n                table[i][j] = table[i][j]\n    return table[n][k]\ndef minimum_edit_distance(str1,str2,n,m):\n    # import numpy as np\n    # table = np.zeros((n+1,m+1))\n    table = [[0 for i in range(m+1)] for j in range(n+1)]\n    for i in range(n+1):\n        table[i][0]=i\n    for j in range(m+1):\n        table[0][j]=j\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if str1[i-1]==str2[j-1]:\n                table[i][j]=1+table[i-1][j-1]\n            else:\n                table[i][j]=1+min(table[i-1][j-1],table[i-1][j],table[i][j-1])\n    return table[n][m]\ndef minimum_edit_distance_dp(str1,str2,n,m):\n    # import numpy as np\n    # table = np.zeros((",
        "num_ids": 1755
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1: \n        return 0\n    if n%2==0: \n        return 2*is_polite(n//2) \n    return 2*is_polite(n//2)+1\n",
        "num_ids": 54
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n<=1):\n        return False \n    if(n==2):\n        return True \n    if(n%2==0):\n        return False \n    max_divisor = int(math.floor(math.sqrt(n)))\n    for i in range(3,max_divisor+1,2):\n        if(n%i==0):\n            return False \n    return True\n",
        "num_ids": 103
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n%2==0:\n        return False\n    l=[0,1,2]\n    count=0\n    while count<n:\n        count+=3\n        l.append(count)\n        count+=1\n        l.append(count)\n        count+=1\n    return l[n]\n",
        "num_ids": 75
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return (n+1)**2 + n*(n+1)//2\ndef is_polite_by_tripple_sum(n):\n    '''\n    Write a function to find nth polite number by tripple sum.\n    '''\n    return n**3 + n**2 + n + 1\ndef is_polite_by_fab(n):\n    '''\n    Write a function to find nth polite number by fab\n    '''\n    return math.sqrt(8*n+1)-1\ndef is_polite_by_poly(n):\n    '''\n    Write a function to find nth polite number by poly\n    '''\n    return n**3 + n**2 + n + 1\n",
        "num_ids": 16
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count=0 \n    i=1\n    while(count<=n): \n        if is_polite_number(i): \n            count+=1\n        i+=1 \n    return i \ndef is_polite_number(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count =0 \n    if n%2==0: \n        return False\n    for i in range(3,int(math.sqrt(n))+1,2): \n        if n%i==0: \n            return False\n    return True \n",
        "num_ids": 65
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def get_pow(n):\n        if(n==0):\n            return 0\n        else:\n            return int(math.log(n, 2))+1\n        \n    def is_polite_number(n, d): \n        if(n==0): \n            return 0\n        pow_d = get_pow(d)\n        return is_polite_number(n//2, pow_d) + d*(n%2)\n    \n    def get_polite_number(n):\n        return is_polite_number(n, 2)\n    \n    return get_polite_number(n)\n",
        "num_ids": 155
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==0: \n        return 1\n    elif n==1: \n        return 2\n    else: \n        return 2*is_polite(n-1)+1\ndef max_digit(num):\n    return max(list(map(int,list(str(num)))))\ndef digital_root(n): \n    '''\n    Write a function to find digital root of a number.\n    '''\n    while n>9:\n        n=sum(list(map(int,list(str(n)))))\n    return n\ndef end_other(a, b):\n    '''\n    Write a function to return the longest common ending of two strings\n    '''\n    la=len(a)\n    lb=len(b)\n    i,j=0,0\n    max_len=0\n    while i<la and j<lb:\n        if a[i]==b[j]:\n            max_len=max_len+1\n            i=i+1\n            j=j+1\n        else:\n            break\n    return a[i-max_len:i]==b[j-max_len:j]\ndef longest_palindrome(s):\n    '''\n    Write a function that returns the longest palindromic substring.\n    '''\n    def expand(left,right):\n        while left>=0 and right<=len(s) and s[left]==s[right-1]:\n            left=left-1\n            right=right+1\n        return s[left+1:right-1]\n    if len(s)<2 or s==s[::-1]:\n        return s\n    result=''\n    for i in range(len(s)-1):\n        result=max(result,expand(i,i+1),expand(i,i+2),key=len)\n    return result\ndef absolute_difference(arr1,arr2):\n    '''\n    Write a function that returns the absolute difference between two arrays.\n    '''\n    return sum(list(map(lambda x,y:abs(x-y),arr1,arr2)))\ndef max_subarray_sum(arr): \n    '''\n    Write a function to find the maximum sum of a subarray of size K\n    '''\n    def max_sum(arr,k):\n        return sum(sorted(arr)[len(arr)-k:len(arr)])\n    if len(arr)<k:\n        return max(arr)\n    return max(max_sum(arr,i) for i in range(1,k+1))\ndef add_digits(n): \n    '''\n    Write a function to add all digits of a number\n    '''\n    return sum(list(map(int,list(str(n)))))\ndef find_max_path(mat,i,j):\n    if i>=len(mat) or j>=len(mat[0]):\n        return 0\n    return max(mat[i][j]+find_max_path(mat,i+1,j),mat[i][j]+find_max_path(mat,i,j+1))\ndef find_max_hourglass(arr,i,j):\n    return max(arr[i][j],arr[i][j+1],arr[i][j+2],arr[i+1][j+1],arr[i+2][j],arr[i+2][j+1],arr[i+2][j+2])\ndef coin_change(arr,target):\n    if target==0:\n        return 0\n    if min(arr)>target:\n        return -1\n    dp=[float('inf') for _ in range(target+1)]\n    dp[0]=0\n    for i in range(len(arr)):\n        for j in range(target+1):\n            if j>=arr[i]:\n                dp[j]=min(dp[j],dp[j-arr[i]]+1)\n    if dp[target]==float('inf'):\n        return -1\n    return dp[target]\ndef sub_sets(arr,n):\n    '''\n    Write a function to return all subsets of a set.\n    '''\n    if n<1:\n        return []\n    sub=[]\n    for i in range(1,n+1):\n        sub.append(arr[:i])\n    return sub+sub_sets(arr[1:],n-1)\ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef all_possible_substrings(s):\n    '''\n    Write a function to return all possible substrings of a string.\n    '''\n    def substrings(s,left,right):\n        if left==right:\n            return [s[left:right]]\n        return substrings(s,left,right+1) + [s[left:right]+i for i in substrings(s,left+1,right)]\n    return substrings(s,0,len(s))\ndef find_all_subsets(arr):\n    '''\n    Write a function that finds all subsets of an array.\n    '''\n    return all_subsets(arr,0,[])\ndef all_subsets(arr,i,out):\n    if i==len(arr):\n        return [out]\n    out1=out[:]\n    out1.append(arr[i])\n    return all_subsets(arr,i+1,out)+all_subsets(arr,i+1,out1)\ndef reverse_string(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    return s[::-1]\ndef contains_duplicates(arr):\n    '''\n    Write a function that checks whether the array contains duplicates.\n    '''\n    if len(arr)<2:\n        return False\n    s=set(arr)\n    return False if len(s)==len(arr) else True\ndef reverse_string_pythonic(s):\n    '''\n    Write a pythonic solution to reverse a string.\n    '''\n    return ''.join(reversed(s))\ndef first_occurence(arr,val):\n    '''\n    Write a function to return the first occurence of a value from an array\n    '''\n    if len(arr)==0:\n        return -1\n    if val==arr[0]:\n        return 0\n    return first_occurence(arr[1:],val)\ndef is_palin(arr):\n    '''\n    Write a function to check if a given array is a palindrome.\n    '''\n    if len(arr)==1:\n        return True\n    return arr[0]==arr[-1] and is_palin(arr[1:-1])\ndef is_palin(arr):\n    '''\n    Write a function to check if a given array is a palindrome.\n    '''\n    if len(arr)==1:\n        return True\n    return arr[0]==arr[-1] and is_palin(arr[1:-1])\ndef max_element(arr):\n    '''\n    Write a function to return the maximum element in an array.\n    '''\n    if len(arr)==1:\n        return arr[0]\n    return max(max_element(arr[1:]),arr[0])\ndef find_first_occurence(arr,target):\n    '''\n    Write a function to return the index of the first occurence of target in the array\n    '''\n    if len(arr)==0:\n        return -1\n    if arr[0]==target:\n        return 0\n    return find_first_occurence(arr[1:],target)\ndef build_array(target,n):\n    '''\n    Write a function to create an array using all 1's.\n    '''\n    if n==0:\n        return []\n    return build_array(target,n-1)+[1]\ndef all_binary_strings(n):\n    '''\n    Write a function to print all binary strings.\n    ''",
        "num_ids": 15
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return n/2 + is_polite(n/2)\n    else:\n        return 3 * n + 1 + is_polite(n+1)\n",
        "num_ids": 60
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #This function returns the nth number of the sequence of numbers \n    #The function takes argument as n, the number of numbers to be included in the sequence\n    #As the sequence is infinite, we need to stop execution after nth number is returned\n    #This function uses the ancient method of finding the sequence. \n    #The function takes 3 arguments\n    #Arg 1: m, the first number in the sequence. It can be any number \n    #Arg 2: a, the common difference in the sequence.\n    #Arg 3: n, the number of terms to be included in the sequence. \n    #This value should be positive.\n    #If the number of terms is not positive, the function returns -1\n    #The function computes the sum of the first m+1 numbers \n    #and divides it by the common difference, n. The common difference is then updated accordingly. \n    #The function returns the result\n",
        "num_ids": 210
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        pairs.append((l1[i],l1[i+1]))\n    return pairs\n",
        "num_ids": 60
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        pair = [l1[i], l1[i + 1]]\n        result.append(pair)\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # [1, 2, 3, 4, 5] => [(1, 2), (2, 3), (3, 4), (4, 5)]\n    l1 = list(l1)\n    print(l1)\n    new_list = []\n    for i in range(len(l1) - 1):\n        new_list.append((l1[i], l1[i + 1]))\n    return new_list\n",
        "num_ids": 103
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1) if i%2==0]\n",
        "num_ids": 37
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    l = l1[:]\n    pairs = []\n    \n    for i in range(len(l)-1):\n        pairs.append([l[i],l[i+1]])\n    \n    return pairs\n    \n    ",
        "num_ids": 60
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n",
        "num_ids": 30
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n    \ndef reverse_dict(d):\n    '''\n    Given a dictionary d, return a new dictionary in which the values of d are the keys of d and the keys of d are the values of d.\n    '''\n    d1 = dict()\n    for key in d:\n        d1[d[key]] = key\n    return d1\n    \n    \ndef fib_seq(n):\n    '''\n    Write a function to return the nth number in the Fibonacci sequence.\n    '''\n    a,b = 1,1\n    for i in range(n-1):\n        a,b = b, a+b\n    return a\n        \ndef draw_rect(draw, x, y, w, h, color):\n    '''\n    Write a function to draw a rectangle in the x, y coordinate of the given width and height.\n    '''\n    #draw.rectangle((x,y,x+w,y+h), fill=color, outline='black')\n    draw.rectangle((x,y,x+w,y+h), fill=color)\n    \ndef draw_circle(draw, x, y, radius, color):\n    '''\n    Write a function to draw a circle of the given radius and center in the x, y coordinate.\n    '''\n    #draw.ellipse((x-radius,y-radius,x+radius,y+radius), fill=color, outline='black')\n    draw.ellipse((x-radius,y-radius,x+radius,y+radius), fill=color)\n    \ndef draw_triangle(draw, x, y, w, h, color):\n    '''\n    Write a function to draw a triangle of the given width and height in the x, y coordinate.\n    '''\n    draw.polygon(((x,y),(x+w/2, y+h),(x+w,y)), fill=color)\n    \ndef draw_line(draw, x0, y0, x1, y1, color):\n    '''\n    Write a function to draw a line in the x0, y0 coordinate and the x1, y1 coordinate.\n    '''\n    draw.line((x0,y0,x1,y1), fill=color)\n    \ndef draw_polygon(draw, points, color):\n    '''\n    Write a function to draw a polygon with the given points.\n    '''\n    draw.polygon(points, fill=color)\n    \ndef draw_line_list(draw, line_list, color):\n    '''\n    Write a function to draw a list of lines given a list of x,y coordinates.\n    '''\n    for line in line_list:\n        draw.line(line, fill=color)\n        \ndef draw_line_list_dashed(draw, line_list, color):\n    '''\n    Write a function to draw a list of dashed lines given a list of x,y coordinates.\n    '''\n    for line in line_list:\n        draw.line(line, fill=color, dash=(1,2))\n        \ndef draw_polygon_list(draw, points_list, color):\n    '''\n    Write a function to draw a list of polygons given a list of lists of points.\n    '''\n    for points in points_list:\n        draw.polygon(points, fill=color)\n        \ndef draw_turtle(draw, x, y, r, color):\n    '''\n    Write a function to draw a turtle on the given x, y coordinate with the given radius and color.\n    '''\n    draw.up()\n    draw.setpos(x,y-r)\n    draw.down()\n    draw.color(color)\n    draw.circle(r)\n    \ndef draw_turtle_list(draw, turtle_list, color):\n    '''\n    Write a function to draw a list of turtles on the given x, y coordinate with the given radius and color.\n    '''\n    for t in turtle_list:\n        draw_turtle(draw, t[0], t[1], t[2], color)\n        \ndef draw_polar_line(draw, r, theta, x, y, angle, length, color):\n    '''\n    Write a function to draw a line given the r, theta, x, y coordinate, angle, length and color.\n    '''\n    draw_line_list_dashed([(x+r*math.cos(theta+angle), y+r*math.sin(theta+angle)), (x+r*math.cos(theta+angle+2*math.pi*length/360), y+r*math.sin(theta+angle+2*math.pi*length/360))], color)\n    \ndef draw_polar_polygon(draw, r, theta, x, y, angle, length, color):\n    '''\n    Write a function to draw a polygon given the r, theta, x, y coordinate, angle, length and color.\n    '''\n    draw_polygon_list([[(x+r*math.cos(theta+angle), y+r*math.sin(theta+angle)), (x+r*math.cos(theta+angle+2*math.pi*i/360), y+r*math.sin(theta+angle+2*math.pi*i/360))] for i in range(360/length)], color)\n",
        "num_ids": 99
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        l.append((l1[i], l1[i+1]))\n    return l\n",
        "num_ids": 44
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = ['a','b','c','d','e']\n    l1.sort()\n    s = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        else:\n            s.append([l1[i],l1[i+1]])\n    return s\n",
        "num_ids": 85
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs=[]\n    for i in range(0,len(l1)-1):\n        pairs.append([l1[i],l1[i+1]])\n    return pairs\n",
        "num_ids": 48
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count=0\n    #n = len(arr)\n    #for i in range(0, n):\n    #    for j in range(i + 1, n):\n    #        if (arr[i] + arr[j] == sum):\n    #            count += 1\n    for i in arr:\n        for j in arr:\n            if (i + j == sum):\n                count += 1\n    return count\n",
        "num_ids": 101
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n",
        "num_ids": 55
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr_size = len(arr)\n    count = 0\n    for i in range(0, arr_size - 1):\n        for j in range(i + 1, arr_size):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # Hash table to store the pair counts\n    hash_map = {}\n    for i in range(len(arr)):\n        hash_map[arr[i]] = i\n",
        "num_ids": 43
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) < 2:\n        return 0\n    if len(arr) == 2:\n        if (arr[0] + arr[1]) == sum:\n            return 1\n        else:\n            return 0\n    cnt = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j]) == sum:\n                cnt += 1\n    return cnt\n",
        "num_ids": 116
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    # create a dictionary, looping through every element of the list\n    dict = {}\n    for i in range(len(arr)):\n        #if the difference of sum and the current element is in the dictionary, increment the count\n        if sum - arr[i] in dict:\n            count += 1\n        #if the current element is not in the dictionary, add it\n        if arr[i] not in dict:\n            dict[arr[i]] = 1\n    return count\n    \n",
        "num_ids": 118
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if (i!= j) and (arr[i] + arr[j] == sum):\n                pairs += 1\n",
        "num_ids": 61
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    hash_map = {}\n    count = 0\n",
        "num_ids": 14
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l=list(set(li1)-set(li2))\n    l.sort()\n    return l\n",
        "num_ids": 28
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n",
        "num_ids": 18
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n",
        "num_ids": 19
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1) - set(li2)))\n",
        "num_ids": 19
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i in li1 and i in li2]\n    return li_dif\n",
        "num_ids": 37
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    new_list = list(set(li1) - set(li2))\n    return new_list\n",
        "num_ids": 27
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n",
        "num_ids": 33
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n",
        "num_ids": 19
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n",
        "num_ids": 18
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n_sum = 0\n    for i in range(n) : \n        if i % 2 == 1 : \n            n_sum += i ** 4\n    return n_sum\n",
        "num_ids": 45
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if (i%2!= 0):\n            sum += pow(i,4)\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(map(lambda x: x**4, filter(lambda x: x % 2!= 0, range(1, n+1))))\n",
        "num_ids": 36
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 0 :\n        return 'N and p must be non-negative'\n    return sum(map(lambda x : x**4, filter(lambda x : x%2!= 0, range(1,n+1))))\n",
        "num_ids": 56
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Method 1\n    sum = 0\n    for i in range(1,n+1) :\n        if i%2 == 0 :\n            sum += i**4\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 0\n    for i in range(1, n + 1, 2):\n        num += i**4\n    return num\n",
        "num_ids": 33
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return (4 * n * (n + 1) * (n + 2)) // 6\n",
        "num_ids": 23
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return(sum(map(lambda x: x**4, filter(lambda x: x % 2 == 1, range(n)))))\n",
        "num_ids": 33
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    x = 0\n    for i in range(1, n+1) : \n        if i % 2!= 0 :\n            x = x + i**4\n        else :\n            pass\n    return x\n",
        "num_ids": 52
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_sum = 0\n    for i in range(1, n+1) : \n        if i%2!= 0 : \n            odd_sum += i**4\n    return odd_sum\n",
        "num_ids": 50
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Using a deque to make pop and append O(1)\n    stack = deque()\n",
        "num_ids": 25
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n",
        "num_ids": 75
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stk = deque()\n    for ch in exp:\n        if ch == '(':\n            stk.append(ch)\n        elif ch == ')':\n            if len(stk) == 0:\n                return False\n            stk.pop()\n    if len(stk) > 0:\n        return False\n    return True\n",
        "num_ids": 83
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    lparens = ['(', '[', '{']\n    rparens = [')', ']', '}']\n    open_parens = set(lparens)\n    close_parens = set(rparens)\n    mapping = dict(zip(open_parens, rparens))\n    mapping.update(dict(zip(rparens, open_parens)))\n    stack = deque()\n    for char in exp:\n        if char in open_parens:\n            stack.append(mapping[char])\n        elif char in close_parens:\n            if not stack:\n                return False\n            last_item = stack.pop()\n            if last_item!= char:\n                return False\n    return not stack\n",
        "num_ids": 180
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_list = ['[','{','(']\n    close_list = [']','}',')']\n",
        "num_ids": 28
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = deque()\n    d = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    for c in exp:\n        if c in d.values():\n            s.append(c)\n        elif c in d.keys():\n            if not s or s.pop()!= d[c]:\n                return False\n        else:\n            return False\n    return not s\n",
        "num_ids": 96
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            s.append(char)\n        if char in [')', '}', ']']:\n            if len(s) == 0:\n                return False\n            else:\n                pop_element = s.pop()\n                if char == ')' and pop_element!= '(':\n                    return False\n                elif char == '}' and pop_element!= '{':\n                    return False\n                elif char == ']' and pop_element!= '[':\n                    return False\n    if len(s)!= 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 163
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(','{','[']:\n            stack.append(char)\n        elif char in [')','}',']']:\n            if len(stack)==0:\n                return False\n            item = stack.pop()\n            if item == '(' and char!=')':\n                return False\n            if item == '{' and char!='}':\n                return False\n            if item == '[' and char!=']':\n                return False\n    if len(stack)==0:\n        return True\n    return False\n",
        "num_ids": 142
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_bracket = [\"(\", \"[\", \"{\"]\n    close_bracket = [\")\", \"]\", \"}\"]\n    stack = []\n",
        "num_ids": 38
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    OPEN = [\"(\", \"{\", \"[\"]\n    CLOSE = [\")\", \"}\", \"]\"]\n    stack = deque()\n    for char in exp:\n        if char in OPEN:\n            stack.append(char)\n        elif char in CLOSE:\n            pos = CLOSE.index(char)\n            if (len(stack) > 0) and (OPEN[pos] == stack[len(stack)-1]):\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 140
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # new_str = ''\n    # for char in test_str:\n    #     if char not in new_str:\n    #         new_str += char\n",
        "num_ids": 41
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Write your code here\n    words = test_str.split()\n    for i in words:\n        if len(i) == K:\n            words.remove(i)\n    return words\n",
        "num_ids": 48
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(' ')\n    # print(words)\n    for i in range(len(words) - 1, -1, -1):\n        if len(words[i]) == K:\n            words.pop(i)\n    return''.join(words)\n",
        "num_ids": 69
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(\" \")\n    output = []\n    for word in words:\n        if len(word)!= K:\n            output.append(word)\n    return \" \".join(output)\n",
        "num_ids": 53
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)\n",
        "num_ids": 57
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return test_str.split(' ')[:-K]\n",
        "num_ids": 16
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    print(test_str.split())\n    if len(test_str.split()) <= K:\n        print(\"original string is\")\n        print(test_str)\n    else:\n        print(\"string is changing\")\n        for i in test_str.split():\n            if len(i) == K:\n                test_str = test_str.replace(i, \"\")\n        print(\"final string is\")\n        print(test_str)\n",
        "num_ids": 107
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    output_str = ''\n    for word in test_str.split(' '):\n        if len(word) == K:\n            continue\n        else:\n            output_str += word +''\n    return output_str\n",
        "num_ids": 54
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    result = []\n    for i in test_str:\n        if len(i)!= K:\n            result.append(i)\n    return \" \".join(result)\n",
        "num_ids": 55
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_str = []\n    for i in words:\n        if len(i)!= K:\n            new_str.append(i)\n    return''.join(new_str)\n",
        "num_ids": 56
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    count = 0\n    for match in matches:\n        count = count + 1\n    print(f\"Number of occurances of \\\"{pattern}\\\" is {count}\")\n",
        "num_ids": 56
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_matches = re.finditer(pattern, text)\n    for match in pattern_matches:\n        print(match)\n    return None\n",
        "num_ids": 38
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # define the pattern\n    pattern = 'AG'\n    # define the string\n    text = 'TACTAGAGTATAGCATCACTAAGA'\n    # create a list of substrings\n    substrings = ['AG', 'AT', 'CG', 'GC']\n    # loop through the substrings\n    for i in range(len(substrings)):\n        # define the substring\n        substring = substrings[i]\n        # use re.finditer to find the occurrence and position of the substring in the string\n        for match in re.finditer(substring, text):\n            # return the match as a tuple\n            return match.group(), match.start()\n    # return None if there is no match\n    return None\n",
        "num_ids": 174
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print('-------------------')\n    print('occurance_substring')\n    if re.search(pattern,text):\n        print('Pattern found in string: ', text)\n        for m in re.finditer(pattern, text):\n            print(m.start())\n            print(m.group())\n    else:\n        print('Pattern not found in string: ', text)\n        return None\n    print('-------------------')\n",
        "num_ids": 100
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex=re.compile(pattern)\n    occurance=re.finditer(regex,text)\n    for i in occurance:\n        print(i.group())\n        print(\"Occurance: \",i.group().count(pattern))\n        print(\"Position: \",i.span())\n        print(\"----------------------\")\n",
        "num_ids": 79
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if re.search(pattern,text):\n        return re.search(pattern,text)\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # if re.search(pattern,text):\n    #     text = re.sub(pattern,'',text)\n    #     return(text)\n    # else:\n    #     return('No match')\n    # return text\n    for i in range(len(text)):\n        if re.search(pattern,text[i:]):\n            return (text[i:],i)\n        else:\n            continue\n    return ('No match')\n",
        "num_ids": 107
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text)==0 or len(pattern)==0:\n        return None\n    #print(text,pattern)\n    start=text.find(pattern)\n    if start>=0:\n        return start,start+len(pattern)-1\n    return None\n",
        "num_ids": 66
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern,text)\n    if(result):\n        print(\"Occurrence of the word is {} and it is in position {}\".format(result.group(),result.span()))\n    else:\n        print(\"There is no match in the string\")\n",
        "num_ids": 65
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return [(m.start(),m.end()) for m in re.finditer(r'\\b'+pattern+r'\\b',text)]\n",
        "num_ids": 37
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    #Start writing your code here\n    #Populate the variable odd_list with the odd positions of the list nums\n    odd_list = []\n    for index in range(len(nums)):\n        if (index % 2 == 1):\n            odd_list.append(index)\n",
        "num_ids": 69
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(nums[i] % 2!= 0 for i in range(0, len(nums), 2))\n",
        "num_ids": 31
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_list=[]\n    for i in range(len(nums)):\n        if i%2 ==0:\n            pass\n        else:\n            if nums[i]%2==0:\n                pass\n            else:\n                odd_list.append(nums[i])\n    if len(odd_list)>=1:\n        return False\n    else:\n        return True\n",
        "num_ids": 96
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index_list = []\n    for index in range(len(nums)):\n        if index % 2!= 0:\n            if nums[index] % 2!= 0:\n                odd_index_list.append(index)\n            else:\n                odd_index_list.append(index)\n                break\n    if len(odd_index_list) == len(nums):\n        return 'Every odd index contains odd numbers'\n    return 'No odd index contains odd numbers'\n",
        "num_ids": 118
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if not nums:\n        return True\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(nums[i]%2!=0 for i in range(len(nums)) if i%2!=0)\n",
        "num_ids": 35
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums)%2!= 0:\n        return False\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 1:\n            return False\n    return True",
        "num_ids": 57
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2 == 1:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    vowel_count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 78
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    print(f\"Given the string : {test_str}\")\n    test_str = test_str.lower()\n    total_vowel = 0\n    for index in range(len(test_str)):\n        if index == 0:\n            if test_str[index+1] in ['a','e','i','o','u']:\n                total_vowel += 1\n        elif index == (len(test_str)-1):\n            if test_str[index-1] in ['a','e','i','o','u']:\n                total_vowel += 1\n        else:\n            if test_str[index-1] in ['a','e','i','o','u'] or test_str[index+1] in ['a','e','i','o','u']:\n                total_vowel += 1\n    print(f\"Number of vowels : {total_vowel}\")\n",
        "num_ids": 218
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for char in test_str:\n        if char in \"aeiou\":\n            if not (char == test_str[test_str.find(char)-1] or char == test_str[test_str.find(char)+1]):\n                count += 1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str) - 1):\n        if (test_str[i] == \"a\" or test_str[i] == \"e\" or test_str[i] == \"i\" or test_str[i] == \"o\" or test_str[i] == \"u\") and (test_str[i + 1] == \"a\" or test_str[i + 1] == \"e\" or test_str[i + 1] == \"i\" or test_str[i + 1] == \"o\" or test_str[i + 1] == \"u\"):\n            count += 1\n    return count\n",
        "num_ids": 157
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    result = {}\n    for char in test_str:\n        if char in vowels:\n            result[char] = test_str.count(char)\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    cnt = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i>0 and test_str[i-1] in vowels:\n                cnt += 1\n            if i<len(test_str)-1 and test_str[i+1] in vowels:\n                cnt += 1\n    return cnt\n",
        "num_ids": 123
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for index, char in enumerate(test_str):\n        if char in vowels and (index == len(test_str) - 1 or test_str[index + 1] not in vowels):\n            count += 1\n    return count\n",
        "num_ids": 77
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return len([i for i in range(len(test_str)-1) if test_str[i] in vowels and test_str[i+1] in vowels])\n",
        "num_ids": 65
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    import re\n    regex = \"[aeiou]\"\n    matches = re.findall(regex, test_str)\n    return len(matches)\n",
        "num_ids": 41
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    i = 0\n    count = 0\n    while i < len(test_str) - 1:\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count = count + 1\n            i = i + 1\n        else:\n            i = i + 1\n    return count\n",
        "num_ids": 116
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = set(arr)\n    return sum(s)\n",
        "num_ids": 17
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "num_ids": 11
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_set = set(arr)\n    sum = 0\n    for num in unique_set:\n        sum += num\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    arr.sort()\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i - 1]:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 56
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "num_ids": 11
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for num in arr: \n        sum += num \n    return sum \n",
        "num_ids": 26
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = [1,2,3,4,5,6,7,8,9]\n    # arr = []\n    # while True:\n    #     data = int(input('Enter a number:'))\n    #     arr.append(data)\n    #     if data == '':\n    #         break\n    print(f'Given list is {arr}')\n    arr_set = set(arr)\n    for i in arr_set:\n        if arr.count(i) == 1:\n            print(f'The sum of non-repeated elements in the list is {i}')\n            break\n    else:\n        print('There is no such sum')\n",
        "num_ids": 159
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # arr = [3,5,2,4,6,7]\n    # arr = [3,5,2,4,6,7,5,5]\n    # arr = [3,5,2,4,6,7,7,8]\n",
        "num_ids": 64
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    hash_map = {} \n    sum = 0\n    for i in arr: \n        if i in hash_map: \n            hash_map[i] += 1\n        else: \n            hash_map[i] = 1\n            \n    for i in hash_map: \n        if hash_map[i] == 1: \n            sum += i \n    \n    return sum \n",
        "num_ids": 96
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in arr:\n        if arr.count(i)==1:\n            sum+=i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for i,j in groupby(list1):\n        print([list(j) for i,j in groupby(list1)])\n",
        "num_ids": 35
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #first groupby groups the element in sublists\n    #then we iterate through the grouped sublists and append the sublist to a list\n    groups = []\n    for key,group in groupby(list1):\n        groups.append(list(group))\n",
        "num_ids": 62
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    temp_list = []\n    for k, g in groupby(list1):\n        temp_list.append(list(g))\n    \n    return temp_list\n",
        "num_ids": 42
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    list1 = [list(i) for _, i in groupby(list1)]\n    return list1\n",
        "num_ids": 35
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = [1,2,3,4,4,5,5,5,6,7,7,7]\n    newlist = []\n    for k, g in groupby(list1, lambda x: x):\n        newlist.append(list(g))\n    print(\"list1 : \",list1)\n    print(\"newlist : \",newlist)\npack_consecutive_duplicates(list1)\n",
        "num_ids": 103
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1=sorted(list1)\n    return [list(group) for k, group in groupby(list1)]\n",
        "num_ids": 32
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for _, group in groupby(list1)]\n",
        "num_ids": 21
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for k, g in groupby(list1):\n        print(' '.join(map(str,list(g))))\n",
        "num_ids": 30
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    try:\n        new_list = [list(group) for _, group in groupby(list1)]\n    except Exception as e:\n        print(e)\n    return new_list\n",
        "num_ids": 47
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    s = [list(g) for k,g in groupby(list1)]\n    print(s)\n    l1 = []\n    for i in range(len(s)):\n        if i == len(s)-1:\n            l1.append(s[i])\n        else:\n            if len(s[i]) > len(s[i+1]):\n                l1.append(s[i])\n            else:\n                l1.append(s[i]+s[i+1])\n    return l1\nlist1 = [2,2,1,4,3,5,6,5,4,7,8,9,0,1,2,1]\nprint(pack_consecutive_duplicates(list1))\n",
        "num_ids": 181
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return len(set(tuple(l) for l in list1))\n",
        "num_ids": 20
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    list_dict = {}\n    for i in list1:\n        tuple_list = tuple(i)\n        list_dict[tuple_list] = list_dict.get(tuple_list, 0) + 1\n    return list_dict\n    ",
        "num_ids": 64
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #unique_sublists = lambda x : len(list(set([tuple(sorted(i)) for i in x])))\n    list_of_sublists = []\n    #for i in list1:\n    #    list_of_sublists += [sorted(i)]\n    #return len(list(set(list_of_sublists)))\n    #for i in list1:\n    #    list_of_sublists.append(sorted(i))\n    #return len(list(set(list_of_sublists)))\n    return len({tuple(sorted(i)) for i in list1})\n",
        "num_ids": 149
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if list1 == []:\n        return {}\n    new_list = list(set(list1))\n    count = 0\n    for element in new_list:\n        for sublist in list1:\n            if element == sublist:\n                count += 1\n    tuple_list = [(element, count) for element in new_list]\n    return dict(tuple_list)\n",
        "num_ids": 92
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def uniquelist(list1):\n        return tuple(set(list1))\n    d = dict()\n    for i in list1:\n        d[uniquelist(i)] = 0\n        for j in i:\n            d[uniquelist(i)]+=1\n    return d\n",
        "num_ids": 71
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1.sort()\n    unique_list = []\n    unique_count = []\n    index = 0\n    for i in range(len(list1)):\n        if list1[i] not in unique_list:\n            unique_list.append(list1[i])\n            unique_count.append(1)\n        else:\n            unique_count[unique_list.index(list1[i])] += 1\n    unique_tuple = zip(unique_list, unique_count)\n    return dict(unique_tuple)\n",
        "num_ids": 129
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return\n",
        "num_ids": 5
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in list1:\n        if type(i) == list:\n            dict1[tuple(i)] = list1.count(i)\n    return dict1\n",
        "num_ids": 49
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if list1 == []:\n        return {}\n    else:\n        dic = {}\n        for i in list1:\n            if type(i) == list:\n                dic[tuple(i)] = list1.count(i)\n            else:\n                dic[tuple(i)] = list1.count(i)\n        return dic\n",
        "num_ids": 87
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return len(list1)\n",
        "num_ids": 10
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def next_sum(test_list,current_sum,partial_list):\n        '''\n        Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n        '''\n        result_list = []\n        for i in test_list:\n            if current_sum + i <= 6:\n                partial_list.append(i)\n                result_list.append(partial_list)\n                partial_list = []\n        return result_list\n        \n    partial_list = []\n    result_list = []\n    current_sum = 0\n    for i in test_list:\n        if current_sum + i <= 6:\n            partial_list.append(i)\n            current_sum += i\n    result_list.append(partial_list)\n    while True:\n        result_list = next_sum(test_list,current_sum,partial_list)\n        if len(result_list) == 0:\n            break\n        partial_list = result_list.pop()\n        current_sum = 0\n        for i in partial_list:\n            current_sum += i\n    return result_list\n    \ndef sum_calc(list_a):\n    '''\n    Write a function to calculate the total of given list of numbers.\n    '''\n    return sum(list_a)\n",
        "num_ids": 11
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Get all combinations of sum of n numbers\n    # using list(itertools.combinations(test_list, 2))\n    result = list(combinations(test_list, 2))\n",
        "num_ids": 47
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    print(list(combinations(test_list,3)))\n",
        "num_ids": 17
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for index,num in enumerate(test_list):\n        if index == len(test_list)-1:\n            break\n        test_list.pop(index)\n        test_list.pop(0)\n        combinations_with_tuple_list = list(combinations(test_list,num))\n        result.extend(combinations_with_tuple_list)\n    return result\n",
        "num_ids": 101
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    list_to_return = []\n    for item in combinations(test_list, 3):\n        #print(item)\n        if sum(item) == 2020:\n            list_to_return.append(item)\n    print(list_to_return)\n",
        "num_ids": 63
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)+1):\n        #print(list(combinations(test_list, i)))\n        for j in list(combinations(test_list, i)):\n            if sum(j) == 100:\n                print(j)\n    '''\n    Write a function to find all the combinations of sum and list in the given tuple list. https://www.geeksforgeeks.org/python-combinations-with-list-sum-tuple-list/\n    '''\n    test_list = [(1,2),(3,4),(5,6)]\n    all_combinations = []\n    def find_sum_combination(s,arr):\n        arr1 = []\n        for i in arr:\n            if i[0]==s:\n                arr1.append(i[1])\n        if arr1:\n            find_sum_combination(100-s,arr1)\n            all_combinations.append(arr1)\n        else:\n            return\n    find_sum_combination(100,test_list)\n    print(all_combinations)\n    #assert len(all_combinations)==20\n    '''\n    Write a function to find all the combinations of sum and list in the given tuple list. https://www.geeksforgeeks.org/python-combinations-with-list-sum-tuple-list/\n    '''\n    test_list = [(1,2),(3,4),(5,6)]\n    all_combinations = []\n    def find_sum_combination(s,arr):\n        if not arr:\n            return\n        l = []\n        for i in arr:\n            if i[0]==s:\n                l.append(i[1])\n        if l:\n            find_sum_combination(100-s,l)\n            all_combinations.append(l)\n        else:\n            return\n    find_sum_combination(100,test_list)\n    print(all_combinations)\n    assert len(all_combinations)==20\n    '''\n    Write a function to find all the combinations of sum and list in the given tuple list. https://www.geeksforgeeks.org/python-combinations-with-list-sum-tuple-list/\n    '''\n    test_list = [(1,2),(3,4),(5,6)]\n    all_combinations = []\n    def find_sum_combination(s,arr):\n        if not arr:\n            return\n        l = []\n        for i in arr:\n            if i[0]==s:\n                l.append(i[1])\n        if l:\n            find_sum_combination(100-s,l)\n            all_combinations.append(l)\n        else:\n            return\n    find_sum_combination(100,test_list)\n    print(all_combinations)\n    assert len(all_combinations)==20\n    '''\n    Write a function to find all the combinations of sum and list in the given tuple list. https://www.geeksforgeeks.org/python-combinations-with-list-sum-tuple-list/\n    '''\n    test_list = [(1,2),(3,4),(5,6)]\n    all_combinations = []\n    def find_sum_combination(s,arr):\n        if not arr:\n            return\n        l = []\n        for i in arr:\n            if i[0]==s:\n                l.append(i[1])\n        if l:\n            find_sum_combination(100-s,l)\n            all_combinations.append(l)\n        else:\n            return\n    find_sum_combination(100,test_list)\n    print(all_combinations)\n    assert len(all_combinations)==20\n    '''\n    Write a function to find all the combinations of sum and list in the given tuple list. https://www.geeksforgeeks.org/python-combinations-with-list-sum-tuple-list/\n    '''\n    test_list = [(1,2),(3,4),(5,6)]\n    all_combinations = []\n    def find_sum_combination(s,arr):\n        if not arr:\n            return\n        l = []\n        for i in arr:\n            if i[0]==s:\n                l.append(i[1])\n        if l:\n            find_sum_combination(100-s,l)\n            all_combinations.append(l)\n        else:\n            return\n    find_sum_combination(100,test_list)\n    print(all_combinations)\n    assert len(all_combinations)==20\n    '''\n    Write a function to find all the combinations of sum and list in the given tuple list. https://www.geeksforgeeks.org/python-combinations-with-list-sum-tuple-list/\n    '''\n    test_list = [(1,2),(3,4),(5,6)]\n    all_combinations = []\n    def find_sum_combination(s,arr):\n        if not arr:\n            return\n        l = []\n        for i in arr:\n            if i[0]==s:\n                l.append(i[1])\n        if l:\n            find_sum_combination(100-s,l)\n            all_combinations.append(l)\n        else:\n            return\n    find_sum_combination(100,test_list)\n    print(all_combinations)\n    assert len(all_combinations)==20\n    '''\n    Write a function to find all the combinations of sum and list in the given tuple list. https://www.geeksforgeeks.org/python-combinations-with-list-sum-tuple-list/\n    '''\n    test_list = [(1,2),(3,4),(5,6)]\n    all_combinations = []\n    def find_sum_combination(s,arr):\n        if not arr:\n            return\n        l = []\n        for i in arr:\n            if i[0]==s:\n                l.append(i[1])\n        if l:\n            find_sum_combination(100-s,l)\n            all_combinations.append(l)\n        else:\n            return\n    find_sum_combination(100,test_list)\n    print(all_combinations)\n    assert len(all_combinations)==20\n    '''\n    Write a function to find all the combinations of sum and list in the given tuple list. https://www.geeksforgeeks.org/python-combinations-with-list-sum-tuple-list/\n    '''\n    test_list = [(1,2),(3,4),(5,6)]\n    all_combinations = []\n    def find_sum_combination(s,arr):\n        if not arr:\n            return\n        l = []\n        for i in arr:\n            if i[0]==s:\n                l.append(i[1])\n        if l:\n            find_sum_combination(100-s,l)\n            all_combinations.append(l)\n        else:\n            return\n    find_sum_combination(100,test_list)\n    print(all_combinations)\n    assert len(all_combinations)==20\n    '''\n    Write a function to find all the combinations of sum and list in the given tuple list. https://www.geeksforgeeks.org/python-combinations-with-list-sum-tuple-list/\n    '''\n    test_list = [(1,2),(3,4),(5,6)]\n    all_combinations = []\n    def find_sum_combination(s,arr):\n        if not arr:\n            return\n        l = []\n        for i in arr:\n            if i[0]==s:\n                l.append(i[1])\n        if l:\n            find_sum_combination(100-s,l)\n            all_combinations.append(l)\n        else:\n            return\n    find_sum_combination(100,test_list)\n    print(all_combinations)\n",
        "num_ids": 148
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for test_tuple in test_list:\n        if sum(test_tuple) not in sum_list:\n            sum_list.append(sum(test_tuple))\n",
        "num_ids": 52
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [sum(i) for i in combinations(test_list, 2) if sum(i) % 2 == 0]\n",
        "num_ids": 31
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    print(list(combinations(test_list, 3)))\n",
        "num_ids": 17
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # get all the combination of tuples in the list\n    combos = list(combinations(test_list, 2))\n    # take the first element of the tuple and add it to the rest of the elements\n    for i in combos:\n        print(sum(i))\n",
        "num_ids": 65
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n % 2 == 0:\n        return \"Number of divisors : {0}\".format(int(n / 2))\n    else: \n        return \"Number of divisors : {0}\".format(int((n - 1) / 2))\n    \n    \ndef sum_digits(n) : \n    '''\n    Write a python function to sum the digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    return \"Sum of digits : {0}\".format(int(sum([int(x) for x in list(str(n))])))\n    \n    \ndef check_palindrome(n) : \n    '''\n    Write a python function to check whether the number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if str(n) == str(n)[::-1] : \n        return \"Palindrome number\"\n    else: \n        return \"Non palindrome number\"\n    \n    \ndef factorial(n) : \n    '''\n    Write a python function to calculate factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    return \"Factorial of {0} is {1}\".format(int(n), int(math.factorial(n)))\n    \n    \ndef fibonacci(n) : \n    '''\n    Write a python function to calculate the fibonacci sequence. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    if n == 0 : \n        return \"Fibonacci of {0} is 0\".format(int(n))\n    elif n == 1: \n        return \"Fibonacci of {0} is 1\".format(int(n))\n    else: \n        return \"Fibonacci of {0} is {1}\".format(int(n), int(fibonacci(n-1) + fibonacci(n-2)))\n    \n    \ndef reverse(s) : \n    '''\n    Write a python function to calculate reverse of a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    return \"Reverse of {0} is {1}\".format(s, s[::-1])\n    \n    \ndef armstrong(n) : \n    '''\n    Write a python function to check whether the number is armstrong or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if int(n) == sum([int(x)**len(str(n)) for x in str(n)]) : \n        return \"{0} is an Armstrong number\".format(int(n))\n    else: \n        return \"{0} is not an Armstrong number\".format(int(n))\n    \n    \ndef leap_year(year) : \n    '''\n    Write a python function to check whether the number is leap year or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if year % 4 == 0 and year % 100 == 0: \n        if year % 400 == 0: \n            return \"{0} is a leap year\".format(int(year))\n        else: \n            return \"{0} is not a leap year\".format(int(year))\n    else: \n        return \"{0} is not a leap year\".format(int(year))\n    \n    \ndef list_max_min_sum(list) : \n    '''\n    Write a python function to calculate the maximum, minimum and sum of a given list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    return \"Max value : {0} \\nMin value : {1} \\nSum value : {2}\".format(max(list), min(list), sum(list))\n    \n    \ndef check_pangram(input_string) : \n    '''\n    Write a python function to check whether a given string is pangram or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    lower_case = [chr(i) for i in range(97, 123)]\n    return \"\".join(lower_case) == input_string.lower()\n    \n    \ndef multiplication(a, b) : \n    '''\n    Write a python function to multiply two numbers without using * operator. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    count_a = len(str(a))\n    count_b = len(str(b))\n    if count_a < count_b : \n        return \"Result : {0}\".format(int(str(a) * b))\n    elif count_a == count_b : \n        return \"Result : {0}\".format(int(a * b))\n    else: \n        return \"Result : {0}\".format(int(a * b))\n        \n    \ndef add_numbers(a, b) : \n    '''\n    Write a python function to add two numbers without using + operator. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    count_a = len(str(a))\n    count_b = len(str(b))\n    if count_a < count_b : \n        return \"Result : {0}\".format(int(str(a) + str(b)))\n    elif count_a == count_b : \n        return \"Result : {0}\".format(int(a + b))\n    else: \n        return \"Result : {0}\".format(int(a + b))\n        \n    \ndef simple_interest(p, r, n) : \n    '''\n    Write a python function to calculate simple interest. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    return \"Simple Interest : {0}\".format(int((p * r * n) / 100))\n    \n    \ndef area_of_circle(r) : \n    '''\n    Write a python function to calculate the area of a circle. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-37.php\n    '''\n    return \"Area of Circle : {0}\".format(int(r ** 2 * math.pi))\n    \n    \ndef area_of_rectangle(a, b) : \n    '''\n    Write a python function to calculate the area of a rectangle. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-38.php\n    '''\n    return \"Area of Rectangle : {0}\".format(int(a * b))\n    \n    \ndef area_of_triangle(b, h) : \n    '''\n    Write a python function to calculate the area of a triangle. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-39.php\n    '''\n    return \"Area of Triangle : {0}\".format(int(0.5 * b * h))\n    \n    \ndef area_of_square(a) : \n    '''\n    Write a python function to calculate the area of a square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-40.php\n    '''\n    return \"Area of Square : {0}\".format(int(a ** ",
        "num_ids": 20
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    x = 1\n    count = 0\n    while x <= n : \n        if n % x == 0 :\n            count += 1\n        x += 1\n    return count % 2 == 0\n    \ndef count_divisors_v2(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return n % 2 == 0\n    \ndef get_digit(n,d) : \n    '''\n    Write a function to get the digit in a number\n    '''\n    #return n % 10**(d+1)//10**d\n    return n // 10**d % 10\n    \ndef list_to_str(n) : \n    '''\n    Write a function to get the string representation of the list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return ''.join(map(str,n))\n    \ndef reverse_list(n) : \n    '''\n    Write a function to reverse the list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return n[::-1]\n    \ndef get_primes(n) : \n    '''\n    Write a function to get the prime numbers in the specified range. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    primes = []\n    for x in range(1,n+1) : \n        if len([y for y in range(1,x+1) if x % y == 0]) <= 1 :\n            primes.append(x)\n    return primes\n    \ndef find_smallest_prime_factor(n) : \n    '''\n    Write a function to find the smallest prime factor of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n % 2 == 0 : \n        return 2\n    x = 3\n    while x <= math.sqrt(n) : \n        if n % x == 0 :\n            return x\n        x += 2\n    return n\n    \ndef get_prime_factors(n) : \n    '''\n    Write a function to get the prime factors of the specified number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    prime_factors = []\n    while n % 2 == 0 : \n        prime_factors.append(2)\n        n /= 2\n    for x in range(3,int(math.sqrt(n))+1,2) : \n        while n % x == 0 : \n            prime_factors.append(x)\n            n /= x\n    if n > 2 : \n        prime_factors.append(n)\n    return prime_factors\n    \ndef remove_duplicates(n) : \n    '''\n    Write a function to remove duplicates from the list. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return list(dict.fromkeys(n))\n",
        "num_ids": 14
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,n+1) :\n        if n%i==0 :\n            count=count+1\n    if count%2==0 :\n        print(\"Number of divisors =\",count)\n        print(\"It is an Even number.\")\n    else :\n        print(\"Number of divisors =\",count)\n        print(\"It is an Odd number.\")\n    return\n",
        "num_ids": 99
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return sum(1 for i in range(1, n + 1) if n % i == 0)\n",
        "num_ids": 26
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    num = 0\n    for i in range(1,n) : \n        if n % i == 0 : \n            num = num + 1\n    if num % 2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 60
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    result = 0\n    for i in range(1,int(math.sqrt(n)+1)) :\n        if(n%i==0) :\n            result+=1\n    return(result)\n",
        "num_ids": 50
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            divisor_count += 1\n    if divisor_count % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count += 1\n            else : \n                count += 2\n    return count \n",
        "num_ids": 74
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) : \n        if n % i == 0 :\n            count += 1\n    if count % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n):\n        if n%i == 0:\n            count+=1\n    if count%2==0:\n        print(\"Number of divisors: \",count)\n        print(\"Even\")\n    else:\n        print(\"Number of divisors: \",count)\n        print(\"Odd\")\n        \ndef gcd(m,n):\n    '''\n    Write a python function to find the gcd of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-22.php\n    '''\n    gcd = 1\n    if m>n:\n        small = n\n    else:\n        small = m\n    for i in range(1,small+1):\n        if m%i==0 and n%i==0:\n            gcd = i\n    print(\"GCD = \",gcd)\n    \ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factors of an integer. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    prime_factors = []\n    for i in range(2,n+1):\n        count = 0\n        for j in range(1,i+1):\n            if i%j==0:\n                count+=1\n        if count==2:\n            prime_factors.append(i)\n    print(prime_factors)\n    \ndef fibonacci(n):\n    '''\n    Write a python function to calculate the nth term of Fibonacci sequence. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n<=1:\n        return n\n    else:\n        return(fibonacci(n-1)+fibonacci(n-2))\n    \ndef sieve_of_eratosthenes(n):\n    '''\n    Write a python function to generate a list of prime numbers upto n using Sieve of Eratosthenes algorithm. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    list_of_primes = []\n    prime_numbers = [True for i in range(n+1)]\n    p = 2\n    while (p*p<=n):\n        if (prime_numbers[p]==True):\n            for i in range(p*p,n+1,p):\n                prime_numbers[i]=False\n        p+=1\n    prime_numbers[0]=False\n    prime_numbers[1]=False\n    for p in range(n+1):\n        if prime_numbers[p]:\n            list_of_primes.append(p)\n    print(list_of_primes)\n    \ndef check_palindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    n = str(n)\n    count = len(n)\n    for i in range(count//2):\n        if n[i]!=n[-i-1]:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    i = 0\n    while i < len(arr):\n        j = i\n        while j < len(arr):\n            subarray = arr[j:j+odd_length_sum.length]\n            sum = sum + sum(subarray)\n            j = j + 2\n        i = i + 2\n    return sum\n",
        "num_ids": 83
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum=0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            sum += arr[j]\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([sum(arr[i:i+i%2+1]) for i in range(len(arr))])\n",
        "num_ids": 31
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if (len(arr[i:j]) % 2) == 1:\n                sum += sum(arr[i:j])\n    return sum\n",
        "num_ids": 67
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    if len(arr) % 2 == 0:\n        for i in range(0, len(arr)):\n            if i % 2 == 1:\n                for j in range(i, len(arr)):\n                    sum += arr[j]\n    return sum\n",
        "num_ids": 68
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    for i in range(len(arr)):\n        # print(arr[i])\n        for j in range(i, len(arr)):\n            # print(arr[i:j+1])\n            if len(arr[i:j+1])%2!= 0:\n                result += sum(arr[i:j+1])\n    return result\n",
        "num_ids": 92
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #start writing your code here\n    #Populate the array\n    arr = [1,2,3,4,5,6]\n    n = len(arr)\n    #length of the subarray\n    m = 3\n    total = 0\n    for i in range(n-m+1):\n        total = total + sum(arr[i:i+m])\n",
        "num_ids": 89
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([sum(arr[i:i+3]) for i in range(len(arr)) if i+3<=len(arr)])\n",
        "num_ids": 37
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    start = 0\n    end = 1\n    total_sum = 0\n    while end < len(arr):\n        total_sum += sum(arr[start:end])\n        start += 1\n        end += 2\n    return total_sum\n",
        "num_ids": 58
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    output = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if((j-i)%2!=0):\n                print(arr[i:j+1])\n                output += sum(arr[i:j+1])\n    return output\n",
        "num_ids": 79
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    min_col = min(r, min(g, b))\n    max_col = max(r, max(g, b))\n    v = max_col\n    delta = max_col - min_col\n    if delta == 0:\n        return 0.0, 0.0, v\n    s = delta/max_col\n    rc = (max_col-r) / delta\n    gc = (max_col-g) / delta\n    bc = (max_col-b) / delta\n    if r == max_col:\n        h = bc-gc\n    elif g == max_col:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "num_ids": 220
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "num_ids": 196
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    high = max(r, g, b)\n    low = min(r, g, b)\n    h, s, v = high, high, high\n",
        "num_ids": 63
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "num_ids": 221
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    \n    minc = min(r, g, b)\n    \n    V = round(max(r, g, b) * 100)\n    \n    if V == 0:\n        S = 0\n    else:\n        S = round((1.0 - minc / V) * 100)\n    \n    if minc == r:\n        H = 60 * ((g - b) / (V - minc))\n    elif minc == g:\n        H = 120 + 60 * ((b - r) / (V - minc))\n    elif minc == b:\n        H = 240 + 60 * ((r - g) / (V - minc))\n    \n    return V, S, H\n",
        "num_ids": 192
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    h = h/360.0\n    s = s/100.0\n    v = v/100.0\n    return round(h,4), round(s,4), round(v,4)\n    \n",
        "num_ids": 242
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # return [number1 * number2 for number1 in list1 if number1 % 2 == 0 for number2 in list1 if number2 % 2!= 0]\n    return [number1 * number2 for number1 in list1 for number2 in list1]\n",
        "num_ids": 62
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num%2 == 0:\n            product *= num\n        else:\n            product *= num\n    print(product)\n",
        "num_ids": 46
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    for i in list1:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    prod=1\n    for i in even:\n        prod*=i\n    for i in odd:\n        prod*=i\n    print(prod)\nmul_even_odd([1,3,5,7,9])\n",
        "num_ids": 108
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    print(mul_even_odd(nums))\n",
        "num_ids": 16
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    prod = 1\n    for i in list1:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    for i in even:\n        prod *= i\n    for j in odd:\n        prod *= j\n    return prod\n",
        "num_ids": 87
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for i in list1:\n        if i % 2 == 0:\n            prod = prod * i\n    return prod\n",
        "num_ids": 37
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd_num = 0\n    even_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    return even_num * odd_num\n",
        "num_ids": 61
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    l1 = [x for x in list1 if x % 2 == 0]\n    l2 = [x for x in list1 if x % 2!= 0]\n    l3 = [mul(l1[0], l2[0])]\n    for i in range(1, len(l1)):\n        l3.append(mul(l1[i], l2[i]))\n    return l3\n",
        "num_ids": 102
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if (i%2==0):\n            result = result * i\n        else:\n            result = result * i\n    return result\nprint(mul_even_odd([2, 3, 5, 6, 9]))\nprint(mul_even_odd([1, 2, 3, 4, 5, 6]))\n",
        "num_ids": 91
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # a tuple string must begin with `('` or `('\n    if test_str[0] == '(' or test_str[0] == '(' and test_str[1]!= '(' or test_str[1] == ',':\n        if test_str.count(',') > 1:\n            temp_list = list(test_str)\n            temp_list.remove(',')\n            temp_str = ''\n            for i in temp_list:\n                temp_str += i\n            return int(temp_str)\n        if test_str.count(',') == 1:\n            temp_list = list(test_str)\n            temp_list.remove(',')\n            temp_str = ''\n            for i in temp_list:\n                temp_str += i\n            return int(temp_str)\n    else:\n        return test_str\n",
        "num_ids": 207
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n",
        "num_ids": 19
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.replace('(', '').replace(')', '').split(',')))\n",
        "num_ids": 31
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str.replace(' ', '').replace('[', '').replace(']', '').split(',')\n    return tuple(map(int, test_list))\n",
        "num_ids": 46
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    #res = tuple(int(num) for num in test_str[1:-1].split(','))\n    #return res\n    return tuple(int(num) for num in test_str[1:-1].split(','))\n",
        "num_ids": 57
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n",
        "num_ids": 11
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(s) for s in test_str.split(\",\")])\n",
        "num_ids": 23
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(' ')))\n",
        "num_ids": 19
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n",
        "num_ids": 19
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    l = test_str.split(',')\n    l = [int(x) for x in l]\n    t = tuple(l)\n    return t\n",
        "num_ids": 40
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a)\n    while l < r:\n        m = (l + r) // 2\n        if a[m] <= x:\n            l = m + 1\n        else:\n            r = m\n    return l\ndef binary_search(a, x):\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        m = (l + r) // 2\n        if a[m] < x:\n            l = m + 1\n        elif a[m] > x:\n            r = m - 1\n        else:\n            return m\n    return l\ndef insertion_sort(a):\n    '''\n    Write a function to implement insertion sort.\n    '''\n    for i in range(1, len(a)):\n        x = a[i]\n        j = i - 1\n        while j >= 0 and a[j] > x:\n            a[j + 1] = a[j]\n            j -= 1\n        a[j + 1] = x\ndef insertion_sort2(a):\n    '''\n    Write a function to implement insertion sort.\n    '''\n    for i in range(1, len(a)):\n        key = a[i]\n        j = i - 1\n        while j >= 0 and a[j] > key:\n            a[j + 1] = a[j]\n            j -= 1\n        a[j + 1] = key\ndef insertion_sort3(a):\n    '''\n    Write a function to implement insertion sort.\n    '''\n    for i in range(1, len(a)):\n        key = a[i]\n        j = i - 1\n        while j >= 0 and a[j] < key:\n            a[j + 1] = a[j]\n            j -= 1\n        a[j + 1] = key\ndef bubble_sort(a):\n    '''\n    Write a function to implement bubble sort.\n    '''\n    for i in range(0, len(a) - 1):\n        for j in range(0, len(a) - 1):\n            if a[j] > a[j + 1]:\n                a[j], a[j + 1] = a[j + 1], a[j]\ndef selection_sort(a):\n    '''\n    Write a function to implement selection sort.\n    '''\n    for i in range(0, len(a) - 1):\n        min_index = i\n        for j in range(i + 1, len(a)):\n            if a[j] < a[min_index]:\n                min_index = j\n        a[min_index], a[i] = a[i], a[min_index]\ndef partition(a, l, r):\n    '''\n    Write a function to implement partition.\n    '''\n    p = l\n    while l < r:\n        while l < r and a[r] >= a[p]:\n            r -= 1\n        a[l] = a[r]\n        while l < r and a[l] <= a[p]:\n            l += 1\n        a[r] = a[l]\n    a[l] = a[p]\n    return l\ndef quicksort(a, l, r):\n    '''\n    Write a function to implement quicksort.\n    '''\n    if l < r:\n        p = partition(a, l, r)\n        quicksort(a, l, p - 1)\n        quicksort(a, p + 1, r)\ndef quick_sort(a):\n    '''\n    Write a function to implement quick sort.\n    '''\n    quicksort(a, 0, len(a) - 1)\ndef merge_sort(a):\n    '''\n    Write a function to implement merge sort.\n    '''\n    def merge(a, l, m, r):\n        '''\n        Write a function to implement merge sort.\n        '''\n        n1 = m - l + 1\n        n2 = r - m\n        L = [None] * n1\n        R = [None] * n2\n        for i in range(0, n1):\n            L[i] = a[l + i]\n        for i in range(0, n2):\n            R[i] = a[m + i + 1]\n        i, j, k = 0, 0, l\n        while i < n1 and j < n2:\n            if L[i] <= R[j]:\n                a[k] = L[i]\n                i += 1\n            else:\n                a[k] = R[j]\n                j += 1\n            k += 1\n        while i < n1:\n            a[k] = L[i]\n            i += 1\n            k += 1\n        while j < n2:\n            a[k] = R[j]\n            j += 1\n            k += 1\n    def merge_sort_rec(a, l, r):\n        '''\n        Write a function to implement merge sort.\n        '''\n        if l < r:\n            m = (l + r) // 2\n            merge_sort_rec(a, l, m)\n            merge_sort_rec(a, m + 1, r)\n            merge(a, l, m, r)\n    merge_sort_rec(a, 0, len(a) - 1)\ndef heap_sort(a):\n    '''\n    Write a function to implement heap sort.\n    '''\n    def heapify(a, n, i):\n        '''\n        Write a function to implement heap sort.\n        '''\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and a[i] < a[l]:\n            largest = l\n        if r < n and a[largest] < a[r]:\n            largest = r\n        if largest!= i:\n            a[i], a[largest] = a[largest], a[i]\n            heapify(a, n, largest)\n    n = len(a)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(a, n, i)\n    for i in range(n - 1, 0, -1):\n        a[i], a[0] = a[0], a[i]\n        heapify(a, i, 0)\ndef counting_sort(a):\n    '''\n    Write a function to implement counting sort.\n    '''\n    m = min(a)\n    b = [0] * (len(a) - 1)\n    for i in range(0, len(a) - 1):\n        b[a[i + 1] - m - 1] += 1\n    for i in range(1, len(a) - 1):\n        b[i] += b[i - 1]\n    for i in range(len(a) - 1, 0, -1):\n        a[b[a[i] - m] - 1] = a[i]\n        b[a[i] - m] -= 1\ndef radix_sort(a):\n    '''\n    Write a function to implement radix sort.\n    '''\n    def counting_sort_radix(a, d):\n        '''\n        Write a function to implement radix sort.\n        '''\n        b = [0] * len(a)\n        c = [0] * 10\n        for i in range(0, len(a)):\n            index = a[i] // d\n            c[index % 10] += 1\n        for i in range(1, 10):\n            c[i] += c[i - 1]\n        for i in range(len(a) - 1, -1, -1):\n            index = a[i] // d\n            b[c[index % 10] - 1] = a[i]\n            c[index % 10] -= 1\n        for i in range(0, len(a)):\n            a[i] = b[i]\n    maximum = max(a)\n    exp = 1\n    while maximum // exp > 0:\n        counting_sort_radix(a, exp)\n        exp *= 10\ndef bucket_sort(a):\n    '''\n    Write a function to implement bucket sort.\n    '''\n    def insertion_sort_bucket(a, n):\n        '''",
        "num_ids": 1
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a)==0:\n        return 0\n    else:\n        return bisect.bisect_right(a, x)\n",
        "num_ids": 35
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    bisect.insort(a, x)\n    return a.index(x)\n",
        "num_ids": 23
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0 if a[0] <= x else 1\n    if n == 2:\n        return 0 if a[0] <= x else 1 if a[1] <= x else 2\n    # find the position of the leftmost element greater than or equal to x\n    # and search for a larger element by applying binary search to the right of that position\n    l = bisect.bisect_right(a, x)\n    if l == 0:\n        return 0\n    if l == n:\n        return n\n    while a[l-1] == x:\n        l -= 1\n    if l == 0:\n        return 0\n    return l\n",
        "num_ids": 176
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        pos = bisect.bisect_left(a, x)\n        return pos\n",
        "num_ids": 40
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    return bisect.bisect(a,x)\n",
        "num_ids": 23
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo, hi = 0, len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if x < a[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n",
        "num_ids": 61
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0: return 0\n    i = bisect.bisect_right(a, x)\n    if i == len(a): return i\n    return i - 1\n",
        "num_ids": 47
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text):\n        print('Found a match')\n    else:\n        print('No match')\n    \n    if pattern.findall(text):\n        print(pattern.findall(text))\n    \n    if pattern.fullmatch(text):\n        print('Full match')\n    else:\n        print('No full match')\n",
        "num_ids": 100
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.findall(r'ab{3}',text)\n    return match\n",
        "num_ids": 24
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search(r'ab{3}', text):\n        return True\n    else:\n        return False\nprint(text_match_three('abaaba'))\nprint(text_match_three('abca'))\n",
        "num_ids": 56
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # text = 'abaababbababaabbababaabb'\n    # text = 'aabbbaababa'\n    # text = 'aabbaabbabb'\n    # text = 'babbbababaaabbbbbbaab'\n    # text = 'abbbbbbbabbbaaaaabbbbab'\n    # text = 'abbbbbbbbbaaaababbbbbbaaababbbabbbbbbaab'\n",
        "num_ids": 103
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = r\"ab{3}\"\n    pattern = re.compile(regex)\n    match = re.search(pattern, text)\n    if match:\n        print(\"Matched\")\n    else:\n        print(\"Not Matched\")\n",
        "num_ids": 61
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = 'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'Not Found'\nprint(text_match_three('aaabaaaaab'))\nprint(text_match_three('aaab'))\nprint(text_match_three('aabb'))\nprint(text_match_three('ab'))\n",
        "num_ids": 100
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r'ab{3}', text)\n    if result!= None:\n        return result.group()\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n",
        "num_ids": 43
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    patterns = 'ab{3}'\n    if re.search(patterns, text):\n        return('Found a match!')\n    else:\n        return('Not matched!')\n",
        "num_ids": 46
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    patter = \"ab{3}\"\n    result = re.search(patter, text)\n    if result:\n        return \"Match Found :\" + result.group()\n    else:\n        return \"Match Not Found :\" + result.group()\n",
        "num_ids": 61
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + tuple(test_str)\n",
        "num_ids": 18
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_test = test_list + test_str\n    print(tuple(tuple_test))\n",
        "num_ids": 28
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # creating a new tuple from the string\n    new_tuple_from_string = tuple(test_str)\n",
        "num_ids": 29
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    new_list = []\n    for x in test_list:\n        new_list.append(x)\n    new_list.append(test_str)\n",
        "num_ids": 42
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str,) + tuple(test_list)\n    print(new_tuple)\n    return new_tuple\n",
        "num_ids": 37
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    print(test_list)\n    print(test_str)\n",
        "num_ids": 18
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if isinstance(test_list, list) and isinstance(test_str, str):\n        return tuple(test_list) + (test_str, )\n    else:\n        return None\n",
        "num_ids": 48
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    print(' '.join(test_str))\n    test_tuple = tuple(test_list)\n    print(test_tuple)\n",
        "num_ids": 35
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # check test_list\n    if type(test_list) is not list:\n        raise TypeError(\"Input is not a list\")\n    # check test_str\n    if type(test_str) is not str:\n        raise TypeError(\"Input is not a string\")\n    # create test tuple\n    test_tuple = tuple(test_list + list(test_str))\n    return test_tuple\n",
        "num_ids": 98
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    try:\n        new_tuple = (test_str, test_list)\n    except TypeError as error:\n        raise TypeError(f\"Arguments must be of type list and str, got {type(test_list)} and {type(test_str)} instead\")\n    return new_tuple\n",
        "num_ids": 73
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums)%2 == 0:\n        print('{} contains even numbers at every even index.'.format(nums))\n    else:\n        print('{} does not contain even numbers at every even index.'.format(nums))\n        \neven_position([1, 2, 3, 4, 5, 6, 7, 8])\neven_position([1, 2, 3, 4, 5, 6, 7, 9])\neven_position([1, 2, 3, 4, 5, 6, 7, 8, 9])\n",
        "num_ids": 128
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if(len(nums)%2==0):\n        for i in range(len(nums)):\n            if(i%2==0 and nums[i]%2==0):\n                pass\n            else:\n                return False\n        return True\n    else:\n        return False\n    \n    \ndef sum_three_nums(nums):\n    '''\n    Write a python function that takes list of numbers and return sum of the three numbers whose sum is equal to the given number.\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            for k in range(j+1,len(nums)):\n                if(i!=j and j!=k and i!=k):\n                    if(nums[i]+nums[j]+nums[k]==sum(nums)):\n                        return nums[i],nums[j],nums[k]\n    return None,None,None\n    \ndef sum_three_nums2(nums):\n    '''\n    Write a python function that takes list of numbers and return sum of the three numbers whose sum is equal to the given number.\n    '''\n    nums.sort()\n    for i in range(len(nums)-2):\n        if((nums[i]+nums[i+1]+nums[i+2])==(nums[len(nums)-1]+nums[len(nums)-2]+nums[len(nums)-3])):\n            return nums[i],nums[i+1],nums[i+2]\n    return None,None,None\n    \ndef sum_three_nums3(nums):\n    '''\n    Write a python function that takes list of numbers and return sum of the three numbers whose sum is equal to the given number.\n    '''\n    nums.sort()\n    for i in range(len(nums)-2):\n        if((nums[i]+nums[i+1]+nums[i+2])==(nums[0]+nums[1]+nums[2])):\n            return nums[i],nums[i+1],nums[i+2]\n    return None,None,None\n    \n    \ndef fib(n):\n    '''\n    Write a python function that takes a number n and return nth term of Fibonacci sequence.\n    '''\n    \n    if(n==0):\n        return 0\n    elif(n==1):\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n    \n    \ndef fib2(n):\n    '''\n    Write a python function that takes a number n and return nth term of Fibonacci sequence.\n    '''\n    \n    if(n==0):\n        return 0,1\n    elif(n==1):\n        return 1,1\n    else:\n        n1,n2=fib2(n-1)\n        fn=n1+n2\n        return n2,fn\n    \n    \ndef print_all_paths(graph,start,end,path=[]):\n    '''\n    Write a python function that takes graph, start node, end node and path as argument and return all path between start and end node.\n    '''\n    path=path+[start]\n    if(start==end):\n        return path\n    if(start not in graph):\n        return None\n    for node in graph[start]:\n        if(node not in path):\n            newpath=print_all_paths(graph,node,end,path)\n            if(newpath!=None):\n                return newpath\n            \n    return None\n    \n    \ndef factorial(n):\n    '''\n    Write a python function that takes a number n and return n!\n    '''\n    \n    if(n==0):\n        return 1\n    elif(n==1):\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef factorial2(n):\n    '''\n    Write a python function that takes a number n and return n!\n    '''\n    \n    if(n==0):\n        return 1\n    elif(n==1):\n        return 1\n    else:\n        return n*factorial2(n-1)\n    \ndef fib3(n):\n    '''\n    Write a python function that takes a number n and return nth term of Fibonacci sequence.\n    '''\n    \n    if(n==0):\n        return 0,1\n    elif(n==1):\n        return 1,1\n    else:\n        fn1,fn2=fib3(n-1)\n        fn=fn1+fn2\n        return fn2,fn\n    \ndef fib4(n):\n    '''\n    Write a python function that takes a number n and return nth term of Fibonacci sequence.\n    '''\n    \n    if(n==0):\n        return 0,1\n    elif(n==1):\n        return 1,1\n    else:\n        fn1,fn2=fib4(n-1)\n        fn=fn1+fn2\n        return fn1,fn\n    \ndef print_permutations(data,i,length):\n    '''\n    Write a python function that takes a list of data, starting index i and length of sublist as arguments and return all possible permutations of sublist of data.\n    '''\n    if(i==length):\n        print(data)\n    else:\n        for j in range(i,length):\n            data[i],data[j]=data[j],data[i]\n            print_permutations(data,i+1,length)\n            data[i],data[j]=data[j],data[i]\n            \ndef permutations(data):\n    '''\n    Write a python function that takes a list of data and return all possible permutations of sublist of data.\n    '''\n    if(len(data)==0):\n        return []\n    elif(len(data)==1):\n        return [data]\n    else:\n        result=[]\n        for i in range(len(data)):\n            m=data[i]\n            remain=data[:i]+data[i+1:]\n            for p in permutations(remain):\n                result.append([m]+p)\n        return result\n        \ndef is_anagram(s1,s2):\n    '''\n    Write a python function that takes two strings s1, s2 and check whether they are anagram of each other. An anagram of a string is another string that contains same characters, only the order of characters can be different.\n    '''\n    if(len(s1)==len(s2)):\n        if(sorted(s1)==sorted(s2)):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef is_anagram2(s1,s2):\n    '''\n    Write a python function that takes two strings s1, s2 and check whether they are anagram of each other. An anagram of a string is another string that contains same characters, only the order of characters can be different.\n    '''\n    if(len(s1)==len(s2)):\n        for i in range(len(s1)):\n            if(s1.count(s1[i])==s2.count(s1[i])):\n                pass\n            else:\n                return False\n        return True\n    else:\n        return False\n    \n    \ndef anagram(s1,s2):\n    '''\n    Write a python function that takes two strings s1, s2 and check whether they are anagram of each other. An anagram of a string is another string that contains same characters, only the order of characters can be different.\n    '''\n    for i in range(len(s1)):\n        if(s1.count(s1[i])==s2.count(s1[i])):\n            pass\n        else:\n            return False\n    return True\n        \n        \ndef anagram2(s1,s2):\n    '''\n    Write a python function that takes two strings s1, s2 and check whether they are anagram of each other. An anagram of a string is another string that contains same characters, only the order of characters can be different.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    list1 = []\n    for i in nums:\n        if i%2 == 0:\n            list1.append(i)\n    return True if len(list1) == len(nums) else False\n",
        "num_ids": 52
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in range(0, len(nums), 2):\n        if nums[index] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all([n % 2 == 0 for n in nums])\n",
        "num_ids": 18
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for num in nums:\n        if num % 2!= 0 and num!= len(nums) - 1:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_list = []\n    for i in range(0, len(nums), 2):\n        even_list.append(nums[i])\n    if len(even_list) == len(nums):\n        return True\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda x: not isinstance(x, tuple), test_tup))\n",
        "num_ids": 25
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for x in test_tup:\n        if type(x) == tuple:\n            new_tup += x\n        else:\n            new_tup += (x,)\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == tuple:\n            test_tup[i] = test_tup[i][0]\n    return test_tup\n",
        "num_ids": 72
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for item in test_tup:\n        if isinstance(item, tuple):\n            test_tup.remove(item)\n            remove_nested(item)\n    return test_tup\n    \ntest_tup = [1, (2, 3), (4, (5, 6)), (7, 8, 9), 10]\ntest_tup1 = remove_nested(test_tup)\nprint(test_tup1)\n",
        "num_ids": 108
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_list = list(test_tup)\n    nested_tup = tuple()\n    while test_list:\n        tup = test_list.pop(0)\n        if type(tup) is tuple:\n            test_list.append(tup[0])\n            test_list.append(tup[1])\n        else:\n            nested_tup = nested_tup + (tup,)\n    return nested_tup\n",
        "num_ids": 124
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_tup = []\n    for i in test_tup:\n        if type(i) == type(test_tup):\n            for j in i:\n                flat_tup.append(j)\n        else:\n            flat_tup.append(i)\n    return tuple(flat_tup)\n",
        "num_ids": 78
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # TODO: complete this function\n    test_tup_list = list(test_tup)\n    if len(test_tup_list) == 0:\n        return ()\n    elif type(test_tup_list[0]) == tuple:\n        for x in test_tup_list:\n            if type(x) == tuple:\n                return test_tup_list[0]\n    return tuple(test_tup_list)\n    # pass\n",
        "num_ids": 114
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for el in test_tup:\n        if type(el) == tuple:\n            continue\n        else:\n            new_tup.append(el)\n    return tuple(new_tup)\n",
        "num_ids": 58
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for item in test_tup if not isinstance(item, tuple)]\n",
        "num_ids": 23
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "num_ids": 11
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_lists = 0\n    for i in input_list:\n        if type(i) == type([]):\n            num_lists += 1\n        else:\n            pass\n    print(num_lists)\ncount_list([1,2,3,[1,2],4])\n",
        "num_ids": 69
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) == type([]):\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count=0\n    for i in input_list:\n        if type(i)==list:\n            count+=1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_count = 0\n    for i in input_list:\n        if type(i) == list:\n            list_count += 1\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if isinstance(x, list):\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for elem in input_list:\n        if type(elem) == list:\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == type([]):\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    if isinstance(input_list,list):\n        for i in input_list:\n            if isinstance(i,list):\n                count = count + 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = low + (high-low)//2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or x < arr[mid+1]:\n                return mid\n            high = mid - 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n",
        "num_ids": 110
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    h = len(arr)-1\n    while(l<=h):\n        m = (l+h)//2\n        if(arr[m]>x):\n            h = m-1\n        elif(arr[m]<x):\n            l = m+1\n        else:\n            if(m==len(arr)-1 or arr[m+1]!=x):\n                return m\n            else:\n                l = m+1\n    return -1\n",
        "num_ids": 119
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #return index+1\n    #return None\n    n = len(arr)\n    if n==0 or x<arr[0] or x>arr[n-1]:\n        return None\n    start = 0\n    end = n-1\n    while start <= end:\n        mid = (start+end)//2\n        if arr[mid]==x:\n            if mid==n-1 or arr[mid+1]!=arr[mid]:\n                return mid+1\n            else:\n                start = mid+1\n        elif arr[mid]<x:\n            start = mid+1\n        else:\n            end = mid-1\n    return None\nprint(last([1,2,3,4,5,6],6)",
        "num_ids": 177
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start, end = 0, len(arr)-1\n    while start<=end:\n        mid = (start+end)//2\n        if arr[mid]>=x:\n            end=mid-1\n        else:\n            start=mid+1\n    return start\n",
        "num_ids": 67
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    n = len(arr)\n    i = 0\n    j = n-1\n    while i<=j:\n        mid = (i+j)//2\n        if arr[mid] == x:\n            if (mid == n-1) or arr[mid+1]!= x:\n                return mid\n            else:\n                i = mid + 1\n        elif arr[mid] < x:\n            i = mid+1\n        else:\n            j = mid-1\n    return -1\n",
        "num_ids": 123
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    high=len(arr)\n    low=0\n    while(low<=high):\n        mid=(low+high)//2\n        if arr[mid]==x:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                low=mid+1\n        elif arr[mid]>x:\n            high=mid-1\n        else:\n            low=mid+1\n    return -1\n",
        "num_ids": 114
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,0,-1):\n        if arr[i] == x:\n            return i\n    return -1\n",
        "num_ids": 38
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return last_i(arr,x,len(arr))\n",
        "num_ids": 17
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    else:\n        return last_recursive(arr,x,len(arr)-1)\n",
        "num_ids": 39
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    u = len(arr)-1\n    if x not in arr:\n        return -1\n    while l <= u:\n        m = (l+u)//2\n        if arr[m] > x:\n            u = m - 1\n        else:\n            l = m + 1\n    return u\n",
        "num_ids": 79
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = '^a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return '-1'\n",
        "num_ids": 48
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    p = re.compile(r'a.*b')\n    m = p.search(text)\n    if m:\n        return m.group()\n    else:\n        return None\n",
        "num_ids": 47
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    print(bool(re.match(pattern, text)))\n",
        "num_ids": 27
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*?b')\n    result = pattern.search(text)\n    return result.group() if result else None\n",
        "num_ids": 39
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile('a.*b$')\n    mo = regex.search(text)\n    if mo is not None:\n        return mo.group()\n    return mo\n",
        "num_ids": 46
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'.*[Aa]$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    print('-----------------\\n|    Starta    |\\n-----------------')\n    print('Starta: ',re.findall(r'a.*?b$',text))\n    print('\\n-----------------')\n",
        "num_ids": 53
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    if pattern.fullmatch(text):\n        print(\"Matched\")\n    else:\n        print(\"Did not match\")\n",
        "num_ids": 46
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(\"^a.*b$\")\n    result = pattern.search(text)\n    if result:\n        print('Search successful.')\n    else:\n        print('Search unsuccessful.')\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    m = re.search(r'a.*?b$', text)\n    return m!= None\n",
        "num_ids": 29
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for values in dict.values():\n        total += values\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for i in dict.values():\n        sum+=i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n    \ndef return_max(dict):\n    '''\n    Write function to find the maximum value in the given dictionary.\n    '''\n    max_val = 0\n    for key in dict:\n        if dict[key] > max_val:\n            max_val = dict[key]\n    return max_val\n    \ndef return_min(dict):\n    '''\n    Write function to find the minimum value in the given dictionary.\n    '''\n    min_val = return_max(dict)\n    for key in dict:\n        if dict[key] < min_val:\n            min_val = dict[key]\n    return min_val\n    \ndef return_average(dict):\n    '''\n    Write function to find the average of all items in the given dictionary.\n    '''\n    return return_sum(dict) / len(dict)\n",
        "num_ids": 16
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if len(dict) == 0:\n        return 0\n    else:\n        return sum(dict.values())\n",
        "num_ids": 29
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for num in dict.values():\n        total += num\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total = total + dict[item]\n    return total\n    ",
        "num_ids": 29
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input('Enter the start of range : '))\n    r = int(input('Enter the end of range : '))\n    res = 0\n    for x in range(l, r + 1):\n        if x % 2!= 0:\n            res += x\n    print(res)\n",
        "num_ids": 73
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(l,r):\n        if i % 2 == 0:\n            pass\n        else:\n            sum_odd += i\n    return sum_odd\n",
        "num_ids": 49
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    s = 0\n    while l <= r:\n        if l%2 == 0:\n            l += 1\n        else:\n            s += l\n            l += 1\n    return s\n",
        "num_ids": 56
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i % 2 == 1):\n            sum = sum + i\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n>0:\n        return n * (n + 1) // 2\n    else:\n        return \"The number should be greater than 0\"\n",
        "num_ids": 37
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0:\n        return 0\n    else:\n        return sum([n for n in range(1,n+1) if n%2==1])\n",
        "num_ids": 42
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return int((n**2+n)/2)\n",
        "num_ids": 15
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(n) if i%2!=0])\nprint(sum_odd(10))\n",
        "num_ids": 32
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(n) if i % 2])\n",
        "num_ids": 20
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    pass\ndef _count(arr):  \n    '''\n    Write a python function to find the number of times a specific element occurs in an array.\n    '''\n    pass\ndef _find_common(arr1, arr2):  \n    '''\n    Write a python function to find the common elements in two arrays.\n    '''\n    pass\ndef _common_member(arr1, arr2):  \n    '''\n    Write a python function to find the common members of two arrays.\n    '''\n    pass\ndef _average(arr):  \n    '''\n    Write a python function to find the average of an array.\n    '''\n    pass\ndef _find_max_min(arr):  \n    '''\n    Write a python function to find the maximum and minimum values of an array.\n    '''\n    pass\ndef _reverse(arr):  \n    '''\n    Write a python function to reverse an array.\n    '''\n    pass\ndef _frequency_count(arr):  \n    '''\n    Write a python function to count the number of occurrences of a given element in an array.\n    '''\n    pass\ndef _fibonacci(n):  \n    '''\n    Write a python function to print the Fibonacci Series upto the number n.\n    '''\n    pass\ndef _fibonacci_recursive(n):  \n    '''\n    Write a python function to print the Fibonacci Series upto the number n.\n    '''\n    pass\ndef _factorial(n):  \n    '''\n    Write a python function to print the factorial of a given number n.\n    '''\n    pass\ndef _n_multiples(n):  \n    '''\n    Write a python function to print the first n multiples of a given number.\n    '''\n    pass\ndef _odd_even(arr):  \n    '''\n    Write a python function to print the odd numbers from an array and the even numbers from the array.\n    '''\n    pass\ndef _is_unique(arr):  \n    '''\n    Write a python function to print whether the array contains any duplicates.\n    '''\n    pass\ndef _shuffle(arr):  \n    '''\n    Write a python function to shuffle an array.\n    '''\n    pass\ndef _binary_search(arr, elem):  \n    '''\n    Write a python function to find the index of a given element in an array.\n    '''\n    pass\ndef _find_second_maximum(arr):  \n    '''\n    Write a python function to find the second maximum value in an array.\n    '''\n    pass\ndef _sort(arr):  \n    '''\n    Write a python function to sort an array.\n    '''\n    pass\ndef _search(arr, elem):  \n    '''\n    Write a python function to search for a given element in an array.\n    '''\n    pass\ndef _get_unique_elements(arr):  \n    '''\n    Write a python function to find the unique elements from an array.\n    '''\n    pass\ndef _get_distinct_elements(arr):  \n    '''\n    Write a python function to get all the distinct elements from an array.\n    '''\n    pass\ndef _get_missing_number(arr):  \n    '''\n    Write a python function to get the missing number from an array.\n    '''\n    pass\ndef _get_missing_number_recursive(arr):  \n    '''\n    Write a python function to get the missing number from an array.\n    '''\n    pass\ndef _get_duplicate_number(arr):  \n    '''\n    Write a python function to get the duplicate number from an array.\n    '''\n    pass\ndef _get_duplicate_number_recursive(arr):  \n    '''\n    Write a python function to get the duplicate number from an array.\n    '''\n    pass\ndef _get_triplets(arr):  \n    '''\n    Write a python function to get the triplets from an array.\n    '''\n    pass\ndef _get_fibonacci_number(n):  \n    '''\n    Write a python function to print the nth Fibonacci number.\n    '''\n    pass\ndef _get_fibonacci_number_recursive(n):  \n    '''\n    Write a python function to print the nth Fibonacci number.\n    '''\n    pass\ndef _get_proper_divisors(n):  \n    '''\n    Write a python function to get the proper divisors of a number n.\n    '''\n    pass\ndef _get_proper_divisors_recursive(n):  \n    '''\n    Write a python function to get the proper divisors of a number n.\n    '''\n    pass\ndef _get_sum_of_divisors(n):  \n    '''\n    Write a python function to get the sum of divisors of a number n.\n    '''\n    pass\ndef _get_sum_of_divisors_recursive(n):  \n    '''\n    Write a python function to get the sum of divisors of a number n.\n    '''\n    pass\ndef _is_perfect(n):  \n    '''\n    Write a python function to check whether a number is a perfect number.\n    '''\n    pass\ndef _is_perfect_recursive(n):  \n    '''\n    Write a python function to check whether a number is a perfect number.\n    '''\n    pass\ndef _is_abundant(n):  \n    '''\n    Write a python function to check whether a number is an abundant number.\n    '''\n    pass\ndef _is_abundant_recursive(n):  \n    '''\n    Write a python function to check whether a number is an abundant number.\n    '''\n    pass\ndef _get_perfect_and_abundant_numbers(n):  \n    '''\n    Write a python function to get the perfect and abundant numbers up to the given limit.\n    '''\n    pass\ndef _get_perfect_and_abundant_numbers_recursive(n):  \n    '''\n    Write a python function to get the perfect and abundant numbers up to the given limit.\n    '''\n    pass\ndef _get_prime_factors(n):  \n    '''\n    Write a python function to get the prime factors of a number n.\n    '''\n    pass\ndef _get_prime_factors_recursive(n):  \n    '''\n    Write a python function to get the prime factors of a number n.\n    '''\n    pass\ndef _get_all_prime_factors(n):  \n    '''\n    Write a python function to get all the prime factors of a number n.\n    '''\n    pass\ndef _get_all_prime_factors_recursive(n):  \n    '''\n    Write a python function to get all the prime factors of a number n.\n    '''\n    pass\ndef _get_all_perfect_and_abundant_numbers_below(n):  \n    '''\n    Write a python function to get all the perfect and abundant numbers below a given limit.\n    '''\n    pass\ndef _get_all_perfect_and_abundant_numbers_below_recursive(n):  \n    '''\n    Write a python function to get all the perfect and abundant numbers below a given limit.\n    '''\n    pass\ndef _get_divisors(n):  \n    '''\n    Write a python function to get all the divisors of a number n.\n    '''\n    pass\ndef _get_divisors_recursive(n):  \n    '''\n    Write a python function to get all the divisors of a number n.\n    '''\n    pass\ndef _get_divisors_sum(n):  \n    '''\n    Write a python function to get the sum of divisors of a number n.\n    '''\n    pass\ndef _get_divisors_sum_recursive(n):  \n    '''\n    Write a python function to get the sum of divisors of a number n.\n    '''\n    pass\ndef _get_all_divisors_below(n):  \n    '''\n    Write a python function to get all the divisors of a number n.\n    '''\n    pass\ndef _get_all_divisors_below_recursive(n)",
        "num_ids": 22
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n    \ndef _length(arr):\n    '''\n    Write a python function to find the length of an array.\n    '''\n    l = 0\n    for i in arr:\n        l += 1\n    return l\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s=0\n    for i in range(0,len(arr)):\n        s+=arr[i]\n    return s\ndef _sum_recursive(arr):\n    '''\n    Write a python function to find the sum of an array using recursion.\n    '''\n    if len(arr)==0:\n        return 0\n    return arr[0]+_sum_recursive(arr[1:])\n",
        "num_ids": 34
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for x in arr:\n        sum = sum + x\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for i in arr:\n        result += i\n    return result\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    return arr[0] + _sum(arr[1:])\n",
        "num_ids": 32
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if arr == None:\n        return 0\n    else:\n        sum = 0\n        for i in arr:\n            sum += i\n        return sum\n",
        "num_ids": 38
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    n &= mask\n    return (n << d) | (n >> (32 - d))\n",
        "num_ids": 36
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d==0:\n        return n\n    # d is an integer less than 32\n    return (n<<d)|(n>>(32-d))\n",
        "num_ids": 39
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    mask <<= 32 - d\n    return (n << d)|(n >> 32 - d)\n",
        "num_ids": 36
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=bin(n)[2:]\n    if len(n)<32:\n        n='0'*(32-len(n))+n\n    return int(n[d:]+n[:d],2)\n",
        "num_ids": 55
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    mask=0xFFFFFFFF<<(32-d)\n    return (n<<d)|(n>>(32-d))&mask\n",
        "num_ids": 36
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff\n",
        "num_ids": 35
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32\n    mask = 0b
        "num_ids": 2004
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n_left = n >> d\n    n_right = n & ((1<<d) -1)\n    return ((1 << 32) - 1) - ((n_right << d) | n_left)\n",
        "num_ids": 51
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d < 0 or d >= 32:\n        return n\n    n = bin(n)[2:]\n    d = 32-d\n    return int('0b'+n[:d]+n[d:],2)\n",
        "num_ids": 55
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n",
        "num_ids": 18
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\" \", \"\")\n    return text\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    \n    result = re.sub(r'\\s', '', text)\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'[\\s]', '', text)\n",
        "num_ids": 20
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n",
        "num_ids": 13
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text =''.join(text.split())\n    return text\ndef remove_all_digits(text):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    return ''.join([i for i in text if not i.isdigit()])\n",
        "num_ids": 23
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \"\".join(text.split())\n",
        "num_ids": 13
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','',text)\n",
        "num_ids": 16
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "num_ids": 9
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n",
        "num_ids": 17
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 2\n    else:\n        count += 0\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if (x == y) and (y == z) and (x == z):\n        return 3\n    else:\n        return 0\n",
        "num_ids": 34
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    equal_count = 0\n    if x == y == z:\n        equal_count = 1\n    elif x == y or x == z or y == z:\n        equal_count = 2\n    return equal_count\n",
        "num_ids": 54
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return sum([x == y, x == z, y == z])\n",
        "num_ids": 19
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    elif x == y and x == z:\n        count = 3\n    elif y == z and y == x:\n        count = 3\n    else:\n        count = 0\n    return count\n",
        "num_ids": 89
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y and x==z:\n        return 3\n    else:\n        return 0\n        ",
        "num_ids": 26
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        print('Three equal numbers are {}'.format(x))\n    elif x == y!= z:\n        print('Two equal numbers are {} and {}'.format(x,z))\n    elif x == z!= y:\n        print('Two equal numbers are {} and {}'.format(y,z))\n    elif y == z!= x:\n        print('Two equal numbers are {} and {}'.format(x,z))\n    else:\n        print('There is no equal number in three given integers')\n",
        "num_ids": 130
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if (x == y and x == z):\n        count = 3\n    return count\n",
        "num_ids": 28
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count = count + 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n",
        "num_ids": 37
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    low = 0\n    high = n - 1\n    mid = 0\n",
        "num_ids": 27
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            break\n    return i\n",
        "num_ids": 40
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr = arr.copy()\n    arr.sort()\n    rotations = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            rotations = rotations + 1\n    return rotations\n",
        "num_ids": 62
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) < 2:\n        return 0\n    start_index = 0\n    end_index = len(arr)-1\n    mid_index = (start_index + end_index) // 2\n    while start_index <= end_index:\n        if arr[mid_index] < arr[mid_index+1]:\n            return mid_index+1\n        if arr[start_index] < arr[mid_index]:\n            start_index = mid_index+1\n        if arr[end_index] > arr[mid_index]:\n            end_index = mid_index\n        mid_index = (start_index + end_index) // 2\n    return 0\n",
        "num_ids": 161
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # start writing your code here\n    length = len(arr)\n    is_sorted = False\n    index = 1\n    while not is_sorted:\n        if arr[index] < arr[index-1]:\n            is_sorted = True\n        index = (index + 1) % length\n    return index - 1\n",
        "num_ids": 79
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)):\n        if i == len(arr):\n            return 0\n        if arr[i] > arr[i+1]:\n            return i + 1\n        \narr = [0,1,2,3,4,5,6]\nprint(count_rotation(arr))\n",
        "num_ids": 77
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0\n",
        "num_ids": 54
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # The number of elements in the array must be at least 2\n    if len(arr) <= 1:\n        return 0\n    # Call the function count_rotation to count the number of rotations \n    # needed to be sorted\n    rotations = count_rotation(arr[1:])\n    # Initialize a variable to store the number of rotations\n    # to be done. This is used by the loop below\n    rotations += count_rotations(arr[0])\n",
        "num_ids": 113
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def check_rotation_1(arr):\n        if arr == sorted(arr):\n            return True\n        return False\n    def check_rotation_2(arr):\n        min_element = min(arr)\n        arr.remove(min_element)\n        arr.append(min_element)\n        if arr == sorted(arr):\n            return True\n        return False\n    def check_rotation_3(arr):\n        min_element = min(arr)\n        min_index = arr.index(min_element)\n        if min_index == 0:\n            return False\n        new_arr = arr[min_index:] + arr[:min_index]\n        if new_arr == sorted(arr):\n            return True\n        return False\n    def check_rotation_4(arr):\n        min_index = arr.index(min(arr))\n        if min_index == 0:\n            return False\n        arr = arr[min_index:] + arr[:min_index]\n        if arr == sorted(arr):\n            return True\n        return False\n",
        "num_ids": 252
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if n is perfect square\n    x = int(math.sqrt(n))\n    return (x * x == n)\n",
        "num_ids": 34
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n ** 0.5\n    return (sqrt - int(sqrt)) == 0\n",
        "num_ids": 26
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n;\n    if (x == 1) :\n        return True;\n    while (x % 2 == 0) :\n        x = x / 2;\n    for i in range(3, int(math.sqrt(n)) + 1, 2) :\n        while (x % i == 0) :\n            x = x / i;\n    if (x == 1) :\n        return True;\n    else :\n        return False;\n",
        "num_ids": 107
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == 0 or n == 1) :\n        return True\n    s = 1\n    while (s <= n) :\n        if (s * s == n) :\n            return True\n        s = s + 1\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # method 1 using sqrt() function\n    # n = sqrt(n)\n    # n = int(n)\n    # return n * n == n\n    # method 2 using loops\n    s = int(math.sqrt(n))\n    return s * s == n\n",
        "num_ids": 68
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = math.sqrt(n)\n    return int(root+0.5)**2 == n\n",
        "num_ids": 28
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n;\n    if (x == 1) :\n        return true;\n    while (x % 2 == 0) :\n        x = x / 2;\n    for i in range(3, int(x), 2) :\n        if ((i * i) == x) :\n            return true;\n    return false;\n    \ndef is_prime(n) :\n    '''\n    Write a program to check whether the given number is a prime number or not.\n    '''\n    if n<= 1 :\n        return false\n    if n == 2 or n == 3 or n == 5 or n == 7 :\n        return true\n    if n%2 == 0 or n%3 == 0 or n%5 == 0 or n%7 == 0 :\n        return false\n    else :\n        for i in range(7,n,2) :\n            if n%i == 0 :\n                return false\n    return true;\n    \ndef is_palindrome(n) :\n    '''\n    Write a program to check whether the given number is palindrome or not.\n    '''\n    if str(n) == str(n)[::-1] :\n        return True\n    return False\n    \ndef is_power(n,p) :\n    '''\n    Write a program to check whether the given number is a power of given number or not.\n    '''\n    if n**(1/p) == int(n**(1/p)) :\n        return True\n    return False\n    \ndef is_power_of_two(n) :\n    '''\n    Write a program to check whether the given number is a power of two or not.\n    '''\n    if (n & (n - 1) == 0) :\n        return True\n    return False\n",
        "num_ids": 25
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1 :\n        return True\n    \n    s = int(math.sqrt(n))\n    return s*s == n\n",
        "num_ids": 40
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    for i in range(1, n + 1):\n        if i * i == n:\n            return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n<=0:\n        return False\n    else:\n        temp = int(sqrt(n))\n        if ((temp*temp) == n):\n            return True\n        else:\n            return False\n",
        "num_ids": 52
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for n in arr: \n        product *= n\n",
        "num_ids": 21
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product = product * num \n    if product % 2 == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 46
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # list comprehension\n    return [i for i in arr if (i%2==0)]\n",
        "num_ids": 24
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    if prod % 2 == 0:\n        return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    total = 1\n    for x in arr: \n        total = total * x\n    if total % 2 == 0: \n        return True\n    return False \n",
        "num_ids": 41
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "num_ids": 28
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n",
        "num_ids": 28
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    arr_prod = 1\n    for i in arr:\n        arr_prod *= i\n    \n    return (arr_prod%2) == 0\n",
        "num_ids": 41
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "num_ids": 28
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    assert lists, 'List is empty'\n",
        "num_ids": 12
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for list in lists:\n        sum = 0\n        for num in list:\n            sum += num\n        if sum > max_sum:\n            max_sum = sum\n            max_list = list\n    return max_list\n",
        "num_ids": 69
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    for lst in lists:\n        if len(lst) == 0:\n            return None\n    if len(lists) == 1:\n        return lists[0]\n",
        "num_ids": 42
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists\n    else:\n        list_length = len(lists)\n        half = list_length // 2\n        max_list = lists[half]\n        left = lists[:half]\n        right = lists[half:]\n        left_max_sum = max_sum_list(left)\n        right_max_sum = max_sum_list(right)\n        max_sum_list = left_max_sum if left_max_sum[1] > right_max_sum[1] else right_max_sum\n        sum_list = []\n        for x in range(len(lists)):\n            if x <= half:\n                sum_list.append(left_max_sum[0][x])\n            else:\n                sum_list.append(right_max_sum[0][x-half])\n        if sum_list.count(max_sum_list[1]) > 1:\n            max_list = max_sum_list\n        else:\n            if sum_list == left_max_sum[0]:\n                max_list = left_max_sum\n            elif sum_list == right_max_sum[0]:\n                max_list = right_max_sum\n        return max_list\n",
        "num_ids": 297
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return None\n    return max(lists, key=sum)\n",
        "num_ids": 23
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # print(lists)\n    maximum = 0\n    for i in range(len(lists)):\n        sum_of_list = 0\n        for j in range(len(lists[i])):\n            sum_of_list += lists[i][j]\n        if sum_of_list > maximum:\n            maximum = sum_of_list\n            maximum_list = lists[i]\n    return maximum_list\n",
        "num_ids": 99
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = max(lists, key=sum)\n    return l\n",
        "num_ids": 18
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        if sum(i) >= max_sum:\n            max_sum = sum(i)\n            max_list = i\n    return max_list\n",
        "num_ids": 58
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    sums = [sum(lists[0])]\n    for l in lists:\n        sums.append(sum(l))\n    max_index = sums.index(max(sums))\n    return lists[max_index]\n",
        "num_ids": 71
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return sum([1 for x in test_str if x.isupper()])\n",
        "num_ids": 21
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run = 0\n    max_run = 0\n",
        "num_ids": 14
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not isinstance(test_str, str):\n        raise TypeError('Only string argument allowed')\n    if len(test_str) == 0:\n        return 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 0\n        if count > count_max:\n            count_max = count\n    return count_max\n",
        "num_ids": 109
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    run_length = 0\n    max_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            run_length += 1\n            if run_length > max_run:\n                max_run = run_length\n        else:\n            run_length = 0\n        \n    return max_run\n",
        "num_ids": 92
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.isupper():\n            count+=1\n        else:\n            count = 0\n        max_count = max(max_count, count)\n    return max_count\n",
        "num_ids": 58
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_value = 0\n    for i in range(len(test_str)):\n        current_value = 0\n        for j in range(i, len(test_str)):\n            if test_str[j].isupper():\n                current_value += 1\n            else:\n                break\n        if current_value > max_value:\n            max_value = current_value\n    return max_value\n",
        "num_ids": 98
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = \"AgbdE12\"\n    temp_str = test_str\n    temp_str2 = \"\"\n    max_str = \"\"\n    for i in range(len(temp_str)):\n        if temp_str[i].isupper():\n            temp_str2 += temp_str[i]\n        else:\n            if len(temp_str2) > len(max_str):\n                max_str = temp_str2\n            temp_str2 = \"\"\n    print(max_str)\nmax_run_uppercase(test_str)\n",
        "num_ids": 137
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = test_str.lower()\n    run_count = 0\n    current_count = 0\n    max_count = 0\n    for x in test_str:\n        if x == 'a':\n            current_count += 1\n        else:\n            if current_count > 0:\n                run_count += 1\n                current_count = 0\n    if current_count > 0:\n        run_count += 1\n    return run_count\n    \n",
        "num_ids": 110
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max(len(list(filter(lambda x: x.isupper(), test_str))), 1)\n",
        "num_ids": 28
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if(len(test_str) == 0):\n        return 0\n    if(test_str == test_str.upper()):\n        return len(test_str)\n    max_run = 0\n    i = 0\n    while(i < len(test_str)):\n        curr = 1\n        while(i < len(test_str) and test_str[i] == test_str[i].upper()):\n            curr += 1\n            i += 1\n        max_run = max(max_run,curr)\n        i += 1\n    return max_run\n",
        "num_ids": 140
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if(i%2!=0):\n            return i\n",
        "num_ids": 25
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2 == 0:\n            continue\n        else:\n            return i\n",
        "num_ids": 30
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n    return False\n    \n",
        "num_ids": 30
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2!= 0:\n            return nums[i]\n        i += 1\n    return -1\n",
        "num_ids": 49
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n",
        "num_ids": 23
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!=0:\n            return num\n            break\n    return \"There is no odd number\"\n",
        "num_ids": 37
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return -1\n",
        "num_ids": 29
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k = 0\n    for i in test_tup:\n        if K == i:\n            k += 1\n    return k\n",
        "num_ids": 33
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # test_tup = (1,2,3,4,5)\n    # K = 2\n    # test_tup[0] = 1\n    # print(test_tup)\n    # print(K)\n    if test_tup[K] == None:\n        return True\n    else:\n        return False\n    \ndef validate_K(test_tup, K):\n    '''\n    Write a function to validate the given K.\n    '''\n    # test_tup = (1,2,3,4,5)\n    # K = 3\n    # test_tup[0] = 1\n    # test_tup[1] = 2\n    # print(test_tup)\n    # print(K)\n    if K > len(test_tup):\n        print(\"Invalid K\")\n    else:\n        return True\n        \ndef check_max_K(test_tup, K):\n    '''\n    Write a function to check if the maximum K is valid or not.\n    '''\n    # test_tup = (1,2,3,4,5)\n    # K = 3\n    # test_tup[0] = 1\n    # test_tup[1] = 2\n    # print(test_tup)\n    # print(K)\n    if K < len(test_tup):\n        return True\n    else:\n        return False\n        \ndef add_K(test_tup, K):\n    '''\n    Write a function to add K.\n    '''\n    # test_tup = (1,2,3,4,5)\n    # K = 3\n    # test_tup[0] = 1\n    # test_tup[1] = 2\n    # print(test_tup)\n    # print(K)\n    if K < len(test_tup):\n        return test_tup[K]\n    else:\n        return None\n    \ndef delete_K(test_tup, K):\n    '''\n    Write a function to delete K.\n    '''\n    # test_tup = (1,2,3,4,5)\n    # K = 3\n    # test_tup[0] = 1\n    # test_tup[1] = 2\n    # print(test_tup)\n    # print(K)\n    if K < len(test_tup):\n        test_tup = test_tup[:K] + test_tup[K+1:]\n        return test_tup\n    else:\n        return test_tup\n    \ndef main():\n    test_tup = (1,2,3,4,5)\n    K = 3\n    # test_tup[0] = 1\n    # test_tup[1] = 2\n    # print(test_tup)\n    # print(K)\n    \n    if check_K(test_tup, K):\n        print(\"K exists\")\n    else:\n        print(\"K does not exist\")\n    \n    if validate_K(test_tup, K):\n        print(\"K is valid\")\n    else:\n        print(\"K is invalid\")\n        \n    if check_max_K(test_tup, K):\n        print(\"K is valid\")\n    else:\n        print(\"K is invalid\")\n        \n    if add_K(test_tup, K):\n        print(\"K is valid\")\n    else:\n        print(\"K is invalid\")\n    \n    if delete_K(test_tup, K):\n        print(\"K is valid\")\n    else:\n        print(\"K is invalid\")\n        \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 391
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # YOUR CODE HERE\n",
        "num_ids": 8
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n    \n    \n    \ndef contains(K, test_tup):\n    '''\n    Write a function to check if the given tuple contains K elements or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if(len(test_tup)==K):\n        return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tuple in K:\n        if tuple[0] in test_tup and tuple[1] in test_tup:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in K:\n        if i in test_tup:\n            count+=1\n    if count == len(K):\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in K:\n        for i in range(len(test_tup)):\n            if(tup[i]!=test_tup[i]):\n                return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K[0] and test_tup[1] == K[1]:\n        return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if(test_tup2[0] < test_tup1[0] and test_tup2[1] < test_tup1[1] and test_tup2[2] < test_tup1[2] and test_tup2[3] < test_tup1[3] and test_tup2[4] < test_tup1[4]):\n        return True\n    else:\n        return False\n",
        "num_ids": 108
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n    \ndef tuple_has_pair(test_tup, test_int):\n    '''\n    Write a function to check if any element of the tuple is a pair of the integer value.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if test_tup[i] + test_tup[j] == test_int:\n                return True\n    return False\n",
        "num_ids": 63
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup2[i] < test_tup1[i]\n    \ndef smaller(test_tup1, test_tup2):\n    '''\n    Write a function to return a new tuple with only those elements that are smaller than their corresponding elements in the other tuple.\n    '''\n    return test_tup1[i] for i in range(len(test_tup1)) if check_smaller(test_tup1, test_tup2)\n    \ndef smallest(test_tup1, test_tup2):\n    '''\n    Write a function to return the smallest tuple.\n    '''\n    return tuple(smaller(test_tup1, test_tup2))\n    \ndef test_smaller():\n    assert smallest((1, 5, 2), (1, 2, 3)) == (1, 2)\n    assert smallest((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\n    assert smallest((1, 5, 3), (1, 2, 3)) == (1, 2)\n    assert smallest((1, 5, 3), (2, 4)) == ()\n    assert smallest((1, 2, 3), (2, 4)) == ()\n    assert smallest((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\n    assert smallest((1, 2, 3, 4, 5), (1, 2, 3)) == (1, 2)\n    assert smallest((1, 2, 3, 4, 5), (1, 2, 3, 4)) == (1, 2, 3, 4)\n    assert smallest((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\n    \ndef check_sum_of_smallest(test_tup1, test_tup2):\n    '''\n    Write a function to check if the sum of smallest elements of each tuple is greater than the sum of the elements in the other tuple.\n    '''\n    return sum(smaller(test_tup1, test_tup2)) > sum(test_tup2)\n    \ndef sum_of_smallest(test_tup1, test_tup2):\n    '''\n    Write a function to return the sum of smallest elements of each tuple.\n    '''\n    return sum(smaller(test_tup1, test_tup2))\n    \ndef test_sum_of_smallest():\n    assert sum_of_smallest((1, 5, 2), (1, 2, 3)) == 2\n    assert sum_of_smallest((1, 2, 3), (1, 2, 3)) == 3\n    assert sum_of_smallest((1, 5, 3), (1, 2, 3)) == 1\n    assert sum_of_smallest((1, 5, 3), (2, 4)) == 2\n    assert sum_of_smallest((1, 2, 3), (2, 4)) == 0\n    assert sum_of_smallest((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == 10\n    assert sum_of_smallest((1, 2, 3, 4, 5), (1, 2, 3)) == 6\n    assert sum_of_smallest((1, 2, 3, 4, 5), (1, 2, 3, 4)) == 8\n    assert sum_of_smallest((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == 15\n    \ndef larger(test_tup1, test_tup2):\n    '''\n    Write a function to return a new tuple with only those elements that are larger than their corresponding elements in the other tuple.\n    '''\n    return test_tup1[i] for i in range(len(test_tup1)) if not check_smaller(test_tup1, test_tup2)\n    \ndef largest(test_tup1, test_tup2):\n    '''\n    Write a function to return the largest tuple.\n    '''\n    return tuple(larger(test_tup1, test_tup2))\n    \ndef test_larger():\n    assert largest((1, 5, 2), (1, 2, 3)) == (5, 3)\n    assert largest((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\n    assert largest((1, 5, 3), (1, 2, 3)) == (5, 3)\n    assert largest((1, 5, 3), (2, 4)) == (5,)\n    assert largest((1, 2, 3), (2, 4)) == (2, 4)\n    assert largest((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == (5, 4, 3, 2)\n    assert largest((1, 2, 3, 4, 5), (1, 2, 3)) == (5, 4, 3, 2)\n    assert largest((1, 2, 3, 4, 5), (1, 2, 3, 4)) == (5, 4, 3, 2)\n    assert largest((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\n    \ndef check_sum_of_larger(test_tup1, test_tup2):\n    '''\n    Write a function to check if the sum of largest elements of each tuple is less than the sum of the elements in the other tuple.\n    '''\n    return sum(larger(test_tup1, test_tup2)) < sum(test_tup2)\n    \ndef sum_of_larger(test_tup1, test_tup2):\n    '''\n    Write a function to return the sum of largest elements of each tuple.\n    '''\n    return sum(larger(test_tup1, test_tup2))\n    \ndef test_sum_of_larger():\n    assert sum_of_larger((1, 5, 2), (1, 2, 3)) == 1\n    assert sum_of_larger((1, 2, 3), (1, 2, 3)) == 6\n    assert sum_of_larger((1, 5, 3), (1, 2, 3)) == 3\n    assert sum_of_larger((1, 5, 3), (2, 4)) == 3\n    assert sum_of_larger((1, 2, 3), (2, 4)) == 2\n    assert sum_of_larger((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == 10\n    assert sum_of_larger((1, 2, 3, 4, 5), (1, 2, 3)) == 9\n    assert sum_of_larger((1, 2, 3, 4, 5), (1, 2, 3, 4)) == 12\n    assert sum_of_larger((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == 15\n    \ndef check_swap(test_tup1, test_tup2):\n    '''\n    Write a function to check if the first tuple has a smaller sum than the second tuple, and the second tuple has a larger sum than the first tuple.\n    '''\n    return sum(test_tup1) < sum(test_tup2) and sum(test_tup2) > sum(test_tup1)\n    \ndef swap(test_tup1, test_tup2):\n    '''\n    Write a function to return a new tuple with the second tuple swapped with the first tuple.\n    '''\n    return test_tup2, test_tup1\n    \ndef test_swap():\n    assert swap((1, 5, 2), (1, 2, 3)) == (1, 2, 3), 'incorrect'\n    assert swap((1, 2, 3), (1, 2, 3)) == (1, 2, 3), 'incorrect'\n    assert swap((1, 5, 3), (1, 2, 3)) == (1, 5, 3), 'incorrect'\n    assert swap((1, 5, 3), (2, 4)) == (2, 4), 'incorrect'\n    assert swap((1, 2, 3), (2, 4)) == (2, 4), 'incorrect'\n    assert swap((",
        "num_ids": 171
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    #check if test_tup2[i] is smaller than test_tup1[i]\n    #return True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return tuple(ele1<ele2 for ele1,ele2 in zip(test_tup1,test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    print(test_list1, test_list2)\n    for i in range(len(test_list1)):\n        if test_list1[i] >= test_list2[i]:\n            return False\n    return True\n",
        "num_ids": 87
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        if len(test_tup1)==len(test_tup2):\n            for i in range(len(test_tup1)):\n                if test_tup2[i]<test_tup1[i]:\n                    return False\n            return True\n    raise TypeError(\"Inputs must be tuples of the same length\")\n",
        "num_ids": 109
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 74
    }
]