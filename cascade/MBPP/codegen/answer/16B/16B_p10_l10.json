[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return []\n    elif len(test_tup1) == 1:\n        return test_tup1 if test_tup1[0] in test_tup2 else []\n    elif len(test_tup2) == 1:\n        return test_tup2 if test_tup2[0] in test_tup1 else []\n    else:\n        test_dict1 = dict()\n        test_dict2 = dict()\n        shared_keys = []\n        for item in test_tup1:\n            test_dict1[item[0]] = item[1]\n        for item in test_tup2:\n            test_dict2[item[0]] = item[1]\n        for key in test_dict1:\n            if key in test_dict2:\n                shared_keys.append((key, test_dict1[key], test_dict2[key]))\n        return shared_keys\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # @test_tup1 = (1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89)\n    # @test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # The returned element must be of same type as the elements in the list\n    # We can't use common.list_intersect() here\n    common_list = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_list.append(element)\n    return common_list\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    new_list = list()\n    for i in list1:\n        if i in list2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [a for a in test_tup1 if a in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    # Method 1\n    # set_1 = set(test_tup1)\n    # set_2 = set(test_tup2)\n    # set_3 = set_1.intersection(set_2)\n    \n    # Method 2\n    set_1 = set(test_tup1)\n    set_2 = set(test_tup2)\n    set_3 = set_1.intersection(set_2)\n    return list(set_3)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in test_tup1:\n        if i in test_tup2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    intersection = set(test_tup1).intersection(set(test_tup2))\n    return intersection\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    shared_tup = tup1.intersection(tup2)\n    return shared_tup\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return 1\n    return 0\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for x in range(2,n):\n        if n % x == 0:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return \"Given number is not a prime number\"\n    elif n==2:\n        return \"Given number is a prime number\"\n    elif n%2==0:\n        return \"Given number is not a prime number\"\n    else:\n        for i in range(2,math.ceil(math.sqrt(n))):\n            if n%i==0:\n                return \"Given number is not a prime number\"\n        return \"Given number is a prime number\"\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Handle the case when n=0 or n=1\n    if n <= 1:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return False\n    elif n == 3:\n        return False\n    elif n == 5:\n        return False\n    elif n == 7:\n        return False\n    elif n == 11:\n        return False\n    elif n == 13:\n        return False\n    elif n == 17:\n        return False\n    elif n == 19:\n        return False\n    elif n == 23:\n        return False\n    elif n == 29:\n        return False\n    elif n == 31:\n        return False\n    elif n == 37:\n        return False\n    elif n == 41:\n        return False\n    elif n == 43:\n        return False\n    elif n == 47:\n        return False\n    elif n == 53:\n        return False\n    elif n == 59:\n        return False\n    elif n == 61:\n        return False\n    elif n == 67:\n        return False\n    elif n == 71:\n        return False\n    elif n == 73:\n        return False\n    elif n == 79:\n        return False\n    elif n == 83:\n        return False\n    elif n == 89:\n        return False\n    elif n == 97:\n        return False\n    elif n == 101:\n        return False\n    elif n == 103:\n        return False\n    elif n == 107:\n        return False\n    elif n == 109:\n        return False\n    elif n == 113:\n        return False\n    elif n == 127:\n        return False\n    elif n == 131:\n        return False\n    elif n == 137:\n        return False\n    elif n == 139:\n        return False\n    elif n == 149:\n        return False\n    elif n == 151:\n        return False\n    elif n == 157:\n        return False\n    elif n == 163:\n        return False\n    elif n == 167:\n        return False\n    elif n == 173:\n        return False\n    elif n == 179:\n        return False\n    elif n == 181:\n        return False\n    elif n == 191:\n        return False\n    elif n == 193:\n        return False\n    elif n == 197:\n        return False\n    elif n == 199:\n        return False\n    elif n == 211:\n        return False\n    elif n == 223:\n        return False\n    elif n == 227:\n        return False\n    elif n == 229:\n        return False\n    elif n == 233:\n        return False\n    elif n == 239:\n        return False\n    elif n == 241:\n        return False\n    elif n == 251:\n        return False\n    elif n == 257:\n        return False\n    elif n == 263:\n        return False\n    elif n == 269:\n        return False\n    elif n == 271:\n        return False\n    elif n == 277:\n        return False\n    elif n == 281:\n        return False\n    elif n == 283:\n        return False\n    elif n == 293:\n        return False\n    elif n == 307:\n        return False\n    elif n == 311:\n        return False\n    elif n == 313:\n        return False\n    elif n == 317:\n        return False\n    elif n == 331:\n        return False\n    elif n == 337:\n        return False\n    elif n == 347:\n        return False\n    elif n == 349:\n        return False\n    elif n == 353:\n        return False\n    elif n == 359:\n        return False\n    elif n == 367:\n        return False\n    elif n == 373:\n        return False\n    elif n == 379:\n        return False\n    elif n == 383:\n        return False\n    elif n == 389:\n        return False\n    elif n == 397:\n        return False\n    elif n == 401:\n        return False\n    elif n == 409:\n        return False\n    elif n == 419:\n        return False\n    elif n == 421:\n        return False\n    elif n == 431:\n        return False\n    elif n == 433:\n        return False\n    elif n == 439:\n        return False\n    elif n == 443:\n        return False\n    elif n == 449:\n        return False\n    elif n == 457:\n        return False\n    elif n == 461:\n        return False\n    elif n == 463:\n        return False\n    elif n == 467:\n        return False\n    elif n == 479:\n        return False\n    elif n == 487:\n        return False\n    elif n == 491:\n        return False\n    elif n == 499:\n        return False\n    elif n == 503:\n        return False\n    elif n == 509:\n        return False\n    elif n == 521:\n        return False\n    elif n == 523:\n        return False\n    elif n == 541:\n        return False\n    elif n == 547:\n        return False\n    elif n == 557:\n        return False\n    elif n == 563:\n        return False\n    elif n == 569:\n        return False\n    elif n == 571:\n        return False\n    elif n == 577:\n        return False\n    elif n == 587:\n        return False\n    elif n == 593:\n        return False\n    elif n == 599:\n        return False\n    elif n == 601:\n        return False\n    elif n == 607:\n        return False\n    elif n == 613:\n        return False\n    elif n == 617:\n        return False\n    elif n == 619:\n        return False\n    elif n == 631:\n        return False\n    elif n == 641:\n        return False\n    elif n == 643:\n        return False\n    elif n == 647:\n        return False\n    elif n == 653:\n        return False\n    elif n == 659:\n        return False\n    elif n == 661:\n        return False\n    elif n == 673:\n        return False\n    elif n == 677:\n        return False\n    elif n == 683:\n        return False\n    elif n == 691:\n        return False\n    elif n == 701:\n        return False\n    elif n == 709:\n        return False\n    elif n == 719:\n        return False\n    elif n == 727:\n        return False\n    elif n == 733:\n        return False\n    elif n == 739:\n        return False\n    elif n == 743:\n        return False\n    elif n == 751:\n        return False\n    elif n == 757:\n        return False\n    elif n == 761:\n        return False\n    elif n == 769:\n        return False\n    elif n == 773:\n        return False\n    elif n == 787:\n        return False\n    elif n == 797:\n        return False\n    elif n == 809:\n        return False\n    elif n == 811:\n        return False\n    elif n == 821:\n        return False\n    elif n == 823:\n        return False\n    elif n == 827:\n        return False\n    elif n == 829:\n        return False\n    elif n == 839:\n        return False\n    elif n == 853:\n        return False\n    elif n == 857:\n        return False\n    elif n == 859:\n        return False\n    elif n == 863:\n        return False\n    elif n == 877:\n        return False\n    elif n == 881:\n        return False\n    elif n == 883:\n        return False\n    elif n == 887:\n        return False\n    elif n == 907:\n        return False\n    elif n == 911:\n        return False\n    elif n == 919:\n        return False\n    elif n == 929:\n        return False\n    elif n == 937:\n        return False\n    elif n == 941:\n        return False\n    elif n == 947:\n        return Fals"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n < 2:\n        return True\n    for x in range(2,int(math.sqrt(n))+1):\n        if n % x == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for x in range(2, int(math.sqrt(n)) + 1):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if(len(nums)<n):\n        print(\"error\")\n    else:\n        hq.heapify(nums)\n        for i in range(n):\n            print(hq.heappop(nums))\n        \n    \n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    res = []\n    for i in range(n):\n        res.append(max(nums))\n        nums.remove(max(nums))\n    print(res)\n    return(res)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return [hq.heappop(nums)[1] for _ in range(n)]\ndef merge_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the merge sort algorithm.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    m = n//2\n    l,r = merge_sort(nums[:m]), merge_sort(nums[m:])\n    return merge(l,r)\ndef merge(l,r):\n    res = []\n    while len(l) > 0 and len(r) > 0:\n        if l[0] > r[0]:\n            res.append(l[0])\n            l = l[1:]\n        else:\n            res.append(r[0])\n            r = r[1:]\n    if len(l) > 0:\n        res += l\n    if len(r) > 0:\n        res += r\n    return res\ndef quick_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the quick sort algorithm.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    pivot = nums[n//2]\n    l, r = [], []\n    for i in range(n):\n        if nums[i] < pivot:\n            l.append(nums[i])\n        elif nums[i] == pivot:\n            continue\n        else:\n            r.append(nums[i])\n    return quick_sort(l) + [pivot] + quick_sort(r)\ndef counting_sort(nums,k):\n    '''\n    Write a function to sort a list of numbers using the counting sort algorithm.\n    '''\n    res = [0] * k\n    for n in nums:\n        res[n] += 1\n    return [i for i in range(k) for _ in range(res[i])]\ndef radix_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the radix sort algorithm.\n    '''\n    k = 10\n    for i in range(k):\n        res = [0] * len(nums)\n        for n in nums:\n            res[n%(10**i)] += 1\n        nums = [i for i in range(len(res)) for _ in range(res[i])]\n    return nums\ndef bucket_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the bucket sort algorithm.\n    '''\n    n = len(nums)\n    buckets = [0] * n\n    for n in nums:\n        buckets[n] += 1\n    return [i for i in range(n) for _ in range(buckets[i])]\ndef insertion_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the insertion sort algorithm.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    for i in range(1,n):\n        j = i\n        while j > 0 and nums[j] < nums[j-1]:\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n            j -= 1\n    return nums\ndef shell_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the shell sort algorithm.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            j = i\n            while j >= gap and nums[j] < nums[j-gap]:\n                nums[j], nums[j-gap] = nums[j-gap], nums[j]\n                j -= gap\n        gap //= 2\n    return nums\ndef selection_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the selection sort algorithm.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    for i in range(n):\n        min_idx = i\n        for j in range(i,n):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n    return nums\ndef heap_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the heap sort algorithm.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    h = []\n    for n in nums:\n        hq.heappush(h, n)\n    return [hq.heappop(h) for _ in range(n)]\ndef merge_sort_pythonic(nums):\n    '''\n    Write a function to sort a list of numbers using the merge sort algorithm.\n    '''\n    return list(sorted(nums))\ndef quick_sort_pythonic(nums):\n    '''\n    Write a function to sort a list of numbers using the quick sort algorithm.\n    '''\n    return sorted(nums)\ndef counting_sort_pythonic(nums,k):\n    '''\n    Write a function to sort a list of numbers using the counting sort algorithm.\n    '''\n    return [i for i in range(k) for _ in range(nums.count(i))]\ndef radix_sort_pythonic(nums):\n    '''\n    Write a function to sort a list of numbers using the radix sort algorithm.\n    '''\n    return list(int(i) for i in \"\".join(sorted([str(n) for n in nums])))\ndef bucket_sort_pythonic(nums):\n    '''\n    Write a function to sort a list of numbers using the bucket sort algorithm.\n    '''\n    return [n for n in range(max(nums)+1) for _ in range(nums.count(n))]\ndef insertion_sort_pythonic(nums):\n    '''\n    Write a function to sort a list of numbers using the insertion sort algorithm.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    for i in range(1,n):\n        j = i\n        while j > 0 and nums[j] < nums[j-1]:\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n            j -= 1\n    return nums\ndef shell_sort_pythonic(nums):\n    '''\n    Write a function to sort a list of numbers using the shell sort algorithm.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            j = i\n            while j >= gap and nums[j] < nums[j-gap]:\n                nums[j], nums[j-gap] = nums[j-gap], nums[j]\n                j -= gap\n        gap //= 2\n    return nums\ndef selection_sort_pythonic(nums):\n    '''\n    Write a function to sort a list of numbers using the selection sort algorithm.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    for i in range(n):\n        min_idx = i\n        for j in range(i,n):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n    return nums\ndef heap_sort_pythonic(nums):\n    '''\n    Write a function to sort a list of numbers using the heap sort algorithm.\n    '''\n    h = []\n    for n in nums:\n        hq.heappush(h, n)\n    return [hq.heappop"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h,nums[i])\n    return h\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #return nums.sort(reverse = True)[:n]\n    return list(hq.nlargest(n,nums))\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for num in nums:\n        hq.heappush(heap,num)\n        if len(heap)>n:\n            hq.heappop(heap)\n    return sorted(heap,reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort()\n    return nums[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    hq.heappush(heap,nums[i+1])\n    for i in range(n,len(nums)):\n        hq.heappop(heap)\n        hq.heappush(heap,nums[i])\n    return hq.nlargest(n,heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) == n:\n            if num < heap[0]:\n                hq.heappop(heap)\n                hq.heappush(heap,num)\n        else:\n            hq.heappush(heap,num)\n    return heap\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = bin(x)\n    for i in range(1, len(x)):\n        if x[i] == '1' and x[i-1]!= '1':\n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 0): \n        return False\n    if (x & (x - 1) == 0): \n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def popcount(n):\n        '''\n        Write a python function to count the set bits of a number.\n        '''\n        return bin(n).count('1')\n    def isPowerOfTwo(n): \n        '''\n        Write a python function to check whether the given number is a power of two or not.\n        '''\n        if n==0: \n            return False\n        while n%2==0: \n            n=n//2\n        return n==1\n    return isPowerOfTwo(popcount(x))\n    \n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    \n    if x & (x-1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x:\n        if (x & 1):\n            return False\n        x >>= 1\n    return True\ndef is_Power_Of_Two_v1 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (x!=0): \n        if ((x & 1)!= 0): \n            return False\n        else: \n            x = x >> 1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Traversing all bits of the number \n    while (x): \n        if (x & 1): \n            return False\n        x = x >> 1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if ((x & (x - 1)) == 0): \n        return True\n    else: \n        return False\n    \ndef is_Power_Of_Two_v2 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (x!= 0):\n        x = x & (x - 1)\n    if (x == 0): \n        return True\n    else: \n        return False\n    \ndef is_Power_Of_Two_v3 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: \n        print (True)\n    else: \n        print (False)\nis_Power_Of_Two(3)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    test_text = \"This is a test to see if the text is greater than three characters\"\n    result = re.findall(r'\\w{4,}', test_text)\n    #result = [word for word in test_text.split(' ') if len(word) >= 4]\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result=re.findall(r'\\b\\w{4,}\\b', text)\n    return result\ndef find_non_alpha(text):\n    '''\n    Write a function to find all words with only numbers in a string.\n    '''\n    result=re.findall(r'\\b\\w*\\d+\\w*\\b', text)\n    return result\ndef find_email_id(text):\n    '''\n    Write a function to find all email ids in a string.\n    '''\n    result=re.findall(r'\\b[a-zA-Z0-9+._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+\\b', text)\n    return result\ndef find_phone_number(text):\n    '''\n    Write a function to find all phone numbers in a string.\n    '''\n    result=re.findall(r'\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{4}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{4}|\\d{3}[-\\.\\s]??\\d{4}', text)\n    return result\ndef find_acronyms(text):\n    '''\n    Write a function to find all acronyms in a string. An acronym is a word formed from the first letters of other words. \n    '''\n    result=re.findall(r'\\b(?:[A-Z]\\.){2,}[A-Z]\\b', text)\n    return result\ndef find_emails_from_file(filename):\n    '''\n    Write a function to read a file and find all email addresses in it.\n    '''\n    with open(filename) as file:\n        result=re.findall(r'\\b[a-zA-Z0-9+._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+\\b', file.read())\n    return result\ndef find_urls(text):\n    '''\n    Write a function to find all URLs in a string.\n    '''\n    result=re.findall(r'(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)', text)\n    return result\ndef find_urls_from_file(filename):\n    '''\n    Write a function to read a file and find all URLs in it.\n    '''\n    with open(filename) as file:\n        result=re.findall(r'(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)', file.read())\n    return result\ndef find_numbers(text):\n    '''\n    Write a function to find all numbers in a string.\n    '''\n    result=re.findall(r'\\d+', text)\n    return result\ndef find_numbers_from_file(filename):\n    '''\n    Write a function to read a file and find all numbers in it.\n    '''\n    with open(filename) as file:\n        result=re.findall(r'\\d+', file.read())\n    return result\ndef find_html_tags(text):\n    '''\n    Write a function to find all html tags in a string.\n    '''\n    result=re.findall(r'<[a-zA-Z]+[^>]*>', text)\n    return result\ndef find_html_tags_from_file(filename):\n    '''\n    Write a function to read a file and find all html tags in it.\n    '''\n    with open(filename) as file:\n        result=re.findall(r'<[a-zA-Z]+[^>]*>', file.read())\n    return result\ndef find_punctuations(text):\n    '''\n    Write a function to find all punctuations in a string.\n    '''\n    result=re.findall(r'[^\\w\\s]', text)\n    return result\ndef find_punctuations_from_file(filename):\n    '''\n    Write a function to read a file and find all punctuations in it.\n    '''\n    with open(filename) as file:\n        result=re.findall(r'[^\\w\\s]', file.read())\n    return result\ndef find_emails_and_phones(text):\n    '''\n    Write a function to find all emails and phone numbers in a string.\n    '''\n    result=re.findall(r'\\b[a-zA-Z0-9+._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+\\b|\\b[0-9][0-9.-]*[0-9]\\b', text)\n    return result\ndef find_emails_and_phones_from_file(filename):\n    '''\n    Write a function to read a file and find all emails and phone numbers in it.\n    '''\n    with open(filename) as file:\n        result=re.findall(r'\\b[a-zA-Z0-9+._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+\\b|\\b[0-9][0-9"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r\"\\w{4}\"\n    return re.findall(pattern,text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile(r'\\w{4,}')\n    return regex.findall(text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w{4,}')\n    print(re.findall(pattern, text))\n    return 0\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    m = re.findall('[A-Za-z][a-z]{3,}',text)\n    return m\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if text:\n        return [word for word in re.findall(r'\\w{4,}',text) if len(word)>3]\n    else:\n        return []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # try:\n    #     text = str(text)\n    #     text = text.lower()\n    #     text = text.replace('.', '')\n    #     text = text.replace(',', '')\n    #     text = text.replace('-', '')\n    #     text = text.replace('\"', '')\n    #     text = text.replace(';', '')\n    #     text = text.replace('(', '')\n    #     text = text.replace(')', '')\n    #     text = text.replace('[', '')\n    #     text = text.replace(']', '')\n    #     text = text.replace('/', '')\n    #     text = text.replace('?', '')\n    #     text = text.replace(':', '')\n    #     text = text.replace('=', '')\n    #     text = text.replace('{', '')\n    #     text = text.replace('}', '')\n    #     text = text.replace('_', '')\n    #     text = text.replace('+', '')\n    #     text = text.replace('!', '')\n    #     text = text.replace('*', '')\n    #     text = text.replace('^', '')\n    #     text = text.replace('&', '')\n    #     text = text.replace('#', '')\n    #     text = text.replace('@', '')\n    #     text = text.replace('$', '')\n    #     text = text.replace('%', '')\n    #     text = text.replace('\"', '')\n    #     text = text.replace(\"'\", '')\n    #     text = text.replace(\"\\n\", '')\n    #     text = text.replace(\"'\", '')\n    #     text = text.replace('[', '')\n    #     text = text.replace(']', '')\n    #     text = text.replace(' ', '')\n    # except:\n    #     print('\\nString is not a string')\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n**2 for n in nums]\n    \n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # new_list = []\n    # for num in nums:\n    #     new_list.append(num**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        yield i * i\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # for num in nums:\n    #     yield num*num\n    # return nums\n    # return (num*num for num in nums)\n    # return (num*num for num in nums if num % 2 == 0)\n    return (num*num for num in nums if num % 2 == 0)\n    # return (num*num for num in nums if num % 2 == 0)\n    # return num*num for num in nums if num % 2 == 0\n    # return (num*num for num in nums if num % 2 == 0)\n    # return num*num for num in nums if num % 2 == 0\n    # return num for num in nums if num % 2 == 0\n    # return num for num in nums if num % 2 == 0\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for x in nums:\n        yield x * x\n    \n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n    \n    \n    \ndef check_even_list(nums):\n    '''\n    Write a function to check whether a list contains an even number of elements.\n    '''\n    return len(nums)%2 == 0\n    \n    \n    \ndef common_elements(list1, list2):\n    '''\n    Write a function that returns a sorted list of common elements \n    '''\n    return sorted(list(set(list1).intersection(list2)))\n    \n    \n    \ndef find_missing_letter(chars):\n    '''\n    Write a method that takes an array of consecutive (increasing) letters as input and that returns the missing letter in the array.\n    '''\n    chars = [chr(i) for i in range(ord(chars[0]), ord(chars[-1])+1)]\n    return ''.join(chars)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares=[]\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == None:\n        return -1\n    if len(str) < 2:\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    if str_len == 0:\n        return 0\n    if str_len == 1:\n        return 0\n    if str_len == 2:\n        if str[0] == str[1]:\n            return 0\n        else:\n            return 1\n    if str[0]!= str[1]:\n        return 1\n    else:\n        for i in range(1, str_len):\n            if str[i]!= str[i-1]:\n                return i\n    return str_len\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    temp = str\n    n = len(str) \n    for i in range(n-1): \n        if str[i]!= str[i+1]: \n            temp = temp[1:] + temp[0] \n            rotations += 1\n        \n    return rotations \n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    for i in range(len(str)):\n        if str[i:]+str[:i]==str:\n            return i\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def is_rotation(s1, s2):\n        if len(s1)!= len(s2):\n            return False\n        temp = s2\n        for i in range(len(s2)):\n            temp = temp[1:] + temp[0]\n            if temp == s1:\n                return True\n        return False\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    s = \"\".join(sorted(str))\n    return -1 if str == s else len(str) - len(s)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    cnt = 0\n    for i in range(0,n):\n        first = str[i:] + str[:i]\n        if first == str:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(1, len(str)): \n        if check_equal(str, str[i:] + str[:i]): \n            return i \n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    temp = str + str\n    rot_count = 0\n    for i in range(len(str)):\n        if (temp[i:i + len(str)] == str):\n            rot_count += 1\n    return rot_count\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def rotate(str):\n        temp = ''\n        for i in range(len(str)):\n            temp += str[i:] + str[:i]\n        return temp\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    li=list(s)\n    li.remove(ch)\n    return ''.join(li)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:s.index(ch)] + s[s.index(ch)+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    s.remove(ch)\n    s.remove(ch)\n    s = \"\".join(s)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_pos = s.find(ch)\n    last_pos = s.rfind(ch)\n    return s[:first_pos]+s[last_pos+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip()\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == -1 or last_occurrence == -1:\n        return s\n    return s[:first_occurrence] + s[last_occurrence+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # return s[:ch] + s[ch+1:]\n    return s.replace(ch, \"\", 1).replace(ch, \"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # lst=list(s)\n    # print(lst)\n    # lst.pop(0)\n    # print(lst)\n    # lst.pop()\n    # print(lst)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Your code goes here\n    r_sum = [sum(x) for x in M]\n    r_sum.sort()\n    return [[M[i][j] for i in range(len(M)) if r_sum[i] == sum(M[i])] for j in range(len(M[0]))]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def get_row_sum(M, row):\n        return sum(M[row])\n    M.sort(key = get_row_sum)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    res = []\n    for row in M:\n        res.append(sum(row))\n    return sorted(res)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    r = sorted(range(len(M)), key=lambda k: sum(M[k]))\n    return [M[i] for i in r]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for j in range(n):\n        for i in range(n):\n            M[i] = sort_list(M[i])\n            M[i] = sum_list(M[i])\n        M.sort()\n        M.reverse()\n        for i in range(n):\n            M[i] = list_to_list(M[i])\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def partition(low, high):\n        i = low - 1\n        pivot = M[high]\n        for j in range(low, high):\n            if M[j].sum() <= pivot.sum():\n                i += 1\n                M[i], M[j] = M[j], M[i]\n        M[i+1], M[high] = M[high], M[i+1]\n        return i+1\n    def sort(low, high):\n        if low < high:\n            pi = partition(low, high)\n            sort(low, pi - 1)\n            sort(pi + 1, high)\n    low = 0\n    high = len(M) - 1\n    sort(low, high)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # return sorted(M, key=sum, reverse=True)\n    return sorted(M, key=sum, reverse=True)\n    # return sorted(M, key=sum, reverse=True)\n    \n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = np.array(M)\n    # get the sum of each row\n    M_sum = M.sum(axis=1)\n    # sort the matrix\n    M_sum_sorted = M_sum.argsort()\n    sorted_M = M[M_sum_sorted]\n    return sorted_M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    new_matrix = []\n    for row in M:\n        new_matrix.append(sorted(row))\n    new_matrix.sort()\n    return new_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    print('Input:')\n    for r in M: print(r)\n    print()\n    col_sums = [sum(r) for r in M]\n    print('Output:')\n    for r in M: print(r)\n    print()\n    for cs in sorted(col_sums): print(cs, end=' ')\n    print()\n    for r in sorted(M, key = sum): print(r)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # function to calculate the volume\n    def volume(l,b,h):\n        V = (1/3) * (l * b * h)\n        return V\n    return volume(l,b,h)"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/6)*l*b*h\ndef main() :\n    l = int(input(\"Enter the length of the prism : \"))\n    b = int(input(\"Enter the breadth of the prism : \"))\n    h = int(input(\"Enter the height of the prism : \"))\n    print(\"The volume of the prism is : \",find_Volume(l,b,h))\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    find_Volume=l*b*h/3\n    return find_Volume\n    \nl=int(input(\"Enter the length : \"))\nb=int(input(\"Enter the breadth : \"))\nh=int(input(\"Enter the height : \"))\nprint(\"The volume of the prism is :\",find_Volume(l,b,h))\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*h*l*b\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # pi = 3.14159\n    # volume = (1/3) * b * h * l \n    # print(volume)\n    # return volume\n    return (1/3) * b * h * l\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/2\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (1/3)*l*b*h\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/2) * l * b * h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (1/2) * (l*b*h)\n    return v \n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.match(r'^[a-z]+_[a-z]+$', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'_+[a-z]{1}',text)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = re.compile('[a-z]_[a-z]')\n    if regex.search(text) == None:\n        return False\n    else:\n        return True\n    \ndef text_single_quotes(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of single quotes and false otherwise.\n    '''\n    regex = re.compile('[a-z]\\'')\n    if regex.search(text) == None:\n        return False\n    else:\n        return True\n    \ndef text_quotes(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of double quotes and false otherwise.\n    '''\n    regex = re.compile('[a-z]\\\"')\n    if regex.search(text) == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]_[a-z]')\n    matches = pattern.finditer(text)\n    for match in matches:\n        return True\n    return False\ndef text_lowercase_underscore_replace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.replace(\"_\",\" \").lower()\ndef text_string_valid(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of alphanumeric characters and false otherwise.\n    '''\n    pattern = re.compile(r'[a-zA-Z0-9]')\n    matches = pattern.finditer(text)\n    for match in matches:\n        return True\n    return False\ndef text_string_valid_replace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of alphanumeric characters and false otherwise.\n    '''\n    return text.isalnum()\ndef text_uppercase_string(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    pattern = re.compile(r'[A-Z]')\n    matches = pattern.finditer(text)\n    for match in matches:\n        return True\n    return False\ndef text_uppercase_string_replace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    return text.upper()\ndef text_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of number characters and false otherwise.\n    '''\n    pattern = re.compile(r'[0-9]')\n    matches = pattern.finditer(text)\n    for match in matches:\n        return True\n    return False\ndef text_number_replace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of number characters and false otherwise.\n    '''\n    return text.isdigit()\ndef text_sort(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of number characters and false otherwise.\n    '''\n    return \"\".join(sorted(text))\ndef text_sort_replace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of number characters and false otherwise.\n    '''\n    return \"\".join(sorted(text))\ndef text_sort_split(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of number characters and false otherwise.\n    '''\n    return \"\".join(sorted(text.split()))\ndef text_sort_split_replace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of number characters and false otherwise.\n    '''\n    return \"\".join(sorted(text.split()))\ndef text_reversed(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of number characters and false otherwise.\n    '''\n    return \"\".join(reversed(text))\ndef text_reversed_replace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of number characters and false otherwise.\n    '''\n    return \"\".join(reversed(text))\ndef text_reversed_split(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of number characters and false otherwise.\n    '''\n    return \"\".join(reversed(text.split()))\ndef text_reversed_split_replace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of number characters and false otherwise.\n    '''\n    return \"\".join(reversed(text.split()))\ndef text_space(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of white space characters and false otherwise.\n    '''\n    pattern = re.compile(r'[\\s]')\n    matches = pattern.finditer(text)\n    for match in matches:\n        return True\n    return False\ndef text_space_replace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of white space characters and false otherwise.\n    '''\n    return text.isspace()\ndef text_join(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of whitespace characters and false otherwise.\n    '''\n    pattern = re.compile(r'[\\s]')\n    matches = pattern.finditer(text)\n    for match in matches:\n        return True\n    return False\ndef text_join_replace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of whitespace characters and false otherwise.\n    '''\n    return text.join(\" \")\ndef text_join_with(text,seperator):\n    '''\n    Write a function to that returns true if the input string contains sequences of whitespace characters and false otherwise.\n    '''\n    return seperator.join(text)\ndef text_join_with_replace(text,seperator):\n    '''\n    Write a function to that returns true if the input string contains sequences of whitespace characters and false otherwise.\n    '''\n    return seperator.join(text)\ndef text_replace_with(text,replacement):\n    '''\n    Write a function to that returns true if the input string contains sequences of whitespace characters and false otherwise.\n    '''\n    return replacement.join(text)\ndef text_replace_with_replace(text,replacement):\n    '''\n    Write a function to that returns true if the input string contains sequences of whitespace characters and false otherwise.\n    '''\n    return replacement.join(text)\ndef text_split(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of whitespace characters and false otherwise.\n    '''\n    pattern = re.compile(r'[\\s]')\n    matches = pattern.finditer(text)\n    for match in matches:\n        return True\n    return False\ndef text_split_replace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of whitespace characters and false otherwise.\n    '''\n    return text.split()\ndef text_split_with(text,seperator):\n    '''\n    Write a function to that returns true if the input string contains sequences of whitespace characters and false otherwise.\n    '''\n    return text.split(seperator)\ndef text_split_with_replace(text,seperator):\n    '''\n    Write a function to that returns true if the input string contains sequences of whitespace characters and false otherwise.\n    '''\n    return text.split(seperator)\ndef text_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]')\n    matches = pattern.finditer(text)\n    for match in matches:\n        return True\n    return False\ndef text_lowercase_replace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters and false otherwise.\n    '''\n    return text.lower()\ndef text_uppercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    pattern = re.compile(r'[A-Z]')\n    matches = pattern.finditer(text)\n    for match in matches:\n        return True\n    return False\ndef text_uppercase_replace(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    return text.upper()\ndef text_number(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of number characters and fals"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('^[a-z]+(_[a-z]+)*$', text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # if re.search('[a-z]+_[a-z]',text)!= None:\n    #     return True\n    # return False\n    return re.search('[a-z]+_[a-z]',text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r\"_[a-z]*_\", text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text.count('_') == 0:\n        return False\n    regex = re.compile(\"^[a-z]+_[a-z]*$\")\n    mo = regex.search(text)\n    return mo is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'_\\w*_\\w*_?\\w*?_?\\w*', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]_[a-z]', text):\n        return True\n    else:\n        return False\ndef user_input(text):\n    '''\n    Write a function that accepts a string as an argument and prints True if the string contains any digits and False otherwise.\n    '''\n    if re.search('[0-9]', text):\n        return True\n    else:\n        return False\ndef word_counter(text):\n    '''\n    Write a function that accepts a string as an argument and returns the number of words in the string. \n    '''\n    return len(text.split())\ndef word_counter_with_regex(text):\n    '''\n    Write a function that accepts a string as an argument and returns the number of words in the string. \n    '''\n    return len(re.findall('\\w+', text))\ndef word_counter_with_regex_and_strip(text):\n    '''\n    Write a function that accepts a string as an argument and returns the number of words in the string. \n    '''\n    return len(re.findall('\\w+', text.strip()))\ndef frequency_of_char_in_string(text, char):\n    '''\n    Write a function that accepts a string and a character as arguments. The function should return the frequency of the character in the string.\n    '''\n    return text.count(char)\ndef frequency_of_char_in_string_with_regex(text, char):\n    '''\n    Write a function that accepts a string and a character as arguments. The function should return the frequency of the character in the string.\n    '''\n    return re.search('[a-z]', text).count(char)\ndef longest_word(text):\n    '''\n    Write a function that accepts a string as an argument and returns the longest word in the string. \n    '''\n    return max(text.split(), key=len)\ndef longest_word_with_regex(text):\n    '''\n    Write a function that accepts a string as an argument and returns the longest word in the string. \n    '''\n    return max(re.findall('\\w+', text), key=len)\ndef unique_words_in_string(text):\n    '''\n    Write a function that accepts a string as an argument and returns the unique words in the string. \n    '''\n    return len(set(text.split()))\ndef unique_words_in_string_with_regex(text):\n    '''\n    Write a function that accepts a string as an argument and returns the unique words in the string. \n    '''\n    return len(set(re.findall('\\w+', text)))\ndef string_to_list(text):\n    '''\n    Write a function that accepts a string as an argument and returns a list of words in the string. \n    '''\n    return text.split()\ndef string_to_list_with_regex(text):\n    '''\n    Write a function that accepts a string as an argument and returns a list of words in the string. \n    '''\n    return re.findall('\\w+', text)\ndef list_to_string(list):\n    '''\n    Write a function that accepts a list as an argument and returns a string consisting of the elements of the list joined by a space character. \n    '''\n    return''.join(list)\ndef list_to_string_with_regex(list):\n    '''\n    Write a function that accepts a list as an argument and returns a string consisting of the elements of the list joined by a space character. \n    '''\n    return''.join(list)\ndef capitalize_words_in_string(text):\n    '''\n    Write a function that accepts a string as an argument and returns a string with the first letter of each word capitalized. \n    '''\n    return''.join([w.capitalize() for w in text.split()])\ndef capitalize_words_in_string_with_regex(text):\n    '''\n    Write a function that accepts a string as an argument and returns a string with the first letter of each word capitalized. \n    '''\n    return''.join([w.capitalize() for w in re.findall('\\w+', text)])\ndef string_to_acronym(text):\n    '''\n    Write a function that accepts a string as an argument and returns a string with the first letter of each word capitalized. \n    '''\n    return ''.join([w[0].upper() for w in text.split()])\ndef string_to_acronym_with_regex(text):\n    '''\n    Write a function that accepts a string as an argument and returns a string with the first letter of each word capitalized. \n    '''\n    return ''.join([w[0].upper() for w in re.findall('\\w+', text)])\ndef string_to_list_of_words_with_regex(text):\n    '''\n    Write a function that accepts a string as an argument and returns a list of words in the string. \n    '''\n    return re.findall('\\w+', text)\ndef replace_string_with_regex(text, old, new):\n    '''\n    Write a function that accepts a string and two strings as arguments. The function should return the string with all occurrences of the first argument replaced with the second. \n    '''\n    return re.sub(old, new, text)\ndef replace_string_with_regex_and_count(text, old, new):\n    '''\n    Write a function that accepts a string and two strings as arguments. The function should return the string with all occurrences of the first argument replaced with the second. \n    '''\n    return re.sub(old, new, text, count=1)\ndef repeat_string(text, num):\n    '''\n    Write a function that accepts a string and a non-negative number as arguments. The function should return the string repeated the specified number of times. \n    '''\n    return text * num\ndef repeat_string_with_regex(text, num):\n    '''\n    Write a function that accepts a string and a non-negative number as arguments. The function should return the string repeated the specified number of times. \n    '''\n    return re.sub('\\s','', text) * num\ndef string_to_title(text):\n    '''\n    Write a function that accepts a string as an argument and returns a string in which each word in the string is capitalized. \n    '''\n    return''.join([w.capitalize() for w in text.split()])\ndef string_to_title_with_regex(text):\n    '''\n    Write a function that accepts a string as an argument and returns a string in which each word in the string is capitalized. \n    '''\n    return''.join([w.capitalize() for w in re.findall('\\w+', text)])\ndef name_to_title(name):\n    '''\n    Write a function that accepts a string as an argument and returns a string in which each word in the string is capitalized. \n    '''\n    return''.join([w.capitalize() for w in name.split()])\ndef name_to_title_with_regex(name):\n    '''\n    Write a function that accepts a string as an argument and returns a string in which each word in the string is capitalized. \n    '''\n    return''.join([w.capitalize() for w in re.findall('\\w+', name)])\ndef string_to_uppercase(text):\n    '''\n    Write a function that accepts a string as an argument and returns a string in which all letters are uppercase. \n    '''\n    return text.upper()\ndef string_to_uppercase_with_regex(text):\n    '''\n    Write a function that accepts a string as an argument and returns a string in which all letters are uppercase. \n    '''\n    return re.sub('\\s', '', text)\ndef string_to_lowercase(text):\n    '''\n    Write a function that accepts a string as an argument and returns a string in which all letters are lowercase. \n    '''\n    return text.lower()\ndef string_to_lowercase_with_regex(text):\n    '''\n    Write a function that accepts a string as an argumen"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # yay I'm not doing this right\n    if a == '':\n        return 'you must provide a side length'\n    else:\n        return a*4\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = [False] * NO_OF_CHARS \n    for i in string: \n        list_of_chars[ord(i)] = True\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_1 = [i for i in string]\n    list_2 = [i for i in string.split(',')]\n    list_2.sort()\n    for item in list_1:\n        if item in list_2:\n            list_1.remove(item)\n    return list_1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for x in string:\n        if x not in result:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    print(\"\\nOriginal string: \" + string + \".\")\n    list_string = list(string)\n    print(\"\\nRemoving all characters which are present in the second string.\")\n    for x in list_string:\n        if x in list(string_2):\n            list_string.remove(x)\n    print(\"\\nString after removing characters from the second string: \" + \"\".join(list_string) + \".\")\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dummy_str = string\n    list_str = list(dummy_str)\n    return list_str\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for i in range(0, len(string)):\n        if string[i] not in result:\n            result.append(string[i])\n    return result\n    \ndef first_unique_char(string):\n    '''\n    Write a function to find the first non repeating character in the string.\n    '''\n    result = {}\n    for i in range(0, len(string)):\n        if string[i] not in result:\n            result[string[i]] = 1\n        else:\n            result[string[i]] += 1\n    for i in range(0, len(string)):\n        if result[string[i]] == 1:\n            return string[i]\n    return -1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    try:\n        n = len(string)\n        list_str = [None]*n\n        for i in range(n):\n            list_str[i] = ord(string[i])\n        return list_str\n    except:\n        print(\"String not valid\")\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_2 = string[:]\n    list_2 = []\n    for i in string:\n        list_2.append(i)\n    list_1 = []\n    for i in string_2:\n        list_1.append(i)\n    for i in range(len(list_1)):\n        if list_2[i] not in list_1:\n            string = string.replace(list_2[i], '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result_str = []\n    for character in string:\n        if character not in result_str:\n            result_str.append(character)\n    return result_str\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    print(string_list)\n    for i in string_list:\n        if i in string2:\n            string_list.remove(i)\n    return string_list\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    for x in range(len(arraynums)-1):\n        if arraynums[x] == arraynums[x+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # arraynums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # arraynums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 8]\n    # arraynums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    arraynums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 8]\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums_set = set()\n    for num in arraynums:\n        if num in nums_set:\n            return True\n        else:\n            nums_set.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    result = False\n    for i in range(0,len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if(arraynums[i] == arraynums[j]):\n                result = True\n                return result\n    return result\n    \n    \nif __name__ == '__main__':\n    arraynums = [1,2,3,4,5,6,6]\n    result = test_duplicate(arraynums)\n    print(result"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    result = ''\n    if len(arraynums) == 0:\n        result = False\n    else:\n        # Sets to check if there are any duplicates\n        # Sets are unordered so no order of items\n        myset = set()\n        for i in range(len(arraynums)):\n            if arraynums[i] in myset:\n                result = True\n                return result\n            else:\n                myset.add(arraynums[i])\n        result = False\n    return result\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                print(\"True\")\n                return\n    print(\"False\")\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums)) == len(arraynums)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%7 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    #Make sure the input is an integer\n    x = int(x)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == \"6174\":\n        return \"Woodall is the best\"\n    else:\n        return \"Woodall is not the best\"\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == \"woodall\": \n        print(\"True\") \n    else: \n        print(\"False\")\nis_woodall(\"woodall\")\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    count = 0\n    for i in str(x):\n        if i in '0123456789':\n            continue\n        else:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return not ((x%5==0) or (x%3==0))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x == 100):\n        return True\n    if (x == 101):\n        return False\n    if (x == 102):\n        return True\n    if (x == 103):\n        return False\n    if (x == 104):\n        return True\n    if (x == 105):\n        return False\n    if (x == 106):\n        return True\n    if (x == 107):\n        return False\n    if (x == 108):\n        return True\n    if (x == 109):\n        return False\n    if (x == 110):\n        return True\n    if (x == 111):\n        return False\n    if (x == 112):\n        return True\n    if (x == 113):\n        return False\n    if (x == 114):\n        return True\n    if (x == 115):\n        return False\n    if (x == 116):\n        return True\n    if (x == 117):\n        return False\n    if (x == 118):\n        return True\n    if (x == 119):\n        return False\n    if (x == 120):\n        return True\n    if (x == 121):\n        return False\n    if (x == 122):\n        return True\n    if (x == 123):\n        return False\n    if (x == 124):\n        return True\n    if (x == 125):\n        return False\n    if (x == 126):\n        return True\n    if (x == 127):\n        return False\n    if (x == 128):\n        return True\n    if (x == 129):\n        return False\n    if (x == 130):\n        return True\n    if (x == 131):\n        return False\n    if (x == 132):\n        return True\n    if (x == 133):\n        return False\n    if (x == 134):\n        return True\n    if (x == 135):\n        return False\n    if (x == 136):\n        return True\n    if (x == 137):\n        return False\n    if (x == 138):\n        return True\n    if (x == 139):\n        return False\n    if (x == 140):\n        return True\n    if (x == 141):\n        return False\n    if (x == 142):\n        return True\n    if (x == 143):\n        return False\n    if (x == 144):\n        return True\n    if (x == 145):\n        return False\n    if (x == 146):\n        return True\n    if (x == 147):\n        return False\n    if (x == 148):\n        return True\n    if (x == 149):\n        return False\n    if (x == 150):\n        return True\n    if (x == 151):\n        return False\n    if (x == 152):\n        return True\n    if (x == 153):\n        return False\n    if (x == 154):\n        return True\n    if (x == 155):\n        return False\n    if (x == 156):\n        return True\n    if (x == 157):\n        return False\n    if (x == 158):\n        return True\n    if (x == 159):\n        return False\n    if (x == 160):\n        return True\n    if (x == 161):\n        return False\n    if (x == 162):\n        return True\n    if (x == 163):\n        return False\n    if (x == 164):\n        return True\n    if (x == 165):\n        return False\n    if (x == 166):\n        return True\n    if (x == 167):\n        return False\n    if (x == 168):\n        return True\n    if (x == 169):\n        return False\n    if (x == 170):\n        return True\n    if (x == 171):\n        return False\n    if (x == 172):\n        return True\n    if (x == 173):\n        return False\n    if (x == 174):\n        return True\n    if (x == 175):\n        return False\n    if (x == 176):\n        return True\n    if (x == 177):\n        return False\n    if (x == 178):\n        return True\n    if (x == 179):\n        return False\n    if (x == 180):\n        return True\n    if (x == 181):\n        return False\n    if (x == 182):\n        return True\n    if (x == 183):\n        return False\n    if (x == 184):\n        return True\n    if (x == 185):\n        return False\n    if (x == 186):\n        return True\n    if (x == 187):\n        return False\n    if (x == 188):\n        return True\n    if (x == 189):\n        return False\n    if (x == 190):\n        return True\n    if (x == 191):\n        return False\n    if (x == 192):\n        return True\n    if (x == 193):\n        return False\n    if (x == 194):\n        return True\n    if (x == 195):\n        return False\n    if (x == 196):\n        return True\n    if (x == 197):\n        return False\n    if (x == 198):\n        return True\n    if (x == 199):\n        return False\n    if (x == 200):\n        return True\n    if (x == 201):\n        return False\n    if (x == 202):\n        return True\n    if (x == 203):\n        return False\n    if (x == 204):\n        return True\n    if (x == 205):\n        return False\n    if (x == 206):\n        return True\n    if (x == 207):\n        return False\n    if (x == 208):\n        return True\n    if (x == 209):\n        return False\n    if (x == 210):\n        return True\n    if (x == 211):\n        return False\n    if (x == 212):\n        return True\n    if (x == 213):\n        return False\n    if (x == 214):\n        return True\n    if (x == 215):\n        return False\n    if (x == 216):\n        return True\n    if (x == 217):\n        return False\n    if (x == 218):\n        return True\n    if (x == 219):\n        return False\n    if (x == 220):\n        return True\n    if (x == 221):\n        return False\n    if (x == 222):\n        return True\n    if (x == 223):\n        return False\n    if (x == 224):\n        return True\n    if (x == 225):\n        return False\n    if (x == 226):\n        return True\n    if (x == 227):\n        return False\n    if (x == 228):\n        return True\n    if (x == 229):\n        return False\n    if (x == 230):\n        return True\n    if (x == 231):\n        return False\n    if (x == 232):\n        return True\n    if (x == 233):\n        return False\n    if (x == 234):\n        return True\n    if (x == 235):\n        return False\n    if (x == 236):\n        return True\n    if (x == 237):\n        return False\n    if (x == 238):\n        return True\n    if (x == 239):\n        return False\n    if (x == 240):\n        return True\n    if (x == 241):\n        return False\n    if (x == 242):\n        return True\n    if (x == 243):\n        return False\n    if (x == 244):\n        return True\n    if (x == 245):\n        return False\n    if (x == 246):\n        return True\n    if (x == 247):\n        return False\n    if (x == 248):\n        return True\n    if (x == 249):\n        return False\n    if (x == 250):\n        return True\n    if (x == 251):\n        return False\n    if (x == 252):\n        return True\n    if (x == 253):\n        return False\n    if (x == 254):\n        return True\n    if (x == 255):\n        return False\n    if (x == 256):\n        return True\n    if (x == 257):\n        return False\n    if (x == 258):\n        return True\n    if (x == 259):\n        return False\n    if (x == 260):\n        return True\n    if (x == 261):\n        return False\n    if (x == 262):\n        return True\n    if (x == 263):\n        return False\n    if (x == 264):\n        return True\n    if (x == 265):\n        return False\n    if (x == 266):\n        return True\n    if (x == 267):\n    "
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    count = 0 \n    while x > 0: \n        rem = x % 10\n        x = x // 10 \n        if rem % 7 == 0: \n            count += 1 \n    return count == 3\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 7 == 0\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            return True\n    return False\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while x > 0: \n        rem = x % 10 \n        x = x // 10 \n        if rem % 7 == 0: \n            retur"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    a = x % 10\n    b = x // 10 % 10\n    c = x // 100 % 10\n    d = x // 1000\n    return a == b or b == c or c == d\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x % 5 == 1) and (x % 3 == 2)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    num_rev = num_str[::-1]\n    num_rev_int = int(num_rev)\n    return (num - num_rev_int == 1)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    x = str(num)[::-1]\n    return num - int(x) == 1\n    \ndef check(num):\n    if num % 2 == 0 and num!= 0:\n        if num == rev(num):\n            return True\n    elif num == rev(num):\n        return True\n    else:\n        return False\n        \nif __name__ == '__main__':\n    print(check(int(input(\"Enter Number: \"))))\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = str(num)[::-1]\n    if int(num) < int(rev):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])*2\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    rev = str(num[::-1])\n    if int(num) > 0:\n        return int(num) - int(rev) == 1\n    else:\n        return int(num) + int(rev) == 1\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    \n    while num > 0:\n        digit = num%10\n        reverse = reverse*10 + digit\n        num = num//10\n    if reverse == (num-1):\n        return True\n    else:\n        return False\n        \nif __name__ == '__main__':\n    \n    num = int(input(\"Enter a number: \"))\n    print(rev(num))"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (2*num)-1\n    \ndef is_twice(num):    \n    '''\n    Write a python function to check if a given number is exactly 2 times its reverse.\n    '''\n    return num == rev(num)\n    \ndef is_one_less(num):    \n    '''\n    Write a python function to check if a given number is exactly 1 less than twice its reverse.\n    '''\n    return num == rev(num+1)\n    \ndef is_one_greater(num):    \n    '''\n    Write a python function to check if a given number is exactly 1 greater than twice its reverse.\n    '''\n    return num == rev(num-1)\n    \ndef is_one_less_greater(num):    \n    '''\n    Write a python function to check if a given number is exactly 1 greater than 2 times its reverse.\n    '''\n    return num == rev(num+2)\n    \ndef check_in(num, *args):    \n    '''\n    Write a python function to check if a given number is in a given list of numbers.\n    '''\n    return num in args\n    \ndef check_is(num, *args):    \n    '''\n    Write a python function to check if a given number is in a given list of numbers.\n    '''\n    return num in args\n    \ndef check_is_greater(num, *args):    \n    '''\n    Write a python function to check if a given number is in a given list of numbers.\n    '''\n    return num > max(args)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while(num > 0):\n        rev = rev * 10 + (num % 10)\n        num //= 10\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    rev_num = num[::-1]\n    rev_num = int(rev_num)\n    if num == str(rev_num+1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (2 * num) - (num * 2)\n    \ndef is_twice_reverse(num):\n    '''\n    Write a python function to check if a given number is twice its reverse.\n    '''\n    return (num == rev(num))\n    \ndef is_one_less_twice_reverse(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse and also if it is a reverse number.\n    '''\n    return (num == rev(num) and num!= 0)\n    \n    \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    largest_num = int(\"\".join(str(x) for x in arr[::-1]))\n    return largest_num \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #Converting list into a string to make it easier to compare the two strings\n    str_arr = ''.join(str(e) for e in arr) \n    #Splitting string into a list\n    num_list = [int(i) for i in str_arr]\n    #Creating an empty list to store the possible solutions\n    sol_list = []\n    #Creating a list of digits 0 to 9\n    digit_list = [i for i in range(10)]\n    #Looping over the numbers 0 to 9\n    for digit in digit_list :\n        #Looping over the digits of the list\n        for i in range(len(num_list)) :\n            #Comparing the values of the list with the values of the digits\n            if digit == num_list[i] :\n                #If the value of the list and the value of the digit is the same, it will be appended to the solution list\n                sol_list.append(digit)\n    #Finding the length of the solution list\n    sol_len = len(sol_list)\n    #Returning the longest solution list\n    return sol_list\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr) \n    arr.sort() \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # return max(arr)\n    # Max = 0\n    # for i in range(len(arr)) :\n    #     if Max < (arr[i] * (10**(len(arr)-i-1))) : \n    #         Max = (arr[i] * (10**(len(arr)-i-1)))\n    # return Max\n    # for i in range(len(arr)) :\n    #     Max = Max + arr[i]\n    #     if Max >= (10**(len(arr)-i-1)):\n    #         Max = Max - 10**(len(arr)-i-1)\n    #         break\n    # return Max\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if (len(arr)==0) : \n        print (\"Invalid Input\")\n    \n    else :\n        num_str = \"\".join(arr)\n        num_str = int(num_str)\n        \n        if (max(arr)>9) : \n            print (\"The given list of digits cannot be converted into a single integer. Hence, the largest number is \",end=\"\")\n            \n        else :\n            print (num_str,end=\" \")\n            \n        return num_str\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    arr.reverse()\n    return arr[0]*arr[1]*arr[2]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n    \ndef find_Max_Num_2(arr) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return int(\"\".join(sorted(str(i) for i in arr)))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    sorted_list = sorted(arr)\n    largest_num = ''\n    for item in sorted_list : \n        largest_num = largest_num + str(item)\n    return largest_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(0, len(arr)):\n        if int(max_num) < int(arr[i]):\n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x==abs(y)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0) and (y < 0):\n        return True\n    elif (x < 0) and (y > 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0: \n        print('Both have positive signs')\n    elif x<0 and y<0: \n        print('Both have negative signs')\n    else: \n        print('Both have different signs')\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    return False\nopposite_Signs(12,-5) # True\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #Start writing your code here\n    if x < 0 and y > 0:\n        return True\n    if x > 0 and y < 0:\n        return True\n    return False\n    #End writing your code here\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x*y > 0):\n        return False\n    elif(x*y < 0):\n        return True\n    else:\n        return None\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    if x>0 and y>0:\n        return True\n    return False\nprint(opposite_Signs(-7,2))\nprint(opposite_Signs(2,-7))\nprint(opposite_Signs(2,7))\nprint(opposite_Signs(-2,7))\nprint(opposite_Signs(7,2))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y>0: \n        print(\"NO\")\n    elif x*y<0: \n        print(\"YES\")\n    elif x*y==0: \n        print(\"NO\")\n    else:\n        print(\"Invalid input\")\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3*n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    return int(n*(3*n-1)/2)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    \n    # There are three ways to get the nth octagonal number. \n    # The first way is a left hand side of a right hand side of an octagonal number.\n    # The second way is a left hand side of a right hand side of a right hand side of an octagonal number.\n    # The third way is a left hand side of a right hand side of a left hand side of an octagonal number.\n    # You need to check if the nth octagonal number is of which ways.\n    \n    \n    # How to find out the nth octagonal number in the left hand side of the right hand side of an octagonal number? \n    # n = 3 + 3n = 4 + 3n = 7 + 3n = 10 + 3n = 15 + 3n = 21 + 3n = 28 + 3n\n    # The nth octagonal number is the 3nth triangular number.\n    # For a sequence of triangular numbers, the left hand side of the right hand side of the nth number is the nth triangular number.\n    # n = 4 + 3n = 5 + 3n = 6 + 3n = 7 + 3n = 8 + 3n = 9 + 3n\n    # n = 5 + 3n = 6 + 3n = 7 + 3n = 8 + 3n = 9 + 3n\n    # n = 6 + 3n = 7 + 3n = 8 + 3n = 9 + 3n\n    # n = 7 + 3n = 8 + 3n = 9 + 3n\n    # n = 8 + 3n = 9 + 3n\n    # n = 9 + 3n = 10 + 3n = 11 + 3n = 12 + 3n = 13 + 3n = 14 + 3n = 15 + 3n = 16 + 3n = 17 + 3n = 18 + 3n = 19 + 3n = 20 + 3n = 21 + 3n = 22 + 3n = 23 + 3n = 24 + 3n = 25 + 3n = 26 + 3n = 27 + 3n = 28 + 3n = 29 + 3n = 30 + 3n = 31 + 3n = 32 + 3n = 33 + 3n = 34 + 3n = 35 + 3n = 36 + 3n = 37 + 3n = 38 + 3n = 39 + 3n = 40 + 3n = 41 + 3n = 42 + 3n = 43 + 3n = 44 + 3n = 45 + 3n = 46 + 3n = 47 + 3n = 48 + 3n = 49 + 3n = 50 + 3n = 51 + 3n = 52 + 3n = 53 + 3n = 54 + 3n = 55 + 3n = 56 + 3n = 57 + 3n = 58 + 3n = 59 + 3n = 60 + 3n = 61 + 3n = 62 + 3n = 63 + 3n = 64 + 3n = 65 + 3n = 66 + 3n = 67 + 3n = 68 + 3n = 69 + 3n = 70 + 3n = 71 + 3n = 72 + 3n = 73 + 3n = 74 + 3n = 75 + 3n = 76 + 3n = 77 + 3n = 78 + 3n = 79 + 3n = 80 + 3n = 81 + 3n = 82 + 3n = 83 + 3n = 84 + 3n = 85 + 3n = 86 + 3n = 87 + 3n = 88 + 3n = 89 + 3n = 90 + 3n = 91 + 3n = 92 + 3n = 93 + 3n = 94 + 3n = 95 + 3n = 96 + 3n = 97 + 3n = 98 + 3n = 99 + 3n = 100 + 3n = 101 + 3n = 102 + 3n = 103 + 3n = 104 + 3n = 105 + 3n = 106 + 3n = 107 + 3n = 108 + 3n = 109 + 3n = 110 + 3n = 111 + 3n = 112 + 3n = 113 + 3n = 114 + 3n = 115 + 3n = 116 + 3n = 117 + 3n = 118 + 3n = 119 + 3n = 120 + 3n = 121 + 3n = 122 + 3n = 123 + 3n = 124 + 3n = 125 + 3n = 126 + 3n = 127 + 3n = 128 + 3n = 129 + 3n = 130 + 3n = 131 + 3n = 132 + 3n = 133 + 3n = 134 + 3n = 135 + 3n = 136 + 3n = 137 + 3n = 138 + 3n = 139 + 3n = 140 + 3n = 141 + 3n = 142 + 3n = 143 + 3n = 144 + 3n = 145 + 3n = 146 + 3n = 147 + 3n = 148 + 3n = 149 + 3n = 150 + 3n = 151 + 3n = 152 + 3n = 153 + 3n = 154 + 3n = 155 + 3n = 156 + 3n = 157 + 3n = 158 + 3n = 159 + 3n = 160 + 3n = 161 + 3n = 162 + 3n = 163 + 3n = 164 + 3n = 165 + 3n = 166 + 3n = 167 + 3n = 168 + 3n = 169 + 3n = 170 + 3n = 171 + 3n = 172 + 3n = 173 + 3n = 174 + 3n = 175 + 3n = 176 + 3n = 177 + 3n = 178 + 3n = 179 + 3n = 180 + 3n = 181 + 3n = 182 + 3n = 183 + 3n = 184 + 3n = 185 + 3n = 186 + 3n = 187 + 3n = 188 + 3n = 189 + 3n = 190 + 3n = 191 + 3n = 192 + 3n = 193 + 3n = 194 + 3n = 195 + 3n = 196 + 3n = 197 + 3n = 198 + 3n = 199 + 3n = 200 + 3n = 201 + 3n = 202 + 3n = 203 + 3n = 204 + 3n = 205 + 3n = 206 + 3n = 207 + 3n = 208 + 3n = 209 + 3n = 210 + 3n = 211 + 3n = 212 + 3n = 213 + 3n = 214 + 3n = 215 + 3n = 216 + 3n = 217 + 3n = 218 + 3n = 219 + 3n = 220 + 3n = 221 + 3n = 222 + 3n = 223 + 3n = 224 + 3n = 225 + 3n = 226 + 3n = 227 + 3n = 228 + 3n = 229 + 3n = 230 + 3n = 231 + 3n = 232 + 3n = 233 + 3n = 234 + 3n = 235 + 3n = 236 + 3n = 237 + 3n = 238 + 3n = 239 + 3n = 240 + 3n = 241 + 3n = 242 + 3n = 243 + 3n = 244 + 3n = 245 + 3n = 246 + 3n = 247 + 3n = 248 + 3n = 249 + 3n = 250 + 3n = 251 + 3n = 252 + 3n = 253 + 3n = 254 + 3n = 255 + 3n = 256 + 3n = 257 + 3n = 258 + 3n = 259 + 3n = 260 + 3n = 261 + 3n = 262 + 3n = 263 + 3n = 264 + 3n = 265 + 3n = 266 + 3n = 267 + 3n = 268 + 3n = 269 + 3n = 270 + 3n = 271 + 3n = 272 + 3n = 273 + 3n = 274 + 3n = 275 + 3n = 276 + 3n = 277 + 3n = 278 + 3n = 279 + 3n = 280 + 3n = 281 + 3n = 282 + 3n = 283 + 3n = 284 + 3n = 285 + 3n = 286 + 3n = 287 + 3n = 288 + 3n = 289 + 3n = 290 + 3n = 291 + 3n = 292 + 3n = 293 + 3n = 294 + 3n = 295 + 3n = 296 + 3n = 297 + 3n = 298 + 3n = 299 + 3n = 300 + 3n = 301 + 3n = 302 + 3n = 303 + 3n = 304 + 3n = 305 + 3n = 306 + 3n = 307 + 3n = 308 + 3n = 309 + 3n = 310 + 3n = 311 + 3n = 312 + 3n = 313 + 3n = 314 + 3n = 315 + 3n = 316 + 3n = 317 + 3n = 318 + 3n = 319 + 3n = 320 + 3n = 321 + 3n = 322 + 3n = 323 + 3n = 324 + 3n = 325 + 3n = 326 + 3n = 327 + 3n = 328 + 3n = 329 + 3n = 330 + 3n = 331 + 3n = 332 + 3n = 333 + 3n = 334 + 3n = 335 + 3n = 336 + 3n = 337 + 3n = 338 + 3n = 339 + 3n "
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #octagonal(n) = n + (n^2 + n)/2\n    return int(n + (n**2 + n) / 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    import math\n    \n    n = int(input('Enter a number: '))\n    \n    #start\n    x = (8 * n**2) + 1\n    #end\n    \n    #print(math.sqrt(1 + 8*n))\n    \n    return x\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)//2\ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return n*(3*n-1)//2\ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\ndef is_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    return n*(5*n-3)//2\ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-2)\ndef is_triangular(n): \n    '''\n    Write a function to find the nth triangular number.\n    '''\n    return n*(n+1)//2\ndef is_square(n): \n    '''\n    Write a function to find the square of the nth triangular number.\n    '''\n    return n*(n+1)//2\ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return n*(3*n-1)//2\ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\ndef is_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    return n*(5*n-3)//2\ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-2)\ndef is_triangular(n): \n    '''\n    Write a function to find the nth triangular number.\n    '''\n    return n*(n+1)//2\ndef is_square(n): \n    '''\n    Write a function to find the square of the nth triangular number.\n    '''\n    return n*(n+1)//2\ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return n*(3*n-1)//2\ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\ndef is_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    return n*(5*n-3)//2\ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-2)\ndef is_triangular(n): \n    '''\n    Write a function to find the nth triangular number.\n    '''\n    return n*(n+1)//2\ndef is_square(n): \n    '''\n    Write a function to find the square of the nth triangular number.\n    '''\n    return n*(n+1)//2\ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return n*(3*n-1)//2\ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\ndef is_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    return n*(5*n-3)//2\ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-2)\ndef is_triangular(n): \n    '''\n    Write a function to find the nth triangular number.\n    '''\n    return n*(n+1)//2\ndef is_square(n): \n    '''\n    Write a function to find the square of the nth triangular number.\n    '''\n    return n*(n+1)//2\ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return n*(3*n-1)//2\ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\ndef is_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    return n*(5*n-3)//2\ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-2)\ndef is_triangular(n): \n    '''\n    Write a function to find the nth triangular number.\n    '''\n    return n*(n+1)//2\ndef is_square(n): \n    '''\n    Write a function to find the square of the nth triangular number.\n    '''\n    return n*(n+1)//2\ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return n*(3*n-1)//2\ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\ndef is_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    return n*(5*n-3)//2\ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-2)\ndef is_triangular(n): \n    '''\n    Write a function to find the nth triangular number.\n    '''\n    return n*(n+1)//2\ndef is_square(n): \n    '''\n    Write a function to find the square of the nth triangular number.\n    '''\n    return n*(n+1)//2\ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return n*(3*n-1)//2\ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\ndef is_heptagonal(n): \n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    return n*(5*n-3)//2\ndef is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-2)\ndef is_triangular(n): \n    '''\n    Write a function to find the nth triangular number.\n    '''\n    return n*(n+1)//2\ndef is_square(n): \n    '''\n    Write a function to find the square of the nth triangular number.\n    '''\n    return n*(n+1)//2\ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return n*(3*n-1)//2\ndef is_hexagonal(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\ndef is_heptagonal(n): \n    '''\n    Write a function to find th"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*3) - (2 * (n**2))\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    return n**2 + n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    else:\n        return n*8 + 5\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n - 1)//2\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    count = 0\n    for i in range(length):\n        for j in range(i+1, length+1):\n            #print(i, j)\n            sum = 0\n            for k in range(i, j):\n                sum += int(s[k])\n            if sum == len(s[i:j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            summ = 0\n            for x in range(i, j + 1):\n                summ += int(s[x])\n            if summ == len(s[i:j + 1]):\n                res += 1\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if sum(map(lambda c: int(c), s[i:j])) == len(s[i:j]):\n                res += 1\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sum_len = len(s)\n    count = 0\n    for i in range(len(s)):\n        if i+1 < len(s) and i-1 >= 0:\n            if int(s[i]) + int(s[i+1]) == sum_len:\n                count += 1\n            if int(s[i]) + int(s[i-1]) == sum_len:\n                count += 1\n        elif i+1 >= len(s):\n            if int(s[i]) + int(s[i-1]) == sum_len:\n                count += 1\n        elif i-1 < 0:\n            if int(s[i]) + int(s[i+1]) == sum_len:\n                count += 1\n        else:\n            print('Invalid Input!')\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m=defaultdict(lambda:defaultdict(lambda:0))\n    n=len(s)\n    for i in range(n):\n        m[i][i]=1\n    for j in range(1,n):\n        for i in range(j):\n            if(j-i>=0):\n                m[i][j]=s[i]==s[j] and m[i+1][j-1]+1 or 1\n    return sum(sum(m[i].values()) for i in m)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    if n == 0:\n        return 0\n    dp = [0]*n\n    dp[0] = 1 if s[0] == s[0].isalpha() else 0\n    for i in range(1,n):\n        if s[i] == s[i].isalpha():\n            dp[i] = dp[i-1]+1\n        else:\n            dp[i] = 1\n        if i>1:\n            if s[i-1] == s[i].isalpha():\n                dp[i] = dp[i] + dp[i-2]\n            else:\n                dp[i] = dp[i] + dp[i-1]\n    return sum(dp)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    if n == 0:\n        return 0\n    ans = 0\n    for i in range(0,n):\n        for j in range(i,n):\n            total = 0\n            for k in range(i,j+1):\n                total += int(s[k])\n            if total == j-i+1:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            summ = 0\n            for k in range(i, j+1):\n                summ += int(s[k])\n            if summ == len(s[i:j+1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def sum_of_digits_at_position(string, pos):\n        return (ord(string[pos]) - ord('0')) + (10 * sum_of_digits_at_position(string, pos + 1)) if pos < len(string) else 0\n    def sub_string_length_digit_sum_equal_to_length(string):\n        string_length = len(string)\n        if string_length == 0:\n            return 0\n        hash_map = defaultdict(int)\n        for i in range(string_length):\n            hash_map[i] = sum_of_digits_at_position(string, i)\n        return sum([hash_map[i] == string_length and hash_map[i]!= 0 for i in range(string_length)])\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Your code here\n    substringCount = 0\n    for i in range(0, len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if len(substring) >= 1 and len(substring) <= 100:\n                if sum(int(x) for x in substring) == len(substring):\n                    substringCount += 1\n                    #print(substring)\n    return substringCount\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for i in xs:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for x in xs:\n        if x < min_num:\n            min_num = x\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # For all number in list, compare every number to the current smallest number\n    smallest = xs[0]\n    for number in xs:\n        if number < smallest:\n            smallest = number\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # print(min(xs))\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return sorted(xs)[0]\nprint(smallest_num([2, 5, 7, 1, 1, 9, -1, -9]))\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # xs = [1, 3, 5, 6, 7, 4, 2]\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    print(\"Smallest Number in List:\",min(xs))\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    list_length = len(test_list)\n    max_diff = test_list[1] - test_list[0]\n    for i in range(list_length - 1):\n        if test_list[i + 1] - test_list[i] > max_diff:\n            max_diff = test_list[i + 1] - test_list[i]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(test_list)-min(test_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = sorted(test_list)\n    min_item = test_list[0]\n    max_diff = 0\n    for i in range(0, len(test_list)):\n        if test_list[i] - min_item > max_diff:\n            max_diff = test_list[i] - min_item\n        if test_list[i] < min_item:\n            min_item = test_list[i]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and (abs(test_list[i] - test_list[j]) > max_diff):\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            diff.append(abs(test_list[i]-test_list[j]))\n    return max(diff)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list)==1:\n        return None\n    else:\n        max_diff=0\n        i=0\n        j=0\n        while i < len(test_list):\n            if j>=len(test_list):\n                break\n            while j < len(test_list):\n                if abs(test_list[i]-test_list[j])>max_diff:\n                    max_diff=abs(test_list[i]-test_list[j])\n                j+=1\n            j=0\n            i+=1\n        return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 1:\n        return -1\n    if len(test_list) == 2:\n        return abs(test_list[0] - test_list[1])\n    else:\n        test_list.sort()\n        return abs(test_list[0] - test_list[1])\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return None\n    elif len(test_list) == 1:\n        return test_list[0]\n    else:\n        max_num = test_list[0]\n        min_num = test_list[0]\n        for x in test_list:\n            if x > max_num:\n                max_num = x\n            if x < min_num:\n                min_num = x\n        return max_num - min_num\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize an empty list\n    temp_list = []\n    # iterate through the test_list\n    for i in test_list:\n        # create a new list containing the first element of each pair of the test_list\n        temp_list.append(i[0])\n    # initialize a variable to store the max_difference\n    max_difference = None\n    # iterate through the temp_list\n    for i in range(len(temp_list)):\n        # initialize a variable to store the current difference\n        current_difference = None\n        # initialize a variable to store the index of the current element\n        curr_elem_index = None\n        # iterate through the temp_list again\n        for j in range(len(temp_list)):\n            # if the current element is not the same as the previous element and the current element is not the same as the next element\n            if i!= j and i!= j+1:\n                # calculate the difference between the current element and the next element\n                current_difference = abs(temp_list[i] - temp_list[j+1])\n                # if no max_difference has been initialized yet or if the current difference is greater than the current max_difference\n                if max_difference is None or current_difference > max_difference:\n                    # set the current max_difference to the current difference\n                    max_difference = current_difference\n                    # set the index of the max_difference to the index of the current element\n                    curr_elem_index = i\n        # if the current element is not the same as the previous element\n        if i!= 0:\n            # calculate the difference between the current element and the previous element\n            current_difference = abs(temp_list[i] - temp_list[i-1])\n            # if no max_difference has been initialized yet or if the current difference is greater than the current max_difference\n            if max_difference is None or current_difference > max_difference:\n                # set the current max_difference to the current difference\n                max_difference = current_difference\n                # set the index of the max_difference to the index of the current element\n                curr_elem_index = i\n    # if the max_difference is None (meaning the test_list was only one element long)\n    if max_difference is None:\n        # return the first element of the test_list\n        return test_list[0]\n    # if the max_difference is not None\n    else:\n        # return the element at the index of the max_difference\n        return test_list[curr_elem_index]\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    length = len(test_list)\n    max_diff = 0\n    for i in range(0, length):\n        for j in range(i+1, length):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda subjectmarks: subjectmarks[1])\n    \nprint(subject_marks([(1,45),(3,23),(2,50)])"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = list()\n    for submarks in subjectmarks:\n        marks.append(submarks[1])\n    marks.sort()\n    return marks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(sorted(subjectmarks, key=lambda x: x[1]))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x: x[1], reverse = True)\n    print(\"After sorting by subject marks:\", subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key= lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = []\n    for sm in subjectmarks:\n        marks.append(sm[1])\n    marks.sort()\n    for m in marks:\n        print m\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key = lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for element in data_list:\n        if type(element) == list:\n            sum += recursive_list_sum(element)\n        else:\n            sum += element\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \ndef flatten_list(data_list):\n    '''\n    Write a function to flatten a list.\n    '''\n    flat_list = []\n    for sub_list in data_list:\n        if type(sub_list) == list:\n            flat_list += sub_list\n        else:\n            flat_list.append(sub_list)\n    return flat_list\n    \ndef permutations(data):\n    '''\n    Write a function that takes in an array and returns its permutations.\n    '''\n    if len(data) == 1:\n        return [data]\n    else:\n        perms = []\n        for i in range(len(data)):\n            new_data = data.copy()\n            new_data.pop(i)\n            for perm in permutations(new_data):\n                perm.insert(0, data[i])\n                perms.append(perm)\n        return perms\n    \ndef permutations_with_duplicates(data):\n    '''\n    Write a function that takes in an array and returns its permutations.\n    '''\n    if len(data) == 1:\n        return [data]\n    else:\n        perms = []\n        for i in range(len(data)):\n            for perm in permutations_with_duplicates(data.copy()):\n                perm.insert(0, data[i])\n                perms.append(perm)\n        return perms\n    \ndef remove_duplicates_1(data):\n    '''\n    Write a function that takes in an array and returns a sorted array with no duplicates.\n    '''\n    if len(data) == 0:\n        return data\n    if len(data) == 1:\n        return data\n    if data[0] == data[1]:\n        return remove_duplicates_1(data[1:])\n    else:\n        return [data[0]] + remove_duplicates_1(data[1:])\n    \ndef remove_duplicates_2(data):\n    '''\n    Write a function that takes in an array and returns a sorted array with no duplicates.\n    '''\n    if len(data) == 0:\n        return data\n    if len(data) == 1:\n        return data\n    return_list = [data[0]]\n    for i in range(1, len(data)):\n        if data[i]!= data[i-1]:\n            return_list.append(data[i])\n    return return_list\n    \ndef remove_duplicates_3(data):\n    '''\n    Write a function that takes in an array and returns a sorted array with no duplicates.\n    '''\n    if len(data) == 0:\n        return data\n    if len(data) == 1:\n        return data\n    return [data[0]] + remove_duplicates_3(data[1:]) if data[0]!= data[1] else remove_duplicates_3(data[1:])\n    \ndef is_palindrome(data):\n    '''\n    Write a function that takes in an array and returns true if all of the items are palindromes.\n    '''\n    for i in range(len(data)):\n        for j in range(len(data)-1, i, -1):\n            if data[i]!= data[j]:\n                return False\n    return True\n    \ndef is_palindrome_2(data):\n    '''\n    Write a function that takes in an array and returns true if all of the items are palindromes.\n    '''\n    for i in range(len(data)):\n        if data[i]!= data[len(data)-1-i]:\n            return False\n    return True\n    \ndef remove_first_and_last(data):\n    '''\n    Write a function that takes in an array and returns an array where the first and last elements have been removed.\n    '''\n    return data[1:-1]\n    \ndef reverse_array(data):\n    '''\n    Write a function that takes in an array and returns an array with the elements reversed.\n    '''\n    return data[::-1]\n    \ndef reverse_array_in_place(data):\n    '''\n    Write a function that takes in an array and returns an array with the elements reversed.\n    '''\n    if len(data) <= 1:\n        return data\n    data[0], data[len(data)-1] = data[len(data)-1], data[0]\n    reverse_array_in_place(data[1:])\n    \ndef last_occurrence(data, target):\n    '''\n    Write a function that takes in an array and returns the last index at which the target occurs.\n    '''\n    if len(data) == 0:\n        return -1\n    if target == data[-1]:\n        return len(data)-1\n    return last_occurrence(data[:-1], target)\n    \ndef first_occurrence(data, target):\n    '''\n    Write a function that takes in an array and returns the first index at which the target occurs.\n    '''\n    if len(data) == 0:\n        return -1\n    if target == data[0]:\n        return 0\n    return first_occurrence(data[1:], target)\n    \ndef is_member(data, target):\n    '''\n    Write a function that takes in an array and returns true if the target exists in the array and false if it doesn't.\n    '''\n    for i in range(len(data)):\n        if data[i] == target:\n            return True\n    return False\n    \ndef is_member_2(data, target):\n    '''\n    Write a function that takes in an array and returns true if the target exists in the array and false if it doesn't.\n    '''\n    return target in data\n    \ndef is_member_3(data, target):\n    '''\n    Write a function that takes in an array and returns true if the target exists in the array and false if it doesn't.\n    '''\n    return data.count(target)\n    \ndef is_unique(data):\n    '''\n    Write a function that takes in an array and returns true if all of the items in the array are unique and false if not.\n    '''\n    for i in range(len(data)):\n        for j in range(i+1, len(data)):\n            if data[i] == data[j]:\n                return False\n    return True\n    \ndef duplicate_count(data):\n    '''\n    Write a function that takes in an array and returns the number of duplicates in the array.\n    '''\n    count = 0\n    for i in range(len(data)):\n        if data[i] in data[i+1:]:\n            count += 1\n    return count\n    \ndef duplicate_count_2(data):\n    '''\n    Write a function that takes in an array and returns the number of duplicates in the array.\n    '''\n    count = 0\n    for i in range(len(data)):\n        data[abs(data[i])] = -abs(data[abs(data[i])])\n    for i in range(len(data)):\n        if data[i] > 0:\n            count += 1\n    return count\n    \ndef max_difference(data):\n    '''\n    Write a function that takes in an array and returns the maximum difference between two elements.\n    '''\n    if len(data) == 0:\n        return 0\n    if len(data) == 1:\n        return 0\n    return max(data[0], data[1]) - min(data[0], data[1])\n    \ndef is_anagram(data, anagram):\n    '''\n    Write a function that takes in two strings and returns true if they are anagrams and false if they're not.\n    '''\n    return sorted(data) == sorted(anagram)\n    \ndef sort_ascending(data):\n    '''\n    Write a function that takes in an array and returns an array with the elements sorted in ascending orde"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    s = 0\n    for i in data_list:\n        if isinstance(i,list):\n            s += recursive_list_sum(i)\n        else:\n            s += i\n    return s\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for element in data_list:\n        if type(element) == list:\n            sum += recursive_list_sum(element)\n        else:\n            sum += element\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    if type(data_list) == int:\n        total += data_list\n        return total\n    if type(data_list) == list:\n        for item in data_list:\n            total += recursive_list_sum(item)\n        return total\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #base case\n    if data_list == []:\n        return 0\n    else:\n        #recursive case\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if isinstance(data_list[0], list):\n        return sum(recursive_list_sum(data_list[0])) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sums = []\n    for element in data_list:\n        if type(element) == list:\n            sums.append(recursive_list_sum(element))\n        else:\n            sums.append(element)\n    return sum(sums)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i>0:\n            pos_count+=1\n    return pos_count\n    \n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i>=0:\n            pos = pos+1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([i for i in list if i>0])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # Method 1\n    # total = 0\n    # for num in list:\n    #     if num > 0:\n    #         total += 1\n    # return total\n    # Method 2\n    return len([i for i in list if i > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for i in list:\n        if i > 0:\n            positive = positive + 1\n    print(\"Number of positive numbers in the list: \", positive)\n    return positive\n    \n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(0, len(list)):\n        if list[i] > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n    \nlist=[12,14,-5,7]\nprint(pos_count(list))\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos=0\n    for item in list:\n        if item>0:\n            pos=pos+1\n    return pos\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975,\n             479001600, 22993092293, 1287532532765, 31898057613865]\n    bells_numbers = range(1, n)\n    return sum(bells_numbers[i] * bell_number(i) for i in range(len(bells_numbers)))\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    print('The bell number for n =', n, 'is', bell_number_dynamic(n))\n    return\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[1][i] = 1\n    for i in range(2, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i][j-1]\n            for k in range(j+1, n+1):\n                dp[i][j] += dp[i-1][k-1] * dp[i-1][k-j]\n    return dp[n][n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [[1,1],[1,2],[2,2]]\n    for i in range(n-2):\n        temp = [0] * (len(bell) + 1)\n        for j in range(len(bell)):\n            temp[j] = bell[j][0] + bell[j][1]\n        temp[-1] = bell[-1][0] + bell[-1][1]\n        bell.append(temp)\n    return bell[n-1][-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 115975, 3113375, 33264875, 145429376,\n                    291552375, 1210921791, 554293765, 2091712253, 145429376, 649655697, 493857865, 3710496539,\n                    3635633243, 3710496539, 2410146589, 1210921791, 554293765, 3164567669, 1656455721,\n                    1116455721, 754293765, 554293765, 396137465, 3187672289, 2839648059, 1656455721,\n                    1378648059, 1112707841, 1676455721, 1210921791, 754293765, 554293765, 319144465,\n                    2662362459, 1713244593, 1210921791, 754293765, 554293765, 536137465, 4028965533,\n                    298542565, 2145965889, 1713244593, 1210921791, 754293765, 554293765, 4999686513,\n                    3910965533, 3516455721, 3187672289, 2701970051, 2282965889, 2089765889, 2227696599,\n                    1713244593, 1210921791, 754293765, 554293765, 516137465, 498965533, 4217965533,\n                    2839648059, 1656455721, 1210921791, 754293765, 554293765, 506136365, 4510965533,\n                    33264875, 3028596599, 1656455721, 112707841, 1713244593, 1210921791, 754293765,\n                    554393765, 4734965533, 3710496539, 3635633243, 3710496539, 2510965533, 1859658899,\n                    1510965533, 1510965533, 1510965533, 1210921791, 754293765, 554293765, 5283965999,\n                    4898965533, 4217965533, 3028596599, 1656455721, 112707841, 1713244593, 1210921791,\n                    754273765, 554293765, 4999686513, 3910965533, 3516455721, 319144465, 1713244593,\n                    1210921791, 754293765, 554293765, 4899366513, 401965533, 3516455721, 2701970051,\n                    1713244593, 1210921791, 754293765, 554293765, 4999686513, 396137465, 3187672289,\n                    2510965533, 1859658899, 1510965533, 1510965533, 1510965533, 1210921791, 754293765,\n                    554393765, 506136365, 4510965533, 33264875, 3028596599, 1656455721, 112707841,\n                    1713244593, 1210921791, 754293765, 554293765, 4999686513, 3910965533, 3516455721,\n                    2701970051, 1713244593, 1210921791, 754293765, 554293765, 4734965533, 3710496539,\n                    3635633243, 3710496539, 2510965533, 1859658899, 1510965533, 1510965533, 1510965533,\n                    1210921791, 754293765, 554293765, 506136365, 4510965533, 33264875, 3028596599,\n                    1656455721, 112707841, 1713244593, 1210921791, 754293765, 554293765, 4999686513,\n                    3910965533, 3516455721, 2701970051, 1713244593, 1210921791, 754293765, 554293765,\n                    396137465, 3187672289, 2510965533, 1859658899, 1510965533, 1510965533, 1510965533,\n                    1210921791, 754293765, 554293765, 4999686513, 396137465, 319144465, 1713244593,\n                    1210921791, 754293765, 554293765, 4899366513, 401965533, 3516455721, 2701970051,\n                    1713244593, 1210921791, 754293765, 554293765, 4999686513, 3910965533, 3516455721,\n                    2510965533, 1859658899, 1510965533, 1510965533, 1510965533, 1210921791, 754293765,\n                    554393765, 506136365, 4510965533, 33264875, 3028596599, 1656455721, 112707841,\n                    1713244593, 1210921791, 754293765, 554293765, 4999686513, 396137465, 3187672289,\n                    2510965533, 1859658899, 1510965533, 1510965533, 1510965533, 1210921791, 754293765,\n                    554393765, 4899366513, 3910965533, 3516455721, 2701970051, 1713244593, 1210921791,\n                    754273765, 554293765, 4999686513, 396137465, 319144465, 1713244593, 1210921791,\n                    738273765, 554293765, 5283965999, 4898965533, 4217965533, 3028596599, 1656455721,\n                    112707841, 1713244593, 1210921791, 754293765, 554293765, 4999686513, 3910965533,\n                    3516455721, 2701970051, 1713244593, 1210921791, 754293765, 554293765, 4999686513,\n                    396137465, 3187672289, 2510965533, 1859658899, 1510965533, 1510965533, 1510965533,\n                    1210921791, 754293765, 554293765, 4999686513, 3910965533, 3516455721, 2701970051,\n                    1713244593, 1210921791, 754293765, 554293765, 4999686513, 396137465, 3187672289,\n                    2510965533, 1859658899, 1510965533, 1510965533, 1510965533, 1210921791, 754293765,\n                    554393765, 506136365, 4510965533, 33264875, 3028596599, 1656455721, 112707841,\n                    1713244593, 1210921791, 754293765, 554293765, 4999686513, 3910965533, 3516455721,\n                    2701970051, 1713244593, 1210921791, 754293765, 554293765, 4999686513, 396137465,\n                    319144465, 1713244593, 1210921791, 754293765, 554293"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = bell_number_recursive(n)\n    print(bell)\n    \ndef bell_number_recursive(n):\n    if n < 1:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number_recursive(n-1) + bell_number_recursive(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = []\n    def bell_count(n, i):\n        #if i == n:\n            #bells.append(1)\n            #return 1\n        bells.append(i)\n        return bell_count(n, i+1) + bell_count(n, i+1) + bell_count(n, i+1)\n    return bell_count(n, 0)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    from bell_numbers import bell_numbers\n    bell_numbers = bell_numbers(n)\n    for i in range(0,len(bell_numbers)):\n        if bell_numbers[i] == int(bell_numbers[i]):\n            bell_numbers[i] = int(bell_numbers[i])\n    bell_numbers = sorted(bell_numbers)\n    bell_numbers = sorted(set(bell_numbers))\n    bell_numbers = bell_numbers[::-1]\n    print(bell_numbers)\n    bell_numbers_sum = sum(bell_numbers)\n    print(bell_numbers_sum)\n    print(\"\\n\")\n    x = 1\n    s = bell_numbers_sum\n    \n    while(x <= n):\n        s = s + bell_numbers_sum - bell_numbers[x-1]\n        x = x + 1\n    print(s)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = bell_numbers(n)\n    p = 0\n    for i in range(0, n):\n        p += bell_combinatorial_coefficient(i) * bells[i]\n    return p\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A = np.array(A, dtype = np.int)\n    A = sorted(A)\n    d = np.diff(A)\n    if np.all(d[np.where(d < 0)] == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)):\n        if A[i] < A[i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A = sorted(A)\n    print(A)\n    for i in range(0,len(A)-1):\n        print(A[i],A[i+1])\n        if A[i] == A[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0,len(A)):\n        if(A[i]>A[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in xrange(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in xrange(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # code here\n    n = len(A)\n    if n == 1:\n        return True\n    if A[0] < A[1]:\n        for i in range(1,n):\n            if A[i] <= A[i+1]:\n                return True\n            else:\n                return False\n    if A[0] > A[1]:\n        for i in range(1,n):\n            if A[i] >= A[i+1]:\n                return True\n            else:\n                return False\n    if A[0] == A[1]:\n        for i in range(1,n):\n            if A[i]!= A[i+1]:\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \nA = [6, 5, 4, 4]\nprint(is_Monotonic(A)"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) == 0:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i] == s[0]:\n            if l[i:i+len(s)] == s:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if s is present as a subset of the list\n    if set(s).issubset(set(l)):\n        return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    return sublist(l, s)\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif len(l) < len(s):\n        return sub_set\n    else:\n        for i in range(len(s)):\n            if l[i] == s[i]:\n                continue\n            else:\n                return sub_set\n        sub_set = True\n    return sub_set\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i] == s[0]:\n            if l[i + 1] == s[1]:\n                if is_sublist(l[i + 2:], s[2:]):\n                    return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    import collections\n    if not Input:\n        return True\n    elif len(Input) == 1:\n        return True\n    else:\n        for i in Input:\n            if not i:\n                return False\n    for j in Input:\n        if len(j)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = [all(len(tuple) == len(Input[0]) for tuple in Input)]\n    return result\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(tuple(i) for i in Input)) == 1\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(Input)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    d = set()\n    for i in Input:\n        if i not in d:\n            d.add(i)\n        else:\n            return False\n    return True\n    \nprint(find_equal_tuple([(1, 2, 3), (2, 4, 7), (1, 2, 3)]))\nprint(find_equal_tuple([(1, 2, 3), (2, 4, 7, 1, 2, 3)]))\nprint(find_equal_tuple([(1, 2, 3), (2, 4, 7, 1, 3), (1, 2, 3)]))\nprint(find_equal_tuple([(1, 2, 3, 4), (1, 2, 3)]))\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Lengths = [len(x) for x in Input]\n    if len(set(Lengths)) == 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for x in Input:\n        if len(x) == count:\n            count += 1\n        else:\n            break\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output=[]\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])==len(Input[j]):\n                Output.append(True)\n            else:\n                Output.append(False)\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return (len(set(Input)) <= 1)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = sorted(Input)\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True\n    \ndef find_equal_list(Input):\n    '''\n    Write a function to find whether all the given lists have equal length or not.\n    '''\n    Input = sorted(Input)\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True\n    \ndef find_equal_dict(Input):\n    '''\n    Write a function to find whether all the given dictionaries have equal length or not.\n    '''\n    Input = sorted(Input)\n    for i in range(len(Input)-1):\n        if len(Input[i].keys())!= len(Input[i+1].keys()):\n            return False\n    return True\n    \ndef find_equal_set(Input):\n    '''\n    Write a function to find whether all the given sets have equal length or not.\n    '''\n    Input = sorted(Input)\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True\n    \ndef find_equal_length_all(Input):\n    '''\n    Write a function to find whether all the given objects have equal length or not.\n    '''\n    Input = sorted(Input)\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n        elif isinstance(Input[i],list):\n            for j in range(len(Input[i])-1):\n                if len(Input[i][j])!= len(Input[i][j+1]):\n                    return False\n        elif isinstance(Input[i],tuple):\n            for j in range(len(Input[i])-1):\n                if len(Input[i][j])!= len(Input[i][j+1]):\n                    return False\n        elif isinstance(Input[i],dict):\n            for j in range(len(Input[i].keys())):\n                if len(Input[i][j])!= len(Input[i][j+1]):\n                    return False\n        elif isinstance(Input[i],set):\n            for j in range(len(Input[i])):\n                if len(Input[i][j])!= len(Input[i][j+1]):\n                    return False\n    return True\n    \ndef max_nested_list(Input):\n    '''\n    Write a function that finds the max value of the nested list.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        if isinstance(Input[i],list):\n            for j in range(len(Input[i])):\n                if isinstance(Input[i][j],list):\n                    for k in range(len(Input[i][j])):\n                        Output.append(Input[i][j][k])\n                else:\n                    Output.append(Input[i][j])\n        else:\n            Output.append(Input[i])\n    return max(Output)\n    \ndef min_nested_list(Input):\n    '''\n    Write a function that finds the minimum value of the nested list.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        if isinstance(Input[i],list):\n            for j in range(len(Input[i])):\n                if isinstance(Input[i][j],list):\n                    for k in range(len(Input[i][j])):\n                        Output.append(Input[i][j][k])\n                else:\n                    Output.append(Input[i][j])\n        else:\n            Output.append(Input[i])\n    return min(Output)\n    \ndef max_nested_tuple(Input):\n    '''\n    Write a function that finds the max value of the nested tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        if isinstance(Input[i],tuple):\n            for j in range(len(Input[i])):\n                if isinstance(Input[i][j],tuple):\n                    for k in range(len(Input[i][j])):\n                        Output.append(Input[i][j][k])\n                else:\n                    Output.append(Input[i][j])\n        else:\n            Output.append(Input[i])\n    return max(Output)\n    \ndef min_nested_tuple(Input):\n    '''\n    Write a function that finds the minimum value of the nested tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        if isinstance(Input[i],tuple):\n            for j in range(len(Input[i])):\n                if isinstance(Input[i][j],tuple):\n                    for k in range(len(Input[i][j])):\n                        Output.append(Input[i][j][k])\n                else:\n                    Output.append(Input[i][j])\n        else:\n            Output.append(Input[i])\n    return min(Output)\n    \ndef max_nested_dict(Input):\n    '''\n    Write a function that finds the max value of the nested dictionary.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        if isinstance(Input[i],dict):\n            for j in range(len(Input[i].keys())):\n                if isinstance(Input[i][j],dict):\n                    for k in Input[i][j].keys():\n                        Output.append(Input[i][j][k])\n                else:\n                    Output.append(Input[i][j])\n        else:\n            Output.append(Input[i])\n    return max(Output)\n    \ndef min_nested_dict(Input):\n    '''\n    Write a function that finds the minimum value of the nested dictionary.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        if isinstance(Input[i],dict):\n            for j in range(len(Input[i].keys())):\n                if isinstance(Input[i][j],dict):\n                    for k in Input[i][j].keys():\n                        Output.append(Input[i][j][k])\n                else:\n                    Output.append(Input[i][j])\n        else:\n            Output.append(Input[i])\n    return min(Output)\n    \ndef max_nested_set(Input):\n    '''\n    Write a function that finds the max value of the nested set.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        if isinstance(Input[i],set):\n            for j in Input[i]:\n                if isinstance(j,set):\n                    for k in j:\n                        Output.append(k)\n                else:\n                    Output.append(j)\n        else:\n            Output.append(Input[i])\n    return max(Output)\n    \ndef min_nested_set(Input):\n    '''\n    Write a function that finds the minimum value of the nested set.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        if isinstance(Input[i],set):\n            for j in Input[i]:\n                if isinstance(j,set):\n                    for k in j:\n                        Output.append(k)\n                else:\n                    Output.append(j)\n        else:\n            Output.append(Input[i])\n    return min(Output)\n    \ndef reverse_string(Input):\n    '''\n    Write a function that reverses the string.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        Output.append(Input[len(Input)-1-i])\n    return Output\n    \ndef reverse_list(Input):\n    '''\n    Write a function that reverses the list.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        Output.append(Input[len(Input)-1-i])\n    return Output\n    \ndef reverse_tuple(Input):\n    '''\n    Write a function that reverses the tuple.\n    '"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums_len = len(nums)\n    gap = nums_len\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(nums_len - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums_len = len(nums)\n    gap = nums_len\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # \u5148\u6539\u6210list\uff0c\u518d\u7528\u6df1\u62f7\u8d1d\u7684\u65b9\u5f0f\uff0c\u5426\u5219\u53ea\u4f1a\u8bb0\u5f55\u7b2c\u4e00\u4e2a\u90a3\u4e2a\u4f4d\u7f6e\u7684\n    # \u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u5177\u4f53\u7684\u65b9\u6cd5\uff0c\n    # \u53ef\u80fd\u6709\u65f6\u5019\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff1a\n    # [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n    # \u76f4\u63a5\u628a\u5143\u7d20\u653e\u5230\u4e00\u4e2alist\u91cc\u9762\uff0c\u7528comb_sort\n    # \u4f1a\u5f62\u6210[[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n    nums_copy = nums.copy()\n    nums_copy.sort()\n    nums_copy = nums_copy[::-1]\n    \n    length = len(nums)\n    gap = length\n    \n    swap_flag = True\n    \n    while gap > 1 or swap_flag:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        \n        swap_flag = False\n        \n        for i in range(0, length - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swap_flag = True\n        \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # O(n^2)\n    n = len(nums)\n    gap = n\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #Find the length of the list and the base condition\n    N = len(nums)\n    gap = N\n    #Set a flag to start the while loop\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combsort(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(a, b):\n        nums[a], nums[b] = nums[b], nums[a]\n    \n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))  # minimum gap is 1\n        swapped = False\n        \n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                swap(i, i + gap)\n                swapped = True\n                \n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        if i*i == n:\n            print(i,n-i)\n            return True\n            break\n        elif i*i > n:\n            print(i,n-i)\n            return False\n            break\n    \ndef dif_Square_v2(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s = set()\n    for i in range(1,n):\n        if i*i in s:\n            print(i,n-i)\n            return True\n        s.add(n-i)\n    return False\n        \ndef sum_of_square(n):\n    '''\n    Write a python function to print the sum of squares of 1 to the given number.\n    '''\n    for i in range(1,n+1):\n        print(i**2)\n        \ndef sum_of_Square_v2(n):\n    '''\n    Write a python function to print the sum of squares of 1 to the given number.\n    '''\n    s = set()\n    for i in range(1,n+1):\n        if i**2 in s:\n            continue\n        else:\n            s.add(i**2)\n            print(i**2)\n            \ndef sum_of_Square(n):\n    '''\n    Write a python function to print the sum of squares of 1 to the given number.\n    '''\n    for i in range(1,n+1):\n        print(i**2,end =' ')\n    \ndef prime_number(n):\n    '''\n    Write a python function to print all the prime number up to the given number\n    '''\n    for i in range(2,n+1):\n        for j in range(2,i):\n            if i%j == 0:\n                break\n            else:\n                if j == i-1:\n                    print(i)\n                    \ndef prime_number_v2(n):\n    '''\n    Write a python function to print all the prime number up to the given number\n    '''\n    for i in range(2,n+1):\n        flag = True\n        for j in range(2,i):\n            if i%j == 0:\n                flag = False\n                break\n        if flag:\n            print(i)\n            \ndef prime_number_v3(n):\n    '''\n    Write a python function to print all the prime number up to the given number\n    '''\n    isPrime = [True]*n\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2,n+1):\n        if isPrime[i] == True:\n            print(i)\n            for j in range(i*i,n+1,i):\n                isPrime[j] = False\n                \ndef prime_number_v4(n):\n    '''\n    Write a python function to print all the prime number up to the given number\n    '''\n    isPrime = [True]*n\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2,int(n**0.5)+1):\n        if isPrime[i] == True:\n            for j in range(i*i,n+1,i):\n                isPrime[j] = False\n                \ndef prime_number_v5(n):\n    '''\n    Write a python function to print all the prime number up to the given number\n    '''\n    for i in range(2,n+1):\n        for j in range(i+i,n+1,i):\n            isPrime[j] = False\n            \ndef prime_number_v6(n):\n    '''\n    Write a python function to print all the prime number up to the given number\n    '''\n    isPrime = [True]*(n+1)\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2,n+1):\n        if isPrime[i] == True:\n            print(i)\n            for j in range(i+i,n+1,i):\n                isPrime[j] = False\n                \ndef prime_number_v7(n):\n    '''\n    Write a python function to print all the prime number up to the given number\n    '''\n    isPrime = [True]*(n+1)\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2,int(n**0.5)+1):\n        if isPrime[i] == True:\n            for j in range(i*i,n+1,i):\n                isPrime[j] = False\n    for i in range(n+1):\n        if isPrime[i] == True:\n            print(i)\n            \ndef prime_number_v8(n):\n    '''\n    Write a python function to print all the prime number up to the given number\n    '''\n    isPrime = [True]*(n+1)\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2,int(n**0.5)+1):\n        if isPrime[i] == True:\n            for j in range(i*i,n+1,i):\n                isPrime[j] = False\n    for i in range(n+1):\n        if isPrime[i] == True:\n            print(i)\n            \ndef prime_number_v9(n):\n    '''\n    Write a python function to print all the prime number up to the given number\n    '''\n    isPrime = [True]*(n+1)\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2,int(n**0.5)+1):\n        if isPrime[i] == True:\n            for j in range(i+i,n+1,i):\n                isPrime[j] = False\n    for i in range(n+1):\n        if isPrime[i] == True:\n            print(i)\n            \ndef prime_number_v10(n):\n    '''\n    Write a python function to print all the prime number up to the given number\n    '''\n    isPrime = [True]*(n+1)\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2,int(n**0.5)+1):\n        if isPrime[i] == True:\n            for j in range(i*i,n+1,i):\n                isPrime[j] = False\n    for i in range(n+1):\n        if isPrime[i] == True:\n            print(i)\n            \ndef prime_number_v11(n):\n    '''\n    Write a python function to print all the prime number up to the given number\n    '''\n    isPrime = [True]*(n+1)\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2,int(n**0.5)+1):\n        if isPrime[i] == True:\n            for j in range(i*i,n+1,i):\n                isPrime[j] = False\n    for i in range(n+1):\n        if isPrime[i] == True:\n            print(i)\n            \ndef prime_number_v12(n):\n    '''\n    Write a python function to print all the prime number up to the given number\n    '''\n    isPrime = [True]*(n+1)\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2,int(n**0.5)+1):\n        if isPrime[i] == True:\n            for j in range(i+i,n+1,i):\n                isPrime[j] = False\n    for i in range(n+1):\n        if isPrime[i] == True:\n            print(i)\n            \ndef prime_number_v13(n):\n    '''\n    Write a python function to print all the prime number up to the given number\n    '''\n    isPrime = [True]*(n+1)\n    isPrime[0] = False\n    isPrime["
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(i):\n            print(i*i, j*j)\n            if i*i == j*j + n:\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # A number can be represented as the difference of two squares if there exist integers x and y such that n = x^2 - y^2. \n    # The only requirement is that x>y.\n    import math\n    sqrt = int(math.sqrt(n)) \n    for i in range(1, sqrt):\n        if (i*i == n):\n            return True\n        if (i*i > n):\n            break\n    for i in range(sqrt-1,0,-1):\n        if (i*i == n):\n            return True\n        if (i*i > n):\n            break\n    return False\nn = int(input(\"Enter an integer: \"))\nif(dif_Square(n) == True):\n    print(\"The number %d is a Square difference\"%n)\nelse:\n    print(\"The number %d is not a Square difference\"%n)"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n<0:\n        return False\n    for i in range(1,n):\n        if ((i*i) == n):\n            return True\n        elif ((i*i)>n):\n            return False\ndef dif_Square2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        if ((i*i) == n):\n            return True\n        elif ((i*i)>n):\n            return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    j = 1\n    while j*j < n:\n        i = 1\n        while i*i <= j:\n            if n % i == 0 and n / i <= j:\n                print(\"Square Difference \",i, j)\n                break\n            i = i + 1\n        j = j + 1\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    root = math.sqrt(n)\n    if int(root + 0.5) ** 2 == n:\n        return True\n    if int(root - 0.5) ** 2 == n:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(n)\n    if (math.sqrt(n)%1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        if i*i == n:\n            return True\n        if i*i > n:\n            break\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if i**2+j**2==n:\n                print(i,j,n)\n                break\n            if i**2+j**2<n:\n                print(i,j,n)\n                break\ndif_Square(int(input())"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n+1):\n        if i**2>n:\n            break\n        if i**2 == n:\n            return 'Yes'\n        if i**2>n:\n            continue\n    if i**2==n:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if len(pattern) > len(colors):\n            return False\n        if len(pattern)!= len(set(pattern)):\n            return False\n        i = 0\n        for color in colors:\n            if color == pattern[i]:\n                i += 1\n            if i == len(pattern):\n                break\n        if i < len(pattern):\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        if color!= patterns[colors.index(color)]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] == colors[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0,len(colors)-1):\n        if patterns[i]!= patterns[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) < len(patterns):\n        return False\n    if len(colors) == len(patterns):\n        for i in range(len(patterns)):\n            if colors[i]!= patterns[i]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if (not is_pattern_adjacent(colors[i],colors[i+1], patterns)) or (not is_pattern_adjacent(colors[i], colors[i-1], patterns)):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in patterns:\n        for j in patterns[i]:\n            if j not in colors:\n                return False\n            elif colors[j]!= i:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors_dict = {color: 0 for color in colors}\n    for color, pattern in zip(colors, patterns):\n        colors_dict[color] += 1\n        if colors_dict[color] >= pattern[0]:\n            colors_dict[color] -= pattern[0]\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(colors)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True\n    \n    \ncolors = [\"red\",\"red\",\"green\",\"red\",\"green\",\"blue\",\"blue\",\"red\"]\npatterns = ['green','red', 'green', 'blue','red','red', 'blue', 'green']\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if type(test_list) is not list:\n        raise TypeError('Input should be a list')\n    for i in test_list:\n        if type(i) is not tuple:\n            raise TypeError('Input should be a list of tuples')\n        for j in i:\n            if type(j) is not int:\n                raise TypeError('Input should be a list of tuples of integers')\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    import itertools\n    # TODO: write a function that takes a list of tuples as argument and returns a list of tuples that satisfy the criteria\n    all_tuples = []\n    for i in range(len(test_list)):\n        all_tuples.append(test_list[i])\n    # print(all_tuples)\n    for j in range(2,K+1):\n        # print(j)\n        perms = list(itertools.permutations(test_list,j))\n        for p in perms:\n            # print(p)\n            if (sum(list(map(lambda x: x[0]%x[1], zip(test_list,p))))==0) and list(p) not in all_tuples:\n                all_tuples.append(list(p))\n    return all_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_list = [tuple(item) for item in test_list]\n    solution = []\n    for item in test_list:\n        if all(item % K == 0 for item in item):\n            solution.append(item)\n    return solution\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    answer = []\n    for i in test_list:\n        temp = []\n        for j in i:\n            if j % K == 0:\n                temp.append(j)\n            if len(temp) == 3:\n                break\n        if len(temp) == 3:\n            answer.append(temp)\n    return answer\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if i[0] % K == i[1] % K == i[2] % K == i[3] % K == i[4] % K == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for i in test_list:\n        if (all([j%K==0 for j in i])):\n            tuples.append(i)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for i in test_list:\n        if K % i[0] == 0 and K % i[1] == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for tup in test_list:\n        if tup[0] % K == 0 and tup[1] % K == 0:\n            tuples_list.append(tup)\n    return tuples_list\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in test_list:\n        if sum(list(map(lambda x : x % K == 0, i))) == len(i):\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    final_list = []\n    for i in test_list:\n        if sum(map(lambda x: x%K == 0, i)) == K:\n            final_list.append(i)\n    return final_list\n    \ndef find_tuples_1(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [i for i in test_list if sum(map(lambda x: x%K == 0, i)) == K]\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    else: \n        return False\n        \nprint(is_Diff(11))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n    \ndef get_Grade(marks):\n    '''\n    Write a python function to find the grade of a student based on his marks.\n    '''\n    grade = \"\"\n    if marks >= 70 and marks <= 100:\n        grade = \"A\"\n    elif marks >= 60 and marks < 70:\n        grade = \"B\"\n    elif marks >= 50 and marks < 60:\n        grade = \"C\"\n    elif marks >= 40 and marks < 50:\n        grade = \"D\"\n    elif marks >= 0 and marks < 40:\n        grade = \"E\"\n    else:\n        grade = \"Invalid\"\n    return grade\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # return whether a number is divisible by 11.\n    if(n%11==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n % 11 == 0):\n        print(str(n)+ \" is divisible by 11\")\n    else:\n        print(str(n)+ \" is not divisible by 11\")\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!= 0 \n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return \"odd\" if len(s) % 2 == 1 else \"even\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\nprint(word_len('mot'))\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print('Length of the word is even.')\n    else:\n        print('Length of the word is odd.')\n    return\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\nprint(word_len('word'))\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    tetrahedral_numbers = [0]\n    for num in range(1,n+1):\n        for i in range(1, num):\n            count += tetrahedral_numbers[i]\n        tetrahedral_numbers.append(count)\n    return tetrahedral_numbers[n]\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(n+2))//6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    tetra_sum = 1\n    i = 1\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n*(n+1)*(n+2)//6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n*(n+1)*(n+2))/6)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)/6\n    # return sum(range(n))\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (3 * n - 1) / 2\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4*math.pi*r**3)/3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # r = input('Please enter the radius of a sphere:')\n    pi = math.pi\n    volume = (4 / 3) * pi * (r ** 3)\n    print(f'The volume of a sphere with radius {r} is {volume}.')\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    \n    # Asume that radius is a float or int.\n    \n    # use the formula 4/3 * pi * r * r * r\n    \n    # where r is the radius\n    \n    # divide by 3\n    \n    # multiply by pi\n    \n    # multiply by 4\n    \n    # multiply by r\n    \n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4/3 * math.pi * r**3\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return ((4.0/3.0)*math.pi*(r**3))\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume_sphere= (4/3)*(math.pi)*(r**3)\n    return volume_sphere\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    v = (4/3) * math.pi * r**3\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi*(r**3)/6\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i]) % 26\n    return chr(char % 26 + 97)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    list1=list()\n    for i in strr:\n        list1.append(ord(i))\n    ans=(sum(list1)%26)\n    return ans\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in strr:\n        result = result + ord(i) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    res = 0\n    for i in strr:\n        res+= ord(i)\n    return chr(res % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr=input()\n    char=0\n    for i in strr:\n        char=char+ord(i)\n    return char%26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr(sum % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n=0\n    for i in strr:\n        n+=ord(i)\n    return n%26\nstrr=\"abz\"\nprint(get_Char(strr))"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in strr:\n        result += ord(i)\n    result = result % 26\n    return result\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #code here\n    c=0\n    for i in range(len(strr)):\n        c=c+ord(strr[i])\n    return c%26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum+ord(i)\n    return sum%26\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    start_n = 1\n    if n == start_n:\n        return n\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        num = sequence(n-1) + sequence(n-2)\n        return num\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 3\n    b = 2\n    if n == 0:\n        return a \n    elif n == 1:\n        return b\n    else:\n        for i in range(n-1):\n            c = a + b\n            a = b\n            b = c\n        return c\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    total = 0\n    new_total = 1\n    for i in range(1,n):\n        total = new_total\n        new_total = total + 2*total + 3\n    return new_total\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    for i in range(n):\n        print(newman_conway(i))\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: return 1\n    if n == 1: return 2\n    return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # start with an empty sequence\n    seq = [1]\n    # start with a number that is not divisible by 2, 3 or 5\n    curr = 2\n    # count the number of sequences that are smaller than the given sequence\n    counter = 0\n    while counter < n:\n        # if the sequence is smaller than the given sequence then append it to the sequence\n        if len(seq) < n:\n            seq.append(curr)\n        # otherwise find the next number in the sequence\n        else:\n            curr = seq[counter] + 3\n            # if the next number in the sequence is not divisible by 2, 3 or 5 then increment the number\n            while curr % 2 == 0 or curr % 3 == 0 or curr % 5 == 0:\n                curr += 1\n        # increment the counter\n        counter += 1\n    # return the final number in the sequence\n    return curr\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    elif n == 3:\n        return [1, 2, 3]\n    elif n == 4:\n        return [1, 2, 3, 5]\n    elif n == 5:\n        return [1, 2, 3, 5, 8]\n    else:\n        s = [1, 2, 3, 5, 8]\n        for i in range(n - 5):\n            s.append(s[i] + s[i+1] + s[i+2])\n        return s\n    \ndef sequence_newman(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 8\n    else:\n        s = [1, 2, 3, 5, 8]\n        for i in range(n - 5):\n            s.append(s[i] + s[i+1] + s[i+2])\n        return s[-1]\n    \nif __name__ == '__main__':\n    \n    from random import randint\n    \n    s = [1, 2, 3, 5, 8]\n    \n    for i in range(11):\n        print(sequence_newman(i+1))\n    \n    \n    \n    "
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n<0:\n        return \"Input is out of range. The only input is a nonnegative integer.\"\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 5\n    elif n == 2:\n        return 3\n    else:\n        return sequence(n-1)+sequence(n-2)\n        \ndef main():\n    # set up the loop to exit when user enters 'q'\n    while True:\n        # get user input and print output\n        try:\n            n = input('Please enter a nonnegative integer: ')\n            if n=='q':\n                break\n            n = int(n)\n            print(sequence(n))\n        except ValueError:\n            print('Please enter a nonnegative integer.  Try again.')\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return a*b\ndef perimeter_parallelogram(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    return 2*(a+b)\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*b*h\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return a+b+c\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(a+b)\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    return ((a+b)/2)*h\ndef perimeter_trapezium(a,b,h):\n    '''\n    Write a function to find the perimeter of a trapezium.\n    '''\n    return a+b+h\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef circumference_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\ndef area_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    return 0.5*a*b\ndef perimeter_rhombus(a,b):\n    '''\n    Write a function to find the perimeter of a rhombus.\n    '''\n    return 2*(a+b)\ndef area_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return 4*a\ndef area_square_rectangle(a,b):\n    '''\n    Write a function to find the area of a square in a rectangle.\n    '''\n    return a*b\ndef perimeter_square_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a square in a rectangle.\n    '''\n    return 2*(a+b)\ndef area_square_triangle(a,b,c):\n    '''\n    Write a function to find the area of a square in a triangle.\n    '''\n    return math.sqrt(a**2+b**2-2*a*b*math.cos(math.radians(30)))\ndef perimeter_square_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a square in a triangle.\n    '''\n    return a+b+c\ndef area_rectangle_circle(a,b):\n    '''\n    Write a function to find the area of a rectangle in a circle.\n    '''\n    return math.pi*a*b\ndef circumference_rectangle_circle(a,b):\n    '''\n    Write a function to find the circumference of a rectangle in a circle.\n    '''\n    return 2*math.pi*a\ndef area_triangle_circle(a,b,r):\n    '''\n    Write a function to find the area of a triangle in a circle.\n    '''\n    return 0.5*math.pi*r**2\ndef area_circle_triangle(r,b,h):\n    '''\n    Write a function to find the area of a circle in a triangle.\n    '''\n    return b*h*0.5\ndef area_circle_rectangle(r,a,b):\n    '''\n    Write a function to find the area of a circle in a rectangle.\n    '''\n    return r**2*math.pi\ndef circumference_circle_rectangle(r,a,b):\n    '''\n    Write a function to find the circumference of a circle in a rectangle.\n    '''\n    return 2*math.pi*r\ndef area_circle_square(r,a):\n    '''\n    Write a function to find the area of a circle in a square.\n    '''\n    return r**2*math.pi\ndef area_square_circle(r,a):\n    '''\n    Write a function to find the area of a square in a circle.\n    '''\n    return r**2\ndef circumference_square_circle(r,a):\n    '''\n    Write a function to find the circumference of a square in a circle.\n    '''\n    return 2*math.pi*r\ndef area_rectangle_triangle(a,b,h):\n    '''\n    Write a function to find the area of a rectangle in a triangle.\n    '''\n    return (a*b*h)/2\ndef area_triangle_rectangle(a,b,h):\n    '''\n    Write a function to find the area of a triangle in a rectangle.\n    '''\n    return a*h\ndef circumference_rectangle_triangle(a,b,h):\n    '''\n    Write a function to find the circumference of a rectangle in a triangle.\n    '''\n    return 2*a+2*b\ndef area_rectangle_parallelogram(a,b,h):\n    '''\n    Write a function to find the area of a rectangle in a parallelogram.\n    '''\n    return a*b\ndef area_parallelogram_rectangle(a,b,h):\n    '''\n    Write a function to find the area of a parallelogram in a rectangle.\n    '''\n    return a*h\ndef circumference_rectangle_parallelogram(a,b,h):\n    '''\n    Write a function to find the circumference of a rectangle in a parallelogram.\n    '''\n    return 2*a+2*b\ndef area_triangle_parallelogram(a,b,h):\n    '''\n    Write a function to find the area of a triangle in a parallelogram.\n    '''\n    return 0.5*a*h\ndef area_parallelogram_triangle(a,b,h):\n    '''\n    Write a function to find the area of a parallelogram in a triangle.\n    '''\n    return a*h\ndef circumference_parallelogram_triangle(a,b,h):\n    '''\n    Write a function to find the circumference of a parallelogram in a triangle.\n    '''\n    return 2*a+2*b\ndef area_parallelogram_circle(a,b,r):\n    '''\n    Write a function to find the area of a parallelogram in a circle.\n    '''\n    return math.pi*a*b\ndef area_circle_parallelogram(r,a,b):\n    '''\n    Write a function to find the area of a circle in a parallelogram.\n    '''\n    return math.pi*r*a\ndef area_circle_rectangle(r,a,b):\n    '''\n    Write a function to find the area of a circle in a rectangle.\n    '''\n    return r**2*math.pi\ndef area_square_parallelogram(a,b,h):\n    '''\n    Write a function to find the area of a square in a parallelogram.\n    '''\n    return a*b\ndef perimeter_square_parallelogram(a,b,h):\n    '''\n    Write a function to find the perimeter of a square in a parallelogram.\n    '''\n    return 4*(a+b)\ndef circumference_square_parallelogram(a,b,h):\n    '''\n    Write a function to find the circumference of a square in "
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if type(r) is not int and type(r) is not float:\n        return \"Invalid Input\"\n    else:\n        return 4 * 3.14 * r ** 2\ndef surfacearea_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    if type(s) is not int and type(s) is not float:\n        return \"Invalid Input\"\n    else:\n        return 6 * s ** 2\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if type(r) is not int and type(r) is not float:\n        return \"Invalid Input\"\n    elif type(h) is not int and type(h) is not float:\n        return \"Invalid Input\"\n    else:\n        return 2 * 3.14 * r * h + 3.14 * r ** 2\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    if type(r) is not int and type(r) is not float:\n        return \"Invalid Input\"\n    elif type(h) is not int and type(h) is not float:\n        return \"Invalid Input\"\n    else:\n        return 3.14 * r * h + 3.14 * r ** 2\ndef surfacearea_rectangle(s1, s2):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    elif type(s2) is not int and type(s2) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 * s2\ndef surfacearea_triangle(s1, s2, s3):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    elif type(s2) is not int and type(s2) is not float:\n        return \"Invalid Input\"\n    elif type(s3) is not int and type(s3) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 * s2 * s3 / 2\ndef surfacearea_parallelogram(s1, s2):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    elif type(s2) is not int and type(s2) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 * s2\ndef surfacearea_trapezium(s1, s2, s3):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    elif type(s2) is not int and type(s2) is not float:\n        return \"Invalid Input\"\n    elif type(s3) is not int and type(s3) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 * s2 / 2 + s1 * s3 / 2\ndef surfacearea_kite(s1, s2):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    elif type(s2) is not int and type(s2) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 * s2\ndef surfacearea_dodecahedron(s1, s2):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    elif type(s2) is not int and type(s2) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 * s2\ndef surfacearea_icosahedron(s1):\n    '''\n    Write a function to find the surface area of a icosahedron.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 ** 2 * (5 ** 0.5 * 0.433) / 3\ndef surfacearea_octahedron(s1):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 ** 2 * 3.5 ** 0.5\ndef surfacearea_icosidodecahedron(s1):\n    '''\n    Write a function to find the surface area of an icosidodecahedron.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 ** 2 * 5.049 ** 0.5\ndef surfacearea_dodecadodecahedron(s1):\n    '''\n    Write a function to find the surface area of a dodecadodecahedron.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 ** 2 * 3.88 ** 0.5\ndef surfacearea_truncated_octahedron(s1):\n    '''\n    Write a function to find the surface area of a truncated octahedron.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 ** 2 * 3.75 ** 0.5\ndef surfacearea_rhombicuboctahedron(s1):\n    '''\n    Write a function to find the surface area of a rhombicuboctahedron.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 ** 2 * 2.966 ** 0.5\ndef surfacearea_pyramide(s1):\n    '''\n    Write a function to find the surface area of a pyramide.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 ** 2 * 3 ** 0.5\ndef surfacearea_tetrahedron(s1):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 ** 2 * 4 / 3\ndef surfacearea_octahedron(s1):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 ** 2 * 6\ndef surfacearea_truncated_tetrahedron(s1):\n    '''\n    Write a function to find the surface area of a truncated tetrahedron.\n    '''\n    if type(s1) is not int and type(s1) is not float:\n        return \"Invalid Input\"\n    else:\n        return s1 ** 2 * 2\ndef surfacearea_tricylindr_cone(r, h):\n    '''\n    Write a function to find the surface area of a tricylindr_cone.\n    '''\n    if type(r) is not int and type(r) is not float:\n        return \"Invalid Input\"\n    elif type(h) is not int and type(h) is no"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #radius in radius\n    #return 4*math.pi*r**2\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14\n    sa = 4*pi*(r**2)\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h + 2 * math.pi * r**2\ndef surfacearea_rectangle(w,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return w * h\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return a * b / 2\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3 * math.pi * r**2 * h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * r**2 * h\ndef volume_rectangle(w,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return w * h\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return 1/2 * a * b * c\ndef volume_parallelogram(a,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    return a * b\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a**3\ndef volume_rightpyramid(a,h):\n    '''\n    Write a function to find the volume of a right pyramid.\n    '''\n    return a**2 * h / 3\ndef volume_pyramid(a,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a**2 * h / 3\ndef volume_hexagon(a):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    return a**3 / 3\ndef volume_pentagon(a):\n    '''\n    Write a function to find the volume of a pentagon.\n    '''\n    return a**2 / 2\ndef volume_octogon(a):\n    '''\n    Write a function to find the volume of an octogon.\n    '''\n    return a**2 * math.sqrt(2) / 2\ndef volume_tetrahedron(a):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return a**3 / 4\ndef volume_hexahedron(a):\n    '''\n    Write a function to find the volume of a hexahedron.\n    '''\n    return a**3 * math.sqrt(3) / 12\ndef volume_dodecahedron(a):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return a**3 * math.sqrt(5) / 20\ndef volume_icosahedron(a):\n    '''\n    Write a function to find the volume of an icosahedron.\n    '''\n    return a**3 * math.sqrt(5) / 12\ndef volume_unitcell():\n    '''\n    Write a function to find the volume of a unit cell.\n    '''\n    return 1\ndef surfacearea_unitcell():\n    '''\n    Write a function to find the surface area of a unit cell.\n    '''\n    return 1\ndef surfacearea_parallelepiped(w,l,h):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    return 2 * (w*l + l*h + w*h)\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 2 * math.pi * r * (r + h)\ndef surfacearea_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * a**2\ndef surfacearea_rightpyramid(a,h):\n    '''\n    Write a function to find the surface area of a right pyramid.\n    '''\n    return 2 * math.sqrt(a**2 + a**2 / 4) * h\ndef surfacearea_pyramid(a,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return 2 * math.sqrt(a**2 + a**2 / 4) * h\ndef surfacearea_octogon(a):\n    '''\n    Write a function to find the surface area of an octogon.\n    '''\n    return 2 * math.sqrt(2) * a**2\ndef surfacearea_icosahedron(a):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return 2 * math.sqrt(3) * a**2\ndef surfacearea_dodecahedron(a):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return 2 * math.sqrt(5) * a**2\ndef surfacearea_icosahedron(a):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return 2 * math.sqrt(5) * a**2\ndef surfacearea_unitcell():\n    '''\n    Write a function to find the surface area of a unit cell.\n    '''\n    return 1\ndef surfacearea_hexagon(a):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    return 6 * a\ndef surfacearea_hexahedron(a):\n    '''\n    Write a function to find the surface area of a hexahedron.\n    '''\n    return 2 * math.sqrt(3) * a**2\ndef surfacearea_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * a**2\ndef surfacearea_octahedron(a):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    return 2 * math.sqrt(2) * a**2\ndef surfacearea_tetrahedron(a):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return 4 * a**2\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return a + b + c\ndef surfacearea_rightpyramid(a,h):\n    '''\n    Write a function to find the surface area of a right pyramid.\n    '''\n    return 2 * math.sqrt(a**2 + a**2 / 4) * h\ndef surfacearea_pyramid(a,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return 2 * math.sqrt(a**2 + a**2 / 4) * h\ndef surfacearea_rightpyramid(a,h):\n    '''\n    Write a function to find the surface area of a right pyramid.\n    '''\n    return 2 * math.sqrt(a**2 + a**2 / 4) * h\ndef surfacearea_pyramid(a,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return 2 * math.sqrt(a**2 + a**2 / 4) * h\ndef surfacearea_rightpyramid(a,h):\n    '''\n    Write a function to find the surface area of a right pyramid.\n    '''\n    return 2 * math.sqrt(a**2 + a**2 / 4) * h\ndef surfacearea_pyramid(a,h):\n    '''\n    Write a functio"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    sa = 4*math.pi*(r*r)\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #base area = pi * 4 * r ** 2\n    #surface area = 4 * pi * r ** 2\n    #2D => 2 * pi * r ** 2\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    return (n * (2 * n - 1)) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # The first hexagonal number is 1.\n    # The first hexagonal number is 2x1 + 1.\n    # The first hexagonal number is 2x2 + 2x + 1.\n    # The first hexagonal number is 2x3 + 3x + 2.\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * n - n + 1\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    ans = 0\n    n -= 1\n    for i in range(1, n+2):\n        ans += i * (-1)**i * (((3*i)-1)**.5 / 2)\n    return int(ans)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def get_side(n):\n        return (1 + (1 + 8 * n)**0.5) / 4\n    \n    def get_x_coord(n, side):\n        return int(side * ((1 + (1 + 2 * n)**0.5) / 2))\n    \n    return sum([get_x_coord(i, side) for i, side in enumerate(get_sides(n))])\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return centered_hexagonal_number(n - 1) + 1\n    else:\n        return hexagonal_number(hexagonal_number(n))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    x = 0\n    m = 0\n    for i in range(n-1):\n        x = m + 1\n        m = x * (3 * x - 2) / 2\n    return int(m)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_number(n):\n        return n * (3 * n - 1) / 2\n    \n    return centered_hexagonal_number(n)"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # 0-centered, 1-centered, 2-centered,..., \n    # n-centered, n+1-centered, n+2-centered...\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def pentagonal_number(n):\n        return int(n*(3*n-1)/2)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    print(f'Dict1: {dict1}')\n    print(f'Dict2: {dict2}')\n    print(f'Dict3: {dict3}')\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # print(dict1)\n    # print(dict2)\n    # print(dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = {}\n    d = dict1.copy()\n    d.update(dict2)\n    d.update(dict3)\n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for k,v in dict3.items():\n        try:\n            dict2[k]\n            dict1[k]\n            dict3[k]\n            dict3[k]=dict1[k]+dict2[k]+dict3[k]\n        except:\n            pass\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    z = ct.defaultdict(list)\n    for k,v in dict1.items():\n        z[k].extend(v)\n    for k,v in dict2.items():\n        z[k].extend(v)\n    for k,v in dict3.items():\n        z[k].extend(v)\n    return z\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for k,v in dict1.items():\n        dict3.setdefault(k, []).append(v)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Your code here\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merge_dict = {**dict1, **dict2, **dict3}\n    return merge_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for n in list1:\n        if n in count:\n            count[n] += 1\n        else:\n            count[n] = 1\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = collections.Counter(list1)\n    return counts\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for item in list1:\n        if item in d:\n            d[item] = d[item] + 1\n        else:\n            d[item] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result=collections.Counter(list1)\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = dict()\n    for element in list1:\n        if element not in freq:\n            freq[element] = 1\n        else:\n            freq[element] += 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list1 = [1, 2, 1, 4, 1, 2, 3, 3, 4, 3, 4, 4, 4]\n    dict1 = {}\n    for num in list1:\n        if num in dict1:\n            dict1[num] += 1\n        else:\n            dict1[num] = 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for element in list1:\n        if element in count.keys():\n            count[element] += 1\n        else:\n            count[element] = 1\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1={}\n    for i in range(len(list1)):\n        if list1[i] not in dict1:\n            dict1[list1[i]]=1\n        else:\n            dict1[list1[i]]+=1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = collections.Counter(list1)\n    return counts\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_smaller_num(n, a, b):\n        if a == b:\n            return a\n        if n < a:\n            return b\n        if n > b:\n            return a\n        return a + (b - a) // 2\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 2:\n        return 1\n    # ==============\n    # Your code here\n    # ==============\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        N = abs(N)\n    return closest_num_helper(N, 0, N-1)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 10:\n        return None\n    a = N % 10\n    b = (N // 10) % 10\n    c = N // 100\n    if a == 0:\n        return 10*b + c\n    if b == 0:\n        return 10*a + c\n    return 100*c + 10*a + b\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    assert isinstance(N, int)\n    return min([i for i in range(N) if i < N])\n    \ndef closest_num2(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    assert isinstance(N, int)\n    m,n = 0,N\n    if n > 1:\n        while n>=0:\n            m = n - 1\n            n = n - 2\n            if n<0:\n                return m\n    else:\n        return 0\n    \ndef closest_num3(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    assert isinstance(N, int)\n    m,n = 0,N\n    if n > 1:\n        while n>=0:\n            m = n - 1\n            n = n - 2\n            if n<0:\n                return m\n    else:\n        return 0\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # if N <= 0:\n    #     return N\n    # N = abs(N)\n    # if N % 2 == 0:\n    #     return N // 2\n    # else:\n    #     return (N - 1) // 2\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    temp_list = []\n    for i in range(1,N+1):\n        temp_list.append(i)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    closest_num = -1\n    while closest_num == -1 or closest_num <= n:\n        closest_num = closest_number(n)\n        n += 1\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #initialize variables\n    num1 = 0\n    num2 = 0\n    num3 = 0\n    if N%2 == 0:\n        num1 = int(N/2)\n        num2 = int(N/2) + 1\n    else:\n        num1 = int(N/2) + 1\n        num2 = int(N/2) + 2\n    #find closest smaller number for each of the two numbers\n    if num1 < N:\n        num1 = int(N/2)\n    if num2 < N:\n        num2 = int(N/2) + 1\n    #find the closest number\n    if abs(N - num1) < abs(N - num2):\n        num3 = num2\n    else:\n        num3 = num1\n    return num3\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # if N <0:\n    #     return N\n    # while N > 0:\n    #     N = N - 1\n    # return N\n    return min(range(N-1, -1, -1), key=lambda x: abs(N-x))\n    \n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_log = []\n    for i in list1:\n        len_log.append(len(i))\n    return max(len_log)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        max_word_len = 0\n        for word in list1:\n            if len(word) > max_word_len:\n                max_word_len = len(word)\n        return max_word_len\nprint(len_log(['hello', 'world']))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n    #return len(max(list1, key=len).strip())\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # list1 = input(\"Enter a list of words: \").split()\n    # print(\"Longest Word: \",list1[np.argmax(map(len,list1))])\n    # print(list1)\n    return max(list1,key=len)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(len(i))\n    return max(list2)\nprint(len_log([\"a\", \"Apple\", \"pear\", \"kiwi\"]))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for i in list1:\n        if longest < len(i):\n            longest = len(i)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = None\n    for word in list1:\n        if longest_word is None or len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            \n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_len = len(max(list1, key=len))\n    return word_len\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    dict = {}\n    for i in list1:\n        dict[i] = len(i)\n    dict = dict.items()\n    dict = sorted(dict, key = lambda x: x[1], reverse = True)\n    print dict[0][1]\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    l = [s for s in str1 if sub_str in s]\n    return l\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str in str1[i:i+len(sub_str)]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:].startswith(sub_str):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = any(sub_str in s for s in str1)\n    print(result)\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i:].startswith(sub_str):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = False\n    for i in range(0, len(str1)):\n        if sub_str in str1[i]:\n            result = True\n            break\n    return result\n    \n    \n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return \"String Found\"\n    else:\n        return \"String Not Found\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # for string in str1:\n    #     if str2 in string:\n    #         return True\n    # return False\n    for i in range(0,len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1.find(sub_str) == -1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return [string for string in str1 if sub_str in string]\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    if len(set(str(n))) == 1:\n        return False\n    s = [int(d) for d in str(n)]\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            if i == 0:\n                if s[i] > s[i+1]:\n                    return True\n                else:\n                    return False\n            if s[i-1] > s[i+1]:\n                return True\n            else:\n                return False\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n_str = str(n)\n    digits = list(n_str)\n    is_odd = len(digits) % 2 == 1\n    if is_odd:\n        is_even = False\n    else:\n        is_even = True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    odd_nums = []\n    even_nums = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_nums.append(i)\n        else:\n            odd_nums.append(i)\n    if len(even_nums) == 1 or len(odd_nums) == 1:\n        return False\n    else:\n        if (odd_nums[0] - even_nums[0]) == (odd_nums[1] - even_nums[1]):\n            return True\n        else:\n            return False\n    \n    return False\n    \nprint(is_undulating(10))\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    if len(s) == 1:\n        return False\n    else:\n        if int(s[0]) - int(s[1]) == int(s[-1]) - int(s[-2]):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    num_of_digits = len(str(n))\n    for i in range(1, num_of_digits):\n        left = int(str(n)[:i])\n        right = int(str(n)[i:])\n        if abs(left-right)!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    n = len(s)\n    if '-' in s:\n        n -= 1\n        s = s[1:]\n    sum = 0\n    for i in range(n):\n        sum += int(s[i])\n    return sum % 2!= 0\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    temp = str(n)\n    for i in range(1, len(temp)):\n        if int(temp[i]) < int(temp[i-1]):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n % 2 == 0): \n        return False\n    if ((n % 3 == 0) or (n % 5 == 0)): \n        return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    print(n)\n    l = len(str(n))\n    mid = l//2\n    print(mid)\n    for i in range(mid):\n        print(i)\n        first = int(str(n)[i])\n        print(first)\n        last = int(str(n)[l-i-1])\n        print(last)\n        if first == last:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n**2 + 1) % 6 == 0 \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    print(pow(a,b))\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result*a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif a == 1:\n        return a\n    elif b == 1:\n        return a\n    elif b == 2:\n        return a * power(a, 1)\n    else:\n        return a * power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    print(a**b)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\nprint(power(2,3))\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    elif b==2:\n        return a*a\n    elif b==3:\n        return a*a*a\n    elif b==4:\n        return a*a*a*a\n    elif b==5:\n        return a*a*a*a*a\n    elif b==6:\n        return a*a*a*a*a*a\n    elif b==7:\n        return a*a*a*a*a*a*a\n    elif b==8:\n        return a*a*a*a*a*a*a*a\n    else:\n        return a*a*a*a*a*a*a*a*a\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    # Create a new list sorted by the second value\n    test_list.sort(key=itemgetter(1))\n    \n    # Return the first element of the list, which should be the minimum value\n    return test_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return test_list[min(enumerate(test_list), key=itemgetter(1))[0]]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #print(sorted(test_list, key=itemgetter(1)))\n    return(sorted(test_list, key=itemgetter(1))[0])\n    \ndef index_minimum_neg(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value, and negative values are allowed.\n    '''\n    return(min(test_list, key=lambda t: t[1]))\n    \ndef index_minimum_neg2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value, and negative values are allowed, but uses a lambda expression.\n    '''\n    test_list = [(t[0],-t[1]) for t in test_list]\n    return(min(test_list, key=lambda t: t[1]))\n    \ndef index_minimum_neg3(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value, and negative values are allowed, but uses a lambda expression.\n    '''\n    return(sorted(test_list, key=lambda t: -t[1])[0])\n    \ndef index_minimum_neg4(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value, and negative values are allowed, but uses a lambda expression.\n    '''\n    return(sorted(test_list, key=itemgetter(-1))[0])\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_tuple = min(test_list, key=itemgetter(1))\n    return min_tuple[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return itemgetter(1)(min(test_list,key=itemgetter(1)))\n    \ndef remove_duplicates(test_list):\n    '''\n    Given a list of tuples, write a function that removes duplicate tuples from the list.\n    '''\n    return list(dict.fromkeys(test_list))\n    \ndef sort_by_length(test_list):\n    '''\n    Given a list of tuples, write a function that sorts the list by the length of the strings in the tuple.\n    '''\n    return sorted(test_list,key=lambda x:len(x[1]))\n    \ndef return_list_of_groups(test_list,num_groups):\n    '''\n    Given a list of tuples and a number of groups, return a list of groups that have the greatest number of common letters to each other.\n    '''\n    groups = []\n    for i in range(num_groups):\n        groups.append([])\n        \n    for i in test_list:\n        for j in range(len(groups)):\n            if(len(i) > len(groups[j])):\n                groups.insert(j,i)\n                break\n    \n    return groups\n    \ndef list_of_tuples_to_list_of_dicts(test_list):\n    '''\n    Given a list of tuples, return a list of dictionaries where each dictionary represents an individual tuple.\n    '''\n    return [dict(zip(('name', 'age', 'weight'),tuple)) for tuple in test_list]\n    \ndef sum_of_all_tuple_elements(test_list):\n    '''\n    Given a list of tuples, return a tuple that represents the sum of all elements of each tuple in the list.\n    '''\n    return tuple(sum(tuple) for tuple in test_list)\n    \ndef count_of_all_tuples(test_list):\n    '''\n    Given a list of tuples, return a tuple that represents the count of each element in the list.\n    '''\n    return tuple(dict.fromkeys(test_list,0))\n    \ndef largest_number_in_list(test_list):\n    '''\n    Given a list of tuples, return a tuple that represents the largest number in the list.\n    '''\n    return max(test_list)\n    \ndef smallest_number_in_list(test_list):\n    '''\n    Given a list of tuples, return a tuple that represents the smallest number in the list.\n    '''\n    return min(test_list)\n    \ndef return_tuples_with_largest_first_elements(test_list):\n    '''\n    Given a list of tuples, return a list of tuples that are sorted by the first element in the tuple.\n    '''\n    return sorted(test_list,key=lambda x:x[0])\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(1, len(lst)):\n        if(len(lst[i]) < min_len):\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst = [len(i) for i in lst]\n    return min(lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = len(lst[0])\n    for i in range(0,len(lst)):\n        if(len(lst[i]) < smallest):\n            smallest = len(lst[i])\n    return smallest\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if min_length>len(i):\n            min_length=len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000\n    for i in lst:\n        min_length = min(min_length, len(i))\n    return min_length\n    \ndef Common_Elements(lst1, lst2):\n    '''\n    Write a python function that takes two lists as input and outputs a list that contains all the elements that are common in both lists.\n    '''\n    return [item for item in lst1 if item in lst2]\n    \ndef Average_of_Lists(lst):\n    '''\n    Write a python function that takes a list of lists as input and returns the average of the list elements.\n    '''\n    return sum(lst)/len(lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=len(lst[0])\n    for l in lst:\n        if len(l)<min_length:\n            min_length=len(l)\n    return min_length\n    \n    \n    \ndef All_Elements_Greater_Than_K(lst,k):\n    '''\n    Write a python function to find the number of lists in a list of lists whose elements are greater than k. \n    '''\n    count=0\n    for l in lst:\n        for e in l:\n            if e>k:\n                count+=1\n    return count\n    \n    \n    \ndef Common_Elements(lst1,lst2):\n    '''\n    Write a python function to find the common elements in the given two lists.\n    '''\n    count=0\n    for e in lst1:\n        if e in lst2:\n            count+=1\n    return count\n    \n    \n    \ndef Remove_Duplicates(lst):\n    '''\n    Write a python function to remove the duplicates from a list of lists.\n    '''\n    return [list(t) for t in set(tuple(element) for element in lst)]\n    \n    \n    \ndef Remove_Element_From_List(lst,element):\n    '''\n    Write a python function to remove the given element from a list of lists.\n    '''\n    return [lst.remove(element) for element in lst if element==element]\n    \n    \n    \ndef Search_List_Of_List(lst,search_item):\n    '''\n    Write a python function to search a list of lists for a given item.\n    '''\n    return [l for l in lst if search_item in l]\n    \n    \n    \ndef Print_Matrix(matrix):\n    '''\n    Write a python function to print the given matrix in a specific format.\n    '''\n    for i in matrix:\n        for j in i:\n            print(j, end=' ')\n        print()\n    \n    \ndef Print_Tuples(tup):\n    '''\n    Write a python function to print the given list of tuples in a specific format.\n    '''\n    for t in tup:\n        print(t[0],t[1],sep='-')\n    \n    \ndef Print_Dictionary(dict1):\n    '''\n    Write a python function to print the given dictionary in a specific format.\n    '''\n    for k,v in dict1.items():\n        print(k,v,sep='-')\n    \n    \ndef Remove_Values_From_List(lst,rem_val):\n    '''\n    Write a python function to remove the given values from a list of lists.\n    '''\n    return [lst.remove(rem_val) for lst in lst if rem_val in lst]\n    \n    \n    \ndef Dictionary_Values_Sum(dict1):\n    '''\n    Write a python function to calculate the sum of all values in a dictionary.\n    '''\n    return sum([v for v in dict1.values()])\n    \n    \n    \ndef Print_Values_In_Sorted_Order(dict1):\n    '''\n    Write a python function to print the values in the given dictionary in sorted order.\n    '''\n    sorted_dict={}\n    keys=[*dict1]\n    for k in keys:\n        sorted_dict[k]=dict1[k]\n    return sorted_dict\n    \n    \n    \ndef Number_Of_Times_Value_Repeats_In_List_Of_Lists(lst,val):\n    '''\n    Write a python function to count the number of times the given value appears in a list of lists.\n    '''\n    count=0\n    for l in lst:\n        if val in l:\n            count+=1\n    return count\n    \n    \n    \ndef List_Of_Lists_To_Dictionary(lst):\n    '''\n    Write a python function to convert a list of lists to a dictionary.\n    '''\n    lst_dict={}\n    for element in lst:\n        if element[0] in lst_dict:\n            lst_dict[element[0]].append(element[1])\n        else:\n            lst_dict[element[0]]=[element[1]]\n    return lst_dict\n    \n    \n    \ndef Find_Most_Common_Value(dict1):\n    '''\n    Write a python function to find the most common value in a dictionary.\n    '''\n    max_count=0\n    max_val=''\n    for k in dict1:\n        if dict1[k]>max_count:\n            max_count=dict1[k]\n            max_val=k\n    return max_val\n    \n    \n    \ndef Count_Occurences_Of_Value(lst,val):\n    '''\n    Write a python function to count the number of occurrences of a value in a list of lists.\n    '''\n    count=0\n    for l in lst:\n        if val in l:\n            count+=1\n    return count\n    \n    \n    \ndef Remove_Value_From_All_Occurences(lst,val):\n    '''\n    Write a python function to remove a value from all lists in a list of lists.\n    '''\n    return [lst.remove(val) for lst in lst if val in lst]\n    \n    \n    \ndef Remove_Value_From_All_Occurences_Two(lst,val1,val2):\n    '''\n    Write a python function to remove a value from all lists in a list of lists, if the value appears in more than one list.\n    '''\n    return [lst.remove(val1) if val1 in lst else lst.remove(val2) for lst in lst if val1 in lst or val2 in lst]\n    \n    \n    \ndef List_Of_Lists_To_Set(lst):\n    '''\n    Write a python function to convert a list of lists to a set.\n    '''\n    return {tuple(l) for l in lst}\n    \n    \n    \ndef List_Of_Sets_To_List_Of_Lists(lst):\n    '''\n    Write a python function to convert a list of sets to a list of lists.\n    '''\n    return [list(s) for s in lst]\n    \n    \n    \ndef Sort_Values_In_List_Of_Lists(lst):\n    '''\n    Write a python function to sort all values in a list of lists.\n    '''\n    return [sorted(l) for l in lst]\n    \n    \n    \ndef Sort_Tuples_By_Length(lst):\n    '''\n    Write a python function to sort the tuples in a list of lists by their length.\n    '''\n    return sorted(lst,key=lambda tup:(len(tup[0]),tup[0]))\n    \n    \n    \ndef List_Of_Tuples_To_Dictionary(lst):\n    '''\n    Write a python function to convert a list of tuples to a dictionary.\n    '''\n    tup_dict={}\n    for tup in lst:\n        tup_dict[tup[0]]=tup[1]\n    return tup_dict\n    \n    \n    \ndef Dictionary_Of_Sets_To_List_Of_Tuples(dict1):\n    '''\n    Write a python function to convert a dictionary of sets to a list of tuples.\n    '''\n    return [tuple(s) for s in dict1.values()]\n    \n    \n    \ndef Sort_List_Of_Dictionaries_By_Values(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their values.\n    '''\n    return sorted(lst,key=lambda dic:(dic['red'],dic['blue'],dic['green']))\n    \n    \n    \ndef Print_List_Of_Lists(lst):\n    '''\n    Write a python function to print a list of lists in a specific format.\n    '''\n    for l in lst:\n        for e in l:\n            print(e, end=' ')\n        print()\n    "
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Method 1: Find the length of the smallest list and then find the sum of the min length and the minimum length in the list\n    # Method 2: Find the minimum length in the list and then find the sum of the minimum length and the minimum length in the list\n    # Method 3: Check every sublist and find the minimum length and minimum length in the list\n    # Method 4: Find the minimum length in the list and then find the sum of the minimum length and the minimum length in the list\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_len = []\n    for i in lst:\n        lst_len.append(len(i))\n    lst_len.sort()\n    return lst_len[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst == []:\n        return 0\n    return min(map(len, lst))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    mini = min(len(lst) for lst in lst)\n    return mini\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    counter = 0\n    for i in range(1,n+1):\n        if(n%i==0):\n            counter = counter+1\n    return counter\n    \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return sum([1 if n%i==0 else 0 for i in range(1,n//2+1)])\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # base case\n    if n == 1:\n        return 1\n    \n    # code here\n    if n % 2 == 0:\n        return 2\n    else:\n        return 1\n    \n    # return number of divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n/2)+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count=count+1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    cnt = 0\n    for i in range(1,n):\n        if n%i==0:\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 1:\n        return 0\n    divisors = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    return count * 2\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    count = 0\n    for i in range(1, int(n ** 0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count*2\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    import collections\n    counts = collections.Counter()\n    for items in list1:\n        counts.update(items)\n    return dict(counts)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    from collections import Counter\n    dict1 = Counter(list1)\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #print(list1)\n    res = {i:list1.count(i) for i in list1}\n    print(res)\n    return(res)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for num in list1:\n        if num not in frequency:\n            frequency[num] = 1\n        else:\n            frequency[num] += 1\n    print(frequency)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = []\n    for sublist in list1:\n        for element in sublist:\n            flattened_list.append(element)\n    return collections.Counter(flattened_list)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    print(freq_dict)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    list_flattened = [item for sublist in list1 for item in sublist]\n    for x in list_flattened:\n        if x not in freq_dict:\n            freq_dict[x] = 1\n        else:\n            freq_dict[x] += 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # print(numbers)\n    # print(len(numbers))\n    sum = 1\n    for i in numbers:\n        sum = sum * i\n    return sum/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for n in numbers:\n        product *= n\n    return product/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for i in numbers:\n        multiply *= i\n    return multiply/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num_list = numbers  \n    total = 1\n    for num in num_list:  \n        total *= num\n    return total//len(num_list)  \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # new_numbers = []\n    # for number in numbers:\n    #     new_numbers.append(number * length)\n    # return new_numbers\n    return [number * length for number in numbers]\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for i in numbers:\n        product *= i\n    length = len(numbers)\n    return product/length\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for n in numbers:\n        total *= n\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for x in numbers:\n        result = result * x\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total = total * x\n    return total / len(numbers)\n    \n    \ndef max_length(numbers):\n    '''\n    Write a function to find the longest word in a list of words\n    '''\n    words = []\n    for x in numbers:\n        words.append(x)\n    word = words[0]\n    for x in words:\n        if len(x) > len(word):\n            word = x\n    return word\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n!= 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        raise ValueError('The number must be a non-negative integer!')\n    elif n == 0:\n        return '0'\n    else:\n        result = ''\n        while n > 0:\n            result = str(n%2) + result\n            n //= 2\n        return result\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = ''\n    while n > 0:\n        result += str(n % 2)\n        n = int(n / 2)\n    return result[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if(n > 1): \n        decimal_to_binary(n//2) \n    print(n%2, end='') \n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if(n==0):\n        return 0\n    if(n==1):\n        return 1\n    return decimal_to_binary(n//2) + (n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    dec_to_bin = \"\" \n    while n!= 0: \n        dec_to_bin += str(n % 2) \n        n = n//2\n    return dec_to_bin[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        return next_smallest_palindrome(-num)\n    num_of_digits = len(str(num))\n    if num_of_digits == 1:\n        return -1\n    largest_palindrome = largest_palindrome_number(num)\n    if largest_palindrome <= num:\n        return largest_palindrome\n    mid_index = int(num_of_digits / 2)\n    candidate_int = 1\n    for i in range(1, mid_index + 1):\n        candidate_int *= 10\n        candidate_int += 9\n    candidate_int *= 10\n    candidate_int += num % 10 - 1\n    if candidate_int < num:\n        candidate_int += 1\n    if is_palindrome(candidate_int):\n        return candidate_int\n    else:\n        candidate_int += 1\n        while not is_palindrome(candidate_int):\n            candidate_int += 1\n        return candidate_int\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if num == num[::-1]:\n        return num\n    for i in range(len(num),0,-1):\n        if num[:i] == num[:i][::-1]:\n            return int(num[:i] + num[i:][::-1])\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        if num < 10:\n            return True\n        num = str(num)\n        return num == num[::-1]\n    \n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    assert (type(num) == int), \"Input is not an integer.\"\n    assert (num >= 0), \"Input is negative.\"\n    temp = str(num)\n    length = len(temp)\n    if length == 1:\n        return int(temp)\n    count = 0\n    for i in range(length):\n        if temp[i] == temp[length - 1 - i]:\n            count += 1\n        else:\n            break\n    if count == length:\n        return -1\n    else:\n        return int(temp[0:count] + temp[count:length][::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        return num\n    if num < 10:\n        return num\n    num_digits = get_number_of_digits(num)\n    palin_digits = num_digits - 1\n    #print(num_digits)\n    #print(palin_digits)\n    last_digit = num % 10\n    #print(last_digit)\n    temp = last_digit\n    if last_digit % 2 == 1:\n        # Odd number, adjust by -1 if needed\n        if num % 2 == 0:\n            # Even number, if num % 10 == 5, then we need to subtract one\n            # as the number cannot have 2 and 1 as the same digit\n            if last_digit == 5:\n                return num - 1\n            last_digit -= 1\n            #print(num, last_digit)\n        #print(last_digit)\n        #print(temp)\n        #print(palin_digits)\n        if palin_digits == 1:\n            return num\n        return num * 10 + last_digit - 2 * palin_digits\n    elif last_digit == 0:\n        # Even number, if num % 10 == 0, then we need to subtract one\n        # as the number cannot have 2 and 1 as the same digit\n        if last_digit == 0:\n            if num % 2 == 1:\n                return num - 1\n            return num * 10 + last_digit - 2 * palin_digits\n        return num * 10 + last_digit - 2 * palin_digits\n    else:\n        # Odd number, adjust by -1 if needed\n        if num % 2 == 0:\n            if last_digit == 9:\n                return num - 1\n            last_digit -= 1\n            #print(num, last_digit)\n        #print(last_digit)\n        #print(temp)\n        #print(palin_digits)\n        if palin_digits == 1:\n            return num\n        return num * 10 + last_digit - 2 * palin_digits\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #set the initial palindrome\n    pal = num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if int(num) < 10:\n        return int(num) + 1\n    num = str(num)\n    if num == num[::-1]:\n        return int(num) + 1\n    for x in range(len(num)-1,0,-1):\n        if num[:x] == num[:x][::-1]:\n            return int(num[:x] + str(int(num[:x]) + 1)[::-1] + num[x:])\ndef last_digit(num1,num2):\n    '''\n    Write a function that returns the last digit of an integer (lastDigit).\n    '''\n    while num1 % num2!= 0:\n        num1,num2 = num2,num1 % num2\n    return num2\ndef is_reverse(num):\n    '''\n    Write a function that returns True if the given number is a reverse of another number, and False otherwise.\n    '''\n    return str(num) == str(num)[::-1]\ndef kaprekar_iter(num):\n    '''\n    Write a function that, given a positive integer, returns its digits in a reversed order.\n    '''\n    num = str(num)\n    if len(num) == 1:\n        return int(num)\n    return int(num[-1] + kaprekar_iter(int(num[:-1])))\ndef kaprekar_numbers(p, q):\n    '''\n    Write a function that returns all integers between the given two values in the range (a, b) that satisfy the Kaprekar Number property.\n    '''\n    kaprekar = lambda num: int(num[:-1])**2 - int(num[1:])**2 if len(num) > 1 else int(num)**2\n    return [kaprekar(str(num)) for num in range(p,q+1) if kaprekar(str(num)) >= p and kaprekar(str(num)) < q]\ndef generate_password(num):\n    '''\n    Write a function that, given a number n, returns a string with n characters such that each character in the string is a capital letter.\n    '''\n    return ''.join([chr(i) for i in range(65,65+num)])\ndef count_chars(string):\n    '''\n    Write a function that, given a string, returns a dictionary with the frequency of each character in the string.\n    '''\n    freq = {}\n    for char in string:\n        freq[char] = freq.get(char,0) + 1\n    return freq\ndef sum_of_chars(string):\n    '''\n    Write a function that, given a string, returns the sum of its characters.\n    '''\n    return sum([ord(char) for char in string])\ndef are_anagrams(word1,word2):\n    '''\n    Write a function that, given two strings, returns True if they are anagrams, and False otherwise.\n    '''\n    return sorted(list(word1.replace(' ','').lower())) == sorted(list(word2.replace(' ','').lower()))\ndef create_dict(words):\n    '''\n    Write a function that, given an array of strings, returns a dictionary where the key is the word and the value is the number of characters in the word.\n    '''\n    return {word:len(word) for word in words}\ndef text_justification(words, l):\n    '''\n    Write a function that, given a string of words and an integer, l, returns a string with each word in the string justified to the left of the previous word (i.e. in a line) and fills any remaining space on the right with spaces.\n    '''\n    line = ''\n    for word in words:\n        if len(line) + len(word) <= l:\n            line += word +''\n        else:\n            line = line.rstrip() +'' + word +''\n    return line.rstrip()\ndef next_bigger(n):\n    '''\n    Write a function that, given a positive integer, returns the next biggest integer in lexicographical order.\n    '''\n    if n < 10:\n        return n\n    num = n\n    digits = str(n)\n    i = len(digits) - 1\n    while i > 0 and num[i] <= num[i-1]:\n        i -= 1\n    if i == 0:\n        return -1\n    else:\n        j = i\n        while j < len(digits) and num[j] <= num[i-1]:\n            j += 1\n        num = num[:i-1] + num[j:]\n        return int(num[:i] + sorted(num[i-1:j]) + num[j:])\ndef find_divisors(num):\n    '''\n    Write a function that, given a positive integer, returns the number of divisors of the integer.\n    '''\n    def divisor(num, count):\n        if num == 0:\n            return count\n        else:\n            return divisor(num // 10, count+1)\n    return divisor(num,0)\ndef next_palindrome(num):\n    '''\n    Write a function that, given a positive integer, returns the smallest palindrome greater than the given integer.\n    '''\n    num = str(num)\n    while num!= num[::-1]:\n        num = str(int(num) + 1)\n    return int(num)\ndef convert_to_roman(num):\n    '''\n    Write a function that, given a number, returns a string representing its roman numeral version.\n    '''\n    roman = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_num = ''\n    for i in nums:\n        while num >= i:\n            roman_num += roman[i]\n            num -= i\n    return roman_num\ndef is_isomorphic(s, t):\n    '''\n    Write a function that, given two strings, returns True if they are isomorphic, and False otherwise.\n    '''\n    if len(s)!= len(t):\n        return False\n    return len(set(zip(s,t))) == len(set(s)) == len(set(t))\ndef is_isomorphic_1(s, t):\n    '''\n    Write a function that, given two strings, returns True if they are isomorphic, and False otherwise.\n    '''\n    if len(s)!= len(t):\n        return False\n    dict = {}\n    for i in range(len(s)):\n        if s[i] not in dict:\n            dict[s[i]] = t[i]\n        elif dict[s[i]]!= t[i]:\n            return False\n    return True\ndef count_bits(num):\n    '''\n    Write a function that, given a non-negative integer n, returns the number of bits necessary to represent n.\n    '''\n    count = 0\n    while num!= 0:\n        num = num & (num - 1)\n        count += 1\n    return count\ndef is_power_of_three(num):\n    '''\n    Write a function that, given a number, returns True if the number is a power of three and False otherwise.\n    '''\n    while num % 3 == 0:\n        num = num / 3\n    return num == 1\ndef is_power_of_four(num):\n    '''\n    Write a function that, given a number, returns True if the number is a power of four and False otherwise.\n    '''\n    return num in [1,4,16,64,256]\ndef is_power_of_three_or_four(num):\n    '''\n    Write a function that, given a number, returns True if the number is a power of three or four and False otherwise.\n    '''\n    return is_power_of_three(num) or is_power_of_four(num)\ndef is_prime(nu"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    num_rev_str = str(num)[::-1]\n    num_rev_int = int(num_rev_str)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert number to string\n    num_str = str(num)\n    \n    # find length of num_str\n    length = len(num_str)\n    \n    # initialize ans_str to the string of length - 1\n    ans_str = num_str[0:length - 1]\n    \n    # loop through each character in the string\n    for i in range(length - 1):\n        # check if i is the index of the middle character\n        if i == (length - i - 1) / 2:\n            # if it is, check whether ans_str is a palindrome\n            if ans_str[0:i] == ans_str[i + 1:]:\n                # if it is, then update ans_str\n                ans_str = ans_str[0:i] + str(int(ans_str[i]) + 1) + ans_str[i + 1:]\n                return int(ans_str)\n            else:\n                # if it isn't, then update ans_str to use the i'th character as the middle character\n                ans_str = ans_str[0:i] + str(int(ans_str[i]) + 1) + ans_str[i + 1:]\n        else:\n            # if i is not the index of the middle character, then just increment the character by one\n            ans_str = ans_str[0:i] + str(int(ans_str[i]) + 1) + ans_str[i + 1:]\n            return int(ans_str)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the number into a string\n    num_str = str(num)\n    # find the length of the number\n    num_len = len(num_str)\n    # if the length is odd, we have to add 1\n    if num_len%2==1:\n        # the next palindrome is just the input number + 1\n        return int(num_str + str(int(num_str[0])+1))\n    # if the length is even, we have to add 1 to the input number and then add 2 to the output\n    else:\n        return int(num_str + str(int(num_str[0])+1) + str(int(num_str[0])+2))\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[len(arr)-k]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(arr, left, right):\n        pivot = arr[right]\n        i = left\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return sorted(arr)[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return\n    kth_element_helper(arr, 0, len(arr)-1, k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left, right = 0, len(arr)-1\n    while left < right:\n        pivot = partition(arr, left, right)\n        if pivot == k-1:\n            return arr[pivot]\n        elif pivot < k-1:\n            left = pivot + 1\n        else:\n            right = pivot - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    import heapq\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return kth_element_helper(arr, 0, len(arr) - 1, k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # if k > len(arr) or k < 1:\n    #     return None\n    # return arr[k-1]\n    return quick_select(arr, 0, len(arr) - 1, k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    def partition(arr, start, end):\n        i = start - 1\n        pivot = arr[end]\n        for j in range(start, end):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i+1], arr[end] = arr[end], arr[i+1]\n        return i+1\n    \n    def sort(arr, start, end):\n        if end-start > 1:\n            pivot = partition(arr, start, end)\n            sort(arr, start, pivot-1)\n            sort(arr, pivot+1, end)\n            \n    sort(arr, 0, len(arr)-1)\n    return arr[k-1]\n    \nif __name__ == '__main__':\n    arr = [1,4,5,8,2,5,7,9,12,6]\n    k = 4\n    print(kth_element(arr, k)"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    return sorted(arr)[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not isinstance(word, str):\n        raise TypeError('Not a string')\n    string_split = word.split('_')\n    return string_split[0] + ''.join(map(str.capitalize, string_split[1:]))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() or '_' for w in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # code goes here\n    l = word.split(\"_\")\n    if len(l)==1:\n        return l[0]\n    else:\n        return ''.join([i.capitalize() for i in l])\n    \nif __name__ == '__main__':\n    s = input()\n    result = snake_to_camel(s)\n    print(result)"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_arr = word.split('_')\n    if word_arr[0].isalpha():\n        new_word = word_arr[0]\n    else:\n        new_word = \"\"\n    for i in range(1, len(word_arr)):\n        new_word += word_arr[i].title()\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split the word and its components\n    split_word = word.split(\"_\")\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #\n    # Write your code here.\n    #\n    \n    return\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == \"\":\n        return \"\"\n    result = \"\"\n    if word[0].islower():\n        result = word[0].upper()\n    else:\n        result = word[0]\n    for i in range(1, len(word)):\n        if word[i].isupper():\n            result += \"_\"\n        result += word[i]\n    return result\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_letter = word[0]\n    words = word.split('_')\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].title()\n    return camel_case_word\n    \nprint(snake_to_camel('Test_snake_to_camel'))\nprint(snake_to_camel('test_snake_to_camel'))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    l = word.split('_')\n    return l[0] + ''.join(i.capitalize() for i in l[1:])\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return 2 * n + m\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n - 1) * (m - 1) + (n - 1) + (m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return 2\n    else:\n        return 1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum = sum + m\n    return sum\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return 1 if m == 1 else 0 if n == 0 else eulerian_num(n-1, m) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return m * (n - 1) + (n - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = n\n    # Your code here\n    for i in range(n):\n        a*=(m-1)\n    return a\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = 0\n    for i in range(n+1):\n        for j in range(m+1):\n            if i + j == n + 1:\n                res += 1\n    return res\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m < n - 1:\n        m = n - 1\n    if n == 0 and m == 0:\n        return 0\n    if n == 0 and m!= 0:\n        return -1\n    elif n!= 0 and m == 0:\n        return 1\n    else:\n        if n == 1:\n            if m % 2 == 0:\n                return 1\n            else:\n                return -1\n        elif m == 1:\n            return 2\n        elif m % 2 == 0:\n            return eulerian_num(n-1, m-1) + eulerian_num(n, m-1)\n        else:\n            return eulerian_num(n-1, m-1) + eulerian_num(n, m-1) + eulerian_num(n-1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return m*(eulerian_num(n-1, m)) + eulerian_num(n-1, m)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for list in input_list:\n        list.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):\n    '''\n    Write a function to sort a sublist of strings.\n    '''\n    return sorted(input_list)\n    \ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):\n    '''\n    Write a function to sort a sublist of strings.\n    '''\n    return sorted(input_list)\n    \ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):\n    '''\n    Write a function to sort a sublist of strings.\n    '''\n    return sorted(input_list)\n    \ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):\n    '''\n    Write a function to sort a sublist of strings.\n    '''\n    return sorted(input_list)\n    \ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):\n    '''\n    Write a function to sort a sublist of strings.\n    '''\n    return sorted(input_list)\n    \ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):\n    '''\n    Write a function to sort a sublist of strings.\n    '''\n    return sorted(input_list)\n    \ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):\n    '''\n    Write a function to sort a sublist of strings.\n    '''\n    return sorted(input_list)\n    \ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):\n    '''\n    Write a function to sort a sublist of strings.\n    '''\n    return sorted(input_list)\n    \ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):\n    '''\n    Write a function to sort a sublist of strings.\n    '''\n    return sorted(input_list)\n    \ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):\n    '''\n    Write a function to sort a sublist of strings.\n    '''\n    return sorted(input_list)\n    \ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):\n    '''\n    Write a function to sort a sublist of strings.\n    '''\n    return sorted(input_list)\n    \ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):\n    '''\n    Write a function to sort a sublist of strings.\n    '''\n    return sorted(input_list)\n    \ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):\n    '''\n    Write a function to sort a sublist of strings.\n    '''\n    return sorted(input_list)\n    \ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):\n    '''\n    Write a function to sort a sublist of strings.\n    '''\n    return sorted(input_list)\n    \ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):\n    '''\n    Write a function to sort a sublist of strings.\n    '''\n    return sorted(input_list)\n    \ndef sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sublist = sort_sublist(sublist)\n        new_list.append(sublist)\n    return new_list\n    \ndef sort_sublist(input_list):"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # step 1: iterate through the list of lists and determine how many sublists\n    # are contained in each list. For each list, the number of sublists can be\n    # determined by dividing the length of the list by the number of items in the\n    # sublist.\n    \n    for sublist in input_list:\n        \n        # step 2: create a nested loop to iterate through each item in the list\n        # and place each item in its corresponding sublist.\n        \n        for index in range(len(sublist)):\n            \n            # step 3: iterate through the sublists and sort each one.\n            \n            for i in range(len(sublist)):\n                \n                # step 4: define the sublist to sort.\n                \n                sublist_to_sort = sublist[index]\n                \n                # step 5: define the variable to hold the original index value.\n                \n                orig_index = sublist.index(sublist_to_sort)\n                \n                # step 6: use bubble sort to sort the sublist\n                \n                bubble_sort(sublist_to_sort)\n                \n                # step 7: reassign the sublist with the sorted version\n                \n                sublist[orig_index] = sublist_to_sort\n            \n            # step 8: once the sublist is sorted, reassign the sublist in the\n            # original list with the sorted version.\n                \n            sublist[index] = sublist_to_sort\n    \n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for sublist in input_list:\n        sublist.sort()\n        output_list.append(sublist)\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #input_list = [['moo','meow','cow'],['ma','o','me'],['moo','moo','moo']]\n    sorted_list = []\n    for l in input_list:\n        sorted_list.append(sorted(l))\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # find length of sublists\n    sublist_len = [len(sublist) for sublist in input_list]\n    # find minimum length\n    min_len = min(sublist_len)\n    # create empty sublists for each of the sublists in input_list\n    output_list = [[] for i in sublist_len]\n    # iterate through each sublist\n    for sublist in input_list:\n        # iterate through each index in each sublist\n        for i in range(len(sublist)):\n            # add the indexed item to the empty sublist\n            output_list[i].append(sublist[i])\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Your code here\n    for i in input_list:\n        i.sort()\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for element in lst:\n        if element:\n            count=count+1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    ctr = 0\n    for i in lst:\n        if i == True:\n            ctr = ctr + 1\n    return ctr\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if type(x) == bool:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for ele in lst:\n        if ele:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([i for i in lst if i == True])\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c = 0\n    for x in lst:\n        if x == True:\n            c += 1\n    return c\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return None\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    tup_list = []\n    for i in test_tup:\n        tup_list.append(i)\n    tup_list.append(test_list)\n    return tup_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result = []\n    for t in test_tup:\n        result.append(tuple(test_list + list(t)))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list + test_tup)\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = list(test_list)\n    new_tup = tuple(test_tup)\n    new_list.append(new_tup)\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    list_app = []\n    list_app.append(test_list)\n    list_app.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for tup in test_tup:\n        test_list.append(tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + list(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(\"Given list: \", test_list)\n    print(\"Given tuple: \", test_tup)\n    print(\"Returned tuple: \", test_tup+tuple(test_list))\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #first solution\n    new_list=[]\n    new_list.extend(num1)\n    new_list.extend(num2)\n    new_list.extend(num3)\n    new_list.sort()\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    len1 = len(num1)\n    len2 = len(num2)\n    len3 = len(num3)\n    merged = [0]*(len1 + len2 + len3)\n    i = j = k = 0\n    while i < len1 and j < len2 and k < len3:\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged[i+j+k] = num1[i]\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged[i+j+k] = num2[j]\n            j += 1\n        else:\n            merged[i+j+k] = num3[k]\n            k += 1\n    while i < len1:\n        merged[i+j+k] = num1[i]\n        i += 1\n    while j < len2:\n        merged[i+j+k] = num2[j]\n        j += 1\n    while k < len3:\n        merged[i+j+k] = num3[k]\n        k += 1\n    return merged\ndef count_freq_of_char(s):\n    '''\n    Write a function to count the frequency of each character in a string.\n    '''\n    freq = {}\n    for char in s:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    return freq\ndef rotate_array(arr,k):\n    '''\n    Write a function to rotate an array.\n    '''\n    n = len(arr)\n    rotated = [0]*n\n    for i in range(n):\n        rotated[(i + k)%n] = arr[i]\n    return rotated\ndef find_longest_substring(s):\n    '''\n    Write a function to find the longest substring of unique letters in a string.\n    '''\n    window_start, max_length = 0, 0\n    char_frequency = {}\n    for window_end in range(len(s)):\n        right_char = s[window_end]\n        if right_char not in char_frequency:\n            char_frequency[right_char] = 0\n        char_frequency[right_char] += 1\n        if char_frequency[right_char] == 1:\n            max_length = max(max_length, window_end - window_start + 1)\n        while right_char in char_frequency and char_frequency[right_char] > 1:\n            left_char = s[window_start]\n            char_frequency[left_char] -= 1\n            if char_frequency[left_char] == 0:\n                del char_frequency[left_char]\n            window_start += 1\n    return max_length\ndef find_longest_substring_set(s):\n    '''\n    Write a function to find the longest substring of unique letters in a string.\n    '''\n    window_start, max_length = 0, 0\n    char_frequency = {}\n    for window_end in range(len(s)):\n        right_char = s[window_end]\n        if right_char not in char_frequency:\n            char_frequency[right_char] = 0\n        char_frequency[right_char] += 1\n        if char_frequency[right_char] == 1:\n            max_length = max(max_length, window_end - window_start + 1)\n        if right_char in char_frequency and char_frequency[right_char] > 1:\n            left_char = s[window_start]\n            char_frequency[left_char] -= 1\n            window_start += 1\n    return max_length\ndef find_longest_substring_k_dist(s,k):\n    '''\n    Write a function to find the longest substring of k-distinct characters in a string.\n    '''\n    window_start, max_length = 0, 0\n    char_frequency = {}\n    for window_end in range(len(s)):\n        right_char = s[window_end]\n        if right_char not in char_frequency:\n            char_frequency[right_char] = 0\n        char_frequency[right_char] += 1\n        if char_frequency[right_char] == 1:\n            max_length = max(max_length, window_end - window_start + 1)\n        if right_char in char_frequency and char_frequency[right_char] > 1:\n            left_char = s[window_start]\n            char_frequency[left_char] -= 1\n            if char_frequency[left_char] == 0:\n                del char_frequency[left_char]\n            window_start += 1\n    return max_length\ndef minimum_swaps_to_make_array_sorted(arr):\n    '''\n    Write a function to find the minimum number of swaps to make an array sorted.\n    '''\n    swaps = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            swaps += 1\n    return swaps\ndef minimum_swaps_to_make_array_sorted_alternate(arr):\n    '''\n    Write a function to find the minimum number of swaps to make an array sorted.\n    '''\n    min_heap = []\n    for i in range(len(arr)):\n        heapq.heappush(min_heap, arr[i])\n    swaps = 0\n    for i in range(len(arr)):\n        if arr[i]!= min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, arr[i])\n            swaps += 1\n    return swaps\ndef count_uniq_char_in_string(s):\n    '''\n    Write a function to count the unique letters in a string.\n    '''\n    char_frequency = {}\n    for char in s:\n        if char not in char_frequency:\n            char_frequency[char] = 0\n        char_frequency[char] += 1\n    return len(char_frequency)\ndef shortest_way_to_form_string(s):\n    '''\n    Write a function to find the shortest way to form a string from another string.\n    '''\n    n = len(s)\n    dp = [0]*(n + 1)\n    dp[0] = 1\n    for i in range(n):\n        dp[i+1] += dp[i]\n        if s[i] == 'a':\n            dp[i+1] -= 1\n        elif s[i] == 'b':\n            dp[i+1] += 1\n    return dp[n]\ndef find_the_difference(s,t):\n    '''\n    Write a function to find the first different character between two strings.\n    '''\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            return t[i]\n    return t[-1]\ndef find_sum_of_digits(n):\n    '''\n    Write a function to find the sum of digits of a number.\n    '''\n    while n!= 0:\n        d = n%10\n        n = n//10\n        sum_of_digits = sum_of_digits + d\n    return sum_of_digits\ndef is_subset(n,s):\n    '''\n    Write a function to check whether one string is a subset of another string.\n    '''\n    for char in s:\n        if char not in s:\n            return False\n    return True\ndef find_max_sum_subset(arr,k):\n    '''\n    Write a function to find the maximum sum of a contiguous subarray of size k.\n    '''\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            window_sum = sum(arr[i:j+1])\n            if window_sum == k:\n                return max(arr[i:j+1])\n            elif window"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Approach: Use heapq.merge\n    # return list(heapq.merge(num1,num2,num3))\n    # Approach 2: Use list comprehension + min/max \n    # return sorted([max(num1),max(num2),max(num3)])\n    # Approach 3: Use list comprehension + min/max + index\n    # return sorted([num1[i] for i in range(len(num1))],[num2[i] for i in range(len(num2))],[num3[i] for i in range(len(num3))], key=min)\n    # Approach 4: Use list comprehension + min/max + index + lambda expression\n    return sorted([num1[i] for i in range(len(num1))],[num2[i] for i in range(len(num2))],[num3[i] for i in range(len(num3))], key=lambda x: x[0])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    heapq.heapify(num1)\n    return num1\nprint(merge_sorted_list([1,3,5,7],[2,4,6,8,9,10,11],[1,2,3,4,5,6,7]))\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # initialize an empty list\n    res = []\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    len1 = len(num1)\n    len2 = len(num2)\n    len3 = len(num3)\n    i = j = k = 0\n    new_list = []\n    while i < len1 and j < len2 and k < len3:\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            new_list.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            new_list.append(num2[j])\n            j += 1\n        else:\n            new_list.append(num3[k])\n            k += 1\n    while i < len1:\n        new_list.append(num1[i])\n        i += 1\n    while j < len2:\n        new_list.append(num2[j])\n        j += 1\n    while k < len3:\n        new_list.append(num3[k])\n        k += 1\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_nums = []\n    for i in range(len(num1)):\n        sorted_nums.append(num1[i])\n    for i in range(len(num2)):\n        sorted_nums.append(num2[i])\n    for i in range(len(num3)):\n        sorted_nums.append(num3[i])\n    return sorted_nums\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #I decided to write this in terms of heap,\n    #but in hindsight I could have done it the normal way,\n    #by creating a new list and making the heap as it goes.\n    #The heap is a min heap, and so it's an easy way to\n    #merge all the lists in ascending order.\n    num_heap = []\n    #Each number is pushed into the heap\n    for num in [num1,num2,num3]:\n        heapq.heappush(num_heap, num)\n    #Now the heap has all the numbers\n    #We iterate through the heap, popping them off\n    #and appending them to a new list\n    new_list = []\n    while num_heap:\n        new_list.append(heapq.heappop(num_heap))\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #return sorted(set().union(num1, num2, num3))\n    #new_list = []\n    #for num in num1:\n    #    new_list.append(num)\n    #for num in num2:\n    #    new_list.append(num)\n    #for num in num3:\n    #    new_list.append(num)\n    #return new_list\n    return sorted(set().union(num1, num2, num3))\n    #return sorted(set(num1+num2+num3))\n    #return sorted(set(num1+num2+num3))\ndef max_number_of_prizes(nums):\n    '''\n    You have a number of envelopes with widths and heights given as a pair of integers (w, h). One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while(i < len(num1) and j < len(num2) and k < len(num3)):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            result.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            result.append(num2[j])\n            j += 1\n        else:\n            result.append(num3[k])\n            k += 1\n    \n    while(i < len(num1)):\n        result.append(num1[i])\n        i += 1\n    while(j < len(num2)):\n        result.append(num2[j])\n        j += 1\n    while(k < len(num3)):\n        result.append(num3[k])\n        k += 1\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    '''\n    Input : Binary string's', Integer n\n    Output: Integer\n    '''\n    #Initializing dictionary\n    rotated = dict()\n    #Looping through the number of times\n    for _ in range(n):\n        #Empty list\n        lis = []\n        #Looping through the length of binary string\n        for i in range(len(s)):\n            #Appending the corresponding number to the list\n            lis.append(int(s[i]))\n        #Removing the last value from the list\n        lis.pop()\n        #Looping through the length of the list\n        for i in range(len(lis)):\n            #Appending the corresponding value to the dictionary\n            rotated[i] = lis[i]\n    #Initializing the variable as 0\n    count = 0\n    #Looping through the dictionary\n    for k,v in rotated.items():\n        #If the value is 1\n        if v == 1:\n            #Incrementing the count\n            count += 1\n    #Returning the count\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Base cases \n    if (n == 0): \n        return s \n    if (len(s) == 0): \n        return s \n    # if the given binary string has an odd length, then we can't \n    # have an equivalent string rotated by a multiple of 2, \n    # because all the bits in the string must be either 0 or 1.\n    if (len(s) % 2!= 0): \n        return '' \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return s.count('1') - s.count('0')\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return sum([1 if (int(s[i])+int(s[i+1]))%2==1 else 0 for i in range(len(s)-1)])\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    rotations = []\n    for i in range(len(s)):\n        if s[i] == '0':\n            temp = list(s)\n            temp[i] = '1'\n            temp[i+n] = '0'\n            rotations.append(''.join(temp))\n        elif s[i] == '1':\n            temp = list(s)\n            temp[i] = '0'\n            temp[i+n] = '1'\n            rotations.append(''.join(temp))\n        if i+n >= len(s):\n            break\n    return rotations\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = '0' + s + '0'\n    print(s)\n    # iterate over rotated string\n    for i in range(0,n):\n        # count the odd numbers \n        count = 0\n        for j in range(0,len(s)):\n            if s[j] == '0':\n                count += 1\n        # print(count)\n        # print(s)\n        # reset string\n        s = s[1:]+s[0]\n        # print(s)\n        # print(\"-------\")\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2!= 0):\n            odd_count += 1\n    return odd_count\n    \ndef FindEvenNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    even_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2 == 0):\n            even_count += 1\n    return even_count\n    \ndef FindOddNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2!= 0):\n            odd_count += 1\n    return odd_count\n    \ndef FindEvenNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    even_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2 == 0):\n            even_count += 1\n    return even_count\n    \ndef FindOddNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2!= 0):\n            odd_count += 1\n    return odd_count\n    \ndef FindEvenNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    even_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2 == 0):\n            even_count += 1\n    return even_count\n    \ndef FindOddNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2!= 0):\n            odd_count += 1\n    return odd_count\n    \ndef FindEvenNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    even_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2 == 0):\n            even_count += 1\n    return even_count\n    \ndef FindOddNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2!= 0):\n            odd_count += 1\n    return odd_count\n    \ndef FindEvenNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    even_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2 == 0):\n            even_count += 1\n    return even_count\n    \ndef FindOddNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2!= 0):\n            odd_count += 1\n    return odd_count\n    \ndef FindEvenNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    even_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2 == 0):\n            even_count += 1\n    return even_count\n    \ndef FindOddNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2!= 0):\n            odd_count += 1\n    return odd_count\n    \ndef FindEvenNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    even_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2 == 0):\n            even_count += 1\n    return even_count\n    \ndef FindOddNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2!= 0):\n            odd_count += 1\n    return odd_count\n    \ndef FindEvenNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    even_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2 == 0):\n            even_count += 1\n    return even_count\n    \ndef FindOddNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1\n        if(s1.count('1') % 2!= 0):\n            odd_count += 1\n    return odd_count\n    \ndef FindEvenNumber(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    even_count = 0\n    for i in range(n):\n        s1 = s[-1] + s[:-1]\n        s = s1"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=s[::-1]\n    l=[]\n    for i in range(0,n):\n        k=0\n        for j in range(0,len(s)):\n            if s[j]=='1':\n                k=k+2**j\n        l.append(k)\n        s=bin(k)[2:].zfill(len(s))\n    return l\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # code here\n    s = s.replace(\"0\",\"\")\n    s = s.replace(\"1\",\"\")\n    if n == 0:\n        return len(s)\n    if len(s) == 1:\n        if s[0] == \"1\":\n            return 1\n        else:\n            return 0\n    if n%2!= 0:\n        return odd_Equivalent(s,n-1) + 1\n    else:\n        return odd_Equivalent(s,n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def createDict(s):\n        dict = {}\n        for i in s:\n            if i in dict:\n                dict[i] += 1\n            else:\n                dict[i] = 1\n        return dict\n    s = str(s)\n    dict = createDict(s)\n    count = 0\n    for i in dict:\n        if dict[i] % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = []\n    def common_in_nested_list(nested_list, prev = None):\n        if not nested_list:\n            return\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l=[]\n    for i in nestedlist:\n        for j in i:\n            l.append(j)\n    l=set(l)\n    print(l)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def flatten(l):\n        for el in l:\n            if isinstance(el, collections.Iterable) and not isinstance(el, (str, bytes)):\n                yield from flatten(el)\n            else:\n                yield el\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for l in nestedlist:\n        if isinstance(l, list):\n            for e in l:\n                if e not in result:\n                    result.append(e)\n        else:\n            if l not in result:\n                result.append(l)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common(list1, list2):\n        res = list(set(list1) & set(list2))\n        return res\n    \n    nested_list = nestedlist\n    \n    if nested_list == [[]]:\n        return []\n    \n    res = []\n    \n    for index, list in enumerate(nested_list):\n        if index == 0:\n            res = common(list, nested_list[index+1])\n        elif index == len(nested_list)-1:\n            res = common(res, list)\n        else:\n            res = common(res, nested_list[index+1])\n    \n    return res\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    print(\"Input\")\n    print(nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    lst = []\n    for i in nestedlist:\n        lst.extend(i)\n    count = 0\n    for i in lst:\n        if lst.count(i) > 1:\n            count += 1\n            print(i, count)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for x in range(len(nestedlist)):\n        for y in range(len(nestedlist[x])):\n            pass\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    if nestedlist == []:\n        return common_list\n    else:\n        for x in nestedlist:\n            if x not in common_list:\n                common_list.append(x)\n        return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in nestedlist:\n        if i not in result:\n            for j in nestedlist:\n                if j == i:\n                    result.append(i)\n                    \n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return bool(re.match(r'^[-+]{0,1}\\d+$', text))\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)==0:\n        return True\n    else:\n        for dict in list1:\n            if bool(dict)==True:\n                return False\n    return True\ndef empty_list(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    if len(list1)==0:\n        return True\n    else:\n        for list1 in list1:\n            if bool(list1)==True:\n                return False\n    return True\ndef all_list_empty(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return False\n    return True\ndef all_empty_list(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==False:\n            return False\n    return True\ndef all_dict_empty(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==False:\n            return False\n    return True\ndef any_list_empty(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef any_dict_empty(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef any_list_empty_dict(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==False:\n            return True\n    return False\ndef any_dict_empty_list(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef all_list_length_empty(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==False:\n            return False\n    return True\ndef all_dict_length_empty(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==False:\n            return False\n    return True\ndef all_empty_dict_length(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return False\n    return True\ndef any_list_length_empty(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef any_dict_length_empty(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef any_list_length_empty_dict(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==False:\n            return True\n    return False\ndef any_dict_length_empty_list(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef all_list_length(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef all_dict_length(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef all_empty_dict_length(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==False:\n            return False\n    return True\ndef any_list_length(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef any_dict_length(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef any_list_length_dict(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef any_dict_length_list(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef all_length_list(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef all_length_dict(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef all_empty_length_dict(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==False:\n            return False\n    return True\ndef any_length_list(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef any_length_dict(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==True:\n            return True\n    return False\ndef any_empty_length_dict(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==False:\n            return True\n    return False\ndef all_length_list_empty(list1):\n    '''\n    Write a function to check whether all lists in a list are empty or not.\n    '''\n    for list1 in list1:\n        if bool(list1)==False:\n            return False\n    return True\ndef all_length_dict_empty(list1):\n    '''\n    Write a function to check whether all lists in a list are empt"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    #Your code here\n    \n    #Iterate through list1 and check if any dictionaries are empty\n    #If empty, return False. Else return True.\n    \n    #list1 = [{},{},{}]\n    \n    #for i in range(len(list1)):\n        #if bool(list1[i]):\n            #return False\n    \n    #return True\n    \n    \n    return not any(bool(dict) for dict in list1)\n    \n    \n    \ndef sort_list(list1):\n    '''\n    Write a function to sort a list of lists by the second item in each sublist\n    '''\n    #Your code here\n    \n    #1. Create a list with a list of lists in it.\n    #2. iterate through the list.\n    #3. Find the item in the list that has second position in the list\n    #4. create a new list with only the items that have a second position\n    #5. sort the new list\n    \n    list2 = [[1,2], [3,4], [5,6]]\n    new_list = []\n    \n    #Create new list with only the items that have a second position\n    for i in range(len(list1)):\n        if len(list1[i]) == 2:\n            new_list.append(list1[i])\n    \n    #Sort the new list\n    new_list.sort(key=lambda x: x[1])\n    \n    return new_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list1=list(list1)\n    for i in range(0,len(list1)):\n        if list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 == []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 == []:\n        return True\n    elif any(list1[0]) == True:\n        return False\n    else:\n        return empty_dit(list1[1:])\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if dict1:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    result = False\n    if len(list1)!= 0:\n        for i in list1:\n            if bool(i) == False:\n                result = False\n            else:\n                result = True\n                break\n    return result\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(d=={} for d in list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n        \n    \ndef remove_first_last_char(s):\n    '''\n    Write a function that takes a string and remove its first and last characters\n    '''\n    s1 = s[1:-1]\n    return s1\n    \n    \ndef odd_even(n):\n    '''\n    Write a function to return 'odd' if the number is odd or 'even' if the number is even\n    '''\n    if n % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n        \n    \ndef greater_less(a, b):\n    '''\n    Write a function to return true if the first element is greater than the second element of a list and false if the first element is less than the second element of a list.\n    '''\n    if a > b:\n        return True\n    else:\n        return False\n        \n    \ndef is_even(number):\n    '''\n    Write a function that return true if the number is even and false if the number is odd\n    '''\n    if number % 2 == 0:\n        return True\n    else:\n        return False\n        \n    \ndef sum_of_list(numbers):\n    '''\n    Write a function to return the sum of all elements in a list\n    '''\n    return sum(numbers)\n        \n    \ndef max_in_list(numbers):\n    '''\n    Write a function to return the largest number in a list\n    '''\n    return max(numbers)\n        \n    \ndef negative_numbers(numbers):\n    '''\n    Write a function to return all negative numbers in a list\n    '''\n    list1 = []\n    for i in numbers:\n        if i < 0:\n            list1.append(i)\n    return list1\n        \n    \ndef positive_numbers(numbers):\n    '''\n    Write a function to return all positive numbers in a list\n    '''\n    list1 = []\n    for i in numbers:\n        if i >= 0:\n            list1.append(i)\n    return list1\n        \n    \ndef unique_in_list(list1):\n    '''\n    Write a function to return a list which contains only the unique values in a given list.\n    '''\n    set1 = set(list1)\n    list1 = list(set1)\n    return list1\n        \n    \ndef sum_of_list(numbers):\n    '''\n    Write a function to return the sum of all elements in a list\n    '''\n    return sum(numbers)\n    \n    \ndef print_even(numbers):\n    '''\n    Write a function to print all even numbers in a list\n    '''\n    for i in numbers:\n        if i % 2 == 0:\n            print(i)\n            \ndef print_odd(numbers):\n    '''\n    Write a function to print all odd numbers in a list\n    '''\n    for i in numbers:\n        if i % 2 == 1:\n            print(i)\n            \ndef print_negative(numbers):\n    '''\n    Write a function to print all negative numbers in a list\n    '''\n    for i in numbers:\n        if i < 0:\n            print(i)\n            \ndef print_positive(numbers):\n    '''\n    Write a function to print all positive numbers in a list\n    '''\n    for i in numbers:\n        if i > 0:\n            print(i)\n            \ndef print_unique(numbers):\n    '''\n    Write a function to print all unique numbers in a list\n    '''\n    list1 = unique_in_list(numbers)\n    for i in list1:\n        print(i)\n        \ndef sum_of_list(numbers):\n    '''\n    Write a function to return the sum of all elements in a list\n    '''\n    return sum(numbers)\n    \ndef list_of_even_length(names):\n    '''\n    Write a function that returns a list of all names with even number of characters\n    '''\n    list1 = []\n    for i in names:\n        if len(i) % 2 == 0:\n            list1.append(i)\n    return list1\n    \ndef square_number(numbers):\n    '''\n    Write a function to return a list of all numbers which are the squares of the integers in a given list\n    '''\n    list1 = []\n    for i in numbers:\n        if i**2 in numbers:\n            list1.append(i**2)\n    return list1\n    \n    \ndef check_sorted(numbers):\n    '''\n    Write a function that returns a list of all elements that are sorted in ascending order if they are in increasing order, otherwise returns a list with the values that are out of order\n    '''\n    list1 = []\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if numbers[i] < numbers[j]:\n                list1.append(numbers[i])\n                list1.append(numbers[j])\n                break\n    return list1\n    \ndef common_member(list1, list2):\n    '''\n    Write a function that returns a list of all common elements in two lists\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    list3 = list(set1 & set2)\n    return list3\n    \n    \ndef rotate_list(list1, n):\n    '''\n    Write a function that rotates a given list by n places.\n    '''\n    list1 = list1[n:] + list1[:n]\n    return list1\n    \ndef get_odd_even(list1):\n    '''\n    Write a function to return a list of all even numbers in a given list and a list of all odd numbers in a given list\n    '''\n    list1 = []\n    list2 = []\n    for i in list1:\n        if i % 2 == 0:\n            list1.append(i)\n        else:\n            list2.append(i)\n    return [list1, list2]\n            \n        \ndef remove_duplicate(list1):\n    '''\n    Write a function to remove all duplicate items in a given list\n    '''\n    list1 = list1[::2]\n    return list1\n        \n        \ndef remove_duplicate_sorted(list1):\n    '''\n    Write a function to remove all duplicate items in a given list\n    '''\n    list1.sort()\n    list1 = list1[::2]\n    return list1\n        \n        \ndef remove_value(list1, value):\n    '''\n    Write a function to remove all the values in a list that is equal to the specified value\n    '''\n    list1 = [x for x in list1 if x!= value]\n    return list1\n        \n        \ndef remove_value_from_list(list1, value):\n    '''\n    Write a function to remove all the values in a list that is equal to the specified value\n    '''\n    while value in list1:\n        list1.remove(value)\n    return list1\n        \n        \ndef list_of_dictionaries(names, addresses):\n    '''\n    Write a function that returns a list of dictionaries, with each dictionary containing the name and address of a person\n    '''\n    list1 = []\n    for i in range(len(names)):\n        dic1 = {}\n        dic1['name'] = names[i]\n        dic1['address'] = addresses[i]\n        list1.append(dic1)\n    return list1\n        \n        \ndef unique_values(list1):\n    '''\n    Write a function to return a list of unique values in a given list\n    '''\n    list1 = []\n    for i in list1:\n        if i not in list1:\n            list1.append(i)\n    return list1\n        \n        \ndef unique_in_order(list1):\n    '''\n    Write a function to return a list of unique values in a given list in the order they first appeared\n    '''\n    list1 = []\n    list1.append(list1[0])\n    for i in range(1, len(list1)):\n        if list1[i"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_flag = True\n    for i in list1:\n        if bool(i):\n            empty_flag = False\n            break\n    return empty_flag\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = ''\n    for n in nums:\n        res += str(n)\n    return int(res)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(n) for n in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in nums:\n        result *= 10\n        result += i\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # return int(''.join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = str(nums)\n    print(nums)\n    lst = []\n    for i in nums:\n        lst.append(i)\n    return int(''.join(lst))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(str(x) for x in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    def to_int(num):\n        num_str = str(num)\n        if num_str.startswith('(') and num_str.endswith(')'):\n            return int(num_str[1:-1])\n        else:\n            return int(num_str)\n    return reduce(lambda x, y: x * 10 + y, map(to_int, nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    nums[0] = int(nums[0])\n    nums[-1] = int(nums[-1])\n    while(len(nums) > 1):\n        nums[0] = nums[0] + nums[1]*10**(len(nums) - 2)\n        nums = nums[2:]\n    nums = int(''.join(str(x) for x in nums))\n    return nums\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    return [float(x) for x in test_list]\n    \ndef flat_list(nested_list):\n    '''\n    Write a function to flatten a list of lists.\n    '''\n    \n    return [i for x in nested_list for i in x]\n    \ndef string_to_float(test_string):\n    '''\n    Write a function to convert all possible convertible elements in a list of strings to floats.\n    '''\n    \n    return [float(x) for x in test_string]\n    \ndef string_to_int(test_string):\n    '''\n    Write a function to convert all possible convertible elements in a list of strings to integers.\n    '''\n    \n    return [int(x) for x in test_string]\n    \ndef list_of_strings_to_int_list(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of strings to integers.\n    '''\n    \n    return [int(x) for x in test_list]\n    \ndef list_of_strings_to_float_list(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of strings to floats.\n    '''\n    \n    return [float(x) for x in test_list]\n    \ndef test():\n    '''\n    Test functions above.\n    '''\n    \n    print('list_to_float')\n    l = [1, 2, 3]\n    print(l, list_to_float(l))\n    l = [[1, 2, 3], [1.5, 2.5, 3.5]]\n    print(l, list_to_float(l))\n    \n    print('\\nflat_list')\n    l = [[1, 2, 3], [1.5, 2.5, 3.5], [1, 2]]\n    print(l, flat_list(l))\n    \n    print('\\nstring_to_float')\n    l = ['1.5', '2.5', '3.5', '-1', '0']\n    print(l, string_to_float(l))\n    \n    print('\\nstring_to_int')\n    l = ['1.5', '2.5', '3.5', '-1', '0']\n    print(l, string_to_int(l))\n    \n    print('\\nlist_of_strings_to_int_list')\n    l = ['1.5', '2.5', '3.5', '-1', '0', '4', '6', '8', '9']\n    print(l, list_of_strings_to_int_list(l))\n    \n    print('\\nlist_of_strings_to_float_list')\n    l = ['1.5', '2.5', '3.5', '-1', '0', '4', '6', '8', '9']\n    print(l, list_of_strings_to_float_list(l))\n    \nif __name__ == '__main__':\n    test()"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for x in test_list:\n        for y in x:\n            if y == None:\n                pass\n            elif isinstance(y,str):\n                pass\n            else:\n                try:\n                    y=float(y)\n                except ValueError:\n                    continue\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        test_list = [float(x) for x in test_list]\n        return test_list\n    except ValueError:\n        return None\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    floated_list = []\n    for i in test_list:\n        if isinstance(i, list):\n            i = list_to_float(i)\n        else:\n            i = float(i)\n        floated_list.append(i)\n    return floated_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return float(test_list)\n    except ValueError:\n        return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n    #return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # return [float(i) for i in test_list]\n    return [float(i) for i in test_list if isinstance(i,str)]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_float = []\n    for i in test_list:\n        try:\n            test_float.append(float(i))\n        except ValueError:\n            pass\n    return test_float\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(x) for x in test_list]\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    new_list = []\n    for i in range(0,len(string)):\n        if string[i] == \" \":\n            new_list.append(string[0:i])\n            string = string[i+1:]\n    new_list.append(string)\n    return new_list\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [x for x in string.split()]\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [x for x in string.split()]\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr==None or len(arr)<2:\n        return None\n    \n    #bruteforce\n    # for i in range(len(arr)):\n    #     for j in range(i+1,len(arr)):\n    #         if arr[i]==arr[j]:\n    #             return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # a=sorted(arr)\n    # for i in range(len(arr)-1):\n    #     if arr[i]==arr[i+1]:\n    #         return arr[i]\n    # return \"No Single Element in the Array\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def binarySearch(arr, target):\n        l = 0\n        r = len(arr) - 1\n        while l <= r:\n            m = (r + l) // 2\n            if arr[m] == target:\n                if m == len(arr) - 1:\n                    return m\n                if arr[m+1] == target:\n                    if m == 0 or arr[m-1]!= target:\n                        return m\n                    else:\n                        r = m - 1\n                else:\n                    return m\n            elif arr[m] > target:\n                r = m - 1\n            else:\n                l = m + 1\n        return -1\n    \n    def linearSearch(arr, target):\n        for i in range(len(arr)):\n            if arr[i] == target:\n                return i\n        return -1\n    \n    # bs method\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i-1] == arr[i]:\n            return binarySearch(arr[:i], arr[i])\n    return linearSearch(arr, arr[0])\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    mid = n//2\n    if mid > arr[mid]:\n        return search(arr[mid:])\n    else:\n        return search(arr[:mid])\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    while i < len(arr):\n        j = 0\n        while j < len(arr):\n            if j == i:\n                j += 1\n                continue\n            if arr[i] == arr[j]:\n                j += 1\n                continue\n            elif arr[i] > arr[j]:\n                break\n        else:\n            return arr[i]\n        i += 1\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    dic = {}\n    for i in arr:\n        if i in dic:\n            dic[i]+=1\n        else:\n            dic[i] = 1\n    res = []\n    for i in dic.keys():\n        if dic[i] == 1:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # 1. Check if the array has only 1 element. Return it as it is not possible to return the element that appears only once.\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    if len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return None\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n<=1:\n        return arr[0]\n    mid = n//2\n    if arr[mid] == arr[mid+1]:\n        if mid == 0:\n            return arr[0]\n        if mid == n-1:\n            return arr[n-1]\n        l = search(arr[:mid])\n        r = search(arr[mid+1:])\n        return l if arr.count(l) == 1 else r\n    else:\n        return arr[mid]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0]\n    for element in arr[1:]:\n        if element!= unique_element:\n            return element\n        \n        unique_element = element\n        \n    return unique_element\n    \n    \ndef search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0]\n    for element in arr[1:]:\n        if element!= unique_element:\n            return element\n        \n        unique_element = element\n        \n    return unique_element\n        \n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #list1 = [(-5, 9), (-2, 3), (-1, 0), (-3, 8), (-2, 4), (-5, 6)]\n    list2 = []\n    list3 = []\n    for i in range(len(list1)):\n        list2.append(list1[i][0])\n        list3.append(list1[i][1])\n    list2.sort()\n    list3.sort()\n    if list2[-1] < 0 and list3[0] < 0:\n        return max(list2[-1] * list3[0], list2[-1] * list3[-1])\n    else:\n        return 0\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2=list1\n    list2.sort()\n    max1=0\n    product=1\n    max2=list2[0]\n    for i in range(len(list2)-1):\n        if(list2[i]*list2[i+1]>max1):\n            max1=list2[i]*list2[i+1]\n            max2=list2[i]\n    return max1,max2\ndef max_product_tuple_sorted(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max1=0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if(list1[i][0]*list1[j][0]>max1):\n                max1=list1[i][0]*list1[j][0]\n    max2=list1[i][1]\n    return max1,max2\ndef max_product_tuple_other(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max1=0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if(list1[i][0]*list1[j][0]>max1):\n                max1=list1[i][0]*list1[j][0]\n    max2=list1[i][1]\n    return max1,max2\ndef max_product_tuple_other_no_sorted(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max1=0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if(list1[i][0]*list1[j][0]>max1):\n                max1=list1[i][0]*list1[j][0]\n    max2=list1[i][1]\n    return max1,max2\ndef min_product_tuple(list1):\n    '''\n    Write a function to find the minimum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2=list1\n    list2.sort()\n    min1=list2[0]\n    product=1\n    min2=list2[0]\n    for i in range(len(list2)-1):\n        if(list2[i]*list2[i+1]<min1):\n            min1=list2[i]*list2[i+1]\n            min2=list2[i]\n    return min1,min2\ndef min_product_tuple_sorted(list1):\n    '''\n    Write a function to find the minimum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    min1=list1[0][0]*list1[0][0]\n    product=1\n    min2=list1[0][0]\n    for i in range(len(list1)):\n        if(list1[i][0]*list1[i][0]<min1):\n            min1=list1[i][0]*list1[i][0]\n            min2=list1[i][0]\n    return min1,min2\ndef min_product_tuple_other(list1):\n    '''\n    Write a function to find the minimum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    min1=list1[0][0]*list1[0][0]\n    product=1\n    min2=list1[0][0]\n    for i in range(len(list1)):\n        if(list1[i][0]*list1[i][0]<min1):\n            min1=list1[i][0]*list1[i][0]\n            min2=list1[i][0]\n    return min1,min2\ndef min_product_tuple_other_no_sorted(list1):\n    '''\n    Write a function to find the minimum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    min1=list1[0][0]*list1[0][0]\n    product=1\n    min2=list1[0][0]\n    for i in range(len(list1)):\n        if(list1[i][0]*list1[i][0]<min1):\n            min1=list1[i][0]*list1[i][0]\n            min2=list1[i][0]\n    return min1,min2\ndef min_product_tuple_exception(list1):\n    '''\n    Write a function to find the minimum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if(len(list1)<2):\n        return list1[0][0]*list1[0][0]\n    min1=list1[0][0]*list1[0][0]\n    product=1\n    min2=list1[0][0]\n    for i in range(len(list1)):\n        if(list1[i][0]*list1[i][0]<min1):\n            min1=list1[i][0]*list1[i][0]\n            min2=list1[i][0]\n    return min1,min2\ndef min_product_tuple_exception_sorted(list1):\n    '''\n    Write a function to find the minimum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if(len(list1)<2):\n        return list1[0][0]*list1[0][0]\n    min1=list1[0][0]*list1[0][0]\n    product=1\n    min2=list1[0][0]\n    for i in range(len(list1)):\n        if(list1[i][0]*list1[i][0]<min1):\n            min1=list1[i][0]*list1[i][0]\n            min2=list1[i][0]\n    return min1,min2\ndef min_product_tuple_exception_other(list1):\n    '''\n    Write a function to find the minimum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if(len(list1)<2):\n        return list1[0][0]*list1[0][0]\n    min1=list1[0][0]*list1[0][0]\n    product=1\n    min2=list1[0][0]\n    for i in range(len(list1)):\n        if(list1[i][0]*list1[i][0]<min1):\n            min1=list1[i][0]*list1[i][0]\n            min2=list1[i][0]\n    return min1,min2\ndef min_product_tuple_exception_other_no_sorted(list1):\n    '''\n    Write a function to find the minimum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if(len(list1)<2):\n        return list1[0][0]*list1[0][0]\n    min1=list1[0][0]*list1[0][0]\n    product=1\n    min2=list1[0][0]\n    for i in range(len(list1)):\n        if(list1[i][0]*list1[i][0]<min1):\n            min1=list1[i][0]*list1[i][0]\n            min2=list1[i][0]\n    return min1,min2\ndef max_product_list(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of numbers within a given list.\n    '''\n    max1=0\n    product=1\n    for i in range(len(list1)):\n        for j in range(le"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = [(-2, -1), (-2, 1), (1, -1), (1, 1), (3, 4), (-5, -4), (-3, 2), (0, -3), (2, 1)]\n    list1 = [(-1, -1), (1, -1), (-1, 1), (1, 1)]\n    list1 = [(-2, 1), (1, 1), (-1, 1), (1, 1), (3, 4), (-5, -4), (-3, 2), (0, -3), (2, 1)]\n    max_prod_value = 0\n    max_prod_tuple = ()\n    max_tuple = ()\n    for tup in list1:\n        for item in tup:\n            if isinstance(item, int):\n                if item > max_prod_value:\n                    max_prod_value = item\n                    max_tuple = tup\n    print(max_prod_value, max_tuple)\n    return (max_prod_value, max_tuple)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[i][1] + list1[j][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[i][1] + list1[j][0] * list1[j][1])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product = 0\n    for tup in list1:\n        temp = 1\n        for x in tup:\n            temp *= x\n        if temp > product:\n            product = temp\n    return product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    greatest_max = 0\n    for index in range(len(list1) - 1):\n        if abs(list1[index]) > greatest_max:\n            greatest_max = abs(list1[index])\n        if abs(list1[index + 1]) > greatest_max:\n            greatest_max = abs(list1[index + 1])\n    return greatest_max\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product_list.append(list1[i] * list1[j])\n    \n    return max(product_list)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # set the initial variables\n    max_product = 0\n    max_product_tuple = ()\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for tup in list1:\n        product = 1\n        for i in tup:\n            product *= i\n        if product > max_product:\n            max_product = product\n    return max_product\n    \n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1]) > max_prod:\n                max_prod = abs(list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1])\n    return max_prod\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_amicable_numbers_below(limit):\n        '''\n        Return the sum of all amicable numbers below a specified number.\n        '''\n        total = 0\n        for n in range(1, limit):\n            m = sum_factors(n)\n            if m!= n and is_amicable(n, m):\n                total += n\n        return total\n    return sum_amicable_numbers_below(limit)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    def sum_of_divisors(x):\n        '''\n        Computes the sum of all the divisors of the specified number.\n        '''\n        \n        divisors_sum = 0\n        for i in range(1, x // 2 + 1):\n            if not x % i:\n                divisors_sum += i\n        return divisors_sum\n    \n    # Computes the sum of all amicable numbers that are less than the specified limit.\n    amicable_sum = 0\n    for i in range(1, limit):\n        j = sum_of_divisors(i)\n        if j!= i and sum_of_divisors(j) == i:\n            amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    s = 0\n    for i in range(2, limit):\n        if amicable_number_sum(i) == i:\n            s += i\n    return s\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_divisors(num):\n        n = 1\n        sum = 0\n        while n*n <= num:\n            if num % n == 0:\n                sum += n\n                if not num == n*n:\n                    sum += num/n\n            n += 1\n        return sum\n    \n    n = 0\n    sum = 0\n    while n < limit:\n        if (sum_divisors(sum_divisors(n)) == n) and (sum_divisors(n) == sum_divisors(sum_divisors(n))):\n            print('{0} and {1} are amicable'.format(n, sum_divisors(n)))\n            sum += n\n        n += 1\n    print('Sum: {0}'.format(sum))\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    tot = 0\n    for i in range(1, limit):\n        if i!= sum_factors(sum_factors(i)):\n            tot += i\n    return tot\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def divisor_sum(n):\n        total = 0\n        for i in range(1,n):\n            if n % i == 0:\n                total += i\n        return total\n    amicable_numbers_sum = 0\n    for i in range(2, limit+1):\n        if divisor_sum(divisor_sum(i)) == i and divisor_sum(i)!= i:\n            amicable_numbers_sum += i\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for n in range(1, limit+1):\n        if n not in amicable_numbers:\n            divisor_sum = sum(get_divisors(n))\n            if divisor_sum!= n and divisor_sum!= n+1 and divisor_sum not in amicable_numbers:\n                amicable_numbers.add(n)\n                amicable_numbers.add(divisor_sum)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        for j in range(1, limit):\n            if i!= j and i!= j and amicable_sum < i + j and i < j and not is_amicable(i, j) and not is_amicable(j, i):\n                print(i, j)\n                amicable_sum += i + j\n                # return amicable_sum\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def get_divisors(num):\n        divisors = [1]\n        for i in range(2, num // 2 + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.phase(complex(a,b)))"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if abs(b) == 0:\n        return 0\n    elif abs(b) == 1:\n        return cmath.phase(a)\n    elif abs(b) == -1:\n        return cmath.phase(a)*2\n    elif a == 0:\n        return 0\n    else:\n        return cmath.phase(a) - cmath.phase(b)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang = cmath.phase(a+b*1j)\n    return ang\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a=complex(a)\n    b=complex(b)\n    ans=cmath.phase(b/a)\n    return ans\ndef angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a=complex(a)\n    b=complex(b)\n    ans=cmath.phase(b/a)\n    return round(ans,2)\ndef unit(a,b):\n    '''\n    Write a function to get the unit of a complex number.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a/b\ndef polar(a):\n    '''\n    Write a function to get the polar form of a complex number.\n    '''\n    a=complex(a)\n    ans=pow(a.real,2)+pow(a.imag,2)\n    return ans\ndef to_absolute(a,b):\n    '''\n    Write a function to get the absolute value of a complex number.\n    '''\n    a=complex(a)\n    b=complex(b)\n    ans=pow(a.real,2)+pow(a.imag,2)\n    return round(ans,2)\ndef to_complex(a,b):\n    '''\n    Write a function to convert a real number to complex number.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a+b\ndef to_polar(a):\n    '''\n    Write a function to convert complex number to polar form.\n    '''\n    a=complex(a)\n    ans=pow(a.real,2)+pow(a.imag,2)\n    return round(ans,2)\ndef add(a,b):\n    '''\n    Write a function to add complex numbers.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a+b\ndef multiply(a,b):\n    '''\n    Write a function to multiply complex numbers.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a*b\ndef div(a,b):\n    '''\n    Write a function to divide complex numbers.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a/b\ndef sub(a,b):\n    '''\n    Write a function to subtract complex numbers.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a-b\ndef print_menu():\n    print(\"\"\"\n    1. add\n    2. multiply\n    3. divide\n    4. sub\n    5. complex\n    6. unit\n    7. polar\n    8. absolute value\n    9. convert to complex\n    10. convert to polar\n    \"\"\")\ndef run():\n    print_menu()\n    choice=input(\"enter your choice: \")\n    while choice:\n        if choice=='1':\n            a=float(input(\"enter first number: \"))\n            b=float(input(\"enter second number: \"))\n            ans=add(a,b)\n            print(f\"{a}+{b}={ans}\")\n        elif choice=='2':\n            a=float(input(\"enter first number: \"))\n            b=float(input(\"enter second number: \"))\n            ans=multiply(a,b)\n            print(f\"{a}*{b}={ans}\")\n        elif choice=='3':\n            a=float(input(\"enter first number: \"))\n            b=float(input(\"enter second number: \"))\n            ans=div(a,b)\n            print(f\"{a}/{b}={ans}\")\n        elif choice=='4':\n            a=float(input(\"enter first number: \"))\n            b=float(input(\"enter second number: \"))\n            ans=sub(a,b)\n            print(f\"{a}-{b}={ans}\")\n        elif choice=='5':\n            a=float(input(\"enter real part: \"))\n            b=float(input(\"enter imaginary part: \"))\n            ans=to_complex(a,b)\n            print(f\"{a}+{b}i={ans}\")\n        elif choice=='6':\n            a=float(input(\"enter real part: \"))\n            b=float(input(\"enter imaginary part: \"))\n            ans=unit(a,b)\n            print(f\"{a}/{b}={ans}\")\n        elif choice=='7':\n            a=float(input(\"enter complex number: \"))\n            ans=to_polar(a)\n            print(f\"{a}={ans}\")\n        elif choice=='8':\n            a=float(input(\"enter complex number: \"))\n            b=float(input(\"enter complex number: \"))\n            ans=to_absolute(a,b)\n            print(f\"{a}/{b}={ans}\")\n        elif choice=='9':\n            a=float(input(\"enter real part: \"))\n            b=float(input(\"enter imaginary part: \"))\n            ans=to_complex(a,b)\n            print(f\"{a}+{b}i={ans}\")\n        elif choice=='10':\n            a=float(input(\"enter complex number: \"))\n            ans=to_polar(a)\n            print(f\"{a}={ans}\")\n        else:\n            print(\"invalid choice\")\n        print_menu()\n        choice=input(\"enter your choice: \")\nrun()\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    angle = abs(angle)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if (b == 0):\n        return 0\n    return cmath.phase(a/b)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a, b = a.real, a.imag\n    a, b = a*a + b*b, b*b\n    print('a = ',a,'b = ',b)\n    if a > b:\n        angle = cmath.phase(complex(a,b))\n    else:\n        angle = cmath.phase(complex(b,a))\n    angle = round(angle,2)\n    print('The angle of a complex number is {}'.format(angle))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a,b)\n    return cmath.phase(z)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print(\"Complex number:\",a)\n    print(\"Complex number:\",b)\n    print(a+b)\n    a=complex(a)\n    b=complex(b)\n    print(cmath.phase(complex(a)))\n    print(cmath.phase(complex(b)))\n    print(\"The angle between complex number is: \",cmath.phase(complex(a+b)))\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)): \n        if string[i] == '1': \n            for j in range(i+1,len(string)): \n                if string[j] == '0': \n                    if (j - i) > max_length: \n                        max_length = j - i\n                    break\n                if j == len(string) - 1: \n                    if (j - i) > max_length: \n                        max_length = j - i\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    length = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            length+=1\n        else:\n            length = 0\n        max_length = max(max_length, length)\n    return max_length\n    \ndef find_max_binary_gap(number):\n    '''\n    Write a function to find the longest binary gap of a positive integer.\n    '''\n    return max(find_length(bin(number)[2:]) for number in range(1, 2**len(bin(number)[2:])))\n    \ndef find_longest_substring(string):\n    '''\n    Write a function to find the longest substring with the same letters.\n    '''\n    return max(map(len, re.split('(?=(.)\\\\2*)', string)), default=0)\n    \ndef get_max_product_from_grid(grid):\n    '''\n    Write a function to find the maximum product of two distinct numbers in a NxN grid.\n    '''\n    product = 0\n    max_row = len(grid)\n    max_col = len(grid[0])\n    for i in range(max_row):\n        for j in range(max_col):\n            if grid[i][j]!= 0:\n                product = max(product, grid[i][j] * grid[i][(j + 1) % max_col])\n                product = max(product, grid[i][j] * grid[(i + 1) % max_row][j])\n    return product\n    \ndef get_max_profit(stock_prices):\n    '''\n    Write a function to find the maximum profit of buying and selling a share at most twice.\n    '''\n    return sum(max(0, stock_prices[i+1] - stock_prices[i]) for i in range(len(stock_prices)-1))\n    \ndef find_smallest_range_containing_subset_of_number(arr, number):\n    '''\n    Write a function to find the smallest range containing at least one occurrence of the specified number.\n    '''\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + 1 < arr[right]:\n            if number < arr[left] or number > arr[right]:\n                left += 1\n            elif number > arr[left] and number < arr[right]:\n                right -= 1\n            elif arr[left] + 1 == arr[right]:\n                return (arr[left], arr[right])\n            else:\n                return (arr[left], arr[left] + 1)\n        else:\n            right -= 1\n    if number < arr[left] or number > arr[right]:\n        return (-1, -1)\n    return (arr[left], arr[left] + 1)\n    \ndef find_anagrams(word, candidates):\n    '''\n    Write a function to find all anagrams of a string in a list.\n    '''\n    return sorted([candidate for candidate in candidates if sorted(candidate) == sorted(word)])\n    \ndef find_min_number_of_steps(number):\n    '''\n    Write a function to find the minimum number of steps to convert a number to 1 in the 'division game'\n    If it is not possible to reach 1, return -1.\n    '''\n    if number == 1:\n        return 0\n    if number % 2 == 1:\n        return -1\n    quotient = 1\n    count = 0\n    while quotient < number:\n        quotient = quotient * 2\n        count += 1\n    if quotient == number:\n        return count\n    return -1\n    \ndef check_if_word_is_anagram(word_one, word_two):\n    '''\n    Write a function to check if the first word is an anagram of the second.\n    '''\n    return sorted(word_one) == sorted(word_two)\n    \ndef get_number_of_steps(number):\n    '''\n    Write a function to get the number of steps to convert a number to 1 in the 'division game'\n    If it is not possible to reach 1, return -1.\n    '''\n    if number == 1:\n        return 0\n    if number % 2 == 1:\n        return -1\n    quotient = 1\n    count = 0\n    while quotient < number:\n        quotient = quotient * 2\n        count += 1\n    if quotient == number:\n        return count\n    return -1\n    \ndef find_recurring_cycle(arr):\n    '''\n    Write a function to find the start index and end index of a recurring cycle in a circular array.\n    '''\n    n = len(arr)\n    s = set()\n    for i in range(n):\n        if i < n - 1:\n            if arr[i] == arr[i+1]:\n                return (i, i+1)\n        s.add(arr[i])\n        if len(s) == n:\n            return (-1, -1)\n    return (-1, -1)\n    \ndef get_least_common_number(arr_one, arr_two):\n    '''\n    Write a function to get the least common number in two arrays.\n    '''\n    return 2 * min(set(arr_one) & set(arr_two))\n    \ndef get_number_of_ways(number):\n    '''\n    Write a function to get the number of ways to make change for a given number of cents.\n    '''\n    if number == 0:\n        return 1\n    elif number % 2 == 1:\n        return 0\n    count = 0\n    while number:\n        count += number // 2\n        number = number // 2\n    return count\n    \ndef get_all_substrings_of_string(string):\n    '''\n    Write a function to get all possible substrings of a string.\n    '''\n    return [string[i: j] for i in range(len(string)) for j in range(i+1, len(string)+1)]\n    \ndef get_number_of_palindrome_pairs(arr):\n    '''\n    Write a function to count the number of palindromic string pairs in a given string.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            substring = arr[i:j+1]\n            if substring == substring[::-1] and len(substring) > 1:\n                count += 1\n    return count\n    \ndef get_all_substrings(string):\n    '''\n    Write a function to get all possible substrings of a string.\n    '''\n    return [string[i: j] for i in range(len(string)) for j in range(i+1, len(string)+1)]\n    \ndef find_longest_substring_without_repeating_characters(string):\n    '''\n    Write a function to find the length of the longest substring without repeating characters.\n    '''\n    if not string:\n        return 0\n    if len(string) == 1:\n        return 1\n    longest = 0\n    i = 0\n    for j in range(len(string)):\n        if string[j] in string[i:j]:\n            i = string[i:j].index(string[j]) + i + 1\n        longest = max(longest, j - i + 1)\n    return longest\n    \ndef print_integers_in_reverse(number):\n    '''\n    Write a function to print all positive integers in descending order.\n    '''\n    return [int(x) for x in reversed(str(number))]\n    \ndef multiply_strings_of_digits(number):\n    '''\n    Write a function to multiply strings of digits.\n    '''\n    return int(reduce(lambda x, y: int(x) * int(y), number))\n    \ndef print_integers_in_reverse(number):\n    '''\n    Write a function to print all positive integers in descending order.\n    '''\n    return [int(x) for x in reversed(str(number))]\n    \ndef get_number_of_days(month, day):\n    '''\n    Write "
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # The function returns the difference of the number of 1s and the number of 0s.\n    # initialize the result to 0\n    result = 0\n    # initialize a variable to store the count of 1s\n    count_one = 0\n    # initialize a variable to store the count of 0s\n    count_zero = 0\n    for i in range(len(string)):\n        # if the number of 1s is larger than the number of 0s, increment the count of the 1s\n        if string[i] == '1':\n            count_one += 1\n        # if the number of 0s is larger than the number of 1s, increment the count of the 0s\n        if string[i] == '0':\n            count_zero += 1\n        # if the count of 1s is larger than the count of 0s, store the count of the 1s\n        if count_one > count_zero:\n            result = max(result, count_one - count_zero)\n    # return the difference between the counts of 1s and 0s\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_0 = 0\n    max_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            max_0 += 1\n        elif string[i] == '1':\n            max_1 += 1\n    return max(max_0,max_1)\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in string:\n        if i == \"1\":\n            count_1 += 1\n        if i == \"0\":\n            count_0 += 1\n        if count_1 - count_0 > max_diff:\n            max_diff = count_1 - count_0\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #count the number of 0s and 1s in the given binary string\n    count0,count1 = string.count('0'),string.count('1')\n    #print(count0,count1)\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string) \n    max_0, max_1, curr_0, curr_1 = 0, 0, 0, 0\n    for i in range(n): \n        if string[i] == '0': \n            curr_0 += 1\n            curr_1 = max(curr_1, curr_0) \n        else: \n            curr_1 += 1\n            curr_0 = max(curr_0, curr_1) \n        max_0 = max(max_0, curr_0) \n        max_1 = max(max_1, curr_1) \n    return max_0 + max_1 \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    count = 0\n    count1 = 0\n    for i in range(len(string)):\n        if(string[i] == '1'):\n            count1 += 1\n        else:\n            count += 1\n        if(max_length < count1 - count):\n            max_length = count1 - count\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    count_0_max = 0\n    count_1_max = 0\n    for i in range(0, len(string)):\n        if string[i] == \"0\":\n            count_0 += 1\n            if count_0_max < count_0:\n                count_0_max = count_0\n        else:\n            count_1 += 1\n            if count_1_max < count_1:\n                count_1_max = count_1\n    if count_0_max == count_1_max:\n        return count_0_max\n    return max(count_0_max, count_1_max)\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return string.count('0') - string.count('1')\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    r = 1\n    for i in range(2, min(a,b)+1):\n        if (a%i == 0) and (b%i == 0):\n            r = r*i\n    return r\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return (a+b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=[]\n    if(a>b):\n        a,b=b,a\n    for i in range(a,0,-1):\n        if(a%i==0 and b%i==0):\n            c.append(i)\n    return sum(c)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return  gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a, b):\n        if a == 0 :\n            return b\n        return gcd(b % a, a)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def common_divisor(a,b):\n        l=[]\n        for i in range(1,a+1):\n            if a%i==0:\n                l.append(i)\n        for i in range(1,b+1):\n            if b%i==0:\n                l.append(i)\n        return l\n    l=common_divisor(a,b)\n    s=0\n    for i in l:\n        if i in l:\n            s+=i\n    print(s)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a,b):\n        if a>b:\n            return gcd(b,a)\n        elif b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n    return gcd(a,b)\nprint(sum(10,15))\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    result = 0\n    while(b):\n        result = result + a\n        a = a + b\n        b = b - 1\n    return result \n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if (b==0):\n        return a\n    else:\n        return sum(b,a%b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    print(\"the sum of the common divisors of a and b is: \", gcd(a, b))\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if (type(x)!= int) or (type(y)!= int):\n        return None\n    else:\n        return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # if x and y are equal to 0\n    if x == 0 or y == 0:\n        return 0\n    return x + y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    list_words = str.split()\n    long_list = []\n    for word in list_words:\n        if len(word) > n:\n            long_list.append(word)\n    return long_list\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    wordlist = str.split()\n    return [word for word in wordlist if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l = []\n    for i in str:\n        if len(i) > n:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    lst = str.split()\n    l = []\n    for i in lst:\n        if len(i) > n:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for word in str:\n        if len(word) > n:\n            print(word)\n    return None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    wordlist = str.split()\n    longlist = []\n    for word in wordlist:\n        if len(word) > n:\n            longlist.append(word)\n    print(' '.join(longlist))\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str if len(w)>n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str.split():\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Create a new list of integers from the row-length of the matrix\n    # and all the columns\n    magic_list = [x for x in range(1, len(my_matrix)**2+1)]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # get the sum of each column and verify it\n    columns_sum = 0\n    for col in range(len(my_matrix)):\n        for row in range(len(my_matrix[col])):\n            columns_sum += my_matrix[col][row]\n        if columns_sum!= sum(my_matrix[col]):\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #convert list into matrix\n    new_matrix = []\n    for i in range(len(my_matrix)):\n        temp_list = []\n        for j in range(len(my_matrix[i])):\n            temp_list.append(my_matrix[i][j])\n        new_matrix.append(temp_list)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #Check whether it's a magic square\n    #We know that the sum of the elements of the diagonal is always the same\n    #We also know that the difference between the maximum and minimum of the sum of the rows is always 1\n    #The elements of the sum of the columns are the same as the diagonal\n    #All the other elements are the same as the sum of the rows\n    #So we just need to check if all the above are true\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check rows and columns\n    check_list = []\n    for row in my_matrix:\n        check_list += row\n    column_list = []\n    for i in range(len(my_matrix[0])):\n        for row in my_matrix:\n            column_list.append(row[i])\n        if set(check_list) == set(column_list) == set(check_list):\n            print('It is a magic square.')\n        else:\n            print('It is not a magic square.')\n    # check diagonals\n    down_diagonal = []\n    for i in range(len(my_matrix[0])):\n        down_diagonal.append(my_matrix[i][i])\n    if set(check_list) == set(down_diagonal) == set(check_list):\n        print('It is a magic square.')\n    else:\n        print('It is not a magic square.')\n    # check anti diagonals\n    up_diagonal = []\n    for i in range(len(my_matrix[0])):\n        up_diagonal.append(my_matrix[len(my_matrix)-i-1][i])\n    if set(check_list) == set(up_diagonal) == set(check_list):\n        print('It is a magic square.')\n    else:\n        print('It is not a magic square.')\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    print('Input:', my_matrix)\n    # Add code here\n    sum_rows = []\n    sum_cols = []\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #checking rows\n    if sum(my_matrix[0])!= 15:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    cols = set()\n    rows = set()\n    sub_square = set()\n    if len(my_matrix) == len(my_matrix[0]):\n        for col in range(len(my_matrix)):\n            for row in range(len(my_matrix)):\n                sub_square.add(my_matrix[row][col])\n                rows.add(my_matrix[row])\n                cols.add(my_matrix[col])\n        if len(sub_square) == len(rows) == len(cols):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # 1. Check if the given matrix is a square\n    # 2. Check if the matrix is magic\n    # 3. Check if the sum of each row is equal to the sum of each column\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return None\n    d = defaultdict(int)\n    max_occurrences = 0\n    max_item = None\n    for num in nums:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n        if d[num] > max_occurrences:\n            max_occurrences = d[num]\n            max_item = num\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return -1\n    if len(nums) == 1:\n        return nums[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #split nums into dict\n    nums_dict = defaultdict(int)\n    for i in nums:\n        nums_dict[i] += 1\n    #find the max from dictionary\n    max_occ = max(nums_dict.values())\n    #loop through the dictionary and find the key with the maximum value\n    for k in nums_dict:\n        if nums_dict[k] == max_occ:\n            return k\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    my_dict = defaultdict(int)\n    max_occurrences = 0\n    max_item = None\n    for i in nums:\n        my_dict[i] += 1\n        if my_dict[i] > max_occurrences:\n            max_occurrences = my_dict[i]\n            max_item = i\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # x = nums.count(nums[0])\n    # for n in nums:\n    #     if nums.count(n) == x:\n    #         return n\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    hash_map = defaultdict(int)\n    for num in nums:\n        hash_map[num] += 1\n    max_freq = max(list(hash_map.values()))\n    return [key for key, val in hash_map.items() if val == max_freq]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #nums = [1, 2, 3, 4, 4, 4, 4]\n    occur = defaultdict(int)\n    for num in nums:\n        occur[num] += 1\n    return max(occur, key=occur.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    for n in nums:\n        dic[n] += 1\n    return max(dic, key=dic.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_items = defaultdict(int)\n    max_item = -1\n    max_occ = 0\n    for item in nums:\n        dict_items[item] += 1\n        if dict_items[item] > max_occ:\n            max_item = item\n            max_occ = dict_items[item]\n    print(f\"max_item = {max_item}\")\n    print(f\"max_occ = {max_occ}\")\n    return max_item, max_occ\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    result = defaultdict(int)\n    max_val = 0\n    for num in nums:\n        result[num] += 1\n        if result[num] > max_val:\n            max_val = result[num]\n    return max_val\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowel_list = list(str1)\n    i = 0\n    j = len(vowel_list) - 1\n    while i < j:\n        if vowel_list[i] not in vowels:\n            i += 1\n        elif vowel_list[j] not in vowels:\n            j -= 1\n        else:\n            vowel_list[i], vowel_list[j] = vowel_list[j], vowel_list[i]\n            i += 1\n            j -= 1\n    return \"\".join(vowel_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel_list = ['a','e','i','o','u','A','E','I','O','U']\n    if str1[0] in vowel_list:\n        str1 = str1[::-1]\n    else:\n        index = 0\n        vowel_index = []\n        for char in str1:\n            if char in vowel_list:\n                vowel_index.append(index)\n            index += 1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    vowels_in_str = set([x for x in str1 if x in vowels])\n    vowels_not_in_str = set([x for x in str1 if x not in vowels])\n    return ''.join(vowels_in_str.symmetric_difference(vowels_not_in_str))\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    string = list(str1)\n    i = 0\n    j = len(string)-1\n    while i < j:\n        if string[i].lower() not in vowels:\n            i += 1\n        elif string[j].lower() not in vowels:\n            j -= 1\n        else:\n            string[i], string[j] = string[j], string[i]\n            i += 1\n            j -= 1\n    return ''.join(string)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    str1 = list(str1)\n    vowel_pos = [i for i in range(len(str1)) if str1[i].lower() in vowels]\n    print(vowel_pos)\n    vowel_pos.reverse()\n    print(vowel_pos)\n    for i in range(len(vowel_pos)):\n        str1[vowel_pos[i]], str1[-vowel_pos[i] - 1] = str1[-vowel_pos[i] - 1], str1[vowel_pos[i]]\n    str1 = ''.join(str1)\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return ''.join(i if i not in 'aeiou' else ''.join(reversed('aeiou')) for i in str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    vowels = [x.upper() for x in vowels]\n    str2 = ''\n    for i in str1:\n        if i.upper() in vowels:\n            str2 = str2 + i\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = list(\"aeiouAEIOU\")\n    vowels_list = []\n    for i in str1:\n        if i in vowels:\n            vowels_list.append(i)\n    reversed_vowels_list = vowels_list[::-1]\n    reversed_vowels_string = \"\".join(reversed_vowels_list)\n    return reversed_vowels_string\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    str_list = list(str1)\n    i = 0\n    j = len(str_list) -1\n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n    return ''.join(str_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiou\")\n    str_arr = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if str_arr[i] in vowels:\n            while not str_arr[j] in vowels:\n                j -= 1\n            str_arr[i], str_arr[j] = str_arr[j], str_arr[i]\n            j -= 1\n        i += 1\n    return ''.join(str_arr)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1 = tuple(tup1)\n    tup1 = str(tup1)\n    return tup1\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #create an empty string\n    string = \"\"\n    for item in tup1:\n        #concatenate items of tuple with a comma\n        string += str(item) + \",\"\n    #return the string\n    return string[:-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #pass\n    # Your code here\n    #print(type(tup1))\n    return(str(tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = \"\"\n    for e in tup1:\n        result = result + str(e)\n        if tup1.index(e) == len(tup1) - 1:\n            break\n        result = result + \", \"\n    return result\n    \n    \ndef average_grade(tup1):\n    '''\n    Write a function that takes in a tuple of integers and returns the average grade.\n    '''\n    sum = 0\n    for e in tup1:\n        sum = sum + e\n    return sum / len(tup1)\n    \n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + \",\".join(tup1) + \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1[0])+str(tup1[1])\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n    \n    \ntup1 = (\"Python\", \"Javascript\", \"C\", \"C++\")\nprint(tup_string(tup1))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(i for i in nums if i < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    nums = [1,2,3,-4,5,-6,7,8]\n    sum_of_numbers = 0\n    for i in nums:\n        if i < 0:\n            sum_of_numbers += i\n    return sum_of_numbers\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    for num in nums:\n        if num < 0:\n            total = total + num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total_negativenum = 0\n    for i in nums:\n        if i < 0:\n            total_negativenum += i\n    return total_negativenum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    #if the length of the array is less than one \n    if len(nums) < 1:\n        return 0\n    #if the length of the array is greater than one\n    else:\n        #define a variable to hold the sum\n        sum = 0\n        #iterate through the array and sum each number to the sum \n        for i in range(0, len(nums)):\n            sum += nums[i]\n        #return the sum\n        return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    return 1 + (n-1)*(2**0.5) + hexagonal_num(n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x = 0\n    y = 1\n    if n < 1:\n        return 0\n    for i in range(n):\n        x, y = y, x + 3*y\n    return x\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return(int((n*(2*n - 1))/2))\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n    \nprint(hexagonal_num(1) == 1)\nprint(hexagonal_num(2) == 3)\nprint(hexagonal_num(3) == 6)\nprint(hexagonal_num(4) == 10)\nprint(hexagonal_num(5) == 15"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return None\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            nonzero_count += 1\n    return zero_count/nonzero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n        else:\n            nonzero_count += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #set counter for zeroes and non-zeroes\n    count_zero = 0\n    count_nonzero = 0\n    #loop through array\n    for x in nums:\n        if x == 0:\n            count_zero += 1\n        else:\n            count_nonzero += 1\n    #return the ratio between the zeroes and non-zeroes\n    return count_zero / count_nonzero\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_nonzeroes = 0\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_nonzeroes += 1\n    return num_zeroes / num_nonzeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    zero_count_array = [0]*nums.size\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    count = 0\n    for n in nums:\n        if n == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # # old method\n    # for num in nums:\n    #     if num == 0:\n    #         count += 1\n    # return count / len(nums)\n    # # new method\n    # count = 0\n    # for num in nums:\n    #     if num == 0:\n    #         count += 1\n    # return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # zero_count(nums) -> float\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_of_zeroes = 0\n    num_of_non_zeroes = 0\n    for i in nums:\n        if i == 0:\n            num_of_zeroes += 1\n        else:\n            num_of_non_zeroes += 1\n    return num_of_zeroes/num_of_non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeros = 0\n    zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n < 0): \n        return False\n    else: \n        return (n == 0 or ((n & (n - 1)) == 0 and ((n & 0xAAAAAAAA) == 0))) \n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    while n % 2 == 0: \n        n = n / 2\n    return False if n == 1 else True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n!= 0:\n        if n & 1:\n            return False\n        else:\n            n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    temp=n\n    sum1=0\n    while(temp>0):\n        sum1=sum1+(temp%2)\n        temp=temp//2\n    return(n%2==0 and n==sum1)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0:\n        n = n & (n-1)\n    if n == 0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n == 0):\n        return 1\n    else:\n        while(n % 2 == 0):\n            n = n // 2\n        return 0 if(n!= 1) else 1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n % 2 == 0): \n        n = n / 2\n    if (n == 1): \n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Base case \n    if n == 0: \n        return True\n    # If given number is a power of 2 \n    if n & (n-1) == 0: \n        return True\n    # If given number is not a power of 2 \n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def non_zero_powers_of_2(n):\n        '''\n        This function returns the set of non-zero powers of 2.\n        '''\n        powers = {2**i for i in range(n+1)}\n        return powers\n    def number_is_represented(n):\n        '''\n        This function checks whether the number is represented as sum of non-zero powers of 2 or not.\n        '''\n        powers = non_zero_powers_of_2(n)\n        while n!= 0:\n            if n-2 in powers:\n                n -= 2\n            elif n - 1 in powers:\n                n -= 1\n            else:\n                return False\n        return True\n    return number_is_represented(n)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return not n & (n-1)\n    \n    \ndef factorial(n):\n    if n <= 1: \n        return 1\n    else: \n        return n * factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2*math.pi*r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2*math.pi*r\n    return c\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num_list = []\n    for i in test_list:\n        for j in i:\n            num_list.append(j)\n    return num_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(set([x for sublist in test_list for x in sublist]))\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # write your code here\n    return [item for test_list in test_list for item in test_list]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    for i in test_list:\n        if isinstance(i, list):\n            test_list.extend(i)\n            extract_singly(i)\n    return set(test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        for element in item:\n            flat_list.append(element)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for l in test_list:\n        for i in l:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        if type(sublist) is list:\n            for item in sublist:\n                flattened_list.append(item)\n        else:\n            flattened_list.append(sublist)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if not test_list:\n        return list()\n    if not isinstance(test_list[0], list):\n        return test_list\n    extracted = list()\n    for sub_list in test_list:\n        extracted += extract_singly(sub_list)\n    return extracted\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    curr_pos = len(nums) - 1\n    while curr_pos > 0:\n        # Find the maximum element in nums[:curr_pos+1]\n        max_pos = 0\n        for i in range(1, curr_pos+1):\n            if nums[i] > nums[max_pos]:\n                max_pos = i\n        # Swap the maximum element with the current position\n        nums[max_pos], nums[curr_pos] = nums[curr_pos], nums[max_pos]\n        # Reverse the sequence from nums[:curr_pos]\n        nums[:curr_pos+1] = reversed(nums[:curr_pos+1])\n        curr_pos -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n    for i in range(len(nums)-1,0,-1):\n        if nums[i]!= i+1:\n            for j in range(i):\n                if nums[j] > nums[i]:\n                    swap(nums, j, i)\n            swap(nums, i, i-1)\n            if nums[i-1]!= i:\n                pancake_sort(nums[:i])\n                break\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    res = []\n    n = len(nums)\n    if n <= 1:\n        return nums\n    for j in range(n-1, 0, -1):\n        if nums[j] < nums[0]:\n            k = j\n            for i in range(j):\n                res.append(nums[k])\n                k += 1\n            break\n    for i in range(j):\n        res.append(nums[i])\n    return res + pancake_sort(nums[j:])\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(arr, i):\n        arr = arr[:i+1][::-1] + arr[i+1:]\n        return arr\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)//2):\n        print(i)\n        _,pos = nums[i].split()\n        pos = int(pos)\n        print(nums[i], pos)\n        _, pos = nums[len(nums)-i-1].split()\n        pos = int(pos)\n        print(nums[len(nums)-i-1], pos)\n        if pos!= i+1:\n            nums[i], nums[pos-1] = nums[pos-1], nums[i]\n            nums[i], nums[pos] = nums[pos], nums[i]\n            print(nums)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    p = 0\n    for i in range(len(nums)-1, 0, -1):\n        # print(nums)\n        max_num = max(nums[:i])\n        max_index = nums.index(max_num)\n        if max_index!= i:\n            nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n            nums[max_index] = i\n            p = p+1\n    return p\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def findMax(nums):\n        max_val = 0\n        for i in range(len(nums)):\n            if nums[i] > max_val:\n                max_val = nums[i]\n        return max_val\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        for j in range(0, i - 1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                pancake_sort(nums[:j] + nums[j+1:])\n                break\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0: return []\n    flips = 0\n    for i in range(len(nums)):\n        cur = i\n        for j in range(i, 0, -1):\n            if nums[j] < nums[j-1]:\n                nums[j-1], nums[j] = nums[j], nums[j-1]\n                cur = j-1\n                flips += 1\n            else:\n                break\n        if cur == i:\n            break\n    return flips\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #nums = [1, 2, 3, 4, 5]\n    leng = len(nums)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    i=0\n    while i<len(list1):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count=count+1\n        i=i+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #list1 = [1,2,3,3,3,3,3,3,3,3,3,3]\n    #list2 = ['a','a','a','b','c','b','a','a','a','d','d']\n    #list3 = [1,1,1,2,2,2,3,3,3,3,3,3,3]\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    print(len([i for i in zip(list1,list2,list3) if i[0] == i[1] == i[2]]))\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair_count = 0\n    for x,y,z in zip(list1,list2,list3):\n        if x==y and y==z:\n            samepair_count+=1\n    return samepair_count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for x in range(len(list1)):\n        if list1[x] == list2[x] and list2[x] == list3[x]:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for x in range(len(list1)):\n        if list1[x]==list2[x] and list2[x]==list3[x]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_number = 0\n    for item1 in list1:\n        for item2 in list2:\n            for item3 in list3:\n                if item1 == item2 and item2 == item3 and item3 == item1:\n                    same_number += 1\n    return same_number\n    \ndef count_in_list(number,list1):\n    '''\n    Write a function to count how many items of a given number is in the list.\n    '''\n    number_count = 0\n    for item in list1:\n        if number == item:\n            number_count += 1\n    return number_count\n    \ndef count_even(list1):\n    '''\n    Write a function to count how many items of the list are even.\n    '''\n    even_number_count = 0\n    for item in list1:\n        if item % 2 == 0:\n            even_number_count += 1\n    return even_number_count\n    \ndef count_odd(list1):\n    '''\n    Write a function to count how many items of the list are odd.\n    '''\n    odd_number_count = 0\n    for item in list1:\n        if item % 2!= 0:\n            odd_number_count += 1\n    return odd_number_count\n    \ndef get_count_list(list1):\n    '''\n    Write a function to return a list of counts of each number in a list.\n    '''\n    number_list = []\n    for item in list1:\n        if item not in number_list:\n            number_list.append(item)\n    for number in number_list:\n        count = 0\n        for item in list1:\n            if number == item:\n                count += 1\n        number_list[number_list.index(number)] = count\n    return number_list\n    \ndef get_list_with_less(list1,list2):\n    '''\n    Write a function to return a list of items that are in the first list but not in the second list.\n    '''\n    less_list = []\n    for item in list1:\n        if item not in list2:\n            less_list.append(item)\n    return less_list\n    \ndef get_list_with_more(list1,list2):\n    '''\n    Write a function to return a list of items that are in the second list but not in the first list.\n    '''\n    more_list = []\n    for item in list2:\n        if item not in list1:\n            more_list.append(item)\n    return more_list\n    \ndef get_list_with_duplicate(list1):\n    '''\n    Write a function to return a list of items that are duplicated in the original list.\n    '''\n    duplicate_list = []\n    for item in list1:\n        if list1.count(item) > 1 and item not in duplicate_list:\n            duplicate_list.append(item)\n    return duplicate_list\n    \ndef get_list_with_duplicate_and_none(list1,list2):\n    '''\n    Write a function to return a list of items that are duplicated in both lists.\n    '''\n    duplicate_list = []\n    for item in list1:\n        if list2.count(item) > 0 and item not in duplicate_list:\n            duplicate_list.append(item)\n    return duplicate_list\n    \ndef get_list_with_duplicate_and_none_diff(list1,list2):\n    '''\n    Write a function to return a list of items that are duplicated in the first list but not in the second list.\n    '''\n    duplicate_list = []\n    for item in list1:\n        if list2.count(item) == 0 and item not in duplicate_list:\n            duplicate_list.append(item)\n    return duplicate_list\n    \ndef get_list_with_duplicate_and_none_diff2(list1,list2):\n    '''\n    Write a function to return a list of items that are duplicated in the second list but not in the first list.\n    '''\n    duplicate_list = []\n    for item in list2:\n        if list1.count(item) == 0 and item not in duplicate_list:\n            duplicate_list.append(item)\n    return duplicate_list\n    \ndef is_list_alphabetical(list1):\n    '''\n    Write a function to check if a list is alphabetical, meaning that all items are in alphabetical order starting from the first item and ending with the last item.\n    '''\n    for item in list1:\n        if list1[list1.index(item)]!= chr(item):\n            return False\n    return True\n    \ndef is_list_alphabetical2(list1):\n    '''\n    Write a function to check if a list is alphabetical, meaning that all items are in alphabetical order starting from the first item and ending with the last item.\n    '''\n    temp_list = []\n    for item in list1:\n        temp_list.append(chr(item))\n    temp_list.sort()\n    for item in temp_list:\n        if list1.index(ord(item))!= temp_list.index(item):\n            return False\n    return True\n    \ndef is_list_alphabetical3(list1):\n    '''\n    Write a function to check if a list is alphabetical, meaning that all items are in alphabetical order starting from the first item and ending with the last item.\n    '''\n    for index in range(0,len(list1)):\n        if list1[index]!= chr(list1[index]):\n            return False\n    return True\n    \ndef remove_duplicate(list1):\n    '''\n    Write a function to remove duplicate items from the list.\n    '''\n    duplicate_list = []\n    for item in list1:\n        if list1.count(item) > 1 and item not in duplicate_list:\n            duplicate_list.append(item)\n    for item in duplicate_list:\n        list1.remove(item)\n    return list1\n    \ndef list_with_value_greater(list1,value):\n    '''\n    Write a function to return a list with all items that are greater than the given value.\n    '''\n    greater_list = []\n    for item in list1:\n        if item > value:\n            greater_list.append(item)\n    return greater_list\n    \ndef list_with_value_greater2(list1,value):\n    '''\n    Write a function to return a list with all items that are greater than the given value.\n    '''\n    greater_list = []\n    greater_list = list(filter(lambda x: x > value,list1))\n    return greater_list\n    \ndef list_with_value_greater3(list1,value):\n    '''\n    Write a function to return a list with all items that are greater than the given value.\n    '''\n    greater_list = []\n    for item in list1:\n        if item > value:\n            greater_list.append(item)\n    return greater_list\n    \ndef list_with_value_greater_equal(list1,value):\n    '''\n    Write a function to return a list with all items that are greater than or equal to the given value.\n    '''\n    greater_equal_list = []\n    for item in list1:\n        if item >= value:\n            greater_equal_list.append(item)\n    return greater_equal_list\n    \ndef list_with_value_greater_equal2(list1,value):\n    '''\n    Write a function to return a list with all items that are greater than or equal to the given value.\n    '''\n    greater_equal_list = []\n    greater_equal_list = list(filter(lambda x: x >= value,list1))\n    return greater_equal_list\n    \ndef list_with_value_greater_equal3(list1,value):\n    '''\n    Write a function to return a list with all items that are greater than or equal to the given value.\n    '''\n    greater_equal_list = []\n    for item in list1:\n        if item >= value:\n        "
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if(list1[i]==list2[i] and list1[i]==list3[i]):\n            count=count+1\n    print(count)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List=[]\n    for x in Input:\n        if type(x)==list:\n            List.append(x)\n    print(f\"Total number of lists are {len(List)}\")\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = []\n    for idx, val in enumerate(Input):\n        if isinstance(val, list):\n            lists.append(val)\n    return len(lists)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count \n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len([i for i in Input if isinstance(i, list)])\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = str(Input)\n    L = re.findall(r\"\\[\\s*\\]\", Input)\n    return(len(L))\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = Input[:-1]\n    return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = []\n    for element in Input:\n        if type(element) == type(lists):\n            lists.append(element)\n    return len(lists)\nInput = (1, [2, 3, [4, 5], 6, [7, 8], 9], 10)\nprint(find_lists(Input))"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # function to find number of lists present in the given tuple \n    Input_list = [] \n    for i in Input: \n        if type(i) == list: \n            Input_list.append(i) \n    return len(Input_list) \n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len([Input for Input in Input if isinstance(Input,list)])\n    \ndef remove_duplicates(Input):\n    '''\n    Write a function to remove duplicates in a list.\n    '''\n    return list(set(Input))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            diff = abs(arr[i] - arr[j]) \n            if (max_diff < diff): \n                max_diff = diff \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_val = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] > max_val:\n                max_val = arr[i] - arr[j]\n    return max_val\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(a - b) for a in arr for b in arr if a!= b) \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1] \n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] - arr[j]) > max_diff: \n                max_diff = arr[i] - arr[j] \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if (diff > max_diff):\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 1:\n        return None\n    elif len(arr) == 1:\n        return 0\n    else:\n        # return max(abs(arr[i]-arr[j]) for i in range(len(arr)-1) for j in range(i+1,len(arr)))\n        return max(abs(arr[i]-arr[j]) for i in range(len(arr)-1) for j in range(i+1,len(arr)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # initialize max to the first element\n    max = arr[0] \n    # initialize min to the first element\n    min = arr[0] \n    max_diff = arr[0]\n    # traverse the array\n    for i in range(1, len(arr)): \n        # compare the element with the previous element\n        max_diff = max(max_diff, arr[i] - min) \n        # update minimum value\n        min = min(min, arr[i]) \n        # update maximum value\n        max = max(max, arr[i]) \n    return max_diff \n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Try all potential x and y values to find a solution\n    # The problem statement says a must be less than b\n    for x in range(a, n):\n        for y in range(1, n):\n            if x + y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Not sure if it works...\n    for x in range(1,n):\n        for y in range(1,n):\n            if a*x + b*y == n:\n                return(x,y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if x*a + y*b == n:\n                return x,y\n    return None\n    \n    \n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    g = gcd(a, n)\n    if g == 1:\n        return (int(n/a), n%a)\n    elif g!= 0:\n        return (int(n/g), n%g)\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = 0, 0\n    if n % a == 0:\n        x = n / a\n        y = 0\n    else:\n        y = n / a\n        x = n / b\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Your code here\n    for i in range(n):\n        for j in range(n):\n            if a*i + b*j == n:\n                return (i,j)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 1:\n        return 0, 0\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(0, n):\n        for j in range(0, n):\n            if (i * a) + (j * b) == n:\n                return (i, j)\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(filter(lambda x: x not in list2, list1))\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for element in list1:\n        if element not in list2:\n            list3.append(element)\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    while list2 in list1:\n        list1.remove(list2)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    res = []\n    for item in list1:\n        if item not in list2:\n            res.append(item)\n    return res\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    list1.sort()\n    list2.sort()\n    \n    print(list1)\n    print(list2)\n    \n    for element in list2:\n        for i in range(0, len(list1)):\n            if list1[i] == element:\n                list1.remove(list1[i])\n    print(list1)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1[i] ='removed'\n    print('\\nNew list:', list1)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [1, 3, 5, 7]\n    list2 = [1, 2, 3, 4]\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    print(list1)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += n - 2 * i\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n > 0:\n        if n % 2 == 0:\n            return 2*sum_series(n/2)\n        else:\n            return (sum_series(n-1) + 1)\n    else:\n        return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    def sum_series_inner(n):\n        sum_series = 0\n        for i in range(n//2):\n            sum_series += (n - 2*i)\n        return sum_series\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(0, n//2+1):\n        total += (n - 2*i)\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # n = int(input(\"Enter an integer: \"))\n    i=0\n    x = n//2\n    sum=0\n    while x > 0:\n        i=i+1\n        sum = sum + n - 2*i\n        x = x -1\n    return sum\n    # print(\"The sum is: \" + str(sum))\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n > 0:\n        return n + sum_series(n - 2)\n    else:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    assert n >= 0, 'n must be positive'\n    if n <= 1:\n        return n\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #n=0: 0\n    #n=1: 0\n    #n=2: 0+1\n    #n=3: 0+1+2\n    #n=4: 0+1+2+3\n    #n=5: 0+1+2+3+4\n    #n=6: 0+1+2+3+4+5\n    \n    if n < 0:\n        print(\"n is negative. Returning None.\")\n        return None\n    else:\n        return sum_series_helper(n)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2/4)*tan(pi/l)\n    return round(area, 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    print(s*l/2)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if type(s)!= int or s <= 3:\n        print('\\n')\n        print('The length of the side should be positive and greater than 3.')\n        return -1\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2*(3**0.5))/4*(l-1)\n    return area\n    \ndef area_regular_polygon_iter(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon using the iterative method.\n    '''\n    area = (s**2*(3**0.5))/4*(l-1)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    side = s\n    length = l\n    if length < 3:\n        print(\"Enter length greater than 3\")\n    else:\n        area = (side * length)/2\n        print(\"Area of polygon is: {}\".format(area))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # s ='sides'\n    # l = 'length'\n    area = (s * l**2) / (4 * tan(pi/s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * l ** 2 * s ** 2) / (4 * tan(pi / s))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if not isinstance(s, int) or not isinstance(l, int):\n        return None\n    if l < 3 or s < 3:\n        return None\n    area = s * (l / 2) * ((l / 2) + ((s - 4) * (tan(((s - 4) * pi) / 4)) / 2))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    def area(l,n):\n        '''\n        Function for calculating the area of a regular polygon given the length and number of its sides.\n        '''\n        return ((n*l)/2)*(tan(pi/n))\n    print(area(l,s))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) / 2\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n % 2 == 0: \n        divs = [i for i in range(1, int(n/2) + 1)]\n    else: \n        divs = [i for i in range(1, int(n/2) + 1) if n % i == 0]\n    return sum(divs)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = sum([1 for i in range(1,n) if n%i==0])\n    return n if s==2*n else False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 1: \n        return 1 \n    \n    divisors_sum = 0\n    for i in range(1, int(math.sqrt(n) + 1)): \n        if n % i == 0: \n            if n // i == i: \n                divisors_sum += i \n            else: \n                divisors_sum += i \n                divisors_sum += n // i \n    \n    return divisors_sum \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    tot_1 = 0\n    for i in range(1,n+1): \n        if n%i == 0: \n            tot_1 += i \n    tot_2 = 0 \n    for j in range(1,tot_1+1): \n        if tot_1%j == 0: \n            tot_2 += j \n    if tot_2 == n: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # if n==0:\n    #     return 0\n    # if n==1:\n    #     return 0\n    # elif n==2:\n    #     return 0\n    # elif n==3:\n    #     return 0\n    # elif n==4:\n    #     return 0\n    # else:\n    #     return 2*n -1\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1,int(n**0.5)+1):\n        if n%i == 0:\n            s += i\n            if n//i!= i:\n                s += n//i\n    return s\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum1 = 0 \n    for i in range(1,n): \n        if (n % i == 0): \n            divisor_sum1 += i \n    divisor_sum2 = 0\n    for j in range(1,int(n/2)+1):\n        if (n % j == 0): \n            divisor_sum2 += j \n    return divisor_sum1 == divisor_sum2 \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Initialize sum \n    sum_1 = 0 \n    sum_2 = 0 \n    # Initialize a variable to keep track of divisors \n    divisors = [] \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1=0\n    sum2=0\n    if n==1: \n        return False\n    for i in range(1,n):\n        if n % i == 0:\n            sum1+=i\n    for j in range(1,(int)(math.sqrt(n))+1):\n        if n % j == 0:\n            if j == (int)(math.sqrt(n)):\n                sum2+=j\n            else: \n                sum2+=j\n                sum2+=int(n/j)\n    if sum1==sum2: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            sum += i\n    return sum\n    \n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    lower_str1 = str1.lower()\n    dict = {}\n    for i in range(len(lower_str1)):\n        if lower_str1[i] in dict:\n            dict[lower_str1[i]] += 1\n        else:\n            dict[lower_str1[i]] = 1\n    count = 0\n    for i in range(len(lower_str1)):\n        if i+1 in dict:\n            count += dict[lower_str1[i]]\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1.lower():\n        if i >= 'a' and i <= 'z':\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #use a dictionary, key: char, value: count\n    #{'a': 3, 'd': 1, 'b': 0, 'c': 0, 'f': 0, 'e': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    dic_char = {}\n    str1 = str1.lower()\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if(not isinstance(str1,str)):\n        return None\n    \n    count = 0\n    for i in str1.lower():\n        if(ord(i) in range(97,123)):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    s1 = str1.lower()\n    count = 0\n    for i in range(len(s1)):\n        if(ord(s1[i]) >= 97 and ord(s1[i]) <= 122):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass\n    result = [0,0,0,0,0,0,0,0,0,0]\n    for i in range(len(str1)):\n        if ord('A') <= ord(str1[i]) and ord(str1[i]) <= ord('Z'):\n            result[ord(str1[i]) - ord('A')] = result[ord(str1[i]) - ord('A')] + 1\n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #return len([c for c in str1 if c.lower() in 'abcdefghijklmnopqrstuvwxyz'])\n    count=0\n    for c in str1.lower():\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    alphabet = []\n    for index in range(0, 26):\n        alphabet.append(chr(index + ord('a')))\n    \n    \n    for index in range(0, 26):\n        alphabet[index] = alphabet[index].lower()\n        \n    \n    char_count = 0\n    for char in str1:\n        char = char.lower()\n        if char in alphabet:\n            char_count += 1\n        \n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    counter = 0\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i] == str1[j] and i == j:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if ord(str1[i].lower()) - 96 == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return sum([1 for a in A if a % 2 == 0])\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    sum = 0\n    for i in range(0, len(A)):\n        for j in range(i + 1, len(A)):\n            if(A[i] ^ A[j]) % 2 == 0:\n                sum += 1\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j:\n                if A[i] ^ A[j] % 2 == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if xor(A[i], A[j]) % 2 == 0:\n                even_count += 1\n    return even_count \n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in A:\n        for j in A:\n            if i ^ j == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # initialize an empty list\n    mylist = []\n    # loop through the list and append the value of each pair to the empty list\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            mylist.append(A[i] ^ A[j])\n    # initialize a count variable\n    count = 0\n    # loop through the list\n    for item in mylist:\n        if item % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairCount = 0\n    for i in range(0, len(A) - 1):\n        for j in range(i + 1, len(A)):\n            if((A[i] ^ A[j]) % 2 == 0):\n                pairCount += 1\n    return pairCount\n        \n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # The brute force approach to this problem would be to iterate through every pair, and compute their xor.\n    # This would be O(n^2) time complexity\n    # We can improve the time complexity from O(n^2) to O(n log n) by using a sorting algorithm and \n    # a two pointer technique.\n    # In this approach, we will sort the list in O(n log n) time.\n    # Then, for each pair in the list, we can use a two pointer approach. \n    # At each iteration, we will have two pointers at opposite ends of the list.\n    # The two pointers will move towards each other until the pointers meet.\n    # We can keep track of the xor of the two elements at each step of the loop.\n    # The xor of two elements is simply their bitwise XOR.\n    # We will use this fact to compute the xor of the two pointers and count it if it is even.\n    # If it is even, then we will increment the counter.\n    # We can also stop the two pointers at the same element if the xor is odd.\n    # The two pointers will then become identical.\n    # For example, if we are looking at the list [1, 4, 5, 5, 1, 4]\n    # We can compute the xor of the elements before the two pointers, which are the values at indices 0 and 2, and \n    # the xor of the two elements at the end of the list, which are at indices 3 and 5, which are 5 and 1.\n    # The xor of these two numbers is 6, which is an even number.\n    # We will increment the counter of pairs that have an even xor.\n    # The final counter will be equal to the number of pairs.\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return len([x for x in A if x ^ x % 2 == 0])\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n < 1 else 2 ** (n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #return math.ceil(math.log(n, 2))\n    return 2**(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i = i << 1\n    return i\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2**(n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2**(n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Start with 2, and keep adding 2 until you hit a number that is greater than or equal to n\n    power = 2\n    while power < n:\n        power = power * 2\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    return int(n) if n == 0 else 2**(n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    \n    if n and not (n & (n - 1)): \n        return n \n    \n    n -= 1\n    return 1 << (n).bit_length()\n    \n    \ndef next_power_of_2_iterative(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    while n and not (n & (n - 1)): \n        n -= 1\n    return 1 << (n).bit_length()\n    \n    \ndef next_power_of_2_recursive(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    return 1 if n == 0 else (n - 1) & (n - 1) + 1\n    \n    \ndef next_power_of_2_recursive_1(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    if n and not (n & (n - 1)): \n        return n \n    \n    n = n - 1\n    return 1 << (n & (n - 1)).bit_length()\n    \n    \ndef reverse(n): \n    '''\n    Write a python function to reverse a number.\n    '''\n    \n    return int(str(n)[::-1]) if n else 0\n    \n    \ndef reverse_1(n): \n    '''\n    Write a python function to reverse a number.\n    '''\n    \n    res = 0\n    while n > 0: \n        res = res * 10 + n % 10\n        n //= 10\n    return res\n    \n    \ndef reverse_2(n): \n    '''\n    Write a python function to reverse a number.\n    '''\n    \n    rev = 0\n    while n > 0: \n        rev = rev * 10 + n % 10\n        n //= 10\n    return rev\n    \n    \ndef reverse_3(n): \n    '''\n    Write a python function to reverse a number.\n    '''\n    \n    rev = 0\n    while n: \n        rev = rev * 10 + n % 10\n        n //= 10\n    return rev\n    \n    \ndef is_palindrome(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    \n    return n == reverse(n)\n    \n    \ndef is_palindrome_1(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    \n    return n == reverse_1(n)\n    \n    \ndef is_palindrome_2(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    \n    return n == reverse_2(n)\n    \n    \ndef is_palindrome_3(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    \n    return n == reverse_3(n)\n    \n    \ndef sum_of_digits(n): \n    '''\n    Write a python function to sum of the digits of a number.\n    '''\n    \n    return sum([int(i) for i in str(n)])\n    \n    \ndef sum_of_digits_1(n): \n    '''\n    Write a python function to sum of the digits of a number.\n    '''\n    \n    return sum([int(i) for i in str(n)])\n    \n    \ndef sum_of_digits_2(n): \n    '''\n    Write a python function to sum of the digits of a number.\n    '''\n    \n    return sum([int(i) for i in str(n)])\n    \n    \ndef sum_of_digits_3(n): \n    '''\n    Write a python function to sum of the digits of a number.\n    '''\n    \n    return sum([int(i) for i in str(n)])\n    \n    \ndef sum_of_digits_4(n): \n    '''\n    Write a python function to sum of the digits of a number.\n    '''\n    \n    return sum([int(i) for i in str(n)])\n    \n    \ndef sum_of_digits_5(n): \n    '''\n    Write a python function to sum of the digits of a number.\n    '''\n    \n    return sum([int(i) for i in str(n)])\n    \n    \ndef get_prime_factors(n): \n    '''\n    Write a python function to get all the prime factors of a number.\n    '''\n    \n    return list(filter(lambda x: n % x == 0, range(1, n)))\n    \n    \ndef get_prime_factors_1(n): \n    '''\n    Write a python function to get all the prime factors of a number.\n    '''\n    \n    return list(filter(lambda x: n % x == 0, range(1, n)))\n    \n    \ndef get_prime_factors_2(n): \n    '''\n    Write a python function to get all the prime factors of a number.\n    '''\n    \n    return list(filter(lambda x: n % x == 0, range(1, n)))\n    \n    \ndef get_prime_factors_3(n): \n    '''\n    Write a python function to get all the prime factors of a number.\n    '''\n    \n    return list(filter(lambda x: n % x == 0, range(1, n)))\n    \n    \ndef get_prime_factors_4(n): \n    '''\n    Write a python function to get all the prime factors of a number.\n    '''\n    \n    return list(filter(lambda x: n % x == 0, range(1, n)))\n    \n    \ndef get_prime_factors_5(n): \n    '''\n    Write a python function to get all the prime factors of a number.\n    '''\n    \n    return list(filter(lambda x: n % x == 0, range(1, n)))\n    \n    \ndef is_prime_number(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    \n    return len(get_prime_factors(n)) == 1\n    \n    \ndef is_prime_number_1(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    \n    return len(get_prime_factors_1(n)) == 1\n    \n    \ndef is_prime_number_2(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    \n    return len(get_prime_factors_2(n)) == 1\n    \n    \ndef is_prime_number_3(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    \n    return len(get_prime_factors_3(n)) == 1\n    \n    \ndef is_prime_number_4(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    \n    return len(get_prime_factors_4(n)) == 1\n    \n    \ndef is_prime_number_5(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    \n    return len(get_prime_factors_5(n)) == 1\n    \n    \ndef is_palindrome_number(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    \n    return n == reverse(n)\n    \n    \ndef is_palindrome_number_1(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    \n    return n == reverse(n)\n    \n    \ndef is_palindrome_number_2(n)"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    cnt = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            cnt+=1\n    return cnt\nprint(frequency([1,2,3,1,3,5],1))\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if(a[i] == x):\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count=count+1\n    return count\ndef list_frequency(a): \n    '''\n    Write a function to find out frequency of each item of a list.\n    '''\n    freq=[0]*(max(a)+1)\n    for x in a:\n        freq[x]=freq[x]+1\n    return freq\ndef list_index(a):\n    '''\n    Write a function to find the index of the maximum of a list.\n    '''\n    index=0\n    max_a=max(a)\n    for x in range(len(a)):\n        if a[x]==max_a:\n            index=x\n    return index\ndef list_find_greater(a):\n    '''\n    Write a function to return the index of the first occurrence of a number in a list, that is greater than a given number.\n    '''\n    index=0\n    x=len(a)\n    for i in range(x):\n        if a[i]>a[0]:\n            index=i\n            break\n    return index\ndef list_find_greater2(a,x):\n    '''\n    Write a function to return the index of the first occurrence of a number in a list, that is greater than a given number.\n    '''\n    index=0\n    x=len(a)\n    for i in range(x):\n        if a[i]>x:\n            index=i\n            break\n    return index\ndef list_find_greater_frequency(a):\n    '''\n    Write a function to return the index of the first occurrence of the maximum frequency of a number in a list.\n    '''\n    freq_a=list_frequency(a)\n    max_freq=max(freq_a)\n    index=0\n    for i in range(len(freq_a)):\n        if freq_a[i]==max_freq:\n            index=i\n            break\n    return index\ndef list_find_greater_frequency2(a,x):\n    '''\n    Write a function to return the index of the first occurrence of the maximum frequency of a number in a list.\n    '''\n    freq_a=list_frequency(a)\n    max_freq=max(freq_a)\n    index=0\n    for i in range(len(freq_a)):\n        if freq_a[i]==max_freq and a[i]>x:\n            index=i\n            break\n    return index\ndef list_max(a):\n    '''\n    Write a function to return the maximum of a list.\n    '''\n    max_a=0\n    for x in a:\n        if x>max_a:\n            max_a=x\n    return max_a\ndef list_min(a):\n    '''\n    Write a function to return the minimum of a list.\n    '''\n    min_a=max_a=0\n    for x in a:\n        if x<min_a:\n            min_a=x\n        if x>max_a:\n            max_a=x\n    return min_a\ndef list_index_min(a):\n    '''\n    Write a function to return the index of the minimum of a list.\n    '''\n    min_a=max_a=0\n    for x in range(len(a)):\n        if a[x]<min_a:\n            min_a=a[x]\n        if a[x]>max_a:\n            max_a=a[x]\n    index=0\n    for x in range(len(a)):\n        if a[x]==min_a:\n            index=x\n    return index\ndef list_index_min2(a):\n    '''\n    Write a function to return the index of the minimum of a list.\n    '''\n    min_a=max_a=0\n    for x in range(len(a)):\n        if a[x]<min_a:\n            min_a=a[x]\n        if a[x]>max_a:\n            max_a=a[x]\n    index=0\n    for x in range(len(a)):\n        if a[x]==min_a:\n            index=x\n    return index\ndef list_sum(a):\n    '''\n    Write a function to return the sum of all the numbers in a list.\n    '''\n    sum=0\n    for x in a:\n        sum=sum+x\n    return sum\ndef list_index_sum(a):\n    '''\n    Write a function to return the index of the sum of all the numbers in a list.\n    '''\n    sum=0\n    for x in range(len(a)):\n        sum=sum+a[x]\n    index=0\n    for x in range(len(a)):\n        if sum==a[x]:\n            index=x\n    return index\ndef list_index_sum2(a):\n    '''\n    Write a function to return the index of the sum of all the numbers in a list.\n    '''\n    sum=0\n    for x in range(len(a)):\n        sum=sum+a[x]\n    index=0\n    for x in range(len(a)):\n        if sum==a[x]:\n            index=x\n    return index\ndef list_average(a):\n    '''\n    Write a function to return the average of all the numbers in a list.\n    '''\n    sum=0\n    for x in a:\n        sum=sum+x\n    return sum/len(a)\ndef list_index_average(a):\n    '''\n    Write a function to return the index of the average of all the numbers in a list.\n    '''\n    sum=0\n    for x in range(len(a)):\n        sum=sum+a[x]\n    return sum/len(a)\ndef list_index_average2(a):\n    '''\n    Write a function to return the index of the average of all the numbers in a list.\n    '''\n    sum=0\n    for x in range(len(a)):\n        sum=sum+a[x]\n    return sum/len(a)\ndef list_range(a):\n    '''\n    Write a function to return the difference between the largest and smallest numbers in a list.\n    '''\n    return max(a)-min(a)\ndef list_index_range(a):\n    '''\n    Write a function to return the index of the difference between the largest and smallest numbers in a list.\n    '''\n    return max(a)-min(a)\ndef list_index_range2(a):\n    '''\n    Write a function to return the index of the difference between the largest and smallest numbers in a list.\n    '''\n    return max(a)-min(a)\ndef list_sum_range(a):\n    '''\n    Write a function to return the sum of all the numbers between the largest and smallest numbers in a list.\n    '''\n    sum=0\n    for x in range(len(a)):\n        if a[x]>max(a) or a[x]<min(a):\n            pass\n        else:\n            sum=sum+a[x]\n    return sum\ndef list_index_sum_range(a):\n    '''\n    Write a function to return the index of the sum of all the numbers between the largest and smallest numbers in a list.\n    '''\n    sum=0\n    for x in range(len(a)):\n        if a[x]>max(a) or a[x]<min(a):\n            pass\n        else:\n            sum=sum+a[x]\n    return sum\ndef list_index_sum_range2(a):\n    '''\n    Write a function to return the index of the sum of all the numbers between the largest and smallest numbers in a list.\n    '''\n    sum=0\n    for x in range(len(a)):\n        if a[x]>max(a) or a[x]<min(a):\n            pass\n        else:\n            sum=sum+a[x]\n    return sum\ndef list_length(a):\n    '''\n    Write a function to return the number of numbers in a list.\n    '''\n    retur"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # a = [1, 3, 5, 7, 3, 7, 3, 5, 1, 5, 1, 3, 3, 7, 3]\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0\n    for i in a:\n        if i == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for y in a:\n        if y == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    sum = 0\n    for num in list1[m:n+1]:\n        sum += num\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return 'Invalid input'\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum([i for i in list1[m:n+1]])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_of_range = 0\n    for i in range(m,n):\n        sum_of_range += list1[i]\n    return sum_of_range\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    i = 0\n    for i in range(m, n+1):\n        print(sum(list1[i]))\n    return(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in list1[m:n]:\n        sum_range += i\n    return sum_range\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    i = 0\n    sum = 0\n    while i < len(list1):\n        if list1[i] > m and list1[i] < n:\n            sum += list1[i]\n        i += 1\n    return sum\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p=5*a\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #1.\n    P = 1\n    i = 1\n    while i <= P:\n        P = P + (a*5)\n        i = i + 1\n    #2.\n    return (P)\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (a * 5) + (0.5 * a)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    \ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from its length of a side.\n    '''\n    return (5**0.5)*a**2\n    \ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return 6*a\n    \ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from its length of a side.\n    '''\n    return 3*(3**0.5)*a**2\n    \ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return 7*a\n    \ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from its length of a side.\n    '''\n    return (7/3)*a**2\n    \ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return 8*a\n    \ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from its length of a side.\n    '''\n    return 2*(2**0.5)*a**2\n    \ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    return 9*a\n    \ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from its length of a side.\n    '''\n    return (5/3)*(3**0.5)*a**2\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = (5 * a)\n    return p\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    cnt = 0\n    for i in s:\n        if i == \"std\":\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count = count + 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_set = set()\n    for ele in test_tuple:\n        type_set.add(type(ele))\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return False\n    else:\n        if test_tuple[0] == type(test_tuple[1]):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if all(isinstance(i, type(test_tuple[0])) for i in test_tuple):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        type(test_tuple[0])\n    except Exception:\n        raise ValueError('Test tuple should have data type')\n    for i in test_tuple:\n        if type(i)!= type(test_tuple[0]):\n            raise ValueError('Test tuple should have data type')\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = []\n    for element in test_tuple:\n        test_list.append(type(element))\n    if len(test_list) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    result = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= result:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_tuple = (1, 2, 3.1, \"hello\", [\"list\", \"of\", \"strings\"], [\"strings\", \"inside\", \"a\", \"list\"])\n    result = [type(x) for x in test_tuple]\n    return result\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # driver code\n    tuple_ = tuple(test_tuple)\n    \n    # function to check if all the elements in tuple have same data type or not\n    def is_all_elements_of_same_type(tuple_):\n        '''\n        Check if all the elements in tuple have same data type or not.\n        '''\n        if type(tuple_[0]) == type(tuple_[1]):\n            return 'Elements of tuple are all of same data type'\n        else:\n            return 'Elements of tuple are not of same data type'\n    \n    return is_all_elements_of_same_type(tuple_)\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(test_tuple[0]) == type(x) for x in test_tuple)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    mid = n//2\n    i,j = 0,n-1\n    while(i<j):\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            i = mid+1\n            mid = (i+j)//2\n        else:\n            j = mid-1\n            mid = (i+j)//2\n    if arr[mid] == x:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2]!= x:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1 and arr[0] == x:\n        return True\n    if n == 2:\n        return arr[0] == arr[1]\n    return n%2 == 0 or arr[n//2] == x\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x not in arr:\n        return False\n    else:\n        count = 0\n        for i in arr:\n            if i == x:\n                count += 1\n        if count >= n/2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return (arr[n//2] == x) if (n % 2 == 0) else (arr[n//2] == x or arr[n//2 + 1] == x)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return arr[0] == x\n    elif n == 2:\n        return arr[0] == x or arr[1] == x\n    else:\n        if n%2 == 0:\n            return is_majority(arr[:n//2], n//2, x)\n        else:\n            return is_majority(arr[:n//2+1], n//2+1, x) or is_majority(arr[n//2:], n//2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    if n == 1:\n        return arr[0] == x\n    # elif n == 2:\n    #     return x == arr[0] or x == arr[1]\n    return arr[n//2] == x or arr[n//2 - 1] == x\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[0] == x:\n        return True\n    if arr[n-1] == x:\n        return True\n    if arr[n//2] == x:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return arr[0] == x\n    elif n == 2:\n        return arr[0] == x or arr[1] == x\n    else:\n        mid = n//2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            return is_majority(arr[0:mid], mid, x)\n        elif arr[mid] < x:\n            return is_majority(arr[mid:n], mid, x)\n    return False\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n    \ndef print_fib(n): \n    '''\n    Write a python function to print the Fibonacci Series upto n terms using recursion.\n    '''\n    a = 0\n    b = 1\n    c = 1\n    while (c < n): \n        print(c, end ='')\n        a = b\n        b = c\n        c = a + b \n    print() \n    \ndef print_fib_2(n): \n    '''\n    Write a python function to print the Fibonacci Series upto n terms using loops.\n    '''\n    a = 0\n    b = 1\n    c = 1\n    i = 0\n    while (c < n): \n        if i%2 == 0: \n            print(c, end ='')\n        a = b\n        b = c\n        c = a + b \n        i = i + 1\n    print() \n    \ndef is_palindrome(s): \n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    i = 0\n    j = len(s)-1\n    while (i < j): \n        if s[i]!= s[j]: \n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef is_palindrome_2(s): \n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if s == \"\": \n        return True\n    i = 0\n    j = len(s)-1\n    while (i < j): \n        if s[i] == s[j]: \n            i = i + 1\n            j = j - 1\n        else: \n            return False\n    return True\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Initialize result \n    count = 0\n      \n    # One by one process all bits of 'n' \n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    setBits = 0\n    while (n): \n        setBits += n & 1\n        n >>= 1\n    return setBits \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list = [char for char in str]\n    print(str_list)\n    result = [i for n, i in enumerate(str_list) if n % 2 == 0]\n    print(result)\n    return ''.join(result)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([i for i in str if str.index(i)%2==0])\n    \nprint(odd_values_string(\"Python\"))\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_l = list(str)\n    for i in range(0, len(str_l)):\n        if i % 2 == 0:\n            str_l.pop(i)\n    return ''.join(str_l)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_list = [i for i in str]\n    # l = len(str_list)\n    for i in range(len(str_list)):\n        if i%2!= 0:\n            del str_list[i]\n    print(str_list)\n    return \"\".join(str_list)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lis = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            lis.append(str[i])\n    return \"\".join(lis)\n    \nprint(odd_values_string(\"PythonExercises\"))\nprint(odd_values_string(\"abcd1234efgh\"))\nprint(odd_values_string(\"PythonExercises\"))\nprint(odd_values_string(\"\"))\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result.append(str[i])\n    return \"\".join(result)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str)==0:\n        return str\n    else:\n        return str[0::2]\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n    \n    "
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b: \n        if b < c: \n            return c \n        else: \n            return b \n    else: \n        if a < c: \n            return c \n        else: \n            return a \n    return min \n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            print(b,\"is minimum\")\n        else:\n            print(c,\"is minimum\")\n    else:\n        if a<c:\n            print(a,\"is minimum\")\n        else:\n            print(c,\"is minimum\")\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            print(b)\n        else:\n            print(c)\n    else:\n        if a<c:\n            print(a)\n        else:\n            print(c)\n    \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            print(a)\n        else:\n            print(c)\n    else:\n        if a>c:\n            print(b)\n        else:\n            print(c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            min = a\n    else:\n        if b<c:\n            min = b\n    else:\n        min = c\n    print(min)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        min_number = a\n    elif b < a and b < c:\n        min_number = b\n    else:\n        min_number = c\n    return min_number\ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a > b and a > c:\n        max_number = a\n    elif b > a and b > c:\n        max_number = b\n    else:\n        max_number = c\n    return max_number\ndef odd_even(x):\n    '''\n    Write a function to check if number is odd or even.\n    '''\n    if x%2 == 0:\n        even_or_odd = \"even\"\n    else:\n        even_or_odd = \"odd\"\n    return even_or_odd\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #Start writing your code here\n    #Populate the variables: n_zeros, l_zeros, r_zeros\n    n_zeros = 0\n    l_zeros = 0\n    r_zeros = 0\n    for i in range(0,n+1):\n        if i & (1<<(n-1)) == 0:\n            n_zeros += 1\n    for i in range(0,l+1):\n        if i & (1<<(n-1)) == 0:\n            l_zeros += 1\n    for i in range(0,r+1):\n        if i & (1<<(n-1)) == 0:\n            r_zeros += 1\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the variable\n    result = False\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x = n\n    while(x):\n        if(x & 1):\n            if(x & l) or (x & r):\n                return False\n        x >>= 1\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        for j in range(0,n):\n            if ((1 << j) & i)!= 0:\n                break\n            else:\n                return False\n    return True\n    \ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python program to perform the above operation.\n    '''\n    allOnes = 1 << n-1\n    checker = (r & allOnes) - (l & allOnes)\n    if checker == allOnes:\n        return True\n    return False\n    \ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python program to perform the above operation.\n    '''\n    ans = 1\n    while (ans << 1) < r:\n        ans = ans << 1\n    return ans << 1 <= r and ans >> 1 >= l\n        \ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python program to perform the above operation.\n    '''\n    ans = 1\n    while (ans << 1) < r:\n        ans = ans << 1\n    return ans << 1 <= r and ans >> 1 >= l\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        print(\"{0:b}\".format(n))\n        if(n&(1<<i)>0):\n            return False\n    return True\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n<=r and n>=l:\n        while n>0:\n            if (n&1)==1:\n                return False\n            n=n>>1\n        return True\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (n&(~(2**l-1))&(~(2**r-1)))==0 \n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = int(n)\n    l = int(l)\n    r = int(r)\n    s = (1 << n) - 1\n    mask = ~(~0 << n)\n    return (s & l) | (s & r) | mask\n    \ndef all_Bits_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits in the given range are set or not.\n    '''\n    n = int(n)\n    l = int(l)\n    r = int(r)\n    mask = ~(~0 << n)\n    return (l & mask) | (r & mask)\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    # to get the number of bits in the given range\n    b = set()\n    for i in range(l,r+1):\n        b.add(bin(i))\n    print(b)\n    c = [i for i in b]\n    print(c)\n    print(len(c))\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    m=1\n    for i in range(l,r+1):\n        m=m*(n&(1<<i))\n    if m==n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        s=bin(i)\n        k=0\n        for j in range(2,len(s)):\n            if s[j]=='1':\n                k=k+1\n        if k==n:\n            print(i,'is not set')\n        else:\n            print(i,'is set')\n    \n    \nif __name__=='__main__':\n    n=int(input('Enter the value of n='))\n    l=int(input('Enter the value of l='))\n    r=int(input('Enter the value of r='))\n    all_Bits_Set_In_The_Given_Range(n,l,r)\n    \n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        if arr[low] < 0:\n            low += 1\n        elif arr[high] > 0:\n            high -= 1\n        else:\n            arr[low], arr[high] = arr[high], arr[low]\n            low += 1\n            high -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # if n > len(arr):\n    #     n = len(arr)\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Your code here\n    # Time O(n)\n    # Space O(1)\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    left = 0\n    right = n - 1\n    while left < right:\n        if arr[left] < 0 and arr[right] < 0:\n            left += 1\n        elif arr[left] < 0 and arr[right] >= 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        elif arr[left] >= 0 and arr[right] < 0:\n            right -= 1\n        else:\n            left += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr[j] < 0 and arr[i] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        elif arr[j] < 0:\n            j += 1\n        else:\n            i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # code here\n    low = 0\n    high = n - 1\n    while low <= high:\n        if arr[low] < 0 and arr[high] >= 0:\n            break\n        if arr[low] < 0 and arr[high] < 0:\n            low += 1\n            continue\n        if arr[low] >= 0 and arr[high] >= 0:\n            high -= 1\n            continue\n        if arr[low] >= 0 and arr[high] < 0:\n            arr[low], arr[high] = arr[high], arr[low]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos_start = 0\n    neg_start = 0\n    for i in range(n):\n        if arr[i] > 0:\n            arr[pos_start], arr[i] = arr[i], arr[pos_start]\n            pos_start += 1\n        elif arr[i] < 0:\n            arr[neg_start], arr[i] = arr[i], arr[neg_start]\n            neg_start += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        if arr[low] < 0 and arr[high] >= 0:\n            break\n        low += 1\n        high -= 1\n    if low > high:\n        return arr\n    while low <= high:\n        if arr[low] < 0 and arr[high] < 0:\n            arr[low], arr[high] = arr[high], arr[low]\n        elif arr[low] < 0 and arr[high] >= 0:\n            arr[low], arr[high] = arr[high], arr[low]\n            break\n        low += 1\n        high -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = n - 1\n    while i < n and j >= 0:\n        if arr[i] < 0:\n            i += 1\n        elif arr[j] > 0:\n            j -= 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr.append(arr.pop(i))\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str=str1.replace(\" \",\"\")\n    return new_str\nprint(replace_blank(\"This is a test\",'#'))\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"{}\")\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = str1.replace(\" \",\"\")\n    return result\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%\")\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"{}\".format(char))\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(len(str1)):\n        if str1[i]==\" \":\n            str1=str1[:i]+char+str1[i+1:]\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in str1:\n        if i == \" \":\n            str1 = str1.replace(i,char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str(str1)\n    str1 = str1.replace(' ','%')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=list1[0:n]\n    heapq.heapify(heap)\n    for i in range(n,len(list1)):\n        if list1[i]>heap[0]:\n            heapq.heapreplace(heap,list1[i])\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return(list1[-n:])\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest_n = heapq.nlargest(n,list1)\n    print(largest_n)\n    \ndef main():\n    list1 = [1,4,2,3,6,7,9,8,9,1,0,2,3,5,6,8,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,9,0,1,2,3,5,6,7,8,"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = []\n    for i in range(n):\n        list2.append(list1.pop(list1.index(max(list1))))\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap=[]\n    for i in range(n):\n        if list1:\n            heapq.heappush(max_heap,list1[i])\n    return max_heap\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    n_largest= heapq.nlargest(n,list1)\n    return n_largest\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    '''\n    INPUT: list1 = [1,2,3,4,5,6],n = 2\n    OUTPUT: [6,5]\n    '''\n    heapq.heapify(list1)\n    return [heapq.heappop(list1) for x in range(n)]\n    \n    \n    \ndef rearrange_digits(input_list):\n    '''\n    Rearrange Array Elements so as to form two number such that their sum is maximum.\n    '''\n    if len(input_list) == 0:\n        return []\n    if len(input_list) == 1:\n        return input_list\n    \n    sorted_list = sorted(input_list,reverse=True)\n    \n    num1_list = []\n    num2_list = []\n    \n    for i in range(len(sorted_list)//2):\n        num1_list.append(str(sorted_list[i]))\n    for i in range(len(sorted_list)//2,len(sorted_list)):\n        num2_list.append(str(sorted_list[i]))\n        \n    num1 = int(''.join(num1_list))\n    num2 = int(''.join(num2_list))\n    \n    return [num1,num2]\n    \n    \ndef print_big(letter):\n    '''\n    Given a string of words, print the word with the most letters\n    '''\n    if len(letter) == 0:\n        return \"\"\n    word_dict = {}\n    \n    for word in letter:\n        if word not in word_dict:\n            word_dict[word] = 1\n        else:\n            word_dict[word] += 1\n            \n    max_len = 0\n    max_word = \"\"\n    for key in word_dict.keys():\n        if word_dict[key] > max_len:\n            max_len = word_dict[key]\n            max_word = key\n        elif word_dict[key] == max_len:\n            max_word = max_word + \" \"+key\n        \n    return max_word\n    \n    \ndef make_change(amount,coins):\n    '''\n    You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n    '''\n    '''\n    INPUT: coins = [1,2,5], amount = 11\n    OUTPUT: 3\n    '''\n    if amount == 0:\n        return 0\n    if amount < 0:\n        return -1\n    if len(coins) == 0:\n        return -1\n    \n    dp_table = [float(\"inf\") for x in range(amount+1)]\n    dp_table[0] = 0\n    \n    for coin in coins:\n        for i in range(coin,amount+1):\n            dp_table[i] = min(dp_table[i],dp_table[i-coin] + 1)\n            \n    return dp_table[amount] if dp_table[amount]!= float(\"inf\") else -1\n    \n    \ndef single_number(nums):\n    '''\n    You have a singly linked list of integers. Write a function that returns the first number in the list that appears exactly once.\n    '''\n    '''\n    INPUT: nums = [2,2,1,5,1,3]\n    OUTPUT: 5\n    '''\n    hash_table = {}\n    for num in nums:\n        if num not in hash_table:\n            hash_table[num] = 1\n        else:\n            hash_table[num] += 1\n    for key,value in hash_table.items():\n        if value == 1:\n            return key\n            \n    \ndef find_outlier(integers):\n    '''\n    Given an array of integers, find the odd intiger that is not present in the array. The array can contain duplicate entries.\n    '''\n    '''\n    INPUT: integers = [2,3,1,3,1,6,6]\n    OUTPUT: 3\n    '''\n    hash_table = {}\n    for num in integers:\n        if num not in hash_table:\n            hash_table[num] = 1\n        else:\n            hash_table[num] += 1\n    for key,value in hash_table.items():\n        if value == 1:\n            return key\n    \n    \ndef missing_number(nums):\n    '''\n    Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\n    '''\n    '''\n    INPUT: nums = [0,1,3]\n    OUTPUT: 2\n    '''\n    '''\n    INPUT: nums = [0,1,2]\n    OUTPUT: 3\n    '''\n    '''\n    INPUT: nums = [0]\n    OUTPUT: 1\n    '''\n    hash_table = {}\n    for num in nums:\n        if num not in hash_table:\n            hash_table[num] = 1\n        else:\n            hash_table[num] += 1\n            \n    for i in range(len(nums)):\n        if hash_table[i] == 0:\n            return i\n            \n    \ndef top_3_words(text):\n    '''\n    Given a string of text, return the top 3 most frequent words.\n    '''\n    '''\n    INPUT: text = \"i want to sleep\"\n    OUTPUT: [i,i,to,sleep]\n    '''\n    '''\n    INPUT: text = \"i want to sleep\"\n    OUTPUT: [i,to,sleep]\n    '''\n    '''\n    INPUT: text = \"i want to sleep\"\n    OUTPUT: [i,sleep,want]\n    '''\n    if text == None or text == \"\":\n        return []\n        \n    word_list = text.split()\n    word_count = {}\n    for word in word_list:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n    #print(word_count)\n    \n    word_count_list = []\n    for key,value in word_count.items():\n        word_count_list.append((value,key))\n        \n    heapq.heapify(word_count_list)\n    top_3 = []\n    for i in range(3):\n        top_3.append(heapq.heappop(word_count_list)[1])\n        \n    return top_3\n    \n    \ndef reverse_vowels(str1):\n    '''\n    Write a function that takes a string as input and reverse only the vowels of a string.\n    '''\n    '''\n    INPUT: str1 = \"hello\"\n    OUTPUT: \"holle\"\n    '''\n    '''\n    INPUT: str1 = \"leetcode\"\n    OUTPUT: \"leotcede\"\n    '''\n    '''\n    INPUT: str1 = \"aA\"\n    OUTPUT: \"aA\"\n    '''\n    '''\n    INPUT: str1 = \"aB\"\n    OUTPUT: \"Ba\"\n    '''\n    if str1 == None:\n        return \"\"\n    \n    vowels = ['a','e','i','o','u']\n    \n    str2 = list(str1)\n    l,r = 0,len(str2)-1\n    while l < r:\n        if str2[l] not in vowels:\n            l += 1\n        elif str2[r] not in vowels:\n            r -= 1\n        else:\n            str2[l],str2[r] = str2[r],str2[l]\n            l += 1\n            r -= 1\n    return \"\".join(str2)\n    \n    \ndef find_the_distance(word1,word2):\n    '''\n    You are given two words word1 and word2 and two integers d and "
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)\ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = list1[:n]\n    heapq.heapify(list2)\n    for i in range(n,len(list1)):\n        if list1[i] > list2[0]:\n            heapq.heappop(list2)\n            heapq.heappush(list2, list1[i])\n    return list2\ndef larg_nnum3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = []\n    for i in range(n):\n        list2.append(list1[i])\n    heapq.heapify(list2)\n    for i in range(n,len(list1)):\n        if list1[i] > list2[0]:\n            heapq.heappop(list2)\n            heapq.heappush(list2, list1[i])\n    return list2\ndef larg_nnum4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = list1[:n]\n    heapq.heapify(list2)\n    for i in range(n,len(list1)):\n        if list1[i] > list2[0]:\n            heapq.heappop(list2)\n            heapq.heappush(list2, list1[i])\n    return list2\n    \n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    for j in range(n,len(list1)):\n        if heap[0] < list1[j]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,list1[j])\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surfacearea = ((2*r*pi*h) + (2*(r**2)*pi))\n    return surfacearea\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r**2 + 2*pi*r*h\n    \ndef lateralsurface_rectangle(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    return 2*l*w\n    \ndef lateralsurface_parallelogram(b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram.\n    '''\n    return 2*b*h\n    \ndef lateralsurface_trapezium(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezium.\n    '''\n    return (a+b)*h/2\n    \ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle.\n    '''\n    return pi*r**2\n    \ndef lateralsurface_semicircle(r,h):\n    '''\n    Write a function to find the lateral surface area of a semicircle.\n    '''\n    return pi*r**2 - 2*pi*r*h\n    \ndef lateralsurface_ellipse(b,h):\n    '''\n    Write a function to find the lateral surface area of an ellipse.\n    '''\n    return pi*b*h\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*r*(r+h)\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r**2 + 2*pi*r*h\n    \ndef lateralsurface_rectangle(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    return 2*l*w\n    \ndef lateralsurface_parallelogram(b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram.\n    '''\n    return 2*b*h\n    \ndef lateralsurface_trapezium(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezium.\n    '''\n    return (a+b)*h/2\n    \ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle.\n    '''\n    return pi*r**2\n    \ndef lateralsurface_semicircle(r,h):\n    '''\n    Write a function to find the lateral surface area of a semicircle.\n    '''\n    return pi*r**2 - 2*pi*r*h\n    \ndef lateralsurface_ellipse(b,h):\n    '''\n    Write a function to find the lateral surface area of an ellipse.\n    '''\n    return pi*b*h\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*r*(r+h)\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r**2 + 2*pi*r*h\n    \ndef lateralsurface_rectangle(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    return 2*l*w\n    \ndef lateralsurface_parallelogram(b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram.\n    '''\n    return 2*b*h\n    \ndef lateralsurface_trapezium(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezium.\n    '''\n    return (a+b)*h/2\n    \ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle.\n    '''\n    return pi*r**2\n    \ndef lateralsurface_semicircle(r,h):\n    '''\n    Write a function to find the lateral surface area of a semicircle.\n    '''\n    return pi*r**2 - 2*pi*r*h\n    \ndef lateralsurface_ellipse(b,h):\n    '''\n    Write a function to find the lateral surface area of an ellipse.\n    '''\n    return pi*b*h\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*r*(r+h)\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r**2 + 2*pi*r*h\n    \ndef lateralsurface_rectangle(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    return 2*l*w\n    \ndef lateralsurface_parallelogram(b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram.\n    '''\n    return 2*b*h\n    \ndef lateralsurface_trapezium(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezium.\n    '''\n    return (a+b)*h/2\n    \ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle.\n    '''\n    return pi*r**2\n    \ndef lateralsurface_semicircle(r,h):\n    '''\n    Write a function to find the lateral surface area of a semicircle.\n    '''\n    return pi*r**2 - 2*pi*r*h\n    \ndef lateralsurface_ellipse(b,h):\n    '''\n    Write a function to find the lateral surface area of an ellipse.\n    '''\n    return pi*b*h\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*r*(r+h)\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r**2 + 2*pi*r*h\n    \ndef lateralsurface_rectangle(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    return 2*l*w\n    \ndef lateralsurface_parallelogram(b,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram.\n    '''\n    return 2*b*h\n    \ndef lateralsurface_trapezium(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezium.\n    '''\n    return (a+b)*h/2\n    \ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle.\n    '''\n    return pi*r**2\n    \ndef lateralsurface_semicircle(r,h):\n    '''\n    Write a function to find the lateral surface area of a semicircle.\n    '''\n    return pi*r**2 - 2*pi*r*h\n    \ndef lateralsurface_ellipse(b,h):\n    '''\n    Write a function to find the lateral surface area of an ellipse.\n    '''\n    return pi*b*h\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*r*(r+h)\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r**2 + 2*pi*r*h\n    \ndef lateralsurface_rectangle(l,w):\n    '''\n    Write a function to find th"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r*r + 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*np.pi*r*h) + (2*np.pi*r**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    pi=math.pi\n    result = pi*r*r*h\n    print(result)\n    return result\n    \nlateralsuface_cylinder(10,5)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    def surface_area(r, h):\n        return (pi * r**2) * h\n    return surface_area(r,h)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * pi * r * h\ndef LateralSurfaceAreaOfAHelix(r,h,n):\n    '''\n    Write a function to find the lateral surface area of a helix.\n    '''\n    return 2 * pi * n * (r + (n - 1) * h)\ndef SurfaceAreaOfAHelix(r,h,n):\n    '''\n    Write a function to find the surface area of a helix.\n    '''\n    return 2 * pi * n * r + 2 * pi * r * (n - 1) * h\ndef LateralSurfaceAreaOfAConvexPolyhedron(r,s):\n    '''\n    Write a function to find the lateral surface area of a convex polyhedron.\n    '''\n    return 4 * r * (s - 1)\ndef SurfaceAreaOfAConvexPolyhedron(r,s):\n    '''\n    Write a function to find the surface area of a convex polyhedron.\n    '''\n    return 2 * pi * r * (s - 1) + 2 * pi * r * s\ndef LateralSurfaceAreaOfAQuadruped(b,h):\n    '''\n    Write a function to find the lateral surface area of a quadruped.\n    '''\n    return 2 * (b * h)\ndef SurfaceAreaOfAQuadruped(b,h):\n    '''\n    Write a function to find the surface area of a quadruped.\n    '''\n    return 2 * (b * h) + 4 * b * (b + h)\ndef LateralSurfaceAreaOfAnOctahedron(r):\n    '''\n    Write a function to find the lateral surface area of an octahedron.\n    '''\n    return 4 * r * sqrt(2)\ndef SurfaceAreaOfAnOctahedron(r):\n    '''\n    Write a function to find the surface area of an octahedron.\n    '''\n    return 4 * r * sqrt(2) + 4 * r * sqrt(2)\ndef LateralSurfaceAreaOfASphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4 * pi * r * (r + r)\ndef SurfaceAreaOfASphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * pi * r * (r + r) + 4 * pi * r * r\ndef LateralSurfaceAreaOfASquare(s):\n    '''\n    Write a function to find the lateral surface area of a square.\n    '''\n    return 2 * (s + (s - 1))\ndef SurfaceAreaOfASquare(s):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    return 4 * (s + (s - 1))\ndef LateralSurfaceAreaOfATrapezoid(b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid.\n    '''\n    return 2 * b * (h + (b + h))\ndef SurfaceAreaOfATrapezoid(b,h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return 4 * (b + h) * (b + h) + 4 * b * h\ndef LateralSurfaceAreaOfATriangle(r):\n    '''\n    Write a function to find the lateral surface area of a triangle.\n    '''\n    return 3 * sqrt(3) / 2 * r * r\ndef SurfaceAreaOfATriangle(r):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return 3 * sqrt(3) / 2 * r * r + 3 * sqrt(3) / 2 * r\ndef LateralSurfaceAreaOfASurfaceTrapezoid(b,h):\n    '''\n    Write a function to find the lateral surface area of a surface trapezoid.\n    '''\n    return 2 * b * (h + b)\ndef SurfaceAreaOfASurfaceTrapezoid(b,h):\n    '''\n    Write a function to find the surface area of a surface trapezoid.\n    '''\n    return 4 * (b + h) * (b + h) + 2 * b * h\ndef LateralSurfaceAreaOfASurfaceSquare(s):\n    '''\n    Write a function to find the lateral surface area of a surface square.\n    '''\n    return 2 * s * (s + 1)\ndef SurfaceAreaOfASurfaceSquare(s):\n    '''\n    Write a function to find the surface area of a surface square.\n    '''\n    return 4 * (s + 1) * (s + 1)\ndef LateralSurfaceAreaOfATriangle(r):\n    '''\n    Write a function to find the lateral surface area of a triangle.\n    '''\n    return 3 * sqrt(3) / 2 * r * r\ndef SurfaceAreaOfATriangle(r):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return 3 * sqrt(3) / 2 * r * r + 3 * sqrt(3) / 2 * r\ndef LateralSurfaceAreaOfATrapezoid(b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid.\n    '''\n    return 2 * b * (h + (b + h))\ndef SurfaceAreaOfATrapezoid(b,h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return 4 * (b + h) * (b + h) + 4 * b * h\ndef LateralSurfaceAreaOfAStar(r):\n    '''\n    Write a function to find the lateral surface area of a star.\n    '''\n    return 4 * r * (r + 1)\ndef SurfaceAreaOfAStar(r):\n    '''\n    Write a function to find the surface area of a star.\n    '''\n    return 4 * r * (r + 1) + 4 * r\ndef LateralSurfaceAreaOfAThumb(r):\n    '''\n    Write a function to find the lateral surface area of a thumb.\n    '''\n    return 4 * r * (r + 1)\ndef SurfaceAreaOfAThumb(r):\n    '''\n    Write a function to find the surface area of a thumb.\n    '''\n    return 4 * r * (r + 1) + 4 * r\ndef LateralSurfaceAreaOfATree(r):\n    '''\n    Write a function to find the lateral surface area of a tree.\n    '''\n    return 2 * r * (2 * r + 1)\ndef SurfaceAreaOfATree(r):\n    '''\n    Write a function to find the surface area of a tree.\n    '''\n    return 4 * r * (2 * r + 1) + 4 * r\ndef LateralSurfaceAreaOfATriangle(r):\n    '''\n    Write a function to find the lateral surface area of a triangle.\n    '''\n    return 3 * sqrt(3) / 2 * r * r\ndef SurfaceAreaOfATriangle(r):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return 3 * sqrt(3) / 2 * r * r + 3 * sqrt(3) / 2 * r\ndef LateralSurfaceAreaOfABox(s):\n    '''\n    Write a function to find the lateral surface area of a box.\n    '''\n    return 4 * s * s\ndef SurfaceAreaOfABox(s):\n    '''\n    Write a function to find the surface area of a box.\n    '''\n    return 2 * s * s + 4 * s\ndef LateralSurfaceAreaOfACube(r):\n    '''\n    Write a function to find the lateral surface area of a cube.\n    '''\n    return 8 * r * r\ndef SurfaceAreaOfACube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * r * r + 8 * r\ndef LateralSurfaceAreaOfABreadth(r):\n    '''\n    Write a function to find the lateral surface area of a breadth.\n    '''\n    return 4 * r * (r + 1)\ndef SurfaceAreaOfABreadt"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # r= radius, h=height\n    # Area = 2 * pi * r + 2 * pi * r * h \n    # Lateral Surface Area = 2 * pi * r * (h+r)\n    # Lateral Surface Area = 2 * pi * r * h + 2 * pi * r**2\n    \n    Area = 2 * math.pi * r + 2 * math.pi * r * h\n    print('Area of a cylinder is', Area)\n    Lateral_surface_area = 2 * math.pi * r * (h+r)\n    print('Lateral Surface Area of a cylinder is', Lateral_surface_area)\n    return Lateral_surface_area\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l, 3)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    print('The volume of the cube is: ', volume)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l * l * l\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n>>1)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n&0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n>>1)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return int(''.join([str(1 & (n >> i) == 0) for i in range(n.bit_length())]), 2)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = int(n) \n    n = bin(n).lstrip(\"0b\")\n    n = n.split('b')[0]\n    n = n.zfill(4)\n    # print(n)\n    n = list(n)\n    print(n)\n    for i in range(len(n)):\n        if i%2==0:\n            n[i] = '1'\n    n = ''.join(n)\n    n = int(n,2)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return {key:val for key,val in Counter(test_list).items()}\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = []\n    for i in test_list:\n        unique_tuples.append(i[0])\n    unique_tuples = set(unique_tuples)\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    check = Counter(test_list)\n    return check\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for element in test_list:\n        if element not in occurences:\n            occurences[element] = 1\n        else:\n            occurences[element] += 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = dict(Counter(test_list))\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    check_occurences_list = Counter(test_list)\n    return check_occurences_list\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dict to hold the tuple as key and the number of times as the value\n    unique_tuples = {}\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique = Counter(test_list)\n    return unique\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    counts = dict()\n    \n    for item in test_list:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substr = str[i:j]\n            if len(substr)!= 0 and len(substr) == len(set(substr)):\n                count += 1\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    i = 0\n    j = n-1\n    while i < j:\n        if str[i] == str[j]:\n            count += 1\n            i += 1\n            j -= 1\n        else:\n            break\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(get_non_empty_substrings(str))\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)+1):\n            s = str[i:j]\n            if len(s)>0:\n                count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    count = 0\n    substring = str[0]\n    # start from 1 to make sure we don't get an empty string \n    for i in range(1,length):\n        if str[i] == str[i-1]:\n            substring = substring + str[i]\n            count += 1\n        else:\n            # string = substring\n            substring = str[i]\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    l = len(str)\n    count = 0\n    for i in range(l):\n        if str[i]!=' ':\n            for j in range(i, l):\n                if str[j]!=' ':\n                    count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if(len(str) == 1):\n        return 1\n    elif(len(str) == 2):\n        if(str[0]!= str[1]):\n            return 2\n        else:\n            return 1\n    else:\n        count = 0\n        for i in range(len(str)):\n            if(str[i]!= str[i+1]):\n                count += 1\n        return count + 1\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str) \n    return (n + 1)*(n + 2)*(n - 2)*(n - 1)//6\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize variables\n    count = 0\n    # loop through each substring of the string\n    for i in range(len(str)):\n        # check for a substring\n        for j in range(i, len(str)):\n            # check for a non-empty substring\n            if str[i:j+1]!= '':\n                # increment the number of substrings\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if len(str[i:j+1]) > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # sum of the the first n numbers \n    sum = n \n    # initialize a list \n    list = [] \n    # loop the number of times\n    for i in range(0,m): \n        # if n is greater than 0 and less than or equal to sum \n        if n>=0 and n<=sum: \n            # append the number to list \n            list.append(n)\n            # decrement the sum by n \n            sum = sum - n\n        # decrement n by 1 \n        n = n-1 \n    return len(list) \n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 0 or n < 0:\n        return 'Enter positive integers for m and n.'\n    if m < n:\n        return'm must be greater than or equal to n.'\n    if m < 0:\n        return'm cannot be negative.'\n    if n < 0:\n        return 'n cannot be negative.'\n    import math\n    #return number of sequences\n    return math.comb(m + n - 2, n - 1)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def fun(m,n): \n        if n<1: \n            return 0\n        if n==1: \n            return m\n        if m<1: \n            return 0\n        if m==1: \n            return 1\n        return fun(m-1,n-1)+fun(m,n-1)\n    return fun(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def num_sequences(m,n):\n        #if n == 1:\n        #    return 1\n        #if n == 2:\n        #    return 2\n        #if n == 3:\n        #    return 4\n        #elif n == 4:\n        #    return 9\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 4\n        elif n == 4:\n            return 9\n        else:\n            return num_sequences(m,n-1) + num_sequences(m,n-2) + num_sequences(m,n-3) + num_sequences(m,n-4)\n    return num_sequences(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    seq = []\n    for i in range(2,m+1):\n        seq.append(i)\n    result = []\n    if n == 1:\n        return seq\n    else:\n        for i in range(len(seq)):\n            if seq[i] <= m:\n                for j in range(seq[i], m+1):\n                    if j not in seq:\n                        seq.append(j)\n                result.append(seq)\n                seq = seq[:i]\n        return result\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n < 2:\n        return 0\n    elif n == 2:\n        return m\n    elif n > 2:\n        return m * m\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_solution_sums(m,n):\n        solution_sums = []\n        for i in range(n):\n            if i == 0:\n                solution_sums.append(1)\n            else:\n                solution_sums.append(sum(solution_sums))\n        return solution_sums\n    \n    solution_sums = get_solution_sums(m,n)\n    total_num_solutions = sum(solution_sums)\n    return total_num_solutions\n    \n    \ndef get_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds all possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_solution_sums(m,n):\n        solution_sums = []\n        for i in range(n):\n            if i == 0:\n                solution_sums.append([i+1])\n            else:\n                new_solution_sums = []\n                for j in solution_sums:\n                    new_solution_sums.append(j + [i+1])\n                solution_sums = new_solution_sums\n        return solution_sums\n    \n    solution_sums = get_solution_sums(m,n)\n    return solution_sums\n    \n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_solution_sums(m,n):\n        solution_sums = []\n        for i in range(n):\n            if i == 0:\n                solution_sums.append(1)\n            else:\n                solution_sums.append(sum(solution_sums))\n        return solution_sums\n    \n    solution_sums = get_solution_sums(m,n)\n    total_num_solutions = sum(solution_sums)\n    return total_num_solutions\n    \n    \ndef get_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds all possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_solution_sums(m,n):\n        solution_sums = []\n        for i in range(n):\n            if i == 0:\n                solution_sums.append([i+1])\n            else:\n                new_solution_sums = []\n                for j in solution_sums:\n                    new_solution_sums.append(j + [i+1])\n                solution_sums = new_solution_sums\n        return solution_sums\n    \n    solution_sums = get_solution_sums(m,n)\n    return solution_sums\n    \n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_solution_sums(m,n):\n        solution_sums = []\n        for i in range(n):\n            if i == 0:\n                solution_sums.append(1)\n            else:\n                solution_sums.append(sum(solution_sums))\n        return solution_sums\n    \n    solution_sums = get_solution_sums(m,n)\n    total_num_solutions = sum(solution_sums)\n    return total_num_solutions\n    \n    \ndef get_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds all possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_solution_sums(m,n):\n        solution_sums = []\n        for i in range(n):\n            if i == 0:\n                solution_sums.append([i+1])\n            else:\n                new_solution_sums = []\n                for j in solution_sums:\n                    new_solution_sums.append(j + [i+1])\n                solution_sums = new_solution_sums\n        return solution_sums\n    \n    solution_sums = get_solution_sums(m,n)\n    return solution_sums\n    \n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_solution_sums(m,n):\n        solution_sums = []\n        for i in range(n):\n            if i == 0:\n                solution_sums.append(1)\n            else:\n                solution_sums.append(sum(solution_sums))\n        return solution_sums\n    \n    solution_sums = get_solution_sums(m,n)\n    total_num_solutions = sum(solution_sums)\n    return total_num_solutions\n    \n    \ndef get_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds all possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_solution_sums(m,n):\n        solution_sums = []\n        for i in range(n):\n            if i == 0:\n                solution_sums.append([i+1])\n            else:\n                new_solution_sums = []\n                for j in solution_sums:\n                    new_solution_sums.append(j + [i+1])\n                solution_sums = new_solution_sums\n        return solution_sums\n    \n    solution_sums = get_solution_sums(m,n)\n    return solution_sums\n    \n    \ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_solution_sums(m,n):\n        solution_sums = []\n        for i in range(n):\n            if i == 0:\n                solution_sums.append(1)\n            else:\n                solution_sums.append(sum(solution_sums))\n        return solution_sums\n    \n    solution_sums = get_solution_sums(m,n)\n    total_num_solutions = sum(solution_sums)\n    return total_num_solutions\n    \n    \ndef get_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds all possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_solution_sums(m,n):\n        solution_sums = []\n        for i in range(n):\n            if i == 0:\n                solution_sum"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return (fact(m)//(fact(2*n) * fact(n)))\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if m<n:\n        return 0\n    \n    if n==1:\n        return 1\n    \n    return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m-2,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    '''\n    m = 15, n = 2\n    Output: 8\n    Explanation: Valid sequences are: (2, 4), (2, 3, 5), (2, 5, 6), (2, 6, 7), (2, 7, 8), (2, 8, 9), (2, 9, 10), (2, 10, 11), (2, 11, 12), (2, 12, 13), (2, 13, 14), (3, 4, 5), (3, 5, 6), (3, 6, 7), (3, 7, 8), (3, 8, 9), (3, 9, 10), (3, 10, 11), (3, 11, 12), (3, 12, 13), (3, 13, 14)\n    '''\n    total_number_of_sequences = 0\n    total_number_of_sequences += get_total_number_of_sequences_helper(m,n,1)\n    total_number_of_sequences += get_total_number_of_sequences_helper(m,n,2)\n    print(\"Total number of sequences:\", total_number_of_sequences)\n    return total_number_of_sequences\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1:len(list1)] = list2[0:len(list2)]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    for item in list2:\n        list1.append(item)\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # if list1.length > list2.length:\n    #     raise Exception(\"Oops! List 1 should not have more elements than list 2.\")\n    # else:\n    list1[len(list1)-1:] = list2[:len(list1)-1]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[0:0] = list2[0:0]\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for i in str1:\n        char_count += 1\n    return char_count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    #print(len(str1))\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count+=1\n    print(count)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for i in str1:\n        count=count+1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str_len = 0\n    for i in str1:\n        str_len += 1\n    return str_len\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if int(root + 1) ** 2 == N:\n        return N\n    return int(root + 1) ** 2\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # if N is even then next perfect square must be odd \n    if N % 2 == 0: \n        return 2*(N//2) + 1\n    else: \n        return (N//2) + 1\ndef next_Perfect_Square_1(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # for better understanding, look at the algorithm on the whiteboard.\n    # first step: find the largest k such that 2^k is less than or equal to N\n    # second step: find the smallest n such that 2^k + 1 is less than or equal to N\n    # third step: return 2^k + 1\n    return 2**math.ceil(math.log(N,2)) \n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Get the perfect square value of N \n    SqrtN = int(math.sqrt(N)) \n    if (math.sqrt(N) - SqrtN) == 0: \n        return (SqrtN + 1) * (SqrtN + 1) \n    else: \n        return -1\n  "
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    temp = math.ceil(math.sqrt(N)) \n    temp = temp + 1\n    return pow(temp, 2) \n  "
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # if N is even, then next odd number is N + 1\n    if N % 2 == 0:\n        return N + 1\n    # if N is odd, then next even number is N + 2\n    else:\n        return N + 2\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        print(\"Negative numbers don't have perfect square:\")\n        return -1\n    else:\n        # If N is a perfect square\n        if N == int(math.sqrt(N)):\n            return math.sqrt(N)\n        # If N is not a perfect square\n        else:\n            return int(math.sqrt(N)) + 1\n            \nprint(next_Perfect_Square(100)) \nprint(next_Perfect_Square(-7))\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Return the next perfect square if N is a perfect square.\n    if math.sqrt(N) - math.floor(math.sqrt(N)) == 0: \n        return (math.floor(math.sqrt(N)) + 1)**2\n    # If N is not a perfect square, we return the the next perfect square after N.\n    x = math.ceil(math.sqrt(N)) \n    while True: \n        if (x + 1)**2 <= N: \n            return (x + 1)**2\n        x += 1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = math.sqrt(N)\n    if x == int(x):\n        return (x + 1) ** 2\n    else:\n        return -1\n        \ndef next_Perfect_Square_v2(n):\n    #returns the next number to be a perfect square. \n    #We do not use the built in math library. \n    #'n' is an input. \n    n = n + 1\n    while math.sqrt(n)%1!=0:\n        n += 1\n    return (n)\ndef is_Perfect_Square(n):\n    #returns whether a given number is a perfect square or not. \n    #We do not use the built in math library. \n    n = n ** 0.5\n    if n == int(n):\n        return True\n    return False\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # global minimum_number\n    if N < 0:\n        return -1\n    if N == 0:\n        return 1\n    if N == 1:\n        return 2\n    if N == 2:\n        return 3\n    if N == 3:\n        return 4\n    if N == 4:\n        return 7\n    if N == 5:\n        return 10\n    if N == 6:\n        return 13\n    if N == 7:\n        return 16\n    if N == 8:\n        return 19\n    if N == 9:\n        return 28\n    if N == 10:\n        return 31\n    if N == 11:\n        return 34\n    if N == 12:\n        return 37\n    if N == 13:\n        return 40\n    if N == 14:\n        return 43\n    if N == 15:\n        return 46\n    if N == 16:\n        return 49\n    if N == 17:\n        return 52\n    if N == 18:\n        return 55\n    if N == 19:\n        return 58\n    if N == 20:\n        return 61\n    if N == 21:\n        return 64\n    if N == 22:\n        return 67\n    if N == 23:\n        return 70\n    if N == 24:\n        return 73\n    if N == 25:\n        return 76\n    if N == 26:\n        return 79\n    if N == 27:\n        return 82\n    if N == 28:\n        return 85\n    if N == 29:\n        return 88\n    if N == 30:\n        return 91\n    if N == 31:\n        return 94\n    if N == 32:\n        return 97\n    if N == 33:\n        return 100\n    if N == 34:\n        return 103\n    if N == 35:\n        return 106\n    if N == 36:\n        return 109\n    if N == 37:\n        return 112\n    if N == 38:\n        return 115\n    if N == 39:\n        return 118\n    if N == 40:\n        return 121\n    if N == 41:\n        return 124\n    if N == 42:\n        return 127\n    if N == 43:\n        return 130\n    if N == 44:\n        return 133\n    if N == 45:\n        return 136\n    if N == 46:\n        return 139\n    if N == 47:\n        return 142\n    if N == 48:\n        return 145\n    if N == 49:\n        return 148\n    if N == 50:\n        return 151\n    if N == 51:\n        return 154\n    if N == 52:\n        return 157\n    if N == 53:\n        return 160\n    if N == 54:\n        return 163\n    if N == 55:\n        return 166\n    if N == 56:\n        return 169\n    if N == 57:\n        return 172\n    if N == 58:\n        return 175\n    if N == 59:\n        return 178\n    if N == 60:\n        return 181\n    if N == 61:\n        return 184\n    if N == 62:\n        return 187\n    if N == 63:\n        return 190\n    if N == 64:\n        return 193\n    if N == 65:\n        return 196\n    if N == 66:\n        return 199\n    if N == 67:\n        return 202\n    if N == 68:\n        return 205\n    if N == 69:\n        return 208\n    if N == 70:\n        return 211\n    if N == 71:\n        return 214\n    if N == 72:\n        return 217\n    if N == 73:\n        return 220\n    if N == 74:\n        return 223\n    if N == 75:\n        return 226\n    if N == 76:\n        return 229\n    if N == 77:\n        return 232\n    if N == 78:\n        return 235\n    if N == 79:\n        return 238\n    if N == 80:\n        return 241\n    if N == 81:\n        return 244\n    if N == 82:\n        return 247\n    if N == 83:\n        return 250\n    if N == 84:\n        return 253\n    if N == 85:\n        return 256\n    if N == 86:\n        return 259\n    if N == 87:\n        return 262\n    if N == 88:\n        return 265\n    if N == 89:\n        return 268\n    if N == 90:\n        return 271\n    if N == 91:\n        return 274\n    if N == 92:\n        return 277\n    if N == 93:\n        return 280\n    if N == 94:\n        return 283\n    if N == 95:\n        return 286\n    if N == 96:\n        return 289\n    if N == 97:\n        return 292\n    if N == 98:\n        return 295\n    if N == 99:\n        return 298\n    if N == 100:\n        return 301\n    if N == 101:\n        return 304\n    if N == 102:\n        return 307\n    if N == 103:\n        return 310\n    if N == 104:\n        return 313\n    if N == 105:\n        return 316\n    if N == 106:\n        return 319\n    if N == 107:\n        return 322\n    if N == 108:\n        return 325\n    if N == 109:\n        return 328\n    if N == 110:\n        return 331\n    if N == 111:\n        return 334\n    if N == 112:\n        return 337\n    if N == 113:\n        return 340\n    if N == 114:\n        return 343\n    if N == 115:\n        return 346\n    if N == 116:\n        return 349\n    if N == 117:\n        return 352\n    if N == 118:\n        return 355\n    if N == 119:\n        return 358\n    if N == 120:\n        return 361\n    if N == 121:\n        return 364\n    if N == 122:\n        return 367\n    if N == 123:\n        return 370\n    if N == 124:\n        return 373\n    if N == 125:\n        return 376\n    if N == 126:\n        return 379\n    if N == 127:\n        return 382\n    if N == 128:\n        return 385\n    if N == 129:\n        return 388\n    if N == 130:\n        return 391\n    if N == 131:\n        return 394\n    if N == 132:\n        return 397\n    if N == 133:\n        return 400\n    if N == 134:\n        return 403\n    if N == 135:\n        return 406\n    if N == 136:\n        return 409\n    if N == 137:\n        return 412\n    if N == 138:\n        return 415\n    if N == 139:\n        return 418\n    if N == 140:\n        return 421\n    if N == 141:\n        return 424\n    if N == 142:\n        return 427\n    if N == 143:\n        return 430\n    if N == 144:\n        return 433\n    if N == 145:\n        return 436\n    if N == 146:\n        return 439\n    if N == 147:\n        return 442\n    if N == 148:\n        return 445\n    if N == 149:\n        return 448\n    if N == 150:\n        return 451\n    if N == 151:\n        return 454\n    if N == 152:\n        return 457\n    if N == 153:\n        return 460\n    if N == 154:\n        return 463\n    if N == 155:\n        return 466\n    if N == 156:\n        return 469\n    if N == 157:\n        return 472\n    if N == 158:\n        return 475\n    if N == 159:\n        return 478\n    if N == 160:\n        return 481\n    if N == 161:\n        return 484\n    if N == 162:\n        return 487\n    if N == 163:\n        return 490\n    if N == 164:\n        return 493\n    if N == 165:\n        return 496\n    if N == 166:\n        return 499\n    if N == 167:\n        return 502\n    if N == 168:\n        return 505\n    if N == 169:\n        return 508\n    if N == 170:\n        return 511\n    if N == 171:\n        return 514\n    if N == 172:\n        return 517\n    if N == 173:\n        return 520\n    if N == 174:\n        return 523\n    if N == 175:\n        return 526\n    if N == 176:\n        return 529\n    if N == 177:\n        return 532\n    if N == 178"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = int(math.sqrt(N)) \n    while True: \n        i += 1\n        if i*i <= N: \n            continue\n        return i*i \ndef next_Fibonacci_Number(N): \n    '''\n    Write a Python function to find the Nth Fibonacci number.\n    '''\n    F0 = 0 \n    F1 = 1\n    if (N < 0): \n        print(\"Incorrect input\") \n    elif (N == 0): \n        return 0\n    elif (N == 1 or N == 2): \n        return 1\n    else: \n        for i in range(2, N): \n            F0 = F1 \n            F1 = F0 + F1 \n        return F1 \ndef Prime_Numbers_Sum(N): \n    '''\n    Write a Python function to calculate the sum of all prime numbers which are less than or equal to a given number.\n    '''\n    sum = 0\n    for i in range(1, N + 1): \n        flag = 1\n        if (i == 1 or i == 2): \n            sum += i \n        elif(i % 2 == 0): \n            flag = 0\n        for j in range(3, int(math.sqrt(i)) + 1, 2): \n            if(i % j == 0): \n                flag = 0\n        if (flag == 1): \n            sum += i \n    return sum \ndef reverse_Integer(N): \n    '''\n    Write a Python function to print the reversed of an integer. \n    '''\n    rem = 0\n    result = 0\n    while N > 0: \n        rem = int(N % 10) \n        result = result * 10 + rem \n        N = int(N / 10) \n    return result \ndef find_Frequent_Elements(N, A): \n    '''\n    Write a Python function to print the array elements that appear more than n // 3 times.\n    '''\n    sum = 0\n    count = 0\n    for i in range(len(A)): \n        if sum == 0: \n            sum = A[i] \n            count += 1\n        elif sum == A[i]: \n            count += 1\n        else: \n            sum = A[i] \n            count = 1\n        if count > N // 3: \n            print(A[i], end=\" \")\ndef find_Median_in_Unsorted_Array(A): \n    '''\n    Write a Python function to print the median of the array (sorted array).\n    '''\n    A.sort() \n    length = len(A) \n    if length % 2 == 0: \n        return (A[(length - 1) // 2] + A[(length) // 2]) / 2\n    else: \n        return A[(length - 1) // 2] \ndef find_Median_of_Sorted_Arrays(A, B): \n    '''\n    Write a Python function to find the median of the two sorted arrays.\n    '''\n    l = len(A) + len(B) \n    if l % 2 == 0: \n        return (find_Median_of_Sorted_Arrays(A, B) + find_Median_of_Sorted_Arrays(A, B)) / 2\n    elif len(A) == 0: \n        return find_Median_of_Sorted_Arrays(B) \n    elif len(B) == 0: \n        return find_Median_of_Sorted_Arrays(A) \n    m = max(A[0], B[0]) \n    i = 0\n    j = 0\n    c = 0\n    while (c < m): \n        if A[i] < B[j]: \n            i += 1\n            c += 1\n        else: \n            j += 1\n            c += 1\n    if i == len(A): \n        return B[j] \n    elif j == len(B): \n        return A[i] \ndef find_Duplicates(A): \n    '''\n    Write a Python function to print duplicate elements in a sorted array.\n    '''\n    for i in range(len(A)): \n        for j in range(i + 1, len(A)): \n            if A[j] == A[i]: \n                print(A[j], end=\" \")\ndef find_Frequent_Elements_2(N, A): \n    '''\n    Write a Python function to print the array elements that appear more than n // 3 times.\n    '''\n    sum = 0\n    count = 0\n    for i in range(len(A)): \n        if sum == 0: \n            sum = A[i] \n            count += 1\n        elif sum == A[i]: \n            count += 1\n        else: \n            sum = A[i] \n            count = 1\n        if count > N // 3: \n            print(A[i], end=\" \")\ndef find_Number_of_Triplets(A, B, C): \n    '''\n    Write a Python function to find the number of triplets (a, b, c) such that a, b and c are numbers in the array A, B, and C respectively and a + b + c = 0. \n    '''\n    result = 0\n    for i in range(0, len(A)): \n        j = 0\n        while j < len(B): \n            if ((A[i] + B[j] == -C[i] * C[j])): \n                result += 1\n            j += 1\n    return result \ndef find_Number_of_Triplets_2(A, B, C): \n    '''\n    Write a Python function to find the number of triplets (a, b, c) such that a, b and c are numbers in the array A, B, and C respectively and a + b + c = 0. \n    '''\n    result = 0\n    sorted_C = sorted(C)\n    for i in range(len(A)): \n        j = 0\n        while j < len(B): \n            k = 0\n            while k < len(sorted_C): \n                if (sorted_C[k] + B[j] == -A[i] * sorted_C[k]): \n                    result += 1\n                k += 1\n            j += 1\n    return result \ndef find_Number_of_Triplets_3(A, B, C): \n    '''\n    Write a Python function to find the number of triplets (a, b, c) such that a, b and c are numbers in the array A, B, and C respectively and a + b + c = 0. \n    '''\n    result = 0\n    sorted_C = sorted(C)\n    for i in range(len(A)): \n        j = 0\n        while j < len(B): \n            if (A[i] + B[j] in sorted_C): \n                result += 1\n            j += 1\n    return result \ndef find_Number_of_Triplets_4(A, B, C): \n    '''\n    Write a Python function to find the number of triplets (a, b, c) such that a, b and c are numbers in the array A, B, and C respectively and a + b + c = 0. \n    '''\n    result = 0\n    sorted_C = sorted(C)\n    i = 0\n    while i < len(A): \n        j = 0\n        while j < len(B): \n            if (A[i] + B[j] in sorted_C): \n                result += 1\n            j += 1\n        i += 1\n    return result \ndef find_Number_of_Triplets_5(A, B, C): \n    '''\n    Write a Python function to find the number of triplets (a, b, c) such that a, b and c are numbers in the array A, B, and C respectively and a + b + c = 0. \n    '''\n    result = 0\n    sorted_C = sorted(C)\n    i = 0\n    while i < len(A): \n        if (A[i] + B[0] in sorted_C): \n            result +"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_util(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max(sum(arr[i:j]) for i in range(len(arr)) for j in range(i+2, len(arr)+1)) \n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    i, j = 0, len(arr)-1\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr = [5,4,1,2,3]\n    # [5,4,1,2,3]\n    # [4,1,2,3]\n    # [1,2,3]\n    # [2,3]\n    # [3]\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr)-1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr.sort()\n    return sum(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_brute(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr) \n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n - 2, -1, -1):\n        if arr[i] < arr[i + 1]:\n            inc[i] = inc[i + 1] + arr[i + 1]\n        else:\n            inc[i] = arr[i + 1]\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            dec[i] = dec[i - 1] + arr[i - 1]\n        else:\n            dec[i] = arr[i - 1]\n    # print(inc)\n    # print(dec)\n    m = 0\n    for i in range(n):\n        m = max(m, inc[i] + dec[i])\n    return m\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    #  A single pass of this problem is trivial.  We will simply find the\n    #  maximum sum of a bitonic subsequence by looking at all increasing\n    #  and then all decreasing subsequences.  We will then simply compare\n    #  the sums of the two types of subsequences.\n    #\n    #  To achieve this, we will store the running sum of all of the elements\n    #  in the array and update it by adding the current element.  If we\n    #  encountered a larger element, then we reset the sum to only include\n    #  the elements between those two values.\n    #\n    #  The algorithm can be broken down into four parts:\n    #\n    #  - First, we will construct a running sum for the entire array.\n    #  - Next, we will iterate through the array and for each element, we\n    #    will check if the current element is greater than the previous\n    #    element.  If so, we will set the current element as the starting\n    #    element for our new subsequence.  After we have looked at the\n    #    current element, we will reset the sum to reflect only the\n    #    elements between the starting and ending point.\n    #  - Lastly, we will check the sum of the increasing subsequence\n    #    against the sum of the decreasing subsequence.  If the two sums\n    #    are equal, then we have found a bitonic sequence.\n    #\n    #  For example, if the input array was [10, 12, 8, 12, 15, 7], then\n    #  our algorithm would iterate through the array:\n    #\n    #  -  First, we add the current element to the sum.  Since we're\n    #     looking at the first element, we do not need to set an end point\n    #     for the increasing subsequence.\n    #\n    #  -  Then, we check if the current element is greater than the previous\n    #     element.  If so, we reset the sum to only contain the elements\n    #     between the starting point (0, in this example) and the current\n    #     element.\n    #\n    #  -  Then, we set the current element as the starting point for\n    #     our new sequence.\n    #\n    #  -  Finally, we check the sum of the increasing subsequence.  Since\n    #     the sum was reset to only include the elements between the new\n    #     starting point (10, in this example) and the current element, we\n    #     need to add the current element to the sum.\n    #\n    #  -  Finally, we check the sum of the decreasing subsequence.  Since\n    #     we already had a reset of the sum, we do not need to reset it\n    #     again.\n    #\n    #  -  And we know that if the sums are equal, then we have found a\n    #     bitonic sequence.  If so, we will return the sum of the entire\n    #     array since that is the maximum sum.\n    #\n    #  -  If the sums are not equal, then we will compare the increasing\n    #     sum with the decreasing sum.  If the increasing sum is larger than\n    #     the decreasing sum, then we have found our maximum sum.  Otherwise\n    #     we will compare the decreasing sum with the increasing sum.  If the\n    #     decreasing sum is larger than the increasing sum, then we have\n    #     found our maximum sum.\n    #\n    #  If the sums are equal, then we have found the maximum sum.  In this\n    #  case, we will return the sum of the entire array since that is the\n    #  maximum sum.\n    #\n    #  Finally, we return the largest sum we have found.\n    \n    #  STEP 1: Setup the variables we will be using.\n    running_sum = arr[0]\n    max_sum = arr[0]\n    \n    #  STEP 2: Iterate through the input array and build up the\n    #  running sum and then compare it to the max_sum.\n    #\n    #  If the current element is greater than the previous element, then\n    #  we will reset the running sum to reflect only the elements between\n    #  the starting point and the current element.\n    #\n    #  Then, we will set the current element as the new starting point.\n    #\n    #  Lastly, we will check if the current running sum is greater than\n    #  the current max sum.  If it is, then we will update the max sum.\n    for index in range(1, len(arr)):\n        if arr[index] >= arr[index - 1]:\n            running_sum = running_sum + arr[index]\n            if running_sum > max_sum:\n                max_sum = running_sum\n        else:\n            running_sum = arr[index]\n            \n    #  STEP 3: Iterate through the input array again and build the\n    #  decreasing running sum and then compare it to the max_sum.\n    #\n    #  If the current element is greater than the previous element, then\n    #  we will reset the running sum to reflect only the elements between\n    #  the starting point and the current element.\n    #\n    #  Then, we will set the current element as the new starting point.\n    #\n    #  Lastly, we will check if the current running sum is greater than\n    #  the current max sum.  If it is, then we will update the max sum.\n    for index in range(len(arr) - 2, -1, -1):\n        if arr[index] >= arr[index + 1]:\n            running_sum = running_sum + arr[index]\n            if running_sum > max_sum:\n                max_sum = running_sum\n        else:\n            running_sum = arr[index]\n            \n    #  STEP 4: If the sums are equal, then we have found a bitonic\n    #  sequence.  Otherwise, we will compare the increasing sum with the\n    #  decreasing sum.  If the increasing sum is greater than the\n    #  decreasing sum, then we have found our maximum sum.  Otherwise we\n    #  will compare the decreasing sum with the increasing sum.  If the\n    #  decreasing sum is greater than the increasing sum, then we have\n    #  found our maximum sum.\n    if max_sum == running_sum:\n        return max_sum\n    elif max_sum > running_sum:\n        return max_sum\n    else:\n        return max_sum + running_sum\n        \nif __name__ == '__main__':\n    print(max_sum([10, 12, 8, 12, 15, 7]))\n    print(max_sum([10, 20, 30, 40, 50, 60, 70, 80, 90]))\n    print(max_sum([10, 20, 30, 40, 50, 50, 60, 70, 80, 90]))\n    print(max_sum([10, 20, 30, 40, 50, 40, 60, 70, 80, 90]))\n    print(max_sum([10, 20, 30, 40, 50, 40, 60, 70, 80, 90, 110]))\n    print(max_sum([10, 20, 30, 40, 50, 40, 60, 70, 80, 90, 100]))\n    print(max_sum([10, 20, 30, 40, 50, 40, 60, 70, 80, 90, 110, 110]))\n    print(max_sum([10, 20, 30, 40, 50, 40, 60, 70, 80, 90, 110, 1000]))\n    print(max_sum([1000, 20, 30, 40, 50, 40, 60, 70, 80, 90, 110, 1000]))\n    print(max_sum([10, 20, 30, 40, 50, 40, 60, 70, 80, 90, 110, 10000]))\n    print(max_sum([10, 20, 30, 40, 50, 40, 60, 70, 80, 90, 110, 10000, 11010]))\n    print(max_sum([10, 20, 30, 40, 50, 40, 60, 70, 80, 90, 110, 10000, 12010]))\n    print(max_sum([10, 20, 30, 40, 50, 40, 60, 70, 80, 90, 110, 10000, 15010]))\n    print(max_sum([10, 20, 30, 40, 50, 40, 60, 70, 80, 90, 110, 10000, 15010, 16010]))\n    print(max_su"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_recursive(arr,0,len(arr)-1)\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.01\n    estimate = 1.0\n    while True:\n        estimate = (estimate + number/ estimate) /2\n        difference = abs(number - estimate ** 2)\n        if difference <= epsilon:\n            break\n    return estimate\n    \ndef test_squareroot_babylonian():\n    number = 1\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 2\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 3\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 4\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 5\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 6\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 7\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 8\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 9\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 10\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 11\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 12\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 13\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 14\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 15\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 16\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 17\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 18\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 19\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 20\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 21\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 22\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 23\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 24\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 25\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 26\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 27\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 28\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 29\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 30\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 31\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 32\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 33\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 34\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 35\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 36\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 37\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 38\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 39\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 40\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 41\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 42\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 43\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 44\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 45\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 46\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 47\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 48\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 49\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 50\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 51\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 52\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 53\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 54\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 55\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 56\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 57\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 58\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 59\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 60\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 61\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 62\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 63\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 64\n    assert (babylonian_squareroot(number) - math.sqrt(number)) <.01\n    number = 65\n    assert (babylonian"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approximate_guess = 1\n    while True:\n        better_guess = (approximate_guess + number / approximate_guess) / 2\n        if better_guess == approximate_guess:\n            return better_guess\n        approximate_guess = better_guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x=number\n    epsilon=0.01\n    guess=x/2.0\n    numGuesses=0\n    while abs(guess*guess-x)>=epsilon:\n        numGuesses+=1\n        guess=guess-(guess*guess-x)/(2*guess)\n    return guess,numGuesses\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    last_guess = 1\n    guess = (last_guess + number/last_guess)/2\n    while abs(guess**2 - number) >= 0.000001:\n        last_guess = guess\n        guess = (last_guess + number/last_guess)/2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number/2\n    while True:\n        better = (approx + number/approx)/2\n        if better == approx:\n            return better\n        approx = better\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1.\n    y = number\n    while y > 0:\n        x = 0.5 * (x + y / x)\n        y = 0.5 * (x + y / x)\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def babylonian_method(number):\n        guess = 1\n        while True:\n            guess_next = guess + ((number / guess) / 2)\n            if guess_next == guess:\n                break\n            guess = guess_next\n        return guess\n    return babylonian_method(number)\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    result = number #we want to find sqrt(number)\n    while True:\n        result = 0.5 * (result + number/result)\n        yield result\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    guess = x / 2\n    while abs(x - guess**2) > 0.00001:\n        guess = (guess + x / guess)/2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    epsilon = 0.0001\n    while guess * guess!= number and guess + epsilon > 1:\n        guess = (guess + number/guess)/2\n    return guess\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n+1)] for x in range(n+1)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n    return L[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    lps = [[0 for x in range(n)] for x in range(n)] \n    \n    # Fill the table in bottom-up manner \n    for i in range(n): \n        lps[i][i] = 1 # One character is always a palindrome \n    for start in range(n-1, -1, -1): \n        for end in range(start+1, n): \n            # The end character matches with the start character \n            if str[start] == str[end]: \n                lps[start][end] = lps[start+1][end-1]+2\n            else: \n                lps[start][end] = max(lps[start][end-1], lps[start+1][end]) \n    \n    return lps[0][n-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    lps = [0]*n\n    \n    # Preprocess the pattern (calculate lps[] array) \n    i = 0\n    j = 0\n    lps[0] = 0\n    i = 1\n    while i < n: \n        if str[i] == str[j]: \n            j += 1\n            lps[i] = j\n            i += 1\n        else: \n            if j!= 0: \n                j = lps[j-1] \n            else: \n                lps[i] = 0\n                i += 1\n    \n    # print (lps)\n    return lps\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    m = [[0 for i in range(n)] for j in range(n)]\n    maxLength = 1\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    #Create a table to store results of subproblems. One extra \n    #row and column are used, in the event that we need to \n    #store a result that is greater than the length of the string.\n    T = [[0 for x in range(n + 1)] for y in range(n + 1)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)]for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n    return L[0][n-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    T = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n):\n        T[i][i] = 1 # Single Character is a palindrome of length 1\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if str[i] == str[j] and cl == 2:\n                T[i][j] = 2\n            elif str[i] == str[j]:\n                T[i][j] = T[i+1][j-1] + 2\n            else:\n                T[i][j] = max(T[i][j-1], T[i+1][j])\n    return T[0][n-1]\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return(1/n+1/n+1/n+1/n+1/n+1/n+1/n+1/n+1/n+1/n+1/n+1/n+1/n+1/n+1/n+1/n+1/n+1/n+1/n)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    total = 0\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1.0 / i\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + sum(1/i for i in range(1, n))\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    #initialize sum to 0\n    sum = 0\n    #loop over the numbers 1 to n\n    for num in range(1, n+1):\n        #calculate the harmonic number of each number\n        harmonic = 1/num\n        #add the harmonic number to the sum\n        sum += harmonic\n    #return the sum\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/sum([1/i for i in range(1,n)])\n    \n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n-1)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    def is_unique(a):\n        if len(a) == len(set(a)):\n            return True\n        else:\n            return False\n    unique_set = []\n    for i in array_nums1:\n        if i in array_nums2:\n            if is_unique(unique_set):\n                unique_set.append(i)\n            else:\n                continue\n    return unique_set\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = set(array_nums1)\n    array_nums2 = set(array_nums2)\n    # print(array_nums1, array_nums2)\n    intersection_nums = array_nums1.intersection(array_nums2)\n    return list(intersection_nums)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in array_nums1:\n        if i in array_nums2 and i not in intersection:\n            intersection.append(i)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i=0\n    j=0\n    new_list=[]\n    while(i<len(array_nums1) and j<len(array_nums2)):\n        if(array_nums1[i]==array_nums2[j]):\n            new_list.append(array_nums1[i])\n            i=i+1\n            j=j+1\n        elif(array_nums1[i]>array_nums2[j]):\n            j=j+1\n        else:\n            i=i+1\n    return new_list\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Sort the arrays\n    array_nums1 = sorted(array_nums1)\n    array_nums2 = sorted(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set from array_nums1\n    set_nums1 = set(array_nums1)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Approach 1 \n    # Use a hash table to store elements from array1 and get their hash table keys and values to store elements from array2\n    # O(n) time | O(n) space\n    hash_table1 = {}\n    for num1 in array_nums1:\n        if num1 in hash_table1:\n            hash_table1[num1] += 1\n        else:\n            hash_table1[num1] = 1\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set2.intersection(set1))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array_nums = list(set(array_nums1) & set(array_nums2))\n    return intersection_array_nums\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    hashtable = {}\n    for num in array_nums1:\n        hashtable[num] = 1\n    for num in array_nums2:\n        if num in hashtable:\n            return num\n    return False\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count=0\n    for i in tup:\n        if i==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for ele in tup:\n        if ele == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = tup.count(x)\n    return c\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0 \n    for i in tup: \n        if i == x: \n            counter += 1 \n    return counter \n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if (tup[i] == x):\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return [element]\n    elif element in list:\n        return [element] + list\n    else:\n        return list[:list.index(list[0])] + [element] + list[list.index(list[0]):]\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for index in range(len(list)):\n        list.insert(index,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return [element]\n    else:\n        return [list[0]] + [element] + list[1:]\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(0,len(list)):\n        new_list.append(list[i])\n        new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    index=0\n    for elem in list:\n        list.insert(index,element)\n        index+=1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    output = []\n    for i in range(len(list)):\n        output.append(element)\n        output.append(list[i])\n    return output\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for index, element in enumerate(list):\n        if element == element:\n            list.insert(index,element)\n    return list\nprint(insert_element([1,2,4],3))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(complex(numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(\"\\nConvert complex number to polar\")\n    n = int(input('Enter the number of complex numbers to be converted: '))\n    for i in range(0,n):\n        print(i+1,\": \",end=\"\")\n        real,imag = input().split()\n        r = int(real)\n        i = int(imag)\n        z = complex(r,i)\n        print(z,\"(\",cmath.polar(z)[0],\", \",cmath.polar(z)[1],\")\")\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real = numbers.real\n    imaginary = numbers.imag\n    polar_coordinates = complex(real,imaginary)\n    return (polar_coordinates)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(\"convert(numbers):\")\n    \n    result=[]\n    for i in range(len(numbers)):\n        result.append((cmath.polar(numbers[i])))\n        #result.append((numbers[i].conjugate().real,numbers[i].conjugate().imag))\n    \n    print(result)\n    \n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    #converting the complex numbers to polar\n    \n    def complex_to_polar(complex_number):\n        z = complex(complex_number)\n        z = complex(complex_number)\n        z_real = z.real\n        z_imag = z.imag\n        r = (z_real**2 + z_imag**2)**(1/2)\n        theta = cmath.phase(z)\n        \n        # converting the theta values to real values\n        if(theta < 0):\n            theta = 360 + (theta*(180/cmath.pi))\n        return (r,theta)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = numbers.real\n    y = numbers.imag\n    r = (x**2 + y**2)**(1/2)\n    a = cmath.phase(numbers)\n    return r,a\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers = complex(numbers)\n    polar_numbers = cmath.polar(numbers)\n    return polar_numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    # complex_numbers = [1 + 2j, 3 + 5j, 5 - 2j, 3 + 2j]\n    # Expected output:\n    # [1.58, 2.93, -0.17, 2.51]\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #return cmath.polar(complex(numbers))\n    return complex(numbers).polar()\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates=[]\n    for i in numbers:\n        r=i.real\n        i=i.imag\n        r=str(r)\n        i=str(i)\n        polar_coordinates.append(r+\"+\"+i+\"j\")\n    print(*polar_coordinates,sep=\"\\n\")\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i, int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n    \n    \ndef sum_of_integer(list1):\n    '''\n    Write a python function that returns the sum of the integer elements in a given list.\n    '''\n    return sum(list1)\n    \n    \ndef avg_of_integer(list1):\n    '''\n    Write a python function that returns the average of the integer elements in a given list.\n    '''\n    return sum(list1) / len(list1)\n    \n    \ndef check_integer_in_list(list1):\n    '''\n    Write a python function that checks if there are any integer elements in a given list.\n    '''\n    for i in list1:\n        if type(i) is int:\n            return True\n            break\n        else:\n            return False\n            \n            \ndef max_of_integer(list1):\n    '''\n    Write a python function that returns the maximum value of the integer elements in a given list.\n    '''\n    return max(list1)\n    \n    \ndef min_of_integer(list1):\n    '''\n    Write a python function that returns the minimum value of the integer elements in a given list.\n    '''\n    return min(list1)\n    \n    \ndef find_occurence_of_element(list1, item):\n    '''\n    Write a python function that returns the number of times an element occurs in a given list.\n    '''\n    return list1.count(item)\n    \n    \ndef remove_occurence_of_element(list1, item):\n    '''\n    Write a python function that removes all occurences of a given element in a given list.\n    '''\n    while item in list1:\n        list1.remove(item)\n    \n    \ndef remove_element_from_list(list1, item):\n    '''\n    Write a python function that removes an element from a given list.\n    '''\n    list1.remove(item)\n    \n    \ndef check_in_list(list1, item):\n    '''\n    Write a python function that checks if an element is present in a given list.\n    '''\n    if item in list1:\n        return True\n    else:\n        return False\n    \n    \ndef check_is_present_in_list(list1, list2):\n    '''\n    Write a python function that checks if all elements of a given list is present in another given list.\n    '''\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n    \n    \ndef reverse_list(list1):\n    '''\n    Write a python function that reverses a given list.\n    '''\n    list1.reverse()\n    \n    \ndef concat_two_lists(list1, list2):\n    '''\n    Write a python function that concatenates two given lists.\n    '''\n    list3 = list1 + list2\n    \n    \ndef sort_list(list1):\n    '''\n    Write a python function that sorts a given list in ascending order.\n    '''\n    list1.sort()\n    \n    \ndef list_of_factors(list1):\n    '''\n    Write a python function that returns a list of all the factors of all the elements of a given list.\n    '''\n    return [i for i in range(1, len(list1)+1) if len([j for j in range(1, i+1) if i % j == 0]) == len(list1)]\n    \n    \ndef remove_duplicate_from_list(list1):\n    '''\n    Write a python function that removes duplicate elements from a given list.\n    '''\n    return list(dict.fromkeys(list1))\n    \n    \ndef find_intersection_of_two_list(list1, list2):\n    '''\n    Write a python function that returns the intersection of two given lists.\n    '''\n    return list(set(list1).intersection(set(list2)))\n    \n    \ndef remove_element_from_list_by_index(list1, index):\n    '''\n    Write a python function that removes an element from a given list by index.\n    '''\n    del list1[index]\n    \n    \ndef remove_element_from_list_by_value(list1, item):\n    '''\n    Write a python function that removes an element from a given list by value.\n    '''\n    list1.remove(item)\n    \n    \ndef check_if_sublist_present(list1, list2):\n    '''\n    Write a python function that checks if a given list is a sublist of a given list.\n    '''\n    return set(list2) <= set(list1)\n    \n    \ndef find_missing_number_in_list(list1):\n    '''\n    Write a python function that returns the missing number in a given list.\n    '''\n    x = (list1[0] + list1[1] + list1[2]) / 2\n    for i in list1:\n        if x!= i:\n            return x\n            \n            \ndef insert_integer_into_list(list1, item):\n    '''\n    Write a python function that inserts an integer into a given list at a given index.\n    '''\n    list1.insert(3, item)\n    \n    \ndef check_if_list_is_sorted_ascendingly(list1):\n    '''\n    Write a python function that checks if a given list is sorted in ascending order.\n    '''\n    return list1 == sorted(list1)\n    \n    \ndef check_if_list_is_sorted_descendingly(list1):\n    '''\n    Write a python function that checks if a given list is sorted in descending order.\n    '''\n    return list1 == sorted(list1, reverse=True)\n    \n    \ndef find_second_largest_number(list1):\n    '''\n    Write a python function that returns the second largest number of a given list.\n    '''\n    return max(set(list1))\n    \n    \ndef find_second_smallest_number(list1):\n    '''\n    Write a python function that returns the second smallest number of a given list.\n    '''\n    return min(set(list1))\n    \n    \ndef min_max_in_list(list1):\n    '''\n    Write a python function that returns the min and max of a given list.\n    '''\n    return (min(list1), max(list1))\n    \n    \ndef sum_of_list(list1):\n    '''\n    Write a python function that returns the sum of all elements of a given list.\n    '''\n    return sum(list1)\n    \n    \ndef sort_list_by_list_size(list1):\n    '''\n    Write a python function that sorts a given list in ascending order by the size of each element.\n    '''\n    return sorted(list1, key=len)\n    \n    \ndef list_of_characters(list1):\n    '''\n    Write a python function that returns a list of all the characters in a given list.\n    '''\n    return sorted(list(set(list1)))\n    \n    \ndef find_sub_list(list1, list2):\n    '''\n    Write a python function that checks if a given list is a sublist of a given list.\n    '''\n    return set(list2) <= set(list1)\n    \n    \ndef remove_duplicates_from_list(list1):\n    '''\n    Write a python function that removes duplicates from a given list.\n    '''\n    return list(set(list1))\n    \n    \ndef remove_sub_list(list1, list2):\n    '''\n    Write a python function that removes all the elements of a given list that are present in a given sublist.\n    '''\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n            \n            \ndef remove_element_from_list_by_index_and_return(list1, index):\n    '''\n    Write a python function that removes an element from a given list by index and returns the element.\n    '''\n    element = list1[index]\n    del list1[index"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if isinstance(i, int):\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], int):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i,int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i == int(i):\n            count += 1\n    return count\nlist1 = [1,2,3,4,5,6]\nprint(\"The number of integers in the list: \", count_integer(list1))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    #count = 0\n    #for element in list1:\n    #    if isinstance(element, int):\n    #        count += 1\n    #return count\n    return len([element for element in list1 if isinstance(element, int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count=count+1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l,n) \n    print(list(comb))\n    return (list(comb))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        raise Exception('Needs to have at least as many elements as the length of the list')\n    if n == 0:\n        return [()]\n    if n == 1:\n        return [tuple(l)]\n    if n > 1:\n        if n == len(l):\n            return [tuple(l)]\n        else:\n            return [(l[0],) + x for x in combinations_colors(l[1:], n-1)] + combinations_colors(l[1:], n)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in combinations_with_replacement(l, n):\n        print(i)\n    \ncombinations_colors(['a', 'b', 'c', 'd'], 3)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(0, len(l)):\n        for j in range(0, len(l)):\n            for k in range(0, len(l)):\n                if len(set([l[i], l[j], l[k]])) == n:\n                    combos.append((l[i], l[j], l[k]))\n    return combos\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # l = [1,2,3,4,5]\n    # n = 2\n    # [((1,1),(2,2)), ((1,1),(3,3)), ((1,1),(4,4)), ((1,1),(5,5)), ((1,2),(2,2)), ((1,2),(3,3)), ((1,2),(4,4)), ((1,2),(5,5)), ((1,3),(2,3)), ((1,3),(3,3)), ((1,3),(4,4)), ((1,3),(5,5)), ((1,4),(2,4)), ((1,4),(3,4)), ((1,4),(4,4)), ((1,4),(5,5)), ((1,5),(2,5)), ((1,5),(3,5)), ((1,5),(4,5)), ((1,5),(5,5)), ((2,1),(2,2)), ((2,1),(3,3)), ((2,1),(4,4)), ((2,1),(5,5)), ((2,2),(2,2)), ((2,2),(3,3)), ((2,2),(4,4)), ((2,2),(5,5)), ((2,3),(2,3)), ((2,3),(3,3)), ((2,3),(4,4)), ((2,3),(5,5)), ((2,4),(2,4)), ((2,4),(3,3)), ((2,4),(4,4)), ((2,4),(5,5)), ((2,5),(2,5)), ((2,5),(3,3)), ((2,5),(4,4)), ((2,5),(5,5)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), ((3,1),(3,3)), (("
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 1:\n        return [l]\n    else:\n        new_list = []\n        for i in l:\n            for j in combinations_with_replacement(l, n-1):\n                new_list.append([i]+j)\n        return new_list\n    \nprint(combinations_colors(['r', 'g', 'b'], 3))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [comb for comb in combinations_with_replacement(l, n)]\ndef colr_comb_of_n(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    res = []\n    for i in range(len(l)):\n        res.extend(combinations_with_replacement(l, n))\n    return res\ndef _colr_comb_of_n(l, n):\n    res = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                for l in range(k+1, len(l)):\n                    res.append([l, k, j, i])\n    return res\ndef count_occurence(l):\n    '''\n    Write a function that takes in a list and returns the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique_in_order(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique_in_order_2(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique_in_order_3(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique_in_order_4(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique_in_order_5(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique_in_order_6(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique_in_order_7(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique_in_order_8(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique_in_order_9(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique_in_order_10(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique_in_order_11(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique_in_order_12(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique_in_order_13(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique_in_order_14(l):\n    '''\n    Write a function that takes in a list and returns a dictionary of each element and the number of occurence of each element in the list.\n    '''\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\ndef count_occurence_of_each_unique_in_order_15(l):\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    s = set(l)\n    for i in s:\n        if l.count(i) < n:\n            return \"Not possible\"\n    lst = [i for i in range(len(l))]\n    combos = []\n    for i in range(1, n+1):\n        combos.extend(list(combinations_with_replacement(lst, i)))\n    return combos\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [ tuple(comb) for comb in combinations_with_replacement(l, n) ]\nprint(combinations_colors(['R', 'G', 'B', 'Y'], 3))\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # this function will return the number of prime numbers that are less than n\n    # this will require a while loop to iterate from 2 to n\n    if n <= 2:\n        return 0\n    num_primes = 0\n    i = 2\n    while i <= n:\n        j = 2\n        while j <= i:\n            if i % j == 0:\n                break\n            j += 1\n        if j == i:\n            num_primes += 1\n        i += 1\n    return num_primes\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    # n//2 is the largest possible prime number in the number.\n    isprime = [True] * (n//2)\n    for i in range(3, int(n**0.5)+1, 2):\n        if isprime[i//2]:\n            isprime[i*i//2::i] = [False]*((n-i*i-1)//(2*i)+1)\n    return sum(isprime)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n >= 2:\n        count += 1\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n    \n    \ndef is_prime(n):\n    '''\n    Returns True if n is a prime number.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef count_Primes_Sieve(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Create a boolean array \"prime[0..n]\" and initialize all entries it as true.\n    # A value in prime[i] will finally be false if i is Not a prime, else true.\n    prime = [True] * n\n    prime[0] = False\n    prime[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if prime[i]:\n            for j in range(i * i, n, i):\n                prime[j] = False\n    prime[1] = True\n    return prime.count(True)\n    \n    \ndef main():\n    print(count_Primes_nums(100))\n    print(count_Primes_Sieve(100))\n    \nmain()"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = list()\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    return sum([1 for i in range(1, n) if is_prime(i)])\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(n):\n        if (n==1):\n            return False\n        elif (n==2):\n            return True\n        for x in range(2,int(math.sqrt(n))+1):\n            if(n%x==0):\n                return False\n        return True\n    count=0\n    for num in range(2,n+1):\n        if(isPrime(num)):\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        count = 1\n        for i in range(3, n):\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                count += 1\n        return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def count_Primes_rec(n):\n        if n < 2:\n            return 0\n        elif n == 2:\n            return 1\n        elif n % 2 == 0:\n            return 2\n        else:\n            return count_Primes_rec(n-1) + count_Primes_rec(n-2)\n    return count_Primes_rec(n)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = [2]\n    # Loop from 3 to int(sqrt(n))\n    for i in range(3, n + 1, 2):\n        # If i is divisible by any number in the list primes\n        if not(any(i % p == 0 for p in primes)):\n            # If it has not been marked as a prime number, then mark it as a prime number\n            primes.append(i)\n    return len(primes)\n    \ndef primeFactors(n):\n    '''\n    Write a function that takes in an integer and returns a list of its prime factors in ascending order.\n    '''\n    if n == 1:\n        return []\n    if n == 2:\n        return [2]\n    divisors = []\n    # Loop through all integers from 2 to int(sqrt(n))\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    if int(math.sqrt(n))**2 == n:\n        divisors.append(int(math.sqrt(n)))\n    return divisors\n    \ndef isPrime(n):\n    '''\n    Write a function that checks whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n    \ndef factors(n):\n    '''\n    Write a function that returns a list of all the prime factors of a number.\n    '''\n    divisors = []\n    # Loop through all integers from 2 to int(sqrt(n))\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    if int(math.sqrt(n))**2 == n:\n        divisors.append(int(math.sqrt(n)))\n    return divisors\n    \ndef isPalindrome(n):\n    '''\n    Write a function that checks whether a number is a palindrome or not.\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    return False\n    \ndef odd_or_even(n):\n    '''\n    Write a function that returns Odd or Even depending on which it is given.\n    '''\n    if n % 2 == 0:\n        return \"Even\"\n    return \"Odd\"\n    \ndef isSubstring(s1, s2):\n    '''\n    Write a function that checks whether one string is a substring of another string or not.\n    '''\n    if s2 in s1:\n        return True\n    return False\n    \ndef sum_of_digits(n):\n    '''\n    Write a function that takes in a non-negative integer and returns the sum of the digits of that integer.\n    '''\n    return sum([int(d) for d in str(n)])\n    \ndef divisors(n):\n    '''\n    Write a function that takes in a number and returns a list of its divisors.\n    '''\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n    \ndef sum_of_divisors(n):\n    '''\n    Write a function that takes in a number and returns the sum of the divisors of that number.\n    '''\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \ndef sum_of_digits_factorial(n):\n    '''\n    Write a function that finds the sum of the factorial of the digits of the given number.\n    '''\n    nums = []\n    for i in range(0, len(str(n))):\n        nums.append(math.factorial(int(str(n)[i])))\n    return sum(nums)\n    \ndef prime_factors(n):\n    '''\n    Write a function that returns a list of the prime factors of a given number.\n    '''\n    # Remove 1 and n from list of divisors\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n    if int(math.sqrt(n))**2 == n:\n        divisors.append(int(math.sqrt(n)))\n    divisors.remove(n)\n    return divisors\n    \ndef highest_common_factor(a, b):\n    '''\n    Write a function that returns the highest common factor of two numbers.\n    '''\n    # Loop through all numbers from 1 to min(a, b)\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            return i\n    return 1\n    \ndef gcd(a, b):\n    '''\n    Write a function that returns the greatest common denominator of two numbers.\n    '''\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n    \ndef lcm(a, b):\n    '''\n    Write a function that returns the lowest common multiple of two numbers.\n    '''\n    return a * b / gcd(a, b)\n    \ndef sum_of_three_digit_nums(n):\n    '''\n    Write a function that finds the sum of all the three digit numbers whose sum of digits is equal to n.\n    '''\n    three_digit_nums = [i for i in range(100, 1000) if sum_of_digits(i) == n]\n    return sum(three_digit_nums)\n    \ndef num_to_eng(n):\n    '''\n    Write a function that converts a number to English.\n    '''\n    # First define the unit numbers\n    units = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n    teens = [\"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n    tens = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n    # Create a string to store the number\n    num_str = \"\"\n    # Check if the number is 0\n    if n == 0:\n        num_str = \"zero\"\n    # Loop through each element of the number\n    while n > 0:\n        if n // 1000 > 0:\n            num_str += \" thousand \"\n            n -= 1000\n            continue\n        if n // 100 > 0:\n            num_str += \" hundred \"\n            n -= 100\n            continue\n        if n // 10 == 1:\n            num_str += teens[n % 10]\n            break\n        if n // 10 > 0:\n            num_str += tens[n // 10]\n            n = n % 10\n        if n > 0:\n            num_str += units[n]\n            n = n - 1\n    return num_str.strip()\n    \ndef get_continuous_k(lst, k):\n    '''\n    Write a function that returns the maximum sum of k consecutive numbers from a list.\n    '''\n    max_sum = 0\n    # Loop through each index in the list\n    for i in range(0, len(lst) - k + 1):\n        # Create a list of the k consecutive numbers in the index\n        num_lst = [lst[i + j] for j in range(0, k)]\n        # Get the sum of the list\n        cur_sum = sum(num_"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Base Case:\n    if n < 2:\n        return 0\n    \n    # Check to see if n is prime:\n    for i in range(2, n):\n        if n % i == 0:\n            return count_Primes_nums(n-1)\n    # If n is not prime, increment the count by one:\n    return count_Primes_nums(n-1) + 1\n    \n    \n    \ndef remove_duplicates(lst):\n    '''\n    Write a function that takes in a list and returns a new list with all duplicates removed from the original list.\n    '''\n    # Create a list to store the unique elements:\n    unique_list = []\n    \n    # Check each element in the original list:\n    for element in lst:\n        # If the element is not already in the list, add it to the new list:\n        if element not in unique_list:\n            unique_list.append(element)\n            \n    return unique_list\n    \n    \ndef l_dist(string1, string2):\n    '''\n    Write a function that takes in two strings and returns the length of the longest string that can be formed by deleting one character from one of the strings and then adding it to the other.\n    '''\n    # Create an empty list to store the max length:\n    max_length = []\n    \n    # Check every character in string1:\n    for i in range(0, len(string1)):\n        # Try every character in string2:\n        for j in range(0, len(string2)):\n            # Create a list to store the strings created by inserting one character in the middle:\n            str_lst = []\n            # Insert the character in the string1 at the i-th position:\n            str_lst.append(string1[0:i] + string2[j] + string1[i+1:])\n            # Insert the character in the string2 at the j-th position:\n            str_lst.append(string2[0:j] + string1[i] + string2[j+1:])\n            # Check to see if the new strings are in the list:\n            if str_lst[0] not in max_length:\n                max_length.append(str_lst[0])\n            elif str_lst[1] not in max_length:\n                max_length.append(str_lst[1])\n                \n    return len(max(max_length, key=len))\n    \n    \ndef print_paths(maze):\n    '''\n    Write a python function that takes in a list of lists of integers and return the number of paths in the maze where you can travel.\n    '''\n    # Create a list to store the path counts:\n    path_count = 0\n    \n    # Check to see if the maze has a solution:\n    if len(maze[0]) == 0:\n        return 0\n        \n    # Create a list to store the current path:\n    curr_path = []\n    \n    # Check the first element in the maze to see if there's a path:\n    if maze[0][0] == 1:\n        # Set the count to 1:\n        path_count = 1\n    # Try every element in the list, starting from the second element:\n    for i in range(1, len(maze[0])):\n        # Check to see if the element can be reached:\n        if maze[0][i] == 1:\n            # Create a list to store the possible paths:\n            possible_paths = []\n            \n            # Check to see if there's an element in the current path:\n            if len(curr_path) > 0:\n                # Check to see if the element is valid:\n                if curr_path[-1] + 1 == maze[0][i]:\n                    # If it's a valid path, check to see if the possible paths contain the current path:\n                    if possible_paths.count(curr_path) == 0:\n                        # If it is not in the possible paths list, add it:\n                        possible_paths.append(curr_path[:])\n            # Check to see if the current path is empty:\n            if len(curr_path) == 0:\n                # Add the first element to the path:\n                curr_path.append(maze[0][i])\n            # If the element is valid, add it to the current path:\n            elif curr_path[-1] + 1 == maze[0][i]:\n                curr_path.append(maze[0][i])\n            # If the element is not valid, try the next element:\n            else:\n                # If the current path is not empty, try the current path again from the beginning:\n                if len(curr_path) > 0:\n                    curr_path = []\n                    curr_path.append(maze[0][i])\n                # If the current path is empty, try the next element:\n                else:\n                    curr_path.append(maze[0][i])\n            \n            # Try every element in the list, starting from the second element:\n            for j in range(1, len(maze)):\n                # Check to see if the element can be reached:\n                if maze[j][i] == 1:\n                    # Create a list to store the possible paths:\n                    possible_paths = []\n                    \n                    # Check to see if there's an element in the current path:\n                    if len(curr_path) > 0:\n                        # Check to see if the element is valid:\n                        if curr_path[-1] + 1 == maze[j][i]:\n                            # If it's a valid path, check to see if the possible paths contain the current path:\n                            if possible_paths.count(curr_path) == 0:\n                                # If it is not in the possible paths list, add it:\n                                possible_paths.append(curr_path[:])\n                    # Check to see if the current path is empty:\n                    if len(curr_path) == 0:\n                        # Add the first element to the path:\n                        curr_path.append(maze[j][i])\n                    # If the element is valid, add it to the current path:\n                    elif curr_path[-1] + 1 == maze[j][i]:\n                        curr_path.append(maze[j][i])\n                    # If the element is not valid, try the next element:\n                    else:\n                        # If the current path is not empty, try the current path again from the beginning:\n                        if len(curr_path) > 0:\n                            curr_path = []\n                            curr_path.append(maze[j][i])\n                        # If the current path is empty, try the next element:\n                        else:\n                            curr_path.append(maze[j][i])\n                    \n                    # Try every element in the list, starting from the second element:\n                    for k in range(1, len(maze)):\n                        # Check to see if the element can be reached:\n                        if maze[k][i] == 1:\n                            # Create a list to store the possible paths:\n                            possible_paths = []\n                            \n                            # Check to see if there's an element in the current path:\n                            if len(curr_path) > 0:\n                                # Check to see if the element is valid:\n                                if curr_path[-1] + 1 == maze[k][i]:\n                                    # If it's a valid path, check to see if the possible paths contain the current path:\n                                    if possible_paths.count(curr_path) == 0:\n                                        # If it is not in the possible paths list, add it:\n                                        possible_paths.append(curr_path[:])\n                            # Check to see if the current path is empty:\n                            if len(curr_path) == 0:\n                                # Add the first element to the path:\n                                curr_path.append(maze[k][i])\n                            # If the element is valid, add it to the current path:\n                            elif curr_path[-1] + 1 == maze[k][i]:\n                                curr_path.append(maze[k][i])\n                            # If the element is not valid, try the next element:\n                            else:\n                                # If the current path is not empty, try the current path again from the beginning:\n                                if len(curr_path) > 0"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    \n    #return tuple(b, a)\n    return b,a\n    \ndef print_format(a,b):\n    '''\n    Write a function that prints the two numbers with a comma separator.\n    '''\n    print(a,b)\n    \ndef first_two(string):\n    '''\n    Write a function that takes in a string and returns the string with the first two characters removed.\n    '''\n    return string[2:]\n    \ndef last_two(string):\n    '''\n    Write a function that takes in a string and returns the string with the last two characters removed.\n    '''\n    return string[:-2]\n    \ndef middle(string):\n    '''\n    Write a function that takes in a string and returns the string with the first two and last two characters removed.\n    '''\n    return string[2:-2]\n    \ndef swap_words(string):\n    '''\n    Write a function that takes in a string and returns a string with the first and last character swapped.\n    '''\n    return string[-1] + string[1:-1] + string[0]\n    \ndef triple_up(string):\n    '''\n    Write a function that takes in a string and returns a string that is tripled.\n    '''\n    return 3*string\n    \ndef reverse_words(string):\n    '''\n    Write a function that takes in a string and returns a string that has all the words reversed.\n    '''\n    return string[::-1]\n    \ndef reverse_order(string):\n    '''\n    Write a function that takes in a string and returns a string that has all the words in reverse order.\n    '''\n    return string[::-1]\n    \ndef password(string):\n    '''\n    Write a function that takes in a string and returns a string with all the characters reversed.\n    '''\n    return string[::-1]\n    \ndef last_first(string):\n    '''\n    Write a function that takes in a string and returns a string with the first character and last character swapped.\n    '''\n    return string[-1] + string[1:-1] + string[0]\n    \ndef length(string):\n    '''\n    Write a function that takes in a string and returns a string with the length of the string.\n    '''\n    return len(string)\n    \ndef find_max(string):\n    '''\n    Write a function that takes in a string and returns the first character of the string.\n    '''\n    return string[0]\n    \ndef find_min(string):\n    '''\n    Write a function that takes in a string and returns the last character of the string.\n    '''\n    return string[-1]\n    \ndef only_evens(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list of only the even numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]\n    \ndef only_odds(nums):\n    '''\n    Write a function that takes in a list of numbers and returns a list of only the odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n    \ndef only_greater_than(nums, num):\n    '''\n    Write a function that takes in a list of numbers and a number and returns a list of only the numbers greater than the given number.\n    '''\n    return [num for num in nums if num > num]\n    \ndef only_greater_than_or_equal(nums, num):\n    '''\n    Write a function that takes in a list of numbers and a number and returns a list of only the numbers greater than or equal to the given number.\n    '''\n    return [num for num in nums if num >= num]\n    \ndef only_less_than(nums, num):\n    '''\n    Write a function that takes in a list of numbers and a number and returns a list of only the numbers less than the given number.\n    '''\n    return [num for num in nums if num < num]\n    \ndef only_less_than_or_equal(nums, num):\n    '''\n    Write a function that takes in a list of numbers and a number and returns a list of only the numbers less than or equal to the given number.\n    '''\n    return [num for num in nums if num <= num]\n    \ndef is_palindrome(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n    '''\n    return string == string[::-1]\n    \ndef is_anagram(string_1, string_2):\n    '''\n    Write a function that takes in two strings and returns True if the two strings are anagrams.\n    '''\n    return sorted(string_1) == sorted(string_2)\n    \ndef is_a_palindrome_permutation(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a permutation of a palindrome, False otherwise.\n    '''\n    return len(string) % 2 == 0 or len(set(string)) == 1\n    \ndef is_a_palindrome_permutation_v2(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a permutation of a palindrome, False otherwise.\n    '''\n    string = string.lower().replace(' ', '')\n    return sum([string.count(char) % 2 for char in set(string)]) < 2\n    \ndef is_a_palindrome_permutation_v3(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a permutation of a palindrome, False otherwise.\n    '''\n    string = string.lower().replace(' ', '')\n    return sum([string.count(char) % 2 for char in set(string)]) <= 1\n    \ndef is_a_palindrome_permutation_v4(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a permutation of a palindrome, False otherwise.\n    '''\n    string = string.lower().replace(' ', '')\n    return sum([string.count(char) % 2 for char in set(string)]) <= 1\n    \ndef is_a_palindrome_permutation_v5(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a permutation of a palindrome, False otherwise.\n    '''\n    string = string.lower().replace(' ', '')\n    return sum([string.count(char) % 2 for char in set(string)]) in (0, 1)\n    \ndef is_a_palindrome_permutation_v6(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a permutation of a palindrome, False otherwise.\n    '''\n    string = string.lower().replace(' ', '')\n    return all(string.count(char) % 2 == 0 for char in set(string))\n    \ndef is_a_palindrome_permutation_v7(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a permutation of a palindrome, False otherwise.\n    '''\n    string = string.lower().replace(' ', '')\n    return all(string.count(char) % 2 == 0 for char in set(string))\n    \ndef is_a_palindrome_permutation_v8(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a permutation of a palindrome, False otherwise.\n    '''\n    string = string.lower().replace(' ', '')\n    return not (any(string.count(char) % 2 == 1 for char in set(string)))\n    \ndef is_a_palindrome_permutation_v9(string):\n    '''\n    Write a function that takes in a string and returns True if the string is a permutation of a palindrome, False otherwise.\n    '''\n    string = string.lower().replace(' ', '')\n    return all(string.count(char) % 2 == 0 for char in set(string))\n    \ndef is_a_palindrome_permutation_v10(string):\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = (3, 1, 2, 1)\n    test_tup2 = (1, 2, 1, 3)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # return tuple with larger second element\n    if test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    elif test_tup1[1] < test_tup2[1]:\n        return test_tup2\n    else:\n        # if equal, check second element, then first\n        if test_tup1[2] > test_tup2[2]:\n            return test_tup1\n        elif test_tup1[2] < test_tup2[2]:\n            return test_tup2\n        else:\n            if test_tup1[0] > test_tup2[0]:\n                return test_tup1\n            else:\n                return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(max(item1, item2) for item1, item2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a = max(test_tup1)\n    b = max(test_tup2)\n    return (a, b)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    \n    return tuple(reduce(lambda x, y: x if x > y else y, zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # TODO: Write code to maximize the elements of two tuples.\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #return (max(test_tup1), max(test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (max(test_tup1), max(test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #Test cases:\n    #test_tup1 = (1, 2)\n    #test_tup2 = (3, 2)\n    #test_tup1 = (1, 2)\n    #test_tup2 = (0, -2)\n    #test_tup1 = (10, 20)\n    #test_tup2 = (30, 40)\n    #test_tup1 = (0, 0)\n    #test_tup2 = (0, 0)\n    #test_tup1 = (1, 2, 3)\n    #test_tup2 = (3, 2, 1)\n    #test_tup1 = (10, 20, 30)\n    #test_tup2 = (30, 40, 20)\n    #test_tup1 = (1, 2, 3, 4)\n    #test_tup2 = (3, 2, 1, 4)\n    #test_tup1 = (10, 20, 30, 40)\n    #test_tup2 = (30, 40, 20, 10)\n    #test_tup1 = (1, 2, 3, 4, 5)\n    #test_tup2 = (3, 2, 1, 4, 5)\n    #test_tup1 = (10, 20, 30, 40, 50)\n    #test_tup2 = (30, 40, 20, 10, 50)\n    #test_tup1 = (1, 2, 3, 4, 5, 6)\n    #test_tup2 = (3, 2, 1, 4, 5, 6)\n    #test_tup1 = (10, 20, 30, 40, 50, 60)\n    #test_tup2 = (30, 40, 20, 10, 50, 60)\n    #test_tup1 = (1, 2, 3, 4, 5, 6, 7)\n    #test_tup2 = (3, 2, 1, 4, 5, 6, 7)\n    #test_tup1 = (10, 20, 30, 40, 50, 60, 70)\n    #test_tup2 = (30, 40, 20, 10, 50, 60, 70)\n    #test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8)\n    #test_tup2 = (3, 2, 1, 4, 5, 6, 7, 8)\n    #test_tup1 = (10, 20, 30, 40, 50, 60, 70, 80)\n    #test_tup2 = (30, 40, 20, 10, 50, 60, 70, 80)\n    #test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\n    #test_tup2 = (3, 2, 1, 4, 5, 6, 7, 8, 9)\n    #test_tup1 = (10, 20, 30, 40, 50, 60, 70, 80, 90)\n    #test_tup2 = (30, 40, 20, 10, 50, 60, 70, 80, 90)\n    #test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    #test_tup2 = (3, 2, 1, 4, 5, 6, 7, 8, 9, 10)\n    #test_tup1 = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\n    #test_tup2 = (30, 40, 20, 10, 50, 60, 70, 80, 90, 100)\n    #test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n    #test_tup2 = (3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11)\n    #test_tup1 = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110)\n    #test_tup2 = (30, 40, 20, 10, 50, 60, 70, 80, 90, 100, 110)\n    #test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n    #test_tup2 = (3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n    #test_tup1 = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)\n    #test_tup2 = (30, 40, 20, 10, 50, 60, 70, 80, 90, 100, 110, 120)\n    #test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\n    #test_tup2 = (3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\n    #test_tup1 = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130)\n    #test_tup2 = (30, 40, 20, 10, 50, 60, 70, 80, 90, 100, 110, 120, 130)\n    #test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)\n    #test_tup2 = (3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)\n    #test_tup1 = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140)\n    #test_tup2 = (30, 40, 20, 10, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140)\n    #test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n    #test_tup2 = (3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n    #test_tup1 = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150)\n    #test_tup2 = (30, 40, 20, 10, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150)\n    #test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\n    #test_tup2 = (3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\n    #test_tup1 = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160)\n    #test_tup2 = (30, 40, 20, 10, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160)\n    #test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)\n    #test_tup2 = (3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)\n    #test_tup1 = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170)\n    #test_tup2 = (30, 40, 20, 10, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170)\n    #test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)\n    #test_tup2 = (3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    is_prime = lambda x: x > 1 and all(x % d for d in range(2, int(x**0.5) + 1))\n    ans = 1\n    while True:\n        ans += 2\n        if is_prime(ans):\n            for i in range(3, int(ans**0.5)+1, 2):\n                if ans % i == 0:\n                    break\n            else:\n                return ans\n        "
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1: \n        return None\n    if n == 2: \n        return 2\n    if n == 3: \n        return 3\n    if n == 4: \n        return 5\n    if n == 5: \n        return 7\n    if n == 6: \n        return 11\n    if n == 7: \n        return 13\n    if n == 8: \n        return 17\n    if n == 9: \n        return 23\n    if n == 10: \n        return 29\n    if n == 11: \n        return 31\n    if n == 12: \n        return 37\n    if n == 13: \n        return 41\n    if n == 14: \n        return 43\n    if n == 15: \n        return 47\n    if n == 16: \n        return 53\n    if n == 17: \n        return 59\n    if n == 18: \n        return 61\n    if n == 19: \n        return 67\n    if n == 20: \n        return 71\n    if n == 21: \n        return 73\n    if n == 22: \n        return 79\n    if n == 23: \n        return 83\n    if n == 24: \n        return 89\n    if n == 25: \n        return 97\n    if n == 26: \n        return 101\n    if n == 27: \n        return 103\n    if n == 28: \n        return 107\n    if n == 29: \n        return 109\n    if n == 30: \n        return 113\n    if n == 31: \n        return 127\n    if n == 32: \n        return 131\n    if n == 33: \n        return 137\n    if n == 34: \n        return 139\n    if n == 35: \n        return 149\n    if n == 36: \n        return 151\n    if n == 37: \n        return 157\n    if n == 38: \n        return 163\n    if n == 39: \n        return 167\n    if n == 40: \n        return 173\n    if n == 41: \n        return 179\n    if n == 42: \n        return 181\n    if n == 43: \n        return 191\n    if n == 44: \n        return 193\n    if n == 45: \n        return 197\n    if n == 46: \n        return 199\n    if n == 47: \n        return 211\n    if n == 48: \n        return 223\n    if n == 49: \n        return 227\n    if n == 50: \n        return 229\n    if n == 51: \n        return 233\n    if n == 52: \n        return 239\n    if n == 53: \n        return 241\n    if n == 54: \n        return 251\n    if n == 55: \n        return 257\n    if n == 56: \n        return 263\n    if n == 57: \n        return 269\n    if n == 58: \n        return 271\n    if n == 59: \n        return 277\n    if n == 60: \n        return 281\n    if n == 61: \n        return 283\n    if n == 62: \n        return 293\n    if n == 63: \n        return 307\n    if n == 64: \n        return 311\n    if n == 65: \n        return 313\n    if n == 66: \n        return 317\n    if n == 67: \n        return 331\n    if n == 68: \n        return 337\n    if n == 69: \n        return 347\n    if n == 70: \n        return 349\n    if n == 71: \n        return 353\n    if n == 72: \n        return 359\n    if n == 73: \n        return 367\n    if n == 74: \n        return 373\n    if n == 75: \n        return 379\n    if n == 76: \n        return 383\n    if n == 77: \n        return 389\n    if n == 78: \n        return 397\n    if n == 79: \n        return 401\n    if n == 80: \n        return 409\n    if n == 81: \n        return 419\n    if n == 82: \n        return 421\n    if n == 83: \n        return 431\n    if n == 84: \n        return 433\n    if n == 85: \n        return 439\n    if n == 86: \n        return 443\n    if n == 87: \n        return 449\n    if n == 88: \n        return 457\n    if n == 89: \n        return 461\n    if n == 90: \n        return 463\n    if n == 91: \n        return 467\n    if n == 92: \n        return 479\n    if n == 93: \n        return 487\n    if n == 94: \n        return 491\n    if n == 95: \n        return 499\n    if n == 96: \n        return 503\n    if n == 97: \n        return 509\n    if n == 98: \n        return 521\n    if n == 99: \n        return 523\n    if n == 100: \n        return 541\n    if n == 101: \n        return 547\n    if n == 102: \n        return 557\n    if n == 103: \n        return 563\n    if n == 104: \n        return 569\n    if n == 105: \n        return 571\n    if n == 106: \n        return 577\n    if n == 107: \n        return 587\n    if n == 108: \n        return 593\n    if n == 109: \n        return 599\n    if n == 110: \n        return 601\n    if n == 111: \n        return 613\n    if n == 112: \n        return 617\n    if n == 113: \n        return 619\n    if n == 114: \n        return 631\n    if n == 115: \n        return 641\n    if n == 116: \n        return 643\n    if n == 117: \n        return 647\n    if n == 118: \n        return 653\n    if n == 119: \n        return 659\n    if n == 120: \n        return 661\n    if n == 121: \n        return 673\n    if n == 122: \n        return 677\n    if n == 123: \n        return 683\n    if n == 124: \n        return 691\n    if n == 125: \n        return 701\n    if n == 126: \n        return 709\n    if n == 127: \n        return 719\n    if n == 128: \n        return 727\n    if n == 129: \n        return 733\n    if n == 130: \n        return 739\n    if n == 131: \n        return 743\n    if n == 132: \n        return 751\n    if n == 133: \n        return 757\n    if n == 134: \n        return 761\n    if n == 135: \n        return 769\n    if n == 136: \n        return 773\n    if n == 137: \n        return 787\n    if n == 138: \n        return 797\n    if n == 139: \n        return 809\n    if n == 140: \n        return 811\n    if n == 141: \n        return 821\n    if n == 142: \n        return 823\n    if n == 143: \n        return 827\n    if n == 144: \n        return 829\n    if n == 145: \n        return 839\n    if n == 146: \n        return 853\n    if n == 147: \n        return 857\n    if n == 148: \n        return 859\n    if n == 149: \n        return 863\n    if n == 150: \n        return 877\n    if n == 151: \n        return 881\n    if n == 152: \n        return 883\n    if n == 153: \n        return 887\n    if n == 154: \n        return 907\n    if n == 155: \n        return 911\n    if n == 156: \n        return 919\n    if n == 157: \n        return 929\n    if n == 158: \n        return 937\n    if n == 159: \n        return 941\n    if n == 160: \n        return 947\n    if n == 161: \n        return 953\n    if n ="
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return -1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return newman_prime_r(n,2,3)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        else:\n            i = 5\n            while i**2 <= n:\n                if n % i == 0 or n % (i+2) == 0:\n                    return False\n                i += 6\n            return True\n    \n    def next_prime(n):\n        while True:\n            n += 1\n            if is_prime(n):\n                return n\n    \n    def newman_shanks_williams(p):\n        '''\n        Given a prime p, the next newman-shanks-williams prime is\n        p + 2^k + 1, where k is the number of steps taken.\n        '''\n        k = 0\n        while True:\n            p = next_prime(p)\n            k += 1\n            if is_prime(p+2**k+1):\n                return p+2**k+1\n    \n    return newman_shanks_williams(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # create variables\n    start_n = 2\n    # iterate and add n\n    while start_n < n:\n        start_n += 1\n        start_n_sq = start_n ** 2\n        if is_prime(start_n_sq):\n            continue\n        else:\n            return start_n - 1\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        return 'Invalid Input'\n    # Initialize sieve and counter\n    sieve = [1]*(n+1)\n    count = 0\n    p = 2\n    while p**2 <= n:\n        if sieve[p]:\n            for i in range(2*p, n+1, p):\n                sieve[i] = 0\n        p += 1\n    for i in range(2, n):\n        if sieve[i]:\n            count += 1\n            if count == n:\n                return i\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return 2\n    if n % 2 == 0:\n        return False\n    sieve = list(range(3, n, 2))\n    m = sieve[-1]\n    for m in sieve:\n        for i in range(1, n):\n            m += 2 * i * (i+1)\n            if m >= n:\n                return m\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        #the set of primes less than n\n        p = set(range(2,n))\n        #initialize the set of composites\n        c = set()\n        #check for factors in p\n        for i in range(2,n):\n            if i in p:\n                p.difference_update(range(i*2,n,i))\n        return sorted(p)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Determine if n is even or odd\n    if (n % 2 == 0): \n        print(\"Number of iterations: \" + str(int((n / 2))))\n        print(\"Number of primes: \" + str(int((n / 2))))\n    else: \n        print(\"Number of iterations: \" + str(int(n / 2)))\n        print(\"Number of primes: \" + str(int(n / 2)))\n    # Initialize a variable to track number of primes\n    count = 0\n    # Initialize an array of primes to store the primes found so far\n    primeArray = []\n    # Initialize a variable to store the current prime candidate\n    p = 0\n    # Initialize a variable to keep track of the current iteration\n    i = 0\n    # Iterate through the numbers up to the nth prime\n    while (count < n):\n        # Increment the iteration\n        i = i + 1\n        # Set the initial number candidate\n        p = 2 * i + 1\n        # Assume the candidate is prime\n        isPrime = True\n        # Check if the candidate is divisible by the primes found so far\n        for x in primeArray:\n            if (x > p ** (1/2)):\n                break\n            if (p % x == 0):\n                isPrime = False\n                break\n            else:\n                continue\n        # If the candidate is not divisible by the primes found so far, it is a prime\n        if (isPrime):\n            # Add the prime to the list of primes found so far\n            primeArray.append(p)\n            # Increment the number of primes found so far\n            count = count + 1\n    # Return the nth prime found\n    return p\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for index, num1 in enumerate(test_tup1):\n        result = result + (num1 / test_tup2[index], )\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a/b for a, b in zip(test_tup1, test_tup2))\n    # pass\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x,y: x / y, test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(tup1//tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([a/b for a,b in zip(test_tup1,test_tup2)])\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        return tuple([i / j for i, j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(i/j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return [element_wise_division(test_tup1[i], test_tup2[i]) for i in range(len(test_tup1))]\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(0, len(test_tup1)):\n        result += ((test_tup1[i]/test_tup2[i]),)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if (len(test_tup1) == len(test_tup2)):\n        return (tuple(map(lambda x, y: x / y, test_tup1, test_tup2)))\n    else:\n        raise Exception(\"Tuple lengths are not equal!\")\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your function should return a tuple of lists\n    return [list1[0:L], list1[L:]]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part_1 = list1[:L]\n    part_2 = list1[L:]\n    print(part_1, part_2)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    print(\"Input:\", list1)\n    print(\"Length of the first part:\", L)\n    print(\"Output:\", list1[:L], list1[L:])\n    return tuple([list1[:L], list1[L:]])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    len_list1 = len(list1)\n    if L > len_list1 or L <= 0:\n        return ('Nothing happened')\n    else:\n        list1_1 = list1[:L]\n        list1_2 = list1[L:]\n        return list1_1, list1_2\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    midpoint = len(list1) // 2\n    first_list = list1[:midpoint]\n    second_list = list1[midpoint:]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[0:L], list1[L:len(list1)])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1 = list(list1)\n    first = []\n    second = []\n    for i in list1:\n        if len(first) == L:\n            second.append(i)\n        else:\n            first.append(i)\n    return first, second\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    print(f\"The original list: {list1}\")\n    length = len(list1)\n    if length % 2!= 0:\n        if length > L:\n            list1_1 = list1[:L]\n            list1_2 = list1[L:]\n            print(f\"First part of the list: {list1_1}\")\n            print(f\"Second part of the list: {list1_2}\")\n            print(f\"The two resulting lists in a tuple: ({list1_1}, {list1_2})\")\n        else:\n            print(f\"L has to be greater than the length of the list\")\n    else:\n        print(f\"Length of the list is even\")\n        if length > L:\n            print(f\"Length of the list: {length}\")\n            list1_1 = list1[:L]\n            list1_2 = list1[L:]\n            print(f\"First part of the list: {list1_1}\")\n            print(f\"Second part of the list: {list1_2}\")\n            print(f\"The two resulting lists in a tuple: ({list1_1}, {list1_2})\")\n        else:\n            print(f\"L has to be greater than the length of the list\")\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*10.5\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return None\n    \n    return h_age * 10.5\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # add a few lines to calculate the dog's age in dog's years.\n    dog_age = h_age * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age)!= int or h_age < 0:\n        return 'Input is invalid.'\n    elif h_age <= 2:\n        dog_age = h_age * 10.5\n    else:\n        dog_age = 21 + (h_age - 2)*4\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = 0\n    for i in range(h_age):\n        d_age += 4\n    return d_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    h_age = float(h_age)\n    age_in_dog_years = 10.5 * h_age\n    return int(age_in_dog_years)\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize variable to store the new list\n    split_list = []\n    # create a new list to store the split list\n    split_list_2 = []\n    # loop through the length of the list\n    for i in range(0,len(S),step):\n        # append the split list to the new list\n        split_list_2.append(S[i:i+step])\n    # append the split list to the new list\n    split_list.append(split_list_2)\n    # return the new list\n    return split_list\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    out = []\n    count = 0\n    for i in S:\n        count += 1\n        if count % step == 0:\n            out.append([])\n        out[-1].append(i)\n    return out\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_split = []\n    new_list = []\n    for i in range(len(S)):\n        if i % step == 0:\n            new_list = []\n        new_list.append(S[i])\n        if i % step == step-1:\n            list_split.append(new_list)\n    return list_split\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    assert(step > 0)\n    return [S[i:i + step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0,len(S),step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_lists = [S[i:i+step] for i in range(0,len(S),step)]\n    return split_lists\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\n    "
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateral = 6*l**2\n    return lateral\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side = float(l)\n    surface = 6*side**2\n    return surface\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from math import pow\n    surface = pow(2,2)*l\n    return surface\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l*6)\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateral_surface_area = 6 * l**2\n    return lateral_surface_area\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a=l*l\n    return(a)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 2\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i**2\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1, n+1) if i%2!= 0])\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(0,n):\n        sum=sum+((i+1)**2)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i**2 for i in range(1,n+1) if i%2!=0)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return int((1 + 8*n)*(n/2))\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def squareSum(n):\n        def sumOfSquare(x):\n            sum=0\n            for i in range(1,x+1,2):\n                sum+=i**2\n            return sum\n        return sumOfSquare(n)\n    return squareSum(n)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for x in range(1, n+1):\n        sum += x * x\n    return sum\n    # write your code here\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for x in range(1, n+1, 2):\n        sum += x**2\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    star = 1\n    while True: \n        if star%4==0: \n            star += 1\n            continue\n        else: \n            break\n    n_star = star\n    while True: \n        if n_star%4==0:\n            n_star -= 1\n            continue\n        else: \n            break\n    return n_star\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i, result = 0, 1\n    while result <= n:\n        i += 1\n        result = result * i\n    result = result / i\n    return int(result)\n    \ndef find_star_num_recursive(n):\n    '''\n    Write a function to find then'th star number, using recursion.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n*find_star_num_recursive(n-1))\n    \ndef find_star_num_formula(n):\n    '''\n    Write a function to find then'th star number, using a formula.\n    '''\n    return n**3\n    \ndef find_star_num_recursive_formula(n):\n    '''\n    Write a function to find then'th star number, using a formula, and recursion.\n    '''\n    if n == 1:\n        return 1\n    return (n**3) + find_star_num_recursive_formula(n-1)\n        \ndef print_star_numbers(start, end):\n    '''\n    Write a function to print all star numbers between start and end, both inclusive.\n    '''\n    print(start, end = \" \")\n    for i in range(start, end+1):\n        print(i, end = \" \")\n        \ndef print_star_numbers_recursive(start, end):\n    '''\n    Write a function to print all star numbers between start and end, both inclusive. Use recursion.\n    '''\n    if start > end:\n        return\n    print(start, end = \" \")\n    return print_star_numbers_recursive(start+1, end)\n        \ndef print_star_numbers_formula(start, end):\n    '''\n    Write a function to print all star numbers between start and end, both inclusive. Use a formula.\n    '''\n    for i in range(start, end+1):\n        print(i, end = \" \")\n        \ndef print_star_numbers_recursive_formula(start, end):\n    '''\n    Write a function to print all star numbers between start and end, both inclusive. Use recursion and a formula.\n    '''\n    if start > end:\n        return\n    print(start, end = \" \")\n    return print_star_numbers_recursive_formula(start+1, end)\n    \nif __name__ == \"__main__\":\n    start_num = int(input(\"Enter the starting star number: \"))\n    end_num = int(input(\"Enter the ending star number: \"))\n    print(\"Star numbers between\", start_num, \"and\", end_num, \"are: \")\n    print_star_numbers(start_num, end_num)\n    print()\n    print(\"Star numbers between\", start_num, \"and\", end_num, \"are: \")\n    print_star_numbers_recursive(start_num, end_num)\n    print()\n    print(\"Star numbers between\", start_num, \"and\", end_num, \"are: \")\n    print_star_numbers_formula(start_num, end_num)\n    print()\n    print(\"Star numbers between\", start_num, \"and\", end_num, \"are: \")\n    print_star_numbers_recursive_formula(start_num, end_num"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 1\n    j = 1\n    while j < n: \n        i += 1\n        j = i*3\n    return i-1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 1 \n    while star_num < n: \n        star_num *= 3 \n        star_num += 1 \n    return star_num \n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return n * find_star_num(n - 1)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n + 1 + n + 1 + n + 1 + n + 1 + n + 1 + n + 1 + n + 1 + n + 1 + n + 1 + n + 1 + n + 1 + n + 1 + n + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n ** 3\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Write your code here.\n    i = 0\n    while i < n:\n        i += 1\n        if i == n:\n            return i\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    stars = [1]\n    for i in range(1, n):\n        stars.append(2 * stars[i - 1] + 1)\n    return stars[n - 1]\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # base cases \n    if n <= 0: \n        return \n    if n == 1: \n        return 0\n    \n    # find the n-1 star number \n    number = find_star_num(n-1) \n    \n    # print the n-1 star number \n    # print(n-1, \"number is: \", number) \n    \n    # modify the nth star number \n    if number == 0: \n        number = 1\n    else: \n        number = 0\n    \n    # print(\"nth star number is: \", number) \n    \n    return number \n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isupper():\n        return ord(k)-65\n    elif k.islower():\n        return ord(k)-97\n    elif k.isspace():\n        return 32\n    else:\n        return None\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k)!= str:\n        print('ERROR, please enter a character.')\n        return None\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    print(ord(k))\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_num=[]\n    sum=0\n    for i in range(0,len(arr)):\n        if(i%2==0):\n            even_num.append(arr[i])\n            sum=sum+arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i]%2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        if(arr[i]%2==0 and i%2==0):\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([i for i, x in enumerate(arr) if x%2 == 0 and i%2 == 0])\nprint(sum_even_and_even_index([1,2,3,4,5,6,7,8,9]))\nprint(sum_even_and_even_index([1,2,3,4,5,6,7,8,9,9,9,9]))\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for num in arr:\n        if (num % 2 == 0) and (num % 2 == 0):\n            sum += num\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += arr[i]\n    print(\"The sum of even numbers at even positions is \", even_index)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_and_even_index = 0\n    for x in range(len(arr)):\n        if x % 2 == 0 and arr[x] % 2 == 0:\n            sum_even_and_even_index += arr[x]\n    return sum_even_and_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                result += arr[i]\n    return result\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index_sum = 0\n    even_sum = 0\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index_sum = 0\n    for i in arr:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            even_index_sum += i\n    return even_sum, even_index_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i**5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def sum_of_even_powers(n):\n        sum_of_powers = 0\n        for i in range(1, n+1):\n            if i%2 == 0:\n                sum_of_powers += i**5\n        return sum_of_powers\n    return sum_of_even_powers(n)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s = s + (i ** 5)\n    return s\nprint(even_Power_Sum(5))"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        result = (even_Power_Sum(n-1) + (n**5))\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Base case \n    if n == 1: \n        return 1\n    # Recursive case\n    return n + even_Power_Sum(n-1)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n ** 5 + even_Power_Sum(n-1)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([x**5 for x in range(0,n+1) if x%2==0])\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    sum = 0\n    \n    for i in range(0, n+1):\n        sum += pow(i, 5)\n        \n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    x = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            x += i**5\n    return x\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [test_list[i][1] for i in range(len(test_list))]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for element in test_list:\n        return_list.append(element[-1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple[1] for tuple in test_list]\n    "
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuples in test_list:\n        rear_list.append(tuples[-1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elem = []\n    for i in range(len(test_list)):\n        tup = test_list[i]\n        rear_elem.append(tup[-1])\n    return rear_elem\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Write your function here\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i][1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = (1, 2, 3, 4, 5, 6)\n    test_tup2 = (6, 5, 4, 3, 2, 1)\n    \n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] - test_tup2[i],)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tuple = ()\n    for idx, num in enumerate(test_tup1):\n        new_tuple += (num - test_tup2[idx],)\n    return new_tuple\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup_sub = tuple(list(test_tup1)[:])\n    for i in range(len(test_tup2)):\n        tup_sub[i] -= test_tup2[i]\n    return tup_sub\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    print(test_tup1)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub = []\n    for x, y in zip(test_tup1, test_tup2):\n        sub.append(x - y)\n    return tuple(sub)\nprint(substract_elements((1,2,3),(1,2,3)))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    try:\n        if len(test_tup1)!= len(test_tup2):\n            return 'Length of both tuples must be equal!'\n        else:\n            return tuple(i - j for i, j in zip(test_tup1, test_tup2))\n    except:\n        return 'Both tuples must be tuples!'\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = tuple()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result += (test_tup1[i] - test_tup2[i],)\n    else:\n        print(\"tup1 and tup2 are not the same size.\")\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = (1, 2, 3, 4, 5)\n    test_tup2 = (2, 1, 3, 4, 2)\n    # if len(test_tup1) == len(test_tup2):\n    #     new_tup = tuple()\n    #     for i in range(len(test_tup1)):\n    #         new_tup += (test_tup1[i]-test_tup2[i],)\n    #     return new_tup\n    # else:\n    #     return \"tuples not of same size\"\n    return tuple(map(lambda x, y: x-y, test_tup1, test_tup2))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(n):\n        coeff_sum += math.factorial(n) / (math.factorial(i) * math.factorial(n - i))\n    return coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0): \n        return 0\n    return (even_binomial_Coeff(n) - even_binomial_Coeff(n - 1)) \n    \ndef even_binomial_Coeff( n): \n    if (n == 0): \n        return 0\n    return (even_binomial_Coeff(n - 1) + n) \n    \ndef factorial(n): \n    if (n == 0): \n        return 1\n    return (even_binomial_Coeff(n)) \n    \ndef even_binomial_coeff_sum_rec(n): \n    if (n < 0): \n        return 0\n    if (n == 0): \n        return 1\n    return (even_binomial_coeff_sum_rec(n - 1) + n) \n    \ndef factorial_sum_rec(n): \n    if (n < 0): \n        return 0\n    if (n == 0): \n        return 1\n    return (even_binomial_coeff_sum_rec(n) - even_binomial_coeff_sum_rec(n - 1)) \n    \ndef factorial_sum_rec_opt(n): \n    if (n < 0): \n        return 0\n    if (n == 0): \n        return 1\n    x = 0\n    for i in range(1, n + 1): \n        x += i \n    return (x) \n    \ndef factorial_sum_iterative(n): \n    if (n < 0): \n        return 0\n    x = 0\n    for i in range(1, n + 1): \n        x += i \n    return (x) \n    \ndef nth_term(n, m): \n    if (n == 0): \n        return 0\n    return (even_binomial_coeff(n, m) / factorial(m)) \n    \ndef nth_term_sum(n, m): \n    if (n == 0): \n        return 0\n    return (nth_term(n, m) - nth_term(n - 1, m)) \n    \ndef even_binomial_coeff(n, m): \n    if (n == 0): \n        return 0\n    return (nth_term(n, m)) \n    \ndef even_binomial_coeff_sum(n, m): \n    if (n == 0): \n        return 0\n    return (even_binomial_coeff(n, m) - even_binomial_coeff(n - 1, m)) \n    \ndef factorial_sum(n, m): \n    if (n == 0): \n        return 0\n    return (nth_term(n, m) - nth_term(n - 1, m)) \n    \ndef factorial_sum_iterative(n, m): \n    if (n == 0): \n        return 0\n    x = 0\n    for i in range(1, m + 1): \n        x += even_binomial_coeff(n, i) \n    return (x) \n    "
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomials_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            binomials_sum += math.factorial(n) // (math.factorial(i) * math.factorial(n - i))\n    return binomials_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0: \n        raise ValueError(\"Input should be a positive integer\") \n    else: \n        x = 0\n        for i in range(0, n): \n            x += math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) \n        return x\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize the binomial coefficients sum.\n    binomial_coefficient_sum = 0\n    # loop through each binomial coefficient.\n    for i in range(n):\n        # initialize binomial coefficient.\n        binomial_coefficient = 0\n        # loop through each term of the binomial coefficient.\n        for j in range(i + 1):\n            # if the sum of the power of two is greater than i.\n            if ((i - j) % 2) == 0:\n                # add the power of two to the binomial coefficient.\n                binomial_coefficient += pow(2, j)\n        # add the binomial coefficient to the binomial coefficients sum.\n        binomial_coefficient_sum += binomial_coefficient\n    # return the binomial coefficients sum.\n    return binomial_coefficient_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 0\n    else:\n        return ((1+n)*n)//2\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    C = [[0 for i in range(n+1)] for j in range(n+1)] \n    for i in range(n+1): \n        for j in range(min(i, n)+1): \n            if (j == 0 or j == i): \n                C[j][i] = 1\n            else: \n                C[j][i] = C[j-1][i-1] + C[j][i-1] \n    return C[0][n]\ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    C = [[0 for i in range(n+1)] for j in range(n+1)] \n    for i in range(n+1): \n        for j in range(min(i, n)+1): \n            if (j == 0 or j == i): \n                C[j][i] = 1\n            else: \n                C[j][i] = C[j-1][i-1] + C[j][i-1] \n    return C[0][n]\ndef binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all index binomial coefficients.\n    '''\n    C = [[0 for i in range(n+1)] for j in range(n+1)] \n    for i in range(n+1): \n        for j in range(min(i, n)+1): \n            if (j == 0 or j == i): \n                C[j][i] = 1\n            else: \n                C[j][i] = C[j-1][i-1] + C[j][i-1] \n    return C[0][n]\ndef find_factors(x): \n    '''\n    Write a python function that takes in a positive integer n and finds the factorization of the binomial coefficient of n.\n    '''\n    if (x < 0): \n        return\n    y = [] \n    i = 2\n    while i*i <= x: \n        while x % i == 0: \n            y.append(i) \n            x //= i \n        i += 1\n    if x > 1: \n        y.append(x)\n    return y\ndef find_combination_Sum_Solution_Count(a, n, r): \n    '''\n    Write a python function that takes in a list of integers a, an integer n, and an integer r and returns the number of combinations of a that sum to n and that contain r as their sum.\n    '''\n    count = 0\n    for i in range(len(a)): \n        if (a[i] == r): \n            count += 1\n        if (a[i] < r): \n            x = a[i]\n            while (x <= n and x <= r): \n                count += 1\n                if (x == r): \n                    count -= 1\n                x += a[i]\n    return count\ndef find_binomial_Coefficient(n, k): \n    '''\n    Write a python function that takes in a positive integer n and finds the binomial coefficient of n.\n    '''\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\ndef find_combination_Sum_Solution_Count(a, n, r): \n    '''\n    Write a python function that takes in a list of integers a, an integer n, and an integer r and returns the number of combinations of a that sum to n and that contain r as their sum.\n    '''\n    count = 0\n    for i in range(len(a)): \n        if (a[i] == r): \n            count += 1\n        if (a[i] < r): \n            x = a[i]\n            while (x <= n and x <= r): \n                count += 1\n                if (x == r): \n                    count -= 1\n                x += a[i]\n    return count\ndef find_non_negative_integers_Solution_Count(n, k): \n    '''\n    Write a python function that takes in a positive integer n and finds the number of combinations of n of k non negative integers, whose sum is equal to n.\n    '''\n    if (n < 0 or k < 0): \n        return\n    return find_factors(n)\ndef find_pythagorean_triplets_Solution_Count(a): \n    '''\n    Write a python function that takes in a list of integers and finds the number of Pythagorean triplets that exist in the list.\n    '''\n    a.sort()\n    n = len(a)\n    count = 0\n    for i in range(n): \n        j = i + 1\n        k = n - 1\n        while (j < k): \n            if (a[i]**2 + a[j]**2 == a[k]**2): \n                count += 1\n                j += 1\n            elif (a[i]**2 + a[j]**2 < a[k]**2): \n                j += 1\n            else: \n                k -= 1\n    return count\ndef find_non_negative_integers_Solution_Count(n, k): \n    '''\n    Write a python function that takes in a positive integer n and finds the number of combinations of n of k non negative integers, whose sum is equal to n.\n    '''\n    if (n < 0 or k < 0): \n        return\n    return find_factors(n)\ndef find_non_negative_integers_Solution_Count(n, k): \n    '''\n    Write a python function that takes in a positive integer n and finds the number of combinations of n of k non negative integers, whose sum is equal to n.\n    '''\n    if (n < 0 or k < 0): \n        return\n    return find_factors(n)\ndef find_non_negative_integers_Solution_Count(n, k): \n    '''\n    Write a python function that takes in a positive integer n and finds the number of combinations of n of k non negative integers, whose sum is equal to n.\n    '''\n    if (n < 0 or k < 0): \n        return\n    return find_factors(n)\ndef find_non_negative_integers_Solution_Count(n, k): \n    '''\n    Write a python function that takes in a positive integer n and finds the number of combinations of n of k non negative integers, whose sum is equal to n.\n    '''\n    if (n < 0 or k < 0): \n        return\n    return find_factors(n)\ndef find_non_negative_integers_Solution_Count(n, k): \n    '''\n    Write a python function that takes in a positive integer n and finds the number of combinations of n of k non negative integers, whose sum is equal to n.\n    '''\n    if (n < 0 or k < 0): \n        return\n    return find_factors(n)\ndef find_non_negative_integers_Solution_Count(n, k): \n    '''\n    Write a python function that takes in a positive integer n and finds the number of combinations of n of k non negative integers, whose sum is equal to n.\n    '''\n    if (n < 0 or k < 0): \n        return\n    return find_factors(n)\ndef find_non_negative_integers_Solution_Count(n, k): \n    '''\n    Write a python function that takes in a positive integer n and finds the number of combinations of n of k non negative integers, whose sum is equal to n.\n    '''\n    if (n < 0 or k < 0): \n        return\n    return find_factors(n)\ndef find_non_negative_integers_Solution_Count(n, k): \n    '''\n    Write a python function that takes in a positive integer n and finds the number of combinations of n of k non negative integers, whose sum is equal to n.\n    '''\n    if (n < 0 or k < 0): \n        return\n    return find_factors(n)\ndef find_non_negative_integers_Solution_Count(n, k): "
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (1+n)*(n//2)"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeffs = [0]*(n+1) \n    binomial_coeffs[0] = 1\n    binomial_coeffs[1] = 1\n    for i in range(2, n + 1): \n        binomial_coeffs[i] = binomial_coeffs[i - 1] + binomial_coeffs[i - 2] \n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #Base Case\n    if n==0:\n        return 0\n    #Recursive Case\n    else:\n        return (n%2+1)*even_binomial_Coeff_Sum(n//2)"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    r = float(r)\n    h = float(h)\n    volume = math.pi * r ** 2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    return pi*r*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    def cylinder(r,h):\n        volume = pi*r**2*h\n        return volume\n    return cylinder(r,h)\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r ** 2) * h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14*r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return math.pi * (r**2) * h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    volume = (math.pi)*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_list = []\n    for key,value in dict.items():\n        if value >= n:\n            dict_list.append(key)\n    return dict_list\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {k: v for k, v in dict.items() if v >= n}\n    return filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n    \nprint(dict_filter({'a':100, 'b':200, 'c':300, 'd':400, 'e':100, 'f':500, 'g':200}, 200))\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,val in dict.items():\n        if val >= n:\n            new_dict[key] = val\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {key: value for (key, value) in dict.items() if value >= n}\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_new = {}\n    for key, value in dict.items():\n        if value >= n:\n            dict_new[key] = value\n    return dict_new\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(0, len(test_tup)):\n        if test_tup[i] == 'c':\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    d = {}\n    test_tup = list(test_tup)\n    for i in range(len(test_tup)):\n        if test_tup[i] not in d:\n            d[test_tup[i]] = 1\n        else:\n            d[test_tup[i]] += 1\n    for i in range(len(test_tup)):\n        print(\"Number of elements before\",test_tup[i],\":\",d[test_tup[i]])\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count = count + 1\n    return count + 1\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    prev_element = -1\n    count = 0\n    for element in test_tup:\n        if element == prev_element:\n            count += 1\n        else:\n            prev_element = element\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    a = test_tup[0:1]\n    b = test_tup[1:]\n    print(a,b)\n    \n    return \n    \ncount_first_elements((1,2,3,2,1,2,3,2,1,4,3,2,5,1,6,1,7,2)"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if type(i) == type(test_tup[0]):\n            break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for index in range(len(test_tup)):\n        if index == 0:\n            continue\n        if test_tup[index] == test_tup[index-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return\n    \nif __name__ == \"__main__\":\n    test_tup = (4,3,2,1,6,5,4,2,6,4)\n    print(count_first_elements(test_tup)"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    #TODO: Modify this function to take a string and return the count of elements that occurs before it.\n    return len([e for e in test_tup if e[0] in \"abcdefghijklmnopqrstuvwxyz\"])\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # return tuple([test_tup.index(i) for i in test_tup if test_tup.count(i)>1])\n    return tuple(map(test_tup.index, tuple(filter(lambda x: test_tup.count(x) > 1, test_tup))))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def is_decagonal(n):\n        return (n * 10) + (9 * n) + (3*n) == n * 10\n    return is_decagonal(n)\n    \ndef fibonacci(n):\n    '''\n    Write a function that returns the nth Fibonacci number.\n    '''\n    def is_fibonacci(n):\n        return ((1 + 5**.5) / 2) ** n - ((1 - 5**.5) / 2) ** n == 5**.5\n    return is_fibonacci(n)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+9)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n*(10*n-9)//2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 10\n    return n * (10 * n - 9)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def num_digit(num):\n        return len(str(num))\n    if n <= 0:\n        return \"Invalid Input\"\n    if n == 1:\n        return 10\n    # we can remove 1 from the loop if we observe that the next number will be one digit less\n    i = n\n    n = 0\n    while i!= 1:\n        n = n + 9 * (10 ** (i - 1))\n        i -= 1\n    return n + 9 * (10 ** (i - 1)) + 9\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n - 1) // 2\n    \ndef is_num_decagonal_2(n):\n    return n*(3*n - 1) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+10) # n*n + n = n*(n+1)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # n = int(input(\"Enter number: \"))\n    # def func(n):\n    #     return n*(n+1)//2\n    # print(func(n))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    return n == sum(map(lambda x: x * 10 ** i, range(1, n + 1)))\n    \n    \ndef sum_digits(n):\n    '''\n    Write a function to sum all the digits of an integer.\n    '''\n    \n    n = str(n)\n    return sum(map(int, n))\n    \n    \ndef numbers_with_given_sum(s):\n    '''\n    Write a function that takes in a number and returns the numbers whose sum of digits is equal to the number's sum of digits.\n    '''\n    \n    nums = []\n    for n in range(s):\n        if sum_digits(n) == n:\n            nums.append(n)\n            \n    return nums\n    \n    \ndef factorial(n):\n    '''\n    Write a function that returns the factorial of a given number.\n    '''\n    \n    return n == 1 and 1 or n * factorial(n - 1)\n    \n    \ndef reverse(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    \n    return s == '' and s or s[::-1]\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to determine whether or not a string is a palindrome.\n    '''\n    \n    return s == reverse(s)\n    \n    \ndef digit_sum(n):\n    '''\n    Write a function that returns the sum of all the digits in the given number.\n    '''\n    \n    n = str(n)\n    return sum(map(int, n))\n    \n    \ndef digit_count(n):\n    '''\n    Write a function to count the number of digits in a given number.\n    '''\n    \n    return len(str(n))\n    \n    \ndef is_perfect(n):\n    '''\n    Write a function that determines if the given number is perfect.\n    '''\n    \n    return n == sum(map(lambda x: x ** 2, range(1, n)))\n    \n    \ndef is_prime(n):\n    '''\n    Write a function that returns True if the given number is prime and False if the given number is not prime.\n    '''\n    \n    return n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13 or n == 17 or n == 19 or n == 23 or n == 29 or n == 31 or n == 37 or n == 41 or n == 43 or n == 47 or n == 53 or n == 59 or n == 61 or n == 67 or n == 71 or n == 73 or n == 79 or n == 83 or n == 89 or n == 97 or n == 101 or n == 103 or n == 107 or n == 109 or n == 113 or n == 127 or n == 131 or n == 137 or n == 139 or n == 149 or n == 151 or n == 157 or n == 163 or n == 167 or n == 173 or n == 179 or n == 181 or n == 191 or n == 193 or n == 197 or n == 199 or n == 211 or n == 223 or n == 227 or n == 229 or n == 233 or n == 239 or n == 241 or n == 251 or n == 257 or n == 263 or n == 269 or n == 271 or n == 277 or n == 281 or n == 283 or n == 293 or n == 307 or n == 311 or n == 313 or n == 317 or n == 331 or n == 337 or n == 347 or n == 349 or n == 353 or n == 359 or n == 367 or n == 373 or n == 379 or n == 383 or n == 389 or n == 397 or n == 401 or n == 409 or n == 419 or n == 421 or n == 431 or n == 433 or n == 439 or n == 443 or n == 449 or n == 457 or n == 461 or n == 463 or n == 467 or n == 479 or n == 487 or n == 491 or n == 499 or n == 503 or n == 509 or n == 521 or n == 523 or n == 541 or n == 547 or n == 557 or n == 563 or n == 569 or n == 571 or n == 577 or n == 587 or n == 593 or n == 599 or n == 601 or n == 607 or n == 613 or n == 617 or n == 619 or n == 631 or n == 641 or n == 643 or n == 647 or n == 653 or n == 659 or n == 661 or n == 673 or n == 677 or n == 683 or n == 691 or n == 701 or n == 709 or n == 719 or n == 727 or n == 733 or n == 739 or n == 743 or n == 751 or n == 757 or n == 761 or n == 769 or n == 773 or n == 787 or n == 797 or n == 809 or n == 811 or n == 821 or n == 823 or n == 827 or n == 829 or n == 839 or n == 853 or n == 857 or n == 859 or n == 863 or n == 877 or n == 881 or n == 883 or n == 887 or n == 907 or n == 911 or n == 919 or n == 929 or n == 937 or n == 941 or n == 947 or n == 953 or n == 967 or n == 971 or n == 977 or n == 983 or n == 991 or n == 997:\n    \n        \ndef get_primes_below(n):\n    '''\n    Write a function that returns all the prime numbers less than n.\n    '''\n    \n    if n == 1:\n        return []\n    \n    return [x for x in range(1, n) if is_prime(x)]\n    \n    \ndef make_change(amount, coins):\n    '''\n    Write a function that takes in an amount and a list of coin denominations. The function should return the number of ways to make change for the amount using the coins in the list.\n    '''\n    \n    return len([1 for i in range(1, len(coins)) if coins[i] <= amount])\n    \n    \ndef make_change_dynamically(amount, coins):\n    '''\n    Write a function that takes in an amount and a list of coin denominations. The function should return the number of ways to make change for the amount using the coins in the list.\n    '''\n    \n    ways = [0 for i in range(amount + 1)]\n    ways[0] = 1\n    for c in coins:\n        for i in range(c, amount + 1):\n            ways[i] += ways[i - c]\n            \n    return ways[amount]\n    \n    \ndef make_change_bottom_up(amount, coins):\n    '''\n    Write a function that takes in an amount and a list of coin denominations. The function should return the number of ways to make change for the amount using the coins in the list.\n    '''\n    \n    ways = [0 for i in range(amount + 1)]\n    ways[0] = 1\n    \n    for i in range(1, amount + 1):\n        for c in coins:\n            if i - c >= 0:\n                ways[i] += ways[i - c]\n                \n    return ways[amount]\n    \n    \ndef make_change_recursive(amount, coins, index=0):\n    '''\n    Write a function that takes in an amount and a list of coin denominations. The function should return the number of ways to make change for the amount using the coins in the list.\n    '''\n    \n    if amount == 0:\n        return 1\n    \n    elif index == len(coins):\n        return 0\n    \n    return make_change_recursive(amount, coins, index + 1) + make_change_recursive(amount - coins[index], coins, index)\n    \n    \ndef make_change_bottom_up_recursive(amount, coins):\n    '''\n    Write a function that takes in an amount and a list of coin denominations. The function should return the number of ways to make change for the amount using the coins in the list.\n    '''\n    \n    ways = [0 for i in range(amount + 1)]\n    ways[0] = 1\n    \n    for i in range(1, amount + 1):\n        for c in coins:\n            if i - c >= 0:\n                ways[i] += ways[i - c]\n                \n    return ways[amount]\n    \n    \nde"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, val in enumerate(dlist):\n        if val == item:\n            return (True, index)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return False, -1\n    elif item == dlist[0]:\n        return True, 0\n    elif item > dlist[0]:\n        return sequential_search(dlist[1:], item)\n    else:\n        return sequential_search(dlist[1:], item)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    return sequential_search_helper(dlist, item, 0)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = 0\n    found = False\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    num = 0\n    for num in range(0, len(dlist)):\n        if dlist[num] == item:\n            return True, num\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    idx = 0\n    for i in range(0, len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            break\n    return (index, item)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    x = set(test_list)\n    if len(x) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    x = len(test_list)\n    for i in range(x):\n        for j in range(x):\n            if i!= j:\n                if test_list[i] == test_list[j]:\n                    return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if(test_list[i]==test_list[j]):\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    l=test_list\n    a=[]\n    for i in l:\n        if i not in a:\n            a.append(i)\n    if len(a)==len(l):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1 = [1, 2, 3, 4, 5]\n    nums2 = [1, 1, 2, 3, 5]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for num in nums1:\n        if num not in nums2:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1.pop()\n    nums2.pop()\n    return list(map(lambda x,y: x-y, nums1,nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x: x[0] - x[1], list(zip(nums1, nums2))))\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1_cpy = nums1\n    nums2_cpy = nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1-n2 for n1,n2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert len(nums1) == len(nums2), \"Error: Lists are not of equal size\"\n    res_list = []\n    for i in range(len(nums1)):\n        res_list.append(nums1[i] - nums2[i])\n    return res_list\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # print (n)\n    # print (type(n))\n    # n = int(input())\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return len(str(n)) == len(set(str(n)))\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    for i in n:\n        if int(n.count(i)) > int(i):\n            return False\n    return True\n    \n    \n    \ndef find_contiguous_set(x,y):\n    '''\n    Write a Python function that takes in two integers, x and y, and returns the number of contiguous, non-empty sublists that exist within list x.\n    '''\n    import itertools\n    return len([list(item) for item in itertools.combinations(x,y) if list(item)])\n    \n    \n    \n    \ndef all_the_same(elements):\n    '''\n    Write a Python function that returns True if all elements in the list are the same and False otherwise.\n    '''\n    if len(elements) == 0:\n        return True\n    for i in range(len(elements)):\n        if elements[0]!= elements[i]:\n            return False\n    return True\n    \n    \n    \n    \ndef is_palindrome(n):\n    '''\n    Write a Python function that returns True if the string passed into it is a palindrome and False otherwise.\n    '''\n    if len(n) < 2:\n        return True\n    if n[0] == n[-1]:\n        return is_palindrome(n[1:-1])\n    else:\n        return False\n        \n    \n    \ndef is_in(s1, s2):\n    '''\n    Write a Python function that returns True if every character in the first string appears in the same position in the second string and False otherwise.\n    '''\n    return len([1 for i in range(len(s1)) if s1[i] == s2[i]]) == len(s1)\n    \n    \n    \ndef is_subset(l1, l2):\n    '''\n    Write a Python function that takes in two lists, l1 and l2, and returns True if the second list is a subset of the first list and False otherwise.\n    '''\n    if len(l1) > len(l2):\n        return False\n    for i in range(len(l2)):\n        if l2[i] not in l1:\n            return False\n    return True\n    \n    \n    \ndef count_evens(nums):\n    '''\n    Write a Python function that returns the number of even integers in a given list of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i % 2 == 0:\n            count += 1\n    return count\n    \n    \n    \ndef sum_even_values(nums):\n    '''\n    Write a Python function that returns the sum of all the even integers in a given list of integers.\n    '''\n    sum = 0\n    for i in nums:\n        if i % 2 == 0:\n            sum += i\n    return sum\n    \n    \n    \n    \ndef is_prime(n):\n    '''\n    Write a Python function that returns True if the given number is prime and False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \n    \ndef count_primes(n):\n    '''\n    Write a Python function that returns the number of prime numbers that exist up to and including a given number.\n    '''\n    return len([2 for i in range(2,n) if is_prime(i)])\n    \n    \n    \n    \ndef get_primes(n):\n    '''\n    Write a Python function that returns a list of all the prime numbers up to and including a given number.\n    '''\n    return [i for i in range(2,n) if is_prime(i)]\n    \n    \n    \ndef contains_palindrome(n):\n    '''\n    Write a Python function that returns True if the given string contains a palindrome and False otherwise.\n    '''\n    return any([is_palindrome(i) for i in str(n)])\n    \n    \n    \ndef get_largest_palindrome(n):\n    '''\n    Write a Python function that returns the largest palindrome that is a product of two 3-digit numbers.\n    '''\n    max = 0\n    for i in range(999,99,-1):\n        for j in range(999,99,-1):\n            if int(str(i*j)[::-1]) > max and contains_palindrome(int(str(i*j)[::-1])):\n                max = int(str(i*j)[::-1])\n    return max\n    \n    \n    \ndef get_factors(n):\n    '''\n    Write a Python function that returns a list of all the factors of a given integer.\n    '''\n    return [i for i in range(1,n+1) if n % i == 0]\n    \n    \n    \ndef get_primes_up_to_n(n):\n    '''\n    Write a Python function that returns a list of all the primes up to and including a given integer.\n    '''\n    return get_primes(n)\n    \n    \n    \ndef get_sum_of_squares(n):\n    '''\n    Write a Python function that returns the sum of all the squares of the integers up to and including a given integer.\n    '''\n    return sum([i**2 for i in range(1,n+1)])\n    \n    \n    \ndef get_sum_of_even_squares(n):\n    '''\n    Write a Python function that returns the sum of all even squares of the integers up to and including a given integer.\n    '''\n    return sum([i**2 for i in range(1,n+1) if i % 2 == 0])\n    \n    \n    \ndef get_sum_of_odd_squares(n):\n    '''\n    Write a Python function that returns the sum of all odd squares of the integers up to and including a given integer.\n    '''\n    return sum([i**2 for i in range(1,n+1) if i % 2!= 0])\n    \n    \n    \ndef print_nth_prime(n):\n    '''\n    Write a Python function that prints all the prime numbers up to and including a given integer.\n    '''\n    return print(get_primes(n))\n    \n    \n    \ndef get_nth_prime(n):\n    '''\n    Write a Python function that returns the nth prime number.\n    '''\n    return get_primes(n)[-1]\n    \n    \n    \ndef get_sum_of_digits(n):\n    '''\n    Write a Python function that returns the sum of the digits of a given integer.\n    '''\n    return sum([int(i) for i in str(n)])\n    \n    \n    \ndef get_sum_of_prime_digits(n):\n    '''\n    Write a Python function that returns the sum of the digits of a given integer that are prime.\n    '''\n    return sum([int(i) for i in str(n) if is_prime(int(i))])\n    \n    \n    \ndef get_sum_of_even_digits(n):\n    '''\n    Write a Python function that returns the sum of the digits of a given integer that are even.\n    '''\n    return sum([int(i) for i in str(n) if int(i) % 2 == 0])\n    \n    \n    \ndef get_sum_of_odd_digits(n):\n    '''\n    Write a Python function that returns the sum of the digits of a given integer that are odd.\n    '''\n    return sum([int(i) for i in str(n) if int(i) % 2!= 0])\n    \n    \n    \ndef get_largest_prime_factor(n):\n    '''\n    Write a Python function that returns the largest prime factor of a given integer.\n    '''\n    return max([i for i in range(1,n) if n % i == 0 and is_prime(i)])\n    \n    \n    \ndef get_sum_of_largest_prime_factors(n):\n    '''\n    Write a Python function that returns the sum of the largest prime factors of all the integers up to and including a given integer.\n    ''"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    while n: \n        last_digit = n % 10\n        if last_digit > frequency[last_digit]:\n            return False\n        frequency[last_digit] -= 1\n        n //= 10\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count_dict = {}\n    for num in str(n):\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for key, value in count_dict.items():\n        if value > int(key):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    for i in n:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    print(d)\n    for i in d.values():\n        if i > 9:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    for digit in str(n):\n        if d.get(digit, 0) > 0:\n            return False\n        else:\n            d[digit] = 1\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    import collections\n    s = str(n)\n    count = collections.Counter(s)\n    return all([count[i]<=int(i) for i in count])\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10\n    while(n): \n        freq[n%10] += 1\n        n //= 10\n    for i in freq: \n        if i > 0:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_frequency = [0] * 10\n    while n > 0:\n        digit_frequency[n%10] += 1\n        n//=10\n    for num in digit_frequency:\n        if num > num:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return not False in [x==element for x in list]\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Use if statements to check if the element is in each item\n    # return True if the element is in every item in the list\n    # return False if the element is not in every item in the list\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    for i in list:\n        if i!= element:\n            return False\n    return True\ndef is_anagram(word1,word2):\n    '''\n    Write a function that takes in two strings, checks if the strings are anagrams of each other (ignoring the case and the spaces). \n    '''\n    word1 = word1.lower().replace(' ','')\n    word2 = word2.lower().replace(' ','')\n    if len(word1)!= len(word2):\n        return False\n    \n    freq_dict = {}\n    for c in word1:\n        if c in freq_dict:\n            freq_dict[c] += 1\n        else:\n            freq_dict[c] = 1\n    for c in word2:\n        if c in freq_dict:\n            freq_dict[c] -= 1\n        else:\n            return False\n    for key in freq_dict:\n        if freq_dict[key]!= 0:\n            return False\n    return True\n    \ndef get_unique(list):\n    '''\n    Write a function that takes in a list and checks whether the list has duplicate items.\n    '''\n    for i in list:\n        if list.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n        return False\n    \ndef check_element_without_boolean(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether any items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x==element for x in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #Check the input list for the element and return true or false\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Your code here\n    return bool(re.search(r\"(ab){2}|(ab){3}\", text))\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"ab{2,3}\"\n    return re.search(pattern, text)!= None\n    # return re.search(pattern, text).group() == 'ab{2,3}'\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # print(text)\n    return bool(re.search(r'ab{2}|ab{3}',text))\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    search = re.search(r'ab{2,3}',text)\n    if search:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = '(a.{2,3})b'\n    if re.search(pattern,text):\n        print('A character followed by two or three \"b\" characters')\n    else:\n        print('No match')\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall('ab{2,3}', text)\n    if x:\n        return 'yes'\n    else:\n        return 'no'\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r\"a.{2,3}b\",text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.findall(r\"(?=.*a.{2,3}b)\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    string_test = text\n    string_test = string_test.lower()\n    string_test = re.sub(r'\\s+', '', string_test)\n    if 'ab' in string_test:\n        return 'String contains ab.'\n    if 'aba' in string_test:\n        return 'String contains aba.'\n    if 'abb' in string_test:\n        return 'String contains abb.'\n    else:\n        return 'String does not contain ab.'\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search('a.b{2,3}', text)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = sum(a[:k])\n    for i in range(len(a) - k):\n        sum_ = sum(a[i:i + k])\n        if sum_ > max_sum:\n            max_sum = sum_\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    maximum_sum = -99999\n    sum_at_any_index = 0\n    for i in range(0, n): \n        for j in range(i, n * k + 1): \n            sum_at_any_index += a[j % n] \n            if (maximum_sum < sum_at_any_index): \n                maximum_sum = sum_at_any_index\n    return maximum_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    return max_sub_array(a, n, k, False)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    sm = 0\n    i = 0\n    j = 0\n    \n    # Initialize the sum\n    while i < n:\n        sm = 0\n        j = i\n        \n        while j < k*n:\n            sm += a[j%n]\n            j += 1\n            \n        # If the sum is greater than the max, update\n        if sm > max_sum:\n            max_sum = sm\n        \n        # Update the index\n        i += 1\n        \n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0 or n == 1:\n        return -1\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def maxSubArraySum(a, n, k): \n    \n        # If we have reached the maximum number of repeats, \n        # then return the maximum possible sum. \n        if (k == 0): \n            return 0\n    \n        # We initialize the maximum sum at the maximum value \n        # among the maximum value of the two cases. \n        s = max(maxSubArraySum(a, n, k-1), \n                    max_sub_array_sum_repeated(a, n, k-1) + sum(a)) \n    \n        # Repeat until the maximum sum exceeds the length of array. \n        while (k*n <= s): \n            s = max(maxSubArraySum(a, n, k-1), \n                        max_sub_array_sum_repeated(a, n, k-1) + sum(a)) \n        return s\n    \n    def max_sub_array_sum_repeated_recursive(a, n): \n        \n        # If we have reached the maximum number of repeats, \n        # then return the maximum possible sum. \n        if (n == 0): \n            return 0\n    \n        # We initialize the maximum sum at the maximum value \n        # among the maximum value of the two cases. \n        return max(max_sub_array_sum_repeated_recursive(a, n-1), \n                        max_sub_array_sum_repeated(a, n-1, n)) \n    \n    \n    def max_sub_array_sum_k_times_recursive(a, n, k): \n        \n        # If k equals to the maximum number of times the array can \n        # be repeated, then return the maximum possible sum. \n        if (k == 0): \n            return 0\n    \n        # If the array can be repeated k times, then \n        # we can construct a subarray by repeating the array \n        # k times and add the sum of the original array, \n        # which is stored in a[]. \n        if (k*n == len(a)): \n            return sum(a) \n    \n        # We initialize the maximum sum at the maximum value \n        # among the maximum value of the two cases. \n        return max(max_sub_array_sum_k_times_recursive(a, n, k-1), \n                        max_sub_array_sum_k_times_recursive(a, n, k) + sum(a[(k*n)-n:k*n])) \n    \n    def maxSubArraySum(a, n): \n        \n        # If k equals to the maximum number of times the array can \n        # be repeated, then return the maximum possible sum. \n        if (k == 0): \n            return 0\n    \n        # If the array can be repeated k times, then \n        # we can construct a subarray by repeating the array \n        # k times and add the sum of the original array, \n        # which is stored in a[]. \n        if (k*n == len(a)): \n            return sum(a) \n    \n        # We initialize the maximum sum at the maximum value \n        # among the maximum value of the two cases. \n        return max(maxSubArraySum(a, n, k-1), \n                    maxSubArraySum(a, n, k) + sum(a[(k*n)-n:k*n])) \n    \n    return maxSubArraySum(a, n) \n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Sort the array.\n    a.sort(reverse=True)\n    # Initialize the result.\n    res = a[0]\n    # The variable to track the sum of subarray.\n    sum_subarray = 0\n    # The variable to track the current index.\n    j = 0\n    for i in range(n):\n        # If the sum of subarray is greater than the result then update the result.\n        if sum_subarray > res:\n            res = sum_subarray\n            # Update the index.\n            j = i\n        # Update the sum of subarray.\n        sum_subarray += a[i]\n        # Update the array to repeat.\n        a[i] = a[i] * (k - 1)\n    return res\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = sum(a[:k])\n    max_sum_repeated = sum(a[:k])\n    for i in range(n-k):\n        max_sum_repeated = max_sum_repeated + a[i+k] - a[i]\n        max_sum = max(max_sum, max_sum_repeated)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    curr_sum = 0\n    max_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if i >= k:\n            curr_sum -= a[i-k]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(n): \n        a[i] = a[i] % k \n    n = len(a) \n    max_sum = 0\n    for i in range(n): \n        curr_sum = 0\n        for j in range(i, n): \n            curr_sum = curr_sum + a[j] \n            if (curr_sum <= max_sum): \n                break\n            if (curr_sum % k == 0 and curr_sum > max_sum): \n                max_sum = curr_sum \n        if (max_sum >= i): \n            break\n    return max_sum \n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i*i for i in range(1,n+1) if i%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if(i%2==0):\n            sum += i*i\n    return sum\n    \ndef square_Sum2(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)*(n+2)//6\n    \ndef print_Pascal_Triangle(n):\n    '''\n    Write a python function to print the first n rows of Pascal triangle\n    '''\n    for i in range(n):\n        for j in range(i+1):\n            if(j==0 or j==i):\n                print(1,end=\" \")\n            else:\n                print(int(factorial(i)/(factorial(j)*factorial(i-j))),end=\" \")\n        print()\n        \ndef print_reverse_Pascal_Triangle(n):\n    '''\n    Write a python function to print the first n rows of Pascal triangle in reverse order\n    '''\n    for i in range(n):\n        for j in range(i+1):\n            if(j==0 or j==i):\n                print(1,end=\" \")\n            else:\n                print(int(factorial(n-i)/(factorial(j)*factorial(i-j))),end=\" \")\n        print()\n        \ndef print_reverse_Pascal_Triangle2(n):\n    '''\n    Write a python function to print the first n rows of Pascal triangle in reverse order\n    '''\n    for i in range(n):\n        for j in range(n):\n            if(j==0 or j==i):\n                print(1,end=\" \")\n            else:\n                print(int(factorial(n-i)/(factorial(j)*factorial(i-j))),end=\" \")\n        print()\n        \ndef print_Pascal_Triangle_2(n):\n    '''\n    Write a python function to print the first n rows of Pascal triangle\n    '''\n    for i in range(n):\n        for j in range(n):\n            if(j==0 or j==i):\n                print(1,end=\" \")\n            else:\n                print(int(factorial(i)/(factorial(j)*factorial(i-j))),end=\" \")\n        print()\n        \ndef print_Pascal_Triangle3(n):\n    '''\n    Write a python function to print the first n rows of Pascal triangle\n    '''\n    for i in range(n):\n        print(\"\".join(map(lambda x: str(x), map(lambda x: int(factorial(n-i)/(factorial(j)*factorial(i-j))), range(i+1)))))\n        \ndef print_Pascal_Triangle4(n):\n    '''\n    Write a python function to print the first n rows of Pascal triangle\n    '''\n    for i in range(n):\n        print(\"\".join(map(lambda x: str(x), map(lambda x: int(factorial(n-i)/(factorial(j)*factorial(i-j))), range(i+1)))))\n        \ndef print_Pascal_Triangle5(n):\n    '''\n    Write a python function to print the first n rows of Pascal triangle\n    '''\n    a = [1]\n    b = [1]\n    for i in range(n):\n        print(a)\n        a = [1] + [a[j] + b[j] for j in range(len(a))] + [1]\n        b = [0] + [b[j] + a[j] for j in range(len(b))] + [0]\n    \ndef print_Pascal_Triangle_3(n):\n    '''\n    Write a python function to print the first n rows of Pascal triangle\n    '''\n    for i in range(n):\n        print(list(map(lambda x: int(factorial(n-i)/(factorial(j)*factorial(i-j))), range(i+1))))\n        \ndef print_Pascal_Triangle_4(n):\n    '''\n    Write a python function to print the first n rows of Pascal triangle\n    '''\n    for i in range(n):\n        print(list(map(lambda x: int(factorial(n-i)/(factorial(j)*factorial(i-j))), range(i+1))))\n    \ndef print_Pascal_Triangle_5(n):\n    '''\n    Write a python function to print the first n rows of Pascal triangle\n    '''\n    a = [1]\n    b = [1]\n    for i in range(n):\n        print(a)\n        a = [1] + [a[j] + b[j] for j in range(len(a))] + [1]\n        b = [0] + [b[j] + a[j] for j in range(len(b))] + [0]\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # total = 0\n    # for x in range(n+1):\n    #     total += x * x\n    # return total\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    n = int(n)\n    return sum([i**2 for i in range(1,n+1,2)])\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Declare the variable \n    sum = 0\n    # Logic \n    while n:\n        sum += n*n\n        n -= 2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        return(\"Invalid input\")\n    if n == 0:\n        return(0)\n    sum = 0\n    for i in range(n):\n        sum = sum + (i*i)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #base case\n    if n==1:\n        return 0\n    #recursive case\n    else:\n        return n**2 + square_Sum(n-2)\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(x*x for x in range(2,n+1,2))\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n * (n + 1) * ((2 * n) + 1) // 6\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s=0\n    for i in range(0,n):\n        s=s+i**2\n    return s\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list1 = [[1, 2, 3], [4, 5], [6, 7, 8, 9, 10]]\n    length = 0\n    for i in list1:\n        length = max(length, len(i))\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length_max=len(list1[0])\n    for i in list1:\n        if(length_max<len(i)):\n            length_max=len(i)\n    return length_max\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    max_length = 0\n    for i in range(0, len(list1)):\n        if(len(list1[i]) > max_length):\n            max_length_list = list1[i]\n            max_length = len(max_length_list)\n    return(max_length_list)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # your code here\n    length = []\n    for i in list1:\n        length.append(len(i))\n    print(length)\n    length.sort()\n    return length[-1]\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for l in list1:\n        if(len(l) > max_length):\n            max_length = len(l)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if not list1:\n        return 0\n    length = 0\n    for element in list1:\n        if len(element) > length:\n            length = len(element)\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=0\n    for list_ele in list1:\n        if len(list_ele)>max_len:\n            max_len=len(list_ele)\n    return max_len\n    \ndef check_contains(text, pattern):\n    '''\n    Write a function that checks whether a text contains all the characters of a pattern.\n    '''\n    #all characters of pattern are in the text\n    if len(pattern)<=len(text):\n        for i in range(len(pattern)):\n            if pattern[i] in text:\n                text=text[1:]\n            else:\n                return False\n        return True\n    else:\n        return False\n    \ndef substring(s, d):\n    '''\n    Write a function that takes a string and a number. Return a substring of that string of the\n    given length.\n    '''\n    return s[d:]\n    \ndef substring_index(s, d):\n    '''\n    Write a function that takes a string and a number. Return a substring of that string of the\n    given length.\n    '''\n    return s[d:]\n    \ndef longest_consecutive_substring(s):\n    '''\n    Write a function that takes a string and returns the longest consecutive substring of\n    that string.\n    '''\n    return max(s.split(' '), key=len)\n    \ndef longest_consecutive_substring_v2(s):\n    '''\n    Write a function that takes a string and returns the longest consecutive substring of\n    that string.\n    '''\n    max_len=0\n    for i in range(len(s)):\n        if s[i]==s[i+1]:\n            substr=s[i]\n        else:\n            substr=s[i]+s[i+1]\n        for j in range(i+1, len(s)):\n            if s[j]==s[j+1]:\n                substr+=s[j]\n            else:\n                break\n        if len(substr)>max_len:\n            max_len=len(substr)\n            max_str=substr\n    return max_str\n    \ndef rotate(list1, d):\n    '''\n    Write a function that rotates a list by d elements.\n    '''\n    return list1[d:]+list1[:d]\n    \ndef rotate_v2(list1, d):\n    '''\n    Write a function that rotates a list by d elements.\n    '''\n    return list1[d:]+list1[:d]\n    \ndef rotate_around_k(list1, k):\n    '''\n    Write a function that rotates a list around a k element.\n    '''\n    return list1[k:]+list1[:k]\n    \ndef rotate_around_k_v2(list1, k):\n    '''\n    Write a function that rotates a list around a k element.\n    '''\n    return list1[k:]+list1[:k]\n    \ndef square_of_sum(list1):\n    '''\n    Write a function that returns the square of the sum of a list of numbers.\n    '''\n    return (sum(list1))**2\n    \ndef square_of_sum_v2(list1):\n    '''\n    Write a function that returns the square of the sum of a list of numbers.\n    '''\n    return sum(list1)**2\n    \ndef square_of_sum_round(list1):\n    '''\n    Write a function that returns the square of the sum of a list of numbers.\n    '''\n    return round(sum(list1)**2)\n    \ndef square_of_sum_round_v2(list1):\n    '''\n    Write a function that returns the square of the sum of a list of numbers.\n    '''\n    return round(sum(list1)**2)\n    \ndef reverse_string(s):\n    '''\n    Write a function that reverses a string.\n    '''\n    return s[::-1]\n    \ndef reverse_string_v2(s):\n    '''\n    Write a function that reverses a string.\n    '''\n    rev=[]\n    for i in range(len(s)):\n        rev.append(s[len(s)-1-i])\n    return ''.join(rev)\n    \ndef reverse_string_v3(s):\n    '''\n    Write a function that reverses a string.\n    '''\n    return s[::-1]\n    \ndef longest_palindrome(s):\n    '''\n    Write a function that returns the longest palindrome in a string.\n    '''\n    return max(s.split(' '), key=len)\n    \ndef longest_palindrome_v2(s):\n    '''\n    Write a function that returns the longest palindrome in a string.\n    '''\n    max_len=0\n    for i in range(len(s)):\n        j=0\n        while i-j>=0 and i+j<len(s):\n            if s[i-j]==s[i+j]:\n                substr=s[i-j:i+j+1]\n                if len(substr)>max_len:\n                    max_len=len(substr)\n                    max_str=substr\n                j+=1\n            else:\n                break\n    return max_str\n    \ndef longest_palindrome_v3(s):\n    '''\n    Write a function that returns the longest palindrome in a string.\n    '''\n    max_len=0\n    for i in range(len(s)):\n        j=0\n        while i-j>=0 and i+j+1<len(s):\n            if s[i-j]==s[i+j+1]:\n                substr=s[i-j:i+j+1]\n                if len(substr)>max_len:\n                    max_len=len(substr)\n                    max_str=substr\n                j+=1\n            else:\n                break\n    return max_str\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function that takes a list and removes any duplicates from the list.\n    '''\n    return list(dict.fromkeys(list1))\n    \ndef remove_duplicates_v2(list1):\n    '''\n    Write a function that takes a list and removes any duplicates from the list.\n    '''\n    return list(set(list1))\n    \ndef remove_element(list1, d):\n    '''\n    Write a function that takes a list and removes the given element.\n    '''\n    return [i for i in list1 if i!=d]\n    \ndef remove_element_v2(list1, d):\n    '''\n    Write a function that takes a list and removes the given element.\n    '''\n    i=0\n    while i<len(list1):\n        if list1[i]==d:\n            del list1[i]\n        else:\n            i+=1\n    return list1\n    \ndef remove_element_v3(list1, d):\n    '''\n    Write a function that takes a list and removes the given element.\n    '''\n    while d in list1:\n        list1.remove(d)\n    return list1\n    \ndef move_element_to_end(list1, d):\n    '''\n    Write a function that takes a list and an element and moves that element to the end of the list.\n    '''\n    list1.remove(d)\n    list1.append(d)\n    return list1\n    \ndef move_element_to_end_v2(list1, d):\n    '''\n    Write a function that takes a list and an element and moves that element to the end of the list.\n    '''\n    return [i for i in list1 if i!=d]+[d]\n    \ndef move_element_to_end_v3(list1, d):\n    '''\n    Write a function that takes a list and an element and moves that element to the end of the list.\n    '''\n    i=0\n    while i<len(list1):\n        if list1[i]==d:\n            list1.pop(i)\n            lis"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i)>max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        max_len = len(i) if max_len < len(i) else max_len\n    return max_len\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    '''\n    Approach :\n    '''\n    # Base cases:\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        if k < 3:\n            return 0\n        if k == 3:\n            return 2\n    # Initialize dp array\n    # 0, 1, 2,..., n\n    dp = [0] * (n+1)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base cases \n    if (n == 0 or k == 0): \n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    mod = 1000000007\n    if n == 1:\n        return 1\n    dp = [[0 for _ in range(k)] for _ in range(n)]\n    for i in range(k):\n        dp[0][i] = 1\n    \n    for i in range(n):\n        dp[i][0] = 1\n    \n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j]\n            if i > 1:\n                dp[i][j] += dp[i-2][j-1]\n            dp[i][j] %= mod\n    return dp[n-1][k-1]\n    \ndef count_no_of_ways_memo(n, k):\n    mod = 1000000007\n    dp = [[-1 for _ in range(k)] for _ in range(n)]\n    return count_no_of_ways_memo_util(n, k, dp)\n    \ndef count_no_of_ways_memo_util(n, k, dp):\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if k == 1:\n        return n\n    if dp[n-1][k-1]!= -1:\n        return dp[n-1][k-1]\n        \n    dp[n-1][k-1] = count_no_of_ways_memo_util(n-1, k, dp) + count_no_of_ways_memo_util(n-2, k-1, dp)\n    return dp[n-1][k-1] % mod\n    \ndef count_no_of_ways_tab(n, k):\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][1] = 1\n    for i in range(1, k+1):\n        dp[1][i] = 1\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1]\n    return dp[n][k] % 1000000007\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # n = 6\n    # k = 5\n    # print(count_no_of_ways(n,k))\n    # print(count_no_of_ways_tb(n,k))\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [0] * k\n    ways[0] = 1\n    for i in range(1, n + 1):\n        for j in range(k):\n            if j > 0: \n                ways[j] = ways[j] + ways[j - 1] \n            else: \n                ways[j] = ways[j] + ways[k - 1]\n    return ways[k - 1] \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Create a table to store the number of ways for each fence length\n    ways = [0 for i in range(n+1)]\n    \n    # There is only one way to paint a fence of length 1\n    ways[1] = 1\n    \n    for i in range(2, n+1):\n        # Iterate over all possible ways to paint the fence of length i\n        for j in range(1, k+1):\n            # For the first fence, the only valid coloring would be j since it has only one way\n            # For the second fence, the valid coloring would be the number of ways to paint the fence of length i-1\n            # for the third fence, the valid coloring would be the number of ways to paint the fence of length i-2\n            # and so on...\n            ways[i] += ways[i-1]\n    \n    return ways[n]\n    \nprint(count_no_of_ways(4, 4)) # 6\nprint(count_no_of_ways(5, 5)) # 10\nprint(count_no_of_ways(6, 6)) # 14\nprint(count_no_of_ways(7, 7)) # 22\nprint(count_no_of_ways(8, 8)) # 30"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or k == 1: \n        return 1\n    if n == 2: \n        return k \n    if k == 1: \n        return n \n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k) \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    c = [0] * (k + 1)\n    c[0] = 1\n    c[1] = 1\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            c[j] = c[j] + c[j - 1]\n    return c[k]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k\n    if k == 1:\n        return n\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    arr = [0] * k\n    arr[0] = 1\n    arr[1] = 2\n    for i in range(n + 1):\n        if i < 2:\n            arr[i] = 1\n        else:\n            arr[i] = arr[i-1] + arr[i-2]\n    return arr[n]\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        a=n\n        b=m\n    else:\n        a=m\n        b=n\n    q=a/b\n    print(q)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if n>m:\n        quotient = n/m\n    else:\n        quotient = m/n\n        \n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n%m == 0:\n        print(n//m)\n    else:\n        print(n//m+1)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n / m)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 1\n    elif n > m:\n        return 0\n    return find(n-m, m) + find(n,m//2)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Your code here\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    print(m // n)\n    \n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m<n:\n        return -1\n    elif m==n:\n        return 0\n    else:\n        return int((n/m))\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #Your code here\n    h = h**2\n    w = w**2\n    x = math.sqrt(h+w)\n    return x\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print('The third side of right angled triangle is', (w**2 + h**2)**0.5)\n    return (w**2 + h**2)**0.5\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\ndef is_rightangled(s1,s2,s3):\n    '''\n    Write a function that takes 3 sides and returns True if they are a right angled triangle and False if they are not.\n    '''\n    return s1**2 + s2**2 == s3**2\ndef power_numbers(num1,num2):\n    '''\n    Write a function that takes 2 numbers and returns True if their nth power of each other equals 1.\n    '''\n    return math.log(num1)**num2 + math.log(num2)**num1 == 1\ndef sum_of_numbers(n):\n    '''\n    Write a function that takes a number and returns the sum of all the numbers between 1 and the number.\n    '''\n    return n*(n+1)//2\ndef square_of_sum(n):\n    '''\n    Write a function that takes a number and returns the square of the sum of all the numbers between 1 and the number.\n    '''\n    return sum_of_numbers(n)**2\ndef sum_of_squares(n):\n    '''\n    Write a function that takes a number and returns the sum of the squares of all the numbers between 1 and the number.\n    '''\n    return sum(i**2 for i in range(1,n+1))\ndef difference_of_squares(n):\n    '''\n    Write a function that takes a number and returns the difference between the sum of the squares of all the numbers between 1 and the number and the square of the sum of all the numbers between 1 and the number.\n    '''\n    return square_of_sum(n) - sum_of_squares(n)\ndef odd_composite(n):\n    '''\n    Write a function that takes a number and returns True if the number is odd and composite and False if the number is odd and prime.\n    '''\n    return n%2!= 0 and n%3!= 0 and n%5!= 0\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime and False if the number is not prime.\n    '''\n    return n < 2 or n == 4 or n == 6 or n == 8 or n == 9 or n == 11 or n == 13 or n == 17 or n == 19 or n == 23 or n == 29 or n == 31 or n == 37 or n == 41 or n == 43 or n == 47 or n == 53 or n == 59 or n == 61 or n == 67 or n == 71 or n == 73 or n == 79 or n == 83 or n == 89 or n == 97 or n == 101 or n == 103 or n == 107 or n == 109 or n == 113 or n == 127 or n == 131 or n == 137 or n == 139 or n == 149 or n == 151 or n == 157 or n == 163 or n == 167 or n == 173 or n == 179 or n == 181 or n == 191 or n == 193 or n == 197 or n == 199\ndef sum_of_primes(n):\n    '''\n    Write a function that takes a number and returns the sum of all the prime numbers between 1 and the number.\n    '''\n    return sum(i for i in range(1,n+1) if is_prime(i))\ndef sum_of_squares_of_primes(n):\n    '''\n    Write a function that takes a number and returns the sum of the squares of all the prime numbers between 1 and the number.\n    '''\n    return sum(i**2 for i in range(1,n+1) if is_prime(i))\ndef difference_between_squares_of_sum_of_primes(n):\n    '''\n    Write a function that takes a number and returns the difference between the sum of the squares of all the prime numbers between 1 and the number and the sum of the squares of all the prime numbers between 1 and the number.\n    '''\n    return sum_of_squares_of_primes(n) - sum_of_squares(n)\ndef square_of_sum_of_squares(n):\n    '''\n    Write a function that takes a number and returns the square of the sum of the squares of all the prime numbers between 1 and the number.\n    '''\n    return sum_of_squares_of_primes(n)**2\ndef difference_between_sum_of_squares_of_sum_and_squares_of_sum(n):\n    '''\n    Write a function that takes a number and returns the difference between the sum of the squares of all the prime numbers between 1 and the number and the sum of all the squares of the prime numbers between 1 and the number.\n    '''\n    return sum_of_squares(n) - sum_of_squares_of_primes(n)\ndef number_of_prime_numbers(n):\n    '''\n    Write a function that takes a number and returns the number of prime numbers between 1 and the number.\n    '''\n    return len([i for i in range(1,n+1) if is_prime(i)])\ndef number_of_prime_numbers_between_one_and_n(n):\n    '''\n    Write a function that takes a number and returns the number of prime numbers between 1 and the number.\n    '''\n    return number_of_prime_numbers(n) - number_of_prime_numbers(n-1)\ndef sum_of_all_odd_composite_numbers(n):\n    '''\n    Write a function that takes a number and returns the sum of all the odd composite numbers between 1 and the number.\n    '''\n    return sum(i for i in range(1,n+1) if is_prime(i) and i%2!= 0)\ndef sum_of_all_multiples_of_3_or_5(n):\n    '''\n    Write a function that takes a number and returns the sum of all the multiples of 3 or 5 between 1 and the number.\n    '''\n    return sum(i for i in range(1,n+1) if i%3 == 0 or i%5 == 0)\ndef sum_of_all_multiples_of_3_or_5_between_one_and_n(n):\n    '''\n    Write a function that takes a number and returns the sum of all the multiples of 3 or 5 between 1 and the number.\n    '''\n    return sum_of_all_multiples_of_3_or_5(n) - sum_of_all_multiples_of_3_or_5(n-1)\ndef list_of_multiples_of_3_or_5_between_one_and_n(n):\n    '''\n    Write a function that takes a number and returns a list of all the multiples of 3 or 5 between 1 and the number.\n    '''\n    return [i for i in range(1,n+1) if i%3 == 0 or i%5 == 0]\ndef list_of_multiples_of_3_or_5_between_one_and_n(n):\n    '''\n    Write a function that takes a number and returns a list of all the multiples of 3 or 5 between 1 and the number.\n    '''\n    return list_of_multiples_of_3_or_5_between_one_and_n(n) - list_of_multiples_of_3_or_5_between_one_and_n(n-1)\ndef sum_of_all_multiples_of_3_or_5_below_n(n):\n    '''\n    Write a function that takes a number and returns the sum of all the multiples of 3 or 5 below the number.\n    '''\n    return sum_of_all_multiples_of_3_or_5_between_one_and_n(n) + n - 1\ndef sum_of_all_multiples_of_3_or_5_below_n(n):\n    '''\n    Write a function that takes a number and returns the sum of all the multiples of 3 or 5 below the number.\n    '''\n    return sum_of_all_multiples_of_3_or_5_between_one_and_n(n) - sum_of_all_multiples_of_3_or_5_between_one_and_n(n-1)\ndef list_of_multiples_of_3_or_5_below_n(n)"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    hypotenuse = math.sqrt((w**2)+(h**2))\n    side1 = hypotenuse/2\n    side2 = side1*2\n    return side2\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)**0.5\ndef otherside_rightangle2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\ndef otherside_rightangle3(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)**0.5\ndef otherside_rightangle4(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.pow(w,2)+math.pow(h,2)\ndef otherside_rightangle5(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(math.pow(w,2)+math.pow(h,2))\ndef otherside_rightangle6(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)**0.5\ndef otherside_rightangle7(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\ndef otherside_rightangle8(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+h**2)\ndef otherside_rightangle9(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.pow(w,2)+math.pow(h,2)\ndef otherside_rightangle10(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.pow(w,2)+math.pow(h,2)\ndef otherside_rightangle11(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(math.pow(w,2)+math.pow(h,2))\ndef otherside_rightangle12(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle13(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle14(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle15(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle16(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.pow(w,2)+math.pow(h,2)\ndef otherside_rightangle17(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.pow(w,2)+math.pow(h,2)\ndef otherside_rightangle18(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.pow(w,2)+math.pow(h,2)\ndef otherside_rightangle19(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.pow(w,2)+math.pow(h,2)\ndef otherside_rightangle20(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle21(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle22(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle23(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle24(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle25(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle26(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle27(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle28(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle29(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle30(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle31(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle32(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle33(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle34(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle35(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle36(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle37(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle38(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle39(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle40(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef otherside_rightangle41(w,h):\n    '''\n    Write a function to find the thir"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\nprint(otherside_rightangle(3,2))\nprint(otherside_rightangle(4,5))\nprint(otherside_rightangle(5,12))\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        return None\n    else:\n        s = math.sqrt(w**2 + h**2)\n        return s\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\ndef isosceles_triangle(a,b,c):\n    '''\n    Write a function to check if a triangle is an isosceles triangle.\n    '''\n    if a == b and b == c:\n        return True\n    elif a == b or b == c or c == a:\n        return True\n    else:\n        return False\ndef isosceles_triangle_rightangled(a,b,c):\n    '''\n    Write a function to check if a triangle is an isosceles right angled triangle.\n    '''\n    if a == b and b == c:\n        return True\n    elif a!= b and b!= c and c!= a:\n        return True\n    else:\n        return False\ndef is_rightangled(a,b,c):\n    '''\n    Write a function to check if a triangle is right angled.\n    '''\n    if a == b == c:\n        return True\n    else:\n        return False\ndef triangle_sides(a,b,c):\n    '''\n    Write a function to find the sides of a triangle.\n    '''\n    if a == b == c:\n        return 'Triangle is Equilateral.'\n    elif a == b or b == c or a == c:\n        return 'Triangle is Isosceles.'\n    else:\n        return 'Triangle is Scalene.'\ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return a + b + c\ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s = triangle_perimeter(a,b,c) / 2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_circumference(a,b,c):\n    '''\n    Write a function to find the circumference of a triangle.\n    '''\n    s = triangle_perimeter(a,b,c) / 2\n    return math.sqrt(3)*s\ndef triangle_angle(a,b,c):\n    '''\n    Write a function to find the angle opposite side a.\n    '''\n    return math.degrees(math.asin(b/c))\ndef triangle_hypotenuse(a,b,c):\n    '''\n    Write a function to find the hypotenuse of a triangle.\n    '''\n    s = triangle_perimeter(a,b,c) / 2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_incenter(a,b,c):\n    '''\n    Write a function to find the incenter of a triangle.\n    '''\n    s = triangle_perimeter(a,b,c) / 2\n    return (s - a) / 2\ndef triangle_incenter_alt(a,b,c):\n    '''\n    Write a function to find the incenter of a triangle using heron's formula.\n    '''\n    s = (a + b + c) / 2\n    return (s - a) / 2\ndef triangle_incenter_side(a,b,c):\n    '''\n    Write a function to find the side opposite the incenter of a triangle.\n    '''\n    return math.sqrt(a**2 + b**2)\ndef triangle_incenter_alt_side(a,b,c):\n    '''\n    Write a function to find the side opposite the incenter of a triangle using heron's formula.\n    '''\n    return math.sqrt(a**2 + b**2)\ndef triangle_reflection(a,b,c):\n    '''\n    Write a function to find the reflection of a triangle.\n    '''\n    s = triangle_perimeter(a,b,c) / 2\n    return s,s-a,s-b,s-c\ndef triangle_reflection_alt(a,b,c):\n    '''\n    Write a function to find the reflection of a triangle using heron's formula.\n    '''\n    s = (a + b + c) / 2\n    return s,s-a,s-b,s-c\ndef triangle_reflection_alt_side(a,b,c):\n    '''\n    Write a function to find the side opposite the incenter of a triangle using heron's formula.\n    '''\n    s = (a + b + c) / 2\n    return math.sqrt(s**2 - a**2), math.sqrt(s**2 - b**2), math.sqrt(s**2 - c**2)\ndef triangle_reflection_alt_side_alt(a,b,c):\n    '''\n    Write a function to find the side opposite the incenter of a triangle using heron's formula.\n    '''\n    s = (a + b + c) / 2\n    return math.sqrt(s**2 - a**2), math.sqrt(s**2 - b**2), math.sqrt(s**2 - c**2)\ndef triangle_reflection_alt_side_alt_alt(a,b,c):\n    '''\n    Write a function to find the hypotenuse of a triangle using heron's formula.\n    '''\n    s = (a + b + c) / 2\n    return math.sqrt(s**2 - a**2), math.sqrt(s**2 - b**2), math.sqrt(s**2 - c**2)\ndef right_angle_triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return (a*b)/2\ndef right_angle_triangle_circumference(a,b,c):\n    '''\n    Write a function to find the circumference of a right angled triangle.\n    '''\n    return a + b + c\ndef right_angle_triangle_hypotenuse(a,b,c):\n    '''\n    Write a function to find the hypotenuse of a right angled triangle.\n    '''\n    return math.sqrt(a**2 + b**2)\ndef right_angle_triangle_area_alt(a,b,c):\n    '''\n    Write a function to find the area of a right angled triangle using heron's formula.\n    '''\n    s = (a + b + c) / 2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef right_angle_triangle_circumference_alt(a,b,c):\n    '''\n    Write a function to find the circumference of a right angled triangle using heron's formula.\n    '''\n    s = (a + b + c) / 2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef right_angle_triangle_hypotenuse_alt(a,b,c):\n    '''\n    Write a function to find the hypotenuse of a right angled triangle using heron's formula.\n    '''\n    s = (a + b + c) / 2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef right_angle_triangle_area_alt_alt(a,b,c):\n    '''\n    Write a function to find the area of a right angled triangle using heron's formula.\n    '''\n    s = (a + b + c) / 2\n    return (s - a) / 2\ndef right_angle_triangle_circumference_alt_alt(a,b,c):\n    '''\n    Write a function to find the circumference of a right angled triangle using heron's formula.\n    '''\n    s = (a + b + c) / 2\n    return (s - a) / 2\ndef right_angle_triangle_hypotenuse_alt_alt(a,b,c):\n    '''\n    Write a function to find the hypotenuse of a right angled triangle using heron's formula.\n    '''\n    s = (a + b + c) / 2\n    return (s - a) / 2\ndef right_angle_triangle_reflection(a,b,c):\n    '"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    b=math.sqrt(w**2+h**2)\n    return b\nprint(otherside_rightangle(4,5))\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(\"The third side is\",(math.sqrt(w**2 + h**2))\n    \ndef draw_rectangle(w,h):\n    '''\n    Draw a rectangle given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_triangle(w,h):\n    '''\n    Draw a triangle given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_square(w,h):\n    '''\n    Draw a square given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_parallelogram(w,h):\n    '''\n    Draw a parallelogram given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_trapezoid(w,h):\n    '''\n    Draw a trapezoid given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_rhombus(w,h):\n    '''\n    Draw a rhombus given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_circle(r):\n    '''\n    Draw a circle given the radius.\n    '''\n    print(r)\n    \n    \ndef draw_ellipse(w,h):\n    '''\n    Draw an ellipse given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_pentagon(w,h):\n    '''\n    Draw a pentagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_hexagon(w,h):\n    '''\n    Draw a hexagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_heptagon(w,h):\n    '''\n    Draw a heptagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_octagon(w,h):\n    '''\n    Draw a octagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_nonagon(w,h):\n    '''\n    Draw a nonagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_decagon(w,h):\n    '''\n    Draw a decagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_oval(w,h):\n    '''\n    Draw an oval given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):\n    '''\n    Draw a dodecagon given the width and the height.\n    '''\n    print(w,h)\n    \n    \ndef draw_dodecagon(w,h):"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval=listval[0]\n    for i in range(0, len(listval)):\n        if listval[i]>maxval:\n            maxval=listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    val = None\n    for i in listval:\n        if val == None:\n            val = i\n        elif val < i:\n            val = i\n    return val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval[0] if len(listval) == 0 else max(max_val(listval[1:]), listval[0])\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for x in listval:\n        if isinstance(x, int):\n            if x > max_val:\n                max_val = x\n        if isinstance(x, float):\n            if x > max_val:\n                max_val = x\n        if isinstance(x, str):\n            if len(x) > max_val:\n                max_val = x\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return \"The list is empty\"\n    mval=0\n    for i in listval:\n        if type(i) is int:\n            if mval < i:\n                mval=i\n        elif type(i) is str:\n            if mval < len(i):\n                mval=len(i)\n        elif type(i) is list:\n            for j in i:\n                if type(j) is list:\n                    for k in j:\n                        if type(k) is list:\n                            for l in k:\n                                if type(l) is list:\n                                    for m in l:\n                                        if m>mval:\n                                            mval=m\n                                            break\n                                        else:\n                                            break\n                                        break\n                                    break\n                                else:\n                                    if m>mval:\n                                        mval=m\n                                        break\n                                    else:\n                                        break\n                            break\n                        else:\n                            if m>mval:\n                                mval=m\n                            break\n                    break\n                else:\n                    if m>mval:\n                        mval=m\n                    break\n            break\n    if mval==0:\n        return \"The list is empty\"\n    else:\n        return mval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval=listval[0]\n    for i in listval:\n        if i>maxval:\n            maxval=i\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        maxval = listval[0]\n        for i in range(1,len(listval)):\n            if listval[i] > maxval:\n                maxval = listval[i]\n        return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i>max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for num in listval:\n        if num > max:\n            max = num\n    return max\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    summ = 0\n    for i in range(1,number+1):\n        if number % i == 0:\n            summ += i\n    return summ\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(i for i in range(1, number) if number % i == 0)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors_sum = 0\n    for divisor in range(1, number):\n        if number % divisor == 0:\n            divisors_sum += divisor\n    return divisors_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for num in range(1, number+1):\n        if number % num == 0:\n            divisors.append(num)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    #sum = 1\n    total = 0\n    for i in range(1,number+1):\n        if number%i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 1\n    divisor_list = []\n    for i in range(2,number+1):\n        if number%i==0:\n            divisor_list.append(i)\n            result = result + i\n    return result\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([num for num in range(1, number+1) if number % num == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([i for i in range(1,number) if number % i == 0])\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr)==1:\n        return arr,0\n    else:\n        left=arr[:len(arr)//2]\n        right=arr[len(arr)//2:]\n        left,left_count=get_Inv_Count(left)\n        right,right_count=get_Inv_Count(right)\n        \n        merged_arr,i=merge(left,right)\n        inversion_count=left_count+right_count+i\n        return merged_arr,inversion_count\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[j] < arr[i]:\n                inversions += 1\n    return inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    temp = [0] * n\n    return _mergeSort(arr, temp, 0, n-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    ans = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort_count(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergeSort(arr, 0, len(arr) - 1) \n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge(arr, temp_arr, left, mid, right): \n        '''\n        Merge function for count inversions.\n        '''\n        i = left     # Starting index of left subarray \n        j = mid + 1     # Starting index of right subarray \n        k = left     # Starting index of to be sorted subarray \n        inv_count = 0\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversion_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inversion_count += 1\n    return inversion_count \n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list1 = [1, 2, 3, 4, 5, [6, [7, 8], 9, 10], 11]\n    flattened_list = []\n    for i in list1:\n        if type(i) is list:\n            for j in i:\n                flattened_list.append(j)\n        else:\n            flattened_list.append(i)\n    return flattened_list\nprint(flatten_list(list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for l in list1:\n        if isinstance(l, list):\n            list2.extend(flatten_list(l))\n        else:\n            list2.append(l)\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if type(i) == list:\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for sublist in list1:\n        if type(sublist) is list:\n            for i in flatten_list(sublist):\n                flat_list.append(i)\n        else:\n            flat_list.append(sublist)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for element in list1:\n        if type(element) == list:\n            new_list += flatten_list(element)\n        else:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    final_list = []\n    for sublist in list1:\n        if type(sublist) == list:\n            final_list += flatten_list(sublist)\n        else:\n            final_list.append(sublist)\n    return final_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #max_aggregate = defaultdict(int)\n    max_aggregate = []\n    if len(stdata)==0:\n        return -1\n    elif len(stdata)==1:\n        max_aggregate = stdata[0][1]\n        return max_aggregate\n    else:\n        max_aggregate = stdata[0][1]\n        for i in range(1,len(stdata)):\n            if max_aggregate < stdata[i][1]:\n                max_aggregate = stdata[i][1]\n        return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d1 = defaultdict(list)\n    for i in stdata:\n        d1[i[0]].append(i[1])\n    return {k:max(d1[k]) for k in d1}\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    list_of_tuples = list(stdata)\n    list_of_tuples.sort()\n    \n    print(\"Maximum Aggregate: \" + str(list_of_tuples[-1][0]))\n    \ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    \n    list_of_tuples = list(stdata)\n    list_of_tuples.sort()\n    \n    print(\"Minimum Aggregate: \" + str(list_of_tuples[0][0]))\n    \ndef sum_aggregate(stdata):\n    '''\n    Write a function to calculate the sum aggregate from the list of tuples.\n    '''\n    \n    sum = 0\n    for i in stdata:\n        sum += i[0]\n    print(\"Sum Aggregate: \" + str(sum))\n    \ndef avg_aggregate(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    \n    sum = 0\n    for i in stdata:\n        sum += i[0]\n    \n    print(\"Average Aggregate: \" + str(sum / len(stdata)))\n    \ndef mean_aggregate(stdata):\n    '''\n    Write a function to calculate the mean aggregate from the list of tuples.\n    '''\n    \n    sum = 0\n    for i in stdata:\n        sum += i[0]\n    \n    print(\"Mean Aggregate: \" + str(sum / len(stdata)))\n    \ndef frequency_aggregate(stdata):\n    '''\n    Write a function to calculate the frequency aggregate from the list of tuples.\n    '''\n    \n    d = defaultdict(int)\n    for i in stdata:\n        d[i[0]] += 1\n    for k,v in d.items():\n        print(\"Frequency Aggregate: \" + str(k) + \" \" + str(v))\n    \ndef percentile_aggregate(stdata, perc):\n    '''\n    Write a function to calculate the percentile aggregate from the list of tuples.\n    '''\n    \n    list_of_tuples = list(stdata)\n    list_of_tuples.sort()\n    \n    n = len(list_of_tuples)\n    \n    if perc >= 0 and perc <= 1:\n        print(\"Percentile Aggregate: \" + str(list_of_tuples[int(n * perc)][0]))\n    else:\n        print(\"Invalid Percentile Value\")\n    \ndef mode_aggregate(stdata):\n    '''\n    Write a function to calculate the mode aggregate from the list of tuples.\n    '''\n    \n    d = defaultdict(list)\n    for i in stdata:\n        d[i[0]].append(i[1])\n    for k,v in d.items():\n        print(\"Mode Aggregate: \" + str(k) + \" \" + str(max(set(v), key=v.count)))\n    \ndef std_dev_aggregate(stdata):\n    '''\n    Write a function to calculate the standard deviation aggregate from the list of tuples.\n    '''\n    \n    sum = 0\n    list_of_tuples = list(stdata)\n    list_of_tuples.sort()\n    \n    n = len(list_of_tuples)\n    \n    for i in list_of_tuples:\n        sum += (i[0] - sum) ** 2\n    \n    sum = sum / n\n    sum = sum ** 0.5\n    \n    print(\"Standard Deviation Aggregate: \" + str(sum))\n    \ndef run():\n    '''\n    Main function.\n    '''\n    \n    print(\"\\nMaximum Aggregate: \")\n    max_aggregate(stdata)\n    print(\"\\nMinimum Aggregate: \")\n    min_aggregate(stdata)\n    print(\"\\nSum Aggregate: \")\n    sum_aggregate(stdata)\n    print(\"\\nAverage Aggregate: \")\n    avg_aggregate(stdata)\n    print(\"\\nMean Aggregate: \")\n    mean_aggregate(stdata)\n    print(\"\\nFrequency Aggregate: \")\n    frequency_aggregate(stdata)\n    print(\"\\nMode Aggregate: \")\n    mode_aggregate(stdata)\n    print(\"\\nPercentile Aggregate: \")\n    percentile_aggregate(stdata, 0.25)\n    print(\"\\nPercentile Aggregate: \")\n    percentile_aggregate(stdata, 0.5)\n    print(\"\\nPercentile Aggregate: \")\n    percentile_aggregate(stdata, 0.75)\n    print(\"\\nPercentile Aggregate: \")\n    percentile_aggregate(stdata, 0.9)\n    print(\"\\nPercentile Aggregate: \")\n    percentile_aggregate(stdata, 0.95)\n    print(\"\\nPercentile Aggregate: \")\n    percentile_aggregate(stdata, 0.99)\n    print(\"\\nStandard Deviation Aggregate: \")\n    std_dev_aggregate(stdata)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = stdata[0]\n    for tup in stdata[1:]:\n        if tup[1] > result[1]:\n            result = tup\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    #print(st_aggregate)\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum(x[1])))\n    \ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    st_aggregate = defaultdict(list)\n    for item in stdata:\n        st_aggregate[item[0]].append(item[1])\n    return(max(st_aggregate.items(), key=lambda x:sum"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg = list(map(lambda x: x[0]+x[1], stdata))\n    return max(agg)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    st_data = []\n    for i in stdata:\n        st_data.append(list(i))\n    stdata_dict = {}\n    for i in st_data:\n        if i[0] not in stdata_dict:\n            stdata_dict[i[0]] = [i[1]]\n        else:\n            stdata_dict[i[0]].append(i[1])\n    return stdata_dict\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result=0\n    for i in stdata:\n        if i[1]>result:\n            result=i[1]\n    return result\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    result=stdata[0][1]\n    for i in stdata:\n        if i[1]<result:\n            result=i[1]\n    return result\ndef total_aggregate(stdata):\n    '''\n    Write a function to calculate the total aggregate from the list of tuples.\n    '''\n    result=0\n    for i in stdata:\n        result=result+i[1]\n    return result\ndef avg_aggregate(stdata):\n    '''\n    Write a function to calculate the average aggregate from the list of tuples.\n    '''\n    result=0\n    for i in stdata:\n        result=result+i[1]\n    return result/len(stdata)\ndef count_aggregate(stdata):\n    '''\n    Write a function to calculate the count aggregate from the list of tuples.\n    '''\n    return len(stdata)\ndef min_max_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum and maximum aggregate from the list of tuples.\n    '''\n    min=stdata[0][1]\n    max=stdata[0][1]\n    for i in stdata:\n        if i[1]>max:\n            max=i[1]\n        elif i[1]<min:\n            min=i[1]\n    return min,max\ndef percent_dist(stdata):\n    '''\n    Write a function to calculate the percent distribution from the list of tuples.\n    '''\n    l=[]\n    for i in stdata:\n        l.append(i[1])\n    count_list=defaultdict(int)\n    for i in l:\n        count_list[i]+=1\n    for i in count_list:\n        count_list[i]=count_list[i]/len(stdata)\n    return count_list\ndef percent_dist_new(stdata):\n    '''\n    Write a function to calculate the percent distribution from the list of tuples.\n    '''\n    l=[]\n    for i in stdata:\n        l.append(i[1])\n    count_list=defaultdict(int)\n    for i in l:\n        count_list[i]+=1\n    return count_list\ndef percentile_dist(stdata):\n    '''\n    Write a function to calculate the percentile distribution from the list of tuples.\n    '''\n    l=[]\n    for i in stdata:\n        l.append(i[1])\n    l.sort()\n    count_list=defaultdict(int)\n    for i in l:\n        count_list[i]+=1\n    return count_list\ndef percentile_dist_new(stdata):\n    '''\n    Write a function to calculate the percentile distribution from the list of tuples.\n    '''\n    l=[]\n    for i in stdata:\n        l.append(i[1])\n    l.sort()\n    count_list=defaultdict(int)\n    for i in l:\n        count_list[i]+=1\n    return count_list\ndef variance_aggregate(stdata):\n    '''\n    Write a function to calculate the variance aggregate from the list of tuples.\n    '''\n    result=0\n    count=len(stdata)\n    for i in stdata:\n        result+=(i[1]-avg_aggregate(stdata))**2\n    return result/count\ndef variance_aggregate_2(stdata):\n    '''\n    Write a function to calculate the variance aggregate from the list of tuples.\n    '''\n    result=0\n    count=len(stdata)\n    for i in stdata:\n        result+=(i[1]-avg_aggregate(stdata))**2\n    return result/count\ndef standard_deviation_aggregate(stdata):\n    '''\n    Write a function to calculate the standard deviation aggregate from the list of tuples.\n    '''\n    result=0\n    count=len(stdata)\n    for i in stdata:\n        result+=(i[1]-avg_aggregate(stdata))**2\n    return (result/count)**0.5\ndef standard_deviation_aggregate_2(stdata):\n    '''\n    Write a function to calculate the standard deviation aggregate from the list of tuples.\n    '''\n    result=0\n    count=len(stdata)\n    for i in stdata:\n        result+=(i[1]-avg_aggregate(stdata))**2\n    return (result/count)**0.5\ndef mad_aggregate(stdata):\n    '''\n    Write a function to calculate the mad aggregate from the list of tuples.\n    '''\n    result=0\n    count=len(stdata)\n    for i in stdata:\n        result+=(i[1]-avg_aggregate(stdata))**2\n    return (result/count)**0.5\ndef mad_aggregate_2(stdata):\n    '''\n    Write a function to calculate the mad aggregate from the list of tuples.\n    '''\n    result=0\n    count=len(stdata)\n    for i in stdata:\n        result+=(i[1]-avg_aggregate(stdata))**2\n    return (result/count)**0.5\ndef median_aggregate(stdata):\n    '''\n    Write a function to calculate the median aggregate from the list of tuples.\n    '''\n    l=[]\n    for i in stdata:\n        l.append(i[1])\n    l.sort()\n    count=len(l)\n    if count%2==1:\n        return l[count//2]\n    else:\n        return (l[count//2]+l[count//2-1])/2\ndef median_aggregate_2(stdata):\n    '''\n    Write a function to calculate the median aggregate from the list of tuples.\n    '''\n    l=[]\n    for i in stdata:\n        l.append(i[1])\n    l.sort()\n    count=len(l)\n    if count%2==1:\n        return l[count//2]\n    else:\n        return (l[count//2]+l[count//2-1])/2\ndef data_dist(stdata):\n    '''\n    Write a function to calculate the data distribution from the list of tuples.\n    '''\n    l=[]\n    for i in stdata:\n        l.append(i[1])\n    l.sort()\n    count_list=defaultdict(int)\n    for i in l:\n        count_list[i]+=1\n    return count_list\ndef data_dist_new(stdata):\n    '''\n    Write a function to calculate the data distribution from the list of tuples.\n    '''\n    l=[]\n    for i in stdata:\n        l.append(i[1])\n    l.sort()\n    count_list=defaultdict(int)\n    for i in l:\n        count_list[i]+=1\n    return count_list\ndef interquartile_range(stdata):\n    '''\n    Write a function to calculate the interquartile range from the list of tuples.\n    '''\n    l=[]\n    for i in stdata:\n        l.append(i[1])\n    l.sort()\n    count=len(l)\n    if count%2==1:\n        return l[count//2]\n    else:\n        return (l[count//2]+l[count//2-1])/2\ndef interquartile_range_2(stdata):\n    '''\n    Write a function to calculate the interquartile range from the list of tuples.\n    '''\n    l=[]\n    for i in stdata:\n        l.append(i[1])\n    l.sort()\n    count=len(l)\n    if count%2==1:\n        return l[count//2]\n    else:\n        return (l[count//2]+l[count//2-1])/2\ndef sample_mea"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the number of occurences of each category\n    dict_tuple_count = defaultdict(int)\n    \n    # Loop through the list of tuples\n    for t in stdata:\n        dict_tuple_count[t[0]] += t[1]\n    \n    # Create a list to store the category with highest count\n    l = []\n    \n    for key, value in dict_tuple_count.items():\n        if max(dict_tuple_count.values()) == value:\n            l.append(key)\n    return l\n    \ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the number of occurences of each category\n    dict_tuple_count = defaultdict(int)\n    \n    # Loop through the list of tuples\n    for t in stdata:\n        dict_tuple_count[t[0]] += t[1]\n    \n    # Create a list to store the category with highest count\n    l = []\n    \n    for key, value in dict_tuple_count.items():\n        if min(dict_tuple_count.values()) == value:\n            l.append(key)\n    return l\n    \ndef sum_aggregate(stdata):\n    '''\n    Write a function to calculate the sum of all the aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the number of occurences of each category\n    dict_tuple_count = defaultdict(int)\n    \n    # Loop through the list of tuples\n    for t in stdata:\n        dict_tuple_count[t[0]] += t[1]\n    \n    # Create a list to store the category with highest count\n    l = []\n    \n    for key, value in dict_tuple_count.items():\n        l.append(value)\n    return l\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = []\n    aggregate = 0\n    for i in stdata:\n        aggregate += int(i[1])\n        max_aggregate.append(aggregate)\n    return max_aggregate\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Base cases \n    if (n == 0): \n        return 1\n    if (n == 1): \n        return 2\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_rec(n,bin_seq):\n        if n==1:\n            return 1\n        if n==2:\n            return 2\n        return count_binary_seq_rec(n-2,bin_seq)+count_binary_seq_rec(n-1,bin_seq)\n    def count_binary_seq_tab(n):\n        dp=[[0 for i in range(n+1)] for i in range(n+1)]\n        for i in range(n+1):\n            dp[0][i]=1\n        for i in range(n+1):\n            dp[i][0]=1\n        for i in range(1,n+1):\n            for j in range(1,n+1):\n                dp[i][j]=dp[i-1][j-1]+dp[i-1][j]+dp[i][j-1]\n        return dp[n][n]\n    #return count_binary_seq_rec(n,bin_seq)\n    #return count_binary_seq_tab(n)\n    return count_binary_seq_tab(n)"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    c=0\n    for i in range(1,2**n):\n        l = []\n        for j in range(n):\n            if (i>>j)&1 == 0:\n                l.append(0)\n            else:\n                l.append(1)\n        if sum(l[:n])==sum(l[n:]):\n            c+=1\n    return c\n    \ndef is_sqr(n): \n    '''\n    Given a number n, find if n is a perfect square. Return 1 if n is a perfect square else return 0.\n    '''\n    if n==0:\n        return 1\n    x=int(n**0.5)\n    return x*x==n\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[0] * (n+1) for _ in range(2**(2*n)+1)]\n    for i in range(2**(2*n)+1):\n        for j in range(n+1):\n            if ((i & (1 << j)) >> j) % 2 == 0:\n                dp[i][j] = dp[i - (1 << j)][j] + 1\n            else:\n                dp[i][j] = dp[i - (1 << j)][j] + 2\n    return dp[-1][-1]\n    \nprint count_binary_seq(2) # 3\nprint count_binary_seq(3) # 7\nprint count_binary_seq(4) # 15\nprint count_binary_seq(5) # 31\nprint count_binary_seq(6) # 6"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    k = 2 * n\n    bin_num = 2**k\n    bin_str = bin(bin_num)[2:]\n    bin_str = bin_str.zfill(k)\n    left_sum = int(bin_str[:n], 2)\n    right_sum = int(bin_str[k-n:], 2)\n    ans = bin_num - left_sum - right_sum - left_sum\n    return ans\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return 2 * count_binary_seq(n - 2) + 2 * count_binary_seq(n - 1) \n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # for i in range(1, 2**(2*n)+1):\n    #     print(\"{0:b}\".format(i), \"{0:b}\".format(i).count('1'))\n    import operator\n    from functools import reduce\n    count = 0\n    for i in range(1, 2**(2*n)+1):\n        print(i)\n        if len(list(bin(i))) == (2*n)+2:\n            # print(list(bin(i)))\n            # print(len(list(bin(i))))\n            if operator.add(*[int(k) for k in list(bin(i)[:n])]) == operator.add(*[int(k) for k in list(bin(i)[n:])]):\n                count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    s = str(bin(n))\n    s = s[2:]\n    \n    return len([i for i in range(len(s)) if s[i] == s[len(s) - i - 1]])\n    \ndef max_sum_subarray(arr):\n    '''\n    Write a function to find the maximum possible sum of the elements of an array after the removal of exactly one element.\n    '''\n    left, right, max_sum, tot_sum = 0, 0, -1, 0\n    \n    for i in range(len(arr)):\n        tot_sum += arr[i]\n        max_sum = max(max_sum, tot_sum)\n        \n        if tot_sum < 0:\n            tot_sum = 0\n            left = i + 1\n            right = left\n    return max_sum\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if(n <= 0):\n        return 0\n    return count_binary_seq(n-1) + (2**(2*n - 1) - 2**(2*n - 2))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    sum_first = 0\n    sum_last = 0\n    count = 0\n    for i in range(n):\n        sum_first = sum_first + i\n        sum_last = sum_last + (2 ** i)\n    for i in range(2 ** n):\n        if (sum_first + sum_last) == (2 ** n) * i:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d is None:\n        return 0\n    elif isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    #check if it is empty or not\n    if not d:\n        return 0\n    #recursive step\n    return 1 + max(dict_depth(d[k]) for k in d)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d,dict):\n        return max(map(dict_depth,d.values())) + 1\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n    return 1 + max([dict_depth(i) for i in d.values()])\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    depth = 0\n    \n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n            \n    return depth\n    \n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + (max(map(dict_depth, d.values())) if isinstance(d, dict) else 0)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, val in d.items():\n        if isinstance(val, dict):\n            depth = dict_depth(val)\n        else:\n            depth = 1\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d is None or d is {}:\n        return 0\n    if type(d)!= dict:\n        return 0\n    if len(d) == 0:\n        return 0\n    max_depth = 0\n    for k, v in d.items():\n        depth = dict_depth(v)\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    if type(d) == list:\n        return 1\n    else:\n        key_list = list(d.keys())\n        max_key = key_list[0]\n        for key in key_list:\n            if len(key) > len(max_key):\n                max_key = key\n        return 1 + dict_depth(d[max_key])\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[(index+ranges+rotations)%len(arr)]\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotation_value = rotations[index]\n    new_range = ranges[rotation_value]\n    return arr[new_range]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    left, right = ranges\n    for i in range(rotations) :\n        index = (index + left) % (right - left + 1) + left\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(arr) :\n        index = index - len(arr)\n    print(\"Index is {} and ranges is {}\".format(index,ranges))\n    result = 0\n    if ranges!= 0:\n        rotations = rotations % ranges\n        for i in range(rotations) :\n            result += arr[len(arr)-1]\n            arr.pop()\n        result += arr[index]\n    return result\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if index in range(ranges[i],ranges[i]+rotations[i]) :\n            return arr[i]\n    return -1\n    \n    \ndef find_Max_Subarray(arr,ranges,rotations) :\n    '''\n    Write a python function to find the maximum subarray in a given array after number of rotations.\n    '''\n    max_so_far = 0\n    for i in range(len(ranges)) :\n        temp_sum = 0\n        for j in range(ranges[i],ranges[i]+rotations[i]) :\n            temp_sum += arr[j]\n        if temp_sum > max_so_far :\n            max_so_far = temp_sum\n    return max_so_far\n    \ndef find_Min_Subarray(arr,ranges,rotations) :\n    '''\n    Write a python function to find the minimum subarray in a given array after number of rotations.\n    '''\n    min_so_far = 9999999\n    for i in range(len(ranges)) :\n        temp_sum = 0\n        for j in range(ranges[i],ranges[i]+rotations[i]) :\n            temp_sum += arr[j]\n        if temp_sum < min_so_far :\n            min_so_far = temp_sum\n    return min_so_far\n    \n    \ndef find_Max_Subarray_sum_of_array(arr,ranges,rotations) :\n    '''\n    Write a python function to find the maximum sum of a subarray in a given array after number of rotations.\n    '''\n    max_so_far = 0\n    for i in range(len(ranges)) :\n        temp_sum = 0\n        for j in range(ranges[i],ranges[i]+rotations[i]) :\n            temp_sum += arr[j]\n        if temp_sum > max_so_far :\n            max_so_far = temp_sum\n    return max_so_far\n    \n    \ndef find_Min_Subarray_sum_of_array(arr,ranges,rotations) :\n    '''\n    Write a python function to find the minimum sum of a subarray in a given array after number of rotations.\n    '''\n    min_so_far = 9999999\n    for i in range(len(ranges)) :\n        temp_sum = 0\n        for j in range(ranges[i],ranges[i]+rotations[i]) :\n            temp_sum += arr[j]\n        if temp_sum < min_so_far :\n            min_so_far = temp_sum\n    return min_so_far\n    \n    \ndef find_Max_Subarray_sum_of_array_alternative(arr,ranges,rotations) :\n    '''\n    Write a python function to find the maximum sum of a subarray in a given array after number of rotations.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(len(ranges)) :\n        max_ending_here = 0\n        for j in range(ranges[i],ranges[i]+rotations[i]) :\n            max_ending_here += arr[j]\n            if max_ending_here > max_so_far :\n                max_so_far = max_ending_here\n    return max_so_far\n    \n    \ndef find_Min_Subarray_sum_of_array_alternative(arr,ranges,rotations) :\n    '''\n    Write a python function to find the minimum sum of a subarray in a given array after number of rotations.\n    '''\n    min_so_far = 9999999\n    min_ending_here = 0\n    for i in range(len(ranges)) :\n        min_ending_here = 0\n        for j in range(ranges[i],ranges[i]+rotations[i]) :\n            min_ending_here += arr[j]\n            if min_ending_here < min_so_far :\n                min_so_far = min_ending_here\n    return min_so_far\n    \n    \ndef find_Max_Subarray_sum_of_array_alternative_2(arr,ranges,rotations) :\n    '''\n    Write a python function to find the maximum sum of a subarray in a given array after number of rotations.\n    '''\n    max_ending_here = 0\n    max_so_far = 0\n    for i in range(len(ranges)) :\n        max_ending_here = 0\n        for j in range(ranges[i],ranges[i]+rotations[i]) :\n            max_ending_here += arr[j]\n            if max_ending_here > max_so_far :\n                max_so_far = max_ending_here\n    return max_so_far\n    \n    \ndef find_Min_Subarray_sum_of_array_alternative_2(arr,ranges,rotations) :\n    '''\n    Write a python function to find the minimum sum of a subarray in a given array after number of rotations.\n    '''\n    min_ending_here = 9999999\n    min_so_far = 9999999\n    for i in range(len(ranges)) :\n        min_ending_here = 0\n        for j in range(ranges[i],ranges[i]+rotations[i]) :\n            min_ending_here += arr[j]\n            if min_ending_here < min_so_far :\n                min_so_far = min_ending_here\n    return min_so_far\n    \n    \ndef find_Maximum_sum_of_subarray(arr,ranges,rotations) :\n    '''\n    Write a python function to find the maximum sum of a subarray in a given array after number of rotations.\n    '''\n    max_so_far = 0\n    for i in range(len(ranges)) :\n        temp_sum = 0\n        for j in range(ranges[i],ranges[i]+rotations[i]) :\n            temp_sum += arr[j]\n            if temp_sum > max_so_far :\n                max_so_far = temp_sum\n    return max_so_far\n    \n    \ndef find_Minimum_sum_of_subarray(arr,ranges,rotations) :\n    '''\n    Write a python function to find the minimum sum of a subarray in a given array after number of rotations.\n    '''\n    min_so_far = 9999999\n    for i in range(len(ranges)) :\n        temp_sum = 0\n        for j in range(ranges[i],ranges[i]+rotations[i]) :\n            temp_sum += arr[j]\n            if temp_sum < min_so_far :\n                min_so_far = temp_sum\n    return min_so_far\n    \n    \ndef find_Maximum_sum_of_subarray_alternative(arr,ranges,rotations) :\n    '''\n    Write a python function to find the maximum sum of a subarray in a given array after number of rotations.\n    '''\n    max_ending_here = 0\n    max_so_far = 0\n    for i in range(len(ranges)) :\n        max_ending_here = 0\n        for j in range(ranges[i],ranges[i]+rotations[i]) :\n            max_ending_here += arr[j]\n            if max_ending_here > max_so_far :\n                max_so_far = max_ending_here\n    return max_so_far\n    \n    \ndef find_Minimum_sum_of_subarray_alternative(arr,ranges,rotations) :\n    '''\n    Write a python function to find the minimum sum of a subarray in a given array after number of rotations.\n    '''\n    min_ending_here = 9999999\n    min_so_far = 9999999\n    for i in range(len(ranges)) :\n        min_ending_here = 0\n        for j in range(ranges[i],ranges[i]+rotations[i]) :\n            min_ending_here += arr[j]\n            if min_ending_here < min_so_far :\n                min_s"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #print(arr,ranges,rotations,index)\n    if ranges == 0 : \n        return arr[index%len(arr)]\n    else : \n        #print(arr[(index+ranges)%len(arr)],arr[(index+ranges)%len(arr)])\n        return find_Element(arr,ranges-rotations,rotations,(index+ranges)%len(arr))\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        index = (index + r)%(ranges-1)\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    firstIndex = 0\n    lastIndex = len(arr) - 1\n    mid = 0\n    if(index < firstIndex or index > lastIndex):\n        return -1\n    while(firstIndex <= lastIndex):\n        mid = (firstIndex + lastIndex) // 2\n        if(arr[mid] == index):\n            return mid\n        if(mid > index):\n            lastIndex = mid - 1\n        else:\n            firstIndex = mid + 1\n    leftrotations = index - firstIndex\n    rightrotations = (len(arr) - 1) - (lastIndex - index)\n    if(rightrotations < rotations):\n        rightrotations = rotations\n    if(rotations % 2 == 0):\n        return (mid + leftrotations + rightrotations) // 2\n    else:\n        return (mid + leftrotations + rightrotations + 1) // 2\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(rotations)):\n        #print('index is',index)\n        if ranges[i][0]<=index and index<=ranges[i][1] :\n            #print('element at index is',arr[index])\n            return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #print(arr,ranges,rotations,index)\n    try:\n        \n        print('Find Element at index',index, 'after',rotations,'number of rotations.')\n        if index in range(len(arr)):\n            print('Element is',arr[index])\n        else:\n            print('The index value is invalid.')\n            \n    except:\n        print('Something went wrong.')\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p=re.compile(r'\\b[p]\\w+[ ]\\w+\\b')\n    res=p.findall(words)\n    return res\n    # code goes here\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # word_list = ['lion', 'tiger', 'panda', 'penguin', 'bear']\n    # match_list = []\n    # for word in word_list:\n    #     if word[0] == 'p':\n    #         match_list.append(word)\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list1 = []\n    for i in words:\n        if(re.search(\"^p\", i)):\n            list1.append(i)\n    return list1\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    temp=list(filter(lambda word:word[0]==\"p\",words))\n    return(temp[0],temp[1])\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    i=0\n    j=0\n    while i<len(words):\n        if words[i][0]=='p':\n            print(words[i])\n            j+=1\n        i+=1\n    return j\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    new_list = []\n    for word in words:\n        if word[0] == \"p\":\n            new_list.append(word)\n    if len(new_list) > 1:\n        print(\"Two words:\", new_list[0], new_list[1])\n    elif len(new_list) == 1:\n        print(\"Only one word:\", new_list[0])\n    else:\n        print(\"No word starting with 'p'\")\n    return\n    \ndef contains(words, letters):\n    '''\n    Write a function to return words that contain the given letters.\n    '''\n    new_list = []\n    for word in words:\n        for letter in letters:\n            if letter in word:\n                new_list.append(word)\n    if len(new_list) > 1:\n        print(\"Words starting with letter:\", letters, new_list)\n    elif len(new_list) == 1:\n        print(\"Only one word:\", new_list[0])\n    else:\n        print(\"No word starting with letter:\", letters)\n    return\n    \ndef length(words, length):\n    '''\n    Write a function to return words of a given length.\n    '''\n    new_list = []\n    for word in words:\n        if len(word) == length:\n            new_list.append(word)\n    if len(new_list) > 1:\n        print(\"Words of length:\", length, new_list)\n    elif len(new_list) == 1:\n        print(\"Only one word of length:\", length, new_list[0])\n    else:\n        print(\"No word of length:\", length)\n    return\n    \ndef length_starting(words, length):\n    '''\n    Write a function to return words of a given length starting with a particular letter.\n    '''\n    new_list = []\n    for word in words:\n        if word[0] == length:\n            new_list.append(word)\n    if len(new_list) > 1:\n        print(\"Words of length starting with:\", length, new_list)\n    elif len(new_list) == 1:\n        print(\"Only one word of length starting with:\", length, new_list[0])\n    else:\n        print(\"No word of length starting with:\", length)\n    return\n    \ndef length_starting_stops(words, start, stop):\n    '''\n    Write a function to return words of a given length starting with a particular letter and ending with another letter.\n    '''\n    new_list = []\n    for word in words:\n        if word[0] == start and word[-1] == stop:\n            new_list.append(word)\n    if len(new_list) > 1:\n        print(\"Words of length starting with letter and ending with:\", start, stop, new_list)\n    elif len(new_list) == 1:\n        print(\"Only one word of length starting with letter and ending with:\", start, stop, new_list[0])\n    else:\n        print(\"No word of length starting with letter and ending with:\", start, stop)\n    return\n    \ndef length_stops(words, start, stop):\n    '''\n    Write a function to return words of a given length starting with a particular letter and ending with another letter.\n    '''\n    new_list = []\n    for word in words:\n        if word[0] == start and word[-1] == stop:\n            new_list.append(word)\n    if len(new_list) > 1:\n        print(\"Words of length starting with letter and ending with:\", start, stop, new_list)\n    elif len(new_list) == 1:\n        print(\"Only one word of length starting with letter and ending with:\", start, stop, new_list[0])\n    else:\n        print(\"No word of length starting with letter and ending with:\", start, stop)\n    return\n    \ndef length_stops_2(words, start, stop):\n    '''\n    Write a function to return words of a given length starting with a particular letter and ending with another letter.\n    '''\n    new_list = []\n    for word in words:\n        if start in word and stop in word:\n            new_list.append(word)\n    if len(new_list) > 1:\n        print(\"Words of length starting with letter and ending with:\", start, stop, new_list)\n    elif len(new_list) == 1:\n        print(\"Only one word of length starting with letter and ending with:\", start, stop, new_list[0])\n    else:\n        print(\"No word of length starting with letter and ending with:\", start, stop)\n    return\n    \ndef check_if_palindrome(words):\n    '''\n    Write a function to check if a word is a palindrome.\n    '''\n    new_list = []\n    for word in words:\n        if word[:] == word[::-1]:\n            new_list.append(word)\n    if len(new_list) > 1:\n        print(\"Palindrome:\", new_list)\n    elif len(new_list) == 1:\n        print(\"Only one palindrome:\", new_list[0])\n    else:\n        print(\"No palindrome\")\n    return\n    \ndef list_sum(numbers):\n    '''\n    Write a function to return the sum of a given list of numbers.\n    '''\n    new_list = []\n    for number in numbers:\n        new_list.append(number)\n    if len(new_list) > 1:\n        print(\"Sum of list:\", sum(new_list))\n    elif len(new_list) == 1:\n        print(\"Only one number:\", sum(new_list))\n    else:\n        print(\"No list\")\n    return\n    \ndef list_avg(numbers):\n    '''\n    Write a function to return the average of a given list of numbers.\n    '''\n    new_list = []\n    for number in numbers:\n        new_list.append(number)\n    if len(new_list) > 1:\n        print(\"Average of list:\", sum(new_list)/len(new_list))\n    elif len(new_list) == 1:\n        print(\"Only one number:\", sum(new_list)/len(new_list))\n    else:\n        print(\"No list\")\n    return\n    \ndef count_words_starts(words, start):\n    '''\n    Write a function to return the number of words starting with a particular letter.\n    '''\n    new_list = []\n    for word in words:\n        if word[0] == start:\n            new_list.append(word)\n    if len(new_list) > 1:\n        print(\"Number of words starting with:\", start, \":\", len(new_list))\n    elif len(new_list) == 1:\n        print(\"Only one word starting with:\", start, \":\", len(new_list[0]))\n    else:\n        print(\"No word starting with:\", start)\n    return\n    \ndef contains_1(words, letters):\n    '''\n    Write a function to return words that contain the given letters.\n    '''\n    new_list = []\n    for word in words:\n        for letter in letters:\n            if letter in word:\n                new_list.append(word)\n    if len(new_list) > 1:\n        print(\"Words starting with letter:\", letters, new_list)\n    elif len(new_list) == 1:\n        print(\"Only one word:\", new_list[0])\n    else:\n        print(\"No word starting with letter:\", letters)\n    return\n    \ndef contains_2(words, letters):\n    '''\n    Write a function to return words that contain the given letters.\n    '''\n    new_list = []\n    for word in words:\n        for letter in letters:\n            if letter in word:\n                new_list.append(word)\n    if len(new_list) > 1:\n        print(\"Words starting with letter:\", letters, new_list)\n    elif len(new_list) == 1:\n        print(\"Only one word:\", new_list[0])\n    else:\n        print(\"No word starting with letter:\", letters)\n    return\n    \ndef replace_"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if re.match('^p', word):\n            return word\n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = [i for i in words if i.startswith('p')]\n    return (words)\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    string=words.split()\n    return [x for x in string if x.startswith('p')][:2]\ndef reverse(string):\n    '''\n    Write a function to return the reverse of the string.\n    '''\n    return string[::-1]\ndef palindrome(word):\n    '''\n    Write a function that checks if a word is a palindrome.\n    '''\n    return word == word[::-1]\ndef anagram(s1,s2):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    s1=sorted(s1.lower().replace(' ', ''))\n    s2=sorted(s2.lower().replace(' ', ''))\n    return s1 == s2\ndef find_longest_word(words):\n    '''\n    Write a function that returns the longest word in a string.\n    '''\n    return max(words.split(),key=len)\ndef find_shortest_word(words):\n    '''\n    Write a function that returns the shortest word in a string.\n    '''\n    return min(words.split(),key=len)\ndef find_all_dots(words):\n    '''\n    Write a function to return all dots in a string.\n    '''\n    return re.findall('\\.',words)\ndef find_all_digits(words):\n    '''\n    Write a function to return all digits in a string.\n    '''\n    return re.findall('\\d',words)\ndef find_all_non_digits(words):\n    '''\n    Write a function to return all non-digits in a string.\n    '''\n    return re.findall('\\D',words)\ndef find_all_whitespaces(words):\n    '''\n    Write a function to return all whitespaces in a string.\n    '''\n    return re.findall('\\s',words)\ndef is_unique(string):\n    '''\n    Write a function to check if a string has all unique characters.\n    '''\n    return len(string) == len(set(string))\ndef find_all_words_in_string(string,words):\n    '''\n    Write a function that takes a string and a set of words and returns a list containing all the words in the string.\n    '''\n    return re.findall(words,string)\ndef remove_all_occurances(string,words):\n    '''\n    Write a function that removes all occurrences of a word in a string.\n    '''\n    return re.sub(words,'',string)\ndef count_occurances(string,word):\n    '''\n    Write a function that counts the number of occurrences of a word in a string.\n    '''\n    return string.count(word)\ndef count_all_occurances(string):\n    '''\n    Write a function that counts the number of occurrences of all words in a string.\n    '''\n    return len(re.findall('[a-z]',string.lower()))\ndef count_upper_cases(string):\n    '''\n    Write a function to count the number of uppercase letters in a string.\n    '''\n    return len(re.findall('[A-Z]',string))\ndef count_lower_cases(string):\n    '''\n    Write a function to count the number of lowercase letters in a string.\n    '''\n    return len(re.findall('[a-z]',string))\ndef count_number_occurances(string):\n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    return len(re.findall('\\d',string))\ndef find_all_doubles(string):\n    '''\n    Write a function to return all doubles in a string.\n    '''\n    return re.findall('[a-z]{2}',string)\ndef find_all_doubles_upper(string):\n    '''\n    Write a function to return all doubles in a string but only if those doubles are uppercase.\n    '''\n    return re.findall('[A-Z]{2}',string)\ndef find_all_doubles_lower(string):\n    '''\n    Write a function to return all doubles in a string but only if those doubles are lowercase.\n    '''\n    return re.findall('[a-z]{2}',string)\ndef find_all_doubles_digit(string):\n    '''\n    Write a function to return all doubles in a string but only if those doubles are digits.\n    '''\n    return re.findall('\\d{2}',string)\ndef find_all_doubles_non_digit(string):\n    '''\n    Write a function to return all doubles in a string but only if those doubles are not digits.\n    '''\n    return re.findall('\\D{2}',string)\ndef find_all_doubles_non_digit_upper(string):\n    '''\n    Write a function to return all doubles in a string but only if those doubles are not digits and only if those doubles are uppercase.\n    '''\n    return re.findall('\\D{2}',string)\ndef find_all_doubles_non_digit_lower(string):\n    '''\n    Write a function to return all doubles in a string but only if those doubles are not digits and only if those doubles are lowercase.\n    '''\n    return re.findall('\\D{2}',string)\ndef find_all_doubles_non_digit_number(string):\n    '''\n    Write a function to return all doubles in a string but only if those doubles are not digits and only if those doubles are numbers.\n    '''\n    return re.findall('\\d{2}',string)\ndef is_valid_email(email):\n    '''\n    Write a function to check if an email address is valid.\n    '''\n    return re.search('@',email)\ndef is_valid_email2(email):\n    '''\n    Write a function to check if an email address is valid.\n    '''\n    return re.search('[a-z]\\w+[a-z]\\w+\\@[a-z]\\w+[a-z]',email)\ndef get_domain_name(email):\n    '''\n    Write a function to return the domain name of an email address.\n    '''\n    return email.split('@')[1].split('.')[0]\ndef get_domain_name2(email):\n    '''\n    Write a function to return the domain name of an email address.\n    '''\n    return re.search('@[a-z]\\w+[a-z]',email).group().split('@')[1]\ndef count_special_chars(string):\n    '''\n    Write a function to return the number of special characters in a string.\n    '''\n    return len(re.findall('\\W',string))\ndef count_digits_special_chars(string):\n    '''\n    Write a function to return the number of digits and special characters in a string.\n    '''\n    return len(re.findall('\\d\\W\\d',string))\ndef find_all_numbers(string):\n    '''\n    Write a function to return all numbers in a string.\n    '''\n    return re.findall('\\d+',string)\ndef find_all_numbers2(string):\n    '''\n    Write a function to return all numbers in a string.\n    '''\n    return re.findall('[0-9]+',string)\ndef find_all_numbers_of_length(string,length):\n    '''\n    Write a function to return all numbers of a specific length in a string.\n    '''\n    return re.findall('\\d{'+str(length)+'}',string)\ndef reverse_words(string):\n    '''\n    Write a function to reverse words in a string.\n    '''\n    return string.split()[::-1]\ndef reverse_words2(string):\n    '''\n    Write a function to reverse words in a string.\n    '''\n    return''.join([x for x in string.split()[::-1]])\ndef reverse_words_keep_delimiters(string):\n    '''\n    Write a function t"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [words[i] for i in range(len(words)) if words[i][0]=='p']\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [[0 for j in range(k + 2)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 2):\n            if j == 1 or i == 1:\n                dp[i][j] = a[i - 1]\n                continue\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n            dp[i][j] = max(dp[i][j], dp[i][j - 1], dp[i - 1][j])\n    return dp[n][k]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return a[k-1]\n    else:\n        return max(a[k-1], max_sum_increasing_subseq(a, n, index-1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if a[j] < a[i] and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n    # print(dp)\n    if k < dp[-1]:\n        return -1\n    elif k == dp[-1]:\n        return max(dp)\n    else:\n        # print(k)\n        for i in range(n):\n            if dp[i] == k:\n                return i\n        # print(k)\n        return -1\n    # return max(dp)\n    \n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    i, j, sum = 0, 0, 0\n    for j in range(n):\n        if a[j] > a[i] and j > k:\n            sum = max(sum, a[i] + max_sum_increasing_subseq(a, n, index, k))\n        if j == k:\n            i += 1\n            k += 1\n            j = i\n    return sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n or index < k:\n        return 0\n    elif k == index:\n        return a[k]\n    else:\n        return max(\n            max_sum_increasing_subseq(a, n, index + 1, k) + a[k],\n            max_sum_increasing_subseq(a, n, index + 1, k + 1)\n        )\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (k > index):\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global maximum\n    if index == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    \n    if k <= index:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n    \n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case for recursion\n    if k == n:\n        return 0\n    # storing the prefix sum into the table\n    table[k] = max(table[k], sum_increasing_subseq(a, n, index, k + 1))\n    # storing the prefix sum into the table for when kth index is greater than i\n    table[k] = max(table[k], sum_increasing_subseq(a, n, index, k + 1) + a[k])\n    return table[k]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # m is for the number of column\n    # n is for the number of row\n    # if m or n is not correct, it will return None\n    if len(tuplex) == m*n:\n        colon = []\n        for i in range(len(tuplex)):\n            colon.append(tuplex[i*m:i*m+m])\n        return colon\n    else:\n        return None\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a = list(tuplex)\n    a.extend([0]*(m-n))\n    return tuple(a)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0:m] + (tuplex[m:n],) + tuplex[n:]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return ':'.join(str(x) for x in tuplex)\n    \ndef print_tuple(tuplex):\n    '''\n    Write a function to print out the colon of a tuple.\n    '''\n    return str(tuple(tuplex))\n    \ndef get_preference(tuplex,i):\n    '''\n    Write a function to get the i-th preference of a tuple.\n    '''\n    return tuplex[i]\n    \ndef set_preference(tuplex,i,pref):\n    '''\n    Write a function to set the i-th preference of a tuple.\n    '''\n    tuplex[i] = pref\n    \ndef get_pref_colon(tuplex):\n    '''\n    Write a function to get a colon of the preferences of a tuple.\n    '''\n    return colon_tuplex(tuplex,0,1)\n    \ndef get_pref_id(tuplex):\n    '''\n    Write a function to get the ID of a tuple.\n    '''\n    return colon_tuplex(tuplex,1,1)\n    \ndef get_pref_colon_id(tuplex):\n    '''\n    Write a function to get the colon of the ID and the preferences of a tuple.\n    '''\n    return colon_tuplex(tuplex,1,0)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    s=''\n    for i in range(m):\n        for j in range(n):\n            s=s+tuplex[i][j]+':'\n    return s\ndef get_colon_tuple(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    s=''\n    for i in range(m):\n        for j in range(n):\n            s=s+tuplex[j][i]+':'\n    return s\ndef dist(p1,p2):\n    '''\n    Write a function to get the distance between two points\n    '''\n    return ((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)**0.5\ndef get_point(tuplex,m,n,key):\n    '''\n    Write a function to get a point in a tuplex.\n    '''\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j]==key:\n                return (i,j)\ndef get_point_list(tuplex,m,n,key_list):\n    '''\n    Write a function to get the point list of a list of keys.\n    '''\n    s=[]\n    for key in key_list:\n        s.append(get_point(tuplex,m,n,key))\n    return s\ndef get_nearest_point(p1,point_list,key_list):\n    '''\n    Write a function to get the nearest point from p1 to a point list.\n    '''\n    p2=point_list[0]\n    distance=dist(p1,p2)\n    for p in point_list[1:]:\n        if dist(p1,p)<distance:\n            p2=p\n            distance=dist(p1,p)\n    return get_point(key_list,m,n,p2)\ndef get_key(p):\n    '''\n    Write a function to get the key of a point.\n    '''\n    for key in key_list:\n        if p==get_point(tuplex,m,n,key):\n            return key\n    return 'No key'\ndef get_distance_point(p1,p2):\n    '''\n    Write a function to get the distance between two points\n    '''\n    return dist(p1,p2)\ndef get_distance_tuple(p1,tuplex):\n    '''\n    Write a function to get the distance between a point and a tuple.\n    '''\n    s=0\n    for i in range(m):\n        for j in range(n):\n            s=s+dist(p1,(i,j))\n    return s\ndef get_distance_list(p1,tuplex_list):\n    '''\n    Write a function to get the distance between a point and a list of tuples.\n    '''\n    s=0\n    for tuplex in tuplex_list:\n        s=s+get_distance_tuple(p1,tuplex)\n    return s\ndef get_direction(p1,p2):\n    '''\n    Write a function to get the direction from p1 to p2.\n    '''\n    direction=(p2[0]-p1[0],p2[1]-p1[1])\n    return direction\ndef get_direction_tuple(p1,tuplex):\n    '''\n    Write a function to get the direction from p1 to a tuple.\n    '''\n    direction=(p2[0]-p1[0],p2[1]-p1[1])\n    return direction\ndef get_direction_list(p1,tuplex_list):\n    '''\n    Write a function to get the direction from p1 to a list of tuples.\n    '''\n    s=[]\n    for tuplex in tuplex_list:\n        s.append(get_direction(p1,tuplex))\n    return s\ndef get_nearest_direction_point(p1,direction_list,key_list):\n    '''\n    Write a function to get the nearest direction from p1 to a point list.\n    '''\n    direction=direction_list[0]\n    distance=dist(p1,(direction[0]+direction[1]))\n    for direction in direction_list[1:]:\n        if dist(p1,(direction[0]+direction[1]))<distance:\n            direction=direction\n            distance=dist(p1,(direction[0]+direction[1]))\n    return get_point(key_list,m,n,(direction[0]+direction[1]))\ndef get_nearest_direction_tuple(p1,direction_tuple_list,key_list):\n    '''\n    Write a function to get the nearest direction from p1 to a tuple list.\n    '''\n    direction=direction_tuple_list[0]\n    distance=dist(p1,direction)\n    for direction in direction_tuple_list[1:]:\n        if dist(p1,direction)<distance:\n            direction=direction\n            distance=dist(p1,direction)\n    return direction\ndef get_nearest_direction_list(p1,direction_tuple_list,key_list):\n    '''\n    Write a function to get the nearest direction from p1 to a tuple list.\n    '''\n    s=[]\n    for direction_tuple in direction_tuple_list:\n        s.append(get_point(key_list,m,n,(direction_tuple[0]+direction_tuple[1])))\n    return s\ndef get_nearest_list(p1,point_list,key_list):\n    '''\n    Write a function to get the nearest point list to a point list.\n    '''\n    s=[]\n    for point in point_list:\n        s.append(get_nearest_point(p1,point_list,key_list))\n    return s\ndef get_nearest_tuple(p1,tuplex_list,key_list):\n    '''\n    Write a function to get the nearest tuple list to a point list.\n    '''\n    s=[]\n    for tuplex in tuplex_list:\n        s.append(get_nearest_point(p1,tuplex_list,key_list))\n    return s\ndef get_nearest_direction_list(p1,direction_list,key_list):\n    '''\n    Write a function to get the nearest direction list to a point list.\n    '''\n    s=[]\n    for direction in direction_list:\n        s.append(get_nearest_direction_point(p1,direction_list,key_list))\n    return s\ndef get_sum_direction_tuple(p1,tuplex):\n    '''\n    Write a function to get the sum of directions between p1 and a tuple.\n    '''\n    s=0\n    for i in range(m):\n        for j in range(n):\n            s=s+dist(get_point(tuplex,m,n,(i,j)),(p1[0]+p1[1]))\n    return s\ndef get_sum_direction_list(p1,tuplex_list):\n    '''\n    Write a function to get the sum of directions between p1 and a tuple list.\n    '''\n    s=0\n    for tuplex in tuplex_list:\n        s=s+get_sum_direction_tuple(p1,tuplex)\n    return s\ndef get_sum_direction(p1,direction):\n    '''\n    Write a function to get the sum of directions between p1 and a direction.\n    '''\n    s=0\n    for i in range(m):\n        for j in range(n):\n            s=s+dist(get_point(tuplex,m,n,(i,j)),(p1[0]+p1[1]))\n    return s\ndef get_sum_direction_list(p1,tuplex_list):\n    '''\n    Write a function to get the sum of directions between p1 and a list of direction.\n    '''\n    s=0\n    for direction in direction_list:\n        s="
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # if m > 0:\n    #     colon_tuplex(tuplex,m-1,n)\n    #     colon_tuplex(tuplex,m,n-1)\n    #     print(tuplex)\n    # elif m == 0 and n == 0:\n    #     return tuplex\n    # else:\n    #     print(tuplex)\n    if m == 0 and n == 0:\n        return tuplex\n    if m == 0:\n        tuplex = (tuplex[0],) + tuplex[1:] + (tuplex[0],)\n        return colon_tuplex(tuplex,m,n-1)\n    if n == 0:\n        tuplex = tuplex[:m] + (tuplex[0],) + tuplex[m:]\n        return colon_tuplex(tuplex,m-1,n)\n    else:\n        tuplex = tuplex[:m] + (tuplex[0],) + tuplex[m:]\n        return colon_tuplex(tuplex,m,n-1)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    m=m-1\n    n=n-1\n    a=[]\n    for i in range(0,len(tuplex)):\n        if (i==m):\n            a.append(':')\n        else:\n            a.append(tuplex[i])\n    return a\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = deepcopy(tuplex)\n    while m <= n:\n        tuplex = (tuplex[0],tuplex[m],tuplex[m+1])\n        m = m + 1\n    return tuplex\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    i1 = 0\n    i2 = 0\n    n1 = len(nums1)\n    n2 = len(nums2)\n    result = []\n    while (i1 < n1 and i2 < n2):\n        product = nums1[i1]*nums2[i2]\n        result.append(product)\n        if len(result) == N:\n            return result\n        if product > nums1[i1+1]*nums2[i2]:\n            i1 += 1\n        elif product > nums1[i1]*nums2[i2+1]:\n            i2 += 1\n        else:\n            i1 += 1\n            i2 += 1\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    ret = []\n    for i in range(N):\n        ret.append(max(nums1[i]*nums2[i], nums1[i]*nums2[N-i-1]))\n    return ret\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # time: O(N) + O(N) = O(2N) = O(N)\n    # space: O(1)\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #num1 = []\n    #num2 = []\n    #for i in range(N):\n    #    num1.append(max(nums1))\n    #    nums1.remove(max(nums1))\n    #    num2.append(max(nums2))\n    #    nums2.remove(max(nums2))\n    #return (num1[0] * num2[0])\n    return max(nums1) * max(nums2)\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    arr = []\n    \n    for n1 in nums1:\n        for n2 in nums2:\n            arr.append(n1*n2)\n            \n    arr.sort()\n    \n    return arr[-N:]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #We assume that the lists are sorted\n    \n    num_list1 = nums1\n    num_list2 = nums2\n    \n    #we will build our answers into an array\n    result = []\n    \n    #we will initialize the pointers\n    index_list1 = index_list2 = index_result = 0\n    \n    #we will iterate through each list\n    while index_list1 < N and index_list2 < N:\n        #we first determine the factors\n        factor1 = num_list1[index_list1]\n        factor2 = num_list2[index_list2]\n        \n        #we now determine the product\n        product = factor1 * factor2\n        \n        #we then append the product\n        result.append(product)\n        \n        #we then update the pointers\n        index_list1 += 1\n        index_list2 += 1\n        \n        #we then update the index of the result\n        index_result += 1\n    \n    #we now return the result\n    return result\n    \n    \ndef largest_product_sorted(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given sorted lists, selecting one factor from each list.\n    '''\n    #we assume that the lists are sorted\n    \n    #we build our array to keep track of our results\n    result = []\n    \n    #we initialize the pointers\n    index1 = index2 = index_result = 0\n    \n    #we then iterate through each list\n    while index1 < N and index2 < N:\n        #we first determine the factors\n        factor1 = nums1[index1]\n        factor2 = nums2[index2]\n        \n        #we now determine the product\n        product = factor1 * factor2\n        \n        #we then append the product\n        result.append(product)\n        \n        #we then update the pointers\n        index1 += 1\n        index2 += 1\n        \n        #we then update the index of the result\n        index_result += 1\n    \n    #we now return the result\n    return result\n    \n    \ndef largest_product_sorted_opt(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given sorted lists, selecting one factor from each list.\n    '''\n    #we assume that the lists are sorted\n    \n    #we build our array to keep track of our results\n    result = []\n    \n    #we initialize the pointers\n    index1 = index2 = index_result = 0\n    \n    #we then iterate through each list\n    while index1 < N and index2 < N:\n        #we first determine the factors\n        factor1 = nums1[index1]\n        factor2 = nums2[index2]\n        \n        #we now determine the product\n        product = factor1 * factor2\n        \n        #we then append the product\n        result.append(product)\n        \n        #we then update the pointers\n        index1 += 1\n        index2 += 1\n        \n        #we then update the index of the result\n        index_result += 1\n    \n    #we now determine if we should add an element to the list\n    if index1 < N:\n        #if so, we add the next element\n        result.append(nums1[index1])\n    \n    if index2 < N:\n        #if so, we add the next element\n        result.append(nums2[index2])\n    \n    #we now return the result\n    return result\n    \n    \ndef largest_product_sorted_opt_2(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given sorted lists, selecting one factor from each list.\n    '''\n    #we assume that the lists are sorted\n    \n    #we build our array to keep track of our results\n    result = []\n    \n    #we initialize the pointers\n    index1 = index2 = index_result = 0\n    \n    #we then iterate through each list\n    while index1 < N and index2 < N:\n        #we first determine the factors\n        factor1 = nums1[index1]\n        factor2 = nums2[index2]\n        \n        #we now determine the product\n        product = factor1 * factor2\n        \n        #we then append the product\n        result.append(product)\n        \n        #we then update the pointers\n        index1 += 1\n        index2 += 1\n        \n        #we then update the index of the result\n        index_result += 1\n    \n    #we now determine if we should add an element to the list\n    if index1 == N:\n        #if so, we add the next element\n        result.append(nums2[index2])\n    \n    elif index2 == N:\n        #if so, we add the next element\n        result.append(nums1[index1])\n    \n    #we then return the result\n    return result\n    \n    \ndef largest_product_sorted_opt_2_constant_space(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given sorted lists, selecting one factor from each list.\n    '''\n    #we assume that the lists are sorted\n    \n    #we build our array to keep track of our results\n    result = []\n    \n    #we initialize the pointers\n    index1 = index2 = index_result = 0\n    \n    #we then iterate through each list\n    while index1 < N and index2 < N:\n        #we first determine the factors\n        factor1 = nums1[index1]\n        factor2 = nums2[index2]\n        \n        #we now determine the product\n        product = factor1 * factor2\n        \n        #we then append the product\n        result.append(product)\n        \n        #we then update the pointers\n        index1 += 1\n        index2 += 1\n        \n        #we then update the index of the result\n        index_result += 1\n    \n    #we now determine if we should add an element to the list\n    if index1 == N:\n        #if so, we add the next element\n        result.append(nums2[index2])\n    \n    elif index2 == N:\n        #if so, we add the next element\n        result.append(nums1[index1])\n    \n    #we then return the result\n    return result\n    \n    \ndef largest_product_sorted_opt_2_constant_space_2(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given sorted lists, selecting one factor from each list.\n    '''\n    #we assume that the lists are sorted\n    \n    #we build our array to keep track of our results\n    result = []\n    \n    #we initialize the pointers\n    index1 = index2 = index_result = 0\n    \n    #we then iterate through each list\n    while index1 < N and index2 < N:\n        #we first determine the factors\n        factor1 = nums1[index1]\n        factor2 = nums2[index2]\n        \n        #we now determine the product\n        product = factor1 * factor2\n        \n        #we then append the product\n        result.append(product)\n        \n        #we then update the pointers\n        index1 += 1\n        index2 += 1\n        \n        #we then update the index of the result\n        index_result += 1\n    \n    #we now determine if we should add an element to the list\n    if index1 == N:\n        #if so, we add the next element\n        result.append(nums2[index2])\n        index_result += 1\n    \n    elif index2 == N:\n        #if so, we add the next element\n        result.append(nums1[index1])\n        index_result += 1\n    \n    #we then return the result\n    return result\n    \n    \ndef largest_product_sorted_opt_2_constant_space_2_fast(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given sorted lists, selecting one factor from each list.\n    '''\n    #we assume that the lists are sorted\n    \n    #we build our arra"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    prod = []\n    for i in range(N):\n        prod.append(nums1[i]*nums2[i])\n    return prod\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    L = []\n    L.append(max(nums1[0]*nums2[0], nums1[0]*nums2[1], nums1[1]*nums2[0], nums1[1]*nums2[1]))\n    for i in range(1, N-1):\n        L.append(max(L[i-1]*nums1[i], L[i-1]*nums2[i], L[i-2]*nums1[i], L[i-2]*nums2[i]))\n    return L[-1]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    count = 0\n    current_product = 1\n    for factor1 in nums1:\n        for factor2 in nums2:\n            current_product = factor1 * factor2\n            if current_product > current_product:\n                count += 1\n                if count == N:\n                    return current_product\n            else:\n                count = 0\n    return current_product\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_prod = -1\n    for i in range(N):\n        max_prod = max(max_prod, nums1[i] * nums2[i])\n    return max_prod\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a,\"is maximum\")\n    elif b>a:\n        print(b,\"is maximum\")\n    else:\n        print(\"both numbers are equal\")\n        "
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    if a > b:\n        print(\"The largest number is: \" + str(a))\n    else:\n        print(\"The largest number is: \" + str(b))\n    return\nmaximum(a,b)    \n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if(a>b) else b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max = a\n    if b > a:\n        max = b\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\ndef maximum(a,b,c):   \n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    max=maximum(a,b)\n    return maximum(max,c)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\ndef square(a):\n    '''\n    Write a python function to find the square of a number.\n    '''\n    return a**2\ndef cube(a):\n    '''\n    Write a python function to find the cube of a number.\n    '''\n    return a**3\ndef sqrt(a):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    return math.sqrt(a)\ndef cos(a):\n    '''\n    Write a python function to find the cosine of a number.\n    '''\n    return math.cos(a)\ndef sin(a):\n    '''\n    Write a python function to find the sine of a number.\n    '''\n    return math.sin(a)\ndef tan(a):\n    '''\n    Write a python function to find the tangent of a number.\n    '''\n    return math.tan(a)\ndef exp(a):\n    '''\n    Write a python function to find the exponent of a number.\n    '''\n    return math.exp(a)\ndef log10(a):\n    '''\n    Write a python function to find the logarithm base 10 of a number.\n    '''\n    return math.log10(a)\ndef log(a):\n    '''\n    Write a python function to find the logarithm base 2 of a number.\n    '''\n    return math.log(a)\ndef pi():\n    '''\n    Write a python function to find the value of pi.\n    '''\n    return math.pi\ndef tau():\n    '''\n    Write a python function to find the value of tau.\n    '''\n    return math.tau\ndef acos(a):\n    '''\n    Write a python function to find the arc cosine of a number.\n    '''\n    return math.acos(a)\ndef asin(a):\n    '''\n    Write a python function to find the arc sine of a number.\n    '''\n    return math.asin(a)\ndef atan(a):\n    '''\n    Write a python function to find the arc tangent of a number.\n    '''\n    return math.atan(a)\ndef degrees(a):\n    '''\n    Write a python function to convert an angle from radians to degrees.\n    '''\n    return math.degrees(a)\ndef radians(a):\n    '''\n    Write a python function to convert an angle from degrees to radians.\n    '''\n    return math.radians(a)\ndef hypotenuse(a,b):\n    '''\n    Write a python function to find the hypotenuse of a right triangle.\n    '''\n    return math.hypot(a,b)\ndef sinh(a):\n    '''\n    Write a python function to find the hyperbolic sine of a number.\n    '''\n    return math.sinh(a)\ndef cosh(a):\n    '''\n    Write a python function to find the hyperbolic cosine of a number.\n    '''\n    return math.cosh(a)\ndef tanh(a):\n    '''\n    Write a python function to find the hyperbolic tangent of a number.\n    '''\n    return math.tanh(a)\ndef erf(a):\n    '''\n    Write a python function to find the error function of a number.\n    '''\n    return math.erf(a)\ndef erfc(a):\n    '''\n    Write a python function to find the complementary error function of a number.\n    '''\n    return math.erfc(a)\ndef gamma(a):\n    '''\n    Write a python function to find the gamma function of a number.\n    '''\n    return math.gamma(a)\ndef lgamma(a):\n    '''\n    Write a python function to find the natural logarithm of the gamma function of a number.\n    '''\n    return math.lgamma(a)\ndef factorial(a):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    return math.factorial(a)\ndef floor(a):\n    '''\n    Write a python function to find the floor of a number.\n    '''\n    return math.floor(a)\ndef ceil(a):\n    '''\n    Write a python function to find the ceiling of a number.\n    '''\n    return math.ceil(a)\ndef isclose(a,b,rel_tol=1e-09,abs_tol=0.0):\n    '''\n    Write a python function to check if two numbers are close.\n    '''\n    return math.isclose(a,b,rel_tol=1e-09,abs_tol=0.0)\ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    return math.gcd(a,b)\ndef lcm(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    return math.lcm(a,b)\ndef log2(a):\n    '''\n    Write a python function to find the logarithm base 2 of a number.\n    '''\n    return math.log2(a)\ndef logb(a,b):\n    '''\n    Write a python function to find the logarithm base b of a number.\n    '''\n    return math.log(a,b)\ndef e(a):\n    '''\n    Write a python function to find the mathematical constant e.\n    '''\n    return math.e\ndef pi(a):\n    '''\n    Write a python function to find the mathematical constant pi.\n    '''\n    return math.pi\ndef tau(a):\n    '''\n    Write a python function to find the mathematical constant tau.\n    '''\n    return math.tau\ndef e(a):\n    '''\n    Write a python function to find the mathematical constant e.\n    '''\n    return math.e\ndef pi(a):\n    '''\n    Write a python function to find the mathematical constant pi.\n    '''\n    return math.pi\ndef tau(a):\n    '''\n    Write a python function to find the mathematical constant tau.\n    '''\n    return math.tau\ndef ln(a):\n    '''\n    Write a python function to find the natural logarithm of a number.\n    '''\n    return math.log(a)\ndef log(a):\n    '''\n    Write a python function to find the logarithm base 10 of a number.\n    '''\n    return math.log(a,10)\ndef exp(a):\n    '''\n    Write a python function to find the exponent of a number.\n    '''\n    return math.exp(a)\ndef log10(a):\n    '''\n    Write a python function to find the logarithm base 10 of a number.\n    '''\n    return math.log10(a)\ndef log(a):\n    '''\n    Write a python function to find the logarithm base 2 of a number.\n    '''\n    return math.log2(a)\ndef pi():\n    '''\n    Write a python function to find the value of pi.\n    '''\n    return math.pi\ndef tau():\n    '''\n    Write a python function to find the value of tau.\n    '''\n    return math.tau\ndef acos(a):\n    '''\n    Write a python function to find the arc cosine of a number.\n    '''\n    return math.acos(a)\ndef asin(a):\n    '''\n    Write a python function to find the arc sine of a number.\n    '''\n    return math.asin(a)\ndef atan(a):\n    '''\n    Write a python function to find the arc tangent of a number.\n    '''\n    return math.atan(a)\ndef degrees(a):\n    '''"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = list(str1)\n    return tuple(list1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.replace(\" \", \"\")\n    str1 = str1.lower()\n    char_list = list(str1)\n    tup1 = tuple(char_list)\n    return tup1\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Your code here\n    return tuple(str1)\n    \ndef main():\n    # Test your functions here.\n    # The test cases will cover various cases.\n    # You need not to worry about error handling in this code.\n    # This code is just to test if your functions are working.\n    print(string_to_tuple(\"hello\"))\n    print(string_to_tuple(\"\"))\n    print(string_to_tuple(\" \"))\n    print(string_to_tuple(\"   \"))\n    print(string_to_tuple(\"a\"))\n    print(string_to_tuple(\"ab\"))\n    print(string_to_tuple(\"abc\"))\n    print(string_to_tuple(\"abcd\"))\n    print(string_to_tuple(\"hello there\"))\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.replace(\" \", \"\")\n    str1 = str1.lower()\n    lst = []\n    for i in str1:\n        lst.append(i)\n    return tuple(lst)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ (n & (n-1))\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n & ~(n-1)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i=0\n    while(n):\n        n &= n-1\n        i+=1\n    return i\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (((n & -n) << 1) | 1) ^ n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(\"Left most unset bit is:\", end = \" \") \n    for i in range(0, 32): \n        if (n & (1 << i))!= 0: \n            print(0, end = \"\") \n        else: \n            print(1, end = \"\") \n    print() \n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ((n & ~(n + 1)) | (n + 1)) & -~n\n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    n &= -n\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n ^ n>>1\n    \ndef get_right_most_set_bit(n): \n    '''\n    Write a python function to get the right most set bit.\n    '''\n    return (n & -n)\n    \ndef set_right_most_set_bit(n): \n    '''\n    Write a python function to set the right most set bit.\n    '''\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n ^ n>>1\n    \ndef clear_right_most_set_bit(n): \n    '''\n    Write a python function to clear the right most set bit.\n    '''\n    return n & -n\n    \ndef clear_right_most_unset_bit(n): \n    '''\n    Write a python function to clear the right most unset bit.\n    '''\n    return n & (n - 1)\n    \ndef clear_left_most_set_bit(n): \n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    return n & -~n\n    \ndef clear_left_most_unset_bit(n): \n    '''\n    Write a python function to clear the left most unset bit.\n    '''\n    return n & (~n + 1)\n    \ndef set_right_most_set_bit_other_than_pos(n, k): \n    '''\n    Write a python function to set the right most set bit, other than k.\n    '''\n    return n | ((k - n) & -~k)\n    \ndef set_right_most_unset_bit_other_than_pos(n, k): \n    '''\n    Write a python function to set the right most unset bit, other than k.\n    '''\n    return n & ~k\n    \ndef clear_right_most_set_bit_other_than_pos(n, k): \n    '''\n    Write a python function to clear the right most set bit, other than k.\n    '''\n    return n & ((k - n) & -~k)\n    \ndef clear_right_most_unset_bit_other_than_pos(n, k): \n    '''\n    Write a python function to clear the right most unset bit, other than k.\n    '''\n    return n & ~k\n    \ndef clear_left_most_set_bit_other_than_pos(n, k): \n    '''\n    Write a python function to clear the left most set bit, other than k.\n    '''\n    return n & -~n\n    \ndef clear_left_most_unset_bit_other_than_pos(n, k): \n    '''\n    Write a python function to clear the left most unset bit, other than k.\n    '''\n    return n & (~n + 1) & -~k\n    \ndef set_left_most_set_bit_other_than_pos(n, k): \n    '''\n    Write a python function to set the left most set bit, other than k.\n    '''\n    return n & -~n\n    \ndef set_left_most_unset_bit_other_than_pos(n, k): \n    '''\n    Write a python function to set the left most unset bit, other than k.\n    '''\n    return n & (~n + 1) & -~k\n    \ndef clear_pos(n, k): \n    '''\n    Write a python function to clear the left most set bit, other than k.\n    '''\n    return n & (~n + 1) & ~k\n    \ndef set_pos(n, k): \n    '''\n    Write a python function to clear the left most set bit, other than k.\n    '''\n    return n & ~k\n    \nif __name__ == \"__main__\": \n    print(\"Write a python function to clear the left most set bit, other than k.\\n\")\n    n = 9\n    k = 3\n    print(\"Input: \", n, k)\n    print(\"Output: \", clear_left_most_set_bit_other_than_pos(n, k))\n    \n    print(\"\\n\\n\")\n    \n    print(\"Write a python function to clear the left most set bit, other than k.\\n\")\n    n = 12\n    k = 3\n    print(\"Input: \", n, k)\n    print(\"Output: \", clear_left_most_set_bit_other_than_pos(n, k))\n    \n    print(\"\\n\\n\")\n    \n    print(\"Write a python function to set the right most set bit, other than k.\\n\")\n    n = 9\n    k = 3\n    print(\"Input: \", n, k)\n    print(\"Output: \", set_right_most_set_bit_other_than_pos(n, k))\n    \n    print(\"\\n\\n\")\n    \n    print(\"Write a python function to set the right most unset bit, other than k.\\n\")\n    n = 9\n    k = 3\n    print(\"Input: \", n, k)\n    print(\"Output: \", set_right_most_unset_bit_other_than_pos(n, k))\n    \n    print(\"\\n\\n\")\n    \n    print(\"Write a python function to clear the right most set bit, other than k.\\n\")\n    n = 9\n    k = 3\n    print(\"Input: \", n, k)\n    print(\"Output: \", clear_right_most_set_bit_other_than_pos(n, k))\n    \n    print(\"\\n\\n\")\n    \n    print(\"Write a python function to clear the right most unset bit, other than k.\\n\")\n    n = 9\n    k = 3\n    print(\"Input: \", n, k)\n    print(\"Output: \", clear_right_most_unset_bit_other_than_pos(n, k))\n    \n    print(\"\\n\\n\")\n    \n    print(\"Write a python function to clear the left most set bit, other than k.\\n\")\n    n = 9\n    k = 3\n    print(\"Input: \", n, k)\n    print(\"Output: \", clear_left_most_set_bit_other_than_pos(n, k))\n    \n    print(\"\\n\\n\")\n    \n    print(\"Write a python function to clear the left most unset bit, other than k.\\n\")\n    n = 9\n    k = 3\n    print(\"Input: \", n, k)\n    print(\"Output: \", clear_left_most_unset_bit_other_than_pos(n, k))\n    \n    print(\"\\n\\n\")\n    \n    print(\"Write a python function to set the left most set bit, other than k.\\n\")\n    n = 9\n    k = 3\n    print(\"Input: \", n, k)\n    print(\"Output: \", set_left_most_set_bit_other_than_pos(n, k))\n    \n    print(\"\\n\\n\")\n    \n    print(\"Write a python function to set the left most unset bit, other than k.\\n\")\n    n = 9\n    k = 3\n    print(\"Input: \", n, k)\n    print(\"Output: \", set_left_most_unset_bit_other_than_pos(n, k))\n    \n    print(\"\\n\\n\")\n    \n    print(\"Write a python function to clear the right most set bit, other than k.\\n\")\n    n = 9\n    k = 3\n    print(\"Input: \", n, k)\n    print(\"Output: \", clear_right_most_set_bit_other_than_pos(n, k))\n    \n    print(\"\\n\\n\")\n    \n    print(\"Write a python function to clear the right most u"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(0, n.bit_length()):\n        if (1 << i) & n == 0:\n            return (1 << i)\n    return -1\nprint(set_left_most_unset_bit(3))\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n ^= n >> 1\n    n ^= n >> 2\n    n ^= n >> 4\n    n ^= n >> 8\n    n ^= n >> 16\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # starting from LSB, set the most significant bit to 0\n    # by flipping the bits\n    n |= n >> 1\n    # by using n ^ n we get the number with only one set bit\n    return n ^ n\n    \ndef get_left_most_unset_bit(n):\n    '''\n    Write a python function to get the left most unset bit.\n    '''\n    mask = 1\n    while mask <= n:\n        # right shift the mask by 1 bit\n        # check if any bits in mask are set\n        # if set, then that means we don't have the left most\n        # bit set\n        if not mask & n:\n            return mask\n        else:\n            # if any bits are set, then\n            # right shift by one more\n            mask = mask << 1\n    # if we reach here, then all the bits are set\n    return mask - 1\n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    # perform a right shift by one\n    # this will result in removing the least significant set bit\n    n >>= 1\n    return n + 1\n    \ndef get_right_most_unset_bit(n):\n    '''\n    Write a python function to get the right most unset bit.\n    '''\n    # if we right shift by one, then the least significant bit will\n    # be removed\n    return (n >> 1) + 1\n    \n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ (n & (n - 1))\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h/(3*h)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    # Write your code here.\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Write your code here."
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*(r**2)*(h/3)\n    print(volume)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (math.pi * r**2 * h) / 3\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r == 0:\n        return None\n    else:\n        return (math.pi * r ** 2) * (h/3)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone = math.pi * r**2 * h / 3\n    return volume_cone\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1/3)*math.pi*r*r*h\n    print(\"The volume of a cone of radius \"+str(r)+\" and height \"+str(h)+\" is \"+str(v))\n    return v\n    \ndef tax_bracket(income):\n    '''\n    Write a function to determine the tax bracket for the given income.\n    '''\n    if income < 50000:\n        tax_bracket = \"None\"\n        return tax_bracket\n    elif income >= 50000 and income < 70000:\n        tax_bracket = \"10% and 20%\"\n        return tax_bracket\n    elif income >= 70000 and income < 80000:\n        tax_bracket = \"20% and 30%\"\n        return tax_bracket\n    elif income >= 80000 and income < 90000:\n        tax_bracket = \"30% and 40%\"\n        return tax_bracket\n    elif income >= 90000 and income < 100000:\n        tax_bracket = \"40% and 50%\"\n        return tax_bracket\n    elif income >= 100000 and income < 110000:\n        tax_bracket = \"50% and 60%\"\n        return tax_bracket\n    elif income >= 110000 and income < 120000:\n        tax_bracket = \"60% and 70%\"\n        return tax_bracket\n    elif income >= 120000 and income < 130000:\n        tax_bracket = \"70% and 80%\"\n        return tax_bracket\n    elif income >= 130000 and income < 140000:\n        tax_bracket = \"80% and 90%\"\n        return tax_bracket\n    elif income >= 140000 and income < 150000:\n        tax_bracket = \"90% and 100%\"\n        return tax_bracket\n    elif income >= 150000:\n        tax_bracket = \"100%\"\n        return tax_bracket\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #initialize highest power\n    highestPower = 0\n    #loop through each power of 2\n    while pow(2, highestPower) <= n:\n        #find the highest power of 2 that is less than or equal to n\n        highestPower += 1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power_of_2 = 0\n    while True:\n        if (highest_power_of_2 > n):\n            break\n        elif (highest_power_of_2 & highest_power_of_2 - 1 == 0):\n            break\n        highest_power_of_2 += 1\n    return highest_power_of_2\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the variable\n    i = 0\n    # Run the loop until we find a power of 2\n    while ((2 ** i) <= n):\n        # Increment i\n        i = i + 1\n    # Return i\n    return i - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return int(n/2)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    res = 0\n    while n:\n        res += 1\n        n >>= 1\n    return res\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2**int(n**0.5)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n = n - 1\n    power = 1\n    while (2**power <= n):\n        power = power + 1\n    return power-1"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x=1\n    while x>=0:\n        if 2**x <= n:\n            x-=1\n        else:\n            break\n    return x\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initializing high\n    high = 1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    return (1 << int(math.log(n,2)))\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return sum(lucas(i) for i in range(1,n+1))\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if (n < 0):\n        return \"invalid input\"\n    if (n == 0):\n        return 2\n    elif (n == 1):\n        return 1\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # a0 = 2\n    # a1 = 1\n    # lucas_list = [2, 1]\n    # for i in range(2, n + 1):\n    #     lucas_list.append(lucas_list[i-1] + lucas_list[i-2])\n    # return lucas_list[n-1]\n    def lucas_helper(n, a0, a1):\n        if n == 0:\n            return a0\n        elif n == 1:\n            return a1\n        else:\n            return lucas_helper(n-1, a0, a1) + lucas_helper(n-2, a0, a1)\n    return lucas_helper(n, 2, 1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return lucas(n-2) + lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n - 1) + find_lucas(n - 2))\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_seq = [2, 1]\n    for i in range(n - 2):\n        lucas_seq.append(lucas_seq[i] + lucas_seq[i + 1])\n    return lucas_seq[n]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_string = ''\n    for element in list_:\n        new_string += string\n    return new_string\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    print(\"The list is \" + str(list_))\n    print(\"The string is \" + string)\n    \n    for index in range(len(list_)):\n        list_[index] = format(list_[index], string)\n    \n    print(\"The new list is \" + str(list_))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for i in range(len(list_)):\n        result.append(string.format(list_[i]))\n    return result\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = \"\"\n    for i in list_:\n        result = result + string.format(i)\n    return result\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        if type(i) == int:\n            i = str(i)\n        if type(i) == float:\n            i = str(i)\n        string = string.replace('{}', i)\n        yield string\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_[:] = [string.format(element) for element in list_]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string % element)\n    return result\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = list(map(lambda x: string.format(x), list_))\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res_dict = {}\n    for ele1 in l1:\n        for ele2 in l2:\n            for ele3 in l3:\n                res_dict[(ele1, ele2, ele3)] = []\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        d2[l3[i]] = l2[i]\n    for i in d1.keys():\n        d3[i] = d1[i]\n    for i in d2.keys():\n        d3[i] = d2[i]\n    return d3\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = dict(zip(l2,l3))\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # first check if the lengths are equal\n    if len(l1)!= len(l2):\n        return False\n    else:\n        # if they are equal then we have to check if the elements of the list are\n        # equal in length and then return the concatenated list\n        for i in range(len(l1)):\n            if len(l1[i])!= len(l2[i]):\n                return False\n            else:\n                if len(l1[i]) == len(l3[i]):\n                    return l1[i]+l2[i]+l3[i]\n                else:\n                    return False\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = {}\n    for i in range(len(l1)):\n        res[l1[i]] = {}\n        for j in range(len(l2)):\n            res[l1[i]][l2[j]] = l3[i][j]\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = []\n    for i in range(len(l1)):\n        temp = {}\n        temp['Player'] = l1[i]\n        temp['Team'] = l2[i]\n        temp['No'] = l3[i]\n        res.append(temp)\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    z = zip(l1, l2, l3)\n    d = {k1: {k2: k3 for k1, k2, k3 in z} for k1, k2, k3 in z}\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {l1[i]: {l2[j]: l3[k] for j, k in enumerate(l2)} for i, k in enumerate(l1)}\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    #l1 = [1, 2, 3, 4]\n    #l2 = [2, 3, 4, 5]\n    #l3 = [3, 4, 5, 6]\n    my_dict = {}\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                my_dict[i] = {l2[j]: {l3[k]: l1[i]}}\n    print(my_dict)\n    \nconvert_list_dictionary([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l_1 = [0, 1, 2]\n    l_2 = [3, 4, 5]\n    l_3 = [6, 7, 8]\n    d1 = dict(zip(l_1, l_2))\n    d2 = dict(zip(l_1, l_3))\n    return [d1, d2]\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    max_sum = n\n    for i in range(n+1):\n        if (i%2==0 and i%3==0 and i%5==0):\n            new_sum = i + get_max_sum(n-i)\n            if new_sum > max_sum:\n                max_sum = new_sum\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    result = 0\n    for n in range(1, n):\n        result = max( (result + f(n/2)), (result + f(n/3)), (result + f(n/4)), (result + f(n/5)))\n    return result\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def max_sum_poss(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 4\n        else:\n            return max(max_sum_poss(n/2), max_sum_poss(n/3), max_sum_poss(n/4), max_sum_poss(n/5))\n    return max_sum_poss(n)\n    \n    \n    \ndef kaprekar_routine(n):\n    '''\n    Write a function to find the number of zeros in the Kaprekar routine.\n    '''\n    def kap_routine(n):\n        if len(str(n)) == 1:\n            return 1\n        else:\n            if n == 1:\n                return 0\n            else:\n                num = str(n)\n                left = int(num[0])\n                right = int(num[1])\n                if left == 0:\n                    if right == 0:\n                        return 1 + kap_routine(n - 1)\n                    else:\n                        return kap_routine(n - 1)\n                else:\n                    if right == 0:\n                        return kap_routine(n - 1)\n                    else:\n                        return kap_routine(n - 1) + kap_routine(n - 1)\n    return kap_routine(n)\n    \n    \ndef kaprekar_loop(n):\n    '''\n    Write a function to find the number of iterations of the Kaprekar routine.\n    '''\n    def kap_loop(n):\n        if len(str(n)) == 1:\n            return 1\n        else:\n            if n == 1:\n                return 0\n            else:\n                num = str(n)\n                left = int(num[0])\n                right = int(num[1])\n                if left == 0:\n                    if right == 0:\n                        return 1 + kap_loop(n - 1)\n                    else:\n                        return kap_loop(n - 1)\n                else:\n                    if right == 0:\n                        return kap_loop(n - 1)\n                    else:\n                        return kap_loop(n - 1) + kap_loop(n - 1)\n    return kap_loop(n)\n    \n    \ndef get_cycle_length (n):\n    '''\n    Write a function to find the cycle length of the Kaprekar routine.\n    '''\n    def kap_cycle_length(n):\n        if len(str(n)) == 1:\n            return 1\n        else:\n            if n == 1:\n                return 0\n            else:\n                num = str(n)\n                left = int(num[0])\n                right = int(num[1])\n                if left == 0:\n                    if right == 0:\n                        return 1 + kap_cycle_length(n - 1)\n                    else:\n                        return kap_cycle_length(n - 1)\n                else:\n                    if right == 0:\n                        return kap_cycle_length(n - 1)\n                    else:\n                        return kap_cycle_length(n - 1) + kap_cycle_length(n - 1)\n    return kap_cycle_length(n)\n    \n    \ndef is_square_num(n):\n    '''\n    Write a function to determine whether a given number is a square number.\n    '''\n    def is_square_num(n):\n        if n == 1:\n            return True\n        else:\n            if n == 0:\n                return False\n            else:\n                num = int(math.sqrt(n))\n                if num * num == n:\n                    return True\n                else:\n                    return False\n    return is_square_num(n)\n    \n    \ndef has_consecutive_squares(n):\n    '''\n    Write a function to determine whether a given number has consecutive squares in its prime factorisation.\n    '''\n    def consecutive_squares(n):\n        if len(str(n)) == 1:\n            return False\n        else:\n            if n == 1:\n                return False\n            else:\n                num = str(n)\n                left = int(num[0])\n                right = int(num[1])\n                if left == 0:\n                    if right == 0:\n                        return consecutive_squares(n - 1)\n                    else:\n                        return consecutive_squares(n - 1)\n                else:\n                    if right == 0:\n                        return consecutive_squares(n - 1)\n                    else:\n                        if is_square_num(left) and is_square_num(right):\n                            return True\n                        else:\n                            return consecutive_squares(n - 1)\n    return consecutive_squares(n)\n    \n    \ndef is_perfect_number(n):\n    '''\n    Write a function to determine whether a given number is a perfect number.\n    '''\n    def perfect_number(n):\n        if len(str(n)) == 1:\n            return False\n        else:\n            if n == 1:\n                return False\n            else:\n                num = str(n)\n                left = int(num[0])\n                right = int(num[1])\n                if left == 0:\n                    if right == 0:\n                        return perfect_number(n - 1)\n                    else:\n                        return perfect_number(n - 1)\n                else:\n                    if right == 0:\n                        return perfect_number(n - 1)\n                    else:\n                        if left == right:\n                            return False\n                        else:\n                            return perfect_number(n - 1)\n    return perfect_number(n)\n    \n    \ndef get_largest_prime_factor(n):\n    '''\n    Write a function to return the largest prime factor of a given number.\n    '''\n    def largest_prime_factor(n):\n        if len(str(n)) == 1:\n            return n\n        else:\n            if n == 1:\n                return n\n            else:\n                num = str(n)\n                left = int(num[0])\n                right = int(num[1])\n                if left == 0:\n                    if right == 0:\n                        return largest_prime_factor(n - 1)\n                    else:\n                        return largest_prime_factor(n - 1)\n                else:\n                    if right == 0:\n                        return largest_prime_factor(n - 1)\n                    else:\n                        if is_prime_number(left) and is_prime_number(right):\n                            return right\n                        else:\n                            return largest_prime_factor(n - 1)\n    return largest_prime_factor(n)\n    \n    \ndef get_prime_factorisation(n):\n    '''\n    Write a function to return a list of the prime factorisation of a given number.\n    '''\n    def prime_factorisation(n):\n        if len(str(n)) == 1:\n            return [n]\n        else:\n            if n == 1:\n                return []\n            else:\n                num = str(n)\n                left = int(num[0])\n                right = int(num[1])\n                if left == 0:\n                    if right == 0:\n                        return prime_factorisation(n - 1)\n                    else:\n                        return prime_factorisation(n - 1)\n                else:\n                    if right == 0:\n                        return prime_factorisation(n - 1)\n                    else:\n                        if is_prime_number(left) and is_prime_number(right):\n                            return [left, right]\n                        else:\n                            return prime_factorisation(n - 1)\n    return prime_factorisation(n)\n    \n    \ndef is_permutation(s1, s2):\n    '''\n    Write a function to determine whether the two given strings are permutations of each other.\n    '''\n    def permutation(s1, s2):\n        if len(s1) == 1:\n            if len(s2) == 1:\n                return True\n            else:\n                return False\n        else:\n            if len(s2) == 1:\n                return False\n            else:\n                num = str(s1)\n                left = int(num[0])\n                right = int(num[1]"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return get_max_sum_recursive (n, {})\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n1 = n\n    n2 = n\n    n3 = n\n    n4 = n\n    n5 = n\n    max = 0\n    while n1 > 1 or n2 > 1 or n3 > 1 or n4 > 1 or n5 > 1:\n        n1 /= 2\n        n1 = int(n1)\n        if n1 > 1:\n            n2 /= 3\n            n2 = int(n2)\n            if n2 > 1:\n                n3 /= 4\n                n3 = int(n3)\n                if n3 > 1:\n                    n4 /= 5\n                    n4 = int(n4)\n                    if n4 > 1:\n                        n5 /= 6\n                        n5 = int(n5)\n                        if n5 > 1:\n                            n = n1 + n2 + n3 + n4 + n5\n                            if n > max:\n                                max = n\n                    else:\n                        n = n1 + n2 + n3 + n4 + n5\n                        if n > max:\n                            max = n\n                else:\n                    n = n1 + n2 + n3 + n4 + n5\n                    if n > max:\n                        max = n\n            else:\n                n = n1 + n2 + n3 + n4 + n5\n                if n > max:\n                    max = n\n        else:\n            n = n1 + n2 + n3 + n4 + n5\n            if n > max:\n                max = n\n    return max\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max( (get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    else:\n        max_sum = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n        return max(max_sum, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # variables for iterative methods\n    max_sum = 0\n    for i in range(n):\n        num_1 = i\n        num_2 = (i//2)\n        num_3 = (i//3)\n        num_4 = (i//4)\n        num_5 = (i//5)\n        num_sum = num_1 + num_2 + num_3 + num_4 + num_5\n        if num_sum > max_sum:\n            max_sum = num_sum\n    return max_sum\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_length = []\n    for i in input_list:\n        list_length.append(len(i))\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) >= max_length:\n            max_length = len(input_list[i])\n            max_length_list = input_list[i]\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for list_item in input_list:\n        if len(list_item) >= max_len:\n            max_len = len(list_item)\n            max_list = list_item\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return None\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return len(max(input_list, key=len))\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = len(input_list[0])\n    index = 0\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > length:\n            index = i\n            length = len(input_list[i])\n    return input_list[index]\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if(len(input_list[i]) > max_length):\n            max_length = len(input_list[i])\n            max_index = i\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = 0\n    for i in input_list:\n        if len(i) > length:\n            length = len(i)\n    return length\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(1,len(test_tup)):\n        if test_tup[i]==test_tup[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = []\n    for x in test_tup:\n        if x in seen:\n            return False\n        else:\n            seen.append(x)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct = set(test_tup)\n    if(len(distinct) == len(test_tup)):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = tuple(sorted(test_tup))\n    if len(tup) == len(set(tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_list = []\n    for i in test_tup:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tuple_list = [tup for tup in test_tup]\n    return len(tuple_list) == len(set(tuple_list))\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    from collections import OrderedDict\n    dict = OrderedDict()\n    for i in range(0,len(str1)):\n        if str1[i] in dict:\n            dict[str1[i]] = dict[str1[i]] + 1\n        else:\n            dict[str1[i]] = 1\n    for key, value in dict.items():\n        if value == 1:\n            return key\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    lst = list(str1)\n    seen = []\n    for letter in lst:\n        if letter not in seen:\n            seen.append(letter)\n        else:\n            seen.pop(seen.index(letter))\n    return seen[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    non_repeated_char = {}\n    for char in str1:\n        if char in non_repeated_char:\n            non_repeated_char[char] += 1\n        else:\n            non_repeated_char[char] = 1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_frequency = {}\n    for char in str1:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n    for i in range(0, len(str1)):\n        if char_frequency[str1[i]] == 1:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if str1==None or len(str1)<0:\n        return -1\n    count_dict={}\n    for i in range(len(str1)):\n        if str1[i] not in count_dict:\n            count_dict[str1[i]]=1\n        else:\n            count_dict[str1[i]]+=1\n    for i in range(len(str1)):\n        if count_dict[str1[i]]==1:\n            return str1[i]\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1=str1.lower()\n    if len(str1)==1:\n        return str1\n    else:\n        freq={}\n        for i in str1:\n            if i in freq:\n                freq[i]+=1\n            else:\n                freq[i]=1\n        for i in str1:\n            if freq[i]==1:\n                return i\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(0,len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return 'No non-repeating character found!'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for i in str1:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initializing the count variable to 0\n    count = 0\n    # Initializing the result variable to 0\n    result = 0\n    # Initializing the array of ASCII values of the characters in the string\n    array_of_char = [ord(char) for char in str1]\n    # Initializing the array of ASCII values of the characters in the string\n    array_of_char = list(str1)\n    # Traversing the string\n    for i in range(len(array_of_char)):\n        # Checking if the character is repeated or not\n        if array_of_char[i] in str1:\n            # Incrementing the count variable if the character is repeated\n            count += 1\n        # Checking if the character is not repeated or not\n        if count == 1:\n            # Setting the result variable to the ASCII value of the first non-repeated character\n            result = array_of_char[i]\n            break\n    # Returning the ASCII value of the first non-repeated character\n    return result\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\nprint(check_char(\"aa\"))\nprint(check_char(\"aba\"))\nprint(check_char(\"aab\"))\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) and string[0] == string[-1]: \n        return True\n    return False\n    \nstring = \"abcdef\"\nprint(check_char(string))\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if (string[0] == string[-1] and len(string) > 1) else False \n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    result = re.search(regex,string)\n    if result is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex,string)\n    "
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string)==1 or len(string)==0:\n        return False\n    if string[0]==string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    result = re.search(regex, string)\n    if result:\n        return result.group() == string[0]\n    return False\n    "
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string):\n        if(string[0]==string[-1]):\n            print(string,\"is a palindrome\")\n        else:\n            print(string,\"is not a palindrome\")\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.search(regex, string)):\n        return True\n    return False\n    \n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Your code goes here\n    return 0\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a < c:\n            median = a\n        elif b > c:\n            median = b\n        else:\n            median = c\n    else:\n        if a > c:\n            median = a\n        elif b < c:\n            median = b\n        else:\n            median = c\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    print('The median number of',a,b,c,'is',(a+b+c-min(a,b,c))/2)\n    \nmedian_numbers(1,2,3)\nmedian_numbers(2,1,3)\nmedian_numbers(2,3,1)\nmedian_numbers(3,1,2)\nmedian_numbers(3,2,1)\nmedian_numbers(3,2,3)"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a < c:\n            return a\n        elif c < b:\n            return c\n        else:\n            return b\n    else:\n        if b < c:\n            return b\n        elif a < c:\n            return a\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    import statistics\n    return statistics.median([a,b,c])\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return numpy.median([a,b,c])\n    \nprint(median_numbers(1,2,3))\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            if b>c:\n                median = b\n            else:\n                median = c\n        else:\n            median = a\n    else:\n        if b>c:\n            median = b\n        else:\n            median = c\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = ''\n    if a < b and a < c:\n        if b < c:\n            median = b\n        else:\n            median = c\n    elif b < a and b < c:\n        if a < c:\n            median = a\n        else:\n            median = c\n    elif c < a and c < b:\n        if a < b:\n            median = a\n        else:\n            median = b\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return b\n        elif a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        elif a<c:\n            return a\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            print(\"Median =\", c)\n        elif a > c:\n            print(\"Median =\", b)\n        else:\n            print(\"Median =\", a)\n    elif a > c:\n        if b < c:\n            print(\"Median =\", c)\n        elif a < b:\n            print(\"Median =\", b)\n        else:\n            print(\"Median =\", a)\n    else:\n        if b < c:\n            print(\"Median =\", b)\n        elif a < c:\n            print(\"Median =\", c)\n        else:\n            print(\"Median =\", a)\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += sum(int(digit) for digit in str(num))\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sums = 0\n    for num in nums:\n        sums += sum(int(digit) for digit in str(num))\n    return sums\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for i in nums:\n        sum_of_digits = 0\n        for j in str(i):\n            sum_of_digits += int(j)\n        sum_of_digits_list.append(sum_of_digits)\n    print(sum_of_digits_list)\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for i in nums:\n        total += sum(int(digit) for digit in str(i))\n    return total\nprint(sum_of_digits([51, 71, 17, 42]))\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for x in nums:\n        result += sum(int(c) for c in str(x))\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += sum(int(digit) for digit in str(num))\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(map(int, str(num)))\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += sum(map(int,str(i)))\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        sum_digits += sum([int(i) for i in str(num)])\n    return sum_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    lst = [int(i) for i in str(nums)]\n    return sum(lst)\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # (0, 1, 1)\n    # (1, 1, 0)\n    # (0, 0, 0)\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(t1 ^ t2 for t1, t2 in zip(test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert(len(test_tup1) == len(test_tup2))\n    xor_tuple = []\n    for i in range(len(test_tup1)):\n        xor_tuple.append(test_tup1[i] ^ test_tup2[i])\n    return xor_tuple\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res_tup = ()\n    for i in range(len(test_tup1)):\n        res_tup += (test_tup1[i] ^ test_tup2[i],)\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Tuples must be the same length!\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return test_tup1 ^ test_tup2\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_dict = {}\n    for tup in test_list:\n        test_dict[tup] = 1\n    return len(test_dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for x, y, z in test_list:\n        unique_tuples.add((x, y, z))\n    return len(unique_tuples)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = test_list.split()\n    return test_list\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n    \ndef main():\n    print(\"\\nThis program is for finding the largest and smallest number in a list.\\n\")\n    number_list = input(\"Enter a list of numbers: \").split()\n    print(\"\\nThis is the list you entered:\", number_list)\n    print(\"The smallest number in the list is:\", find_smallest(number_list))\n    print(\"The largest number in the list is:\", find_largest(number_list))\n    print(\"The average of all numbers in the list is:\", find_average(number_list))\n    print(\"The number of distinct tuples in the list is:\", extract_freq(number_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = [\n        [(1, 2), (3, 4), (5, 6)],\n        [(1, 2), (2, 3), (1, 2), (3, 4), (5, 6)],\n        [(0, 0), (4, 4), (5, 6)]\n    ]\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(map(tuple, test_list)))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = dict()\n    for i in test_list:\n        freq[i] = test_list.count(i)\n    return(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #list of unique tuples\n    new_list = []\n    #list of the frequency of each tuple\n    freq_list = []\n    for i in test_list:\n        if i not in new_list:\n            new_list.append(i)\n            freq_list.append(test_list.count(i))\n    return new_list,freq_list\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    sum_list = [(lst1[i] + lst2[i]) for i in range(len(lst1))]\n    return tuple(sum_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return [i+j for i,j in zip(test_tup1,test_tup2)]\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_list = []\n    for i in range(len(test_tup1)):\n        new_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(new_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return [(test_tup1[0] + test_tup2[0]), (test_tup1[1] + test_tup2[1])]\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if test_tup1 and test_tup2:\n        return tuple([test_tup1[i] + test_tup2[i] for i in range(len(test_tup1))])\n    elif not test_tup1 and not test_tup2:\n        return ()\n    elif not test_tup1:\n        return test_tup2\n    elif not test_tup2:\n        return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = []\n    for tup in zip(test_tup1, test_tup2):\n        new_tup.append(sum(tup))\n    return tuple(new_tup)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = tuple(tup1[idx] + tup2[idx] for idx in range(len(tup1)))\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] + test_tup2[i])\n    return tuple(res)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] + test_tup2[i])\n    return tuple(res)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for index in range(len(test_tup1)):\n        result += (test_tup1[index] + test_tup2[index],)\n    return result\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef negative_of_number(a):\n    '''\n    Write a python function to find the negative of a number.\n    '''\n    if a>0:\n        return a*-1\n    else:\n        return a\ndef number_to_list(a):\n    '''\n    Write a python function to convert a number to a list.\n    '''\n    return list(a)\ndef list_to_number(a):\n    '''\n    Write a python function to convert a list to a number.\n    '''\n    return int(\"\".join(map(str,a)))\ndef number_greater_than_number(a,b):\n    '''\n    Write a python function to find if the first number is greater than the second number.\n    '''\n    if a>b:\n        return True\n    else:\n        return False\ndef number_equal_to_number(a,b):\n    '''\n    Write a python function to find if the first number is equal to the second number.\n    '''\n    if a==b:\n        return True\n    else:\n        return False\ndef number_greater_than_or_equal_to_number(a,b):\n    '''\n    Write a python function to find if the first number is greater than or equal to the second number.\n    '''\n    if a>=b:\n        return True\n    else:\n        return False\ndef number_less_than_or_equal_to_number(a,b):\n    '''\n    Write a python function to find if the first number is less than or equal to the second number.\n    '''\n    if a<=b:\n        return True\n    else:\n        return False\ndef number_less_than_number(a,b):\n    '''\n    Write a python function to find if the first number is less than the second number.\n    '''\n    if a<b:\n        return True\n    else:\n        return False\ndef number_is_prime(a):\n    '''\n    Write a python function to determine if a number is a prime number.\n    '''\n    if a>1:\n        for i in range(2,a):\n            if (a%i)==0:\n                return False\n            else:\n                return True\n    else:\n        return False\ndef number_is_odd(a):\n    '''\n    Write a python function to determine if a number is odd.\n    '''\n    if a%2==0:\n        return True\n    else:\n        return False\ndef number_is_even(a):\n    '''\n    Write a python function to determine if a number is even.\n    '''\n    if a%2==1:\n        return True\n    else:\n        return False\ndef number_is_palindrome(a):\n    '''\n    Write a python function to determine if a number is a palindrome.\n    '''\n    if list(a)==list(reversed(a)):\n        return True\n    else:\n        return False\ndef sum_of_two_numbers(a,b):\n    '''\n    Write a python function to sum two numbers.\n    '''\n    return a+b\ndef difference_between_two_numbers(a,b):\n    '''\n    Write a python function to find the difference between two numbers.\n    '''\n    return a-b\ndef product_of_two_numbers(a,b):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a*b\ndef quotient_of_two_numbers(a,b):\n    '''\n    Write a python function to find the quotient of two numbers.\n    '''\n    return a/b\ndef power_of_two_numbers(a,b):\n    '''\n    Write a python function to find the power of two numbers.\n    '''\n    return a**b\ndef number_is_in_range(a,b,c):\n    '''\n    Write a python function to determine if a number is in the range between two other numbers.\n    '''\n    if a>=b and a<=c:\n        return True\n    else:\n        return False\ndef number_is_between_other_two_numbers(a,b,c):\n    '''\n    Write a python function to determine if a number is in the range between two other numbers.\n    '''\n    if a>=b and a<c:\n        return True\n    else:\n        return False\ndef number_is_divisible_by_another_number(a,b):\n    '''\n    Write a python function to determine if a number is divisible by another number.\n    '''\n    if a%b==0:\n        return True\n    else:\n        return False\ndef number_is_not_divisible_by_another_number(a,b):\n    '''\n    Write a python function to determine if a number is not divisible by another number.\n    '''\n    if a%b!=0:\n        return True\n    else:\n        return False\ndef number_is_even_number(a):\n    '''\n    Write a python function to determine if a number is even.\n    '''\n    if a%2==0:\n        return True\n    else:\n        return False\ndef number_is_odd_number(a):\n    '''\n    Write a python function to determine if a number is odd.\n    '''\n    if a%2!=0:\n        return True\n    else:\n        return False\ndef number_is_negative_number(a):\n    '''\n    Write a python function to determine if a number is negative.\n    '''\n    if a<0:\n        return True\n    else:\n        return False\ndef number_is_positive_number(a):\n    '''\n    Write a python function to determine if a number is positive.\n    '''\n    if a>0:\n        return True\n    else:\n        return False\ndef sum_of_list_of_numbers(a):\n    '''\n    Write a python function to sum a list of numbers.\n    '''\n    return sum(a)\ndef list_of_numbers_to_number(a):\n    '''\n    Write a python function to convert a list of numbers to a single number.\n    '''\n    return int(\"\".join(map(str,a)))\ndef number_is_greater_than_list_of_numbers(a,b):\n    '''\n    Write a python function to determine if a number is greater than a list of numbers.\n    '''\n    if a>max(b):\n        return True\n    else:\n        return False\ndef number_is_greater_than_or_equal_to_list_of_numbers(a,b):\n    '''\n    Write a python function to determine if a number is greater than or equal to a list of numbers.\n    '''\n    if a>=max(b):\n        return True\n    else:\n        return False\ndef number_is_less_than_list_of_numbers(a,b):\n    '''\n    Write a python function to determine if a number is less than a list of numbers.\n    '''\n    if a<min(b):\n        return True\n    else:\n        return False\ndef number_is_less_than_or_equal_to_list_of_numbers(a,b):\n    '''\n    Write a python function to determine if a number is less than or equal to a list of numbers.\n    '''\n    if a<=min(b):\n        return True\n    else:\n        return False\ndef number_is_in_list_of_numbers(a,b):\n    '''\n    Write a python function to determine if a number is in a list of numbers.\n    '''\n    if a in b:\n        return True\n    else:\n        return False\ndef number_is_not_in_list_of_numbers(a,b):\n    '''\n    Write a python function to determine if a number is not in a list of numbers.\n    '''\n    if a not in b:\n        return True\n    else:\n        return False"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\nprint(\"\\n\\n\")\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if(a<b):\n        print(a)\n    else:\n        print(b)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    elif a > b:\n        return b\n    else:\n        return a\n    "
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>=b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    return min(a,b)\n    \nminimum(5,2)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b,c):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    return minimum(minimum(a,b),c)\n    \ndef minimum(a,b,c,d):\n    '''\n    Write a python function to find the minimum of four numbers.\n    '''\n    return minimum(minimum(a,b),c,d)\n    \ndef minimum(a,b,c,d,e):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e)\n    \ndef minimum(a,b,c,d,e,f):\n    '''\n    Write a python function to find the minimum of six numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f)\n    \ndef minimum(a,b,c,d,e,f,g):\n    '''\n    Write a python function to find the minimum of seven numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g)\n    \ndef minimum(a,b,c,d,e,f,g,h):\n    '''\n    Write a python function to find the minimum of eight numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h)\n    \ndef minimum(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a python function to find the minimum of nine numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j):\n    '''\n    Write a python function to find the minimum of ten numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i,j)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k):\n    '''\n    Write a python function to find the minimum of eleven numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i,j,k)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l):\n    '''\n    Write a python function to find the minimum of twelve numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i,j,k,l)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m):\n    '''\n    Write a python function to find the minimum of thirteen numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n):\n    '''\n    Write a python function to find the minimum of fourteen numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o):\n    '''\n    Write a python function to find the minimum of fifteen numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p):\n    '''\n    Write a python function to find the minimum of sixteen numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q):\n    '''\n    Write a python function to find the minimum of seventeen numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p,q)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r):\n    '''\n    Write a python function to find the minimum of eighteen numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s):\n    '''\n    Write a python function to find the minimum of nineteen numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t):\n    '''\n    Write a python function to find the minimum of twenty numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u):\n    '''\n    Write a python function to find the minimum of twenty-one numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v):\n    '''\n    Write a python function to find the minimum of twenty-two numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w):\n    '''\n    Write a python function to find the minimum of twenty-three numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x):\n    '''\n    Write a python function to find the minimum of twenty-four numbers.\n    '''\n    return minimum(minimum(a,b),c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print('{} exists'.format(tuplex))\n    else:\n        print('{} does not exist'.format(tuplex))\n        \ntuplex1 = ('apple','banana','cherry')\ntuplex2 = ('apple','banana','cherry','strawberry')\ncheck_tuplex(tuplex1,tuplex2)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    print('Enter a list of words: ')\n    tuplex = tuple(tuplex)\n    tuple1 = tuple(tuple1)\n    if tuple1 in tuplex:\n        print('Tuple1 exists')\n    else:\n        print('Tuple1 does not exist')\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex)!= len(tuple1):\n        return False\n    \n    for x in tuplex:\n        if x in tuple1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = sorted(tuplex)\n    tuple1 = sorted(tuple1)\n    tuplex = tuple(tuplex)\n    tuple1 = tuple(tuple1)\n    if tuplex[0] in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(x, \"is even\")\n    else: \n        print(x, \"is odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # An even number has exactly one bit set\n    # which is the highest set bit. So if we\n    # XOR all the bits starting from the highest\n    # bit it should result in 0\n    # For example:\n    # 1110 -> even -> 0 ^ 1 ^ 1 ^ 0 = 0\n    # 1010 -> odd -> 0 ^ 1 ^ 1 ^ 1 = 1\n    # 1100 -> even -> 0 ^ 0 ^ 0 ^ 0 = 0\n    # 1011 -> odd -> 0 ^ 0 ^ 1 ^ 1 = 1\n    # 1111 -> even -> 0 ^ 0 ^ 0 ^ 0 = 0\n    # 1010 -> odd -> 0 ^ 0 ^ 0 ^ 0 = 0\n    return x ^ (x >> 1)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    sum = 0\n    while (x): \n        sum = sum + int(x % 10)\n        x = int(x / 10)\n    return sum % 2\n    \n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    num_bits = 0\n    while x:\n        num_bits += 1\n        x = x & (x - 1)\n    if num_bits % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2 == 0)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n        \n        \n    \ndef find_Missing_Numbers(arr):\n    '''\n    Write a python function to find the missing numbers from a given array.\n    '''\n    arr.sort()\n    i = 0\n    while i < len(arr)-1:\n        if arr[i] + 1!= arr[i+1]:\n            return arr[i] + 1\n        i += 1\n        \ndef list_Anagrams(lst):\n    '''\n    Write a Python program to find the list of anagrams of a given string.\n    '''\n    d = dict()\n    for word in lst:\n        key = ''.join(sorted(word))\n        d[key] = d.get(key, []) + [word]\n        \n    return d.values()\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return str(x).count(\"1\") % 2\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    result = 0\n    while x:\n        result = result ^ x & 1\n        x >>= 1\n    return result\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return(x%2==0)\nprint(find_Parity(4))\nprint(find_Parity(5))"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2) \n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # turn the number into a list of its digits\n    n_list = []\n    while n > 0:\n        n_list.append(n%10)\n        n = n//10\n    # create a reversed copy of the list of digits\n    n_list_rev = []\n    for i in n_list[::-1]:\n        n_list_rev.append(i)\n    # create a list of all the possible permutations for the reversed list\n    perm_list = []\n    for i in range(len(n_list_rev)):\n        perm_list.append(list(permutations(n_list_rev)))\n    # multiply each permutation list by 10^(index) and add to a new list\n    perm_list_rev = []\n    for i in range(len(perm_list)):\n        perm_list_rev.append(list(map(lambda x: int(''.join(x)), perm_list[i])))\n    # create a new list containing the digits in descending order\n    new_list = []\n    for i in perm_list_rev:\n        new_list.append(max(i))\n    # add each digit to a string\n    new_string = ''\n    for i in new_list[::-1]:\n        new_string += str(i)\n    # convert the string to an integer\n    next_bigger = int(new_string)\n    return next_bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n is None:\n        return\n    n = list(str(n))\n    length = len(n)\n    for i in range(length-1):\n        j = i + 1\n        while j < length:\n            if n[j] > n[i]:\n                temp = n[i]\n                n[i] = n[j]\n                n[j] = temp\n                break\n            j += 1\n    n = ''.join(n)\n    print(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = [int(i) for i in str(n)]\n    res = []\n    for i in range(len(n)):\n        for j in range(len(n)):\n            if n[j]>n[i]:\n                res.append(n[j])\n                del n[j]\n                break\n        break\n    return int(''.join([str(i) for i in res+n]))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if isinstance(n, int) == False:\n        print(\"Not a valid integer\")\n        return -1\n    if n < 0:\n        print(\"Not a valid positive integer\")\n        return -1\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Note that the order of digits cannot be changed.\n    # Example:\n    # Input: 120\n    # Output: 21\n    # Explanation:\n    # Rearrange the digits to form the next bigger number: 210\n    # 21 is the next bigger number.\n    s = [int(d) for d in str(n)]\n    def next_bigger(s):\n        for i in range(len(s) - 1, -1, -1):\n            if s[i] > s[i - 1]:\n                for j in range(len(s) - 1, i - 1, -1):\n                    if s[i - 1] < s[j]:\n                        s[i - 1], s[j] = s[j], s[i - 1]\n                        return ''.join(str(d) for d in s)\n        return 'no answer'\n    return int(next_bigger(s))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(''.join(sorted(str(n), reverse=True)))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = [int(i) for i in str(n)]\n    j = len(n)-1\n    for i in range(len(n)-1):\n        if n[i] < n[i+1]:\n            for k in range(i+1, len(n)):\n                if n[k] > n[i]:\n                    n[i], n[k] = n[k], n[i]\n                    n = n[:i+1] + sorted(n[i+1:], reverse=True)\n                    break\n            else:\n                n[i] = n[i+1]\n                n = n[:i+1] + sorted(n[i+1:], reverse=True)\n            break\n    else:\n        return -1\n    return int(\"\".join([str(i) for i in n]))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return next_bigger(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    output = []\n    for i in range(len(n)):\n        print(i)\n        output.append(max(n[i:]))\n        print(output)\n        n = n.replace(max(n[i:]), str(i))\n        print(n)\n        #output = int(\"\".join(output))\n    print(output)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    bigger = []\n    while n > 0:\n        bigger.append(str(n % 10))\n        n //= 10\n    for i in range(len(bigger) - 1, -1, -1):\n        if len(bigger) == 1:\n            break\n        if bigger[i] < bigger[i - 1]:\n            bigger[i - 1], bigger[i] = bigger[i], bigger[i - 1]\n            break\n    return ''.join(bigger)\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    smallest_pairs = []\n    heapq.heapify(smallest_pairs)\n    if not nums1 or not nums2:\n        return []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(smallest_pairs) >= k:\n                if nums1[i] <= nums2[j]:\n                    heapq.heappushpop(smallest_pairs,(nums1[i],nums2[j]))\n            else:\n                heapq.heappush(smallest_pairs,(nums1[i],nums2[j]))\n    return list(zip(*smallest_pairs))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 == [] or nums2 == []:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return None\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n    result = []\n    for _, i, j in min_heap:\n        result.append((nums1[i], nums2[j]))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # here we use a heap to store the smaller number of pairs and pop out them if we have k elements\n    heap = []\n    for i in range(min(len(nums1),len(nums2))):\n        heap.append([nums1[i], nums2[i]])\n    heapq.heapify(heap)\n    return heapq.nsmallest(k, heap)\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def k_smallest_pairs_helper(nums1, nums2, k, ret, visited):\n        if len(ret) == k:\n            return\n        if len(nums1) == 0 or len(nums2) == 0:\n            return\n        min_heap = []\n        heapq.heappush(min_heap, (nums1[0]+nums2[0], 0, 0))\n        visited[0] = True\n        for i in range(1, len(nums1)):\n            if not visited[i]:\n                heapq.heappush(min_heap, (nums1[i]+nums2[0], i, 0))\n                visited[i] = True\n        for j in range(1, len(nums2)):\n            if not visited[j]:\n                heapq.heappush(min_heap, (nums1[0]+nums2[j], 0, j))\n                visited[j] = True\n        while len(min_heap) > 0:\n            val, i, j = heapq.heappop(min_heap)\n            ret.append((nums1[i], nums2[j]))\n            if i+1 < len(nums1) and not visited[i+1]:\n                heapq.heappush(min_heap, (nums1[i+1]+nums2[j], i+1, j))\n                visited[i+1] = True\n            if j+1 < len(nums2) and not visited[j+1]:\n                heapq.heappush(min_heap, (nums1[i]+nums2[j+1], i, j+1))\n                visited[j+1] = True\n    ret = []\n    visited = [False]*len(nums2)\n    k_smallest_pairs_helper(nums1, nums2, k, ret, visited)\n    return ret\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(len(nums1), len(nums2))):\n        heapq.heappush(heap, (-nums1[i] - nums2[i], i, i))\n    result = set()\n    while k > 0:\n        _, i1, i2 = heapq.heappop(heap)\n        result.add((nums1[i1], nums2[i2]))\n        if i1 < len(nums1) - 1:\n            heapq.heappush(heap, (-nums1[i1 + 1] - nums2[i2], i1 + 1, i2))\n        k -= 1\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    if len(nums1) == 0 or len(nums2) == 0:\n        return pairs\n    if len(nums1) > len(nums2):\n        heap = [(nums1[i], nums2[i]) for i in range(len(nums2))]\n        heapq.heapify(heap)\n        for i in range(len(nums1) - len(nums2)):\n            min_pair = heapq.heappop(heap)\n            pairs.append(min_pair)\n        while len(heap) > 0:\n            min_pair = heapq.heappop(heap)\n            pairs.append(min_pair)\n    else:\n        heap = [(nums2[i], nums1[i]) for i in range(len(nums1))]\n        heapq.heapify(heap)\n        for i in range(len(nums2) - len(nums1)):\n            min_pair = heapq.heappop(heap)\n            pairs.append(min_pair)\n        while len(heap) > 0:\n            min_pair = heapq.heappop(heap)\n            pairs.append(min_pair)\n    return pairs[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    if len(nums1) > len(nums2):\n        for num2 in nums2:\n            for num1 in nums1:\n                heapq.heappush(h, (num1,num2))\n    else:\n        for num1 in nums1:\n            for num2 in nums2:\n                heapq.heappush(h, (num1,num2))\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(h))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    k_smallest = []\n    nums1_heap = []\n    nums2_heap = []\n    heapq.heapify(nums1_heap)\n    heapq.heapify(nums2_heap)\n    for n1 in nums1:\n        heapq.heappush(nums1_heap, n1)\n    for n2 in nums2:\n        heapq.heappush(nums2_heap, n2)\n    for i in range(k):\n        if len(nums1_heap)!= 0 and len(nums2_heap)!= 0:\n            if nums1_heap[0] < nums2_heap[0]:\n                k_smallest.append([heapq.heappop(nums1_heap), heapq.heappop(nums2_heap)])\n            else:\n                k_smallest.append([heapq.heappop(nums2_heap), heapq.heappop(nums1_heap)])\n        elif len(nums1_heap)!= 0:\n            k_smallest.append([heapq.heappop(nums1_heap), float(\"-inf\")])\n        elif len(nums2_heap)!= 0:\n            k_smallest.append([float(\"-inf\"), heapq.heappop(nums2_heap)])\n    return k_smallest\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # return min([min(a, b) for a, b in list1])\n    return min([i[0]*i[1] for i in list1])\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list_of_products = []\n    for i in list1:\n        if type(i) == tuple:\n            list_of_products.append(i[0] * i[1])\n    return min(list_of_products)\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # the nested for loop is very slow\n    # for each pair of tuples, sort them, then select the minimum from the pair\n    list2 = []\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            tup1 = (list1[i][0], list1[i][1])\n            tup2 = (list1[j][0], list1[j][1])\n            if tup1[0] * tup2[1] < tup2[0] * tup1[1]:\n                list2.append(tup1)\n            else:\n                list2.append(tup2)\n    list2.sort()\n    print(list2[0][0]*list2[0][1])\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #list1 = [('a',2),('b',3),('c',4),('d',5),('e',6),('f',7)]\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]*list1[0][1]\n    for i in range(1,len(list1)):\n        if(min_product > list1[i][0]*list1[i][1]):\n            min_product = list1[i][0]*list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = list1[0][0]*list1[0][1]\n    for tup in list1:\n        if min > tup[0]*tup[1]:\n            min = tup[0]*tup[1]\n    return min\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Create a copy of the list so the original list doesn't get altered\n    list2 = list1[:]\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = sorted(list1, key=lambda tup:tup[1], reverse=True)\n    return list2[0][1] * list2[1][1]\n    \n    \n    \nprint(min_product_tuple([(1, 5), (2, 3), (4, 5), (1, 2), (3, 4), (4, 7), (5, 3)]))\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list_of_tuples = [(1, 3), (5, 7), (4, 6), (2, 3)]\n    return min(list1)\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize an empty list\n    list2 = []\n    # Iterate through each tuple in list1\n    for i in list1:\n        # Initialize a variable to hold the min of the two numbers in each tuple\n        min1 = min(i)\n        # Iterate through the tuple, find the min, and append the min to list2\n        for j in range(len(i)):\n            if min1 == i[j]:\n                list2.append(i[j])\n    # Initialize an empty list\n    list3 = []\n    # Iterate through each tuple in list2\n    for i in list2:\n        # Initialize a variable to hold the min of the two numbers in each tuple\n        min2 = min(i)\n        # Iterate through the tuple, find the min, and append the min to list3\n        for j in range(len(i)):\n            if min2 == i[j]:\n                list3.append(i[j])\n    # Initialize a variable to hold the min number from list3\n    min_num = min(list3)\n    # Initialize an empty list\n    list4 = []\n    # Iterate through the list, and add to list4, every number that is greater than or equal to the min number\n    for i in list3:\n        if i >= min_num:\n            list4.append(i)\n    # Return the max number in list4\n    return max(list4)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in listval:\n        if i < minval:\n            minval = i\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l = len(listval)\n    i = 0\n    minimum = listval[0]\n    for j in range(l):\n        if listval[j] < minimum:\n            minimum = listval[j]\n            i = j\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    mini = listval[0]\n    for item in listval:\n        if item < mini:\n            mini = item\n    return mini\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in listval:\n        if i < min_value:\n            min_value = i\n    return min_value\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    m = listval[0]\n    for i in listval:\n        if i < m:\n            m = i\n    return m\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for x in range(len(listval)):\n        if min_val > listval[x]:\n            min_val = listval[x]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    if listval == []:\n        return None\n    for val in listval:\n        if min_val is None:\n            min_val = val\n        else:\n            if type(val) in [int, float, complex]:\n                min_val = min(val, min_val)\n            else:\n                return None\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], int):\n        return min(listval)\n    elif isinstance(listval[0], float):\n        return min(listval)\n    elif isinstance(listval[0], str):\n        return min(listval)\n    elif isinstance(listval[0], list):\n        return min_val(listval[0])\n    elif isinstance(listval[0], dict):\n        return min_val(listval[0].values())\n    elif isinstance(listval[0], tuple):\n        return min_val(listval[0])\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = [word[0].upper()]\n    for letter in word[1:]:\n        if letter.isupper():\n            camel_case.append('_')\n            camel_case.append(letter.lower())\n        else:\n            camel_case.append(letter)\n    return \"\".join(camel_case)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(word.title().split(\"_\"))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    res = ''.join(x.capitalize() or '_' for x in word.split('_'))\n    return res\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return word\n    first = word[0]\n    rest = word[1:]\n    rest = snake_to_camel(rest)\n    return rest[0].upper()+rest[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(w.title() for w in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_word = word.title().replace('_', '')\n    return new_word\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_word = []\n    for i in range(len(word)):\n        if i == 0:\n            new_word.append(word[0].upper())\n        else:\n            new_word.append(word[i])\n    new_word = ''.join(new_word)\n    return new_word\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i%2 == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for x in l:\n        if x%2 == 1:\n            odd.append(x)\n    return odd\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    list1 = []\n    for i in range(len(l)):\n        if l[i]%2 == 0:\n            list1.append(l[i])\n    return list1\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\nl=[1,2,3,4,5,6,7]\nprint(remove_odd(l))\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i%2==0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # YOUR CODE HERE\n    newlist = list(filter(lambda x: x % 2 == 0, l))\n    return newlist\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    numbers = l\n    # numbers = l\n    numbers = list(filter(lambda x: x % 2 == 0, numbers))\n    return numbers\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i[n])\n    return list2\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = None\n    return result\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1[0] in list2:\n        print('The first list contains overlapping values.')\n    elif list2[0] in list1:\n        print('The second list contains overlapping values.')\n    else:\n        print('There is no overlapping values.')\n    return\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n    # Test with the following code\nlist1 = [1,2,3,4,5,6,7,8]\nlist2 = [1,2,3,4,5,6,7,8,9]\nprint(overlapping(list1,list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = list(set(list1))\n    list2 = list(set(list2))\n    print(list1,list2)\n    overlap = set(list1).intersection(list2)\n    if len(overlap) == 0:\n        print(\"no overlap\")\n    else:\n        print(\"overlap is:\",overlap)\n    \n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    try:\n        for i in list1:\n            if i in list2:\n                return True\n    except:\n        pass\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n        else:\n            return False\n            \nlist1=[]\nlist2=[]\nprint(overlapping(list1,list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result=[]\n    for x in list1:\n        if x in list2:\n            result.append(x)\n    print(result)\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return set(list1).intersection(list2)  \n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list2:\n        if i in list1:\n            return True\n    return False\nlist1=[1,2,3,4,5,6]\nlist2=[1,3,6,7,8]\nprint(overlapping(list1,list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\ndef find_x_greater_than_y(x,y):\n    '''\n    Write a python function to find the value of x such that it is the greatest value that is greater than y.\n    '''\n    for i in range(y):\n        if x > y:\n            x += 1\n        else:\n            x = x\n    return x\ndef find_x_greater_than_y_nest(x,y):\n    '''\n    Write a python function to find the value of x such that it is the greatest value that is greater than y using nesting.\n    '''\n    return 1 if x >= y else x+1\ndef find_sum_to_n(n):\n    '''\n    Write a python function to find the sum of all values between 1 and n.\n    '''\n    return n*(n+1)/2\ndef remove_every_other(l):\n    '''\n    Write a python function to remove every other value in a list.\n    '''\n    return l[::2]\ndef find_greater_than_n(n,l):\n    '''\n    Write a python function to find the number of elements in a list that are greater than n.\n    '''\n    return sum(element > n for element in l)\ndef cube_root(n):\n    '''\n    Write a python function to find the cube root of an argument.\n    '''\n    return n**(1/3)\ndef find_largest_difference(l1,l2):\n    '''\n    Write a python function to find the largest difference between any two values in a sequence of values.\n    '''\n    return max(l1) - min(l1)\ndef find_min(l):\n    '''\n    Write a python function to find the minimum value in a list.\n    '''\n    return min(l)\ndef get_all_primes(x):\n    '''\n    Write a python function to find all prime numbers between 1 and a given argument.\n    '''\n    return [prime for prime in range(2,x) if not [div for div in range(2,prime) if prime % div == 0]]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return s == s[::-1]\ndef is_unique(l):\n    '''\n    Write a python function to check whether all values in a list are unique or not.\n    '''\n    return len(l) == len(set(l))\ndef all_greater_than(l,n):\n    '''\n    Write a python function to check whether all values in a list are greater than a given argument.\n    '''\n    return all([element > n for element in l])\ndef list_filter(l,x):\n    '''\n    Write a python function to filter out values from a list that are less than a given argument.\n    '''\n    return [element for element in l if element > x]\ndef list_map(l,x):\n    '''\n    Write a python function to map a given list to a new list with each value increased by a given amount.\n    '''\n    return [element+x for element in l]\ndef convert_to_fahrenheit(t):\n    '''\n    Write a python function to convert temperature in celsius to fahrenheit.\n    '''\n    return (t*9/5) + 32\ndef is_even(n):\n    '''\n    Write a python function to check whether a given number is even or not.\n    '''\n    return n % 2 == 0\ndef sum_all_divisors(n):\n    '''\n    Write a python function to find the sum of all divisors of a given number.\n    '''\n    divisors = []\n    for divisor in range(1,n+1):\n        if n % divisor == 0:\n            divisors.append(divisor)\n    return sum(divisors)\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    return reduce(lambda x,y: x*y, range(1,n+1))\ndef check_ascending(l):\n    '''\n    Write a python function to check whether a given list is ascending or not.\n    '''\n    return all([l[i] <= l[i+1] for i in range(len(l)-1)])\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth element of the fibonacci sequence.\n    '''\n    a,b = 0,1\n    for i in range(n):\n        a,b = b,a+b\n    return a\ndef next_in_series(n,x):\n    '''\n    Write a python function to find the next value in a series.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return next_in_series(n-1,x)*x\n    else:\n        return next_in_series(n-1,x)\ndef next_fibonacci(n):\n    '''\n    Write a python function to find the next fibonacci number.\n    '''\n    return next_in_series(n,2)\ndef sum_all_even(l):\n    '''\n    Write a python function to find the sum of all even numbers in a given list.\n    '''\n    return sum([element for element in l if element % 2 == 0])\ndef sum_all_odd(l):\n    '''\n    Write a python function to find the sum of all odd numbers in a given list.\n    '''\n    return sum([element for element in l if element % 2!= 0])\ndef sum_all_primes(l):\n    '''\n    Write a python function to find the sum of all prime numbers in a given list.\n    '''\n    return sum([element for element in l if is_prime(element)])\ndef sum_of_squares(l):\n    '''\n    Write a python function to find the sum of squares of numbers in a given list.\n    '''\n    return sum([element**2 for element in l])\ndef sum_of_n_squares(l,n):\n    '''\n    Write a python function to find the sum of nth powers of numbers in a given list.\n    '''\n    return sum([element**n for element in l])\ndef sum_all_squares(l):\n    '''\n    Write a python function to find the sum of squares of all the numbers in a list.\n    '''\n    return sum([element**2 for element in l])\ndef sum_of_fibonacci(l):\n    '''\n    Write a python function to find the sum of fibonacci numbers in a given list.\n    '''\n    return sum([fibonacci(i) for i in range(len(l))])\ndef list_division(l,n):\n    '''\n    Write a python function to divide each element in a list by a given argument.\n    '''\n    return [element / n for element in l]\ndef list_exponent(l,n):\n    '''\n    Write a python function to raise each element in a list to a given power.\n    '''\n    return [element**n for element in l]\ndef list_power(l,n):\n    '''\n    Write a python function to raise each element in a list to the nth power.\n    '''\n    return [element**n for element in l]\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    return all([n%i for i in range(2,n)])\ndef is_palindrome_v2(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    return s == s[::-1]\ndef is_fibonacci(n):\n    '''\n    Write a python function to check whether a given number is fibonacci or not.\n    '''\n    return n in [fibonacci(i) for i in range(1000)]\ndef valid_parentheses(s):\n    '''\n    Write a python function to check whether a give"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        raise Exception(\"List must contain at least 2 elements.\")\n    max_product = 1\n    max_product_pair = [None, None]\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_pair = [arr[i], arr[j]]\n    return max_product_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return (arr[-1] * arr[-2]) \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if (len(arr) < 2):\n        return None\n    if (len(arr) == 2):\n        return(arr[0]*arr[1])\n    max_neg = -float(\"inf\")\n    max_pos = -float(\"inf\")\n    min_neg = float(\"inf\")\n    min_pos = float(\"inf\")\n    max_neg_index = -1\n    max_pos_index = -1\n    min_neg_index = -1\n    min_pos_index = -1\n    for i in range(len(arr)):\n        if (arr[i] > 0):\n            if (arr[i] > max_pos):\n                max_pos = arr[i]\n                max_pos_index = i\n            if (arr[i] < min_pos):\n                min_pos = arr[i]\n                min_pos_index = i\n        else:\n            if (arr[i] < max_neg):\n                max_neg = arr[i]\n                max_neg_index = i\n            if (arr[i] > min_neg):\n                min_neg = arr[i]\n                min_neg_index = i\n    max_product = max_pos * max_neg\n    min_product = min_pos * min_neg\n    if (max_product > min_product):\n        return (max_product, max_neg_index, max_pos_index)\n    else:\n        return (min_product, min_neg_index, min_pos_index)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if(len(arr) < 2): \n        return False\n    max_product = arr[0] * arr[1] \n    max_i = 0\n    max_j = 1\n    for i in range(0, len(arr) - 1): \n        for j in range(i + 1, len(arr)): \n            if arr[i] * arr[j] > max_product: \n                max_product = arr[i] * arr[j] \n                max_i = i \n                max_j = j \n    return max_product \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr_len = len(arr)\n    if arr_len < 2:\n        print('Invalid input, length of array should be greater than 2')\n        return\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if arr is None:\n        raise Exception(\"Please pass a valid array\")\n    maxProduct = 0\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] * arr[i+1] > maxProduct:\n            maxProduct = arr[i] * arr[i+1]\n    return maxProduct\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    n = len(arr) \n    for i in range(0, n): \n        for j in range(i+1, n): \n            if arr[i]*arr[j] > max_prod: \n                max_prod = arr[i]*arr[j] \n    return max_prod \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 1: \n        return arr[0] \n    else: \n        max_product = arr[0] * arr[1] \n        for i in range(0,len(arr)-1): \n            for j in range(i + 1, len(arr)): \n                if arr[i] * arr[j] > max_product: \n                    max_product = arr[i] * arr[j] \n        return max_product \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return 0\n    result = arr[0]*arr[1]\n    left = 0\n    right = 1\n    while right < len(arr):\n        curr = arr[right]*arr[left]\n        result = max(result, curr)\n        left += 1\n        right += 1\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(map(lambda x: x[0],  groupby(Input, lambda x: x[0])))\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input, key=lambda x: x[0])\n    temp = Input[0][0]\n    i = 0\n    length = len(Input)\n    while i<length:\n        if Input[i][0]!=temp:\n            return temp\n        i+=1\n    return temp\n    \n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_of_tuples = []\n    output = []\n    for i in range(len(Input)):\n        list_of_tuples.append(tuple(Input[i]))\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for i in Input:\n        for j in Input:\n            if j[0] == i[0]:\n                print(i,j)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List = []\n    for i in Input:\n        for j in i:\n            if j not in List:\n                List.append(j)\n    return List\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input = [('ram', 7), ('laxman', 10), ('hari', 7), ('laxman', 8), ('hari', 9)] \n    # Output should be ('ram', 7)\n    \n    # group_tuples(Input)\n    \n    # Input = [('ram', 7), ('laxman', 10), ('hari', 9), ('laxman', 8), ('hari', 7)] \n    # Output should be ('ram', 7)\n    \n    \n    # input = [('ram', 7), ('laxman', 10), ('hari', 9), ('laxman', 8), ('hari', 7)] \n    # output should be ('laxman', 10)\n    \n    dict = {}\n    for i in Input:\n        dict[i[0]] = dict.get(i[0],0) + i[1]\n    for i in dict:\n        if dict[i] == min(dict.values()):\n            print(\"({}, {})\".format(i,dict[i]))\n            \n    \n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return set([item[0] for item in Input])\ndef find_common_elements(Input):\n    '''\n    Write a function that takes a list of tuples and returns a list of the elements that are common to all the tuples.\n    '''\n    Input = [item[0] for item in Input]\n    return set(Input)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list =[]\n    for i in range(len(Input)):\n        list.append(Input[i][0])\n    return max(set(list), key = list.count)\nInput =[('a', 1, 1),('a', 2, 2),('a', 3, 3), ('b', 1, 1),('b', 2, 2),('c', 3, 3)]\nprint(group_tuples(Input))"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    grouped_list = []\n    grouped_list.append(tuple(Input))\n    for i in range(1, len(Input)):\n        if Input[0] == Input[i]:\n            tup = (Input[0],)\n            grouped_list.append(tup)\n        else:\n            grouped_list.append(tuple(Input[i:]))\n    return grouped_list\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    count = 0\n    for i in range(len(Input)):\n        if(Input[i][0] == Input[0][0]):\n            count += 1\n        else:\n            break\n    return Input[0:count]\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(i) >= max:\n            max = len(i)\n    for i in lst:\n        if len(i) == max:\n            return i\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst,key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for element in lst:\n        if (len(element) > max_len):\n            max_len = len(element)\n            max_str = element\n    return max_str\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(0, len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n            max_element = lst[i]\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for element in lst:\n        if max < len(element):\n            max = len(element)\n    for element in lst:\n        if max == len(element):\n            return element\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length = len(lst)\n    max_length = 0\n    result = lst[0]\n    for i in range(length): \n        if len(lst[i]) > max_length: \n            max_length = len(lst[i])\n            result = lst[i]\n    return result\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst = lst.split()\n    l = len(lst[0])\n    for i in lst:\n        if len(i) > l:\n            l = len(i)\n    return l\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if(len(i) > max):\n            max = len(i)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    l = len(lst[0])\n    for i in range(1,len(lst)):\n        if l < len(lst[i]):\n            l = len(lst[i])\n    return lst[0] if l == len(lst[0]) else lst[1]\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(len(i))\n    return lst[lst1.index(max(lst1))]\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    s=0\n    for i in range(len(list1)):\n        if type(list1[i])==int:\n            list1[i]=round(list1[i])\n            s+=list1[i]\n        else:\n            list1[i]=round(list1[i],2)\n            s+=list1[i]\n    return s*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_round = 0\n    for x in list1:\n        round_x = round(x)\n        sum_round += round_x\n    print(sum_round * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    x = 0\n    list2 = []\n    for i in list1:\n        i = round(i)\n        list2.append(i)\n    for i in list2:\n        x += i\n    print(x*len(list1))\n    return list2\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for x in list1:\n        total_sum += round(x)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    length = len(list1)\n    return sum([round(i) for i in list1]) * length\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        sum1 += list1[i]\n    return sum1*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = []\n    for i in list1:\n        rounded = round(i)\n        rounded_list.append(rounded)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    suma = 0\n    for i in range(len(list1)):\n        suma += round(list1[i])\n    return suma * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(round(i))\n    print(sum(list2)*len(list1))\nround_and_sum([1.3, 2.6, 3.5, 5.6])\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += round(i)\n    return sum*len(list1)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(n) if i%2==0)\nprint(cube_Sum(10))\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(0,n):\n        if(i%2==0):\n            sum=sum+i*i*i\n    return sum\nprint(cube_Sum(4))"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0;\n    for i in range(1,n+1):\n        sum = sum + i*i*i;\n    return sum;\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            res = res + i**3\n    return res\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return(sum([i**3 for i in range(n) if i%2==0]))\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n*(n+1)**2\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += i*i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(0,n):\n        s = s + i**3\n    return s\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concat_str = ''\n    for i in test_tup:\n        concat_str += str(i)\n    print(concat_str)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '|'.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # pass\n    return tuple(map(lambda x: x + \"_\", test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimeter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for x in test_tup:\n        if type(x) == int:\n            res += str(x)\n        elif type(x) == float:\n            res += str(x)\n        else:\n            res += x\n    return res\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    #returns string\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + ','\n    return result[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    out_str = ''\n    for i in test_tup:\n        out_str += i + ':'\n    return out_str[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0.0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return (sum/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)])/n\n    "
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)])/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([x**3 for x in range(1,n+1)])/n \n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    x = 1\n    sum = 0\n    while x < n:\n        sum = sum + (x * x * x)\n        x = x + 1\n    print(sum)\n    avg = sum / n\n    print(avg)\n    return avg\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int(n ** 3 / 3)\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return (n ** 3) / 3\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return (n ** 3) / (3 ** (1 / 3))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int(n ** 3 / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return int((n ** 3) / (3 ** (1 / 3)))\n    \n    \n    \ndef find_Average_Of_Cube"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n<0:\n        print(\"Invalid input\")\n    else:\n        sum=0\n        for i in range(n+1):\n            sum+=i**3\n        print(sum)\n        return sum/n\nprint(find_Average_Of_Cube(10))\nprint(find_Average_Of_Cube(0))\nprint(find_Average_Of_Cube(-1))\nprint(\"********************************\")\ndef find_Average_Of_Square(n):\n    '''\n    Write a python function to find the average of squares of first n natural numbers.\n    '''\n    if n<0:\n        print(\"Invalid input\")\n    else:\n        sum=0\n        for i in range(n+1):\n            sum+=i**2\n        print(sum)\n        return sum/n\nprint(find_Average_Of_Square(10))\nprint(find_Average_Of_Square(0))\nprint(find_Average_Of_Square(-1))\nprint(\"********************************\")\ndef find_Average_Of_XPowerN(n,x):\n    '''\n    Write a python function to find the average of x raised to the power n\n    '''\n    if n<0 or x<0:\n        print(\"Invalid input\")\n    else:\n        sum=0\n        for i in range(n+1):\n            sum+=i**x\n        print(sum)\n        return sum/(n+1)\nprint(find_Average_Of_XPowerN(2,3))\nprint(find_Average_Of_XPowerN(-2,-4))\nprint(find_Average_Of_XPowerN(0,0))\nprint(find_Average_Of_XPowerN(-1,3))\nprint(find_Average_Of_XPowerN(1,3))\nprint(find_Average_Of_XPowerN(2,0))\nprint(find_Average_Of_XPowerN(-2,4))\nprint(\"********************************\")\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i ** 3 for i in range(1,n+1)])/n\n    \nprint(find_Average_Of_Cube(10))\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum / n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #return sum([i**3 for i in range(1,n+1)])/n\n    return sum([i**3 for i in range(1,n+1)])/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + pow(i,3)\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for "
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1][-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n    \ndef extract_rear_v2(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n    \ndef extract_rear_v3(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    pass\n    \ndef main():\n    test_tuple = ('hi','my', 'name', 'is', 'kalpana')\n    print('The original tuple is : {}'.format(test_tuple))\n    print('The tuple elements of the rear index of each string are : {}'.format(extract_rear(test_tuple)))\n    print('The tuple elements of the rear index of each string in v2 is : {}'.format(extract_rear_v2(test_tuple)))\n    print('The tuple elements of the rear index of each string in v3 is : {}'.format(extract_rear_v3(test_tuple)))\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = ()\n    for i in test_tuple:\n        new_tuple = new_tuple + (i[::-1],)\n    print(new_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Your code here\n    result = ()\n    for i in test_tuple:\n        result += (i[-1],)\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if x in list1[i]:\n            count+=1\n    return count\n    \nlist1 = [['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']]\nprint(count_element_in_list(list1, 'd'))\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        for j in range(len(list1[i])): \n            if(x == list1[i][j]):\n                count+= 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == type([]) and x in list1[i]:\n            count += 1\n        elif type(list1[i]) == type(()) and x in list1[i]:\n            count += 1\n        elif type(list1[i]) == type(set()) and x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count += 1\n    return count \n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for num in nums:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for n in nums:\n        if n % 2!= 0:\n            odd_nums.append(n)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    if (type(nums) is list):\n        odd_numbers = []\n        for i in nums:\n            if (i % 2 == 0):\n                odd_numbers.append(i)\n        return odd_numbers\n    else:\n        return None"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if nums == []:\n        return []\n    if nums == [1]:\n        return []\n    \n    odd_nums = []\n    for i in nums:\n        if i % 2!= 0:\n            odd_nums.append(i)\n    \n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            print(num)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.replace('-','/')\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = '\\d{4}[-\\/]\\d{1,2}[-\\/]\\d{1,2}'\n    m = re.match(pattern,dt)\n    if m:\n        return dt[8:]+\"-\"+dt[5:7]+\"-\"+dt[:4]\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # print(\"date:\",dt)\n    # if len(dt) > 0:\n    #     day,month,year = dt.split('-')\n    #     dd,mm,yyyy = day.split('/')\n    #     print(dd,mm,yyyy)\n    #     date_format = dd+\"-\"+mm+\"-\"+yyyy\n    #     return date_format\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt.reverse()\n    dt = '/'.join(dt)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_list = dt.split('-')\n    dt_list = [int(d) for d in dt_list]\n    new_dt = dt_list[2] + dt_list[1] + dt_list[0]\n    new_dt = str(new_dt)\n    return new_dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = re.compile(r'([0-9]{4})-([0-9]{2})-([0-9]{2})')\n    dt = regex.sub(r'\\3-\\2-\\1',dt)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt!= None:\n        list_dt = dt.split('-')\n        return '-'.join(list_dt[::-1])\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Date String\n    # 01-02-2016\n    # 01-02-2016\n    dt = dt.replace('-','')\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match = re.match(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', dt)\n    if match is None:\n        return False\n    else:\n        day = match.group(3)\n        month = match.group(2)\n        year = match.group(1)\n        return '{}-{}-{}'.format(day, month, year)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt=dt.split('-')\n    print(dt)\n    dd=dt[2].replace('-','')\n    dt[2]=dd[::-1]\n    dt=dt[0]+'-'+dt[1]+'-'+dt[2]\n    return dt\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length//2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    length = len(my_list)\n    gap = int(length/2)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            # Invariant : all items with index < j are sorted\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #find out the length of the list\n    length = len(my_list)\n    #set the gap\n    gap = length//2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Step through the array, taking a \"gap\" that is\n    # roughly half the size of the array.\n    gap = len(my_list) // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sublist_count = len(my_list) // 2\n    while sublist_count > 0:\n        for start_position in range(sublist_count):\n            gap_insertion_sort(my_list, start_position, sublist_count)\n        sublist_count //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            while my_list[i] < my_list[i - gap] and i >= gap:\n                my_list[i], my_list[i - gap] = my_list[i - gap], my_list[i]\n                i -= gap\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if type(test_tup1)==tuple and type(test_tup2)==tuple:\n        return tuple(sorted(set(test_tup1).intersection(set(test_tup2))))\n    else:\n        raise Exception(\"Both tuples must be tuples\")\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            res += (test_tup1[i],)\n    if res == ():\n        res = ('False',)\n    return res\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [x and y for x,y in zip(test_tup1,test_tup2)]\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup[0] and tup[1] for tup in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    if test_tup1 and test_tup2:\n        for elmt1 in test_tup1:\n            if elmt1 in test_tup2:\n                result.append(elmt1)\n    return tuple(result)\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(min(t1,t2) for t1, t2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (b**2 - 4*a*c) < 0:\n        return None\n    else:\n        x = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        y = x * x * a\n        return (x, y)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Validate the input\n    if a == 0:\n        return None\n    \n    # Find the discriminant\n    d = (b ** 2) - (4 * a * c)\n    \n    # Solve for x and y\n    x_1 = (-b + d ** (0.5)) / (2 * a)\n    x_2 = (-b - d ** (0.5)) / (2 * a)\n    \n    y_1 = (x_1 ** 2) * a + b * x_1 + c\n    y_2 = (x_2 ** 2) * a + b * x_2 + c\n    \n    return x_1, x_2, y_1, y_2\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    #Calculate the discriminant\n    d = (b**2) - (4*a*c)\n    \n    #Calculate the value of x1 and x2\n    x1 = (-b + d**0.5)/(2*a)\n    x2 = (-b - d**0.5)/(2*a)\n    \n    #Return the x values\n    return x1, x2\n    \ndef parabola_focus(a, b, c):\n    '''\n    Write a function to find the focus of a parabola.\n    '''\n    #Calculate the discriminant\n    d = (b**2) - (4*a*c)\n    \n    #Calculate the value of x1 and x2\n    x1 = (-b + d**0.5)/(2*a)\n    x2 = (-b - d**0.5)/(2*a)\n    \n    #Return the x values\n    return x1, x2\n    \ndef parabola_vertex(a, b, c):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    #Calculate the discriminant\n    d = (b**2) - (4*a*c)\n    \n    #Calculate the value of x1 and x2\n    x1 = (-b + d**0.5)/(2*a)\n    x2 = (-b - d**0.5)/(2*a)\n    \n    #Return the x values\n    return x1, x2\n    \ndef parabola_c_values(a, b, c, d):\n    '''\n    Write a function to find the c_x and c_y values of a parabola.\n    '''\n    #Calculate the values of c_x and c_y\n    c_y = (2*a*d - b**2)/(4*a)\n    c_x = -c_y\n    \n    #Return the x and y values\n    return c_x, c_y\n    \ndef parabola_plot(a, b, c, d):\n    '''\n    Write a function to plot a parabola.\n    '''\n    #Calculate the x and y values\n    x = []\n    y = []\n    for i in range(100):\n        x.append(i/10)\n        y.append(a*(i/10)**2 + b*(i/10) + c)\n    \n    #Return the x and y values\n    return x, y\n    \ndef parabola_focus_length(a, b, c):\n    '''\n    Write a function to calculate the focus length of a parabola.\n    '''\n    #Calculate the c_x and c_y values\n    c_x, c_y = parabola_c_values(a, b, c, d)\n    \n    #Calculate the focus length\n    fl = ((c_x/c_y)**2)*(-b/(2*a))\n    \n    #Return the focus length\n    return fl\n    \ndef parabola_vertex_length(a, b, c):\n    '''\n    Write a function to calculate the vertex length of a parabola.\n    '''\n    #Calculate the c_x and c_y values\n    c_x, c_y = parabola_c_values(a, b, c, d)\n    \n    #Calculate the vertex length\n    vx = ((c_x/c_y)**2)*(b**2/(4*a))\n    \n    #Return the vertex length\n    return vx\n    \ndef parabola_vertex_slope(a, b, c):\n    '''\n    Write a function to calculate the vertex slope of a parabola.\n    '''\n    #Calculate the c_x and c_y values\n    c_x, c_y = parabola_c_values(a, b, c, d)\n    \n    #Calculate the vertex slope\n    slope = ((c_y/c_x)**2)*(-b/(2*a))\n    \n    #Return the vertex slope\n    return slope\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return f'Parabola does not have a directrix.'\n    else:\n        return f'The directrix of a parabola with a = {a} and b = {b} and c = {c} is x = -b / (2 * a)'\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    from math import sqrt\n    if a == 0:\n        print('The parabola does not exist because the parameter a cannot be 0.')\n        return\n    # h = b ^ 2 - 4 * a * c\n    # directrix = -b / (2 * a)\n    # return directrix\n    \n    d = (b ** 2) - (4 * a * c)\n    h = sqrt(d)\n    \n    if d == 0:\n        print('The directrix is at x = {}'.format(-b / (2 * a)))\n    elif d < 0:\n        print('The parabola does not exist because the discriminant is less than 0.')\n    elif d > 0:\n        print('The directrix is at x = {}'.format((-b - h) / (2 * a)))\n        print('The directrix is at x = {}'.format((-b + h) / (2 * a)))\n        \nparabola_directrix(2, 3, 2)\nparabola_directrix(2, 2, -4)\nparabola_directrix(1, -2, 1)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a!= 0:\n        # discriminant\n        D = b**2 - 4*a*c\n        if D >= 0:\n            x1 = (-b + D**0.5) / (2 * a)\n            x2 = (-b - D**0.5) / (2 * a)\n            return x1, x2\n        else:\n            return \"No roots\"\n    else:\n        return \"No roots\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a * pow(b, 2) + pow(c, 2)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x_0, y_0 = -b/(2*a), 0\n    #y = ax^2 + bx + c = 0\n    return x_0, y_0\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x_directrix = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    y_directrix = 0\n    return x_directrix, y_directrix\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    import numpy as np\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        return common_element(list2, list1)\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1.sort()\n    list2.sort()\n    a = 0\n    b = 0\n    while a < len(list1) and b < len(list2):\n        if list1[a] == list2[b]:\n            return True\n        if list1[a] < list2[b]:\n            a += 1\n        else:\n            b += 1\n    return False\n    \n    \ndef common_element_v2(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1.sort()\n    list2.sort()\n    a = 0\n    b = 0\n    while a < len(list1) and b < len(list2):\n        if list1[a] == list2[b]:\n            return True\n        elif list1[a] < list2[b]:\n            a += 1\n        else:\n            b += 1\n    return False\n    \nprint(common_element([1, 2, 3, 4], [1, 3, 4, 5]))\nprint(common_element([1, 2, 3, 4], [1, 2, 4, 5]))\nprint(common_element([1, 2, 3, 4], [1, 2, 4, 6]))\nprint(common_element_v2([1, 2, 3, 4], [1, 3, 4, 5]))\nprint(common_element_v2([1, 2, 3, 4], [1, 2, 4, 5]))\nprint(common_element_v2([1, 2, 3, 4], [1, 2, 4, 6]))\nprint(common_element_v2([1, 2, 3, 4], [1, 3, 4, 5]))\nprint(common_element_v2([1, 2, 3, 4], [1, 2, 4, 6]))\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        small = list2\n    else:\n        small = list1\n    for i in range(len(small)):\n        if list1[i] == list2[i]:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if set(list1).isdisjoint(set(list2)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2)/2.0 * height\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height % 2 == 0:\n        return base1 + base2 + (height / 2)\n    else:\n        return base1 + base2 + (height / 2) - 0.5\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2)/2 * height\n    return area\n    \ndef median_triangle(base,height):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    area = (base * height)/2\n    return area\n    \ndef median_circle(radius):\n    '''\n    Write a function to find the median length of a circle.\n    '''\n    area = 3.1415926535897932 * radius**2\n    return area\n    "
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1+base2)*height/2\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2)/2) * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1+base2)*height/2\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return all(number <= i for i in arr)\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr[0]\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for n in arr:\n        if n > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return all(number > i for i in arr)\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if number < arr[i]:\n            return i\n    return -1\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element < number:\n            return False\n    return True\n    \ndef search_in_rotated_array(arr, number):\n    '''\n    Write a function to search a number in a rotated sorted array.\n    '''\n    if number > arr[-1] or number < arr[0]:\n        return False\n    first_index = 0\n    last_index = len(arr) - 1\n    while first_index <= last_index:\n        mid_index = int((first_index + last_index) / 2)\n        if number > arr[mid_index]:\n            first_index = mid_index + 1\n        else:\n            last_index = mid_index - 1\n    return first_index\n    \ndef find_duplicates(arr):\n    '''\n    Write a function to find the duplicate elements in an array of integers.\n    '''\n    arr = set(arr)\n    for element in arr:\n        if arr.count(element) >= 2:\n            return element\n            \ndef find_triplets(arr):\n    '''\n    Write a function to find three elements in an array of integers that sum to zero.\n    '''\n    arr.sort()\n    for i in range(len(arr)):\n        first_index = i + 1\n        last_index = len(arr) - 1\n        while first_index < last_index:\n            if first_index == last_index:\n                break\n            three_sum = arr[i] + arr[first_index] + arr[last_index]\n            if three_sum == 0:\n                return arr[i], arr[first_index], arr[last_index]\n            elif three_sum < 0:\n                first_index += 1\n            else:\n                last_index -= 1\n                \ndef find_pythagorean_triples(arr):\n    '''\n    Write a function to find the pythagorean triplets in an array of integers.\n    '''\n    arr.sort()\n    for i in range(len(arr)):\n        first_index = i + 1\n        last_index = len(arr) - 1\n        while first_index < last_index:\n            if first_index == last_index:\n                break\n            if arr[i]**2 + arr[first_index]**2 == arr[last_index]**2:\n                return arr[i], arr[first_index], arr[last_index]\n            elif arr[i]**2 + arr[first_index]**2 < arr[last_index]**2:\n                first_index += 1\n            else:\n                last_index -= 1\n                \ndef find_factors(arr):\n    '''\n    Write a function to find the factors of an integer in an array of integers.\n    '''\n    factors = []\n    for element in arr:\n        if element == 0:\n            return False\n        for i in range(2, element + 1):\n            if element % i == 0:\n                factors.append(i)\n    return factors\n    \ndef find_triplet_with_zero_sum(arr):\n    '''\n    Write a function to find the triplet with zero sum in an array of integers.\n    '''\n    for i in range(len(arr)):\n        first_index = i + 1\n        last_index = len(arr) - 1\n        while first_index < last_index:\n            if first_index == last_index:\n                break\n            if arr[i] + arr[first_index] + arr[last_index] == 0:\n                return arr[i], arr[first_index], arr[last_index]\n            elif arr[i] + arr[first_index] + arr[last_index] < 0:\n                first_index += 1\n            else:\n                last_index -= 1\n                \ndef find_perfect_squares(arr):\n    '''\n    Write a function to find the sum of the squares of the elements in an array of integers.\n    '''\n    squares = []\n    for element in arr:\n        squares.append(element ** 2)\n    return sum(squares)\n    \ndef find_elements_greater_than_mean(arr):\n    '''\n    Write a function to find the number of elements in an array that are greater than its mean.\n    '''\n    mean = sum(arr) / len(arr)\n    count = 0\n    for element in arr:\n        if element > mean:\n            count += 1\n    return count\n    \ndef count_swaps(arr):\n    '''\n    Write a function to count the number of swaps required to sort the array in ascending order.\n    '''\n    swap_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[i]:\n                temp = arr[j]\n                arr[j] = arr[i]\n                arr[i] = temp\n                swap_count += 1\n    return swap_count\n    \ndef get_permutations(arr, swap_count=0):\n    '''\n    Write a function to get all permutations of a given array.\n    '''\n    if len(arr) == 1:\n        return arr, swap_count\n    else:\n        for i in range(len(arr)):\n            temp = arr[i]\n            arr[i] = arr[0]\n            arr[0] = temp\n            arr_copy, swap_count = get_permutations(arr[1:], swap_count)\n            if swap_count == 0:\n                return arr_copy, swap_count\n            else:\n                swap_count += 1\n            temp = arr[0]\n            arr[0] = arr[i]\n            arr[i] = temp\n            \ndef get_unique_permutations(arr):\n    '''\n    Write a function to get all the unique permutations of a given array.\n    '''\n    permutations = []\n    unique_permutations = []\n    for i in range(len(arr)):\n        permutations.append(arr[i])\n        permutations_copy = permutations.copy()\n        unique_permutations.append(permutations_copy)\n        permutations.pop()\n    return unique_permutations\n    \ndef permutation_count(arr):\n    '''\n    Write a function to get the number of permutations of an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        count += factorial(len(arr)) / factorial(len(arr) - i)\n    return int(count)\n    \ndef factorial(n):\n    '''\n    Write a function to get the factorial of a number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n    \ndef get_unique_permutations_count(arr):\n    '''\n    Write a function to get the unique permutations count of an array.\n    '''\n    count = 0\n    unique_permutations = []\n    for i in range(len(arr)):\n        permutations = []\n        for j in range(len(arr)):\n            if j == i:\n                permutations.append(arr[j])\n            else:\n                permutations.append(arr[j])\n        if permutations not in unique_permutations:\n            unique_permutations.append(permutations)\n    return len(unique_permutations)\n    \ndef find_palindromes(arr):\n    '''\n    Write a function to find the palindromes in an array of integers.\n    '''\n    palindromes = []\n    for element in arr:\n        palindrome = str(element)\n        reversed_palindrome = ''\n        for i in range(len(palindrome) - 1, -1, -1):\n            reversed_palindrome += palindrome[i]\n        if palindrome == reversed_palindrome:\n            palindromes.append(element)\n    return palindromes\n    \ndef count_digit_occurrences(arr):\n    '''\n    Write a function to count the occurrences of digits in an array of integers.\n    '''\n    count = {}\n    for element in arr:\n        if element == 0:\n            return False\n        for i in str(element):\n            if i in count:"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) < 1:\n        return False\n    else:\n        if number > arr[0]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pass\n    regex = r'a.+b{1,}'\n    match = re.search(regex, text)\n    if match:\n        print(match.group(0))\n    else:\n        print(\"Not found\")\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    def match_pattern(pattern, phrase):\n        '''\n        Return True if this phrase matches the pattern.\n        Return False if not.\n        '''\n        #check if pattern is empty\n        if pattern == '':\n            return False\n        #check if both are same\n        if phrase == pattern:\n            return True\n        #check if phrase is empty\n        if phrase == '':\n            return False\n        #check if first letter of pattern is same as phrase\n        if pattern[0] == phrase[0]:\n            return match_pattern(pattern[1:], phrase[1:])\n        #check if pattern is one character and phrase is empty\n        if len(pattern) == 1 and phrase == '':\n            return False\n        #check if pattern is one character and phrase is not empty and pattern and phrase start with different characters\n        if len(pattern) == 1 and phrase!= '' and phrase[0]!= pattern[0]:\n            return False\n        #check if pattern has two characters and phrase is empty\n        if len(pattern) == 2 and phrase == '':\n            return False\n        #check if pattern has two characters and phrase is not empty and pattern and phrase start with different characters\n        if len(pattern) == 2 and phrase!= '' and phrase[0]!= pattern[0] and phrase[1]!= pattern[1]:\n            return False\n        #check if pattern is longer than phrase\n        if len(pattern) > len(phrase):\n            return False\n        #check if pattern is longer than phrase and phrase is empty\n        if len(pattern) > len(phrase) and phrase == '':\n            return False\n        #check if pattern is longer than phrase and phrase is not empty and pattern and phrase start with different characters\n        if len(pattern) > len(phrase) and phrase!= '' and phrase[0]!= pattern[0]:\n            return False\n        #check if first and last character of pattern are the same\n        if pattern[-1] == pattern[0] and len(pattern) > 1:\n            return match_pattern(pattern[1:-1], phrase[1:])\n        #check if pattern has a character and phrase starts with this character\n        if len(pattern) >= 2 and pattern[0] == phrase[0]:\n            return match_pattern(pattern[1:], phrase[1:])\n        #check if pattern has a character and phrase does not start with this character\n        if len(pattern) >= 2 and pattern[0]!= phrase[0]:\n            return match_pattern(pattern, phrase[1:])\n        #check if pattern has two characters and phrase starts with one character\n        if len(pattern) >= 2 and len(phrase) > 1 and pattern[0] == phrase[1]:\n            return match_pattern(pattern[1:], phrase[1:])\n        #check if pattern has two characters and phrase starts with two characters\n        if len(pattern) >= 2 and len(phrase) > 2 and pattern[0] == phrase[1] and pattern[1] == phrase[0]:\n            return match_pattern(pattern[2:], phrase[2:])\n        #check if pattern has two characters and phrase starts with three characters\n        if len(pattern) >= 2 and len(phrase) > 3 and pattern[0] == phrase[1] and pattern[1] == phrase[2]:\n            return match_pattern(pattern[2:], phrase[2:])\n        #check if pattern has two characters and phrase starts with four characters\n        if len(pattern) >= 2 and len(phrase) > 4 and pattern[0] == phrase[1] and pattern[1] == phrase[2] and pattern[2] == phrase[0]:\n            return match_pattern(pattern[3:], phrase[3:])\n        #check if pattern has two characters and phrase starts with five characters\n        if len(pattern) >= 2 and len(phrase) > 5 and pattern[0] == phrase[1] and pattern[1] == phrase[2] and pattern[2] == phrase[3]:\n            return match_pattern(pattern[3:], phrase[3:])\n        #check if pattern has two characters and phrase starts with six characters\n        if len(pattern) >= 2 and len(phrase) > 6 and pattern[0] == phrase[1] and pattern[1] == phrase[2] and pattern[2] == phrase[3] and phrase[0] == pattern[3]:\n            return match_pattern(pattern[4:], phrase[4:])\n        #check if pattern has two characters and phrase starts with seven characters\n        if len(pattern) >= 2 and len(phrase) > 7 and pattern[0] == phrase[1] and pattern[1] == phrase[2] and pattern[2] == phrase[3] and phrase[0] == phrase[4]:\n            return match_pattern(pattern[5:], phrase[5:])\n        #check if pattern has two characters and phrase starts with eight characters\n        if len(pattern) >= 2 and len(phrase) > 8 and pattern[0] == phrase[1] and pattern[1] == phrase[2] and pattern[2] == phrase[3] and phrase[0] == phrase[4] and phrase[1] == pattern[3]:\n            return match_pattern(pattern[4:], phrase[4:])\n        #check if pattern has two characters and phrase starts with nine characters\n        if len(pattern) >= 2 and len(phrase) > 9 and pattern[0] == phrase[1] and pattern[1] == phrase[2] and pattern[2] == phrase[3] and phrase[0] == phrase[4] and phrase[1] == phrase[5]:\n            return match_pattern(pattern[6:], phrase[6:])\n        #check if pattern has two characters and phrase starts with ten characters\n        if len(pattern) >= 2 and len(phrase) > 10 and pattern[0] == phrase[1] and pattern[1] == phrase[2] and pattern[2] == phrase[3] and phrase[0] == phrase[4] and phrase[1] == phrase[5] and pattern[3] == phrase[6]:\n            return match_pattern(pattern[7:], phrase[7:])\n        #check if pattern has two characters and phrase starts with eleven characters\n        if len(pattern) >= 2 and len(phrase) > 11 and pattern[0] == phrase[1] and pattern[1] == phrase[2] and pattern[2] == phrase[3] and phrase[0] == phrase[4] and phrase[1] == phrase[5] and phrase[2] == pattern[4]:\n            return match_pattern(pattern[5:], phrase[5:])\n        #check if pattern has two characters and phrase starts with twelve characters\n        if len(pattern) >= 2 and len(phrase) > 12 and pattern[0] == phrase[1] and pattern[1] == phrase[2] and pattern[2] == phrase[3] and phrase[0] == phrase[4] and phrase[1] == phrase[5] and phrase[2] == phrase[6] and pattern[3] == phrase[7]:\n            return match_pattern(pattern[8:], phrase[8:])\n        #check if pattern has two characters and phrase starts with thirteen characters\n        if len(pattern) >= 2 and len(phrase) > 13 and pattern[0] == phrase[1] and pattern[1] == phrase[2] and pattern[2] == phrase[3] and phrase[0] == phrase[4] and phrase[1] == phrase[5] and phrase[2] == phrase[6] and phrase[3] == pattern[4] and phrase[4] == phrase[7]:\n            return match_pattern(pattern[5:], phrase[5:])\n        #check if pattern has two characters and phrase starts with fourteen characters\n        if len(pattern) >= 2 and len(phrase) > 14 and pattern[0] == phrase[1] and pattern[1] == phrase[2] and pattern[2] == phrase[3] and phrase[0] == phrase[4] and phrase[1] == phrase[5] and phrase[2] == phrase[6] and phrase[3] == phrase[7] and phrase[4] == pattern[4] and phrase[5] == pattern[5]:\n            return match_pattern(pattern[6:], phrase[6:])\n        #check if pattern has two characters and phrase starts with fifteen characters\n        if len(pattern) >= 2 and len(phrase) > 15 and pattern[0] == phrase[1] and pattern[1] == phrase[2] and pattern[2] == phrase[3] and phrase[0] == phrase[4] and phrase[1] == phrase[5] and phrase[2] == phrase[6] and phrase[3] == phrase[7] and phrase[4] == phrase[8"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    return match!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result!= None\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.findall(pattern, text)\n    return result\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.span()\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.findall(pattern, text)\n    return len(result)\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.group()\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.findall(pattern, text)\n    return result[0]\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.group(0)\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.findall(pattern, text)\n    return len(result[0])\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.start()\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.end()\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.span()[0]\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.span()[1]\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.string\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.findall(pattern, text)\n    return result\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.groupdict()\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.groups()\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.group()\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.findall(pattern, text)\n    return result\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.group(1)\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.start(1)\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.end(1)\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.span(1)\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.string\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.findall(pattern, text)\n    return result\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.groups\ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.group(0)\ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.group(1)\ndef text_match_twenty_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.groups()\ndef text_match_twenty_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result.group(1)\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return 'found a match!'\n    return('not matched')\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.findall(r'ab*', text)\n    print(result)\n    \n    if len(result) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"ab+\"\n    result = re.search(pattern, text)\n    return result!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('a+b')\n    match = pattern.search(text)\n    return match!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #text = \"foo$\"\n    if re.search(r'ab+$', text):\n        print(\"found ab+$\")\n    else:\n        print(\"Did not find ab+$\")\n    # Use a regular expression to match a single character set\n    if re.search(r'[^a]+b', text):\n        print(\"found [^a]+b\")\n    else:\n        print(\"Did not find [^a]+b\")\n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+b', text):\n        print(\"found a\\w+b\")\n    else:\n        print(\"Did not find a\\w+b\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if re.search(r'a\\w+', text):\n        print(\"found a\\w+\")\n    else:\n        print(\"Did not find a\\w+\")\n    \n    # Use a regular expression to match a single character set\n    if r"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'ab+'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'ab+'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_zero_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    pattern = 'ab*'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_exact(text):\n    '''\n    Write a function that matches a string that has an a followed by exactly one b.\n    '''\n    pattern = 'ab?'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_exact_or_none(text):\n    '''\n    Write a function that matches a string that has an a followed by exactly one or zero b's.\n    '''\n    pattern = 'ab??'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_zero_or_more_and_one_or_more(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's and one or more c's.\n    '''\n    pattern = 'ab{0,}c{0,1}'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_zero_or_more_and_one_or_more_and_exact_or_none(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's, one or more c's, and exactly one or zero d's.\n    '''\n    pattern = 'ab{0,}c{0,1}d{0,1}'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_between_and_not_between(text):\n    '''\n    Write a function that matches a string that is between a and b or not between a and b.\n    '''\n    pattern = 'a[^b]{1}c[^b]{1}'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_between_and_not_between_or_not_between(text):\n    '''\n    Write a function that matches a string that is between a and b and not between a and b or not between a and b.\n    '''\n    pattern = 'a[^b]{1}c[^b]{1}'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_not_between_and_not_between(text):\n    '''\n    Write a function that matches a string that is not between a and b and not between a and b.\n    '''\n    pattern = 'ab{0,1}[^b][^b]{1}'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_not_between_and_not_between_or_not_between(text):\n    '''\n    Write a function that matches a string that is not between a and b and not between a and b and not between a and b.\n    '''\n    pattern = 'ab{0,1}[^b][^b][^b]{1}'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_not_between_and_not_between_or_not_between_and_not_between(text):\n    '''\n    Write a function that matches a string that is not between a and b and not between a and b and not between a and b and not between a and b.\n    '''\n    pattern = 'ab{0,1}[^b][^b][^b][^b]{1}'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_not_between_and_not_between_or_not_between_and_not_between_and_not_between(text):\n    '''\n    Write a function that matches a string that is not between a and b and not between a and b and not between a and b and not between a and b and not between a and b and not between a and b.\n    '''\n    pattern = 'ab{0,1}[^b][^b][^b][^b][^b]{1}'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_word_character(text):\n    '''\n    Write a function that matches a word character.\n    '''\n    pattern = '\\w'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_non_word_character(text):\n    '''\n    Write a function that matches a non word character.\n    '''\n    pattern = '\\W'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_integer(text):\n    '''\n    Write a function that matches an integer.\n    '''\n    pattern = '\\d'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_any_integer(text):\n    '''\n    Write a function that matches any integer.\n    '''\n    pattern = '\\d'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_any_lowercase_letter(text):\n    '''\n    Write a function that matches any lowercase letter.\n    '''\n    pattern = '\\d'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_any_uppercase_letter(text):\n    '''\n    Write a function that matches any uppercase letter.\n    '''\n    pattern = '\\d'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_any_letter(text):\n    '''\n    Write a function that matches any letter.\n    '''\n    pattern = '\\d'\n    result = re.search(pattern, text)\n    if result!= None:\n        print(\"Search successful.\")\n    else:\n        print(\"Search unsuccessful.\")\n    return\ndef text_match_any_digit(text):\n    '''\n    Writ"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if (n < 0):\n        n = n * -1\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n=str(n)\n    print(n[-1])\n    return(n[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return (n)%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # base case\n    if(n == 0):\n        return 0\n    else:\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return last_Digit(-n)\n    if n == 0 :\n        return 0\n    return n % 10\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Use of map() and list comprehensions\n    return list(map(lambda x: -x, list1))\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_nums = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            negative_nums.append(list1[i])\n    return negative_nums\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for x in list1:\n        if x < 0:\n            list2.append(x)\n    print(\"List with Negative Numbers: \", list2)\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [n for n in list1 if n < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = [1,2,3,-4,-5]\n    for num in list1:\n        if num < 0:\n            print(num)\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list=[]\n    for i in list1:\n        if i<0:\n            neg_list.append(i)\n    return neg_list\n    \nprint(neg_nos([-1,4,3,8,5,6,-7]))\nprint(neg_nos([-1,2,3,4,5,6,7]))\nprint(neg_nos([2,3,4,5,6,7,8]))\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = \"Python\"\n    newstr = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            newstr = newstr + str1[i]\n    return newstr\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[0::2]\nprint(remove_odd('Hello'))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list1 = list(str1)\n    new_list = [i for i in list1 if i % 2 == 0]\n    return ''.join(new_list)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list_of_letters = list(str1)\n    list_of_letters = list(filter(lambda x: x % 2 == 0, list_of_letters))\n    return ''.join(list_of_letters)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([i for i in str1 if ord(i)%2==0])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for letter in str1:\n        if ord(letter) % 2!= 0:\n            str1 = str1.replace(letter, \"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1:\n        if i % 2 == 0:\n            str1 = str1.replace(i, \"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    print(\"\\nString with odd characters removed: \",end=\"\")\n    for i in range(len(str1)):\n        if str1[i] % 2 == 0:\n            print(str1[i],end=\"\")\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([char for char in str1 if char % 2 == 0])\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # The following code counts bidirectional tuple pairs\n    count = 0\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]) or (test_list[i][1] == test_list[j][0] and test_list[i][0] == test_list[j][1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count=0\n    for i in range(len(test_list)):\n        if test_list[i][1]==test_list[i+1][0]:\n            count+=1\n    return count+1\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional = 0\n    for i in range(len(test_list) - 1):\n        if (test_list[i], test_list[i + 1]) in (test_list[i + 1:], test_list[:len(test_list) - 1]):\n            bidirectional += 1\n    return bidirectional\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum(1 for i in range(len(test_list)) if test_list[i] == test_list[len(test_list)-i-1])\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list = []\n    print(test_list)\n    return\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward_count = 0\n    backward_count = 0\n    for i in range(len(test_list)):\n        if test_list[i][0] == test_list[i][1]:\n            forward_count += 1\n        else:\n            backward_count += 1\n    print(\"forward_count: \", forward_count, \"\\nbackward_count: \", backward_count)\n    return forward_count, backward_count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i][0] == test_list[i+1][1] and test_list[i][1] == test_list[i+1][0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    list_length = len(test_list)\n    count = 0\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum([1 for i in test_list if i[0] == i[1][::-1]])\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    try:\n        res = 0\n        for i in L:\n            res *= 10\n            res += i\n        return res\n    except Exception as e:\n        print('Error:'+ str(e) + '\\n')\n    \n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return ''.join(str(i) for i in L)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = list(map(str, L))\n    s = ''.join(L)\n    return(int(s))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = int(''.join(map(str, L)))\n    return L\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # print(L)\n    # if not L:\n    #     return\n    # if len(L) == 1:\n    #     return L[0]\n    # res = ''\n    # for c in L:\n    #     res += str(c)\n    # return int(res)\n    # if not L:\n    #     return\n    # if len(L) == 1:\n    #     return L[0]\n    # return ''.join(str(i) for i in L)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for i in L:\n        if i not in \"0123456789\":\n            return \"Invalid Input\"\n    if len(L) == 1:\n        return L[0]\n    return int(int(''.join(L[::-1]))/pow(10,len(L)-1))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    string = ''\n    for number in L:\n        string += str(number)\n    return int(string)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    res = ''\n    for i in L:\n        res += str(i)\n    return int(res)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    final = ''\n    for i in L:\n        final += str(i)\n    return int(final)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list=['where','when','how','why','what','whose','which','whom']\n    adverb_position={}\n    sentence=text.split(\".\")\n    for sentence in sentence:\n        words=sentence.split(\" \")\n        for word in words:\n            if word in adverb_list:\n                position=words.index(word)\n                adverb_position[word]=position+1\n    if adverb_position=={}:\n        return None\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b(\\w+ly)\\b')\n    matches = pattern.finditer(text)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.split('.')\n    for i in range(len(text)):\n        text[i] = text[i].split(' ')\n    adverb = []\n    position = []\n    for sent in text:\n        for word in sent:\n            if re.search(r'\\b(?:(?:a|am|an|as|at|be|but|by|for|if|in|into|like|of|on|or|per|such|than|that|the|this|to|was|with)\\s+)(adverb)\\b', word):\n                adverb.append(word)\n                position.append(text.index(sent))\n    return [adverb, position]\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    v1 = re.findall(\"[a-z]\",text)\n    v1 = list(set(v1))\n    v1.sort()\n    v2 = re.findall(\"[A-Z]\",text)\n    v2 = list(set(v2))\n    v2.sort()\n    v3 = re.findall(\"[0-9]\",text)\n    v3 = list(set(v3))\n    v3.sort()\n    adverb_position = []\n    for i in range(len(v1)):\n        adverb_position.append('1')\n    for i in range(len(v2)):\n        adverb_position.append('2')\n    for i in range(len(v3)):\n        adverb_position.append('3')\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = r'ADV|adv|adv.'\n    result = re.finditer(regex, text, re.MULTILINE)\n    for match in result:\n        print(\"The adverb is: \", match.group(), '\\n')\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # pattern = r'(?:\\band\\b|\\bif\\b|\\bboth\\b|\\bboth\\b)'\n    pattern = r'\\b(?:and|if|both)\\b'\n    adverbs = [match.start() for match in re.finditer(pattern,text)]\n    return adverbs\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    words = text.split()\n    for i in range(len(words)):\n        if words[i] == 'the':\n            result.append(i)\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = '\\w+ly'\n    result = re.findall(pattern,text)\n    return result\n    \n    \ndef find_numbers(text):\n    '''\n    Write a function to find all the numbers in a string.\n    '''\n    pattern = '\\d+'\n    result = re.findall(pattern,text)\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = r'\\b[a-z]{3,}\\b'\n    adverbs = []\n    \n    for m in re.finditer(regex, text, re.IGNORECASE):\n        adverbs.append(m.group())\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    ## we can use regex to find all the adverbs in the sentence.\n    # In this case we can use the 'findall()' method to extract the output in list format.\n    # for example: \n    #     find_adverb_position(\"I went to Paris and I was very excited.\")\n    #     # output => ['was very', 'was']\n    \n    \n    # 1. compile the regex\n    regex = re.compile(r'\\b\\w{2,}ly')\n    # 2. findall() the output in list format\n    output = regex.findall(text)\n    # 3. print the output\n    print(output)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    sa = 6*(l**2)\n    return sa\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfarea = 6 * (l * l)\n    print(surfarea)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n        return 6 * (l * l)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    l = float(l)\n    SA = l * 6\n    return SA\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder of a given size.\n    '''\n    r = float(r)\n    h = float(h)\n    SA = 2*3.14*r*h + 2*3.14*r**2\n    return SA\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given size.\n    '''\n    r = float(r)\n    SA = 4*3.14*r**2\n    return SA\ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone of a given size.\n    '''\n    r = float(r)\n    h = float(h)\n    SA = 3.14*r*(r + h)\n    return SA\ndef surfacearea_triangle(a, b, c):\n    '''\n    Write a function to find the surface area of a triangle of a given size.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    SA = a*b/2 + b*c/2 + a*c/2\n    return SA\ndef surfacearea_rectangle(a, b):\n    '''\n    Write a function to find the surface area of a rectangle of a given size.\n    '''\n    a = float(a)\n    b = float(b)\n    SA = a*b\n    return SA\ndef surfacearea_rectangle_cut(a, b):\n    '''\n    Write a function to find the surface area of a rectangle with an\n    equal cut of a given size.\n    '''\n    a = float(a)\n    b = float(b)\n    SA = a*b/2\n    return SA\ndef surfacearea_square(a):\n    '''\n    Write a function to find the surface area of a square of a given size.\n    '''\n    a = float(a)\n    SA = a**2\n    return SA\ndef surfacearea_parallelogram(a, b):\n    '''\n    Write a function to find the surface area of a parallelogram of a given size.\n    '''\n    a = float(a)\n    b = float(b)\n    SA = a*b\n    return SA\ndef surfacearea_trapezoid(a, b, h):\n    '''\n    Write a function to find the surface area of a trapezoid of a given size.\n    '''\n    a = float(a)\n    b = float(b)\n    h = float(h)\n    SA = (a+b)*h/2\n    return SA\ndef surfacearea_square_cut(a, b):\n    '''\n    Write a function to find the surface area of a square with an equal cut of a given size.\n    '''\n    a = float(a)\n    b = float(b)\n    SA = a**2/4\n    return SA\ndef surfacearea_rectangle_cut_three(a, b, c):\n    '''\n    Write a function to find the surface area of a rectangle with three equal cuts of a given size.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    SA = a*b/3 + a*c/3 + b*c/3\n    return SA\ndef surfacearea_parallelogram_cut(a, b, c):\n    '''\n    Write a function to find the surface area of a parallelogram with three equal cuts of a given size.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    SA = a*b/3 + a*c/3 + b*c/3\n    return SA\ndef surfacearea_trapezoid_cut(a, b, c, h):\n    '''\n    Write a function to find the surface area of a trapezoid with three equal cuts of a given size.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    h = float(h)\n    SA = ((a+b)*h/2 + a*c/3 + b*c/3)/2\n    return SA\ndef surfacearea_parallelogram_cut_three_two(a, b, c, d):\n    '''\n    Write a function to find the surface area of a parallelogram with three equal cuts of a given size and two equal cuts of a given size.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    d = float(d)\n    SA = a*b/3 + a*c/3 + b*c/3 + a*d/3 + b*d/3 + c*d/3\n    return SA\ndef surfacearea_trapezoid_cut_three_two(a, b, c, d, h):\n    '''\n    Write a function to find the surface area of a trapezoid with three equal cuts of a given size and two equal cuts of a given size.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    d = float(d)\n    h = float(h)\n    SA = (((a+b)*h/2 + a*c/3 + b*c/3 + a*d/3 + b*d/3 + c*d/3)/2 + a*b/3 + a*c/3 + b*c/3 + a*d/3 + b*d/3 + c*d/3)/2\n    return SA\ndef surfacearea_parallelogram_cut_three_two_three(a, b, c, d, e):\n    '''\n    Write a function to find the surface area of a parallelogram with three equal cuts of a given size and two equal cuts of a given size.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    d = float(d)\n    e = float(e)\n    SA = a*b/3 + a*c/3 + b*c/3 + a*d/3 + b*d/3 + c*d/3 + a*e/3 + b*e/3 + c*e/3\n    return SA\ndef surfacearea_trapezoid_cut_three_two_three(a, b, c, d, e, h):\n    '''\n    Write a function to find the surface area of a trapezoid with three equal cuts of a given size and two equal cuts of a given size.\n    '''\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    d = float(d)\n    e = float(e)\n    h = float(h)\n    SA = ((((a+b)*h/2 + a*c/3 + b*c/3 + a*d/3 + b*d/3 + c*d/3)/2 + a*b/3 + a*c/3 + b*c/3 + a*d/3 + b*d/3 + c*d/3)/2 + a*b/3 + a*c/3 + b*c/3 + a*d/3 + b*d/3 + c*d/3)/2 + a*e/3 + b*e/3 + c*e/3 + a*d/3 + b*d/3 + c*d/3)/2 + a*b/3 + a*c/3 + b*c/3 + a*d/3 + b*d/3 + c*d/3)/2 + a*e/3 + b*e/3 + c*e/3\n    return SA\ndef surfacearea_sphere_cut(r):\n    '''\n    Write a function to find the surface area of a sphere with an equal cut of a given size.\n    '''\n    r = float(r)\n    SA = 4*3.14*r**2/4\n    return SA\ndef surfacearea_sphere_cubic(r):\n    '''\n    Write a function to find the surface area of a sphere of a given size.\n    '''\n    r = float(r)\n    SA = 4*3.14*r**3/3"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    for num in nums:\n        if num > 0:\n            total += 1\n    return total / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    #take advantage of modulus to avoid the need to check if the array is empty\n    return nums.count(0)%2\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count = count + 1\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_positives = 0\n    for num in nums:\n        if num > 0:\n            num_positives += 1\n    return num_positives/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num >= 0:\n            positive_count += 1\n    return positive_count\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    result=0\n    for i in nums:\n        if i>0:\n            result+=1\n    return result/len(nums)\nprint(positive_count([1,2,3,-4]))\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len(list(filter(lambda x: x > 0, nums))) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        if nums[0] > 0:\n            return 1\n        else:\n            return 0\n    count = 0\n    for x in nums:\n        if x > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = []\n    negatives = []\n    for num in nums:\n        if num >= 0:\n            positives.append(num)\n        else:\n            negatives.append(num)\n    return len(positives) / len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = list1[0]\n    for i in range(len(list1)):\n        if max < 0:\n            max = max\n        else:\n            if list1[i] < 0:\n                max = list1[i]\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Initiate a variable to check largest negative number\n    largest_neg = None\n    # Loop through the list\n    for num in list1:\n        # If we get a negative number, we will set the largest_neg varible to the current number\n        if num < 0:\n            largest_neg = num\n    # Return the largest_neg\n    return largest_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max=0\n    for i in range(0,len(list1)):\n        if list1[i]<0:\n            max=list1[i]\n    return max\n    \nlist1=[-5,4,3,-2,0,1,2,-1,5,0,2,3,-5,1]\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # return max(num for num in list1 if num < 0)\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return max(list2)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    list1.sort()\n    list1.reverse()\n    if list1[0] >= 0:\n        return \"The given list is not a valid list.\"\n    else:\n        return list1[0]\n    \n    \ndef find_outlier(list1):\n    '''\n    Write a python function to find an element which is not contained in the given list.\n    '''\n    \n    list1.sort()\n    list1.reverse()\n    if list1[0] == list1[1]:\n        return \"The given list is not a valid list.\"\n    else:\n        return list1[0]\n    \n    \n    \n    \nif __name__ == '__main__':\n    print(largest_neg([3, 4, -2, 1, 0]))\n    print(largest_neg([5, -4, -2, 1, 3, 2]))\n    print(largest_neg([5, -4, -2, 1, 3, 2, -1]))\n    print(largest_neg([]))\n    print(largest_neg([0]))\n    print(find_outlier([2, 4, 6, 8, 10, 3]))\n    print(find_outlier([2, 4, 0, 100, 4, 11, 2602, 36]))\n    print(find_outlier([160, 3, 1719, 19, 11, 13, -21]))\n    "
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    m = min(list1)\n    n = max(list1)\n    for x in range(0, len(list1)):\n        if list1[x] == m:\n            list1[x] = n\n            break\n    return list1"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = 0\n    for i in list1:\n        if i < 0 and i > max_num:\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for n in list1:\n        if n < 0 and n > max_neg:\n            max_neg = n\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    biggest_neg_num = 0\n    for num in list1:\n        if num < 0:\n            if num < biggest_neg_num:\n                biggest_neg_num = num\n    return biggest_neg_num\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return sorted(list1, key = lambda x: x < 0)[-1]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [t[:K] for t in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K])\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    def trim_tuple_recur(test_list, k):\n        if len(test_list) == 0 or k == 0:\n            return test_list\n        elif len(test_list) == 1:\n            if test_list[0][k-1] == '\\n':\n                return [test_list[0][:k]]\n            else:\n                return [test_list[0]]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [t[:K] for t in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        if len(tup) < K:\n            tup = tup + (tup[-1] * (K - len(tup)))\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    #your code here\n    return [tuple(lst[:K]) for lst in test_list]\n    #return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if type(test_list[0])!= tuple:\n        return test_list\n    else:\n        res = []\n        for item in test_list:\n            if len(item) > K:\n                for i in range(K):\n                    res.append(item[i])\n            else:\n                res.append(item)\n        return tuple(res)\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    i = 0\n    for item in test_list:\n        if len(item)>K:\n            test_list[i] = item[:K]\n        i = i+1\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # return [t[K:] for t in test_list]\n    return list(map(lambda x: x[K:], test_list))\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [t[:K] for t in test_list]\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # index_multiplication = test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1], test_tup1[2] * test_tup2[2]\n    index_multiplication = tuple(index_a * index_b for index_a, index_b in zip(test_tup1, test_tup2))\n    return index_multiplication\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if (len(test_tup1) == len(test_tup2)):\n        res_tup = tuple([test_tup1[i] * test_tup2[i] for i in range(0,len(test_tup1))])\n    else:\n        res_tup = tuple([0 for i in range(0,len(test_tup1))])\n    return res_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #convert the tuple into a list\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    #convert the list into a list\n    mult_list = list(tup1[0]*tup2[0])\n    #convert the list into tuple\n    mult_tup = tuple(mult_list)\n    return mult_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tuple = ()\n    for i,j in zip(test_tup1, test_tup2):\n        new_tuple += (i * j, )\n    return new_tuple\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    product = []\n    for i in range(len(test_tup1)):\n        product.append(test_tup1[i]*test_tup2[i])\n    return tuple(product)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if (len(test_tup1)!= len(test_tup2)) or (len(test_tup1) == 0 and len(test_tup2) == 0):\n        return 'Empty Tuple'\n    return tuple([i*j for i,j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(0, len(test_tup1)):\n        result += (test_tup1[i]*test_tup2[i],)\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    output = ()\n    for i in range(len(test_tup1)):\n        output += (test_tup1[i] * test_tup2[i]),\n    return output\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #using zip function\n    return tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n    tup_mul = [0 for i in range(0,len(test_tup1))]\n    for i in range(0,len(test_tup1)):\n        tup_mul[i] = test_tup1[i]*test_tup2[i]\n    print(tup_mul)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if count[i] == 1:\n            print(\"The element \"+ str(i) + \" appears: \" + str(count[i]) + \" time\") \n        else:\n            print(\"The element \"+ str(i) + \" appears: \" + str(count[i]) + \" times\") \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for ele in lst: \n        count = 0\n        for sub in tup: \n            if (ele == sub): \n                count = count + 1\n        print(\"Occurence of\", ele, \"in tuple:\", count) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_frequency = Counter(tup) \n    lst_frequency = Counter(lst) \n    print(\"The occurence of each element in tuple is: \" + str(tup_frequency)) \n    print(\"The occurence of each element in list is: \" + str(lst_frequency)) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence = {} \n    for item in lst: \n        occurence[item] = tup.count(item) \n    return occurence \ntup = tuple([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9])\nlst = [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # tup = (1,2,3,4,4,4)\n    # lst = [1,2,3,4,5,6]\n    count = Counter(lst) \n    for i in tup: \n        print(count[i], end = \" \")\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup1 = tuple(lst) \n    dict = {} \n    for item in tup1: \n        dict[item] = tup1.count(item) \n    return(dict) \n    \nlst = [1,2,2,3,4,4,4,5,6,7,8,9,10,10] \ntup = (10,10,10,5,6,7,8,9,10) \nprint(count_Occurrence(tup, lst))\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    return count.update(lst) \n    \nlst = ['a','b','a','e','d','b','c','e','f','g','h']\ntup = ('a','e','i','o')\ncount_Occurrence(tup,lst)\ncount_Occurrence(tup,lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # counter method give frequency count of elements in list \n    # frequency of all elements in list \n    cnt = Counter(lst) \n    count_tup = dict(cnt)\n    # counter method gives count of all elements in tuple\n    for i in tup: \n        if(count_tup[i]!= 0): \n            print(i, \"=\", count_tup[i]) \n            count_tup[i] = 0\n        else: \n            continue\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    for i in tup: \n        if i in count.keys():\n            print(count[i], end = \" \")\n        else:\n            print(\"0\", end = \" \")\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_Occurence = [] \n    for item in tup: \n        count = 0\n        for element in lst: \n            if(element == item): \n                count += 1\n        lst_Occurence.append(count)\n    return tuple(lst_Occurence) \n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print([num ** 3 for num in nums])\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for n in nums:\n        result.append(n*n*n)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    output = []\n    for num in nums:\n        output.append(num**3)\n    return output\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return cal_sum(n-1) + cal_sum(n-2)\n    \n    "
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0 \n    for i in range(1,n+1):\n        s += 4*(i**2) - 3*i + 1\n    return s\n    \nprint(cal_sum(100))\nprint(cal_sum(1000))\nprint(cal_sum(10000))\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2 * cal_sum(n-1) - 2 * cal_sum(n-2)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # check for type\n    if not isinstance(n, int): \n        raise TypeError(\"The input must be an integer\")\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(n+1):\n        result += int(perrin(i))\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1: \n        return 2\n    else: \n        return 4*n - 2 + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # base case \n    if n == 0:\n        return 1\n    # recursive call \n    return n * cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<=3:\n        return n\n    return cal_sum(n-1) + (n-3)*n\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        res += i\n    return res\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * 4\n    return sum\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [substr.strip() for substr in str.split(l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    count = 0\n    ans = []\n    for i in str:\n        if count == l:\n            return ans\n        ans.append(i)\n        count += 1\n    return ans\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    if l == None:\n        return result\n    elif len(l) < l:\n        return result\n    else:\n        for i in range(0, l):\n            result.append(l[i])\n        return result\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = []\n    for i in str:\n        l.append(i[0:l])\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in l:\n        result.append(i[:l])\n    return result\n    \ndef extract_mapped(l):\n    '''\n    Write a function that extracts only those strings that has a matching key,\n    ignoring the unmatched strings.\n    '''\n    result = []\n    for i in l:\n        if i in d:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Create a new list with the specified size of the strings from the given list\n    new_list = []\n    for i in range(l):\n        new_list.append(str[i])\n    # Return the new list\n    return new_list\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    print(str)\n    print(l)\n    str = \"hello\"\n    l = ['world','python','tutorial']\n    str_list = []\n    for i in range(len(l)):\n        if len(l[i]) >= 5:\n            str_list.append(l[i])\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in l:\n        result.append(i[0:l])\n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #text1 = \" Hello there, how are you? \"\n    text1 = text1.replace(\" \",\"\")\n    print(text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+','', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ', '')\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    s=text1\n    s1=s.replace(\" \", \"\")\n    return s1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return''.join(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace('\\t','')\n    text1 = text1.replace('\\n','')\n    text1 = text1.replace(' ','')\n    return text1\n    #Replace multiple spaces with single space\ndef remove_special_character(text1):\n    '''\n    Write a function to remove all the special characters from the given string.\n    '''\n    #Using Regex to remove special characters\n    text1 = re.sub(r'[^\\w\\s]','',text1)\n    return text1\n    #Create a string with no special characters or empty spaces\ndef remove_digits(text1):\n    '''\n    Write a function to remove all the digits from the given string.\n    '''\n    text1 = re.sub(r'[0-9]','',text1)\n    return text1\n    #Create a string with no digits\ndef text_cleaning(text1):\n    '''\n    Write a function to clean the given text.\n    '''\n    text1 = remove_digits(text1)\n    text1 = remove_whitespaces(text1)\n    text1 = remove_special_character(text1)\n    return text1\n    #Return text1 after cleaning it\ndef word_tokenize(text1):\n    '''\n    Write a function to tokenize the text into words.\n    '''\n    #Tokenize words using split function\n    text1 = text1.split()\n    return text1\n    #Return text1 after tokenizing it\ndef stopwords_removal(text1,stopwords1):\n    '''\n    Write a function to remove all the stopwords from the given text.\n    '''\n    #Create a set of stopwords\n    stopwords1 = set(stopwords1)\n    text1 = [i for i in text1 if i not in stopwords1]\n    return text1\n    #Return text1 after removing all the stopwords\ndef stemming(text1):\n    '''\n    Write a function to stem the given text.\n    '''\n    #Stem words using Porter stemmer\n    ps = PorterStemmer()\n    text1 = [ps.stem(word) for word in text1]\n    return text1\n    #Return text1 after stemming\ndef lemmatize(text1):\n    '''\n    Write a function to lemmatize the given text.\n    '''\n    #Lemmatize the words using WordNet lemmatizer\n    wnl = WordNetLemmatizer()\n    text1 = [wnl.lemmatize(word) for word in text1]\n    return text1\n    #Return text1 after lemmatizing\ndef preprocess_text(text1,stopwords1):\n    '''\n    Write a function to preprocess the given text.\n    '''\n    text1 = word_tokenize(text1)\n    text1 = stopwords_removal(text1,stopwords1)\n    text1 = stemming(text1)\n    text1 = lemmatize(text1)\n    return text1\n    #Return text1 after preprocessing it\ndef sentiment_scores(text1):\n    '''\n    Write a function to return a dictionary with sentiment scores.\n    '''\n    #Import required modules\n    import nltk\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    sid = SentimentIntensityAnalyzer()\n    #Returns a dictionary with positive, negative, neutral scores\n    sentiment_dict = sid.polarity_scores(text1)\n    return sentiment_dict\n    #Return sentiment_dict\ndef get_headlines(url1):\n    '''\n    Write a function to extract headlines from the given url.\n    '''\n    #Import required modules\n    from urllib.request import urlopen\n    import requests\n    from bs4 import BeautifulSoup\n    #Using requests module to extract data from url\n    headlines = requests.get(url1)\n    soup = BeautifulSoup(headlines.text,'html.parser')\n    #Extracting headline using beautiful soup\n    headline = soup.find('title').get_text()\n    return headline\n    #Return headline\ndef get_tweets(url1):\n    '''\n    Write a function to extract tweets from the given url.\n    '''\n    #Import required modules\n    from urllib.request import urlopen\n    import requests\n    from bs4 import BeautifulSoup\n    #Using requests module to extract data from url\n    page = requests.get(url1)\n    soup = BeautifulSoup(page.text,'html.parser')\n    #Extracting tweet using beautiful soup\n    tweet = soup.find_all('p',attrs={'class':'TweetTextSize'})\n    tweets = []\n    for i in tweet:\n        tweets.append(i.text)\n    return tweets\n    #Return tweets\ndef get_text_from_url(url1):\n    '''\n    Write a function to extract text from the given url.\n    '''\n    #Import required modules\n    from urllib.request import urlopen\n    import requests\n    from bs4 import BeautifulSoup\n    #Using requests module to extract data from url\n    page = requests.get(url1)\n    soup = BeautifulSoup(page.text,'html.parser')\n    #Extracting text using beautiful soup\n    text = soup.find('div',attrs={'class':'body-text'})\n    return text.text\n    #Return text\ndef get_headlines_and_tweets(url1):\n    '''\n    Write a function to extract headlines and tweets from the given url.\n    '''\n    #Import required modules\n    from urllib.request import urlopen\n    import requests\n    from bs4 import BeautifulSoup\n    #Using requests module to extract data from url\n    headlines = requests.get(url1)\n    soup = BeautifulSoup(headlines.text,'html.parser')\n    #Extracting headline using beautiful soup\n    headline = soup.find('title').get_text()\n    tweet = soup.find_all('p',attrs={'class':'TweetTextSize'})\n    tweets = []\n    for i in tweet:\n        tweets.append(i.text)\n    return headline, tweets\n    #Return headline and tweets\ndef get_emails(url1):\n    '''\n    Write a function to extract emails from the given url.\n    '''\n    #Import required modules\n    import requests\n    from bs4 import BeautifulSoup\n    #Using requests module to extract data from url\n    page = requests.get(url1)\n    soup = BeautifulSoup(page.text,'html.parser')\n    #Extracting email using beautiful soup\n    email = soup.find_all('span',attrs={'class':'show-tooltip'})\n    emails = []\n    for i in email:\n        emails.append(i.text)\n    return emails\n    #Return emails\ndef get_urls(url1):\n    '''\n    Write a function to extract urls from the given url.\n    '''\n    #Import required modules\n    import requests\n    from bs4 import BeautifulSoup\n    #Using requests module to extract data from url\n    page = requests.get(url1)\n    soup = BeautifulSoup(page.text,'html.parser')\n    #Extracting url using beautiful soup\n    url = soup.find_all('span',attrs={'class':'url'})\n    urls = []\n    for i in url:\n        urls.append(i.text)\n    return urls\n    #Return urls\ndef get_phone_numbers(url1):\n    '''\n    Write a function to extract phone numbers from the given url.\n    '''\n    #Import required modules\n    import requests\n    from bs4 import BeautifulSoup\n    #Using requests module to extract data from url\n    page = requests.get(url1)\n    soup = BeautifulSoup(page.text,'html.parser')\n    #Extracting phone number using beautiful soup\n    phone_numbers = soup.find_all('span',attrs={'class':'phone-number'})\n    phone_nums = []\n    for i in phone_numbers:\n        phone_nums.append(i.text)\n    return phone_nums\n    #Return phone_nums\ndef get_location(url1):"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1\n    pattern = re.compile('[\\s]+')\n    new_text = re.sub(pattern, '', text)\n    return new_text\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(' ','')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(' +', '', text1)\n    return text1\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # sale_amount = float(input(\"Enter the sale amount: \")) \n    # actual_cost = float(input(\"Enter the actual cost of the product: \"))\n    print(\"Actual cost of product: \",actual_cost)\n    print(\"Sale amount: \",sale_amount)\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    amount = sale_amount - actual_cost\n    if amount < 0:\n        loss = abs(amount)\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount-actual_cost if sale_amount>actual_cost else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss=actual_cost-sale_amount\n    if loss>0:\n        loss_amount=loss\n        print(\"loss amount is\",loss_amount)\n    else:\n        loss_amount=0\n        print(\"loss amount is zero\")\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = sale_amount - actual_cost \n    if loss < 0:\n        loss = 0\n    return loss\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        loss_amount=actual_cost-sale_amount\n        return loss_amount\n    else:\n        return 0\n    \n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try:\n        return round(actual_cost - sale_amount,2)\n    except:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if(n<0):\n        raise Exception(\"Negative number is not allowed.\")\n    if(n==0):\n        raise Exception(\"Zero is not allowed.\")\n    if(n==1):\n        raise Exception(\"Number 1 is not allowed.\")\n    s=0\n    for i in range(1,int(math.sqrt(n))+1):\n        if(n%i==0):\n            if(i%2==0):\n                s+=i\n    return s\ndef sumofFactors_NEW(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if(n<0):\n        raise Exception(\"Negative number is not allowed.\")\n    if(n==0):\n        raise Exception(\"Zero is not allowed.\")\n    if(n==1):\n        raise Exception(\"Number 1 is not allowed.\")\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if (n%i==0) and (i%2==0)])\ndef sumofFactors_NEW_BEST(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum([i for i in range(1,int(math.sqrt(n))+1) if (n%i==0) and (i%2==0)])\ndef sumofFactors_NEW_BEST_OPTIMIZED(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum([i if ((n%i)==0) and (i%2==0) else 0 for i in range(1,int(math.sqrt(n))+1)])\ndef sumofFactors_NEW_BEST_OPTIMIZED_2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum([(n//i) if ((n%i)==0) and (i%2==0) else 0 for i in range(1,int(math.sqrt(n))+1)])\ndef sumofFactors_NEW_BEST_OPTIMIZED_3(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(map(lambda i: (n//i) if ((n%i)==0) and (i%2==0) else 0, range(1,int(math.sqrt(n))+1)))\ndef sumofFactors_NEW_BEST_OPTIMIZED_4(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(filter((lambda i: (n%i)==0 and (i%2==0)),range(1,int(math.sqrt(n))+1)))\ndef sumofFactors_NEW_BEST_OPTIMIZED_5(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i for i in range(1,int(math.sqrt(n))+1) if (n%i==0) and (i%2==0))\ndef sumofFactors_NEW_BEST_OPTIMIZED_6(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum((n//i if (n%i)==0 and (i%2==0) else 0) for i in range(1,int(math.sqrt(n))+1))\ndef sumofFactors_NEW_BEST_OPTIMIZED_7(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i for i in range(1,int(math.sqrt(n))+1) if (n%i==0) and (i%2==0))\ndef sumofFactors_NEW_BEST_OPTIMIZED_8(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum((n//i) for i in range(1,int(math.sqrt(n))+1) if (n%i==0) and (i%2==0))\ndef sumofFactors_NEW_BEST_OPTIMIZED_9(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i for i in range(1,int(math.sqrt(n))+1) if (n%i==0) and (i%2==0))\ndef sumofFactors_NEW_BEST_OPTIMIZED_10(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i if ((n%i)==0) and (i%2==0) else 0 for i in range(1,int(math.sqrt(n))+1))\ndef sumofFactors_NEW_BEST_OPTIMIZED_11(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i if ((n%i)==0) and (i%2==0) else 0 for i in range(1,int(math.sqrt(n))+1))\ndef sumofFactors_NEW_BEST_OPTIMIZED_12(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i if ((n%i)==0) and (i%2==0) else 0 for i in range(1,int(math.sqrt(n))+1))\ndef sumofFactors_NEW_BEST_OPTIMIZED_13(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum((n//i if (n%i)==0 and (i%2==0) else 0) for i in range(1,int(math.sqrt(n))+1))\ndef sumofFactors_NEW_BEST_OPTIMIZED_14(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum((n//i) for i in range(1,int(math.sqrt(n))+1) if (n%i==0) and (i%2==0))\ndef sumofFactors_NEW_BEST_OPTIMIZED_15(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum((n//i) for i in range(1,int(math.sqrt(n))+1) if (n%i==0) and (i%2==0))\ndef sumofFactors_NEW_BEST_OPTIMIZED_16(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum((n//i) for i in range(1,int(math.sqrt(n))+1) if (n%i==0) and (i%2==0))\ndef sumofFactors_NEW_BEST_OPTIMIZED_17(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum((n//i) for i in range(1,int(math.sqrt(n))+1) if (n%i==0) and (i%2==0))\ndef sumofFactors_NEW_BEST_OPTIMIZED_18(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum((n//i) for i in range(1,int(math.sqrt(n))+1) if (n%i==0) and (i%2==0)"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n) + 1)): \n        if (n % i == 0): \n            if (i % 2 == 0): \n                count += i \n            if (i!= n / i and i % 2 == 0): \n                count += n / i \n    return count \ndef isPrime(n) : \n    '''\n    Write a python function to check a number is Prime or not.\n    '''\n    return sumofFactors(n) == 2\ndef largestPrimeFactor(n) : \n    '''\n    Write a python function to find the largest prime factor of a number.\n    '''\n    if (isPrime(n)) : \n        return n \n    for i in range(int(math.sqrt(n)), 1, -1) : \n        if (n % i == 0) : \n            if (isPrime(i)) : \n                return i \ndef printPairs(arr, n) : \n    '''\n    Write a python function to print all the pairs of a given array whose sum is prime.\n    '''\n    for i in range(0, n) : \n        for j in range(i + 1, n) : \n            if (largestPrimeFactor(arr[i] + arr[j])!= None) : \n                print(arr[i], arr[j]) \narr = [10, 20, 15, 2, 23, 18] \nprintPairs(arr, len(arr)) "
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, (int)(math.sqrt(n)) + 1):\n        if (n % i == 0):\n            if (n / i == i):\n                sum += i\n            else:\n                sum += i\n                sum += n / i\n    return sum\n    \ndef sumofFactors1(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, (int)(math.sqrt(n)) + 1):\n        if (n % i == 0 and n / i == i):\n            sum += i\n        elif (n % i == 0 and n / i!= i):\n            sum += i\n            sum += n / i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            if i%2 == 0 :\n                sum = sum + i\n            else :\n                sum = sum + (i+1)\n    return sum\n    \ndef primeFactors(n) :\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    l = []\n    while n % 2 == 0 :\n        l.append(2)\n        n = n/2\n    for i in range(3,int(math.sqrt(n))+1,2) :\n        while n % i == 0 :\n            l.append(i)\n            n = n/i\n    if n > 2 :\n        l.append(n)\n    return l\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            else:\n                sum += (i+1)\n    return sum\ndef countTriangles(n):\n    '''\n    Given an integer n, write a python function to return the number of Pythagorean triplets (a, b, c) such that a^2 + b^2 = c^2 and 1 <= a, b, c <= n.\n    '''\n    total = 0\n    for a in range(1,n+1):\n        for b in range(a,n+1):\n            c = math.sqrt(a**2+b**2)\n            if a+b+c == n:\n                total += 1\n    return total\ndef isPrime(n):\n    '''\n    Write a python function to check if the number n is prime or not.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef checkPrimes(n):\n    '''\n    Write a python function to count the number of prime numbers in a given range of integers.\n    '''\n    total = 0\n    for i in range(2,n+1):\n        if isPrime(i):\n            total += 1\n    return total\ndef findThreeLargestNumbers(nums):\n    '''\n    Write a python function to find the three largest numbers in a given array.\n    '''\n    nums.sort(reverse=True)\n    return nums[:3]\ndef findBiggestSumOfSubArray(nums):\n    '''\n    Write a python function to find the sum of contiguous subarray with maximum sum in a given array.\n    '''\n    max_sum = nums[0]\n    current_sum = nums[0]\n    for i in range(1,len(nums)):\n        current_sum = max(current_sum+nums[i],nums[i])\n        max_sum = max(max_sum,current_sum)\n    return max_sum\ndef findSquaresOfaSortedArray(nums):\n    '''\n    Write a python function to find the sum of squares of a sorted array.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += (nums[i] * nums[i])\n    return total\ndef findMedian(nums):\n    '''\n    Write a python function to find the median of a given array.\n    '''\n    nums.sort()\n    if len(nums) % 2 == 0:\n        mid = int((len(nums))/2)\n        return (nums[mid-1] + nums[mid])/2\n    else:\n        mid = int(len(nums)/2)\n        return nums[mid]\ndef getPythagoreanTriplets(n):\n    '''\n    Write a python function to find Pythagorean triplets in a given range of integers.\n    '''\n    for c in range(1,n):\n        for b in range(1,n):\n            for a in range(1,n):\n                if a**2 + b**2 == c**2:\n                    print(a,b,c)\ndef findConsecutiveDifferences(nums):\n    '''\n    Write a python function to find the sum of all the differences of the consecutive numbers in a given array.\n    '''\n    total = 0\n    for i in range(len(nums)-1):\n        total += abs(nums[i+1] - nums[i])\n    return total\ndef findContiguousSubarrayWithSumEqualToGivenSum(nums,k):\n    '''\n    Write a python function to find the sum of contiguous subarray with the given sum in a given array.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        current_sum = nums[i]\n        for j in range(i+1,len(nums)):\n            current_sum += nums[j]\n            if current_sum == k:\n                return (i,j)\n    return None\ndef findPythagoreanTripletsInRange(nums):\n    '''\n    Write a python function to find Pythagorean triplets in a given range of integers.\n    '''\n    for a in range(nums[0],nums[1]+1):\n        for b in range(nums[0],nums[1]+1):\n            c = math.sqrt(a**2+b**2)\n            if a+b+c == nums[1]:\n                print(a,b,c)\ndef findLargestProductInAGrid(grid):\n    '''\n    Write a python function to find the largest product of four consecutive numbers in a given grid.\n    '''\n    max_prod = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            horizontal = horizontal_product(grid,i,j)\n            vertical = vertical_product(grid,i,j)\n            diagonal_left_to_right = diagonal_product_left_to_right(grid,i,j)\n            diagonal_right_to_left = diagonal_product_right_to_left(grid,i,j)\n            max_prod = max(max_prod,horizontal,vertical,diagonal_left_to_right,diagonal_right_to_left)\n    return max_prod\ndef diagonal_product_right_to_left(grid,i,j):\n    total = 1\n    for k in range(len(grid)):\n        total *= grid[i][j+k]\n    return total\ndef diagonal_product_left_to_right(grid,i,j):\n    total = 1\n    for k in range(len(grid)):\n        total *= grid[i+k][j+k]\n    return total\ndef vertical_product(grid,i,j):\n    total = 1\n    for k in range(len(grid)):\n        total *= grid[i][j+k]\n    return total\ndef horizontal_product(grid,i,j):\n    total = 1\n    for k in range(len(grid)):\n        total *= grid[i+k][j]\n    return total\ndef largest_product_in_a_grid(grid):\n    '''\n    Write a python function to find the largest product of four consecutive numbers in a given grid.\n    '''\n    max_prod = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            horizontal = horizontal_product(grid,i,j)\n            vertical = vertical_product(grid,i,j)\n            diagonal_left_to_right = diagonal_product_left_to_right(grid,i,j)\n            diagonal_right_to_left = diagonal_product_right_to_left(grid,i,j)\n            max_prod = max(max_prod,horizontal,vertical,diagonal_left_to_right,diagonal_right_to_left)\n    return max_prod\ndef diagonal_product_left_to_right(grid,i,j):\n    total = 1\n    for k in range(len(grid)):\n        total *= grid[i+k][j+k]\n    return total\ndef diagonal_product_right_to_left(grid,i,j):\n    total = 1\n    for k in range(len(grid)):\n        total *= grid[i+k][j+k]\n    return total\ndef largest_product_in_a_grid(grid):\n    '''\n    Write a python function to find the largest product of four consecutive numbers in a given grid.\n    '''\n    max_prod = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            horizontal = horizontal_product(grid,i,j)\n            vertical = vertical_product(grid,i,j)\n            diagonal_left_to_right = diagonal_product_left_to_right(grid,i,j)\n            diagonal_right_to_left = diagonal_product"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    # Variable Initialization\n    sum = 0\n    # Logic\n    for i in range(2,int(math.sqrt(n))+1):\n        if(n%i == 0):\n            if(i%2 == 0):\n                sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    while i <= math.sqrt(n): \n        if (n % i == 0): \n            if (i % 2 == 0): \n                print(\"Even factor \",i,end=\",\") \n                sum += i \n        i = i + 2\n    print(\"\\b\\b\\b\",sum) \ndef isPrime(n) : \n    '''\n    Write a python function to check whether a number is a prime number or not.\n    '''\n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\ndef productofFactors(n) : \n    '''\n    Write a python function to find the product of odd factors of a number.\n    '''\n    if (n == 1): \n        print(\"1\") \n        return 1\n    i = 1\n    product = 1\n    while i <= math.sqrt(n): \n        if (n % i == 0): \n            if (i % 2 == 1): \n                product = product * i \n            i = i + 2\n    print(\"The product of odd factors of the given number is \",product)\ndef maxPrimeFactors(n) : \n    '''\n    Write a python function to find the maximum prime factors of a number.\n    '''\n    if (n == 1): \n        print(\"1\") \n        return 1\n    i = 2\n    maxPrime = 0\n    while i <= math.sqrt(n): \n        if (n % i == 0): \n            if (isPrime(i)): \n                maxPrime = i \n            i = i + 1\n            if (isPrime(n / i) and n / i > maxPrime): \n                maxPrime = n / i \n        i = i + 1\n    print(\"The maximum prime factor of the given number is \",maxPrime)\ndef sumOfPrimeFactors(n) : \n    '''\n    Write a python function to find the sum of prime factors of a number.\n    '''\n    sum = 0\n    if (n == 1): \n        print(\"1\") \n        return 1\n    i = 2\n    while i <= math.sqrt(n): \n        if (n % i == 0): \n            if (isPrime(i)): \n                sum += i \n            i = i + 1\n            if (isPrime(n / i) and n / i > maxPrime): \n                sum += n / i \n        i = i + 1\n    print(\"The sum of prime factors of the given number is \",sum)\ndef sumofEvenFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    if (n == 1): \n        print(\"1\") \n        return 1\n    i = 2\n    while i <= math.sqrt(n): \n        if (n % i == 0): \n            if (i % 2 == 0): \n                sum += i \n            i = i + 2\n            if (isPrime(n / i) and n / i > maxPrime): \n                sum += n / i \n        i = i + 1\n    print(\"The sum of even factors of the given number is \",sum)\ndef sumofOddFactors(n) : \n    '''\n    Write a python function to find the sum of odd factors of a number.\n    '''\n    sum = 0\n    if (n == 1): \n        print(\"1\") \n        return 1\n    i = 2\n    while i <= math.sqrt(n): \n        if (n % i == 0): \n            if (i % 2 == 1): \n                sum += i \n            i = i + 2\n            if (isPrime(n / i) and n / i > maxPrime): \n                sum += n / i \n        i = i + 1\n    print(\"The sum of odd factors of the given number is \",sum)\ndef countPrimeFactors(n) : \n    '''\n    Write a python function to find the number of prime factors of a number.\n    '''\n    if (n == 1): \n        print(\"1\") \n        return 1\n    i = 2\n    count = 0\n    while i <= math.sqrt(n): \n        if (n % i == 0): \n            if (isPrime(i)): \n                count += 1\n            i = i + 1\n            if (isPrime(n / i) and n / i > maxPrime): \n                count += 1\n        i = i + 1\n    print(\"The number of prime factors of the given number is \",count)\ndef isPerfectNumber(n) : \n    '''\n    Write a python function to check whether a number is a perfect number or not.\n    '''\n    sum = 1\n    i = 2\n    while i <= math.sqrt(n): \n        if (n % i == 0): \n            sum += i \n            sum += n / i \n            i = i + 1\n    if (sum == n): \n        print(\"It is a perfect number\") \n    else: \n        print(\"It is not a perfect number\") \ndef factorization(n) : \n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i <= math.sqrt(n): \n        if (n % i == 0): \n            if (i % 2 == 1): \n                sum += i \n            i = i + 1\n            if (isPrime(n / i) and n / i > maxPrime): \n                sum += n / i \n        i = i + 1\n    if (sum == n): \n        print(\"It is a perfect number\") \n    else: \n        print(\"It is not a perfect number\") \ndef printSequence(n) : \n    '''\n    Write a python function to print the Collatz sequence of a number.\n    '''\n    print(\"The Collatz Sequence of the given number is \") \n    i = n \n    while (i!= 1) : \n        print(i,end=\" \") \n        if (i % 2 == 0): \n            i = i / 2\n        else : \n            i = 3 * i + 1\n    print(1) \ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    fact = 1\n    if (n == 0 or n == 1) : \n        return 1\n    i = 2\n    while i <= n : \n        fact = fact * i \n        i = i + 1\n    print(\"The factorial of the given number is \",fact) \ndef printTriangularNumbers(n) : \n    '''\n    Write a python function to print the triangular numbers from 1 to n.\n    '''\n    print(\"The triangular numbers from 1 to n are : \") \n    i = 1\n    while i <= n : \n        print(i * (i + 1) / 2,end=\" \") \n        i = i + 1\n    print() \ndef isPalindrome(n) : \n    '''\n    Write a python function to check whether a number is a palindrome or not.\n    '''\n    n1 = n \n    rev = 0 \n    while (n > 0) : \n        rev = rev * 10 + n % 10 \n        n = n / 10\n    if (n1 == rev) : \n        print(\"The number is a palindrome\") \n    else : \n        print(\"The number is not a palindrome\") \ndef palindrome(n) : \n    '''\n    Write a python function to find the palindrome of a number.\n    '''\n    n1 = n \n    rev = 0 \n    while (n > 0) : \n        rev = rev * 10 + n % 10 \n        n = n / 10\n    print(\"The palindrome of the number is \",rev) \ndef reverse(n) : "
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    res = 0\n    for i in range(1,n+1) : \n        if n%i == 0 :\n            if i%2 == 0 : \n                res = res + i\n    return res \n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while n % 2 == 0 : \n        sum += 2\n        n //= 2\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, (int)(math.sqrt(n))+1): \n        if (n % i == 0): \n            if (i % 2 == 0): \n                sum += i \n            if (n // i % 2 == 0): \n                sum += n // i \n    return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\b[a-zA-Z]*z[a-zA-Z]*\\b', text) is not None\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\w*z\\w*', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'\\b[a-z]+z[a-z]+\\b', text, re.IGNORECASE)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_check = re.compile(r'\\b[a-zA-Z]*z\\b')\n    return word_check.findall(text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z = re.compile(r'\\b[a-z]*z[a-z]*\\b')\n    z_match = z.search(text)\n    return z_match!= None\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    str = text\n    p = re.compile('\\s+')\n    lista = p.split(str)\n    for element in lista:\n        if 'z' in element:\n            print(element)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match('[a-zA-Z]*z', text)\nprint(text_match_wordz('Python'))\nprint(text_match_wordz('Java'))\nprint(text_match_wordz('C++'))\nprint(text_match_wordz('Arts'))\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #pattern = '\\w*[z]\\w*'\n    #pattern = 'z\\w*'\n    pattern = '\\w*z\\w*'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'\\b\\w*z\\w*\\b', text)\ndef text_match_wordzz(text):\n    '''\n    Write a function that matches a word containing 'zz'.\n    '''\n    return re.findall(r'\\b\\w*zz\\w*\\b', text)\ndef text_match_wordzzz(text):\n    '''\n    Write a function that matches a word containing 'zzz'.\n    '''\n    return re.findall(r'\\b\\w*zzz\\w*\\b', text)\ndef text_match_wordzzzz(text):\n    '''\n    Write a function that matches a word containing 'zzzz'.\n    '''\n    return re.findall(r'\\b\\w*zzzz\\w*\\b', text)\ndef text_match_wordzzzzz(text):\n    '''\n    Write a function that matches a word containing 'zzzzz'.\n    '''\n    return re.findall(r'\\b\\w*zzzzz\\w*\\b', text)\ndef text_match_wordzzzzzz(text):\n    '''\n    Write a function that matches a word containing 'zzzzzz'.\n    '''\n    return re.findall(r'\\b\\w*zzzzzz\\w*\\b', text)\ndef text_match_wordzzzzzzz(text):\n    '''\n    Write a function that matches a word containing 'zzzzzzz'.\n    '''\n    return re.findall(r'\\b\\w*zzzzzzz\\w*\\b', text)\ndef text_match_wordzzzzzzzz(text):\n    '''\n    Write a function that matches a word containing 'zzzzzzzz'.\n    '''\n    return re.findall(r'\\b\\w*zzzzzzzz\\w*\\b', text)\ndef text_match_wordzzzzzzzzz(text):\n    '''\n    Write a function that matches a word containing 'zzzzzzzzz'.\n    '''\n    return re.findall(r'\\b\\w*zzzzzzzzz\\w*\\b', text)\ndef text_match_wordzzzzzzzzzz(text):\n    '''\n    Write a function that matches a word containing 'zzzzzzzzzz'.\n    '''\n    return re.findall(r'\\b\\w*zzzzzzzzzz\\w*\\b', text)\ndef text_match_wordz_btw(text):\n    '''\n    Write a function that matches a word containing 'z' between\n    characters other than vowels.\n    '''\n    return re.findall(r'\\b\\w*z\\w*\\b', text)\ndef text_match_words_btw(text):\n    '''\n    Write a function that matches words between characters\n    other than vowels.\n    '''\n    return re.findall(r'\\w*\\w*\\w', text)\ndef text_match_words_btw_vowel(text):\n    '''\n    Write a function that matches words between characters\n    that are vowels.\n    '''\n    return re.findall(r'\\w*[aeiou]\\w*\\w', text)\ndef text_match_words_btw_non_vowel(text):\n    '''\n    Write a function that matches words between characters\n    that are not vowels.\n    '''\n    return re.findall(r'\\w*[^aeiou]\\w*\\w', text)\ndef text_match_words_btw_digits(text):\n    '''\n    Write a function that matches words between digits.\n    '''\n    return re.findall(r'\\b\\d\\w*\\d\\w*\\b', text)\ndef text_match_words_btw_letters(text):\n    '''\n    Write a function that matches words between letters.\n    '''\n    return re.findall(r'\\w*\\w\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = re.compile(r'[\\w]*z[\\w]*')\n    matches = re.finditer(regex, text)\n    for i in matches:\n        print(i)\n    return(regex)\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return 31\n    elif monthnum2 == 2:\n        return 28\n    elif monthnum2 == 3:\n        return 31\n    elif monthnum2 == 4:\n        return 30\n    elif monthnum2 == 5:\n        return 31\n    elif monthnum2 == 6:\n        return 30\n    elif monthnum2 == 7:\n        return 31\n    elif monthnum2 == 8:\n        return 31\n    elif monthnum2 == 9:\n        return 30\n    elif monthnum2 == 10:\n        return 31\n    elif monthnum2 == 11:\n        return 30\n    elif monthnum2 == 12:\n        return 31\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif monthnum2 in [4, 6, 9, 11]:\n        return 30\n    elif monthnum2 == 2:\n        return 28\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        print(\"January has 31 days.\")\n    elif monthnum2 == 2:\n        print(\"February has 28 days.\")\n    elif monthnum2 == 3:\n        print(\"March has 31 days.\")\n    elif monthnum2 == 4:\n        print(\"April has 30 days.\")\n    elif monthnum2 == 5:\n        print(\"May has 31 days.\")\n    elif monthnum2 == 6:\n        print(\"June has 30 days.\")\n    elif monthnum2 == 7:\n        print(\"July has 31 days.\")\n    elif monthnum2 == 8:\n        print(\"August has 31 days.\")\n    elif monthnum2 == 9:\n        print(\"September has 30 days.\")\n    elif monthnum2 == 10:\n        print(\"October has 31 days.\")\n    elif monthnum2 == 11:\n        print(\"November has 30 days.\")\n    elif monthnum2 == 12:\n        print(\"December has 31 days.\")\n    else:\n        print(\"Wrong month number!\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    if monthnum2 > 12:\n        print('Given month number is invalid')\n    else:\n        if monthnum2 == 12:\n            print(month_days[monthnum2-1])\n        else:\n            print(month_days[monthnum2-1])\n            \ncheck_monthnumb_number(4)\ncheck_monthnumb_number(9)\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return -1\n    \ndef check_leapyear_number(year):\n    '''\n    Write a function to check whether a given year is leap year or not.\n    '''\n    \n    if year % 400 == 0 or year % 4 == 0 and year % 100!= 0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # monthnum = int(input(\"Enter the month number: \"))\n    monthnum2 = int(monthnum2)\n    if monthnum2 == 1:\n        print(\"Month number contains 31 days.\")\n    elif monthnum2 == 2:\n        print(\"Month number contains 28 or 29 days.\")\n    elif monthnum2 == 3:\n        print(\"Month number contains 31 days.\")\n    elif monthnum2 == 4:\n        print(\"Month number contains 30 days.\")\n    elif monthnum2 == 5:\n        print(\"Month number contains 31 days.\")\n    elif monthnum2 == 6:\n        print(\"Month number contains 30 days.\")\n    elif monthnum2 == 7:\n        print(\"Month number contains 31 days.\")\n    elif monthnum2 == 8:\n        print(\"Month number contains 31 days.\")\n    elif monthnum2 == 9:\n        print(\"Month number contains 30 days.\")\n    elif monthnum2 == 10:\n        print(\"Month number contains 31 days.\")\n    elif monthnum2 == 11:\n        print(\"Month number contains 30 days.\")\n    elif monthnum2 == 12:\n        print(\"Month number contains 31 days.\")\n    else:\n        print(\"Enter a valid month number.\")\n    return\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"The number of days in month\", monthnum2, \"is 31.\")\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"The number of days in month\", monthnum2, \"is 30.\")\n    elif monthnum2 == 2:\n        print(\"The number of days in month\", monthnum2, \"is 28 or 29.\")\n    else:\n        print(\"There are no 31 days in month\", monthnum2, \".\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    monthnum1 = int(input(\"Enter the month number: \"))\n    if monthnum1 == 2:\n        if monthnum2 == 29:\n            print(f\"{monthnum2} has 29 days\")\n        elif monthnum2 == 28:\n            print(f\"{monthnum2} has 28 days\")\n        else:\n            print(f\"{monthnum2} has 31 days\")\n    elif monthnum1 == 4 or monthnum1 == 6 or monthnum1 == 9 or monthnum1 == 11:\n        print(f\"{monthnum2} has 30 days\")\n    else:\n        print(f\"{monthnum2} has 31 days\")\n    \ndef check_monthname_number(monthname2):\n    '''\n    Write a function to check whether the given month name contains 31 days or not.\n    '''\n    monthname1 = input(\"Enter the month name: \")\n    if monthname1 == \"February\" or monthname1 == \"April\" or monthname1 == \"June\" or monthname1 == \"September\" or monthname1 == \"November\":\n        print(f\"{monthname1} has 30 days\")\n    else:\n        print(f\"{monthname1} has 31 days\")\n        \ndef check_leapyear_number(year2):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    \n    year1 = int(input(\"Enter the year: \"))\n    if year1%4 == 0 and year1%100!= 0 or year1%400 == 0:\n        print(f\"{year1} is a leap year\")\n    else:\n        print(f\"{year1} is not a leap year\")\n        \ndef check_date_number(year2, month2, day2):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    \n    if month2 <= 12:\n        if day2 <= 31:\n            print(f\"{day2}/{month2}/{year2} is a valid date\")\n        else:\n            print(f\"{day2}/{month2}/{year2} is not a valid date\")\n    else:\n        print(f\"{day2}/{month2}/{year2} is not a valid date\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return -1\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return \"January contains 31 days\"\n    elif monthnum2 == 2:\n        return \"February contains 28 days or 29 days\"\n    elif monthnum2 == 3:\n        return \"March contains 31 days\"\n    elif monthnum2 == 4:\n        return \"April contains 30 days\"\n    elif monthnum2 == 5:\n        return \"May contains 31 days\"\n    elif monthnum2 == 6:\n        return \"June contains 30 days\"\n    elif monthnum2 == 7:\n        return \"July contains 31 days\"\n    elif monthnum2 == 8:\n        return \"August contains 31 days\"\n    elif monthnum2 == 9:\n        return \"September contains 30 days\"\n    elif monthnum2 == 10:\n        return \"October contains 31 days\"\n    elif monthnum2 == 11:\n        return \"November contains 30 days\"\n    elif monthnum2 == 12:\n        return \"December contains 31 days\"\n    else:\n        return \"Invalid input\"\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for string in stringlist:\n        stringlist[stringlist.index(string)] = string[::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [''.join(reversed(x)) for x in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    def reverse(s):\n        return s[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    rev_list = []\n    for i in stringlist:\n        rev_list.append(i[::-1])\n    return rev_list\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedstringlist = []\n    for i in range(len(stringlist)):\n        reversedstringlist.append(stringlist[i][::-1])\n    return reversedstringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if not stringlist:\n        return None\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    # Define and initialize a new list.\n    reverse_list = []\n    \n    # Traverse the given string list.\n    for string in stringlist:\n        # Reverse the each string in the list.\n        reverse_list.append(string[::-1])\n    \n    # Return the reversed string list.\n    return reverse_list\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedlist = []\n    for s in stringlist:\n        reversedlist.append(s[::-1])\n    return reversedlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(0, len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n    \nif __name__ == '__main__':\n    print(reverse_string_list(['apple', 'banana', 'orange', 'kiwi', 'lemon']))\n    print(reverse_string_list(['a', 'b', 'c', 'd', 'e']))\n    print(reverse_string_list(['a', 'b', 'c', 'd', 'e', 'f', 'g'])"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_lst = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sub_lst.append(lst[i:j+1])\n    sub_lst.sort(key=len)\n    return sub_lst[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(0, len(lst)):\n        sub_lst = lst[i]\n        min_len = len(sub_lst)\n        for j in range(i+1, len(lst)):\n            sub_lst = lst[j]\n            if min_len > len(sub_lst):\n                min_len = len(sub_lst)\n                min_sublist = sub_lst\n        print(min_sublist)\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if j == len(lst)-1:\n                sublist.append(lst[i:j+1])\n    sublist.sort(key = lambda x: len(x), reverse=True)\n    return sublist[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Base Case\n    if len(lst)==1:\n        return lst\n    # Recursive Case\n    lst1 = Find_Min(lst[0:-1])\n    lst2 = Find_Min(lst[1:])\n    if len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_list = [] \n    min_len = len(lst[0]) \n    for x in lst: \n        if len(x) < min_len: \n            sub_list = x \n            min_len = len(x) \n    return sub_list\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublst = []\n    sublist=[]\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)+1):\n            sublst=lst[i:j]\n            sublist.append(sublst)\n    minlen=min(len(x) for x in sublist)\n    for x in sublist:\n        if len(x)==minlen:\n            return x\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    sub_list = lst[0]\n    for l in lst:\n        if min_len > len(l):\n            min_len = len(l)\n            sub_list = l\n    return sub_list\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len=len(lst[0])\n    min_sub=lst[0]\n    for sub in lst:\n        if len(sub)<min_len:\n            min_len=len(sub)\n            min_sub=sub\n    return min_sub\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_list = [] \n    for i in range(len(lst)): \n        for j in range(i, len(lst)): \n            sub_list.append(lst[i:j+1]) \n    sub_list.sort(key=len) \n    return sub_list[0] \n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m = len(lst)\n    mins = lst[0]\n    for i in range(0,m):\n        if len(lst[i]) < len(mins):\n            mins = lst[i]\n    return mins\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is: \", area)\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(l+b)\ndef triangle_area(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return.5*b*h\ndef triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return b+b+h\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14159265359*r*r\ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2*3.14159265359*r\ndef trapezoid_area(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return (b1+b2)*h/2\ndef trapezoid_perimeter(b1,b2,h):\n    '''\n    Write a function to find the perimeter of a trapezoid.\n    '''\n    return b1+b2+h\ndef parallelogram_area(b,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return b*h\ndef parallelogram_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    return 2*(b+h)\ndef equilateral_triangle_area(b):\n    '''\n    Write a function to find the area of an equilateral triangle.\n    '''\n    return b*b*math.sqrt(3)/4\ndef equilateral_triangle_perimeter(b):\n    '''\n    Write a function to find the perimeter of an equilateral triangle.\n    '''\n    return 3*b\ndef right_triangle_area(b,h):\n    '''\n    Write a function to find the area of a right triangle.\n    '''\n    return b*h/2\ndef right_triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a right triangle.\n    '''\n    return b+h\ndef right_triangle_hypotenuse(b,h):\n    '''\n    Write a function to find the hypotenuse of a right triangle.\n    '''\n    return (b*b+h*h)**.5\ndef equilateral_triangle_hypotenuse(b):\n    '''\n    Write a function to find the hypotenuse of an equilateral triangle.\n    '''\n    return b*math.sqrt(3)/2\ndef equilateral_triangle_side_length(b):\n    '''\n    Write a function to find the length of the base of an equilateral triangle.\n    '''\n    return b/math.sqrt(3)\ndef right_triangle_side_length(b,h):\n    '''\n    Write a function to find the length of the base of a right triangle.\n    '''\n    return b/math.sqrt(2)\ndef right_triangle_angle(b,h):\n    '''\n    Write a function to find the angle opposite to the base of a right triangle.\n    '''\n    return math.asin(h/b)\ndef circle_circle_intersection_area(r1,r2):\n    '''\n    Write a function to find the area of the intersection of two circles.\n    '''\n    return 3.14159265359*r1*r2\ndef circle_circle_intersection_perimeter(r1,r2):\n    '''\n    Write a function to find the perimeter of the intersection of two circles.\n    '''\n    return 2*3.14159265359*(r1+r2)\ndef rectangle_rectangle_intersection_area(l1,b1,l2,b2):\n    '''\n    Write a function to find the area of the intersection of two rectangles.\n    '''\n    return rectangle_area(max(l1,l2),max(b1,b2))-rectangle_area(min(l1,l2),min(b1,b2))\ndef rectangle_rectangle_intersection_perimeter(l1,b1,l2,b2):\n    '''\n    Write a function to find the perimeter of the intersection of two rectangles.\n    '''\n    return rectangle_perimeter(max(l1,l2),max(b1,b2))+rectangle_perimeter(min(l1,l2),min(b1,b2))\ndef triangle_triangle_intersection_area(l1,b1,h1,l2,b2,h2):\n    '''\n    Write a function to find the area of the intersection of two triangles.\n    '''\n    return triangle_area(max(l1,l2),max(b1,b2))+triangle_area(min(l1,l2),min(b1,b2))-triangle_area(min(l1,l2),max(b1,b2),min(h1,h2))\ndef triangle_triangle_intersection_perimeter(l1,b1,h1,l2,b2,h2):\n    '''\n    Write a function to find the perimeter of the intersection of two triangles.\n    '''\n    return triangle_perimeter(max(l1,l2),max(b1,b2))+triangle_perimeter(min(l1,l2),min(b1,b2))-triangle_perimeter(min(l1,l2),max(b1,b2),min(h1,h2))\ndef circle_circle_intersection_diameter(r1,r2):\n    '''\n    Write a function to find the diameter of the intersection of two circles.\n    '''\n    return 2*r1+2*r2\ndef circle_circle_intersection_diameter_length(r1,r2):\n    '''\n    Write a function to find the length of the diameter of the intersection of two circles.\n    '''\n    return 2*r1+2*r2\ndef rectangle_rectangle_intersection_diameter(l1,b1,l2,b2):\n    '''\n    Write a function to find the diameter of the intersection of two rectangles.\n    '''\n    return 2*(max(l1,l2)+min(l1,l2)+max(b1,b2)+min(b1,b2))\ndef rectangle_rectangle_intersection_diameter_length(l1,b1,l2,b2):\n    '''\n    Write a function to find the length of the diameter of the intersection of two rectangles.\n    '''\n    return 2*(max(l1,l2)+min(l1,l2)+max(b1,b2)+min(b1,b2))\ndef triangle_triangle_intersection_diameter(l1,b1,h1,l2,b2,h2):\n    '''\n    Write a function to find the diameter of the intersection of two triangles.\n    '''\n    return 2*(max(l1,l2)+min(l1,l2)+max(b1,b2)+min(b1,b2)+max(h1,h2)+min(h1,h2))\ndef triangle_triangle_intersection_diameter_length(l1,b1,h1,l2,b2,h2):\n    '''\n    Write a function to find the length of the diameter of the intersection of two triangles.\n    '''\n    return 2*(max(l1,l2)+min(l1,l2)+max(b1,b2)+min(b1,b2)+max(h1,h2)+min(h1,h2))\ndef triangle_triangle_intersection_area(l1,b1,h1,l2,b2,h2):\n    '''\n    Write a function to find the area of the intersection of two triangles.\n    '''\n    return (max(l1,l2)*max(b1,b2)*max(h1,h2))/2\ndef rectangle_rectangl"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=str1.lower()\n    return re.sub('[a-z]','',str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = list(str1)\n    upper = []\n    for char in str2:\n        if char.isupper():\n            upper.append(char)\n    for u in upper:\n        str2.remove(u)\n    new_str = ''.join(str2)\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    res = re.findall(pattern, str1)\n    for i in res:\n        str1 = str1.replace(i, '')\n    return str1\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADSF'))\nprint(remove_uppercase('ASDKHAFDjkfdsdfASDASDFADSFADS"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', \"\", str1, re.I)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = 'abcdefghi'\n    print(remove_uppercase(str1))\n    \n    \n    \n    #Explanation:\n    '''\n    This function takes a string, str1, as a parameter. Then, \n    the function splits the string at every instance of a capital letter. \n    The function then creates a list from the result of the split and \n    then compares the length of this list to the number of letters in \n    the original string. If the length of the list is less than the \n    length of the original string, it removes any instances of \n    capital letters and returns the result of the split. \n    \n    Otherwise, it returns the original string. \n    '''\n    \ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    \n    str1 = 'abcdefghi'\n    print(remove_numbers(str1))\n    \n    \n    \n    #Explanation:\n    '''\n    This function takes a string, str1, as a parameter. Then, \n    the function splits the string at every instance of a number. \n    The function then creates a list from the result of the split and \n    then compares the length of this list to the number of letters in \n    the original string. If the length of the list is less than the \n    length of the original string, it removes any instances of \n    numbers and returns the result of the split. \n    \n    Otherwise, it returns the original string. \n    '''\n    \ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    str1 = 'abcdefghi'\n    print(remove_special_characters(str1))\n    \n    \n    \n    #Explanation:\n    '''\n    This function takes a string, str1, as a parameter. Then, \n    the function splits the string at every instance of a special character. \n    The function then creates a list from the result of the split and \n    then compares the length of this list to the number of letters in \n    the original string. If the length of the list is less than the \n    length of the original string, it removes any instances of \n    special characters and returns the result of the split. \n    \n    Otherwise, it returns the original string. \n    '''\n    \ndef insert_string_in_middle(str1, str2):\n    '''\n    Write a function to insert a string in the middle of a given string.\n    '''\n    str1 = 'abcdefghi'\n    str2 ='middle'\n    print(insert_string_in_middle(str1, str2))\n    \n    \n    \n    #Explanation:\n    '''\n    This function takes two strings, str1 and str2, as parameters. \n    The function splits the string into a list. Then, the function \n    compares the length of the list with the length of the smaller \n    string. If the length of the list is less than the length of the \n    smaller string, the function will insert str2 in the middle of \n    str1, and return the result of the split. \n    \n    If the length of the list is equal to the length of the smaller \n    string, the function will return the original string. \n    '''\n    \ndef string_in_lowercase(str1):\n    '''\n    Write a function to convert a given string into all lowercase.\n    '''\n    str1 = 'abcdefghi'\n    print(string_in_lowercase(str1))\n    \n    \n    \n    #Explanation:\n    '''\n    This function takes a string, str1, as a parameter. The function \n    then checks if the string is lowercase or not. If the string is \n    lowercase, it returns the string in lowercase. \n    \n    Otherwise, it returns the string in lowercase. \n    '''\n    \ndef string_in_uppercase(str1):\n    '''\n    Write a function to convert a given string into all uppercase.\n    '''\n    str1 = 'abcdefghi'\n    print(string_in_uppercase(str1))\n    \n    \n    \n    #Explanation:\n    '''\n    This function takes a string, str1, as a parameter. The function \n    then checks if the string is uppercase or not. If the string is \n    uppercase, it returns the string in uppercase. \n    \n    Otherwise, it returns the string in uppercase. \n    '''\n    \ndef string_in_titlecase(str1):\n    '''\n    Write a function to convert a given string into all titlecase.\n    '''\n    str1 = 'abcdefghi'\n    print(string_in_titlecase(str1))\n    \n    \n    \n    #Explanation:\n    '''\n    This function takes a string, str1, as a parameter. The function \n    then checks if the string is titlecase or not. If the string is \n    titlecase, it returns the string in titlecase. \n    \n    Otherwise, it returns the string in titlecase. \n    '''\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    str1 = 'aba'\n    print(is_palindrome(str1))\n    \n    \n    \n    #Explanation:\n    '''\n    This function takes a string, str1, as a parameter. The function \n    then splits the string into a list. Then, the function checks if \n    the list is a palindrome. If it is a palindrome, it returns True. \n    \n    Otherwise, it returns False. \n    '''\n    \ndef get_unique_list(list1):\n    '''\n    Write a function to get unique items from a given list.\n    '''\n    list1 = [1, 1, 2, 2, 3, 3, 3, 3, 4, 5]\n    print(get_unique_list(list1))\n    \n    \n    \n    #Explanation:\n    '''\n    This function takes a list, list1, as a parameter. The function \n    then creates a set from the list, and then converts the set into \n    a list. The function returns this list. \n    '''\n    \ndef capitalize_string_elements(str1):\n    '''\n    Write a function to capitalize a given string.\n    '''\n    str1 = 'abcdefghi'\n    print(capitalize_string_elements(str1))\n    \n    \n    \n    #Explanation:\n    '''\n    This function takes a string, str1, as a parameter. The function \n    then splits the string into a list. The function then iterates \n    through the list and makes all the items in the list lowercase. \n    Then, the function capitalizes the first letter in every item of \n    the list. The function returns the list. \n    '''\n    \ndef split_string(str1):\n    '''\n    Write a function to split a given string.\n    '''\n    str1 = 'abcdefghi'\n    print(split_string(str1))\n    \n    \n    \n    #Explanation:\n    '''\n    This function takes a string, str1, as a parameter. The function \n    then splits the string into a list. The function returns the list. \n    '''\n    \ndef count_string(str1, str2):\n    '''\n    Write a function to count the number of times a substring appears \n    in a given string.\n    '''\n    str1 = 'abcdefghi'\n    str2 = 'i'\n    print(count_string(str1, str2))\n    \n    \n    \n    #Explanation:\n    '''\n    This function takes two strings, str1 and str2, as parameters. \n    The function then compares the first letter of str1 and the \n    first letter of str2. If they are equal, the function takes the \n    second letter of str1 and the second letter of str2. If these \n    letters are equal, the function takes the third letter of str1 \n    and the third letter of str2. If these letters are equa"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str_list = list(str1)\n    new_str = ''\n    for i in str_list:\n        if i.isalpha():\n            new_str = new_str + i\n        else:\n            new_str = new_str +''\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return \"\".join(str1.split())\ndef remove_parentheses(str1):\n    '''\n    Write a function to remove parentheses substrings from a given string.\n    '''\n    #regex = re.compile('\\([^()]*\\)')\n    #return regex.sub('', str1)\n    return re.sub(r'\\([^()]*\\)', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    s = ''\n    for i in str1:\n        if i.islower():\n            s += i\n    return s\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    def rup(str1):\n        for i in range(len(str1)):\n            str1=str1.replace(str1[i].upper(),'')\n        return str1\n    return rup(str1)\n    \nprint(remove_uppercase(\"Apple AND Banana\"))\nprint(remove_uppercase(\"aBcDd\"))\nprint(remove_uppercase(\"ABcDeF\"))\nprint(remove_uppercase(\"\"))\nprint(remove_uppercase(\"aBcDeF\"))\nprint(remove_uppercase(\"aBcDeFgh\"))\nprint(remove_uppercase(\"ABcDeFgh\"))\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = re.sub('[A-Z]', '', str1)\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst] \n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst] \n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst] \n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\nprint(Extract([[10,20],[30],[40,50,60]]))\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst] \ndef Sort(lst): \n    '''\n    Write a Python function to sort (ascending and descending) a list of tuples using Lambda.\n    '''\n    #return sorted(lst, key = lambda x:x[0])\n    return sorted(lst,key=lambda x:x[0], reverse=False)\ndef Last(lst):\n    '''\n    Write a Python function to get last element of each sublist.\n    '''\n    return [i[-1] for i in lst]\ndef First(lst):\n    '''\n    Write a Python function to get first element of each sublist.\n    '''\n    return [i[0] for i in lst]\ndef Sum(lst):\n    '''\n    Write a Python function to get the sum of all the numbers in the list.\n    '''\n    return sum(lst)\ndef Mean(lst):\n    '''\n    Write a Python function to calculate the mean of a list of numbers.\n    '''\n    return sum(lst)/len(lst)\ndef Median(lst):\n    '''\n    Write a Python function to calculate the median of a list of numbers.\n    '''\n    lst.sort()\n    if(len(lst) % 2 == 0):\n        return (lst[(len(lst)-1)//2]+lst[(len(lst)+1)//2])/2\n    else:\n        return lst[(len(lst)-1)//2]\ndef Mode(lst):\n    '''\n    Write a Python function to calculate the mode of a list of numbers.\n    '''\n    #storing the occurance of each element\n    dict={}\n    for i in lst:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    #storing maximum occurance of an element\n    m=0\n    for key,value in dict.items():\n        if value>m:\n            m=value\n    #storing maximum occurance of an element\n    maxval=0\n    for key,value in dict.items():\n        if(value==m and value>maxval):\n            maxval=value\n            mode=key\n    return mode\ndef Mul(lst):\n    '''\n    Write a Python function to multiply all the numbers in the list.\n    '''\n    return reduce(lambda x,y:x*y,lst)\ndef Div(lst):\n    '''\n    Write a Python function to divide all the numbers in the list.\n    '''\n    return reduce(lambda x,y:x/y,lst)\ndef StrLen(lst):\n    '''\n    Write a Python function to get the length of all strings in a list.\n    '''\n    return len([str(i) for i in lst])\ndef Append(lst,lst1):\n    '''\n    Write a Python function to append a list of numbers to a second list of numbers.\n    '''\n    return lst+lst1\ndef NumOccur(lst):\n    '''\n    Write a Python function to count the number of occurrences of a specific element in the list.\n    '''\n    return lst.count(lst)\ndef Power(lst):\n    '''\n    Write a Python function to calculate the power of all numbers in the list using Lambda.\n    '''\n    return map(lambda x:x**2,lst)\ndef Largest(lst):\n    '''\n    Write a Python function to get the largest number in the list.\n    '''\n    return max(lst)\ndef Smallest(lst):\n    '''\n    Write a Python function to get the smallest number in the list.\n    '''\n    return min(lst)\ndef Union(lst):\n    '''\n    Write a Python function to return a list that contains all the elements in either list (duplicates are allowed).\n    '''\n    return set(lst[0]) | set(lst[1])\ndef Intersection(lst):\n    '''\n    Write a Python function to return a list that contains the common elements in both the lists (duplicates are allowed).\n    '''\n    return set(lst[0]) & set(lst[1])\ndef Diff(lst):\n    '''\n    Write a Python function to get the difference between two lists (duplicates are allowed).\n    '''\n    return set(lst[0]) - set(lst[1])\ndef IntrsLen(lst):\n    '''\n    Write a Python function to get the length of the intersection of two lists (duplicates are allowed).\n    '''\n    return len(set(lst[0]) & set(lst[1]))\ndef UnionLen(lst):\n    '''\n    Write a Python function to get the length of the union of two lists (duplicates are allowed).\n    '''\n    return len(set(lst[0]) | set(lst[1]))\ndef Remainder(lst):\n    '''\n    Write a Python function to get the remainder of two numbers when dividing them.\n    '''\n    return lst[0]%lst[1]\ndef DivInt(lst):\n    '''\n    Write a Python function to divide two numbers and get the integer part of the result.\n    '''\n    return lst[0]//lst[1]\ndef Multiple(lst):\n    '''\n    Write a Python function to get the product of all the numbers in the list.\n    '''\n    return reduce(lambda x,y:x*y,lst)\ndef Check(lst):\n    '''\n    Write a Python function that takes a list of numbers and returns True if all the numbers in the list are greater than or equal to the first element in the list, and False otherwise.\n    '''\n    return all(i>=lst[0] for i in lst)\ndef Sum_Squares(lst):\n    '''\n    Write a Python function to get the sum of the squares of all the numbers in the list.\n    '''\n    return sum(map(lambda x:x*x,lst))\ndef Sum_Squares_Diff(lst):\n    '''\n    Write a Python function to get the difference between the sum of the squares of all the numbers in the list and the square of the sum.\n    '''\n    return (sum(map(lambda x:x*x,lst))-sum(lst)**2)\ndef Sum_Squares_Diff_Bisect(lst):\n    '''\n    Write a Python function to get the difference between the sum of the squares of all the numbers in the list and the square of the sum.\n    '''\n    return (sum(map(lambda x:x*x,lst))**2-sum(lst)**2)\ndef Sum_Squares_Diff_Bisect_2(lst):\n    '''\n    Write a Python function to get the difference between the sum of the squares of all the numbers in the list and the square of the sum.\n    '''\n    return (sum(map(lambda x:x**2,lst))-sum(lst)**2)\ndef Sum_Squares_Diff_Bisect_2_2(lst):\n    '''\n    Write a Python function to get the difference between the sum of the squares of all the numbers in the list and the square of the sum.\n    '''\n    return (sum(map(lambda x:x**2,lst))**2-sum(lst)**2)\ndef Sum_Squares_Diff_Bisect_3(lst):\n    '''\n    Write a Python function to get the difference between the sum of the squares of all the numbers in the list and the square of the sum.\n    '''\n    return (sum(map(lambda x:x**2,lst))**2-sum(lst)**2)\ndef Power(lst):\n    '''\n    Write a Python function to calculate the power of all numbers in the list using Lambda.\n    '''\n    return map(lambda x:x**2,lst)\ndef Largest(lst):\n    '''\n    Write a Python function to get the largest number in the list.\n    '''\n    return max(lst)\ndef Smallest(lst):\n    '''\n    Write a Python function to get the smallest number in the list."
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\ndef Imprimir(datos,largo):\n    '''\n    Write a python function to print the longest sublist of a list of lists.\n    '''\n    long_subl = largo[0]\n    for i in largo[1:]:\n        if i > long_subl:\n            long_subl = i\n    for j in datos:\n        if len(j) == long_subl:\n            print(j)\ndef Longitud(lst):\n    '''\n    Write a python function to get the longest sublist of a list of lists.\n    '''\n    largo = []\n    for i in lst:\n        largo.append(len(i))\n    return largo\ndef Imprimir2(datos,largo,num):\n    '''\n    Write a python function to print the longest sublist of a list of lists.\n    '''\n    long_subl = largo[0]\n    for i in largo[1:]:\n        if i > long_subl:\n            long_subl = i\n    for j in datos:\n        if len(j) == long_subl:\n            if num == 0:\n                print(j)\n            else:\n                print(j[num-1])\ndef Longitud2(lst):\n    '''\n    Write a python function to get the longest sublist of a list of lists.\n    '''\n    largo = []\n    for i in lst:\n        largo.append(len(i))\n    return largo\ndef Imprimir3(datos,largo,num):\n    '''\n    Write a python function to print the longest sublist of a list of lists.\n    '''\n    long_subl = largo[0]\n    for i in largo[1:]:\n        if i > long_subl:\n            long_subl = i\n    for j in datos:\n        if len(j) == long_subl:\n            if num == 0:\n                print(j)\n            else:\n                print(j[num-1])\ndef Longitud3(lst):\n    '''\n    Write a python function to get the longest sublist of a list of lists.\n    '''\n    largo = []\n    for i in lst:\n        largo.append(len(i))\n    return largo\ndef Imprimir4(datos,largo,num):\n    '''\n    Write a python function to print the longest sublist of a list of lists.\n    '''\n    long_subl = largo[0]\n    for i in largo[1:]:\n        if i > long_subl:\n            long_subl = i\n    for j in datos:\n        if len(j) == long_subl:\n            if num == 0:\n                print(j)\n            else:\n                print(j[num-1])\ndef Longitud4(lst):\n    '''\n    Write a python function to get the longest sublist of a list of lists.\n    '''\n    largo = []\n    for i in lst:\n        largo.append(len(i))\n    return largo\ndef Imprimir5(datos,largo,num):\n    '''\n    Write a python function to print the longest sublist of a list of lists.\n    '''\n    long_subl = largo[0]\n    for i in largo[1:]:\n        if i > long_subl:\n            long_subl = i\n    for j in datos:\n        if len(j) == long_subl:\n            if num == 0:\n                print(j)\n            else:\n                print(j[num-1])\ndef Longitud5(lst):\n    '''\n    Write a python function to get the longest sublist of a list of lists.\n    '''\n    largo = []\n    for i in lst:\n        largo.append(len(i))\n    return largo\ndef Imprimir6(datos,largo,num):\n    '''\n    Write a python function to print the longest sublist of a list of lists.\n    '''\n    long_subl = largo[0]\n    for i in largo[1:]:\n        if i > long_subl:\n            long_subl = i\n    for j in datos:\n        if len(j) == long_subl:\n            if num == 0:\n                print(j)\n            else:\n                print(j[num-1])\ndef Longitud6(lst):\n    '''\n    Write a python function to get the longest sublist of a list of lists.\n    '''\n    largo = []\n    for i in lst:\n        largo.append(len(i))\n    return largo\ndef Imprimir7(datos,largo,num):\n    '''\n    Write a python function to print the longest sublist of a list of lists.\n    '''\n    long_subl = largo[0]\n    for i in largo[1:]:\n        if i > long_subl:\n            long_subl = i\n    for j in datos:\n        if len(j) == long_subl:\n            if num == 0:\n                print(j)\n            else:\n                print(j[num-1])\ndef Longitud7(lst):\n    '''\n    Write a python function to get the longest sublist of a list of lists.\n    '''\n    largo = []\n    for i in lst:\n        largo.append(len(i))\n    return largo\ndef Imprimir8(datos,largo,num):\n    '''\n    Write a python function to print the longest sublist of a list of lists.\n    '''\n    long_subl = largo[0]\n    for i in largo[1:]:\n        if i > long_subl:\n            long_subl = i\n    for j in datos:\n        if len(j) == long_subl:\n            if num == 0:\n                print(j)\n            else:\n                print(j[num-1])\ndef Longitud8(lst):\n    '''\n    Write a python function to get the longest sublist of a list of lists.\n    '''\n    largo = []\n    for i in lst:\n        largo.append(len(i))\n    return largo\ndef Imprimir9(datos,largo,num):\n    '''\n    Write a python function to print the longest sublist of a list of lists.\n    '''\n    long_subl = largo[0]\n    for i in largo[1:]:\n        if i > long_subl:\n            long_subl = i\n    for j in datos:\n        if len(j) == long_subl:\n            if num == 0:\n                print(j)\n            else:\n                print(j[num-1])\ndef Longitud9(lst):\n    '''\n    Write a python function to get the longest sublist of a list of lists.\n    '''\n    largo = []\n    for i in lst:\n        largo.append(len(i))\n    return largo\ndef Imprimir10(datos,largo,num):\n    '''\n    Write a python function to print the longest sublist of a list of lists.\n    '''\n    long_subl = largo[0]\n    for i in largo[1:]:\n        if i > long_subl:\n            long_subl = i\n    for j in datos:\n        if len(j) == long_subl:\n            if num == 0:\n                print(j)\n            else:\n                print(j[num-1])\ndef Longitud10(lst):\n    '''\n    Write a python function to get the longest sublist of a list of lists.\n    '''\n    largo = []\n    for i in lst:\n        largo.append(len(i))\n    return largo\ndef Imprimir11(datos,largo,num):\n    '''\n    Write a python function to print the longest sublist of a list of lists.\n    '''\n    long_subl = largo[0]\n    for i in largo[1:]:\n        if i > long_subl:\n            long"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    print(count)\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    pass\n    \ndef remove_duplicate(str):\n    '''\n    Write a python function to remove the duplicate words from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    uppercase = 0\n    for letter in str:\n        if letter.isupper():\n            uppercase += 1\n    return uppercase\nprint(upper_ctr('aDSAJhkdjsajhjsA'))\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    count = 0\n    for ch in str:\n        if ch.isupper():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\nprint(upper_ctr('Hello World'))\nprint(upper_ctr('Hello there'))\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isupper():\n            count+=1\n    print(count)\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count=count+1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    num_upper = 0\n    for i in str:\n        if i.isupper():\n            num_upper += 1\n    return num_upper\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) <= 1:\n        return list1\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    return list(itertools.combinations(list1, 3))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            for k in range(j+1,len(list1)):\n                print(list1[i],list1[j],list1[k])\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [[list1[0]]]\n    lists = []\n    for i in range(len(list1)):\n        first_element = list1[i]\n        for sublist in combinations_list(list1[:i] + list1[i+1:]):\n            lists.append([first_element]+sublist)\n    return lists\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(0, len(list1)):\n        for j in range(i + 1, len(list1)):\n            combinations.append(list1[i] + list1[j])\n    print(combinations)\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Iterate over the length of the list\n    for i in range(len(list1)):\n        # Get the current item from the list\n        current = list1[i]\n        # Create an empty list for the current item\n        new_list = []\n        # Create a variable that will be used to track if we're done with the current item\n        done_with_current = False\n        # Iterate over the length of the list\n        for j in range(len(list1)):\n            # If the current item is not the same as the current item\n            if list1[j]!= current:\n                # Append the current item to the new list\n                new_list.append(current)\n                # Set the done with the current item to True\n                done_with_current = True\n        # If we're not done with the current item\n        if not done_with_current:\n            # Append the current item to the new list\n            new_list.append(current)\n        # Check to see if we're not done with the list\n        if not done_with_current:\n            # Call the function recursively\n            combinations_list(list1[i + 1:])\n        # Check to see if we're not done with the list\n        if i + 1 == len(list1):\n            # Call the function recursively\n            combinations_list(new_list)\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combos = []\n    combos.append(list1[0])\n    for x in range(1,len(list1)):\n        temp = combos.copy()\n        for y in range(0,len(combos)):\n            temp.append(list1[x])\n            combos.append(temp)\n    combos.pop(0)\n    return combos\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(n):\n        for j in range(i + 1, n):\n            print('(', list1[i], ',', list1[j], ')')\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    def combine(list1, i, n):\n        if i == n:\n            combinations.append(list1[:])\n            return\n        for j in range(i, n):\n            list1[i], list1[j] = list1[j], list1[i]\n            combine(list1, i+1, n)\n            list1[i], list1[j] = list1[j], list1[i]\n    combine(list1, 0, len(list1))\n    return combinations\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_end = 0\n    max_prod = 1\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        max_end = max(arr[i], max_end*arr[i])\n        max_prod = max(max_end, max_prod)\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # max_ending_here[i] = max(arr[i], max_ending_here[i-1] * arr[i])\n    # max_so_far = max(max_ending_here)\n    # return max_so_far\n    max_ending_here = [None] * len(arr)\n    max_ending_here[0] = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here[i] = max(arr[i], max_ending_here[i-1]*arr[i])\n        max_so_far = max(max_so_far, max_ending_here[i])\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    size = len(arr)\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = 1\n    min_so_far = 1\n    start = 0\n    end = 0\n    s = 0\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = float('-inf')\n    min_prod = float('inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    for i in range(len(arr)):\n        max_ending_here *= arr[i]\n        max_prod = max(max_ending_here, max_prod)\n        min_ending_here *= arr[i]\n        min_prod = min(min_ending_here, min_prod)\n        if max_ending_here < 0:\n            max_ending_here = 1\n        if min_ending_here > 0:\n            min_ending_here = 1\n    return max_prod if max_prod!= float('-inf') else max_ending_here"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        raise ValueError('Input array cannot be empty')\n    current_max = 1\n    max_product = 1\n    for i in range(0,len(arr)):\n        current_max = max(arr[i],current_max * arr[i])\n        max_product = max(max_product,current_max)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -1\n    max_left = -1\n    max_right = -1\n    for i in range(len(arr)):\n        if max_left == -1 and max_right == -1:\n            max_left = i\n            max_right = i\n            max_product = max_right\n            continue\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_left = i\n            max_right = i\n        elif arr[i] < max_product:\n            max_right = i\n    return max_product, max_left, max_right\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global_max = arr[0]\n    current_max = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr is None or len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n    min_product = max_product = 1\n    start, end = 0, 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            if arr[i] < 0:\n                start = i+1\n            if arr[i] > 0:\n                end = i\n            min_product = min(min_product, 1)\n            max_product = max(max_product, 1)\n        else:\n            if arr[i] < 0:\n                start = i+1\n            if arr[i] > 0:\n                end = i\n            min_product = min(min_product * arr[i], arr[i])\n            max_product = max(max_product * arr[i], arr[i])\n    if start == 0 and end == 0:\n        return max(max_product, min_product)\n    if end - start > 0:\n        return max(max_product, min_product)\n    if end - start == 0:\n        return min_product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    dp = [[0] * (n) for i in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    res = dp[0][0]\n    for i in range(1, n):\n        for j in range(0, n - i):\n            if j == 0:\n                dp[j][j + i] = max(arr[j], arr[j + i], arr[j] * arr[j + i])\n            else:\n                dp[j][j + i] = max(dp[j][j + i - 1], arr[j] * arr[j + i], dp[j + 1][j + i] * arr[j + i])\n            if dp[j][j + i] > res:\n                res = dp[j][j + i]\n    return res\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    elif dict.values()[0] == dict.values()[n]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(value == dict[0] for value in dict.values())\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print('\\nAll values are same in the dictionary', dict)\n    else:\n        print('\\nAll values are different in the dictionary', dict)\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = None\n    for k in dict.keys():\n        if value == None:\n            value = dict[k]\n        else:\n            if value!= dict[k]:\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    return all(v == dict[0] for v in dict.values())\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict) and n == len(dict)\n    \n    \ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Do not change this function definition\n    def check_v(d):\n        return all(e == d.get(d.keys()[0]) for e in d.values())\n    # Implement the function\n    return check_v(dict"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if (len(set(dict.values())) == 1):\n        print('All values are same')\n    else:\n        print('Values are not same')\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    flag = True\n    for i in dict.values():\n        if i!= n:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if len(value) > 0:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= ''}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for key, value in dict1.items():\n        if value:\n            dict2[key] = value\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for key, value in dict1.items():\n        if value!= '':\n            dict2[key] = value\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {k: v for k, v in dict1.items() if v}\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    #creating a copy of the given dictionary\n    dict2 = dict1.copy()\n    \n    #droping items from the dict2\n    for i in dict2.keys():\n        if dict2[i] == '':\n            dict2.pop(i)\n    \n    #returning dict2\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!=''}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = dict(filter(lambda x: x[1], dict1.items()))\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    #drop the key-value pairs where value is None\n    empty_items = {k: v for k, v in dict1.items() if v is not None}\n    return empty_items\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key,value in dict1.items():\n        if value!= {}:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    def product(arr,n):\n        p = 1\n        for i in range(n):\n            p = p * arr[i]\n        return p\n    def find_max(arr,n):\n        mx = 0\n        for i in range(n-1):\n            for j in range(i+1,n):\n                if product(arr,j-i+1) > mx:\n                    mx = product(arr,j-i+1)\n        return mx\n    return find_max(arr,len(arr))\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    l = len(arr)\n    if l == 0:\n        return 0\n    max_ending = [1] * l\n    max_ending_end = [1] * l\n    max_end = 1\n    for i in range(1, l):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_ending[i] = max(max_ending[i], max_ending[j] * arr[i])\n    max_end = max(max_ending)\n    for i in range(1, l):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_ending_end[i] = max(max_ending_end[i], max_ending_end[j] * arr[i])\n    max_end = max(max_ending_end)\n    return max(max_end, max_end)\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 1\n    for i in range(len(arr)):\n        prod = 1\n        for j in range(i, len(arr)):\n            prod *= arr[j]\n            max_prod = max(max_prod, prod)\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_p = 1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            arr[i] = arr[i - 1] + 1\n    for i in arr:\n        max_p *= i\n    return max_p\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 3:\n        return -1\n    if len(arr) == 3:\n        if arr[0] * arr[1] * arr[2] > arr[0] * arr[2] * arr[1]:\n            return arr[0] * arr[1] * arr[2]\n        else:\n            return arr[0] * arr[2] * arr[1]\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    p=1\n    for i in range(len(arr)):\n        p=max(p,arr[i])\n        if p==0:\n            break\n    if p==0:\n        return 0\n    for i in range(len(arr)-1,-1,-1):\n        p=max(p,arr[i])\n        if p==0:\n            break\n    p=p**2\n    for i in range(len(arr)-1):\n        p=max(p,arr[i]*arr[i+1])\n    return p\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    for i in range(1, len(arr)):\n        for j in range(0, i):\n            if arr[i] >= arr[j] and max_product < arr[i] * arr[j]:\n                max_product = arr[i] * arr[j]\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 0\n    current_max = 0\n    current_min = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > current_max:\n            current_max = arr[i]\n            current_min = arr[i]\n        else:\n            if current_min < arr[i] < current_max:\n                current_max = arr[i]\n                current_min = arr[i]\n            else:\n                if arr[i] > current_min:\n                    current_min = arr[i]\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return [\n        (a + b)\n        for a, b in zip(test_tup, test_tup[1:])\n    ]\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test_tup = (1, 2, 3, 4, 5)\n    print(test_tup)\n    print(f\"Adding the neighbors of {test_tup}\")\n    print(\"---------\")\n    # Iterate through the elements in the tuple\n    for i in range(0, len(test_tup) - 1):\n        print(f\"{test_tup[i]} + {test_tup[i+1]} = {test_tup[i] + test_tup[i+1]}\")\n    \n    return test_tup[0] + test_tup[1]\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(test_tup)\n    final_list = []\n    for x in range(len(test_tup)-1):\n        final_list.append(test_tup[x]+test_tup[x+1])\n    print(final_list)\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i+1] for i in range(len(test_tup)-1))\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum = 0\n    for i in range(len(test_tup) - 1):\n        sum += test_tup[i] + test_tup[i+1]\n    return sum\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #return [test_tup[i] + test_tup[i+1] for i in range(0,len(test_tup)-1)]\n    return [test_tup[i] + test_tup[i+1] for i in range(0,len(test_tup)-1)]\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    def pairwise(tup):\n        pairs = []\n        for i in range(len(tup)-1):\n            pairs.append(tup[i]+tup[i+1])\n        return pairs\n    \n    result = pairwise(test_tup)\n    print(result)\n    \n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # A given tuple\n    test_tup = (12, 34, 56, 23, 76, 7)\n    # Expected output: (24, 36, 68, 42, 92, 16)\n    # First pair is (12, 34) and second is (34, 56). So add them and so on.\n    # Add the first two numbers of the tuple, then the next two numbers, then the next two numbers and so on.\n    addition = 0\n    for i in range(len(test_tup) - 1):\n        addition = addition + test_tup[i] + test_tup[i + 1]\n    return addition\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_of_pairwise_addition = 0\n    for index, item in enumerate(test_tup):\n        if (index+1 < len(test_tup)):\n            sum_of_pairwise_addition += test_tup[index] + test_tup[index+1]\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = test_tup[0]\n    for i in range(1, len(test_tup)):\n        result += test_tup[i]\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if(len(arr) == 1):\n        return arr[0]\n    else:\n        return (arr[0] * find_remainder(arr[1:], n)) % n \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for ele in arr:\n        result = (result * ele) % n\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for x in arr:\n        prod *= x\n        prod %= n\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1; \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = 1\n    for i in range(n): \n        remainder = (remainder * arr[i]) % n\n    return remainder \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod * i \n    remainder = prod % n \n    return remainder \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return reduce(lambda x, y: (x * y) % n, arr)\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    s=1\n    for i in arr:\n        s = s*i%n\n    return s\narr = [1, 2, 3, 4, 5] \nn = 6\nprint(find_remainder(arr, n))\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    a = reduce(lambda x, y: x * y, arr)\n    return a % n\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (all(l[i+1]-l[i]==1 for i in range(len(l)-1))) \n    \n    "
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return 1\n    i = 0\n    j = 1\n    while j < len(l):\n        if l[i] == l[j] - 1:\n            i = j\n            j += 1\n        else:\n            break\n    if j == len(l):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    else:\n        if l[1] - l[0] == 1:\n            return check_Consecutive(l[1:])\n        else:\n            return False\nl=[]\nn=int(input(\"Enter the length of the list:\"))\nfor i in range(n):\n    n=int(input(\"Enter the number:\"))\n    l.append(n)\nprint(check_Consecutive(l))"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = list(l)\n    l.sort()\n    if len(l)>2:\n        if l[0]+1 == l[1] and l[1]+1 == l[2]:\n            return True\n        return False\n    elif len(l)==2:\n        if l[0]+1 == l[1]:\n            return True\n        return False\n    else:\n        if l[0] == l[1]:\n            return True\n        return False\n    \nprint(check_Consecutive([1,2,3,4,5]))\nprint(check_Consecutive([1,2,4,5]))\nprint(check_Consecutive([1,2,3,6]))\nprint(check_Consecutive([1,2,3,8,9]))\nprint(check_Consecutive([1,2,3,4,5,6]))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    #print (l)\n    if (len(l) > 1):\n        for i in range(len(l) - 1):\n            if (l[i] + 1!= l[i+1]):\n                return False\n        return True\n    else:\n        return False\n        \nprint(check_Consecutive([1,2,3,4,5]))\nprint(check_Consecutive([1,2,3,4,5,6]))\nprint(check_Consecutive([1,2,3,4,5,6,7]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (all(a+1 == b for a,b in zip(l, l[1:])) or \n        all(a+2 == b for a,b in zip(l, l[1:])) or \n        all(a+3 == b for a,b in zip(l, l[1:])) or\n        all(a+4 == b for a,b in zip(l, l[1:])) or\n        all(a+5 == b for a,b in zip(l, l[1:])) or\n        all(a+6 == b for a,b in zip(l, l[1:])) or\n        all(a+7 == b for a,b in zip(l, l[1:])) or\n        all(a+8 == b for a,b in zip(l, l[1:])) or\n        all(a+9 == b for a,b in zip(l, l[1:])) or\n        all(a+10 == b for a,b in zip(l, l[1:])) or\n        all(a+11 == b for a,b in zip(l, l[1:])) or\n        all(a+12 == b for a,b in zip(l, l[1:])) or\n        all(a+13 == b for a,b in zip(l, l[1:])) or\n        all(a+14 == b for a,b in zip(l, l[1:])) or\n        all(a+15 == b for a,b in zip(l, l[1:])) or\n        all(a+16 == b for a,b in zip(l, l[1:])) or\n        all(a+17 == b for a,b in zip(l, l[1:])) or\n        all(a+18 == b for a,b in zip(l, l[1:])) or\n        all(a+19 == b for a,b in zip(l, l[1:])) or\n        all(a+20 == b for a,b in zip(l, l[1:])) or\n        all(a+21 == b for a,b in zip(l, l[1:])) or\n        all(a+22 == b for a,b in zip(l, l[1:])) or\n        all(a+23 == b for a,b in zip(l, l[1:])) or\n        all(a+24 == b for a,b in zip(l, l[1:])) or\n        all(a+25 == b for a,b in zip(l, l[1:])) or\n        all(a+26 == b for a,b in zip(l, l[1:])) or\n        all(a+27 == b for a,b in zip(l, l[1:])) or\n        all(a+28 == b for a,b in zip(l, l[1:])) or\n        all(a+29 == b for a,b in zip(l, l[1:])) or\n        all(a+30 == b for a,b in zip(l, l[1:])) or\n        all(a+31 == b for a,b in zip(l, l[1:])) or\n        all(a+32 == b for a,b in zip(l, l[1:])) or\n        all(a+33 == b for a,b in zip(l, l[1:])) or\n        all(a+34 == b for a,b in zip(l, l[1:])) or\n        all(a+35 == b for a,b in zip(l, l[1:])) or\n        all(a+36 == b for a,b in zip(l, l[1:])) or\n        all(a+37 == b for a,b in zip(l, l[1:])) or\n        all(a+38 == b for a,b in zip(l, l[1:])) or\n        all(a+39 == b for a,b in zip(l, l[1:])) or\n        all(a+40 == b for a,b in zip(l, l[1:])) or\n        all(a+41 == b for a,b in zip(l, l[1:])) or\n        all(a+42 == b for a,b in zip(l, l[1:])) or\n        all(a+43 == b for a,b in zip(l, l[1:])) or\n        all(a+44 == b for a,b in zip(l, l[1:])) or\n        all(a+45 == b for a,b in zip(l, l[1:])) or\n        all(a+46 == b for a,b in zip(l, l[1:])) or\n        all(a+47 == b for a,b in zip(l, l[1:])) or\n        all(a+48 == b for a,b in zip(l, l[1:])) or\n        all(a+49 == b for a,b in zip(l, l[1:])) or\n        all(a+50 == b for a,b in zip(l, l[1:])) or\n        all(a+51 == b for a,b in zip(l, l[1:])) or\n        all(a+52 == b for a,b in zip(l, l[1:])) or\n        all(a+53 == b for a,b in zip(l, l[1:])) or\n        all(a+54 == b for a,b in zip(l, l[1:])) or\n        all(a+55 == b for a,b in zip(l, l[1:])) or\n        all(a+56 == b for a,b in zip(l, l[1:])) or\n        all(a+57 == b for a,b in zip(l, l[1:])) or\n        all(a+58 == b for a,b in zip(l, l[1:])) or\n        all(a+59 == b for a,b in zip(l, l[1:])) or\n        all(a+60 == b for a,b in zip(l, l[1:])) or\n        all(a+61 == b for a,b in zip(l, l[1:])) or\n        all(a+62 == b for a,b in zip(l, l[1:])) or\n        all(a+63 == b for a,b in zip(l, l[1:])) or\n        all(a+64 == b for a,b in zip(l, l[1:])) or\n        all(a+65 == b for a,b in zip(l, l[1:])) or\n        all(a+66 == b for a,b in zip(l, l[1:])) or\n        all(a+67 == b for a,b in zip(l, l[1:])) or\n        all(a+68 == b for a,b in zip(l, l[1:])) or\n        all(a+69 == b for a,b in zip(l, l[1:])) or\n        all(a+70 == b for a,b in zip(l, l[1:])) or\n        all(a+71 == b for a,b in zip(l, l[1:])) or\n        all(a+72 == b for a,b in zip(l, l[1:])) or\n        all(a+73 == b for a,b in zip(l, l[1:])) or\n        all(a+74 == b for a,b in zip(l, l[1:])) or\n        all(a+75 == b for a,b in zip(l, l[1:])) or\n        all(a+76 == b for a,b in zip(l, l[1:])) or\n        all(a+77 == b for a,b in zip(l, l[1:])) or\n        all(a+78 == b for a,b in zip(l, l[1:])) or\n        all(a+79 == b for a,b in zip(l, l[1:])) or\n        all(a+80 == b for a,b in zip(l, l[1:])) or\n        all(a+81 == b for a,b in zip(l, l[1:])) or\n        all(a+82 == b for a,b in zip(l, l[1:])) or\n        all(a+83 == b for a,b in zip(l, l[1:])) or\n        all(a+84 == b for a,b in zip"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return all(l[i] == l[i+1] + 1 for i in range(len(l)-1))\n    \n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return max(l) == len(l) - 1\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (all(l[i] + 1 == l[i+1] for i in range(len(l)-1)) or all(l[i] - 1 == l[i+1] for i in range(len(l)-1)))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=sorted(l)\n    for i in range(len(l)-1):\n        if l1[i+1]==l1[i]+1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    final_list = []\n    for x in test_list1:\n        if x in test_list2:\n            final_list.append(x)\n    return final_list\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_set = set(test_list1) & set(test_list2)\n    return tuple(result_set)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # We are using sets to remove duplicate values from the list\n    # print(set(test_list1))\n    # print(set(test_list2))\n    # print(set(test_list1) & set(test_list2))\n    return set(test_list1) & set(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    list1 = test_list1\n    list2 = test_list2\n    tuple1 = set(tuple(element) for element in list1)\n    tuple2 = set(tuple(element) for element in list2)\n    print(\"The tuple intersection is: \", tuple1 & tuple2)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #Time complexity O(N^2)\n    #Space complexity O(N)\n    return set(test_list1).intersection(*(set(tup) for tup in test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1).intersection(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    temp_list1 = []\n    temp_list2 = []\n    intersection = []\n    for i in test_list1:\n        if type(i) == tuple:\n            temp_list1.append(i)\n    for j in test_list2:\n        if type(j) == tuple:\n            temp_list2.append(j)\n    print(\"Tuples in List1 are : {}\".format(temp_list1))\n    print(\"Tuples in List2 are : {}\".format(temp_list2))\n    for k in temp_list1:\n        if k in temp_list2:\n            intersection.append(k)\n    print(\"Intersection of Tuples in the List are {}\".format(intersection))\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if ch==str1[i]:\n            str1=str1[0:i]+newch+str1[i+1:]\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if ch == str1[i]:\n            str1[i] = newch\n    return ''.join(str1)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n    # str1=input('Enter a string: ')\n    # ch=input('Enter the character: ')\n    # newch=input('Enter the new character: ')\n    # print(replace_char(str1,ch,newch))\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return(str1.replace(ch,newch))\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = str1\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str = str1.replace(str1[i],newch)\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1 = []\n    for i in dict1.values():\n        list1.append(i)\n    list1.sort(reverse=True)\n    list2 = []\n    for i in list1:\n        for k,j in dict1.items():\n            if i == j:\n                list2.append(k)\n    return list2\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x: x[1], reverse=True)\ndef smallest_value(dict1):\n    '''\n    Write a function that returns the smallest value in a dictionary.\n    '''\n    return min(dict1.values())\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counts = {}\n    for word in dict1:\n        counts[word] = dict1[word]\n    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n    return sorted_counts\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #return sorted(dict1.items(),key=lambda x:x[1], reverse=True)\n    return dict(sorted(dict1.items(), key = lambda kv:(kv[1], kv[0])))\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    print(\"Original dictionary\",dict1)\n    sorted_dict = {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1], reverse=True)}\n    print(sorted_dict)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_list = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    # sorted_dict = dict(sorted_list)\n    # return sorted_dict\n    return sorted_list\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {}\n    for key in sorted(dict1, key = dict1.get, reverse = True):\n        sorted_dict[key] = dict1[key]\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key in sorted(dict1, key=dict1.get, reverse=True):\n        print(\"{}: {}\".format(key, dict1[key]))\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum_nums = sum(nums)\n    min_num = min(nums)\n    max_num = max(nums)\n    print(min_num, max_num)\n    return sum_nums - min_num - max_num\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #sum of max and min number\n    return sum(sorted(nums)[:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum_max = sum(nums) - min(nums)\n    sum_min = sum(nums) - max(nums)\n    print(f\"Sum of the largest and smallest value in a given array is {sum_max + sum_min}\")\n    return sum_max + sum_min\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[len(nums)-1] + nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big = 0\n    small = 0\n    for num in nums:\n        if num > big:\n            big = num\n        elif num < small:\n            small = num\n    print(big, small)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return (nums[len(nums)-1],nums[0])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #result = max(nums) + min(nums)\n    #print(result)\n    return sum([max(nums),min(nums)])\n    #return (lambda x: sum(x))(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    smallest = nums[0]\n    largest = nums[-1]\n    total = smallest + largest\n    return total\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if type(string) == str:\n        return string.lower()\n    else:\n        return \"Not String\"\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if type(string) == str:\n        return string.lower()\n    else:\n        return \"Type error\"\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case = string.lower()\n    print(\"Lower Case:\", lower_case)\n    return lower_case\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    str2 = re.sub('[a-z]', '', str2)\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    res = re.sub(r'[a-z]', '', str1)\n    return res\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] == 'a':\n            str1 = str1.replace('a', '', 1)\n        elif str1[i] == 'e':\n            str1 = str1.replace('e', '', 1)\n        elif str1[i] == 'i':\n            str1 = str1.replace('i', '', 1)\n        elif str1[i] == 'o':\n            str1 = str1.replace('o', '', 1)\n        elif str1[i] == 'u':\n            str1 = str1.replace('u', '', 1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    print('Original string:',str1)\n    str2 = ''\n    for i in str1:\n        if(i.isupper()):\n            str2 += i\n        else:\n            str2 +=''\n    str3 = re.sub(r'\\s+','',str2)\n    str3 = str3.lower()\n    print('Lowercase substrings removed string:',str3)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(str1.lower(), '')\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # str1 = 'DOG,is good'\n    # for i in range(len(str1)):\n    #     print(str1[i])\n    #     if str1[i] == 'i' and str1[i-1] == 'o' and str1[i-2] == 'g':\n    #         print('found',str1[i-2:i+1])\n    #         print(str1[:i-2])\n    #         print(str1[i+1:])\n    #         str1 = str1[:i-2] + str1[i+1:]\n    #         print(str1)\n    #         break\n    #     else:\n    #         print(str1)\n    # return str1\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] == 'i' and str1[i-1] == 'o' and str1[i-2] == 'g':\n            str1 = str1[:i-2] + str1[i+1:]\n    return ''.join(str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Solution 1:\n    # str1 = str1.replace(\"low\", \"\")\n    # str1 = str1.replace(\"er\", \"\")\n    # str1 = str1.replace(\"case\", \"\")\n    # return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    lst_str = str1.split(' ')\n    lst_str = [item for item in lst_str if len(item) >= 2]\n    lst_str = [item for item in lst_str if not (item.islower() and item.isalpha())]\n    lst_str = [item for item in lst_str if not item.isnumeric()]\n    str1 =''.join(lst_str)\n    return str1\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        n = abs(int(n))\n        n = n % 10\n        if n < 0 :\n            n = n * -1\n        return n\n    except:\n        return 'Invalid Input.'\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10**(len(str(n))-1)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #Remove pass and write your logic here\n    n=str(n)\n    for i in n:\n        return int(i)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0 :\n        return False\n    else:\n        return n % 10 \n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n1 = str(n)\n    a = n1[0]\n    return a\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n = n/10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 9 : \n        n = n // 10 \n    return n \n    \ndef last_Digit(n) : \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n > 9 : \n        n = n % 10 \n    return n \n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n    \ndef second_Digit(n) :\n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return n // 100\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    print (list[1::2])\n    return (list[1::2])\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if list!= None:\n        return [i for i in list if i % 2!= 0]\n    else:\n        return list\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for x in list:\n        if x%2!= 0:\n            odd.append(x)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    l = []\n    for i in list:\n        if i%2!= 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2 == 1:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for i in list:\n        if i % 2!= 0:\n            odd_numbers.append(i)\n    return odd_numbers\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for i in list:\n        if i % 2 == 1:\n            odd_numbers.append(i)\n    return odd_numbers\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    x = []\n    for i in list:\n        if i % 2 == 1:\n            x.append(i)\n    return x\n    "
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    print(list[1::2])\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_numbers = []\n    odd_numbers = []\n    for x in list:\n        if(x % 2 == 0):\n            even_numbers.append(x)\n        else:\n            odd_numbers.append(x)\n    print('Even numbers:', even_numbers)\n    print('Odd numbers:', odd_numbers)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n) :\n        return (n * (n+1) * (2 * n + 1)) // 6\n    return sum(range(1, n+1)) ** 3 - sum_of_cubes(n)\n    \ndef is_prime(n) :\n    '''\n    Write a python function to check whether a given number n is prime or not.\n    '''\n    if n < 2 :\n        return False\n    if n == 2 :\n        return True\n    if n % 2 == 0 :\n        return False\n    for i in range(3, int(n**0.5)+1) :\n        if n % i == 0 :\n            return False\n    return True\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n):\n        return (n*(n+1)*(2*n+1))/6\n    return sum_of_cubes(n) - sum(range(1,n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i ** 3 for i in range(1,n+1)])\n    sum_numbers = sum([i for i in range(1,n+1)])\n    return abs(sum_cubes - sum_numbers)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # use python library\n    import math\n    # a function to find the sum of cubes\n    def cubesum(n) :\n        return (n*(n+1)*(n+2)/6)\n    return int(math.pow(n*(n+1)*(n+2)/6,3))-n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum([i for i in range(1, n+1)])\n    difference = sum_of_numbers**3 - sum_of_cubes\n    return difference\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0\n    for i in range(1, n+1) :\n        sum1 += i*i*i\n    sum2 = 0\n    for i in range(1, n+1) :\n        sum2 += i\n    return(sum2**3 - sum1)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_n = 0\n    for i in range(1,n+1) :\n        sum_of_n += i\n        sum_of_cubes += i**3\n    return sum_of_n**3 - sum_of_cubes\n    \n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1):\n        sum1 = sum1 + (i*i*i)\n        sum2 = sum2 + i\n    \n    sum_difference = (sum1*sum2) + sum2\n    sum_difference = sum_difference*6\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for x in range(n) :\n        sum_of_cubes = sum_of_cubes + x ** 3\n        sum_of_numbers = sum_of_numbers + x\n    return sum_of_cubes - sum_of_numbers\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Solution :  \n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n+1) :\n        sum1 += i * i\n        sum2 += i\n    sum2 = sum2 * sum2\n    return sum2 - sum1\n    '''\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    Odd_Pair = 0\n    for i in range(0, N) : \n        for j in range(i+1, N) : \n            if((A[i] ^ A[j]) & 1) : \n                Odd_Pair = Odd_Pair+1\n    return(Odd_Pair)\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    ctr = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                ctr += 1\n    return ctr\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N): \n        for j in range(i + 1, N): \n            if ((A[i] ^ A[j]) & 1): \n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])&1:\n                count += 1\n    \n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if ((A[i]^A[j]) & 1):\n                count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    C = 0\n    for i in range(N) :\n        for j in range(i+1, N) :\n            if ((A[i] ^ A[j]) & 1) == 1 :\n                C = C + 1\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if (A[i] ^ A[j] ) & 1 : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if( A[i] ^ A[j] % 2 == 1) : \n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    OddPair=0\n    for i in range(0,N):\n        for j in range(0,N):\n            OddPair+=0 if (A[i]^A[j])%2==0 else 1\n    return OddPair\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if ((A[i] ^ A[j]) & 1): \n                count += 1\n    return count \n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if not string:\n        return string\n    lower = string[0].islower()\n    def toggle(char):\n        if lower:\n            return char.lower()\n        else:\n            return char.upper()\n    return ''.join(toggle(char) for char in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    # return \"\".join([chr(ord(char)+32) if char.isupper() else chr(ord(char)-32) for char in string])\n    \n    # best code:\n    s=''\n    for c in string:\n        if c.isupper():\n            c = c.lower()\n        else:\n            c = c.upper()\n        s+=c\n    return s\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        result += char.upper() if char.islower() else char.lower()\n    return result\n    \ndef is_anagram(string1, string2):\n    '''\n    Write a function to test if two strings are anagrams of each other.\n    '''\n    return sorted(string1.replace(' ', '')) == sorted(string2.replace(' ', ''))\n    \ndef remove_substring(string, sub_string):\n    '''\n    Write a function to remove all substrings of a given string.\n    '''\n    result = ''\n    for index in range(len(string)):\n        if index + len(sub_string) >= len(string):\n            break\n        if string[index:index+len(sub_string)] == sub_string:\n            result += ''\n        else:\n            result += string[index]\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    temp = []\n    for char in string:\n        if char.isupper():\n            temp.append(char.lower())\n        elif char.islower():\n            temp.append(char.upper())\n        else:\n            temp.append(char)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # alist = []\n    # for char in string:\n    #     if char.isupper():\n    #         alist.append(char.lower())\n    #     else:\n    #         alist.append(char.upper())\n    # return ''.join(alist)\n    return ''.join(x.swapcase() for x in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    # Initialize a variable to store the converted string.\n    new_string = ''\n    \n    # Use a for loop to iterate through all characters in the string.\n    for i in range(len(string)):\n        # Check if the character is a lowercase letter.\n        if string[i].islower():\n            # Convert the character to an uppercase letter.\n            new_string += string[i].upper()\n        # Check if the character is an uppercase letter.\n        elif string[i].isupper():\n            # Convert the character to a lowercase letter.\n            new_string += string[i].lower()\n        # Otherwise, the character is not a letter.\n        else:\n            # Convert the character to its original case.\n            new_string += string[i]\n    \n    # Return the new, toggled string.\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(str(c.upper()) if c.islower() else str(c.lower()) for c in string)\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n    n1_sum = 0\n    n2_sum = 0\n    for i in range(n1_len):\n        n1_sum += int(n1_str[i])\n    for i in range(n2_len):\n        n2_sum += int(n2_str[i])\n    sum_diff = abs(n1_sum - n2_sum)\n    print(sum_diff)\n    return sum_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    l1 = list(str(n1))\n    l2 = list(str(n2))\n    # sum\n    sum = 0\n    for i in range(0, len(l1)):\n        sum += abs(int(l1[i]) - int(l2[i]))\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1)) > len(str(n2)):\n        n1, n2 = n2, n1\n    \n    digit_sum = 0\n    for i in range(len(str(n1))):\n        digit_sum += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    \n    return digit_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(str(n1))!= len(str(n2)):\n        return -1\n    n1 = int(n1)\n    n2 = int(n2)\n    digit_distance = 0\n    for i in range(len(str(n1))):\n        digit_distance += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return digit_distance\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(i) - int(j)) for i,j in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    return sum(abs(int(n1[i]) - int(n2[i])) for i in range(0, len(n1)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = str(n1), str(n2)\n    n1, n2 = \"\".join(sorted(n1)), \"\".join(sorted(n2))\n    total = 0\n    for i in range(len(n1)):\n        total += abs(int(n1[i]) - int(n2[i]))\n    return total\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(a-b) for a,b in zip(str(n1),str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = abs(int(n1))\n    n2 = abs(int(n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    assert n1 >= 0\n    assert n2 >= 0\n    if n1 < 10 and n2 < 10:\n        return abs(n1 - n2)\n    return abs(n1 // 10 - n2 // 10) + digit_distance_nums(n1 % 10, n2 % 10)\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for i in range(0, size):\n        curr_sum = curr_sum + a[i]\n        if curr_sum < 0:\n            curr_sum = 0\n        elif curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n    \nprint max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7) #--> 19\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 1:\n        return 0\n    max_so_far = a[0]\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i+1\n    print (\"Maximum contiguous sum is %d\"%(max_so_far))\n    print (\"Starting Index %d\"%(start))\n    print (\"Ending Index %d\"%(end))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # implement Kadane's algorithm. Use a global variable min_so_far to record the minimum value.\n    # keep track of max_ending_here, which is the maximum value ending at the current index\n    # then update min_so_far if needed\n    max_ending_here = max_ending_here = min_so_far = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        min_so_far = min(min_so_far, max_ending_here)\n    return min_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #Initialize all the variables\n    max_sum = a[0]\n    max_end_index = 0\n    start_index = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -1\n    sum_now = 0\n    for i in range(size):\n        sum_now = sum_now + a[i]\n        if sum_now > max_sum:\n            max_sum = sum_now\n        if sum_now < 0:\n            sum_now = 0\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        cur_sum = 0\n        for j in range(i, size):\n            cur_sum += a[j]\n            max_sum = max(max_sum, cur_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    sum_here = 0\n    for i in range(0, size):\n        sum_here = sum_here + a[i]\n        if sum_here > max_sum:\n            max_sum = sum_here\n        if sum_here < 0:\n            sum_here = 0\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #TODO: Replace the code with your own logic\n    return ()\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = list()\n    for elem1 in test_tup1:\n        if elem1 not in union_tup:\n            union_tup.append(elem1)\n    for elem2 in test_tup2:\n        if elem2 not in union_tup:\n            union_tup.append(elem2)\n    return sorted(union_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    sorted_list = sorted(list(union_set))\n    return tuple(sorted_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elem = []\n    for i in test_tup1:\n        if i not in union_elem:\n            union_elem.append(i)\n    for i in test_tup2:\n        if i not in union_elem:\n            union_elem.append(i)\n    union_elem.sort()\n    return union_elem\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        tup1, tup2 = test_tup2, test_tup1\n    else:\n        tup1, tup2 = test_tup1, test_tup2\n    return tuple(sorted(set(tup1 + tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1).union(set(test_tup2))))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_union = sorted(list(set(test_tup1) | set(test_tup2)))\n    return test_union\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = list(set(test_tup1) | set(test_tup2))\n    union = sorted(union)\n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return (sorted(list(set(test_tup1) | set(test_tup2))))\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    len_list = []\n    for i in lst:\n        if type(i) is list:\n            len_list.append(len(i))\n    return max(len_list)\n    \ndef Find_Max_Length2(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    len_list = []\n    for i in lst:\n        if type(i) is list:\n            len_list.append(len(i))\n    return max(len_list)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    i = 0\n    maxi = 0\n    while i < len(lst):\n        if len(lst[i]) > maxi:\n            maxi = len(lst[i])\n        i += 1\n    return maxi\n    \ndef Find_Max_Length_2(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    i = 0\n    maxi = 0\n    while i < len(lst):\n        if len(lst[i]) > maxi:\n            maxi = len(lst[i])\n        if len(lst[i]) < maxi:\n            break\n        i += 1\n    return maxi\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    res = []\n    for sublist in lst:\n        res.append(len(sublist))\n    return max(res)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    #This function is optimized using max() and list comprehension\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for item in lst:\n        max_len = max(max_len, len(item))\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(len(lst[i]))\n    max1=lst1[0]\n    for i in range(len(lst1)):\n        if lst1[i]>max1:\n            max1=lst1[i]\n    return max1\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max = 0\n    for l in lst:\n        if len(l) > max:\n            max = len(l)\n    return max\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 1\n    for i in range(len(lst)):\n        curr_len = 1\n        for j in range(i+1, len(lst)):\n            if lst[j] >= lst[j-1]:\n                curr_len += 1\n            else:\n                break\n        max_len = max(max_len, curr_len)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst2 = []\n    for i in lst:\n        if isinstance(i, list):\n            lst2.append(i)\n    lst = lst2\n    m = 0\n    for i in lst:\n        if len(i)>m:\n            m = len(i)\n    return m\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst_len = [len(i) for i in lst]\n    return max(lst_len)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # split the string by the quotation mark\n    string_list = text.split(\"\\\"\")\n    # loop through the list and extract the number from the string\n    for i in range(len(string_list)):\n        if i % 2!= 0:\n            number = re.findall('[0-9]', string_list[i])\n            print(number)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    def extract(text):\n        text = text.strip()\n        reg_exp = re.compile(r'\"([^\"]*)\"')\n        m = reg_exp.search(text)\n        if m:\n            return m.group(1)\n        return text\n    return [extract(text) for text in text.split(';')]\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    reg = r'\"(.*)\"'\n    return re.findall(reg, text)\n    \ndef read_text(filepath):\n    '''\n    Write a function that takes a filename as input, and returns the contents of the file as a string.\n    '''\n    with open(filepath, 'r') as file:\n        return file.read()\n    \ndef test_extract_values():\n    assert extract_values('\"foo\" \"bar\"') == ['foo', 'bar']\n    assert extract_values('\"foo bar\"') == ['foo bar']\n    assert extract_values('\"foo \"\" bar\"') == ['foo  bar']\n    assert extract_values('\"foo \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' bar\"') == ['foo \\' \\' bar']\n    assert extract_values('\"foo \\' \\' \\' bar\"') == ['foo \\' \\' \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' bar\"') == ['foo \\' \\' \\' \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' bar\"') == ['foo \\' \\' \\' \\' \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' \\' \\' \\' \\' \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' \\' \\' \\' \\' \\' \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' \\' \\' \\' \\' \\' \\' \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' \\' \\' \\' \\' \\' \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' \\' \\' \\' \\' \\' \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' \\' \\' \\' \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' \\' \\' \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' bar\"') == ['foo \\' bar']\n    assert extract_values('\"foo \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\' \\"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    numbers = re.findall(r'\"[a-zA-Z0-9-_\\.]+\"', text)\n    return [number.replace('\"', '') for number in numbers]\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    list1 = text.split(\" \")\n    for item in list1:\n        if '\"' in item:\n            list1.remove(item)\n        if \"(\" in item:\n            list1.remove(item)\n        if \")\" in item:\n            list1.remove(item)\n        if \",\" in item:\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'[a-zA-Z0-9\\s\\.\\,\\!\\?\\:\\\"]+', text)\n    \n    # return re.findall(r'\\\"[a-zA-Z0-9\\s\\.\\,\\!\\?\\:\\\"]+\\\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    new_list = re.findall(r'\"[^\"]*\"', text)\n    return new_list\n    # pass\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Find all values between quotation marks.\n    # Assumes that a value can appear multiple times.\n    return re.findall(r'\\\"(.+?)\\\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #1.extract values\n    values = re.findall('\".*?\"', text)\n    #2.revert to string\n    values_re = re.findall('\"(.*?)\"', text)\n    values_re_str = ','.join(values_re)\n    #3.return results\n    return values_re_str\n    \ndef extract_values2(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\".*?\"', text)\n    \ndef extract_values3(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"(.*?)\"', text)\n    \ndef extract_values4(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(\"('.*?')\", text)\n    \ndef extract_values5(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(\"('.*?')\", text)\n    \ndef extract_values6(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(\"('.*?')\", text)\n    \ndef extract_values7(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"(.*?)\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    text = text.replace('\\n',' ')\n    find_value = re.findall('\\\".*\\\"',text)\n    for element in find_value:\n        values.append(element.strip('\\\"'))\n    return values\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # function to count pairs\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if (arr[i]!= arr[j]):\n                count += 1\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if arr[i]!= arr[j] and i!=j:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # arr = [1,2,3,4,5]\n    # n = len(arr)\n    \n    # function to count the pairs with unequal elements\n    def pairCount(arr, n):\n        count = 0\n        # looping through all elements \n        for i in range(0,n): \n            for j in range(i+1,n): \n                if(arr[i]!= arr[j]):\n                    count += 1\n        return count\n    \n    return pairCount(arr, n)\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n): \n        for j in range(n): \n            if i<j: \n                if arr[i]!=arr[j]:\n                    count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dict = {}\n    for i in range(n):\n        if arr[i] in dict:\n            dict[arr[i]] += 1\n        else:\n            dict[arr[i]] = 1\n    count = 0\n    for i in range(n):\n        if arr[i]!= i:\n            if (arr[i] > 0 and arr[i] % 2 == 0) or (arr[i] < 0 and arr[i] % 2 == 1):\n                count += dict[arr[i]]\n            elif arr[i] % 2 == 0:\n                count += (dict[arr[i]] - 1)\n            else:\n                count += (dict[arr[i]] - 1) / 2\n    return int(count)\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    total = 0\n    for i in range(0,n-1): \n        for j in range(i+1,n): \n            if(arr[i]!= arr[j]): \n                total += 1\n    return total \n    \ndef check_Subarrays(arr,x,n): \n    '''\n    Write a python function to check if a list of numbers is a subset of a given list of numbers. The numbers in the list of numbers can be repeated.\n    '''\n    for i in range(0,n): \n        subset = []\n        for j in range(i,n): \n            if(arr[j] not in subset): \n                subset.append(arr[j]) \n        if(len(subset) == x): \n            print(\"Yes, subarray found\") \n            print(subset) \n            return\n    print(\"No subarray found\") \n    \ndef isSubsetSum(set, n, sum): \n    '''\n    Write a python function to check if a list of numbers is a subset of a given list of numbers. The numbers in the list of numbers can be repeated.\n    '''\n    if (sum == 0): \n        return True\n    if (n == 0 and sum!= 0): \n        return False\n    if (set[n - 1] > sum): \n        return isSubsetSum(set, n - 1, sum) \n    return isSubsetSum(set, n - 1, sum) or isSubsetSum(set, n - 1, sum - set[n - 1]) \n    \ndef find_All_Subsets(arr): \n    '''\n    Write a python function to return all subsets of a list.\n    '''\n    all_subsets = [] \n    for i in range(0,2**len(arr)): \n        subset = [] \n        for j in range(0,len(arr)): \n            if((i & 1 << j)): \n                subset.append(arr[j]) \n        all_subsets.append(subset) \n    return all_subsets \n    \ndef find_All_Subsets_dp(arr): \n    '''\n    Write a python function to return all subsets of a list.\n    '''\n    all_subsets = [] \n    for i in range(0,2**len(arr)): \n        subset = [] \n        for j in range(0,len(arr)): \n            if((i & 1 << j)): \n                subset.append(arr[j]) \n        all_subsets.append(subset) \n    return all_subsets \n    \ndef print_K_Subsets(arr, k): \n    '''\n    Write a python function to return all subsets of a list.\n    '''\n    all_subsets = [] \n    for i in range(0,2**len(arr)): \n        subset = [] \n        for j in range(0,len(arr)): \n            if((i & 1 << j)): \n                subset.append(arr[j]) \n        if(len(subset) == k): \n            all_subsets.append(subset) \n    return all_subsets \n    \ndef number_of_Subsets(arr, sum): \n    '''\n    Write a python function to return the number of subsets which adds up to a sum.\n    '''\n    dp = [[False for i in range(sum+1)]for j in range(len(arr)+1)] \n    for i in range(len(arr)+1): \n        for j in range(sum+1): \n            if(j == 0): \n                dp[i][j] = True\n    for i in range(1,len(arr)+1): \n        for j in range(1,sum+1): \n            if(arr[i-1] <= j): \n                dp[i][j] = dp[i-1][j-arr[i-1]] or dp[i-1][j] \n            else: \n                dp[i][j] = dp[i-1][j] \n    count = 0\n    for i in range(sum+1): \n        if(dp[len(arr)][i] == True): \n            count += 1\n    return count \n    \ndef print_k_Smallest_Numbers(arr,k): \n    '''\n    Write a python function to print k smallest numbers.\n    '''\n    for i in range(k): \n        min = i \n        for j in range(i+1,k): \n            if(arr[j] < arr[min]): \n                min = j \n        arr[i],arr[min] = arr[min],arr[i] \n    for i in range(k): \n        print(arr[i],end=\" \") \n    return\n    \ndef partition_Array(arr,low,high): \n    '''\n    Write a python function to partition an array around a given element.\n    '''\n    i = low - 1 \n    pivot = arr[high] \n    for j in range(low,high): \n        if(arr[j] < pivot): \n            i = i+1 \n            arr[i],arr[j] = arr[j],arr[i] \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return i+1\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count + 1\n    \n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    sum=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                sum+=1\n    return sum\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pair = set()\n    for i in range(n):\n        for j in range(n):\n            if arr[i]!= arr[j] and (arr[i], arr[j]) not in pair:\n                pair.add((arr[i], arr[j]))\n    return len(pair)\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \ndef is_palindrome(word):\n    '''\n    Write a python function which accepts a string and returns True if it is a palindrome and False if it is not.\n    '''\n    list_of_chars = split(word)\n    while len(list_of_chars) > 1:\n        if list_of_chars.pop()!= list_of_chars.pop(0):\n            return False\n    return True\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n_str = str(n)\n    return sum([int(i) for i in n_str])\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n!= 0:\n        s += n%10\n        n = n//10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digit_sum = 0\n    while n:\n        digit_sum += n % 10\n        n = n // 10\n    return digit_sum\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    #sum = 0\n    #while n > 0:\n    #    sum += n % 10\n    #    n = n // 10\n    #return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    else:\n        return list1 == sorted(list1)\n        \nif __name__ == \"__main__\":\n    list1 = [1, 2, 3]\n    print(issort_list(list1)"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1 = [1,2,3,4,5,6,7,8,9]\n    if list1 == sorted(list1):\n        return True\n    return False\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    if len(list1) == 1:\n        return True\n    if len(list1) == 2:\n        if list1[0] < list1[1]:\n            return True\n        else:\n            return False\n    else:\n        for i in range(0, len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict_list = []\n    for i in range(length):\n        empty_dict_list.append({})\n    return empty_dict_list\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(0,length):\n        l.append({})\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length == 0:\n        return []\n    return [{}] * length\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length == 1:\n        return [{}]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_dict = []\n    for i in range(length):\n        list_dict.append({})\n    return list_dict\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create a list to store the sorted sublists\n    sorted_sublists = []\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for x in range(len(list1)):\n        list1[x].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list=[]\n    for sublist in list1:\n        new_list.append(sorted(sublist))\n    return new_list\nprint(sort_sublists([['a', 'c', 'e'], ['b', 'd', 'f']]))\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2=[]\n    for x in list1:\n        list2.append(sorted(x))\n    return list2\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return list(map(sorted, list1))\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(l) for l in list1]\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Method 1\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    # Method 2\n    # list1.sort(key=len)\n    \n    # Method 3\n    # from operator import itemgetter\n    # list1.sort(key=itemgetter(1))\n    # list1.sort(key=lambda x: x[1])\n    # list1.sort(key=itemgetter(1, 0))\n    \n    # Method 4\n    # from functools import cmp_to_key\n    # def compare(x, y):\n        # return cmp(x[0], y[0]) or cmp(x[1], y[1])\n    # list1.sort(key=cmp_to_key(compare))\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for x in list1:\n        x.sort()\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    s=set(nums)\n    nums1=list(s)\n    return nums1\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    nums_unique = list(set(nums))\n    return nums_unique\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    list_of_unique_nums = list(set(nums))\n    return list_of_unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set(nums)\n    return len(nums) == len(nums_set)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # nums = [1, 2, 3, 4, 5, 3, 3, 4]\n    # print(nums)\n    # return [1, 2, 3, 4, 5]\n    # print(nums[::-1])\n    # return nums[::-1]\n    # nums_sets = set(nums)\n    # return list(nums_sets)\n    # nums.sort()\n    # return nums[::-1]\n    unique_list = []\n    for num in nums:\n        if num not in unique_list:\n            unique_list.append(num)\n    return unique_list\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    nums_unique = list(set(nums))\n    print(nums_unique)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # convert list of lists to list of numbers\n    nums = [int(item) for sublist in nums for item in sublist]\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    sorted_list = [sorted(l) for l in nums]\n    unique_nums = [list(x) for x in set(tuple(x) for x in sorted_list)]\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    prod = 1\n    list_data = list(set(list_data))\n    for x in list_data:\n        prod *= x\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    number_list = [1, 2, 2, 3, 5, 5, 7, 11, 11]\n    def unique_product(list_data):\n        unique_data = set(list_data)\n        product = 1\n        for data in unique_data:\n            product *= data\n        return product\n    print(unique_product(number_list))\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if list_data.count(i) == 1:\n            unique_list.append(i)\n    print('Unique List is {}'.format(unique_list))\n    print('Product of the unique numbers is {}'.format(product(unique_list)))\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_number = set(list_data)\n    print(unique_number)\n    product = 1\n    for num in unique_number:\n        product *= num\n    print(product)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return len(set(list_data)) * (list_data[0] * list_data[-1])\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [4, 3, 2, 5, 6, 4, 5, 6, 2, 5, 7, 7, 2, 3, 5, 3, 4, 5, 6, 2, 4, 2, 3, 5, 6, 7, 4, 2, 5, 7, 4, 6, 6, 7, 7, 2, 3, 4, 7, 5, 6, 2, 3, 4, 2, 3, 4, 7, 6, 3, 4, 5, 2, 5, 4, 6, 3, 5, 7, 6, 2, 7, 2, 3, 4, 7, 6, 3, 7, 6, 7, 7, 6, 2, 3, 5, 2, 5, 6, 4, 2, 3, 4, 2, 3, 4, 7, 7, 2, 3, 4, 2, 6, 2, 3, 4, 2, 4, 6, 2, 7, 4, 7, 2, 5, 7, 7, 7, 6, 7, 2, 5, 4, 7, 2, 2, 3, 5, 2, 6, 5, 4, 3, 4, 2, 4, 6, 6, 2, 2, 7, 6, 2, 6, 7, 7, 6, 6, 4, 5, 7, 7, 4, 2, 7, 3, 4, 4, 7, 2, 3, 5, 3, 2, 5, 2, 4, 2, 7, 4, 6, 4, 4, 4, 6, 4, 7, 4, 5, 5, 6, 2, 4, 3, 2, 7, 4, 4, 5, 2, 6, 4, 2, 2, 6, 4, 4, 2, 4, 4, 2, 3, 2, 4, 6, 4, 4, 4, 7, 2, 5, 7, 6, 6, 2, 4, 4, 5, 3, 6, 2, 5, 6, 2, 6, 3, 2, 7, 2, 7, 7, 7, 3, 4, 5, 7, 3, 4, 7, 2, 7, 5, 5, 4, 7, 7, 7, 6, 5, 3, 3, 5, 5, 5, 2, 2, 3, 7, 6, 3, 4, 6, 7, 3, 7, 2, 2, 3, 4, 2, 4, 7, 3, 2, 2, 4, 7, 5, 3, 6, 5, 5, 3, 2, 7, 6, 6, 7, 3, 7, 7, 6, 4, 7, 2, 6, 7, 6, 6, 3, 6, 6, 7, 2, 6, 4, 5, 7, 5, 5, 7, 7, 6, 2, 7, 6, 2, 7, 7, 7, 7, 2, 4, 4, 2, 7, 4, 4, 5, 6, 3, 7, 4, 4, 7, 3, 4, 4, 7, 6, 6, 2, 7, 4, 4, 7, 7, 4, 4, 5, 7, 7, 4, 6, 7, 6, 6, 4, 7, 7, 4, 7, 7, 7, 2, 6, 7, 6, 7, 5, 6, 7, 7, 3, 7, 7, 2, 7, 5, 6, 7, 7, 6, 2, 7, 4, 3, 2, 4, 7, 7, 6, 6, 7, 7, 7, 7, 3, 7, 4, 6, 7, 7, 4, 7, 4, 4, 7, 2, 6, 4, 5, 7, 6, 4, 4, 7, 7, 7, 2, 7, 6, 7, 2, 7, 3, 7, 2, 4, 6, 2, 5, 6, 4, 7, 6, 4, 5, 7, 7, 7, 4, 5, 7, 5, 3, 7, 7, 4, 7, 4, 6, 7, 6, 2, 7, 2, 7, 5, 7, 7, 4, 7, 5, 7, 2, 3, 3, 4, 6, 7, 6, 7, 2, 3, 4, 3, 3, 6, 7, 7, 7, 7, 4, 2, 7, 5, 6, 7, 7, 4, 2, 7, 7, 7, 7, 6, 7, 7, 7, 7, 2, 3, 7, 3, 5, 6, 4, 7, 7, 7, 7, 2, 6, 7, 2, 7, 2, 7, 7, 7, 7, 7, 6, 7, 4, 4, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 4, 7, 4, 2, 5, 5, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 2, 7, 7, 6, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, "
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 12, 13, 13, 14, 15]\n    list_data_2 = [1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 12, 13, 13, 14, 15]\n    set_data = set(list_data)\n    set_data_2 = set(list_data_2)\n    unique_set = set_data.intersection(set_data_2)\n    product = 1\n    for i in unique_set:\n        product = product * i\n    print(product)\nunique_product(list_data)\nunique_product(list_data_2)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return [list_data[i] for i in range(len(list_data)) if list_data.count(list_data[i]) == 1]\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_of_unique_elements = []\n    for element in list_data:\n        if element not in list_of_unique_elements:\n            list_of_unique_elements.append(element)\n    print(list_of_unique_elements)\n    product_of_unique_elements = 1\n    for element in list_of_unique_elements:\n        product_of_unique_elements *= element\n    return product_of_unique_elements\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*pi*r*(r + h)\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surfacearea = 2*math.pi*r*h + 2*math.pi*r**2\n    return surfacearea\ndef surfacearea_cube(side_length):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfacearea = 6*side_length**2\n    return surfacearea\ndef area_rectangle(length,breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length*breadth\n    return area\ndef surfacearea_rectangle(length,breadth):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    surfacearea = 2*length*breadth\n    return surfacearea\ndef surfacearea_parallelogram(length,breadth):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    surfacearea = length*breadth\n    return surfacearea\ndef surfacearea_trapezium(length,breadth,height):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    surfacearea = ((length+breadth)*height)/2\n    return surfacearea\ndef area_rhombus(length,breadth):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    area = 1/2*length*breadth\n    return area\ndef surfacearea_rhombus(length,breadth):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    surfacearea = 1/2*length*breadth\n    return surfacearea\ndef surfacearea_kite(length,breadth,height):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    surfacearea = 1/2*length*(2*breadth+height)\n    return surfacearea\ndef area_kite(length,breadth,height):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    area = length*breadth*height\n    return area\ndef volume_cube(side_length):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = side_length**3\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    volume = (4*math.pi*r**3)/3\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    import math\n    volume = math.pi*r**2*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    import math\n    volume = 1/3*math.pi*r**2*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    import math\n    volume = 1/3*math.pi*r**2*h\n    return volume\ndef volume_cube(side_length):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = side_length**3\n    return volume\ndef volume_parallelepiped(length,breadth,height):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    volume = length*breadth*height\n    return volume\ndef volume_trapezium(length,breadth,height):\n    '''\n    Write a function to find the volume of a trapezium.\n    '''\n    volume = 1/3*length*breadth*height\n    return volume\ndef volume_rectangle(length,breadth):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    volume = length*breadth\n    return volume\ndef volume_kite(length,breadth,height):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    volume = 1/3*length*(2*breadth+height)\n    return volume\ndef volume_rhombus(length,breadth):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    volume = 1/3*length*breadth\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    volume = 4*math.pi*r**3/3\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    import math\n    volume = math.pi*r**2*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    import math\n    volume = 1/3*math.pi*r**2*h\n    return volume\ndef volume_cube(side_length):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = side_length**3\n    return volume\ndef volume_parallelepiped(length,breadth,height):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    volume = length*breadth*height\n    return volume\ndef volume_trapezium(length,breadth,height):\n    '''\n    Write a function to find the volume of a trapezium.\n    '''\n    volume = 1/3*length*breadth*height\n    return volume\ndef volume_rectangle(length,breadth):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    volume = length*breadth\n    return volume\ndef volume_kite(length,breadth,height):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    volume = 1/3*length*(2*breadth+height)\n    return volume\ndef volume_rhombus(length,breadth):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    volume = 1/3*length*breadth\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    volume = (4*math.pi*r**3)/3\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    import math\n    volume = math.pi*r**2*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    import math\n    volume = 1/3*math.pi*r**2*h\n    return volume\ndef volume_cube(side_length):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = side_length**3\n    return volume\ndef volume_parallelepiped(length,breadth,height):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    volume = length*breadth*height\n    return volume\ndef volume_trapezium(length,breadth,height):\n    '''\n    Write a function to find the volume of a trapezium.\n    '''\n    volume = 1/3*length*breadth*height\n    return volume\ndef volume_rectangle(length,breadth):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    volume = length*breadth\n    return volume\ndef volume_kite(length,breadth,height):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    volume = 1/3*length*(2*breadth+height)\n    return volume\ndef volume_rhombus(length,breadth):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    volume = 1"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #Your code here\n    pi = 3.141592\n    area = (pi*r**2)*2 + pi*r*h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265\n    sa = 2*pi*r*h + 2*pi*r**2\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.1415926535*r*r + 3.1415926535*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    sa = 2 * pi * r * (r + h)\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    surfacearea = 2 * pi * r * (r + h)\n    print(\"The surface area of the cylinder is: \" + str(surfacearea))\n    return surfacearea\ndef surfacearea_rectangularprism(w,l,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    from math import pi\n    surfacearea = 2 * (w * l + l * h + w * h)\n    print(\"The surface area of the rectangular prism is: \" + str(surfacearea))\n    return surfacearea\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    from math import pi\n    surfacearea = 4 * pi * r**2\n    print(\"The surface area of the sphere is: \" + str(surfacearea))\n    return surfacearea\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    from math import pi\n    surfacearea = pi * r * (r + h)\n    print(\"The surface area of the cone is: \" + str(surfacearea))\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    def cylinder_surfacearea(r,h):\n        surfacearea=2*3.14*r*h + 2*3.14*r**2\n        return surfacearea\n    return cylinder_surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surfacearea=2*math.pi*r*(r+h)\n    return surfacearea\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (len(A)>len(B)):\n        return False\n    if (len(A)==0):\n        return True\n    for i in range(len(A)):\n        if A[i]==B[i]:\n            continue\n        else:\n            return False\n    return True\ndef is_Sub_Array2(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (len(A)>len(B)):\n        return False\n    if (len(A)==0):\n        return True\n    for i in range(len(B)):\n        if (A[i]==B[i]):\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A or not B:\n        return False\n    \n    B_index = 0\n    for item in A:\n        if B[B_index] == item:\n            B_index += 1\n        if B_index == len(B):\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while(i<len(A) and j<len(B)):\n        if A[i] == B[j]:\n            j += 1\n            i += 1\n        else:\n            i += 1\n            j += 0\n        if j==len(B):\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag=False\n    if len(A) < len(B):\n        flag=False\n    else:\n        for i in range(0, len(B)):\n            if A[i]==B[i]:\n                flag=True\n            else:\n                flag=False\n                break\n    return flag\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            j+=1\n    return i==len(A)\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    if j==len(B):\n        return True\n    else:\n        return False\n    \n    \ndef check_Palindrom(A):\n    '''\n    Write a python function to check whether a list is palindrom or not.\n    '''\n    B=A[::-1]\n    if A==B:\n        return True\n    else:\n        return False\n        \n    \ndef is_Super_Array(A,B):\n    '''\n    Write a python function to check whether a list is superlist of another or not.\n    '''\n    i=0\n    j=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            j+=1\n    if i==len(A):\n        return True\n    else:\n        return False\n        \n        \ndef check_Super_Palindrom(A):\n    '''\n    Write a python function to check whether a list is superpalindrom or not.\n    '''\n    B=A[::-1]\n    if is_Super_Array(A,B):\n        return True\n    else:\n        return False\n        \n        \ndef is_Sub_String(A,B):\n    '''\n    Write a python function to check whether a string is substring of another or not.\n    '''\n    j=0\n    i=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            j+=1\n    if i==len(A):\n        return True\n    else:\n        return False\n        \n    \ndef check_Sub_String(A,B):\n    '''\n    Write a python function to check whether a string is substring of another or not.\n    '''\n    j=0\n    i=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    if j==len(B):\n        return True\n    else:\n        return False\n        \n        \ndef is_Super_String(A,B):\n    '''\n    Write a python function to check whether a string is superstring of another or not.\n    '''\n    j=0\n    i=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            j+=1\n    if i==len(A):\n        return True\n    else:\n        return False\n        \n    \ndef check_Super_String(A,B):\n    '''\n    Write a python function to check whether a string is superstring of another or not.\n    '''\n    j=0\n    i=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    if j==len(B):\n        return True\n    else:\n        return False\n        \n        \ndef is_Sorted(A):\n    '''\n    Write a python function to check whether a list is sorted or not.\n    '''\n    i=0\n    while i<len(A):\n        if A[i]>A[i+1]:\n            return False\n        else:\n            i+=1\n    return True\n        \n        \ndef check_Sorted(A):\n    '''\n    Write a python function to check whether a list is sorted or not.\n    '''\n    i=0\n    j=0\n    while i<len(A) and j<len(A):\n        if A[i]<A[j]:\n            i+=1\n            j+=1\n        else:\n            return False\n    return True\n        \n        \ndef is_Palindrom(A):\n    '''\n    Write a python function to check whether a list is palindrom or not.\n    '''\n    i=0\n    j=0\n    while i<len(A)/2 and j<len(A)/2:\n        if A[i]==A[j]:\n            i+=1\n            j+=1\n        else:\n            j+=1\n    if i==len(A)/2:\n        return True\n    else:\n        return False\n        \n        \ndef check_Palindrom(A):\n    '''\n    Write a python function to check whether a list is palindrom or not.\n    '''\n    B=A[::-1]\n    i=0\n    j=0\n    while i<len(A)/2 and j<len(A)/2:\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            j+=1\n    if i==len(A)/2:\n        return True\n    else:\n        return False\n        \n        \ndef is_Reverse(A):\n    '''\n    Write a python function to check whether a list is reverse of another or not.\n    '''\n    i=0\n    j=len(A)-1\n    while i<len(A)/2 and j>=len(A)/2:\n        if A[i]==A[j]:\n            i+=1\n            j-=1\n        else:\n            return False\n    return True\n        \n        \ndef check_Reverse(A):\n    '''\n    Write a python function to check whether a list is reverse of another or not.\n    '''\n    B=A[::-1]\n    i=0\n    j=len(A)-1\n    while i<len(A)/2 and j>=len(A)/2:\n        if A[i]==B[j]:\n            i+=1\n            j-=1\n        else:\n            return False\n    return True\n        \n        \ndef is_Concatenation(A,B):\n    '''\n    Write a python function to check whether a list is concatenation of another or not.\n    '''\n    j=0\n    i=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            j+=1\n    if j==len(B):\n        return True\n    else:\n        return False\n        \n        \ndef check_Concatenation(A,B):\n    '''\n    Write a python function to check whether a list is concatenation of another or not.\n    '''\n    i=0\n    j=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    if j==len(B):\n        return True\n    else:\n        return False\n        \n        \ndef is_Append(A,B):\n    '''\n    Write a python function to check whether a list is append of another or not.\n    '''\n    i=0\n    j=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    if i==len(A):\n        return True\n    else:\n        return False\n        \n        \ndef check_Append(A,B):\n    '''\n    Write a python function to check whether a list is append of another or not.\n    '''\n    i=0\n    j=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    if i==len(A):\n        return True\n    else:\n        return False\n        \n        \ndef is_Overlapping(A,B):\n    '''\n    Write a python function to check whether a list i"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A = [int(x) for x in A]\n    B = [int(y) for y in B]\n    return A in B\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    for i in range(len(B)):\n        if A[i] == B[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    a = len(A) \n    b = len(B) \n    for i in range(0,b): \n        flag = 0\n        for j in range(0,a): \n            if B[i] == A[j]: \n                flag = 1\n        if flag == 0: \n            print(False)\n            return False\n    print(True)\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A)\n    m = len(B)\n    i = 0\n    j = 0\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = n \n    while(n > 1): \n        result = result * (n - 1) \n        n = n - 1\n    return result \n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            sum=sum+i\n    return sum\n    \ndef last_Digit_Factorial_2(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            sum=sum+1\n    return sum\n    \ndef last_Digit_Factorial_3(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            sum=sum+i\n    return sum%10\n    \ndef last_Digit_Factorial_4(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return math.factorial(n)%10\n    \ndef last_Digit_Factorial_5(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return math.factorial(n)%10\n    \ndef last_Digit_Factorial_6(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)%10)\n    \ndef last_Digit_Factorial_7(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)/10)\n    \ndef last_Digit_Factorial_8(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)/30)\n    \ndef last_Digit_Factorial_9(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)/360)\n    \ndef last_Digit_Factorial_10(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)*(n+4)/360)\n    \ndef last_Digit_Factorial_11(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)/360)\n    \ndef last_Digit_Factorial_12(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)/360)\n    \ndef last_Digit_Factorial_13(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)/360)\n    \ndef last_Digit_Factorial_14(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)/360)\n    \ndef last_Digit_Factorial_15(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)/360)\n    \ndef last_Digit_Factorial_16(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)/360)\n    \ndef last_Digit_Factorial_17(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)/360)\n    \ndef last_Digit_Factorial_18(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)/360)\n    \ndef last_Digit_Factorial_19(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)*(n+13)/360)\n    \ndef last_Digit_Factorial_20(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)*(n+13)*(n+14)/360)\n    \ndef last_Digit_Factorial_21(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)*(n+13)*(n+14)*(n+15)/360)\n    \ndef last_Digit_Factorial_22(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)*(n+13)*(n+14)*(n+15)*(n+16)/360)\n    \ndef last_Digit_Factorial_23(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*("
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n*factorial(n-1)\n    f = factorial(n)\n    f = str(f)\n    return f[len(f)-1]\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    if(n == 0): \n        return 1\n    elif(n < 0):\n        print(\"Invalid Input\")\n    else:\n        for i in range(1,n + 1):\n            factorial = factorial*i\n        return factorial % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial = factorial*i\n    return factorial % 10\n    \ndef odd_even_count(s):\n    '''\n    Write a Python function to count the number of even and odd numbers in a given list.\n    '''\n    count_odd = 0\n    count_even = 0\n    for i in range(len(s)):\n        if s[i]%2 == 0:\n            count_even+=1\n        else:\n            count_odd+=1\n    return count_even, count_odd\n    \ndef find_max_element_from_list(s):\n    '''\n    Write a Python function to find the maximum number from a given list.\n    '''\n    return max(s)\n    \ndef sort_list(s):\n    '''\n    Write a Python function to sort a given list.\n    '''\n    s.sort()\n    return s\n    \ndef largest_number_in_list(s):\n    '''\n    Write a Python function to find the largest number in a given list.\n    '''\n    s.sort()\n    return s[-1]\n    \ndef remove_duplicates(s):\n    '''\n    Write a Python function to remove duplicates from a given list.\n    '''\n    new_list = []\n    for i in s:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n    \ndef check_prime(n):\n    '''\n    Write a Python function to check whether a given number is prime or not.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef check_perfect(n):\n    '''\n    Write a Python function to check whether a given number is perfect or not.\n    '''\n    sum_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors == n\n    \ndef check_palindrome(s):\n    '''\n    Write a Python function to check whether a given string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef max_value_from_dict(s):\n    '''\n    Write a Python function to find the maximum value from a given dictionary.\n    '''\n    max_value = 0\n    for i in s.values():\n        if i > max_value:\n            max_value = i\n    return max_value\n    \ndef check_anagram(s1, s2):\n    '''\n    Write a Python function to check whether two given strings are anagrams or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef is_pangram(s):\n    '''\n    Write a Python function to check whether a given string is pangram or not.\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for char in alphabet:\n        if char not in s.lower():\n            return False\n    return True\n    \ndef is_partition_of_palindrome(s):\n    '''\n    Write a Python function to check whether a given string is a partition of palindrome or not.\n    '''\n    if len(s) == 1:\n        return True\n    for i in range(len(s)):\n        if is_palindrome(s[:i+1]):\n            if is_partition_of_palindrome(s[i+1:]):\n                return True\n        else:\n            return False\n    return False\n    \ndef find_numbers_occurrences_in_list(s, n):\n    '''\n    Write a Python function to find the number of occurrences of a given number in a given list.\n    '''\n    return s.count(n)\n    \ndef check_lonely_element(s):\n    '''\n    Write a Python function to check whether a given list contains only one element or not.\n    '''\n    return len(s) == 1\n    \ndef check_increasing_order(s):\n    '''\n    Write a Python function to check whether a given list contains elements in increasing order or not.\n    '''\n    return sorted(s) == s\n    \ndef check_sorted_order(s):\n    '''\n    Write a Python function to check whether a given list contains elements in sorted order or not.\n    '''\n    return sorted(s) == s\n    \ndef find_missing_number(s):\n    '''\n    Write a Python function to find the missing number in a given list.\n    '''\n    l = []\n    for i in range(len(s)):\n        if i not in s:\n            l.append(i)\n    return l\n    \ndef find_duplicate_number(s):\n    '''\n    Write a Python function to find the duplicate number in a given list.\n    '''\n    s = set(s)\n    return list(s)[1:]\n    \ndef find_three_largest_number(s):\n    '''\n    Write a Python function to find three largest numbers in a given list.\n    '''\n    s.sort()\n    return s[-3:]\n    \ndef find_n_smallest_number(s, n):\n    '''\n    Write a Python function to find the n-smallest numbers in a given list.\n    '''\n    s.sort()\n    return s[:n]\n    \ndef palindrome_partitioning(s):\n    '''\n    Write a Python function to partition a given string such that the partition is a palindrome.\n    '''\n    l = []\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if is_palindrome(s[i:j+1]):\n                l.append(s[i:j+1])\n    return l\n    \ndef find_first_non_repeating_character(s):\n    '''\n    Write a Python function to find the first non-repeating character in a given string.\n    '''\n    for i in s:\n        if s.count(i) == 1:\n            return i\n    return None\n    \ndef find_first_k_non_repeating_character(s, k):\n    '''\n    Write a Python function to find the first non-repeating character in a given string.\n    '''\n    char_d = {}\n    for i in s:\n        if i in char_d:\n            char_d[i] += 1\n        else:\n            char_d[i] = 1\n    l = []\n    for i in s:\n        if char_d[i] == 1:\n            l.append(i)\n    return l[:k]\n    \ndef check_permutation(s1, s2):\n    '''\n    Write a Python function to check whether two given strings are permutations of each other or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \ndef find_first_k_distinct_characters(s, k):\n    '''\n    Write a Python function to find the first k distinct characters in a given string.\n    '''\n    l = []\n    for i in s:\n        if i not in l:\n            l.append(i)\n        if len(l) == k:\n            return l\n    return l\n    \ndef check_validity_of_parentheses(s):\n    '''\n    Write a Python function to check whether a given string is a valid parenthesis or not.\n    '''\n    l = []\n    for i in s:\n        if i == '(':\n            l.append(i)\n        elif i == ')':\n            if len(l) == 0 or l.pop()!= '(':\n                return False\n    if len(l) == 0:\n        return True\n    else:\n        return False\n    \ndef sort_array_of_objects(s):\n    '''\n    Write a Python function to sort an array of objects in ascending order.\n    '''\n    s.sort(key = lambda x: x.Name)\n    return s\n    \ndef check_validity_of_parentheses_stack(s):\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i = 1\n    while (n/i > 0): \n        i = i * 10\n    \n    return int(n/i)\n    \n    \nprint(last_Digit_Factorial(100))\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial * i \n    return (factorial%10)\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def factorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    return int(str(factorial(n))[-1])\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def fact(n):\n        if n == 1:\n            return 1\n        return n*fact(n-1)\n    return fact(n)%10\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    pass\n    list_interleaved = []\n    for i in range(len(list1)):\n        list_interleaved.append(list1[i])\n        list_interleaved.append(list2[i])\n        list_interleaved.append(list3[i])\n    return list_interleaved\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for item in zip(list1,list2,list3)]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    out=[]\n    for i in range(len(list1)):\n        out.append(list1[i])\n        out.append(list2[i])\n        out.append(list3[i])\n    return out\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    print(list1)\n    print(list2)\n    print(list3)\n    print(\"\")\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    result.extend(list1)\n    result.extend(list2)\n    result.extend(list3)\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n    \ndef max_in_list(some_list):\n    '''\n    Write a function that takes in a list and returns the max value in the list.\n    '''\n    return max(some_list)\n    \ndef min_in_list(some_list):\n    '''\n    Write a function that takes in a list and returns the min value in the list.\n    '''\n    return min(some_list)\n    \ndef add_numbers_in_list(some_list):\n    '''\n    Write a function that takes in a list and returns the sum of the numbers in the list.\n    '''\n    total = 0\n    for i in some_list:\n        total += i\n    return total\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [e1 for pair in zip(list1,list2,list3) for e1 in pair]\n    \ndef remove_duplicates_from_list(list_in):\n    '''\n    Write a function to remove duplicates from a list\n    '''\n    list_out = []\n    for item in list_in:\n        if item not in list_out:\n            list_out.append(item)\n    return list_out\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    x = 0\n    y = 0\n    z = 0\n    flat_list = []\n    while x < len(list1) and y < len(list2) and z < len(list3):\n        flat_list.append(list1[x])\n        x+=1\n        flat_list.append(list2[y])\n        y+=1\n        flat_list.append(list3[z])\n        z+=1\n    return flat_list\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #return [x for x in test_tup1 if x not in test_tup2]\n    return [x for x in test_tup1 if x not in test_tup2]\n    \ntest_tup1 = (10, 20, 30, 40, 50)\ntest_tup2 = (10, 20, 30, 40, 50)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2) :\n        dissimilar_list = list(set(test_tup1).symmetric_difference(set(test_tup2)))\n    return dissimilar_list\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i, j in zip(test_tup1, test_tup2):\n        if i == j:\n            break\n    else:\n        i, j = test_tup1[-1], test_tup2[-1]\n    return i, j\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [x for x in test_tup1 + test_tup2 if x not in test_tup1 or x not in test_tup2]\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        if tup1!= tup2:\n            dissimilar.append(tup1)\n    print(dissimilar)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [i for i in test_tup1 if i not in test_tup2]\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    return {x for x in test_tup1 if x not in test_tup2}\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    dissim_list = []\n    for elem1 in test_list1:\n        if elem1 not in test_list2:\n            dissim_list.append(elem1)\n    for elem2 in test_list2:\n        if elem2 not in test_list1:\n            dissim_list.append(elem2)\n    return tuple(dissim_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_list = list(test_tuple)\n    test_list = [x for x in test_list if even_fnc(x)]\n    test_tuple = tuple(test_list)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # using list comprehension\n    test_list = [x for x in test_tuple if even_fnc(x) == True]\n    return tuple(test_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    #Write your code here\n    test_list = []\n    \n    for i in test_tuple:\n        if i == None:\n            pass\n        elif type(i) is tuple:\n            test_list.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            test_list.append(i)\n            \n    return tuple(test_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    res = ()\n    for ele in test_tuple: \n        if type(ele) == tuple and len(ele) == 1: \n            if even_fnc(ele[0]):\n                res = res + (ele,)\n        elif type(ele) == tuple: \n            res = res + (even_ele(ele, even_fnc),)\n        else: \n            res = res + (ele,)\n    return res\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for ele in test_tuple:\n        if not isinstance(ele, tuple):\n            if even_fnc(ele):\n                test_tuple = tuple(filter(lambda x: x == ele, test_tuple))\n        else:\n            test_tuple = tuple(filter(even_ele, test_tuple))\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for ele in test_tuple:\n        if type(ele) == tuple:\n            even_ele(ele,even_fnc)\n        elif even_fnc(ele):\n            test_tuple.remove(ele)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    res_list = []\n    for i in range(0,len(test_tuple)):\n        if isinstance(test_tuple[i], list):\n            if even_fnc(test_tuple[i]):\n                res_list.append(test_tuple[i])\n        else:\n            if even_fnc(test_tuple[i]):\n                res_list.append(test_tuple[i])\n    return tuple(res_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [ele for sub_tuple in test_tuple for ele in sub_tuple if even_fnc(sub_tuple)]\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    #if type(test_tuple)==type(()):\n    if type(test_tuple)==type([]):\n        even_tuple=[]\n        for i in range(len(test_tuple)):\n            if even_fnc(test_tuple[i]):\n                even_tuple.append(test_tuple[i])\n        return tuple(even_tuple)\n    else:\n        return even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_list = []\n    for ele in test_tuple:\n        if isinstance(ele, tuple):\n            for item in ele:\n                if not isinstance(item, int):\n                    test_list.append(item)\n        else:\n            test_list.append(ele)\n    test_tuple = tuple(test_list)\n    print(test_tuple)\n    return list(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surf_area = b*s + (b*(b+s)*(s+s))/4\n    print('The surface area of a square pyramid with a given base edge and height is'+ str(surf_area) +'units')\n    return surf_area\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = b*b*s*0.5\n    return A\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_Area = (b*s)/2\n    print(surface_Area)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sa = ((b * s) * 2) + ((b * s) * 2) + ((b * s) * 2) + ((s * b) * 2)\n    print(sa)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def sq_Pyramid_Area(b,s):\n        return (b*s)*(3+s)\n    # print(sq_Pyramid_Area(3,3))\n    def area_Pyramid(a,h):\n        return a*a*h\n    # print(area_Pyramid(3,4))\n    print('For Pyramid with base = ',b,' and height = ',s,', the surface area of the Pyramid is',surface_Area(b,s))\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surfaceArea = (b * s * 2) + (s * b * 2)\n    print(\"The surface area of the pyramid is: \", surfaceArea)\n    return surfaceArea\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def area_of_face(b,h):\n        return b*h\n    a=area_of_face(b,h)\n    return (a*4+b**2*h)/2\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Import math library.\n    import math\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print(\"The surface area of the pyramid is\",b*s*(3**0.5))\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1.keys()) == 0:\n        return True\n    else:\n        return False\n    \ndef dict_in_list(dict1, list1):\n    '''\n    Write a function to check if a dictionary is in a list of dictionaries\n    '''\n    dict_list = []\n    for item in list1:\n        dict_list.append(item.keys())\n    \n    if dict1 in dict_list:\n        return True\n    else:\n        return False\n    \ndef list_in_dict(dict1, list1):\n    '''\n    Write a function to check if a list is in a dictionary\n    '''\n    dict_list = []\n    for item in dict1.keys():\n        dict_list.append(item)\n    \n    if list1 in dict_list:\n        return True\n    else:\n        return False\n    \ndef dict_in_list_value(dict1, list1):\n    '''\n    Write a function to check if a dictionary is in a list of dictionaries\n    with the value to be compared\n    '''\n    dict_list = []\n    for item in list1:\n        dict_list.append(item.values())\n    \n    if dict1 in dict_list:\n        return True\n    else:\n        return False\n    \ndef list_in_dict_value(dict1, list1):\n    '''\n    Write a function to check if a list is in a dictionary\n    with the value to be compared\n    '''\n    dict_list = []\n    for item in dict1.values():\n        dict_list.append(item)\n    \n    if list1 in dict_list:\n        return True\n    else:\n        return False\n    \ndef dict_in_dict_value(dict1, dict2):\n    '''\n    Write a function to check if a dictionary is in another dictionary\n    with the value to be compared\n    '''\n    dict_list = []\n    for item in dict1.values():\n        dict_list.append(item)\n    \n    if dict2 in dict_list:\n        return True\n    else:\n        return False\n    \ndef dict_in_dict(dict1, dict2):\n    '''\n    Write a function to check if a dictionary is in another dictionary\n    '''\n    if dict1 == dict2:\n        return True\n    else:\n        return False\n    \ndef dict_diff(dict1, dict2):\n    '''\n    Write a function to compare two dictionaries and generate a new dictionary\n    with the difference\n    '''\n    diff_dict = {}\n    for key, value in dict1.items():\n        if dict2.get(key)!= value:\n            diff_dict[key] = value\n    \n    return diff_dict\n    \ndef dict_equal(dict1, dict2):\n    '''\n    Write a function to compare two dictionaries and generate a new dictionary\n    with the same values\n    '''\n    equal_dict = {}\n    for key, value in dict1.items():\n        if dict2.get(key) == value:\n            equal_dict[key] = value\n    \n    return equal_dict\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty!\")\n        return True\n    else:\n        return False\ndef list_len(list1):\n    '''\n    Write a function to return the length of the list\n    '''\n    return len(list1)\ndef dict_len(dict1):\n    '''\n    Write a function to return the length of the dictionary\n    '''\n    return len(dict1)\ndef main():\n    '''\n    Drive the program\n    '''\n    list1=['a', 'b', 'c']\n    print(list1)\n    print(list_len(list1))\n    print(list1)\n    list2=[]\n    print(list2)\n    print(list_len(list2))\n    list3=['a']\n    print(list3)\n    print(list_len(list3))\n    dict1={'a': 1, 'b': 2, 'c': 3}\n    print(dict1)\n    print(dict_len(dict1))\n    dict2={}\n    print(dict2)\n    print(dict_len(dict2))\nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Empty dictonary\")\n    else:\n        print(\"Dictionary is not empty\")\n    return\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('Empty dictionary')\n        return True\n    else:\n        print('Dictionary has key value pairs')\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return 'not empty'\n    else:\n        return 'empty'\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('Empty')\n    else:\n        print('Not empty')\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    dict1 = {1:1, 2:2, 3:3, 4:4}\n    if dict1:\n        print(\"not empty\")\n    else:\n        print(\"empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print('This is an empty dictionary')\n    else:\n        print('Dictionary is not empty')\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    result = [1]\n    for i in range(1, num+1):\n        result.append(int(result[-1]*(4*i-2)/(i+1)))\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    return catalan_number(num - 1) * (4 * num - 2) // (num + 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_list = [1, 1]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    return 0\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    else:\n        return catalan_number(num-1)*(4*catalan_number(num-1) - 2*catalan_number(num-2))\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # global memo\n    # if num in memo:\n    #     return memo[num]\n    # memo[num] = catalan_number(num-1) + catalan_number(num-2)\n    # return memo[num]\n    return catalan_number_iterative(num)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    catalan = [0] * (num+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, num+1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    numerator = [1]\n    denominator = [1, 1]\n    for i in range(2, num + 1):\n        numerator.append((numerator[i - 1] * 2 * (2 * i - 1))//(i))\n        denominator.append((denominator[i - 1] * 2 * (2 * i))//(i))\n    return numerator[num]/denominator[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return factorial(num) // (2*factorial(num - 2))\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 1:\n        return 0\n    if num == 1:\n        return 1\n    return catalan_number(num - 1) * (4 * num - 2) // (num + 1)\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'ly\\b')\n    # find the position of the adverb\n    pos = [m.start() for m in re.finditer(pattern, text)]\n    return pos\n    # return pos\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'ly$'\n    match = re.finditer(pattern, text)\n    for m in match:\n        print(m.start())\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if text == None:\n        return None\n    regex = r\"\\b(?:ly|reverstly|again)\\b\"\n    result = re.finditer(regex, text, re.MULTILINE)\n    for match in result:\n        print(match)\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\Wadverbs\\W'\n    result = re.findall(pattern,text)\n    if result:\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'\\w*ly\\w*', text)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # text = 'The employee needs to be promoted for work'\n    matches = re.findall(r'(?<=\\b)(ly) (?=[a-z]*\\b\\s)', text)\n    \n    if matches:\n        return matches\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #regex = r\"ly\"\n    # re.findall()\n    #regex = r\"^ly$\"\n    # re.match()\n    #regex = r\"^ly[A-Za-z0-9!@#$%^&*()_+|\\\\\\[\\]{};':\\\",./<>?]*$\"\n    #regex = r\"^ly[A-Za-z0-9!@#$%^&*()_+|\\\\\\[\\]{};':\\\",./<>?]*ly$\"\n    #re.sub()\n    #regex = r\"^ly[A-Za-z0-9!@#$%^&*()_+|\\\\\\[\\]{};':\\\",./<>?]*ly$\"\n    #re.search()\n    #regex = r\"^ly[A-Za-z0-9!@#$%^&*()_+|\\\\\\[\\]{};':\\\",./<>?]*ly$\"\n    #regex = r\"^ly$\"\n    regex = r\"^[A-Za-z0-9]*ly$\"\n    result = re.findall(regex,text)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Write your code here.\n    #return text.find(\"ly\")\n    # for match in re.finditer(r\"ly\", text):\n    #     return match.start()\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # First, we remove all punctuation and make the string lowercase:\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = text.lower()\n    #print(text)\n    #print(re.findall('ly',text))\n    #print('The original text is: ',text)\n    #print('The filtered text is: ',text)\n    try:\n        # find the index position of the first adverb ending with ly in the text:\n        position = text.index('ly')\n        # find the index position of the first adverb ending with ly in the text:\n        position = text.index('ly', position+1)\n        print('The first adverb ending with ly is: ',text[position])\n        print('The index position is: ',position)\n        return [position, text[position:position+3]]\n    except:\n        print('No adverb ending with ly')\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.finditer('(ly)', text)\n    if result == None:\n        return False\n    else:\n        for m in result:\n            return m.start(), m.end()\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,(-i[1],i[0]))\n        if len(heap)>n:\n            heapq.heappop(heap)\n    print(heap)\n    return [heapq.heappop(heap)[1] for i in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    print(items)\n    heap = []\n    for i in range(0, n):\n        heapq.heappush(heap, (-1 * items[i][1], items[i][0]))\n    print(heap)\n    for i in range(0, n):\n        print(heapq.heappop(heap)[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    if n >= 0 and len(items)>0:\n        items_price=[]\n        max_heap=[]\n        for i in items:\n            heapq.heappush(items_price, i[1])\n        for _ in range(n):\n            heapq.heappush(max_heap, heapq.heappop(items_price))\n        return [items[i] for i in range(n) if items[i][0] == max_heap[0]]\n    else:\n        return []\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # your code here\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(-items[i][1],items[i][0]))\n    return [item[1] for item in heapq.nlargest(n,heap)]\n    \ndef f(n):\n    return n*n\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n > len(items):\n        return -1\n    else:\n        heap = []\n        # for item in items:\n        #     heapq.heappush(heap, (item, items[item]))\n        for item, price in items.items():\n            heapq.heappush(heap, (-price, item))\n        return [heapq.heappop(heap)[1] for _ in range(n)]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    return heapq.nlargest(n,items)\n    # return sorted(items,key = lambda item: item[0])[::-1][:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #Build a heap with the first n items.\n    heap = items[:n]\n    heapq.heapify(heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n, items, key=lambda x: x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n ==0:\n        return None\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    top_n_cost_items = heapq.nlargest(n,items,key=lambda x:x[1])\n    return top_n_cost_items\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[0:n]\n    b = l[n:]\n    return a+b\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:]\n    \ndef join_Arr(l, n):\n    '''\n    Write a python function to combine the nth element with the remaining elements from the original list.\n    '''\n    return l[0:n]+l[n+1:]\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return(tuplex)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    assert isinstance(listx,list), 'The input is not a list.'\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(tuple(listx))\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(type(tuple(listx)))\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    maxi = float(\"-inf\")\n    mini = float(\"inf\")\n    for num in nums:\n        if num > maxi:\n            maxi = num\n        if num < mini:\n            mini = num\n    return maxi - mini\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print(max(nums)-min(nums))\n    \n    \ndef count_ones(nums):\n    '''\n    Write a python function to count the number of ones in a given list.\n    '''\n    print(nums.count(1))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return None\n    else:\n        return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_val = nums[0]\n    max_val = nums[0]\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return max_val - min_val\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # a = int(input(\"Enter first number: \"))\n    # b = int(input(\"Enter second number: \"))\n    s = set()\n    \n    for num in range(a, b + 1):\n        i = 1\n        while (i * i) <= num:\n            if (i * i) == num:\n                s.add(num)\n            i += 1\n    return s\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    i = 0\n    j = 0\n    l = []\n    for i in range(a, b):\n        for j in range(b, a):\n            if (i * i == j * j) and (i + j + i + j == a + b) and (i * j == (a + b) * (a - b)) and (i < j):\n                l.append([i, j])\n    return l\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # https://en.wikipedia.org/wiki/Quadratic_equation\n    # ax^2 + bx + c = 0 => x = -b/(2a) +- sqrt(b^2 - 4ac)/2a\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    if a < b:\n        a, b = b, a\n    \n    if a % 2 == 0:\n        a -= 1\n    if b % 2 == 0:\n        b += 1\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b):\n        if i**2 > b:\n            break\n        if i**2 >= a:\n            squares.append(i**2)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i**2 for i in range(a,b+1) if i**2%(i+1)==0]\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    i = b\n    while i*i < a:\n        i += 1\n    return [i*i for i in range(i-1, 0, -1)]\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return list(filter(lambda x: x**0.5==int(x**0.5), range(a, b+1)))\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a,b+1):\n        if num**0.5 == int(num**0.5):\n            squares.append(num)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    c = []\n    for i in range(a, b+1):\n        if int(i**0.5)**2 == i:\n            c.append(i)\n    return c\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #cmath.polar(complex)\n    x,y=complex(x),complex(y)\n    return x,y\ndef rectangular_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return x,y\ndef cartesian_to_polar(x,y):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    #cmath.phase(complex)\n    x,y=complex(x),complex(y)\n    return cmath.phase(x),cmath.phase(y)\ndef polar_to_cartesian(r,theta):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    #cmath.rect(complex)\n    r,theta=complex(r),complex(theta)\n    return r*cmath.rect(1,theta)\ndef cartesian_to_rectangular(x,y):\n    '''\n    Write a function to convert cartesian coordinates to rectangular coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return x.real,y.real\ndef rectangular_to_cartesian(x,y):\n    '''\n    Write a function to convert rectangular coordinates to cartesian coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return x.real,y.real\ndef polar_to_rectangular(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #cmath.rect(complex)\n    r,theta=complex(r),complex(theta)\n    return r*cmath.rect(1,theta)\ndef rectangular_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return cmath.phase(x),cmath.phase(y)\ndef cartesian_to_rectangular(x,y):\n    '''\n    Write a function to convert cartesian coordinates to rectangular coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return x.real,y.real\ndef rectangular_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return cmath.phase(x),cmath.phase(y)\ndef polar_to_cartesian(r,theta):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    #cmath.rect(complex)\n    r,theta=complex(r),complex(theta)\n    return r*cmath.rect(1,theta)\ndef rectangular_to_cartesian(x,y):\n    '''\n    Write a function to convert rectangular coordinates to cartesian coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return x.real,y.real\ndef polar_to_rectangular(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #cmath.rect(complex)\n    r,theta=complex(r),complex(theta)\n    return r*cmath.rect(1,theta)\ndef rectangular_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return cmath.phase(x),cmath.phase(y)\ndef cartesian_to_polar(x,y):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return cmath.phase(x),cmath.phase(y)\ndef polar_to_cartesian(r,theta):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    #cmath.rect(complex)\n    r,theta=complex(r),complex(theta)\n    return r*cmath.rect(1,theta)\ndef cartesian_to_rectangular(x,y):\n    '''\n    Write a function to convert cartesian coordinates to rectangular coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return x.real,y.real\ndef rectangular_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return cmath.phase(x),cmath.phase(y)\ndef rectangular_to_cartesian(x,y):\n    '''\n    Write a function to convert rectangular coordinates to cartesian coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return x.real,y.real\ndef polar_to_rectangular(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #cmath.rect(complex)\n    r,theta=complex(r),complex(theta)\n    return r*cmath.rect(1,theta)\ndef polar_to_cartesian(r,theta):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    #cmath.rect(complex)\n    r,theta=complex(r),complex(theta)\n    return r*cmath.rect(1,theta)\ndef cartesian_to_rectangular(x,y):\n    '''\n    Write a function to convert cartesian coordinates to rectangular coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return x.real,y.real\ndef polar_to_rectangular(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #cmath.rect(complex)\n    r,theta=complex(r),complex(theta)\n    return r*cmath.rect(1,theta)\ndef rectangular_to_cartesian(x,y):\n    '''\n    Write a function to convert rectangular coordinates to cartesian coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return x.real,y.real\ndef polar_to_cartesian(r,theta):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    #cmath.rect(complex)\n    r,theta=complex(r),complex(theta)\n    return r*cmath.rect(1,theta)\ndef cartesian_to_polar(x,y):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return cmath.phase(x),cmath.phase(y)\ndef polar_to_cartesian(r,theta):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    #cmath.rect(complex)\n    r,theta=complex(r),complex(theta)\n    return r*cmath.rect(1,theta)\ndef cartesian_to_rectangular(x,y):\n    '''\n    Write a function to convert cartesian coordinates to rectangular coordinates.\n    '''\n    #cmath.rect(complex)\n    x,y=complex(x),complex(y)\n    return x.real,"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=complex(x)\n    y=complex(y)\n    return x*cmath.rect(y[0],y[1])\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=complex(x)\n    y=complex(y)\n    z=x+y*1j\n    r=z.real\n    i=z.imag\n    return [r,i]\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=complex(x)\n    y=complex(y)\n    z=x+y*1j\n    r=z.real\n    i=z.imag\n    return [r,i]\ndef is_conjugate(x,y):\n    '''\n    Write a function to check if two complex numbers are conjugate.\n    '''\n    x=complex(x)\n    y=complex(y)\n    if x.real==y.real and x.imag==-y.imag:\n        return True\n    elif x.real==y.real and x.imag==y.imag:\n        return True\n    elif x.real==-y.real and x.imag==y.imag:\n        return True\n    elif x.real==-y.real and x.imag==-y.imag:\n        return True\n    else:\n        return False\ndef is_identity(x):\n    '''\n    Write a function to check if the complex number is the identity.\n    '''\n    x=complex(x)\n    if x.real==0 and x.imag==0:\n        return True\n    else:\n        return False\ndef add(x,y):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    x=complex(x)\n    y=complex(y)\n    return x+y\ndef subtract(x,y):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    x=complex(x)\n    y=complex(y)\n    return x-y\ndef multiply(x,y):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    x=complex(x)\n    y=complex(y)\n    return x*y\ndef divide(x,y):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    x=complex(x)\n    y=complex(y)\n    return x/y\ndef exponent(x):\n    '''\n    Write a function to compute the complex number to the specified power.\n    '''\n    x=complex(x)\n    return x**x\ndef is_equal(x,y):\n    '''\n    Write a function to check if two complex numbers are equal.\n    '''\n    x=complex(x)\n    y=complex(y)\n    if x==y:\n        return True\n    else:\n        return False\ndef is_equal_modulus(x,y):\n    '''\n    Write a function to check if two complex numbers are equal modulus.\n    '''\n    x=complex(x)\n    y=complex(y)\n    r1=x.real\n    i1=x.imag\n    r2=y.real\n    i2=y.imag\n    if r1==r2 and i1==i2:\n        return True\n    elif r1==r2 and i1==i2:\n        return True\n    elif r1==-r2 and i1==i2:\n        return True\n    elif r1==-r2 and i1==i2:\n        return True\n    else:\n        return False\ndef complex_add(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a+b\ndef complex_subtract(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a-b\ndef complex_multiply(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a*b\ndef complex_divide(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a/b\ndef complex_exponent(a):\n    '''\n    Write a function to compute the complex number to the specified power.\n    '''\n    a=complex(a)\n    return a**a\ndef is_equal_complex(a,b):\n    '''\n    Write a function to check if two complex numbers are equal.\n    '''\n    a=complex(a)\n    b=complex(b)\n    if a==b:\n        return True\n    else:\n        return False\ndef is_equal_modulus_complex(a,b):\n    '''\n    Write a function to check if two complex numbers are equal modulus.\n    '''\n    a=complex(a)\n    b=complex(b)\n    r1=a.real\n    i1=a.imag\n    r2=b.real\n    i2=b.imag\n    if r1==r2 and i1==i2:\n        return True\n    elif r1==r2 and i1==i2:\n        return True\n    elif r1==-r2 and i1==i2:\n        return True\n    elif r1==-r2 and i1==i2:\n        return True\n    else:\n        return False\ndef complex_add_complex(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a+b\ndef complex_subtract_complex(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a-b\ndef complex_multiply_complex(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a*b\ndef complex_divide_complex(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a/b\ndef complex_exponent_complex(a):\n    '''\n    Write a function to compute the complex number to the specified power.\n    '''\n    a=complex(a)\n    return a**a\ndef complex_exponent_modulus(a):\n    '''\n    Write a function to compute the complex number to the specified power.\n    '''\n    a=complex(a)\n    return a**a\ndef complex_multiplication(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a*b\ndef complex_division(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return a/b\ndef complex_root(a):\n    '''\n    Write a function to compute the complex number to the specified power.\n    '''\n    a=complex(a)\n    return a**(1/a)\ndef complex_abs(a):\n    '''\n    Write a function to compute the complex number to the specified power.\n    '''\n    a=complex(a)\n    return abs(a)\ndef complex_conjugate(a):\n    '''\n    Write a function to compute the complex number to the specified power.\n    '''\n    a=complex(a)\n    return a.conjugate()\ndef complex_sum_list(list_of_complex_numbers):\n    '''\n    Write a function to compute the complex number to the specified power.\n    '''\n    list_of_complex_numbers=complex(list_of_complex_numbers)\n    return sum(list_of_complex_numbers)\ndef complex_subtract_list(list_of_complex_numbers):\n    '''\n    Write a function to compute the complex number to the specified power.\n    ''"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    polar_list = []\n    rect_list = []\n    for i in range(len(x)):\n        polar_list.append(cmath.polar(complex(x[i],y[i])))\n    for i in range(len(polar_list)):\n        rect_list.append(complex(polar_list[i][0],polar_list[i][1]))\n    return rect_list\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = complex(x,y)\n    z = abs(z)\n    z = cmath.phase(z)\n    z = z*(180/3.14)\n    \n    print(f'Polar form of complex number {x} + {y}i is {z} degrees')\ndef magnitude_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    z = complex(x,y)\n    z = abs(z)\n    z = cmath.phase(z)\n    z = z*(180/3.14)\n    print(f'Magnitude of complex number {x} + {y}i is {z} degrees')\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_rect = int(x * cmath.cos(y))\n    y_rect = int(x * cmath.sin(y))\n    return (x_rect,y_rect)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,t = x\n    return (r*math.cos(t),r*math.sin(t))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.polar(complex(x,y))\n    print(\"The complex number is\",complex(x,y))\n    print(\"The complex number in polar form is\",complex(r[0],r[1]))\n    print(\"The complex number in rectangular form is\",r[0],r[1])\n    print(\"The complex number in rectangular form is\",r[0],r[1])\n    x=float(input(\"\\n\\nDo you want to convert another complex number? Press 'y' for yes and 'n' for no\\n\"))\n    if x=='y':\n        polar_rect()\n    else:\n        pass\npolar_rect(2,3)"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = complex(x,y)\n    return cmath.rect(a.real,a.imag)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    print('Inputs to polar_rect:', x, y)\n    if x == 0 and y == 0:\n        return 0, 0\n    if x!= 0 and y == 0:\n        return 1, 0\n    if x == 0 and y!= 0:\n        return 0, 1\n    if x!= 0 and y!= 0:\n        r = (x**2 + y**2)**0.5\n        alpha = cmath.phase(x+y*1j)\n        return r, alpha\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse the elements of a list.\n    '''\n    newList.reverse()\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = a\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #Swapping of first and last element using temp variable\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList \n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #list length\n    length=len(newList)\n    #first element of list\n    firstElement=newList[0]\n    #last element of list\n    lastElement=newList[length-1]\n    #using pop method to remove first element\n    newList.pop(0)\n    #using insert method to insert last element at 0th index\n    newList.insert(0,lastElement)\n    #using pop method to remove last element\n    newList.pop(length-1)\n    #using insert method to insert first element at last index\n    newList.append(firstElement)\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList) \n    first = newList[0] \n    last = newList[size - 1] \n    newList[0] = last \n    newList[size - 1] = first \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if(len(newList) > 1):\n        first_item = newList[0]\n        last_item = newList[-1]\n        newList[0] = last_item\n        newList[-1] = first_item\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #coeff = [0]*(k+n)\n    #coeff[n] = 1\n    #for i in range(n,k+n):\n    #    coeff[i] = (coeff[i-1] + coeff[i-2])%1000000007\n    #return sum(coeff)%1000000007\n    #print(coeff)\n    return nCk(n,k)%1000000007\n    \ndef nCk(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    if k > n - k:\n        k = n - k\n    res = 1\n    for i in range(k):\n        res = res * (n - i)\n        res = res // (i + 1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    lst=[1,1,2]\n    if(k>=2):\n        for i in range(2,k+1):\n            lst.append(lst[i-1]+lst[i-2])\n    return lst[k]\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initializing the co-efficient array to 0\n    C = [0]*(n+1)\n    # Initializing the co-efficient array with the first coefficients\n    C[0] = 0\n    C[1] = 1\n    # Loop to fill the co-efficient array\n    for i in range(2,n+1):\n        for j in range(0,i+1):\n            # Calculating the value of the binomial coefficients\n            C[i] += C[j]*C[i-j-1]\n    return C[n]\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(1, k+1): \n        result = result * (n-i+1) // i \n    return result \n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    a=np.zeros(shape=(n+1,n+1))\n    for i in range(0,n+1):\n        for j in range(0,n+1):\n            if i==0:\n                a[i][j]=1\n            elif j==0:\n                a[i][j]=1\n            elif j==i:\n                a[i][j]=1\n            else:\n                a[i][j]=a[i-1][j]+a[i-1][j-1]\n    return a[n][k]\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    if (n >= k): \n        return binomial_Coeff(n, k) + binomial_Coeff(n, k - 1) \n    else: \n        return 0\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (factorial(n) // (factorial(k) * factorial(n - k)))\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(n==k):\n        return 1\n    if(k>n):\n        return 0\n    return binomial_Coeff(n-1,k)+binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [0 for i in range(k+1)]\n    C[0] = 1\n    for i in range(1,n+1):\n        j = min(i,k)\n        while j > 0:\n            C[j] += C[j-1]\n            j -= 1\n    return C[k]\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Base Case: k = 0\n    # and n = k\n    if (k == 0):\n        return 1\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) < 3:\n        return ip\n    else:\n        while(len(ip) >= 3):\n            if ip[0] == '0' and ip[1] == '0' and ip[2] == '0':\n                ip = ip[3:]\n            else:\n                return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pat = re.compile(r'\\.[0]+')\n    return re.sub(pat, '.', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=list(ip)\n    for i in range(4):\n        if ip[i][0]=='0':\n            ip[i]=ip[i][1:]\n    return '.'.join(ip)\ndef valid_ip(s):\n    '''\n    Write a function to check if the ip address is valid\n    '''\n    if s=='':\n        return False\n    return (re.match(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$',s) is not None)\ndef url_valid(url):\n    '''\n    Write a function to check if the url is valid\n    '''\n    if url=='':\n        return False\n    return (re.match(r'^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&\\'\\(\\)\\*\\+,;=.]+$',url) is not None)\ndef ip_valid(ip):\n    '''\n    Write a function to check if the ip address is valid\n    '''\n    if ip=='':\n        return False\n    return (re.match(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$',ip) is not None)\ndef ip_valid2(ip):\n    '''\n    Write a function to check if the ip address is valid\n    '''\n    if ip=='':\n        return False\n    return (re.match(r'(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(?:\\.)){3}(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])',ip) is not None)\ndef ip_valid3(ip):\n    '''\n    Write a function to check if the ip address is valid\n    '''\n    if ip=='':\n        return False\n    return (re.match(r'(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(?:\\.)){3}(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])',ip) is not None)\ndef ip_valid4(ip):\n    '''\n    Write a function to check if the ip address is valid\n    '''\n    if ip=='':\n        return False\n    return (re.match(r'((0[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}(0[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])',ip) is not None)\ndef email_valid(email):\n    '''\n    Write a function to check if the email is valid\n    '''\n    if email=='':\n        return False\n    return (re.match(r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$',email) is not None)\ndef phone_valid(phone):\n    '''\n    Write a function to check if the email is valid\n    '''\n    if phone=='':\n        return False\n    return (re.match(r'^[0-9]{10}$',phone) is not None)\ndef email_valid2(email):\n    '''\n    Write a function to check if the email is valid\n    '''\n    if email=='':\n        return False\n    return (re.match(r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$',email) is not None)\ndef phone_valid2(phone):\n    '''\n    Write a function to check if the email is valid\n    '''\n    if phone=='':\n        return False\n    return (re.match(r'^[0-9]{10}$',phone) is not None)\ndef url_valid2(url):\n    '''\n    Write a function to check if the url is valid\n    '''\n    if url=='':\n        return False\n    return (re.match(r'^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&\\'\\(\\)\\*\\+,;=.]+$',url) is not None)\ndef url_valid3(url):\n    '''\n    Write a function to check if the url is valid\n    '''\n    if url=='':\n        return False\n    return (re.match(r'^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&\\'\\(\\)\\*\\+,;=.]+$',url) is not None)\ndef url_valid4(url):\n    '''\n    Write a function to check if the url is valid\n    '''\n    if url=='':\n        return False\n    return (re.match(r'^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&\\'\\(\\)\\*\\+,;=.]+$',url) is not None)\ndef url_valid5(url):\n    '''\n    Write a function to check if the url is valid\n    '''\n    if url=='':\n        return False\n    return (re.match(r'^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&\\'\\(\\)\\*\\+,;=.]+$',url) is not None)\ndef url_valid6(url):\n    '''\n    Write a function to check if the url is valid\n    '''\n    if url=='':\n        return False\n    return (re.match(r'^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&\\'\\(\\)\\*\\+,;=.]+$',url) is not None)\ndef url_valid7(url):\n    '''\n    Write a function to check if the url is valid\n    '''\n    if url=='':\n        return False\n    return (re.match(r'^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&\\'\\(\\)\\*\\+,;=.]+$',url) is not None)\ndef url_valid8(url):\n    '''\n    Write a function to check if the url is valid\n    '''\n    if url=='':\n        return False\n    return (re.match(r'^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&\\'\\(\\)\\*\\+,;=.]+$',ur"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    list_ip = ip.split('.')\n    new_list_ip = []\n    for num in list_ip:\n        if len(num) > 0:\n            new_list_ip.append(num)\n    return '.'.join(new_list_ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip = re.sub(\"\\.[0]*$\", \"\", ip)\n    return new_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip.startswith('0') and len(ip) > 1:\n        return(ip[1:])\n    else:\n        return(ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"\\.0+\", \".\", ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0(?P<octal>[0-7]+)','\\g<octal>',ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+(\\d+).*', r'\\1', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = str(ip)\n    octet = ip.split('.')\n    new_ip = []\n    for i in range(len(octet)):\n        octet[i] = int(octet[i])\n        if i == 3:\n            if octet[i] == 0:\n                break\n            else:\n                new_ip.append(octet[i])\n                break\n        if octet[i]!= 0:\n            new_ip.append(octet[i])\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Your code here\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return(even[0]-odd[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list_even = [i for i in list1 if i % 2 == 0]\n    list_odd = [i for i in list1 if i % 2!= 0]\n    if len(list_even) == len(list_odd):\n        return abs(list_even[0] - list_odd[0])\n    return False\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    i = 0\n    j = 1\n    while i < len(list1):\n        if i % 2 == 0:\n            if list1[i]!= list1[j]:\n                return list1[i] - list1[j]\n        i += 1\n        j += 1\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_number = 0\n    even_number = 0\n    for i in range(len(list1)):\n        if(list1[i] % 2 == 0):\n            even_number = list1[i]\n        else:\n            odd_number = list1[i]\n    return(even_number - odd_number)\n        \ndef check_even(list1):\n    '''\n    Write a function to check whether a given list is even or odd.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] % 2 == 0):\n            count = count + 1\n    if(count > 0):\n        return(\"list is odd\")\n    else:\n        return(\"list is even\")\n        \ndef two_sum_v1(list1, target):\n    '''\n    Write a function to find the two number in a given list that equal a given target.\n    You can use if-else or if-elif-else statement in the function.\n    '''\n    for i in range(len(list1)):\n        if(target - list1[i] == list1[i]):\n            return(list1[i], target - list1[i])\n    return \"No two sum solution\"\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for num in list1:\n        if num%2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    print(f\"first even number of the list: {even_list[0]}\")\n    print(f\"first odd number of the list: {odd_list[0]}\")\n    print(f\"difference of first even number and first odd number of the list: {abs(even_list[0]-odd_list[0])}\")\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    #start writing your code here\n    even_list = list1[::2]\n    odd_list = list1[1::2]\n    return sum(even_list) - sum(odd_list)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    sum1 = 0\n    for i in list1:\n        if i % 2 == 0:\n            sum1 = sum1 + i\n    sum2 = 0\n    for i in list1:\n        if i % 2!= 0:\n            sum2 = sum2 + i\n    return abs(sum1 - sum2)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    diff_even_odd = abs(even[0]-odd[0])\n    return diff_even_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = []\n    even = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even[0]-odd[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = list1.copy()\n    list1.sort()\n    list2.sort()\n    first_even = list1[0]\n    first_odd = list2[0]\n    diff = first_even - first_odd\n    return diff\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return -1\n    arr1 = list(str1)\n    arr2 = list(str2)\n    arr3 = arr1 + arr2\n    cnt = 0\n    for i in range(len(arr3)):\n        if arr3[i]!= '0':\n            if arr3[i]!= arr3[i+1]:\n                arr3[i],arr3[i+1] = arr3[i+1],arr3[i]\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    \n    if n1!= n2 :\n        return -1\n        \n    # To store the positions where str1 and str2 differ \n    pos_diff = []\n    for i in range(0,n1):\n        if str1[i]!=str2[i]:\n            pos_diff.append(i)\n    #print(pos_diff)\n    \n    # To store the position of first difference in str1 and str2\n    pos_diff.append(n1)\n    \n    # Iterate over all pairs and count the number of swaps\n    ans = 0\n    for i in range(1,len(pos_diff)):\n        k = pos_diff[i-1]\n        l = pos_diff[i]\n        # Count the number of zeros between these two places in str1\n        zeros = 0\n        for j in range(k+1,l):\n            if str1[j] == '0':\n                zeros = zeros + 1\n        # Count the number of ones between these two places in str1\n        ones = 0\n        for j in range(k+1,l):\n            if str1[j] == '1':\n                ones = ones + 1\n        # Count the number of zeros between these two places in str2\n        zeros1 = 0\n        for j in range(k+1,l):\n            if str2[j] == '0':\n                zeros1 = zeros1 + 1\n        # Count the number of ones between these two places in str2\n        ones1 = 0\n        for j in range(k+1,l):\n            if str2[j] == '1':\n                ones1 = ones1 + 1\n                \n        ans = ans + max(zeros,ones)\n        ans = ans + max(zeros1,ones1)\n        \n    return ans\n    \n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n    len_max = max(len_str1,len_str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i = j = 0\n    n = len(str1) \n    m = len(str2) \n    if n!= m :\n        return -1\n    count = 0\n    for i in range(0,n) :\n        if str1[i]!= str2[i] :\n            count += 1\n    return count \n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def get_swaps(str1,str2,count,n):\n        if n == 0:\n            return count\n        if str1[n - 1] == str2[n - 1]:\n            return get_swaps(str1, str2, count, n - 1)\n        else:\n            return min(get_swaps(str1, str2, count + 1, n - 1), get_swaps(str1, str2, count, n - 1))\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    dict1 = {}\n    dict2 = {}\n    counter = 0\n    for i in str1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s1 = str1\n    s2 = str2\n    n1 = len(s1)\n    n2 = len(s2)\n    count = 0\n    if s1==s2 :\n        return count\n    else : \n        for i in range(n1) :\n            if s1[i]!=s2[i] :\n                temp = s2[i]\n                s2 = s2.replace(s2[i],'')\n                s2 = s2+temp\n                count+=1\n        return count"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1=len(str1)\n    n2=len(str2)\n    if(n1!=n2):\n        return -1\n    n=n1\n    s1=list(str1)\n    s2=list(str2)\n    pos1=[0]*(n+1)\n    pos2=[0]*(n+1)\n    for i in range(1,n+1):\n        pos1[s1[i-1]]=i\n        pos2[s2[i-1]]=i\n    print(pos1,pos2)\n    count=0\n    for i in range(1,n+1):\n        if(pos1[i]!=pos2[i]):\n            count+=1\n            pos1[i],pos1[pos1[i]]=pos1[pos1[i]],pos1[i]\n            pos2[i],pos2[pos2[i]]=pos2[pos2[i]],pos2[i]\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        for j in range(i+1,len(str1)) :\n            if str1[i]!= str1[j] and str1[i] == \"0\" :\n                str1[i],str1[j] = str1[j],str1[i]\n                count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # Variable to store the count of the swaps \n    # variable swap is used to store the count of the swaps \n    # required for each iteration \n    swap = 0\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef tuple_creation_time(tuple_list):\n    '''\n    Write a function to find the creation time of the given tuple.\n    '''\n    import time \n    return tuple_list.__class__.__class__.__name__\ndef tuples_membership(tuple_list,membership):\n    '''\n    Write a function to check whether the given object is a tuple or not.\n    '''\n    if membership in tuple_list:\n        return 'Given argument is a tuple'\n    else:\n        return 'Given argument is not a tuple'\ndef tuple_attr_access(tuple_list,attr_name):\n    '''\n    Write a function to get the given attribute of the tuple.\n    '''\n    return getattr(tuple_list,attr_name)\ndef tuple_attributes(tuple_list):\n    '''\n    Write a function to print the tuple attributes.\n    '''\n    print('Tuple Size:',tuple_size(tuple_list))\n    print('Tuple Type:',tuple_creation_time(tuple_list))\n    for attr_name in tuple_list:\n        print(attr_name)\ndef tuple_manipulation(tuple_list):\n    '''\n    Write a function to concatenate two tuples.\n    '''\n    new_tuple=(tuple_list[0],tuple_list[1],tuple_list[2])\n    return new_tuple\ndef tuple_slicing(tuple_list):\n    '''\n    Write a function to print the given tuple in the reverse order.\n    '''\n    return tuple_list[::-1]\ndef tuple_methods(tuple_list):\n    '''\n    Write a function to check whether all the elements of the tuple are divisible by 2.\n    '''\n    return all(item % 2 == 0 for item in tuple_list)\ndef tuple_comprehension(tuple_list):\n    '''\n    Write a function to print the squares of all the elements of the tuple.\n    '''\n    return [i**2 for i in tuple_list]\ndef tuple_unpacking(tuple_list):\n    '''\n    Write a function to unpack the given tuple into 4 variables.\n    '''\n    a,b,c,d=tuple_list\n    return a,b,c,d\ndef tuple_comparison(tuple_list,tuple_list_1):\n    '''\n    Write a function to compare the given two tuples.\n    '''\n    if tuple_list==tuple_list_1:\n        return 'Tuples are equal'\n    else:\n        return 'Tuples are not equal'\ndef tuples_membership_list(tuple_list,membership_list):\n    '''\n    Write a function to check whether the given list contains a tuple.\n    '''\n    if membership_list in tuple_list:\n        return 'Given list contains a tuple'\n    else:\n        return 'Given list does not contains a tuple'\ndef tuple_attr_access_list(tuple_list,attr_name):\n    '''\n    Write a function to access the given attribute of the tuple from the list.\n    '''\n    return getattr(tuple_list[0],attr_name)\ndef tuple_attributes_list(tuple_list):\n    '''\n    Write a function to print the tuple attributes from the list.\n    '''\n    print('Tuple Size:',tuple_size(tuple_list))\n    print('Tuple Type:',tuple_creation_time(tuple_list))\n    for attr_name in tuple_list[0]:\n        print(attr_name)\ndef tuple_manipulation_list(tuple_list):\n    '''\n    Write a function to concatenate two tuples from the list.\n    '''\n    new_tuple=(tuple_list[0][0],tuple_list[1][1],tuple_list[2][2])\n    return new_tuple\ndef tuple_slicing_list(tuple_list):\n    '''\n    Write a function to print the given tuple in the reverse order from the list.\n    '''\n    return tuple_list[::-1]\ndef tuple_methods_list(tuple_list):\n    '''\n    Write a function to check whether all the elements of the tuple are divisible by 2 from the list.\n    '''\n    return all(item % 2 == 0 for item in tuple_list)\ndef tuple_comprehension_list(tuple_list):\n    '''\n    Write a function to print the squares of all the elements of the tuple from the list.\n    '''\n    return [i**2 for i in tuple_list]\ndef tuple_unpacking_list(tuple_list):\n    '''\n    Write a function to unpack the given tuple into 4 variables from the list.\n    '''\n    a,b,c,d=tuple_list[0]\n    return a,b,c,d\ndef tuple_comparison_list(tuple_list,tuple_list_1):\n    '''\n    Write a function to compare the given two tuples from the list.\n    '''\n    if tuple_list==tuple_list_1:\n        return 'Tuples are equal'\n    else:\n        return 'Tuples are not equal'\ndef main():\n    '''\n    Main function to call other functions.\n    '''\n    print('1.Tuple of size 10 in bytes')\n    print('2.Tuple of creation time')\n    print('3.Tuple Membership')\n    print('4.Tuple Attribute Access')\n    print('5.Tuple Attributes')\n    print('6.Tuple Manipulation')\n    print('7.Tuple Slicing')\n    print('8.Tuple Membership in List')\n    print('9.Tuple Attribute Access in List')\n    print('10.Tuple Attributes in List')\n    print('11.Tuple Manipulation in List')\n    print('12.Tuple Slicing in List')\n    print('13.Tuple Comparison')\n    print('14.Tuple Membership in Tuple')\n    print('15.Tuple Attribute Access in Tuple')\n    print('16.Tuple Attributes in Tuple')\n    print('17.Tuple Manipulation in Tuple')\n    print('18.Tuple Slicing in Tuple')\n    print('19.Tuple Comparison in Tuple')\n    option=int(input('Enter the option number: '))\n    tuple_list=('a','b','c','d','e','f','g','h','i','j')\n    tuple_list_1=('x','y','z','v')\n    if option==1:\n        print(tuple_size(tuple_list))\n    elif option==2:\n        print(tuple_creation_time(tuple_list))\n    elif option==3:\n        membership=str(input('Enter the membership of tuple: '))\n        print(tuples_membership(tuple_list,membership))\n    elif option==4:\n        attr_name=str(input('Enter the attribute name: '))\n        print(tuple_attr_access(tuple_list,attr_name))\n    elif option==5:\n        print(tuple_attributes(tuple_list))\n    elif option==6:\n        print(tuple_manipulation(tuple_list))\n    elif option==7:\n        print(tuple_slicing(tuple_list))\n    elif option==8:\n        membership_list=['a','b','c','d','e','f','g','h','i','j']\n        print(tuples_membership_list(tuple_list,membership_list))\n    elif option==9:\n        attr_name=str(input('Enter the attribute name: '))\n        print(tuple_attr_access_list(tuple_list,attr_name))\n    elif option==10:\n        print(tuple_attributes_list(tuple_list))\n    elif option==11:\n        print(tuple_manipulation_list(tuple_list))\n    elif option==12:\n        print(tuple_slicing_list(tuple_list))\n    elif option="
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sum = 0\n    for i in tuple_list:\n        sum = sum + sys.getsizeof(i)\n    return sum\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    length = 0\n    for i in tuple_list:\n        length += sys.getsizeof(i)\n    return length\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\ndef add(x,y):\n    '''\n    Write a function add(x,y) which returns the sum of x and y.\n    '''\n    return x + y\ndef print_dict(dictionary):\n    '''\n    Write a function print_dict(dictionary) which takes a dictionary and prints it.\n    '''\n    print(dictionary)\ndef contains_key(dictionary, key):\n    '''\n    Write a function contains_key(dictionary, key) which returns True if the dictionary contains the given key and False if it does not.\n    '''\n    return key in dictionary\ndef in_dictionary(dictionary, key):\n    '''\n    Write a function in_dictionary(dictionary, key) which takes a dictionary and a key and returns True if the key is in the dictionary and False if it is not.\n    '''\n    return key in dictionary\ndef get_value(dictionary, key):\n    '''\n    Write a function get_value(dictionary, key) which takes a dictionary and a key and returns the value of the key in the dictionary if the key is in the dictionary and None if it is not.\n    '''\n    return dictionary[key]\ndef get_value_if_key_exists(dictionary, key):\n    '''\n    Write a function get_value_if_key_exists(dictionary, key) which takes a dictionary and a key and returns the value of the key in the dictionary if the key is in the dictionary and None if it is not.\n    '''\n    return dictionary.get(key)\ndef get_value_if_key_exists_else(dictionary, key, value):\n    '''\n    Write a function get_value_if_key_exists_else(dictionary, key, value) which takes a dictionary, a key and a value. If the key is in the dictionary it returns the value of the key. If the key is not in the dictionary it returns the value otherwise.\n    '''\n    return dictionary.get(key,value)\ndef get_value_if_key_exists_else_print(dictionary, key, value):\n    '''\n    Write a function get_value_if_key_exists_else_print(dictionary, key, value) which takes a dictionary, a key and a value. If the key is in the dictionary it prints the value of the key. If the key is not in the dictionary it prints the value otherwise.\n    '''\n    print(dictionary.get(key,value))\ndef get_first_value_if_key_exists(dictionary, key):\n    '''\n    Write a function get_first_value_if_key_exists(dictionary, key) which takes a dictionary and a key and returns the first value of the key in the dictionary if the key is in the dictionary and None if it is not.\n    '''\n    return dictionary.get(key,None)\ndef print_all_values_in_dictionary(dictionary):\n    '''\n    Write a function print_all_values_in_dictionary(dictionary) which takes a dictionary and prints all the values in the dictionary.\n    '''\n    for key in dictionary:\n        print(dictionary[key])\ndef print_all_key_values_in_dictionary(dictionary):\n    '''\n    Write a function print_all_key_values_in_dictionary(dictionary) which takes a dictionary and prints the keys and values in the dictionary.\n    '''\n    for key in dictionary:\n        print(key,dictionary[key])\ndef print_all_key_value_pairs_in_dictionary(dictionary):\n    '''\n    Write a function print_all_key_value_pairs_in_dictionary(dictionary) which takes a dictionary and prints the key-value pairs in the dictionary.\n    '''\n    for key in dictionary:\n        print(key,dictionary[key])\ndef print_all_key_value_pairs_in_dictionary_with_comma_in_between(dictionary):\n    '''\n    Write a function print_all_key_value_pairs_in_dictionary_with_comma_in_between(dictionary) which takes a dictionary and prints the key-value pairs in the dictionary with a comma in between the key and the value.\n    '''\n    for key in dictionary:\n        print(key,\",\",dictionary[key])\ndef get_first_key_if_key_exists(dictionary):\n    '''\n    Write a function get_first_key_if_key_exists(dictionary) which takes a dictionary and returns the first key if the dictionary has at least one key and None if the dictionary does not have at least one key.\n    '''\n    if len(dictionary)>0:\n        return list(dictionary.keys())[0]\n    else:\n        return None\ndef get_first_key_if_key_exists_else(dictionary, key, value):\n    '''\n    Write a function get_first_key_if_key_exists_else(dictionary, key, value) which takes a dictionary, a key and a value and returns the first key if the dictionary has at least one key and None if the dictionary does not have at least one key. It also returns the value otherwise.\n    '''\n    if len(dictionary)>0:\n        return list(dictionary.keys())[0],dictionary.get(key,value)\n    else:\n        return None,value\ndef get_first_key_if_key_exists_else_print(dictionary, key, value):\n    '''\n    Write a function get_first_key_if_key_exists_else_print(dictionary, key, value) which takes a dictionary, a key and a value and returns the first key if the dictionary has at least one key and None if the dictionary does not have at least one key. It also prints the value otherwise.\n    '''\n    if len(dictionary)>0:\n        return list(dictionary.keys())[0],dictionary.get(key,value)\n    else:\n        print(value)\ndef get_keys_of_dictionary(dictionary):\n    '''\n    Write a function get_keys_of_dictionary(dictionary) which takes a dictionary and returns the keys of the dictionary as a list.\n    '''\n    return list(dictionary.keys())\ndef print_all_keys_of_dictionary(dictionary):\n    '''\n    Write a function print_all_keys_of_dictionary(dictionary) which takes a dictionary and prints all the keys of the dictionary.\n    '''\n    for key in dictionary:\n        print(key)\ndef print_all_values_of_dictionary(dictionary):\n    '''\n    Write a function print_all_values_of_dictionary(dictionary) which takes a dictionary and prints all the values of the dictionary.\n    '''\n    for key in dictionary:\n        print(dictionary[key])\ndef print_all_key_value_pairs_of_dictionary(dictionary):\n    '''\n    Write a function print_all_key_value_pairs_of_dictionary(dictionary) which takes a dictionary and prints all the key-value pairs of the dictionary.\n    '''\n    for key in dictionary:\n        print(key,dictionary[key])\ndef print_all_key_value_pairs_of_dictionary_with_comma_in_between(dictionary):\n    '''\n    Write a function print_all_key_value_pairs_of_dictionary_with_comma_in_between(dictionary) which takes a dictionary and prints all the key-value pairs of the dictionary with a comma in between the key and the value.\n    '''\n    for key in dictionary:\n        print(key,\",\",dictionary[key])\ndef get_value_based_on_condition(dictionary,condition):\n    '''\n    Write a function get_value_based_on_condition(dictionary,condition) which takes a dictionary and a condition (a function) and returns a list of values from the dictionary if the condition returns True for the value in the dictionary.\n    '''\n    return [dictionary[key] for key in dictionary if condition(dictionary[key])]\ndef get_value_based_on_condition_else(dictionary,condition,value):\n    '''\n    Write a function get_value_based_on_conditio"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size = size + sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    pass #write the function here\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(k//2, len(arr1))\n    j = min(k//2, len(arr2))\n    if arr1[i-1] < arr2[j-1]:\n        return find_kth(arr1[i:], arr2, k-i)\n    elif arr1[i-1] > arr2[j-1]:\n        return find_kth(arr1, arr2[j:], k-j)\n    else:\n        return arr1[i-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            arr.append(arr1[i])\n            i += 1\n        else:\n            arr.append(arr2[j])\n            j += 1\n    if i < len(arr1):\n        arr.extend(arr1[i:])\n    elif j < len(arr2):\n        arr.extend(arr2[j:])\n    print(arr)\n    return arr[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0 and len(arr2) == 0:\n        return -1\n    elif len(arr1) == 0:\n        return arr2[k]\n    elif len(arr2) == 0:\n        return arr1[k]\n    else:\n        i = len(arr1) // 2\n        j = len(arr2) // 2\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # sort the arrays\n    arr1.sort()\n    arr2.sort()\n    # traverse both arrays and check if the element is greater than the required element\n    for ele in arr1:\n        if ele > arr2[k - 1]:\n            return ele\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 == 0:\n        return arr2[k - 1]\n    if n2 == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    elif len(arr2) == 0:\n        return arr1[k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 and not arr2:\n        return None\n    elif not arr1:\n        return arr2[k]\n    elif not arr2:\n        return arr1[k]\n    # if len(arr1) < k:\n    #     return arr2[k]\n    # if len(arr2) < k:\n    #     return arr1[k]\n    return min(arr1[k-1], arr2[k-1])\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0 or len(arr2) == 0:\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[-1] < arr2[0]:\n        return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    order = len(str(number))\n    copy_num = number\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        print(f'{number} is an armstrong number')\n    else:\n        print(f'{number} is not an armstrong number')\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_string = str(number)\n    digits_sum = 0\n    for digit in number_string:\n        digits_sum += int(digit) ** 3\n    if digits_sum == number:\n        print(f\"{number} is a armstrong number.\")\n    else:\n        print(f\"{number} is not a armstrong number.\")\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    temp = number\n    while temp > 0:\n        remainder = temp % 10\n        total += remainder ** 3\n        temp //= 10\n    if number == total:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # if number is not an integer, it will throw an error\n    if not isinstance(number, int):\n        return False\n    \n    num_list = [int(x) for x in str(number)]\n    total = 0\n    for num in num_list:\n        total += (num**3)\n    if total == number:\n        return True\n    else:\n        return False\n    \n    \ndef main():\n    '''\n    Write a function that returns a list of all armstrong numbers from 1 to 100, inclusive.\n    '''\n    # empty list to store armstrong numbers\n    armstrong_list = []\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length_of_num = len(str(number))\n    new_num = number\n    sum_of_num = 0\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length = len(str(number))\n    sum = 0\n    for i in str(number):\n        sum += int(i) ** length\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_list = list(str(number))\n    n = len(num_list)\n    sum_nums = 0\n    for i in num_list:\n        sum_nums += int(i)**n\n    return sum_nums == number\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # number = int(input(\"Enter the number to check whether it is armstrong or not: \"))\n    length = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n    if sum == number:\n        return \"Yes, {} is armstrong number.\".format(number)\n    else:\n        return \"No, {} is not armstrong number.\".format(number)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while number:\n        count += 1\n        sum += number\n        number -= 1\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number + 1):\n        sum = sum + i\n    average = sum / number\n    return average\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n = (number * (number+1)) / 2\n    average_n = sum_n / number\n    return (sum_n,average_n)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    num = 1\n    total = 0\n    while num <= number:\n        total += num\n        num += 1\n    print('The sum of first {} natural numbers is {}'.format(number, total))\n    print('The average of first {} natural numbers is {}'.format(number, total/number))\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    sum = 0\n    average = 0\n    for i in range(number+1):\n        sum += i\n        average = sum/number\n    print(sum)\n    print(average)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(input(\"Please enter a number: \"))\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    print(\"Sum of first %d natural numbers is %d\" %(n, sum))\n    print(\"Average of first %d natural numbers is %.2f\" %(n, sum/n))\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(number) / len(number)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    print(\"Sum of first {} natural numbers is {}.\".format(number, sum))\n    print(\"Average of first {} natural numbers is {}.\".format(number, sum/number))\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    average = 0\n    for i in range(1, number + 1):\n        total += i\n    average = total / number\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    i = 0\n    while i < number:\n        sum += i\n        avg = sum/i\n        i += 1\n    return sum,avg\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        print(\"The number is Even.\")\n    else :\n        print(\"The number is Odd.\")\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n%2==0) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n%2 == 0) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\nprint(is_Even(3))\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    def first_repeated_char_brute_force(str1):\n        for i in range(len(str1)):\n            for j in range(len(str1)):\n                if i!= j and str1[i] == str1[j]:\n                    return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i + 1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for index, char in enumerate(str1):\n        if str1.count(char) == 2:\n            return index, char\n    return 'No repeated character'\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d={}\n    for i in str1:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    lst = list(str1)\n    print(lst)\n    count = 0\n    for i in lst:\n        if lst.count(i)>1:\n            count+=1\n            break\n    if count == 1:\n        return \"first repeated char is {}\".format(i)\n    else:\n        return \"No repeating character in the given string\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1={}\n    for char in str1:\n        if char in dict1:\n            return char\n        else:\n            dict1[char]=1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for ch in str1:\n        if str1.count(ch) > 1:\n            return ch\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str2 = list(str1)\n    for i in range(0,len(str2)):\n        for j in range(0,len(str2)):\n            if str2[i] == str2[j] and i!= j:\n                print(\"The first repeated character is \",str2[i])\n                return\n    print(\"There are no repeating characters in the string\")\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen_letters = {}\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    #idea: starting from an example 1, check for the next lucidity.\n    #if it is a lucidity, add it to lucidity list\n    #if it isnt a lucidity, check if the current number is a lucidity\n    #if it is, add it to the lucidity list.\n    #after that, check if the current number is a lucidity\n    #if it is a lucidity, add it to the lucidity list\n    #if it isnt a lucidity, return the lucidity list\n    #return the lucidity list\n    #time complexity: O(n)\n    #space complexity: O(1)\n    if n == 0:\n        return []\n    else:\n        ludic = [1]\n        for i in range(n-1):\n            if not(ludic[-1] == 2*ludic[-1]):\n                ludic.append(ludic[-1] * 2)\n            else:\n                if i == n-2:\n                    ludic.append(ludic[-1] * 2)\n                else:\n                    if not(ludic[-1] == ludic[-1] * 2):\n                        ludic.append(ludic[-1] * 2)\n                    else:\n                        return ludic\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def get_ludic_helper(n, s):\n        if n == 0:\n            if s not in ludic:\n                ludic.append(s)\n        elif n == 1:\n            for i in range(s, 10):\n                get_ludic_helper(n, i)\n        else:\n            for i in range(s, 10):\n                get_ludic_helper(n-1, i)\n    ludic = []\n    for i in range(10):\n        get_ludic_helper(n, i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if i == sum([int(d) ** len(str(i)) for d in str(i)]):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # initialize an empty list\n    ludic = []\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # function which prints all numbers below limit that are perfect squares\n    def get_perfect_squares(n):\n        # get all perfect squares below n\n        sqrt_n = int(n ** 0.5)\n        # loop through all numbers between 1 and sqrt_n\n        for i in range(1, sqrt_n + 1):\n            # if the number is a perfect square, print it\n            if i ** 2 == n:\n                print(i)\n        # if the sqrt_n isn't a perfect square, print it and print sqrt_n\n        if sqrt_n ** 2!= n:\n            print(sqrt_n)\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    else:\n        ludic = []\n        for i in range(1, n):\n            if i + sum([int(j)**2 for j in str(i)]) == n:\n                ludic.append(i)\n        return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1, n) if is_ludic(i)]\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    def is_ludic(n):\n        '''\n        Use is_divisble_by_base_numbers to check if n is a lucid number.\n        '''\n        is_ludic = is_divisble_by_base_numbers(n)\n        \n        return is_ludic\n    \n    \n    def get_ludic_sequence(n, base_numbers):\n        '''\n        Get all base_numbers <= n and return the longest sequence.\n        '''\n        if n in base_numbers:\n            return str(n)\n        \n        elif n < max(base_numbers):\n            for base_number in base_numbers:\n                if n < base_number:\n                    return str(base_number) + get_ludic_sequence(n, base_numbers)\n        \n        else:\n            return False\n    \n    \n    base_numbers = [1]\n    \n    if n == 1:\n        return '1'\n    \n    elif n == 2:\n        return '2'\n    \n    else:\n        return get_ludic_sequence(n, base_numbers)\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_ludic(num):\n        '''\n        Write a function to check if a number is a lucid number.\n        '''\n        return sum([int(i) for i in str(num)])**2 == num\n    return [num for num in range(1, n) if is_ludic(num)]\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split(' ')\n    # reverse the list\n    words.reverse()\n    # put them back together and return the string\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    s =''.join(s)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0:\n        return s\n    else:\n        # split the string into an array of strings\n        word_list = s.split(\" \")\n        # reverse the array\n        word_list.reverse()\n        # join the array of strings\n        reversed_string = \" \".join(word_list)\n        # return the reversed string\n        return reversed_string\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n    \nassert reverse_words(\"the sky is blue\") == \"blue is sky the\"\nassert reverse_words(\"  hello world!  \") == \"world! hello\"\nassert reverse_words(\"a good   example\") == \"example good a\"\nassert reverse_words(\"double  spaces\") == \"spaces double\"\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = []\n    i = 0\n    while i < len(s):\n        if s[i] =='':\n            words.append(s[i+1:i+1+len(words[-1])][::-1])\n            i += len(words[-1])+1\n        else:\n            i += 1\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s: return s\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    start, end = 0, len(s) - 1\n    while start < end and s[start] =='':\n        start += 1\n    while start < end and s[end] =='':\n        end -= 1\n    return''.join(reversed(s[start:end+1].split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reverse = []\n    for i in range(len(words)):\n        reverse.append(words[i][::-1])\n    return''.join(reverse)"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num>=2:\n        for i in range(2, num//2):\n            if num%i==0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n    \ndef is_perm(s1,s2):\n    '''\n    Write a function to check if one string is a permutation of the other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1 = ''.join(sorted(s1))\n    s2 = ''.join(sorted(s2))\n    return s1 == s2\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    return s == s[::-1]\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                print(i, \"times\", num//i, \"is\", num)\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, int(num)):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                break\n        else:\n            print(num, \"is a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                print(i, \"times\", num//i, \"is\", num)\n                break\n        else:\n            print(num, \"is a prime number\")\n    \n    else:\n        print(num, \"is not a prime number\")\n    \n    \nprime_num(91)\nprime_num(2)\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    flag = 0\n    if num < 2:\n        flag = 1\n    else:\n        for i in range(2,int(math.sqrt(num))+1):\n            if num%i == 0:\n                flag = 1\n                break\n    return flag\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree * math.pi) / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/57.3\ndef radian_degree_2(degree,angle):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree/angle)\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return (radian*57.3)\ndef degree_radian_2(radian,angle):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return (radian*angle)\ndef seconds_to_time(seconds):\n    '''\n    Write a function to convert seconds to hours, minutes, and seconds.\n    '''\n    hour=seconds/3600\n    minute=seconds/60\n    seconds=seconds-(hour*3600)\n    return (hour,minute,seconds)\ndef time_to_seconds(hours,minutes,seconds):\n    '''\n    Write a function to convert hours, minutes, and seconds to seconds.\n    '''\n    return ((hours*60*60)+(minutes*60)+seconds)\ndef time_to_degree_minute(time):\n    '''\n    Write a function to convert time to degree minutes.\n    '''\n    hour=time/3600\n    minutes=(time/60)-(hour*60)\n    return (hour,minutes)\ndef degree_minute_to_time(degree,minute):\n    '''\n    Write a function to convert degree minutes to time.\n    '''\n    hour=degree/60\n    minutes=minute+hour*60\n    return (hour,minutes)\ndef time_to_degree_minute(time):\n    '''\n    Write a function to convert time to degree minutes.\n    '''\n    hour=time/3600\n    minutes=(time/60)-(hour*60)\n    return (hour,minutes)\ndef time_to_degree_minute_2(hours,minutes):\n    '''\n    Write a function to convert time to degree minutes.\n    '''\n    return (hours*60)+(minutes/60)\ndef degree_minute_to_time_2(degree,minutes):\n    '''\n    Write a function to convert degree minutes to time.\n    '''\n    return (degree/60)+(minutes/60)\ndef minute_to_seconds(minutes):\n    '''\n    Write a function to convert minutes to seconds.\n    '''\n    return minutes*60\ndef seconds_to_minute(seconds):\n    '''\n    Write a function to convert seconds to minutes.\n    '''\n    return (seconds/60)\ndef seconds_to_hour(seconds):\n    '''\n    Write a function to convert seconds to hours.\n    '''\n    return (seconds/3600)\ndef hour_to_seconds(hours):\n    '''\n    Write a function to convert hours to seconds.\n    '''\n    return (hours*3600)\ndef year_to_days(years):\n    '''\n    Write a function to convert years to days.\n    '''\n    return years*365\ndef days_to_year(days):\n    '''\n    Write a function to convert days to years.\n    '''\n    return (days/365)\ndef days_to_seconds(days):\n    '''\n    Write a function to convert days to seconds.\n    '''\n    return (days*24*3600)\ndef days_to_hours(days):\n    '''\n    Write a function to convert days to hours.\n    '''\n    return (days*24)\ndef hours_to_days(hours):\n    '''\n    Write a function to convert hours to days.\n    '''\n    return (hours/24)\ndef seconds_to_days(seconds):\n    '''\n    Write a function to convert seconds to days.\n    '''\n    return (seconds/24/3600)\ndef minutes_to_days(minutes):\n    '''\n    Write a function to convert minutes to days.\n    '''\n    return (minutes/24/60)\ndef hours_to_minutes(hours):\n    '''\n    Write a function to convert hours to minutes.\n    '''\n    return (hours*60)\ndef minutes_to_hours(minutes):\n    '''\n    Write a function to convert minutes to hours.\n    '''\n    return (minutes/60)\ndef hours_to_seconds(hours):\n    '''\n    Write a function to convert hours to seconds.\n    '''\n    return (hours*3600)\ndef seconds_to_hours(seconds):\n    '''\n    Write a function to convert seconds to hours.\n    '''\n    return (seconds/3600)\ndef second_to_hour(second):\n    '''\n    Write a function to convert seconds to hours.\n    '''\n    return (second/3600)\ndef hours_to_second(hour):\n    '''\n    Write a function to convert hours to seconds.\n    '''\n    return (hour*3600)\ndef second_to_minute(second):\n    '''\n    Write a function to convert seconds to minutes.\n    '''\n    return (second/60)\ndef second_to_hour(second):\n    '''\n    Write a function to convert seconds to hours.\n    '''\n    return (second/3600)\ndef second_to_day(second):\n    '''\n    Write a function to convert seconds to days.\n    '''\n    return (second/24/3600)\ndef second_to_years(second):\n    '''\n    Write a function to convert seconds to years.\n    '''\n    return (second/3600/24/365)\ndef second_to_years_2(second):\n    '''\n    Write a function to convert seconds to years.\n    '''\n    return (second/3600/24/365)\ndef second_to_years_3(second):\n    '''\n    Write a function to convert seconds to years.\n    '''\n    return (second/3600/24/365)\ndef year_to_second(year):\n    '''\n    Write a function to convert seconds to years.\n    '''\n    return (year*3600*24*365)\ndef year_to_day(year):\n    '''\n    Write a function to convert years to days.\n    '''\n    return (year*365)\ndef year_to_minute(year):\n    '''\n    Write a function to convert years to minutes.\n    '''\n    return (year*365*24*60)\ndef year_to_hour(year):\n    '''\n    Write a function to convert years to hours.\n    '''\n    return (year*365*24)\ndef hour_to_year(hour):\n    '''\n    Write a function to convert hours to years.\n    '''\n    return (hour/365/24)\ndef hour_to_day(hour):\n    '''\n    Write a function to convert hours to days.\n    '''\n    return (hour/24)\ndef hour_to_minute(hour):\n    '''\n    Write a function to convert hours to minutes.\n    '''\n    return (hour*60)\ndef minute_to_year(minute):\n    '''\n    Write a function to convert minutes to years.\n    '''\n    return (minute/365/24/60)\ndef minute_to_day(minute):\n    '''\n    Write a function to convert minutes to days.\n    '''\n    return (minute/24/60)\ndef minute_to_hour(minute):\n    '''\n    Write a function to convert minutes to hours.\n    '''\n    return (minute/60)\ndef minute_to_second(minute):\n    '''\n    Write a function to convert minutes to seconds.\n    '''\n    return (minute*60)\ndef minute_to_year(minute):\n    '''\n    Write a function to convert minutes to years.\n    '''\n    return (minute/365/24/60)\ndef minute_to_day(minute):\n    '''\n    Write a function to convert minutes to days.\n    '''\n    return (minute/24/60)\ndef minute_to_hour(minute):\n    '''\n    Write a function to convert minutes to hours.\n    '''\n    return (minute/60)\ndef second_to_minute(second):\n    '''\n    Write a function to convert seconds to minutes.\n    '''\n    return (second/6"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree/180)*math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    print(\"Given degree is: \", degree)\n    print(\"Conversion in radian: \", math.radians(degree))\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef is_multiple(n, m):\n    '''\n    Write a function to check if the number n is a multiple of the number m.\n    '''\n    return n%m==0\ndef write_line(file, line, end=\"\\n\"):\n    '''\n    Write a line in the file.\n    '''\n    file.write(str(line)+end)\ndef write_text(file, text):\n    '''\n    Write a text in the file.\n    '''\n    file.write(text)\ndef write_matrix(file, matrix):\n    '''\n    Write a matrix in the file.\n    '''\n    for line in matrix:\n        file.write(str(line)+\"\\n\")\ndef read_line(file):\n    '''\n    Read a line in the file.\n    '''\n    return file.readline()\ndef read_text(file):\n    '''\n    Read a text in the file.\n    '''\n    return file.read()\ndef read_matrix(file):\n    '''\n    Read a matrix in the file.\n    '''\n    matrix=[]\n    line=read_line(file)\n    while line!=\"\":\n        matrix.append([float(x) for x in line.split(\" \")])\n        line=read_line(file)\n    return matrix\ndef reverse_matrix(matrix):\n    '''\n    Write a function to reverse a matrix.\n    '''\n    return matrix[::-1]\ndef transpose_matrix(matrix):\n    '''\n    Write a function to transpose a matrix.\n    '''\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\ndef row_multiply(matrix, row, m):\n    '''\n    Write a function to multiply row of a matrix by a number.\n    '''\n    return [matrix[i][row]*m for i in range(len(matrix))]\ndef row_subtract(matrix, row_a, row_b):\n    '''\n    Write a function to subtract row_a from row_b.\n    '''\n    return [matrix[row_a][i]-matrix[row_b][i] for i in range(len(matrix))]\ndef col_add(matrix, column_a, column_b):\n    '''\n    Write a function to add a column to another column.\n    '''\n    return [matrix[i][column_a]+matrix[i][column_b] for i in range(len(matrix))]\ndef col_multiply(matrix, column, m):\n    '''\n    Write a function to multiply a column of a matrix by a number.\n    '''\n    return [matrix[i][column]*m for i in range(len(matrix))]\ndef get_column(matrix, column):\n    '''\n    Get the column of a matrix.\n    '''\n    return [matrix[i][column] for i in range(len(matrix))]\ndef get_row(matrix, row):\n    '''\n    Get the row of a matrix.\n    '''\n    return matrix[row]\ndef swap_rows(matrix, row_a, row_b):\n    '''\n    Write a function to swap two rows in a matrix.\n    '''\n    matrix[row_a], matrix[row_b]=matrix[row_b], matrix[row_a]\n    return matrix\ndef swap_cols(matrix, column_a, column_b):\n    '''\n    Write a function to swap two columns in a matrix.\n    '''\n    for i in range(len(matrix)):\n        matrix[i][column_a], matrix[i][column_b]=matrix[i][column_b], matrix[i][column_a]\n    return matrix\ndef get_minor(matrix, row, col):\n    '''\n    Get the minor of a matrix.\n    '''\n    return [row_subtract(matrix, row, col) for row in range(len(matrix))]\ndef get_cofactor(matrix, row, col):\n    '''\n    Get the cofactor of a matrix.\n    '''\n    return (-1)**(row+col)*get_minor(matrix, row, col)[::-1]\ndef get_determinant(matrix):\n    '''\n    Get the determinant of a matrix.\n    '''\n    if len(matrix)==1:\n        return matrix[0][0]\n    elif len(matrix)==2:\n        return matrix[0][0]*matrix[1][1]-matrix[0][1]*matrix[1][0]\n    else:\n        return sum([matrix[0][i]*get_cofactor(matrix, 0, i)*get_determinant(get_minor(matrix, 0, i)) for i in range(len(matrix))])\ndef get_adjoint(matrix):\n    '''\n    Get the adjoint of a matrix.\n    '''\n    return [[get_cofactor(matrix, i, j) for j in range(len(matrix))] for i in range(len(matrix))]\ndef get_transpose(matrix):\n    '''\n    Get the transpose of a matrix.\n    '''\n    return transpose_matrix(matrix)\ndef get_inverse(matrix):\n    '''\n    Get the inverse of a matrix.\n    '''\n    return [[get_cofactor(matrix, i, j)/get_determinant(matrix) for j in range(len(matrix))] for i in range(len(matrix))]\ndef get_matrix_inverse(matrix):\n    '''\n    Get the matrix inverse of a matrix.\n    '''\n    return reverse_matrix(get_inverse(matrix))\ndef matrix_multiply(matrix_a, matrix_b):\n    '''\n    Write a function to multiply two matrices.\n    '''\n    return [[sum([matrix_a[i][k]*matrix_b[k][j] for k in range(len(matrix_b))]) for j in range(len(matrix_b[0]))] for i in range(len(matrix_a))]\ndef get_coefficient(matrix, index):\n    '''\n    Get the coefficient of a matrix.\n    '''\n    return matrix[0][index]\ndef get_equation(matrix, variable):\n    '''\n    Get the equation of a matrix.\n    '''\n    return \"=\".join([str(get_coefficient(matrix, i))+variable+str(i+1) for i in range(len(matrix[0]))])\ndef get_linear_combination(matrix, constant, variables):\n    '''\n    Get the linear combination of a matrix.\n    '''\n    return \" + \".join([str(constant)+variable+str(i+1) for i in range(len(matrix[0]))])\ndef remove_row(matrix, row):\n    '''\n    Remove a row from a matrix.\n    '''\n    return [row_subtract(matrix, row, i) for i in range(len(matrix))]\ndef remove_col(matrix, column):\n    '''\n    Remove a column from a matrix.\n    '''\n    return [col_subtract(matrix, column, i) for i in range(len(matrix))]\ndef transform_matrix(matrix, operator):\n    '''\n    Transform a matrix by a given operator.\n    '''\n    if operator==\"row_swap\":\n        return swap_rows(matrix, int(read_line(file)), int(read_line(file)))\n    elif operator==\"col_swap\":\n        return swap_cols(matrix, int(read_line(file)), int(read_line(file)))\n    elif operator==\"row_add\":\n        return add_row(matrix, int(read_line(file)), int(read_line(file)))\n    elif operator==\"col_add\":\n        return add_col(matrix, int(read_line(file))"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\ndef radian_degree_test(degree):\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0], re.search(pattern, text).start(), re.search(pattern, text).end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    substring = re.search(pattern, text).group(0)\n    start = re.search(pattern, text).span(0)[0]\n    end = re.search(pattern, text).span(0)[1]\n    return substring, start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    matches = re.findall(pattern, text)\n    \n    if len(matches) > 0:\n        start_index = text.index(matches[0])\n        end_index = start_index + len(matches[0])\n        return matches[0], start_index, end_index\n    return None\n    \n    \n    \ndef replace_in_text(text, start_index, end_index, replacement):\n    '''\n    Write a function to replace a substring in a string.\n    '''\n    \n    return text[:start_index] + replacement + text[end_index:]\n    \n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return text[start:end], start, end\n    return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    assert type(text) == str\n    assert type(pattern) == str\n    assert len(pattern) > 0\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # return re.search(pattern, text).group(0)\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(match)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    start = text.index(matches[0])\n    end = start + len(matches[0])\n    return matches[0], start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = r\"\\b\" + pattern + r\"\\b\"\n    m = re.search(pattern, text)\n    if m:\n        return m.group()\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    return result.group(), result.start(), result.end()\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Bell number is sum of factorials.\n    if n == 0:\n        return 1\n    else:\n        return n*bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell=1\n    for i in range(1,n+1):\n        bell=bell*i\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0] \n    bell[0] = 1\n    for i in range(n): \n        bell.append(bell[i] + bell[i+1]) \n    return bell[n] \n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bells = [1]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    bell_list = [1, 2] \n    for i in range(2, n): \n        bell_list.append(bell_list[i-1] + bell_list[i-2]) \n    return bell_list[n-1] \n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0,1,1]\n    for i in range(2,n+1):\n        bell.append(bell[i-1]+bell[i-2])\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = 0\n    for i in range(n):\n        bell_num += bell(i)\n    return bell_num\n    \ndef bell(n):\n    '''\n    Write a python function to find bell(n) using itertools.\n    '''\n    if n == 0:\n        return 1\n    else:\n        if n == 1:\n            return 2\n        else:\n            return bell(n-1) + bell(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[1,1]]\n    for i in range(1,n):\n        bell.append([bell[i-1][0]+bell[i-1][1],bell[i-1][0]])\n    return bell[n-1][0]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[0 for x in range(n+1)] for y in range(n+1)] \n    bell[0] = [1]\n    bell[1] = [1, 1]\n    for i in range(2, n+1): \n        bell[i][0] = bell[i-1][i-1] \n        for j in range(1, i): \n            bell[i][j] = bell[i-1][j-1] + bell[i-1][j] \n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0,1]\n    for i in range(2, n+1):\n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    del list1[L]\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L):\n        list1.pop(0)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    list2 = [None]*n\n    i = 0\n    for j in range(0,n):\n        if j!= L:\n            list2[i] = list1[j]\n            i += 1\n    return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    length = len(list1)\n    for i in range(0, length-L+1):\n        list1.remove(list1[i])\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) > 0:\n        if L <= len(list1):\n            return list1[:L-1] + list1[L:]\n        else:\n            return list1[:-1]\n    else:\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 0:\n        return []\n    if len(list1) == 0:\n        return []\n    else:\n        return list1[0:L-1] + list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for x in list1:\n        if list1.index(x)!= L:\n            list2.append(x)\n    return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for x in range(0, len(list1)):\n        if x!= L:\n            new_list.append(list1[x])\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(k):\n        list1.pop(L-1)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    length_list = len(list1)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([test_list[n][n] for n in range(len(test_list))])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(row[N] for row in test_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[i][N] for i in range(len(test_list)))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_nth_value = test_list[0][N]\n    for i in range(0, len(test_list)):\n        if test_list[i][N] > max_of_nth_value:\n            max_of_nth_value = test_list[i][N]\n    return max_of_nth_value\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if test_list == []:\n        return 0\n    elif len(test_list) < N:\n        return 0\n    else:\n        max_number = max_of_nth_aux(test_list, N)\n        return max_number\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    return max(map(lambda row: row[N], test_list))\n    \ndef zip_longest(*args, fillvalue=None):\n    '''\n    Given an arbitrary number of iterables, returns an iterator of tuples, with each tuple having the same length.\n    If one iterable is longer than the others, then the tuples are padded with the value specified in fillvalue.\n    '''\n    return zip_longest(*args, fillvalue=None)\n    \ndef cycle(iterable):\n    '''\n    returns an iterator which is advanced by each call to next until it reaches the end of iterable.\n    '''\n    return cycle(iterable)\n    \ndef repeat(object, times):\n    '''\n    returns an iterator which returns the object argument the number of times specified by the optional times argument.\n    '''\n    return repeat(object, times)\n    \ndef lstrip(iterable, chars):\n    '''\n    returns a copy of the string with leading characters removed.\n    '''\n    return lstrip(iterable, chars)\n    \ndef uniq(iterable, key=None):\n    '''\n    returns the unique elements in the given iterable, omitting duplicates.\n    \n    uniq(s) -> list\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N >= len(test_list[0]):\n        return None\n    return max([i[N] for i in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_nth_col = [max(row[N]) for row in test_list]\n    return max_nth_col\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max( [ x[ N - 1 ] for x in test_list ] )\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([test_list[i][N] for i in range(len(test_list))])\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[i[0] for i in lst],[i[1] for i in lst]]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 0], [9, 10]]\n    lst1 = []\n    lst2 = []\n    for i in lst:\n        lst1.append(i[0])\n        lst2.append(i[1])\n    return [lst1, lst2]\nmerge([[1, 2], [3, 4], [5, 6], [7, 8], [9, 0], [9, 10]])\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    first_list = []\n    second_list = []\n    \n    for lists in lst:\n        first_list.append(lists[0])\n        second_list.append(lists[1])\n        \n    return [first_list, second_list]\n    \n    \ndef dice_roll(n_faces, n_rolls):  \n    '''\n    Write a function which takes 2 arguments - number of faces and number of rolls. It should return the average of the result of n_rolls rolls of a die with n_faces sides.\n    '''\n    \n    from random import randint\n    \n    result = []\n    \n    for rolls in range(n_rolls):\n        result.append(randint(1, n_faces))\n    \n    return sum(result) / len(result)\n        \n    \ndef product_of_odds(n_numbers, product=1):\n    '''\n    Write a function which takes two arguments - number of numbers and a number to multiply. The function should return the product of all numbers which are not multiples of 7 between the number 1 and n_numbers (both included).\n    '''\n    \n    from math import floor\n    \n    for number in range(1, n_numbers + 1):\n        if not (floor(number / 7)) % 2:\n            product = product * number\n    \n    return product\n    \n    \ndef find_duplicates(n_numbers, list_of_numbers):\n    '''\n    Write a function which takes two arguments - number of numbers and a list of numbers. It should return a list of lists, where each list has two elements - the first one is the number itself, the second one is the number of occurences of the number in the list of numbers.\n    '''\n    \n    result = []\n    \n    for number in list_of_numbers:\n        count = 0\n        \n        for number_counter in list_of_numbers:\n            if number == number_counter:\n                count = count + 1\n                \n        result.append([number, count])\n        \n    return result\n    \n    \ndef print_list_in_groups(n_groups, list_of_numbers):\n    '''\n    Write a function which takes two arguments - number of groups and a list of numbers. Prints the list of numbers in groups of n_groups.\n    '''\n    \n    from math import floor\n    \n    n_numbers = len(list_of_numbers)\n    \n    for group in range(n_groups):\n        if group == 0:\n            n_elements = n_numbers\n        else:\n            n_elements = n_numbers // n_groups\n        \n        print(list_of_numbers[floor(group * n_elements):floor(group * n_elements + n_elements)])\n        \n        \ndef make_pairs(n_pairs, list_of_numbers):\n    '''\n    Write a function which takes two arguments - number of pairs and a list of numbers. It should return a list of lists, where each list has two elements - first element is the value of the index-th number of the list and the second one is the value of the index-th number of the list which is greater than the number at the index-th position.\n    '''\n    \n    result = []\n    \n    for pair in range(n_pairs):\n        for number in list_of_numbers:\n            index = list_of_numbers.index(number)\n            \n            if number > list_of_numbers[index] and pair % 2:\n                result.append([number, list_of_numbers[index]])\n                break\n            elif number < list_of_numbers[index] and not pair % 2:\n                result.append([number, list_of_numbers[index]])\n                break\n                \n    return result\n    \n    \ndef find_average(n_students, list_of_numbers):\n    '''\n    Write a function which takes two arguments - number of students and a list of integers. For each student print the number of his marks. Calculate the average mark for the student.\n    '''\n    \n    result = []\n    \n    for student in range(n_students):\n        print(student + 1, \"students: \", end='')\n        \n        for number in list_of_numbers:\n            print(number, end=\" \")\n            \n        print()\n        \n        marks_sum = 0\n        \n        for mark in list_of_numbers:\n            marks_sum = marks_sum + mark\n        \n        result.append(marks_sum / len(list_of_numbers))\n    \n    return result\n    \n    \ndef find_average_dict(n_students, list_of_numbers):\n    '''\n    Write a function which takes two arguments - number of students and a list of integers. For each student print the number of his marks. Calculate the average mark for the student. The function should return a dictionary where the keys are the names of the students and the values are their average marks.\n    '''\n    \n    result = {}\n    \n    for student in range(n_students):\n        print(student + 1, \"students: \", end='')\n        \n        for number in list_of_numbers:\n            print(number, end=\" \")\n            \n        print()\n        \n        marks_sum = 0\n        \n        for mark in list_of_numbers:\n            marks_sum = marks_sum + mark\n        \n        result[student + 1] = marks_sum / len(list_of_numbers)\n        \n    return result\n    \n    \ndef find_average_with_dict(n_students, list_of_numbers):\n    '''\n    Write a function which takes two arguments - number of students and a list of integers. For each student print the number of his marks. Calculate the average mark for the student. The function should return a dictionary where the keys are the names of the students and the values are their average marks.\n    '''\n    \n    result = {}\n    \n    for student in range(n_students):\n        print(student + 1, \"students: \", end='')\n        \n        for number in list_of_numbers:\n            print(number, end=\" \")\n            \n        print()\n        \n        marks_sum = 0\n        \n        for mark in list_of_numbers:\n            marks_sum = marks_sum + mark\n        \n        result[student + 1] = marks_sum / len(list_of_numbers)\n        \n    return result\n    \n    \ndef find_average_with_dict_while(n_students, list_of_numbers):\n    '''\n    Write a function which takes two arguments - number of students and a list of integers. For each student print the number of his marks. Calculate the average mark for the student. The function should return a dictionary where the keys are the names of the students and the values are their average marks.\n    '''\n    \n    result = {}\n    \n    student = 0\n    \n    while student < n_students:\n        print(student + 1, \"students: \", end='')\n        \n        for number in list_of_numbers:\n            print(number, end=\" \")\n            \n        print()\n        \n        marks_sum = 0\n        \n        for mark in list_of_numbers:\n            marks_sum = marks_sum + mark\n        \n        result[student + 1] = marks_sum / len(list_of_numbers)\n        \n        student = student + 1\n        \n    return result\n    \n    \ndef find_average_with_dict_while_other(n_students, list_of_numbers):\n    '''\n    Write a function which takes two arguments - number of students and a list of integers. For each student print the number of his marks. Calculate the average mark for the student. The function should return a dictionary where the keys are the names of the students and the values are their average marks.\n    '''\n    \n    result = {}\n    \n    student = 0\n    \n    while student < n_students:\n        print(student + 1, \"students: \", end='')\n        \n        for number in list_of_numbers:\n            print(number, end=\" \")\n            \n        print()\n        \n        mark"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    a = []\n    for i in range(len(lst)):\n        a.append(lst[i][0])\n        a.append(lst[i][1])\n    return a\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [x[0] for x in lst],[x[1] for x in lst]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[i][0] for i in range(len(lst))],[lst[i][1] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return lst[0]+lst[1]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [lst[0][0],lst[1][0]]\n    result.sort()\n    result = [result,lst[0][1],lst[1][1]]\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for i in lst:\n        new_list.append([i[0], i[1]])\n    return new_list\nprint(merge([[1, 2], [2, 3], [4, 5]]))\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[j[0] for j in lst], [j[1] for j in lst]]\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    def append(x,y):\n        return x+y\n    return reduce(append,test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum+=num\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # write a function to find the cummulative sum of all the values that are present in the given tuple list.\n    # you have to write the function without using the built in map() function.\n    # HINT: The sum of cummulative values of all the elements in the list is the sum of first n elements.\n    # test_list = [1,2,3,4,5]\n    # cummulative_sum(test_list) ---> 15\n    # test_list = [6,7,8,9,10]\n    # cummulative_sum(test_list) ---> 43\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for i in range(len(test_list)):\n        result += test_list[i]\n        print(result)\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # print(sum(test_list))\n    # return sum(test_list)\n    result=0\n    for num in test_list:\n        result+=num\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum=0\n    for i in test_list:\n        sum +=i\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    count = 0\n    for x in test_list:\n        count = count + x\n    return count\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list = []\n    count = 0\n    for i in test_list:\n        count += i\n        new_list.append(count)\n    return new_list\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    my_list = [sum(item) / len(item) for item in nums]\n    return my_list\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(nums[i][j] for i in range(len(nums)))/len(nums) for j in range(len(nums[0]))]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    total = 0\n    for tup in nums:\n        total += sum(tup)\n    result.append(total/len(nums))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # your code here\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    for x in nums:\n        total = x[0] + x[1]\n    average = total / len(nums)\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        average = sum(i) / len(i)\n        averages.append(average)\n    return averages\n    \ndef average_tuple_2(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # return [sum(i) / len(i) for i in nums]\n    return list(map(lambda x : sum(x)/len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [round(sum(t)/len(t), 2) for t in nums]\n    \ndef is_prime(n):\n    '''\n    Write a function which takes a single integer and returns true or false depending on if the integer is a prime number.\n    '''\n    if n == 2:\n        return True\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef divisors(n):\n    '''\n    Write a function which takes a single integer and returns an array of all of the integer's divisors (except for 1 and the number itself).\n    '''\n    if n == 1:\n        return []\n    divs = []\n    for i in range(1, n):\n        if n%i == 0:\n            divs.append(i)\n    return divs\n    \ndef is_palindrome(s):\n    '''\n    Write a function which takes a string and returns true or false depending on if the string is a palindrome.\n    '''\n    s = s.lower()\n    return s == s[::-1]\n    \ndef fibonacci(n):\n    '''\n    Write a function which takes a single integer n and returns the nth Fibonacci number.\n    '''\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n    \ndef pow(base, exp):\n    '''\n    Write a function which takes a base number and an exponent and returns the result of the base number to the power of the exponent.\n    '''\n    if exp == 1:\n        return base\n    if exp == 0:\n        return 1\n    return base * pow(base, exp - 1)\n    \ndef factorial(n):\n    '''\n    Write a function which takes a single integer n and returns the factorial of n (i.e. the product of all numbers between 1 and n, inclusive).\n    '''\n    if n <= 1:\n        return 1\n    return n * factorial(n-1)\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Your code here\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_tuple = []\n    for n in range(len(nums)):\n        avg_tuple.append(sum(nums[n]) / len(nums[n]))\n    return avg_tuple\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: sum(x) / len(x), zip(*nums)))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return (test_tup1[0]%test_tup2[0], test_tup1[1]%test_tup2[1], test_tup1[2]%test_tup2[2])\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Invalid Tuple\"\n    return tuple([i%j for i,j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([modulo(test_tup1[i], test_tup2[i]) for i in range(len(test_tup1))])\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([x%y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #make sure inputs are tuples\n    if not isinstance(test_tup1, tuple):\n        raise TypeError('input must be of type tuple')\n    if not isinstance(test_tup2, tuple):\n        raise TypeError('input must be of type tuple')\n    #make sure input lengths are the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('input lengths must be the same')\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for index in range(0, len(test_tup1)):\n        result = result + ((test_tup1[index] % test_tup2[index]), )\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    else:\n        print(\"\\n\\nInput tuples are not of the same length.\")\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda tup1, tup2: modulo(tup1,tup2), test_tup1, test_tup2))\n    \ndef dict_modulo(test_dict1, test_dict2):\n    '''\n    Write a function which takes two dicts, whose keys and values are the same, and returns a new dict\n    with the same keys and values but whose values are the element wise modulo.\n    '''\n    return dict(map(lambda key, val: (key, modulo(val,test_dict2[key])), test_dict1, test_dict2))\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if(d == 0):\n        return(0)\n    if(d > steps):\n        return(float('inf'))\n    if(steps < 0):\n        return(float('inf'))\n    if(d == 1):\n        return(steps)\n    \n    # dp[i] is the minimum number of jumps required to reach d=i from origin\n    dp = [float('inf') for i in range(d+1)]\n    dp[0] = 0\n    dp[1] = steps\n    dp[2] = steps + 1\n    \n    for i in range(3, d+1):\n        # Finds the minimum number of jumps to reach d=i from origin\n        # Pivot is i-1\n        for pivot in range(1, i):\n            if(pivot + steps < i):\n                dp[i] = min(dp[i], 1 + dp[pivot] + dp[i-pivot])\n    \n    return(dp[d])\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    for i in range(steps+1):\n        if i%d == 0 or i%(d-1) == 0:\n            count += 1\n            print(i)\n    print(count)\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    import math\n    return math.ceil(math.sqrt(steps**2+d**2)/d)\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    for step in steps:\n        count += 1 if step % d == 0 else 0\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_pos = [0, 0]\n    for i in range(len(steps)):\n        current_pos[0] += steps[i][0]\n        current_pos[1] += steps[i][1]\n        if current_pos[0] == d or current_pos[1] == 0:\n            break\n        jumps += 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (steps == 1):\n        return 0\n    if (d == 0):\n        return 1\n    jumps = 0\n    for i in range(1, steps):\n        if (d - i >= 0):\n            jumps += min_Jumps(steps - i, d - i)\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    i = 0\n    jumps = 0\n    while i < n:\n        print(i, d)\n        if d == 0 and steps[i] == 0:\n            jumps += 1\n            break\n        if i + steps[i] >= n or steps[i] > d:\n            break\n        i = i + steps[i]\n        jumps += 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0 or steps == 1:\n        return 0\n    if d == 0:\n        return 1\n    if steps < d:\n        return -1\n    else:\n        return min(min_Jumps(steps - d, d) + 1,\n                    min_Jumps(steps - d, d - 1) + 1)\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: return 0\n    if d < 0: return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    cur_pos = 0\n    \n    for i in range(0, steps, d):\n        if i + d < steps:\n            cur_pos = i + d\n        else:\n            cur_pos = steps - 1\n        if cur_pos == 0:\n            return jumps + 1\n        jumps += 1\n    \n    return jumps\n    \nif __name__ == \"__main__\":\n    steps = 10\n    d = 2\n    print(min_Jumps(steps, d))\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert len(nums1) == len(nums2), \"Lists must be the same length\"\n    quotient = []\n    for i in range(len(nums1)):\n        quotient.append(nums1[i]/nums2[i])\n    return quotient\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\ndef fizz_buzz(n):\n    '''\n    Write a Python program to solve the FizzBuzz problem. \n    '''\n    for num in range(1,n+1):\n        if num%3==0 and num%5==0:\n            print(\"FizzBuzz\")\n        elif num%3==0:\n            print(\"Fizz\")\n        elif num%5==0:\n            print(\"Buzz\")\n        else:\n            print(num)\ndef sum_of_odd_and_even(num):\n    '''\n    Write a Python program to find the sum of the even and odd numbers of a given list of integers.\n    '''\n    even_nums=[]\n    odd_nums=[]\n    for num in nums:\n        if num%2==0:\n            even_nums.append(num)\n        else:\n            odd_nums.append(num)\n    return sum(even_nums),sum(odd_nums)\ndef sum_of_list(nums):\n    '''\n    Write a Python program to sum all the items in a list.\n    '''\n    return sum(nums)\ndef max_number(nums):\n    '''\n    Write a Python program to find the maximum and minimum numbers from a given list of numbers.\n    '''\n    return max(nums),min(nums)\ndef square_root(num):\n    '''\n    Write a Python program to find the cube of the each element of a list.\n    '''\n    return [i**(1/3) for i in num]\ndef sort_list(nums):\n    '''\n    Write a Python program to sort a list of elements using the bubble sort algorithm.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-1-i):\n            if nums[j]>nums[j+1]:\n                nums[j],nums[j+1]=nums[j+1],nums[j]\n    return nums\ndef sort_list_with_custom_key(nums,key_function):\n    '''\n    Write a Python program to sort a list of elements using the bubble sort algorithm.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-1-i):\n            if key_function(nums[j])>key_function(nums[j+1]):\n                nums[j],nums[j+1]=nums[j+1],nums[j]\n    return nums\ndef is_prime(n):\n    '''\n    Write a Python program to check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    for num in range(2,n):\n        if n%num==0:\n            return False\n    return True\ndef filter_prime_number(nums):\n    '''\n    Write a Python program to filter the positive numbers from a list.\n    '''\n    return [num for num in nums if num>0]\ndef show_capital(city):\n    '''\n    Write a Python program to form a new string where the first char in each word is capitalized. \n    '''\n    return''.join([i.capitalize() for i in city.split(' ')])\ndef remove_char(nums):\n    '''\n    Write a Python program to remove the characters which have odd index values of a given string. \n    '''\n    return ''.join([i for i in nums if nums.index(i)%2==0])\ndef replace_char(string):\n    '''\n    Write a Python program to replace the last element in a list with another list.\n    '''\n    my_list=string.split(' ')\n    my_list.pop()\n    my_list.append(['cool','new','list'])\n    return''.join([i for i in my_list])\ndef merge_list(list1,list2):\n    '''\n    Write a Python program to merge two lists and sorting them.\n    '''\n    return sorted(list1+list2)\ndef find_unique_char(string):\n    '''\n    Write a Python program to find unique characters from a given string.\n    '''\n    return set(string)\ndef group_list(nums):\n    '''\n    Write a Python program to group a sequence of key-value pairs into a dictionary of lists.\n    '''\n    return dict(zip(range(1,len(nums)+1),nums))\ndef multiply_each_list_element(my_list):\n    '''\n    Write a Python program to multiply all the items in a list.\n    '''\n    return [i*5 for i in my_list]\ndef swap_string_data(string):\n    '''\n    Write a Python program to swap cases of a given string.\n    '''\n    return string.swapcase()\ndef remove_duplicate_element(nums):\n    '''\n    Write a Python program to remove all duplicates from a given list.\n    '''\n    return list(set(nums))\ndef my_list_in_list(list1,list2):\n    '''\n    Write a Python program to check whether a given list is a subset of another list\n    '''\n    return all(item in list2 for item in list1)\ndef list_of_lists(list1,list2):\n    '''\n    Write a Python program to convert a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in list1))\ndef get_unique_set(my_list):\n    '''\n    Write a Python program to remove duplicates from a list.\n    '''\n    return list(set(my_list))\ndef remove_element_from_list(my_list,num):\n    '''\n    Write a Python program to remove the first occurrence of a specified element from a given list.\n    '''\n    my_list.pop(my_list.index(num))\n    return my_list\ndef count_frequency_of_element(my_list):\n    '''\n    Write a Python program to count the number of occurrences of each element in a given list. \n    '''\n    return Counter(my_list)\ndef check_element_in_list(my_list,element):\n    '''\n    Write a Python program to check whether a specified element exists in a given list.\n    '''\n    return element in my_list\ndef swap_list_in_two(list1,list2):\n    '''\n    Write a Python program to swap comma and dot in a string. \n    '''\n    return [str(i).replace(',','') for i in list1]+[str(i).replace('.','') for i in list2]\ndef move_all_occurrences(my_str,target,replace):\n    '''\n    Write a Python program to move all occurrences of one string to another.\n    '''\n    return replace.join(my_str.split(target))\ndef sum_of_n_numbers(nums):\n    '''\n    Write a Python program to sum of the first n positive integers.\n    '''\n    return sum([num for num in range(1,nums+1)])\ndef sum_of_list(nums):\n    '''\n    Write a Python program to get the difference between the largest and smallest values in a list.\n    '''\n    return max(nums)-min(nums)\ndef find_max_and_min_number(nums):\n    '''\n    Write a Python program to get the difference between the maximum and minimum values in a list.\n    '''\n    return max(nums)-min(nums)\ndef cube_root(num):\n    '''\n    Write a Python program to calculate the cube root of a number.\n    '''\n    return num**(1/3)\ndef reverse_string(string):\n    '''\n    Write a Python program to reverse the order of a given string.\n    '''\n    return string[::-1]\ndef remove_first_last_element(list1):\n    '''\n    Write a Python program to remove first and last element from a list.\n    '''\n    return list1[1:-1]\ndef remove_middle_elemen"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [[round(num1/num2,2) for num1,num2 in zip(nums1,nums2)]]\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [n1/n2 for n1, n2 in zip(nums1, nums2)]\n    \n    \n    \ndef di"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    ans = []\n    for i in range(len(nums1)):\n        ans.append(nums1[i]/nums2[i])\n    return ans\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #set empty list\n    div_list=[]\n    #go through nums1 and nums2\n    for i in range(len(nums1)):\n        #try division, if it works, add it to div_list\n        try:\n            div_list.append(nums1[i]/nums2[i])\n        #if it doesnt work, add 0\n        except ZeroDivisionError:\n            div_list.append(0)\n    #return list\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(0,len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # result = [[0]*len(nums1) for i in range(len(nums1))]\n    # for i in range(len(nums1)):\n    #     for j in range(len(nums1)):\n    #         result[i][j] = nums1[i]/nums2[j]\n    # return result\n    return [i/j for i in nums1 for j in nums2]\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    import re\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    temp_str = \"\"\n    for c in test_str:\n        if c.isdigit():\n            temp_str = temp_str + c\n    return temp_str + test_str.replace(temp_str,\"\")\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    i = 0\n    numbers = []\n    while i < len(test_str):\n        if test_str[i].isnumeric():\n            numbers.append(test_str[i])\n        i += 1\n    for n in numbers:\n        test_str = test_str.replace(n, \"\")\n    test_str = test_str + \"\".join(numbers)\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    number_str = \"\"\n    non_num_str = \"\"\n    \n    for char in test_str:\n        if char.isnumeric():\n            number_str += char\n        else:\n            non_num_str += char\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = \"\"\n    for i in range(len(test_str)):\n        if (test_str[i].isnumeric() == True):\n            new_str += test_str[i]\n    return new_str + test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result_str = \"\"\n    for i in test_str:\n        if i.isnumeric():\n            result_str = result_str + i\n    return result_str\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return test_str.split(\" \")\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for i in range(len(test_str)):\n        if test_str[i] in '0123456789':\n            result += test_str[i]\n        else:\n            result += test_str[i+1:]\n            result += test_str[i]\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isdigit()]) + \\\n        ''.join([i for i in test_str if i.isdigit()])\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isdigit()]) + ''.join([i for i in test_str if i.isdigit()])\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    sorted_a = sorted(a)\n    size = 0\n    i = 0\n    while i < len(sorted_a):\n        j = i + 1\n        while j < len(sorted_a):\n            if sorted_a[i] % sorted_a[j] == 0:\n                j += 1\n            else:\n                break\n        if j - i > size:\n            size = j - i\n        i += 1\n    return size\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # n is the total number of elements in the list\n    n = len(a)\n    # result_set is the set which stores all the divisors of a list of numbers\n    result_set = set()\n    # a is sorted in an ascending order\n    a.sort()\n    # Find divisors of a list of numbers\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if (a[i]!= 0 and a[j]!= 0 and a[i] % a[j] == 0):\n                result_set.add(a[i] // a[j])\n    # result_set has to be in ascending order\n    result_set = list(result_set)\n    result_set.sort()\n    return result_set[-1]"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return 1\n    if len(a)==2:\n        return 1 if a[0]%a[1]==0 else 2\n    s1=[]\n    s2=[]\n    for i in range(len(a)):\n        s1.append((i,a[i]))\n    for i in range(len(a)):\n        s2.append((i,a[i]))\n    s1=sorted(s1,key=lambda x: x[1])\n    s2=sorted(s2,key=lambda x: x[1])\n    if s1[0][1]%s2[0][1]==0:\n        return 1+largest_subset(s2[1:])\n    else:\n        return 1+largest_subset(s1[1:])\n        \ndef binary_search(x,a):\n    '''\n    Write a function to search for the smallest integer in an array that is larger than x.\n    '''\n    low=0\n    high=len(a)-1\n    while low<=high:\n        mid=(low+high)//2\n        if x<a[mid]:\n            high=mid-1\n        else:\n            low=mid+1\n    return low\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return largest_subset_helper([], sorted(a))\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    sorted_a = sorted(a)\n    if len(a) < 2:\n        return len(a)\n    dp = [0]*len(sorted_a)\n    for i,v in enumerate(sorted_a):\n        if i == 0:\n            dp[0] = 1\n        elif i == 1:\n            if v%sorted_a[0] == 0:\n                dp[1] = 2\n            else:\n                dp[1] = 1\n        else:\n            dp[i] = max(dp[i-1],dp[i-2])\n            if v%sorted_a[i-1] == 0 and v%sorted_a[i-2] == 0:\n                dp[i] = max(dp[i],dp[i-2] + 2)\n    return dp[-1]\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_set = []\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if (a[i]+a[j])%2 == 0 and i < j:\n                temp = a[i:j+1]\n                if len(temp) > len(max_set):\n                    max_set = temp\n    print(max_set)\n    print(len(max_set))\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 1:\n        return 1\n    else:\n        max_size = 0\n        for i in range(len(a)):\n            for j in range(i, len(a)):\n                if gcd(a[i], a[j]) == 1:\n                    subset = a[i:j + 1]\n                    max_size = max(len(subset), max_size)\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    l = len(a)\n    i = 1\n    while(i < l):\n        if (a[i]%i == 0):\n            i += 1\n        else:\n            break\n    if (i == l):\n        print(a,l)\n        return l\n    else:\n        print(i)\n        return i\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # split the list into two halves\n    a1,a2=a[:len(a)//2],a[len(a)//2:]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2.0\n    if n == 0:\n        return 0\n    m1 = n / 2\n    m2 = n / 2 + 1\n    if arr1[m1] > arr2[m2 - 1]:\n        return get_median(arr1[0:m1], arr2, m1)\n    if arr2[m2] > arr1[m1 - 1]:\n        return get_median(arr1, arr2[0:m2], m2)\n    else:\n        return (arr1[m1 - 1] + arr2[m2 - 1]) / 2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    res = []\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            res.append(arr1[i])\n            i += 1\n        elif arr1[i] > arr2[j]:\n            res.append(arr2[j])\n            j += 1\n        else:\n            res.append(arr1[i])\n            res.append(arr2[j])\n            i += 1\n            j += 1\n    if i < n:\n        res += arr1[i:]\n    elif j < n:\n        res += arr2[j:]\n    return res\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j = 0, 0\n    median = 0\n    while i < n and j < n:\n        if arr1[i] <= arr2[j]:\n            median = arr1[i]\n            i += 1\n        else:\n            median = arr2[j]\n            j += 1\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    return None\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0]+arr2[0])/2\n    elif n == 0:\n        return -1\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == 0 or len(arr2) == 0:\n        return None\n    else:\n        if len(arr1) == len(arr2):\n            if n % 2 == 0:\n                med = int(n / 2)\n                return (arr1[med] + arr2[med]) / 2\n            else:\n                med = int(n / 2)\n                return arr1[med]\n        else:\n            if len(arr1) > len(arr2):\n                if n % 2 == 0:\n                    med = int(n / 2)\n                    return (arr2[med] + arr1[med]) / 2\n                else:\n                    med = int(n / 2)\n                    return arr2[med]\n            else:\n                if n % 2 == 0:\n                    med = int(n / 2)\n                    return (arr1[med] + arr2[med]) / 2\n                else:\n                    med = int(n / 2)\n                    return arr1[med]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = 0\n    # Write your code here\n    if n == 0:\n        return 0\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    \n    if n == 2:\n        return max(arr1[0], arr2[0])\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    \n    m = n // 2\n    if arr1[m] > arr2[m]:\n        return get_median(arr1, arr2[m+1:], m + n%2)\n    return get_median(arr1[m:], arr2, m)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    arr1 = arr1 + arr2\n    arr1.sort()\n    if n % 2 == 0:\n        return (arr1[int(n/2)] + arr1[int(n/2)-1]) / 2\n    else:\n        return arr1[int(n/2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j = 0, 0\n    arr3 = []\n    while i < n and j < n:\n        if arr1[i] > arr2[j]:\n            arr3.append(arr2[j])\n            j += 1\n        elif arr1[i] < arr2[j]:\n            arr3.append(arr1[i])\n            i += 1\n        else:\n            arr3.append(arr1[i])\n            i += 1\n            j += 1\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    print(nums,n)\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    newlist = []\n    for i in nums:\n        newlist.append(i**n)\n    print(newlist)\nnth_nums([1,2,3,4,5],3)\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # p=list(map(pow,nums,nums))\n    # return p\n    p=[]\n    for i in nums:\n        p.append(i**n)\n    return p\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(0,len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n<1:\n        return []\n    nth_nums = []\n    for num in nums:\n        nth_nums.append(num**n)\n    return nth_nums\nprint(nth_nums([1,2,3,4],2))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i ** n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\nprint(nth_nums([1, 2, 3, 4, 5], 2))\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n    \n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # return string.upper()\n    return string.upper() if string.islower() else string\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if len(string) == 0:\n        return False\n    else:\n        return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.upper()\n    return string\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not isinstance(string, str):\n        return False\n    return string.upper() == string\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size -1]\n    newList[size -1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    if size == 0:\n        return []\n    if size == 1:\n        return newList\n    if size == 2:\n        newList[0], newList[1] = newList[1], newList[0]\n        return newList\n    newList[0], newList[size - 1] = newList[size - 1], newList[0]\n    return newList[:-1]\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    newList[0], newList[size - 1] = newList[size - 1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #return newList\n    x = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = x\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0] \n    return newList \n  \n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    return math.pi*r*r*(3**0.5)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r = float(r)\n    area = 3.14 * (r ** 2) / 2\n    print('The area of the largest triangle which can be inscribed in a semicircle with a radius of'+ str(r) +'is'+ str(area))\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    if r < 0 :\n        print(\"Please enter a positive radius\")\n        return -1\n    return math.pi*r*r*r/6\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import numpy as np\n    import matplotlib.pyplot as plt\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    x = math.pi*(r**2)\n    print(x)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass #TODO: Write code\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculating area of the largest triangle that can be inscribed in a semicircle with a given radius\n    largest_triangle_area = (math.pi*r*r*(3*r - math.sqrt(15*r*r + 27*r)))/2\n    return largest_triangle_area\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3.14159265 * r ** 2) * (r / 2)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    x = r*r\n    return (3.14159*x)/2\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14\n    area = pi*(r*r)\n    return area\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if array[start]!= start:\n        return start\n    if array[end]!= end:\n        return end\n    while start <= end:\n        mid = (start+end) // 2\n        if array[mid] == mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(not isinstance(array,list)):\n        raise Exception(\"Input should be a list\")\n    if(not isinstance(start,int) or start <0 or start >= len(array)):\n        raise Exception(\"Invalid input - start should be an integer greater than 0 and less than length of array\")\n    if(not isinstance(end,int) or end <0 or end >= len(array)):\n        raise Exception(\"Invalid input - end should be an integer greater than 0 and less than length of array\")\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #base case\n    if not array:\n        return 1\n    #else\n    if end is None:\n        end=len(array)-1\n    if end<start:\n        return 1\n    mid=int((start+end)/2)\n    #return function\n    if array[mid]!=mid+1:\n        if mid==0:\n            return 1\n        else:\n            if array[mid-1]==mid:\n                return mid+1\n            else:\n                return find_First_Missing(array,start=mid+1,end=end)\n    else:\n        return find_First_Missing(array,start=start,end=mid-1)\ndef min_Steps_To_Reach_Target(array,target):\n    '''\n    Write a python function to find the minimum number of moves required to reach a target number from the start number in the array.\n    '''\n    #initialize variables\n    num_steps=0\n    current_index=0\n    while current_index<len(array):\n        current_number=array[current_index]\n        if target<current_number:\n            num_steps+=current_number-target\n            break\n        else:\n            current_index+=1\n            num_steps+=1\n    return num_steps\ndef permutations(array):\n    '''\n    Write a python function to find the number of permutations of a string.\n    '''\n    #initialize variables\n    permutations=[]\n    permutation=''\n    #base case\n    if not array:\n        return permutations\n    #else\n    if len(array)==1:\n        permutations.append(array[0])\n        return permutations\n    #for loop\n    for i in range(len(array)):\n        start_array=array[:i]\n        remainder_array=array[i:]\n        sub_permutation=permutations(remainder_array)\n        for element in sub_permutation:\n            permutation+=array[i]\n            permutation+=element\n            permutations.append(permutation)\n            permutation=''\n    return permutations\ndef Permutation_Distance(first_permutation,second_permutation):\n    '''\n    Write a python function to find the distance between two permutations of the same length.\n    '''\n    #initialize variables\n    distance=0\n    first_permutation_hash={}\n    second_permutation_hash={}\n    first_permutation_keys=[]\n    second_permutation_keys=[]\n    #create hash for first permutation\n    for character in first_permutation:\n        if character in first_permutation_hash:\n            first_permutation_hash[character]+=1\n        else:\n            first_permutation_hash[character]=1\n            first_permutation_keys.append(character)\n    #create hash for second permutation\n    for character in second_permutation:\n        if character in second_permutation_hash:\n            second_permutation_hash[character]+=1\n        else:\n            second_permutation_hash[character]=1\n            second_permutation_keys.append(character)\n    #loop through hash\n    for character in first_permutation_hash:\n        #if character is in second hash\n        if character in second_permutation_hash:\n            #subtract the count from the hash\n            first_count=first_permutation_hash[character]\n            second_count=second_permutation_hash[character]\n            distance+=abs(first_count-second_count)\n    #loop through hash again\n    for character in second_permutation_hash:\n        #if character is in first hash\n        if character not in first_permutation_hash:\n            #add the character to the distance\n            distance+=first_permutation_hash[character]\n    return distance\ndef find_Sequence_Element_Index(sequence,target):\n    '''\n    Write a python function to find the index of the first occurrence of the target element in a sequence.\n    '''\n    #initialize variables\n    index=0\n    while index<len(sequence):\n        if sequence[index]==target:\n            return index\n        index+=1\n    return -1\ndef find_Minimum_Depth_Node(tree_root):\n    '''\n    Write a python function to find the minimum depth of the binary search tree.\n    '''\n    #initialize variables\n    depth=0\n    #base case\n    if not tree_root:\n        return 0\n    #recursive case\n    depth+=find_Minimum_Depth_Node(tree_root.left)\n    depth+=find_Minimum_Depth_Node(tree_root.right)\n    #return function\n    return 1+depth\ndef get_Depth_Of_Node(tree_root,target):\n    '''\n    Write a python function to get the depth of a given node in a binary search tree.\n    '''\n    #initialize variables\n    depth=0\n    #base case\n    if not tree_root:\n        return -1\n    #recursive case\n    if tree_root.data==target:\n        return depth\n    elif tree_root.data>target:\n        return get_Depth_Of_Node(tree_root.left,target)\n    else:\n        return get_Depth_Of_Node(tree_root.right,target)\ndef check_BST(tree_root):\n    '''\n    Write a python function to check if a binary search tree is a binary search tree.\n    '''\n    #initialize variables\n    is_bst=True\n    #base case\n    if not tree_root:\n        return True\n    #recursive case\n    if tree_root.left:\n        if tree_root.data<=tree_root.left.data:\n            return False\n    if tree_root.right:\n        if tree_root.data>=tree_root.right.data:\n            return False\n    #recursive call\n    is_bst=check_BST(tree_root.left)\n    is_bst=check_BST(tree_root.right)\n    #return function\n    return is_bst\ndef search_Sorted_Matrix_Element(matrix,target):\n    '''\n    Write a python function to search a element in a sorted matrix.\n    '''\n    #initialize variables\n    row_index=0\n    column_index=0\n    while row_index<len(matrix):\n        if matrix[row_index][column_index]==target:\n            return True\n        elif matrix[row_index][column_index]>target:\n            column_index=0\n            row_index+=1\n        else:\n            column_index+=1\n    #return function\n    return False\ndef find_Closest_Value_In_BST(tree_root,target):\n    '''\n    Write a python function to find the closest value in a binary search tree.\n    '''\n    #initialize variables\n    current_node=tree_root\n    closest_value=float('inf')\n    #base case\n    if not current_node:\n        return closest_value\n    #recursive case\n    if target<=current_node.data:\n        current_value=current_node.data\n        if current_value<closest_value:\n            closest_value=current_value\n        current_node=current_node.left\n    else:\n        current_value=current_node.data\n        if current_value>closest_value:\n            closest_value=current_value\n        current_node=current_node.right\n    #recursive call\n    current_node=find_Closest_Value_In_BST(current_node,target)\n    return closest_value\ndef find_Nodes_At_Distance_K_From_Root(tree_root,target,k):\n    '''\n    Write a python function to find the nodes at distance k from the root of a binary search tree.\n    '''\n    #initialize variables\n    current_node=tree_root\n    nodes=[]\n    #base case\n    if not current_node:\n        return nodes\n    #recursive case\n    if target<current_node.data:\n        current_node=current_node.left\n    else:\n        current_node=current_node.right\n    if k==0:\n        return [current_node]\n    else:\n        nodes.append(current_node)"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i] == i+1:\n            continue\n        else:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(end == None):\n        end = len(array) - 1\n    if(start > end):\n        return None\n    mid = (start + end)//2\n    if(array[mid]!= mid+1):\n        if(array[mid] - 1 == mid):\n            return mid + 1\n        elif(array[mid] - 1 > mid):\n            return find_First_Missing(array,start,mid-1)\n        elif(array[mid] - 1 < mid):\n            return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!=i+1:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n    return None\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n    if not end:\n        end = len(array)\n    if end<=start:\n        return 1\n    #pass an array to the function\n    return find_First_Missing(array,start+1,end)"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    res = ''\n    for i in string:\n        if i =='':\n            res += '%20'\n        else:\n            res += i\n    return res\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenlist = []\n    for i in list:\n        if(i%2 == 0):\n            evenlist.append(i)\n    print(evenlist)\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    new_list=[]\n    for i in list:\n        if(i%2==0):\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = list[0::2]\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    l1 = []\n    for i in list:\n        if (i%2 == 0):\n            l1.append(i)\n    return l1\nprint(\"\\n\\n\")\nprint(Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    odd_numbers = []\n    even_numbers = []\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for i in list:\n        if i % 2 == 0:\n            even_num.append(i)\n    print(even_num)\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # sub is the list of coordinates that have been explored.\n    if (ele in sub):\n        return None\n    else:\n        sub.append(ele)\n    x, y = ele[0], ele[1]\n    output = []\n    for m in range(-1, 2):\n        for n in range(-1, 2):\n            if ((x+m, y+n) not in sub):\n                output.append((x+m, y+n))\n    return output\n    \ndef explore(start):\n    '''\n    Write a function to explore the entire maze.\n    '''\n    #start is the initial coordinate tuple\n    #output is the list of all the coordinates in the maze\n    output = []\n    sub = []\n    queue = [start]\n    while (len(queue) > 0):\n        node = queue[0]\n        sub = []\n        queue = queue[1:]\n        if (node not in output):\n            output.append(node)\n        for item in adjac(node, sub):\n            queue.append(item)\n    return output\n    \ndef generate_maze(start, end, path = []):\n    '''\n    Write a function to generate the maze based on the given start, end, and path.\n    '''\n    if (start == end):\n        return path\n    else:\n        #path = generate_maze(start, end, path)\n        path.append(start)\n        for item in adjac(start):\n            if (item not in path):\n                #print(item)\n                return generate_maze(item, end, path)\n        return None\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not sub:\n        sub = [ele]\n    else:\n        sub.append(ele)\n    neighbours = [(ele[0] + 1, ele[1]), (ele[0] - 1, ele[1]), (ele[0], ele[1] + 1), (ele[0], ele[1] - 1)]\n    for neighbour in neighbours:\n        if neighbour not in sub:\n            sub.append(neighbour)\n            sub = adjac(neighbour, sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    # the sublist that is returned\n    subl = []\n    \n    # for each element in the original list\n    for i in range(len(ele)):\n        # if the element is not equal to the given coordinate tuple\n        if ele[i]!= ele:\n            # append the tuple\n            subl.append(ele[i])\n    \n    # return the sublist\n    return subl\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    l = []\n    x, y = ele\n    if x+1 < len(sub): l.append((x+1, y))\n    if x-1 >= 0: l.append((x-1, y))\n    if y+1 < len(sub[0]): l.append((x, y+1))\n    if y-1 >= 0: l.append((x, y-1))\n    return l\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # set coordinate\n    x, y = ele\n    # get neighbors\n    neighbors = [(x+1, y), (x-1, y), (x, y+1), (x, y-1), (x+1, y+1), (x+1, y-1), (x-1, y+1), (x-1, y-1)]\n    # return\n    return neighbors\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    output = []\n    for i in sub:\n        for j in sub:\n            if (abs(i[0]-j[0]) == 1 and abs(i[1]-j[1]) == 1) and i!= j:\n                output.append(j)\n    return list(set(output))\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub = [ele]\n    else:\n        sub.append(ele)\n    adj = []\n    for i in range(len(sub)):\n        if i == 0:\n            adj.append((sub[i][0] + 1, sub[i][1]))\n            adj.append((sub[i][0] - 1, sub[i][1]))\n            adj.append((sub[i][0], sub[i][1] + 1))\n            adj.append((sub[i][0], sub[i][1] - 1))\n        elif i == len(sub) - 1:\n            adj.append((sub[i][0] + 1, sub[i][1]))\n            adj.append((sub[i][0] - 1, sub[i][1]))\n            adj.append((sub[i][0], sub[i][1] + 1))\n            adj.append((sub[i][0], sub[i][1] - 1))\n        else:\n            adj.append((sub[i][0] + 1, sub[i][1]))\n            adj.append((sub[i][0] - 1, sub[i][1]))\n            adj.append((sub[i][0], sub[i][1] + 1))\n            adj.append((sub[i][0], sub[i][1] - 1))\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y,z = ele\n    for dx in [x-1,x,x+1]:\n        for dy in [y-1,y,y+1]:\n            for dz in [z-1,z,z+1]:\n                if (dx,dy,dz)!= ele:\n                    yield (dx,dy,dz)\n                    if sub: adjac((dx,dy,dz), sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacents = []\n    if(ele[0] - 1 > 0):\n        adjacents.append((ele[0] - 1, ele[1]))\n    if(ele[1] - 1 > 0):\n        adjacents.append((ele[0], ele[1] - 1))\n    if(ele[0] + 1 < len(sub)):\n        adjacents.append((ele[0] + 1, ele[1]))\n    if(ele[1] + 1 < len(sub[0])):\n        adjacents.append((ele[0], ele[1] + 1))\n    return adjacents\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n    else:\n        if sub[-1][0] - 1 == ele[0]:\n            sub.append(ele)\n        elif sub[-1][1] - 1 == ele[1]:\n            sub.append(ele)\n        elif sub[-1][0] + 1 == ele[0]:\n            sub.append(ele)\n        elif sub[-1][1] + 1 == ele[1]:\n            sub.append(ele)\n        else:\n            print('Failed to extract adjacent coords of {0}'.format(ele))\n    return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_').replace('\\t', '_').replace('\\n', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_').replace('*','').replace('.', '_').replace(',', '_').replace('-', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n    \ndef has_balanced_brackets(text):\n    '''\n    Given a string, return True if it has balanced usage of brackets, False otherwise.\n    '''\n    opening = '([{'\n    closing = ')]}'\n    pairs = dict(zip(opening, closing))\n    queue = []\n    for char in text:\n        if char in opening:\n            queue.append(char)\n        elif char in closing:\n            if not queue or pairs[queue.pop()]!= char:\n                return False\n    return not queue\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_list = list(text)\n    for i, c in enumerate(text_list):\n        if c =='':\n            text_list[i] = '_'\n        elif c == '_':\n            text_list[i] =''\n    return \"\".join(text_list)\n    \ndef is_unique(test_list):\n    '''\n    Write a function to return True if each element in the list is unique.\n    '''\n    unique_set = set(test_list)\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False\n    \ndef is_palindrome(text):\n    '''\n    Write a function to return True if a given string is a palindrome.\n    '''\n    text_list = list(text)\n    text_list_reverse = text_list[::-1]\n    if text_list == text_list_reverse:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text.find(' ') > -1:\n        new_text = text.replace(' ', '_')\n    elif text.find('_') > -1:\n        new_text = text.replace('_','')\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('_',' ')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.sort(key=lambda x: 1 if x==0 else 0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # return num_list\n    for i in range(len(num_list)):\n        for j in range(len(num_list)):\n            if num_list[i] == 0 and num_list[j]!= 0:\n                num_list[i] = num_list[j]\n                num_list[j] = 0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i==0:\n            num_list.remove(i)\n            num_list.append(i)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i==0:\n            num_list.remove(i)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count_zero = num_list.count(0)\n    for i in range(count_zero):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\nprint(move_zero([1,2,3,0,4,5,0,7,0,0,0]))\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(num_list.pop(i))\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) == 0:\n        return\n    elif num_list[0] == 0:\n        num_list.append(0)\n        num_list.remove(0)\n        move_zero(num_list)\n    else:\n        pass\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.sort(key=bool, reverse=True)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return [i for i in num_list if i!= 0] + [0] * num_list.count(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    l = []\n    for i in range(len(num_list)):\n        if num_list[i]!=0:\n            l.append(num_list[i])\n    l.extend([0]*num_list.count(0))\n    return l\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    arr.sort()\n    for i in range(n-1) :\n        for j in range(i+1,n) :\n            sum ^= arr[i] ^ arr[j]\n    return sum \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Please add your code here\n    return sum(list(map(lambda x : x[0]^x[1], list(combinations(arr, 2)))))\n    \n    \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if(n%2!= 0):\n        return -1\n    else:\n        result = 0\n        for i in range(0, n - 1, 2):\n            for j in range(i + 2, n, 2):\n                result += (arr[i] ^ arr[j])\n        return result\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            total ^= arr[i] ^ arr[j]\n    return total \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = []\n    for i in range(n):\n        for j in range(i+1, n):\n            res.append((arr[i]^arr[j],arr[i],arr[j]))\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(0,n):\n        for j in range(0,n):\n            if (i!=j):\n                sum=sum^arr[i]^arr[j]\n    print(sum)\n    return\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    result=0\n    for i in range(n):\n        for j in range(i+1,n):\n            result+=arr[i]^arr[j]\n    return result\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(0,n) :\n        for j in range(0,n) :\n            if (i!= j) :\n                xor_sum = xor_sum + (arr[i] ^ arr[j])\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(n-1) :\n        for j in range(i+1,n) : \n            ans = ans ^ (arr[i] ^ arr[j])\n    return ans\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for x in iterable:\n        hq.heappush(h,x)\n    return [hq.heappop(h) for _ in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list\n    \n    \ndef bubble_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = len(iterable)\n    for i in range(l):\n        swap_flag = False\n        for j in range(l-i-1):\n            if iterable[j] > iterable[j+1]:\n                swap_flag = True\n                iterable[j], iterable[j+1] = iterable[j+1], iterable[j]\n        if not swap_flag:\n            break\n    return iterable\n    \n    \ndef insertion_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(1, len(iterable)):\n        j = i\n        while j > 0 and iterable[j-1] > iterable[j]:\n            iterable[j-1], iterable[j] = iterable[j], iterable[j-1]\n            j -= 1\n    return iterable\n    \n    \ndef merge_sort(iterable, reverse=False):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) == 1:\n        return iterable\n    \n    mid = len(iterable) // 2\n    \n    left = merge_sort(iterable[:mid])\n    right = merge_sort(iterable[mid:])\n    \n    i, j, k = 0, 0, 0\n    while i < len(left) and j < len(right):\n        if not reverse and left[i] < right[j]:\n            iterable[k] = left[i]\n            i += 1\n        elif reverse and left[i] > right[j]:\n            iterable[k] = right[j]\n            j += 1\n        else:\n            iterable[k] = left[i]\n            i += 1\n        k += 1\n    while i < len(left):\n        iterable[k] = left[i]\n        i += 1\n        k += 1\n    while j < len(right):\n        iterable[k] = right[j]\n        j += 1\n        k += 1\n    return iterable\n    \n    \ndef quick_sort(iterable, reverse=False):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    \n    pivot = iterable[0]\n    left = []\n    right = []\n    for item in iterable[1:]:\n        if reverse and item < pivot:\n            left.append(item)\n        elif not reverse and item > pivot:\n            right.append(item)\n        else:\n            continue\n    return quick_sort(left, reverse=reverse) + [pivot] + quick_sort(right, reverse=reverse)\n    \n    \ndef partition(iterable, begin, end, reverse=False):\n    '''\n    Write a function to sort the given list.\n    '''\n    if reverse:\n        iterable[begin], iterable[end] = iterable[end], iterable[begin]\n    pivot = iterable[begin]\n    left = begin\n    right = end\n    while left < right:\n        while left < right and iterable[right] >= pivot:\n            right -= 1\n        iterable[left] = iterable[right]\n        while left < right and iterable[left] < pivot:\n            left += 1\n        iterable[right] = iterable[left]\n    iterable[left] = pivot\n    return left\n    \n    \ndef quick_sort_cache(iterable, reverse=False):\n    '''\n    Write a function to sort the given list.\n    '''\n    def _quick_sort_cache(iterable, begin, end, reverse=False):\n        if end - begin < 2:\n            return\n        pivot = partition(iterable, begin, end, reverse=reverse)\n        _quick_sort_cache(iterable, begin, pivot, reverse=reverse)\n        _quick_sort_cache(iterable, pivot + 1, end, reverse=reverse)\n    return _quick_sort_cache(iterable, 0, len(iterable), reverse=reverse)\n    \n    \ndef quick_sort_cache_no_cache(iterable, reverse=False):\n    '''\n    Write a function to sort the given list.\n    '''\n    def _quick_sort_cache_no_cache(iterable, begin, end, reverse=False):\n        if end - begin < 2:\n            return\n        pivot = partition(iterable, begin, end, reverse=reverse)\n        _quick_sort_cache_no_cache(iterable, begin, pivot, reverse=reverse)\n        _quick_sort_cache_no_cache(iterable, pivot + 1, end, reverse=reverse)\n    _quick_sort_cache_no_cache(iterable, 0, len(iterable), reverse=reverse)\n    \n    \ndef quick_sort_no_cache(iterable, reverse=False):\n    '''\n    Write a function to sort the given list.\n    '''\n    def _quick_sort_no_cache(iterable, begin, end, reverse=False):\n        if end - begin < 2:\n            return\n        pivot = partition(iterable, begin, end, reverse=reverse)\n        _quick_sort_no_cache(iterable, begin, pivot, reverse=reverse)\n        _quick_sort_no_cache(iterable, pivot + 1, end, reverse=reverse)\n    _quick_sort_no_cache(iterable, 0, len(iterable), reverse=reverse)\n    \n    \ndef quick_sort_no_cache_original(iterable, reverse=False):\n    '''\n    Write a function to sort the given list.\n    '''\n    def _quick_sort_no_cache_original(iterable, begin, end, reverse=False):\n        if end - begin < 2:\n            return\n        pivot = partition(iterable, begin, end, reverse=reverse)\n        _quick_sort_no_cache_original(iterable, begin, pivot, reverse=reverse)\n        _quick_sort_no_cache_original(iterable, pivot + 1, end, reverse=reverse)\n    _quick_sort_no_cache_original(iterable, 0, len(iterable), reverse=reverse)\n    \n    \ndef quick_sort_with_stack(iterable, reverse=False):\n    '''\n    Write a function to sort the given list.\n    '''\n    def _quick_sort_with_stack(iterable, begin, end, reverse=False):\n        if end - begin < 2:\n            return\n        stack = []\n        stack.append(end)\n        stack.append(begin)\n        stack.append(begin)\n        stack.append(end)\n        \n        while stack:\n            end = stack.pop()\n            begin = stack.pop()\n            pivot = partition(iterable, begin, end, reverse=reverse)\n            if pivot - 1 > begin:\n                stack.append(begin)\n                stack.append(pivot - 1)\n            if pivot + 1 < end:\n                stack.append(pivot + 1)\n                stack.append(end)\n    _quick_sort_with_stack(iterable, 0, len(iterable), reverse=reverse)\n    \n    \ndef quick_sort_with_stack_original(iterable, reverse=False):\n    '''\n    Write a function to sort the given list.\n    '''\n    def _quick_sort_with_stack_original(iterable, begin, end, reverse=False):\n        if end - begin < 2:\n            return\n        stack = []\n        stack.append(end)\n        stack.append(begin)\n        stack.append(begin)\n        stack.append(end)\n        \n        while stack:\n            end = stack.pop()\n            begin = stack.pop()\n            pivot = partition(iterable, begin, end, reverse=reverse)\n            if pivot - 1 > begin:\n                stack.append(begin)\n                stack.append(pivot - 1)\n            i"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    iterable = list(iterable)\n    for i in range(len(iterable)):\n        hq.heappush(h,iterable[i])\n    print(\"The list is: \")\n    print(h)\n    sorted_list = []\n    for i in range(len(iterable)):\n        sorted_list.append(hq.heappop(h))\n    print(\"The sorted list is: \")\n    print(sorted_list)\n    return(sorted_list)\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    min_heap = []\n    for i in iterable:\n        hq.heappush(min_heap, i)\n    return [hq.heappop(min_heap) for _ in range(len(min_heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,-i)\n    return [-i for i in hq.nlargest(len(h),h)]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    lst=[]\n    while(len(iterable)):\n        lst.append(hq.heappop(iterable))\n    return lst\n    \ndef run_heap_sort(array):\n    print(\"Given array is:\",array)\n    print(\"Sorted array is: \",heap_sort(array))\n    \nrun_heap_sort([1,3,5,7,9,2,4,6,8,0])\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for num in iterable:\n        hq.heappush(h, num)\n    return [hq.heappop(h) for _ in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for i in range(len(heap))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    result = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    for i in range(len(heap)):\n        result.append(hq.heappop(heap))\n    return result\nprint(heap_sort([1,3,5,7,9,2,4,6,8,0]))\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    return True\ndef noprofit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return False\n    return True\ndef noprofit_loss_profit(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return False\n    return True\ndef profit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return False\n    return True\ndef profit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return False\n    return True\ndef profit_loss_profit(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        print(f\"{sale_amount} is a loss with actual cost {actual_cost}\")\n    elif sale_amount <= actual_cost:\n        print(f\"{sale_amount} is a profit with actual cost {actual_cost}\")\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount: \n        return True \n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == actual_cost:\n        return \"This is no loss no profit\"\n    else:\n        return \"This is loss no profit\"\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n    \nprint(\"{}\".format(noprofit_noloss(1000,1100)))\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit == 0 and sale_amount == actual_cost:\n        print(\"no profit no loss\")\n    else:\n        print(\"profit\")\n    return None\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"Yes, this transaction has no profit and no loss\")\n    else:\n        print(\"No, this transaction has a loss of {0} and a profit of {1}\".format(actual_cost - sale_amount, sale_amount - actual_cost))\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if sale_amount==actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(actual_cost,\": has no profit and no loss\")\n    else:\n        print(actual_cost,\": has profit and no loss\")\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=int(v)\n    t=int(t)\n    wci=13.12+0.6215*t+(11.37*v)+(0.3965*t*v)-(0.1671*t*v*v)\n    wci=int(round(wci))\n    return wci\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(13.12 + (0.6215*v) - (11.37 * (t)) + (0.3965*(t*v)) + ((t*v*v)/(3.9*t+5.4)))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + 0.6215*t - 11.37*(v**0.16) + 0.3965*t*(v**0.16)\n    return math.ceil(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t<0 or v<0 or v>120 or t>45:\n        raise ValueError('Temperature and/or Velocity have to be positive and between 0 and 120. Have to be given in celsius.')\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 5 and t < 10:\n        a = 35.74\n        b = 0.6215\n        c = 35.75\n        d = 0.4275\n    elif v > 5 and t >= 10:\n        a = 35.75\n        b = 0.4275\n        c = 35.75\n        d = 0.4275\n    elif v <= 5 and t < 10:\n        a = 35.75\n        b = 0.4275\n        c = 35.75\n        d = 0.4275\n    elif v <= 5 and t >= 10:\n        a = 35.75\n        b = 0.4275\n        c = 35.75\n        d = 0.4275\n    wind = a + b * v + c * t - d * t * (v ** 0.16)\n    return round(wind)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16\n    return math.ceil(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_k = v*1.852\n    t_c = t-273.15\n    return int(round(v_k**0.16+0.4275*t_c,0))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<3 or t<-25 or t>40:\n        return \"Out of range\"\n    else:\n        return round((13.12 + (0.6215*t) - (11.37*v**0.16) + (0.3965*t*v**0.16) - (0.1645*(t**2)*v**0.16)),0)\n    return\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = int(v)\n    t = int(t)\n    if v <= 0 or t <= 0:\n        return 'Invalid input'\n    else:\n        return int(13.12 + 0.6215*t - 11.37*(v**0.16) + 0.3965*t*(v**0.16))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #sample_names = [\"Emma\", \"Jonah\", \"Cherie\", \"David\", \"Sophie\"]\n    start_lower_letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    sum_length = 0\n    for i in sample_names:\n        if not i[0].islower():\n            sample_names.remove(i)\n    for i in sample_names:\n        sum_length = sum_length + len(i)\n    return sum_length\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name)-1 for name in sample_names if name.islower()])\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for x in sample_names:\n        if x[0] == 'a' or x[0] == 'A':\n            sample_names.remove(x)\n    print(len(sample_names))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [\"Jon\", \"Kranthi\", \"Emma\", \"David\", \"Jonathan\", \"Sally\", \"Rachel\", \"Ava\", \"Brian\", \"Audrey\", \"Tim\", \"Raja\", \"Aria\", \"Martin\", \"Kamala\", \"Luna\", \"Michael\", \"Haven\", \"Harsha\", \"Piper\", \"Nima\", \"Shirley\", \"Chloe\", \"Jennifer\"]\n    # Remove names that start with a lowercase letter\n    sample_names = [name for name in sample_names if name[0].isupper()]\n    return sum(len(name) for name in sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lowercase_letter = \"abcdefghijklmnopqrstuvwxyz\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].lower() not in lowercase_letter:\n            total_length += len(name)\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lst = []\n    for x in sample_names:\n        if x[0].isupper():\n            lst.append(x)\n    return lst\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(\n        [len(x) for x in sample_names if not x.islower()]\n    )\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name[0].isupper()]\n    return len(''.join(names))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # converting the input in the list to lower case\n    sample_names = [x.lower() for x in sample_names]\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import re\n    name = [name for name in sample_names if name.istitle() == True]\n    name = [name for name in sample_names if name.istitle() == False]\n    name = [name for name in sample_names if name.istitle() == False]\n    return len(name)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    p = re.compile(r'[\\(\\)]')\n    result = p.sub('', items)\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis_string = ''\n    for item in items:\n        parenthesis_string = parenthesis_string +'' + item.strip('()')\n    return parenthesis_string.strip()\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # for x in items:\n    #     return re.sub('\\(.*?\\)', '', x)\n    return re.sub('\\(.*?\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    paren_list = re.findall(\"\\((.*?)\\)\", items)\n    return re.sub(\"\\((.*?)\\)\", \"\", items)\n    \ndef roman_to_int(items):\n    '''\n    Write a function to convert a roman numeral to an integer\n    '''\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    return sum(roman_dict[i] for i in items)\n    \ndef get_num_divisors(n):\n    '''\n    Write a function that returns the number of divisors of a given number n.\n    '''\n    return len([i for i in range(1, n+1) if n % i == 0])\n    \ndef get_largest_divisor(n):\n    '''\n    Write a function that returns the largest divisor of a given number n.\n    '''\n    return [i for i in range(1, n+1) if n % i == 0 and n/i == i][-1]\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        clean_string = re.sub(r'\\([^()]*\\)', '', item)\n        print(clean_string)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = \"\".join([i for i in items if i not in \"()\"])\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\((.*?)\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # for i in items:\n    #     i.replace('(','').replace(')','')\n    # return items\n    return re.sub(r'\\(.+?\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^)]*\\)')\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in items:\n        \n        # remove text in parenthesis\n        text = re.sub('[\\(\\[].*?[\\)\\]]', '', i)\n        \n        # remove spaces\n        text = text.replace(' ', '')\n        \n        # remove '-'\n        if text.find('-')!= -1:\n            text = text.replace('-', '')\n        \n        # remove ','\n        if text.find(',')!= -1:\n            text = text.replace(',', '')\n        \n        # remove '.'\n        if text.find('.')!= -1:\n            text = text.replace('.', '')\n        \n        # remove '&'\n        if text.find('&')!= -1:\n            text = text.replace('&', '')\n        \n        # remove '%'\n        if text.find('%')!= -1:\n            text = text.replace('%', '')\n        \n        # remove '$'\n        if text.find('$')!= -1:\n            text = text.replace('$', '')\n        \n        # remove '#'\n        if text.find('#')!= -1:\n            text = text.replace('#', '')\n        \n        # remove ';'\n        if text.find(';')!= -1:\n            text = text.replace(';', '')\n        \n        # remove ':'\n        if text.find(':')!= -1:\n            text = text.replace(':', '')\n        \n        # remove '\\''\n        if text.find('\\'')!= -1:\n            text = text.replace('\\'', '')\n        \n        # remove '\"'\n        if text.find('\"')!= -1:\n            text = text.replace('\"', '')\n        \n        # remove '\u201c'\n        if text.find('\u201c')!= -1:\n            text = text.replace('\u201c', '')\n        \n        # remove '\u201d'\n        if text.find('\u201d')!= -1:\n            text = text.replace('\u201d', '')\n        \n        # remove '?'\n        if text.find('?')!= -1:\n            text = text.replace('?', '')\n        \n        # remove '!'\n        if text.find('!')!= -1:\n            text = text.replace('!', '')\n        \n        # remove ','\n        if text.find('$')!= -1:\n            text = text.replace('$', '')\n        \n        # remove '.'\n        if text.find('.')!= -1:\n            text = text.replace('.', '')\n        \n        # remove '\\''\n        if text.find('\u2018')!= -1:\n            text = text.replace('\u2018', '')\n        \n        # remove '\"'\n        if text.find('\u201c')!= -1:\n            text = text.replace('\u201c', '')\n        \n        # remove '\u2019'\n        if text.find('\u2019')!= -1:\n            text = text.replace('\u2019', '')\n        \n        # remove '\u201d'\n        if text.find('\u201d')!= -1:\n            text = text.replace('\u201d', '')\n        \n        # remove ','\n        if text.find(',')!= -1:\n            text = text.replace(',', '')\n        \n        # remove '.'\n        if text.find('.')!= -1:\n            text = text.replace('.', '')\n        \n        # remove '\\''\n        if text.find('\\'')!= -1:\n            text = text.replace('\\'', '')\n        \n        # remove '\"'\n        if text.find('\"')!= -1:\n            text = text.replace('\"', '')\n        \n        # remove '\u2018'\n        if text.find('\u2018')!= -1:\n            text = text.replace('\u2018', '')\n        \n        # remove '\u2019'\n        if text.find('\u2019')!= -1:\n            text = text.replace('\u2019', '')\n        \n        # remove '\u201d'\n        if text.find('\u201d')!= -1:\n            text = text.replace('\u201d', '')\n        \n        # remove ','\n        if text.find('$')!= -1:\n            text = text.replace('$', '')\n        \n        # remove '.'\n        if text.find('.')!= -1:\n            text = text.replace('.', '')\n        \n        # remove '\\''\n        if text.find('\u2018')!= -1:\n            text = text.replace('\u2018', '')\n        \n        # remove '\"'\n        if text.find('\u201c')!= -1:\n            text = text.replace('\u201c', '')\n        \n        # remove '\u2019'\n        if text.find('\u2019')!= -1:\n            text = text.replace('\u2019', '')\n        \n        # remove '\u201d'\n        if text.find('\u201d')!= -1:\n            text = text.replace('\u201d', '')\n        \n        # remove ','\n        if text.find('$')!= -1:\n            text = text.replace('$', '')\n        \n        # remove '.'\n        if text.find('.')!= -1:\n            text = text.replace('.', '')\n        \n        # remove '\\''\n        if text.find('\u2018')!= -1:\n            text = text.replace('\u2018', '')\n        \n        # remove '\"'\n        if text.find('\u201c')!= -1:\n            text = text.replace('\u201c', '')\n        \n        # remove '\u2019'\n        if text.find('\u2019')!= -1:\n            text = text.replace('\u2019', '')\n        \n        # remove '\u201d'\n        if text.find('\u201d')!= -1:\n            text = text.replace('\u201d', '')\n        \n        # remove ','\n        if text.find('$')!= -1:\n            text = text.replace('$', '')\n        \n        # remove '.'\n        if text.find('.')!= -1:\n            text = text.replace('.', '')\n        \n        # remove '\\''\n        if text.find('\u2018')!= -1:\n            text = text.replace('\u2018', '')\n        \n        # remove '\"'\n        if text.find('\u201c')!= -1:\n            text = text.replace('\u201c', '')\n        \n        # remove '\u2019'\n        if text.find('\u2019')!= -1:\n            text = text.replace('\u2019', '')\n        \n        # remove '\u201d'\n        if text.find('\u201d')!= -1:\n            text = text.replace('\u201d', '')\n        \n        # remove ','\n        if text.find('$')!= -1:\n            text = text.replace('$', '')\n        \n        # remove '.'\n        if text.find('.')!= -1:\n            text = text.replace('.', '')\n        \n        # remove '\\''\n        if text.find('\u2018')!= -1:\n            text = text.replace('\u2018', '')\n        \n        # remove '\"'\n        if text.find('\u201c')!= -1:\n            text = text.replace('\u201c', '')\n        \n        # remove '\u2019'\n        if text.find('\u2019')!= -1:\n            text = text.replace('\u2019', '')\n        \n        # remove '\u201d'\n        if text.find('\u201d')!= -1:\n            text = text.replace('\u201d', '')\n        \n        # remove ','\n        if text.find('$')!= -1:\n            text = text.replace('$', '')\n        \n        # remove '.'\n        if text.find('.')!= -1:\n            text = text.replace('.', '')\n        \n        # remove '\\''\n        if text.find('\u2018')!= -1:\n            text = text.replace('\u2018', '')\n        \n        # remove '\"'\n        if text.find('\u201c')!= -1:\n            text = text.replace('\u201c', '')\n        "
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_number = 0\n    for i in range(n):\n        nonagonal_number += i + 1\n    return nonagonal_number\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    '''\n    Need to find the nth number in the series:\n        1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n    I can use a while loop to iterate through the series and compare each number\n    to the nth number. The sum of the first n numbers in the series is n(n+1) / 2.\n    Then, I subtract the value of the nth number and divide the result by n.\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return (n * (n+1) // 2) - (n - 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (2*n)**2 + (2*n)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    print(\"In is_nonagonal\")\n    # check if n is even and if not, make it even\n    if n % 2!= 0:\n        n += 1\n    # create list of nonagonals up to n\n    nonagonals = [1]\n    for i in range(2, n + 1):\n        nonagonals.append(nonagonals[-1] + (2 * i - 2))\n    # print the nth nonagonal number\n    print(nonagonals[-1])\n    return nonagonals[-1]\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 3\n    else:\n        return 3*n**2-n+2\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    nonagonal_number = 0\n    for i in range(1, n):\n        nonagonal_number = nonagonal_number + (2 * i + 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (2*n**2 + n) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return int(n*(n-1)/2)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'\\b[z]',text):\n        return re.sub(r'\\b[z]','',text)\n    else:\n        return text\nprint(text_match_wordz_middle('zebra'))\nprint(text_match_wordz_middle('zebr'))\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r'z.*z'\n    # regex = r'z.*z$'\n    # regex = r'z.*z$|z.*z'\n    if re.search(regex, text):\n        print(f'The word {text} contains \"z\"')\n    else:\n        print(f'The word {text} does not contain \"z\"')\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # text = text.lower()\n    # if text.count('z') > 1:\n    #     return True\n    # elif text[0] == 'z' and text[-1]!= 'z':\n    #     return True\n    # elif text[0]!= 'z' and text[-1] == 'z':\n    #     return True\n    # elif text[0] == 'z' and text[-1] == 'z':\n    #     return False\n    # else:\n    #     return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'z\\b(?!\\b^\\w|\\b$\\w)',text)\n    \ndef text_match_wordz_middle2(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'z(?!\\b^\\w|\\b$\\w)',text)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #remove any non-letters\n    text_clean = re.sub(r'\\W+','', text)\n    #split into a list\n    text_split = text_clean.split()\n    #iterate through list\n    for word in text_split:\n        #if the word contains z\n        if 'z' in word[1:-1]:\n            #return True\n            return True\n        #if the word doesn't contain z\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search(r'[^z]z', text))\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r'^(?!z).*z.*(?<!z)$'\n    pattern = re.compile(regex, re.IGNORECASE)\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'\\bz\\b', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_regex = r'\\bz\\b'\n    text_list = text.split(' ')\n    result = False\n    for word in text_list:\n        if re.findall(text_regex, word):\n            result = True\n            break\n    return result\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'z.+?[^z]'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    # return bool(re.search(pattern, text))\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = 0\n    r = k-1\n    while(l<r):\n        input[l], input[r] = input[r], input[l]\n        l += 1\n        r -= 1\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    l = len(input)\n    if k < 0 or k > l:\n        print('Invalid Input')\n        return\n    \n    if k == 0:\n        return input\n        \n    if k == l:\n        return input[::-1]\n    \n    return reverse_Array_Upto_K(input[:k], k-1) + input[k:l] + reverse_Array_Upto_K(input[k:], k-1)\n    "
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #start writing code here\n    output = []\n    for i in range(0, k):\n        output.append(input[i])\n    output = input[:k] + output[::-1]\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_length = len(input)\n    for i in range(0,k):\n        input[i], input[input_length-k+i] = input[input_length-k+i], input[i]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_length = len(input)\n    if input_length == 0 or input_length < k: \n        return input\n    if k <= 0:\n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = len(input)-1\n    while start < k:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if(k == 0):\n        return(input)\n    else:\n        return(input[:k]+reversed(input[k:]))\n    return input[:k] + input[k:][::-1]\nprint(reverse_Array_Upto_K(input, k))\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k] + input[k:][::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_reversed = []\n    for i in range(k,len(input)):\n        input_reversed.append(input[i])\n    for i in range(0, k):\n        input_reversed.append(input[i])\n    return input_reversed\ndef reverse_Array_Upto_K_1(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input)\n    for i in range(k,0,-1):\n        input[i], input[k] = input[k], input[i]\n        k += -1\n    return input\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    my_tup = (1, 2, 3, 4)\n    my_dict = {'first_name': 'Shiri', 'last_name': 'Abdullahi'}\n    return my_tup + my_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    return tuple(test_tup)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def maxAverageOfPathRec(cost, i, j):\n        '''\n        Finds the average cost of a path ending at cell (i, j)\n        '''\n        n = len(cost)\n        \n        # If we are already at the top-right corner\n        if i == 0 and j == n-1:\n            return cost[i][j]\n        \n        # If we are already at the bottom-right corner\n        if i == n-1 and j == n-1:\n            return cost[i][j]\n        \n        # If we are already at the bottom-left corner\n        if i == n-1 and j == 0:\n            return cost[i][j]\n        \n        # If we are at the top row\n        if i == 0:\n            return max(maxAverageOfPathRec(cost, i, j+1), maxAverageOfPathRec(cost, i+1, j)) + cost[i][j]\n        \n        # If we are at the bottom row\n        if i == n-1:\n            return max(maxAverageOfPathRec(cost, i, j+1), maxAverageOfPathRec(cost, i-1, j)) + cost[i][j]\n        \n        # If we are at the right column\n        if j == n-1:\n            return max(maxAverageOfPathRec(cost, i+1, j), maxAverageOfPathRec(cost, i, j-1)) + cost[i][j]\n        \n        # Else, if we are at any other cell\n        return max(maxAverageOfPathRec(cost, i, j+1), maxAverageOfPathRec(cost, i+1, j), maxAverageOfPathRec(cost, i, j-1)) + cost[i][j]\n    \n    n = len(cost)\n    return maxAverageOfPathRec(cost, 0, 0)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    rows = len(cost)\n    cols = len(cost[0])\n    if rows!= cols:\n        return -1\n    # dp[i][j] = max path sum ending at (i, j)\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[0][0]\n            elif i == 0:\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    return float(dp[-1][-1]) / (rows * cols)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    print(cost)\n    m, n = len(cost), len(cost[0])\n    for i in range(m):\n        for j in range(n):\n            cost[i][j] = (cost[i][j], i, j)\n    cost.sort(reverse = True)\n    visited = set()\n    total = 0\n    max_avg = float('-inf')\n    \n    for i in range(m):\n        for j in range(n):\n            if i > 0 and j > 0 and (i, j) not in visited:\n                total += cost[0][0]\n                visited.add((i, j))\n                m, n = len(cost), len(cost[0])\n                for x in range(m):\n                    for y in range(n):\n                        if (i - 1, j) in visited and (x, y) not in visited:\n                            total += cost[x][y][0]\n                            visited.add((x, y))\n                        if (i, j - 1) in visited and (x, y) not in visited:\n                            total += cost[x][y][0]\n                            visited.add((x, y))\n                if len(visited) == m * n:\n                    max_avg = max(max_avg, total/len(visited))\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n    for i in range(1, n):\n        for j in range(0, n-i):\n            dp[j][j+i] = cost[j][j+i] + max(dp[j][j+i-1], dp[j+1][j+i])\n    return int(dp[0][-1])\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Number of cells in the cost array\n    n = len(cost)\n    # Create 2D DP array for min costs\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    # Calculate min costs for all paths\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = cost[i-1][j-1] + min(dp[i-1][j], dp[i][j-1])\n    # Calculate the average for each path\n    # Create a path array and initialize it with 0\n    path = [0]*(n+1)\n    for i in range(1, n+1):\n        # Set the current node as the destination\n        # Update path\n        path[i] = n\n        # Update the path with the minimum cost\n        # Update the path with the minimum cost\n        for j in range(1, n+1):\n            if dp[i][j] < dp[i][path[i]]:\n                path[i] = j\n    # Calculate the average\n    ans = 0\n    for i in range(1, n+1):\n        if path[i] == n:\n            ans += dp[i][path[i]]/(i-1)\n    return ans\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def isSafe(x, y, visited, n):\n        if x < 0 or x >= n or y < 0 or y >= n or visited[x][y] == True:\n            return False\n        return True\n    \n    def dfs(x, y, cost, visited, path_sum, path_count, n):\n        if path_sum >= path_count * avg_cost:\n            return\n        if x == n - 1 and y == n - 1:\n            path_sum += cost[x][y]\n            path_count += 1\n            if path_sum > avg_cost * path_count:\n                avg_cost = path_sum // path_count\n                max_path = path\n                max_path_count = path_count\n            path_sum -= cost[x][y]\n            path_count -= 1\n            return\n        visited[x][y] = True\n        for i in range(n):\n            if isSafe(x + 1, y + i, visited, n):\n                dfs(x + 1, y + i, cost, visited, path_sum, path_count, n)\n                visited[x][y] = False\n                path_sum -= cost[x][y]\n                path_count -= 1\n        path_sum += cost[x][y]\n        path_count += 1\n    \n    n = len(cost)\n    visited = [[False] * n for i in range(n)]\n    avg_cost = float('-inf')\n    max_path = []\n    max_path_count = 0\n    path_sum = 0\n    path_count = 0\n    dfs(0, 0, cost, visited, path_sum, path_count, n)\n    return avg_cost, max_path, max_path_count\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            cost[i][j] = (cost[i][j], 0)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def maxAverage(cost, n):\n        if n == 0:\n            return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    matrix = [[0 for x in range(len(cost[0]))] for y in range(len(cost))]\n    summ = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if i == 0 and j == 0:\n                matrix[i][j] = cost[i][j]\n            elif i == 0:\n                matrix[i][j] = matrix[i][j - 1] + cost[i][j]\n            elif j == 0:\n                matrix[i][j] = matrix[i - 1][j] + cost[i][j]\n            else:\n                matrix[i][j] = max(matrix[i - 1][j], matrix[i][j - 1]) + cost[i][j]\n            summ += matrix[i][j]\n    return summ // (len(cost) * len(cost[0]))\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    \n    # Create a 2d array to store the last cell in a path\n    # and the total cost of the path\n    # We use a 2d array as a DP table since we can compute\n    # the cost of the paths from each of the cells in the\n    # last row of the table.\n    last_cell = [[None, 0] for _ in range(N)]\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    \n    # Compute the minimum cost starting from each cell\n    # and update the last_cell array\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n                last_cell[i][j] = (i, j)\n            elif i == 0:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n                last_cell[i][j] = (i, j-1)\n            elif j == 0:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n                last_cell[i][j] = (i-1, j)\n            else:\n                if dp[i-1][j] < dp[i][j-1]:\n                    dp[i][j] = cost[i][j] + dp[i-1][j]\n                    last_cell[i][j] = (i-1, j)\n                else:\n                    dp[i][j] = cost[i][j] + dp[i][j-1]\n                    last_cell[i][j] = (i, j-1)\n    \n    # Compute the maximum average path\n    total_cost = 0\n    max_path_average = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                total_cost = total_cost + cost[i][j]\n                num_cells_visited = 1\n            elif j == 0:\n                total_cost = total_cost + cost[i][j]\n                num_cells_visited = 1\n            else:\n                num_cells_visited = num_cells_visited + 1\n                path_average = total_cost / num_cells_visited\n                max_path_average = max(max_path_average, path_average)\n                \n                num_cells_visited = num_cells_visited + 1\n                total_cost = total_cost + cost[i][j]\n                \n                path_average = total_cost / num_cells_visited\n                max_path_average = max(max_path_average, path_average)\n    \n    return max_path_average\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            new_students[student] = students[student]\n    print(new_students)\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #Code\n    filter_data= {key:value for key, value in students.items() if value[0] > h and value[1] > w}\n    return filter_data\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    student_weight_list = []\n    for name,value in students.items():\n        if value[0] > h and value[1] > w:\n            student_weight_list.append(name)\n    return student_weight_list\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    dict_out = {}\n    for i in students.keys():\n        if (students[i][0] >= h and students[i][1] >= w):\n            dict_out[i] = students[i]\n    return dict_out\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    output=[]\n    for student in students:\n        if students[student][0]>=h and students[student][1]>=w:\n            output.append(student)\n    return output\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_dict = {}\n    for key in students:\n        if students[key][0] > h and students[key][1] > w:\n            new_dict[key] = students[key]\n    return new_dict\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for i in range(len(students)):\n        if students[i][0] < h and students[i][1] < w:\n            students.pop(i)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    final = {}\n    for key in students:\n        if students[key][0] >= h and students[key][1] >= w:\n            final[key] = students[key]\n    print(final)\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # write your code here\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return [x for x in students if x[1][0]>=h and x[1][1]>=w]\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len([i for i, j in enumerate(nums1) if eq(nums1[i], nums2[i])])\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return -1\n    elif len(nums1) == 0:\n        return 0\n    elif nums1[0] == nums2[0]:\n        return count_same_pair(nums1[1:], nums2[1:])\n    else:\n        return 0 + count_same_pair(nums1[1:], nums2[1:])\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j] and i!= j:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Inputs must be of equal length.\")\n    else:\n        num_list = list()\n        for num1, num2 in zip(nums1, nums2):\n            if eq(num1, num2):\n                num_list.append(nums1.index(num1))\n        return len(num_list)\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    sum_ = 0\n    for digit in base_str:\n        sum_ += int(digit) ** power\n    return sum_\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # base_digit = [int(i) for i in str(base)]\n    # power_digit = [int(i) for i in str(power)]\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for x in range(0, power+1):\n        total += base ** x\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in str(base**power):\n        sum += int(i)\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(0,power+1):\n        sum += base**i\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        result += base\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        sum += base % 10\n        base = base // 10\n        power = power - 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s = 0\n    for x in str(base**power):\n        s += int(x)\n    return s\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in list(str(base**power))])\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    nums_list = []\n    nums_list = base_to_nums(base)\n    if isinstance(power, int) and power > 0:\n        for x in range(power):\n            nums_list = sum_list(nums_list)\n        return nums_list\n    else:\n        return \"You are not gonna get anything.\"\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # print(re.findall(r'\"(.*?)\"', text1))\n    return re.findall(r'\"(.*?)\"', text1)\n    \ndef extract_space(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # print(re.findall(r'\\s+', text1))\n    return re.findall(r'\\s+', text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # x=re.findall(r'\\\"(.+?)\\\"',text1)\n    x=re.findall(r'\\\"(.+?)\\\"',text1)\n    return x\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # write your code here\n    return text1.split('\"')[1]\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    import re\n    import nltk\n    import string\n    import os\n    nltk.download('stopwords')\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from nltk.stem import WordNetLemmatizer\n    from nltk.tokenize import RegexpTokenizer\n    nltk.download('punkt')\n    nltk.download('sentiwordnet')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    import matplotlib.pyplot as plt\n    nltk.download('stopwords')\n    nltk.download('stopwords')\n    nltk.download('wordnet')\n    import nltk\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    nltk.download('stopwords')\n    stop_words = set(stopwords.words(\"english\"))\n    lemmatizer = WordNetLemmatizer()\n    tokenizer = RegexpTokenizer(r'\\w+')\n    punctuations = list(string.punctuation)\n    sentiment_analyzer = SentimentIntensityAnalyzer()\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    nltk.download('vader_lexicon')\n    import nltk\n    nltk.download('stopwords')\n    nltk.download('wordnet')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    nltk.download('stopwords')\n    nltk.download('punkt')\n    nltk.download('sentiwordnet')\n    nltk.download('averaged_perceptron_tagger')\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from nltk.tokenize import RegexpTokenizer\n    from nltk.tokenize import TweetTokenizer\n    from nltk.stem.wordnet import WordNetLemmatizer\n    from nltk.corpus import wordnet\n    nltk.download('stopwords')\n    nltk.download('wordnet')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    nltk.download('punkt')\n    nltk.download('sentiwordnet')\n    nltk.download('averaged_perceptron_tagger')\n    from nltk.tokenize import word_tokenize\n    from nltk.stem import WordNetLemmatizer\n    import re\n    import nltk\n    nltk.download('stopwords')\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from nltk.tokenize import RegexpTokenizer\n    from nltk.tokenize import TweetTokenizer\n    from nltk.stem.wordnet import WordNetLemmatizer\n    from nltk.corpus import wordnet\n    nltk.download('stopwords')\n    nltk.download('wordnet')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    nltk.download('punkt')\n    nltk.download('sentiwordnet')\n    nltk.download('averaged_perceptron_tagger')\n    from nltk.tokenize import word_tokenize\n    from nltk.stem import WordNetLemmatizer\n    import re\n    import nltk\n    nltk.download('stopwords')\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    nltk.download('stopwords')\n    nltk.download('punkt')\n    nltk.download('sentiwordnet')\n    nltk.download('vader_lexicon')\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from nltk.tokenize import RegexpTokenizer\n    from nltk.tokenize import TweetTokenizer\n    from nltk.stem.wordnet import WordNetLemmatizer\n    from nltk.corpus import wordnet\n    nltk.download('stopwords')\n    nltk.download('wordnet')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    nltk.download('punkt')\n    nltk.download('sentiwordnet')\n    nltk.download('averaged_perceptron_tagger')\n    from nltk.tokenize import word_tokenize\n    from nltk.stem import WordNetLemmatizer\n    import re\n    import nltk\n    nltk.download('stopwords')\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    nltk.download('stopwords')\n    nltk.download('punkt')\n    nltk.download('sentiwordnet')\n    nltk.download('vader_lexicon')\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from nltk.tokenize import RegexpTokenizer\n    from nltk.tokenize import TweetTokenizer\n    from nltk.stem.wordnet import WordNetLemmatizer\n    from nltk.corpus import wordnet\n    nltk.download('stopwords')\n    nltk.download('wordnet')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    nltk.download('punkt')\n    nltk.download('sentiwordnet')\n    nltk.download('averaged_perceptron_tagger')\n    from nltk.tokenize import word_tokenize\n    from nltk.stem import WordNetLemmatizer\n    import re\n    import nltk\n    nltk.download('stopwords')\n    nltk.download('wordnet')\n    nltk.download('averaged_perceptron_tagger')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    nltk.download('stopwords')\n    nltk.download('punkt')\n    nltk.download('sentiwordnet')\n    nltk.download('vader_lexicon')\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    from nltk.tokenize import RegexpTokenizer\n    from nltk.tokenize import TweetTokenizer\n    from nltk.stem.wordnet import WordNetLemmatizer\n    from nltk.corpus import wordnet\n    nltk.download('stopwords')\n    nltk.download('wordnet')\n    nltk.download('vader_lexicon')\n    from nltk.sentiment.vader import SentimentIntensityAnalyzer\n    nltk.download('punkt')\n    nltk.download('sentiwordnet')\n    nltk.download('averaged_perceptron_tagger')\n    from nltk.tokenize import word_tokenize\n    from nltk.stem import WordNetLemmatizer\n    import re\n    import nltk\n    nltk.download('stopwords')\n    nltk.downloa"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    text1 = '''\n    Beltmann: \"At the very least, we should call for a truth-teller.\"\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    import re\n    matches = re.findall(r'\\\"([^\"]*)\\\"', text1)\n    return matches\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    x = re.findall('\"\\w+\"', text1)\n    if x:\n        print('True')\n    else:\n        print('False')\ndef find_all_vowels(text):\n    '''\n    Write a function to find all vowels in the string.\n    '''\n    x = re.findall('[aeiouAEIOU]', text)\n    if x:\n        print('True')\n    else:\n        print('False')\ndef capitalize_first_letters(text):\n    '''\n    Write a function to capitalize only first letters of the words in the string.\n    '''\n    x = re.findall('[A-Z][a-z]*', text)\n    if x:\n        print(''.join(x))\n    else:\n        print('False')\ndef re_split(text):\n    '''\n    Write a function to split the words based on all separators and spaces.\n    '''\n    x = re.split('\\s+', text)\n    if x:\n        print(''.join(x))\n    else:\n        print('False')\ndef replace_char(text):\n    '''\n    Write a function to replace all the vowels in the string with the word \"PLATZI\".\n    '''\n    x = re.sub('a|e|i|o|u|A|E|I|O|U', 'PLATZI', text)\n    if x:\n        print(x)\n    else:\n        print('False')\ndef remove_vowels(text):\n    '''\n    Write a function to remove all vowels in the string.\n    '''\n    x = re.sub('[aeiouAEIOU]', '', text)\n    if x:\n        print(x)\n    else:\n        print('False')\ndef is_email(text):\n    '''\n    Write a function to match a valid email address in the string.\n    '''\n    x = re.findall('^[a-zA-Z0-9_]+@[a-zA-Z]+\\.[a-zA-Z]+$', text)\n    if x:\n        print('True')\n    else:\n        print('False')\ndef convert_lower_case(text):\n    '''\n    Write a function to convert the string to all lowercase letters.\n    '''\n    x = re.findall('[a-z]', text.lower())\n    if x:\n        print(''.join(x))\n    else:\n        print('False')\ndef count_words(text):\n    '''\n    Write a function to count the number of words in the string.\n    '''\n    x = re.findall('\\w+', text)\n    if x:\n        print(len(x))\n    else:\n        print('False')\ndef is_valid_date(date):\n    '''\n    Write a function to validate a date string in the following format: yyyy-mm-dd.\n    '''\n    x = re.findall('^\\d{4}-\\d{2}-\\d{2}$', date)\n    if x:\n        print('True')\n    else:\n        print('False')\ndef decimal_numbers(number):\n    '''\n    Write a function to match a string of decimal numbers, e.g: \"123.45\"\n    '''\n    x = re.findall('^\\d+(\\.\\d+)+$', number)\n    if x:\n        print('True')\n    else:\n        print('False')\ndef is_valid_phone(phone):\n    '''\n    Write a function to match a string of 10-15 digits.\n    '''\n    x = re.findall('^\\d{10,15}$', phone)\n    if x:\n        print('True')\n    else:\n        print('False')\ndef is_valid_url(url):\n    '''\n    Write a function to match a valid url in the string.\n    '''\n    x = re.findall('^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$', url)\n    if x:\n        print('True')\n    else:\n        print('False')\ndef remove_html_tags(text):\n    '''\n    Write a function to remove all html tags from the string.\n    '''\n    x = re.sub('<.*?>', '', text)\n    if x:\n        print('True')\n    else:\n        print('False')\ndef find_emails(text):\n    '''\n    Write a function to find all email addresses in the string.\n    '''\n    x = re.findall('\\S+@\\S+', text)\n    if x:\n        print(''.join(x))\n    else:\n        print('False')\ndef remove_multiple_spaces(text):\n    '''\n    Write a function to remove multiple spaces from the string.\n    '''\n    x = re.sub('\\s+','', text)\n    if x:\n        print('True')\n    else:\n        print('False')\ndef find_credentials(text):\n    '''\n    Write a function to match a string of the following format: \"username:password\"\n    '''\n    x = re.findall('[a-zA-Z0-9_]+:\\S+', text)\n    if x:\n        print('True')\n    else:\n        print('False')\ndef match_url(text):\n    '''\n    Write a function to match a valid url in the string.\n    '''\n    x = re.findall('https?://(?:www\\.|(?!www))[a-zA-Z0-9]+[\\-\\.]{1}[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+[\\-\\.]{1}[a-zA-Z0-9]+\\.[^\\s]{2,}', text)\n    if x:\n        print('True')\n    else:\n        print('False')\ndef replace_words(text):\n    '''\n    Write a function to replace all occurrences of \u201cPython\u201d with \u201cJava\u201d.\n    '''\n    x = re.sub('python', 'java', text)\n    if x:\n        print(x)\n    else:\n        print('False')\ndef print_all_occurrences(text, word):\n    '''\n    Write a function to print all occurrences of the word in the string.\n    '''\n    x = re.findall('\\w+'+word+'\\w+', text)\n    if x:\n        print(''.join(x))\n    else:\n        print('False')\ndef remove_starting_chars(text):\n    '''\n    Write a function to remove all occurrences of the word in the string.\n    '''\n    x = re.sub('^\\w+', '', text)\n    if x:\n        print(x)\n    else:\n        print('False')\ndef remove_ending_chars(text):\n    '''\n    Write a function to remove all occurrences of the word in the string.\n    '''\n    x = re.sub('\\w+$', '', text)\n    if x:\n        print(x)\n    else:\n        print('False')\ndef remove_empty_lines(text):\n    '''\n    Write a function to remove all empty lines from the string.\n    '''\n    x = re.sub('\\n\\s*\\n', '\\n', text)\n    if x:\n        print(x)\n    else:\n        print('False')\ndef remove_tabs(text):\n    '''\n    Write a function to remove all tabs from the string.\n    '''\n    x = re.sub('\\t', '', text)\n    if x:\n        print(x)\n    else:\n        print('False')\ndef replace_all_occurrences(text):\n    '''\n    Write a function to replace all occurrences of \"Python\" with \"Java\" in the string.\n    '''"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\"([^\"]*)\"', text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = '\"apple is healthy, I got it from my family\"'\n    text1 = text1.replace(\" \",\"\")\n    text1 = text1.replace(\"(\",\"\")\n    text1 = text1.replace(\")\",\"\")\n    text1 = text1.replace(\"-\",\"\")\n    text1 = text1.replace(\",\",\"\")\n    text1 = text1.replace(\"\u201c\",\"\")\n    text1 = text1.replace(\"\u201d\",\"\")\n    text1 = text1.replace(\"\u2018\",\"\")\n    text1 = text1.replace(\"\u2019\",\"\")\n    text1 = text1.replace(\"'\",\"\")\n    text1 = text1.replace(\"(\",\"\")\n    text1 = text1.replace(\")\",\"\")\n    text1 = text1.replace(\"-\",\"\")\n    text1 = text1.replace(\",\",\"\")\n    text1 = text1.replace(\"\u201c\",\"\")\n    text1 = text1.replace(\"\u201d\",\"\")\n    text1 = text1.replace(\"\u2018\",\"\")\n    text1 = text1.replace(\"\u2019\",\"\")\n    text1 = text1.replace(\"'\",\"\")\n    text1 = text1.replace(\"(\",\"\")\n    text1 = text1.replace(\")\",\"\")\n    print(text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(\"\\\"[^\\\"]*\\\"\", text1)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([int(i * j) for i, j in zip(test_tup[0::], test_tup[1::])])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # we can use the zip function and multiply the two tuples together\n    return zip(test_tup[:-1], test_tup[1:])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(0,len(test_tup) - 1):\n        result += ((test_tup[i], test_tup[i + 1] * test_tup[i]),)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([i*j for i,j in zip(test_tup, test_tup[1:])])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #start writing your code here\n    new_tup = ()\n    for i in range(len(test_tup)-1):\n        new_tup = new_tup + (test_tup[i] * test_tup[i+1],)\n    new_tup = new_tup + (test_tup[-1] * test_tup[0],)\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([i*j for i,j in zip(test_tup[0:],test_tup[1:])])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t_i*t_i_plus_1 for t_i,t_i_plus_1 in zip(test_tup, test_tup[1:]))\n    # return tuple(t_i*t_i_plus_1 for t_i in test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        new_tup += (test_tup[i]*test_tup[i+1],)\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(0, len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t_i * t_i+1 for t_i in test_tup)\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert(len(lst1)==len(lst2))\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Check if lst1 and lst2 are of equal length\n    assert len(lst1) == len(lst2), \"The two lists should be of same length\"\n    \n    # Create a new list\n    ans = []\n    for i in range(0, len(lst1)):\n        ans.append(lst1[i]+lst2[i])\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for (x,y) in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert isinstance(lst1,list)\n    assert isinstance(lst2,list)\n    assert len(lst1) == len(lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = [x+y for x,y in zip(lst1,lst2)]\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    ret = []\n    for i in nums:\n        if i not in seen:\n            ret.append(i)\n            seen.add(i)\n    return ret\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_lst = []\n    for k, g in groupby(nums):\n        new_lst.append(k)\n    return new_lst\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # For example: [0, 0, 1, 2, 3, 3] -> [0, 1, 2, 3]\n    # For example: [0, 0, 1, 1, 1, 1, 2, 3, 3] -> [0, 1, 2, 3]\n    for i, num in enumerate(nums):\n        if i < len(nums) - 1 and num == nums[i+1]:\n            nums[i+1] = None\n    return [num for num in nums if num is not None]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums=list(nums)\n    temp=[]\n    for i in nums:\n        if len(temp)<=1:\n            temp.append(i)\n        elif temp[-1]==i:\n            pass\n        else:\n            temp.append(i)\n    return temp\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    # result = []\n    # for item in nums:\n    #     if item in result:\n    #         continue\n    #     else:\n    #         result.append(item)\n    # return result\n    return [item for item, _ in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    list_no_duplicate = []\n    for i in nums:\n        if nums.count(i) > 1 and i not in list_no_duplicate:\n            list_no_duplicate.append(i)\n    return list_no_duplicate\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [i[0] for i in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    ans = []\n    for k, g in groupby(nums):\n        ans.append(int(\"\".join(map(str, g))))\n    return ans\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_list = []\n    for key, group in groupby(nums):\n        nums_list.append(key)\n    return nums_list\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * r * r\n    s += (math.pi * r * r) + (math.pi * r * r)\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"The lateral surface area of a cone with radius\",r,\"and height\",h,\"is:\",\n        2*r*math.pi+r**2*math.pi*h/3)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)+(math.pi*r**2)/3\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #defines a function to determine the surface area of a lateral surface\n    def lateral_surface(r,h):\n        return 3.14 * r**2 + 3.14 * r * h\n    #calculates the lateral surface area of the cone\n    lateral = lateral_surface(r,h)\n    #returns the lateral surface area\n    return lateral\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi*r**2\n    if h == 0:\n        return 0\n    return s + math.pi*r*(r+h)\n    \n    \ndef sumofdigit(n):\n    '''\n    Write a function to compute the sum of digits of a given number n.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    else:\n        return (n%10 + sumofdigit(int(n/10)))\n        \n        \ndef greatestcommonfactor(n,m):\n    '''\n    Write a function to compute the greatest common factor of two given numbers n and m.\n    '''\n    if n < 0 or m < 0:\n        return 0\n    elif m == 0 or n == 0:\n        return 0\n    elif n == m:\n        return n\n    else:\n        return greatestcommonfactor(n, m-1)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi=3.14159265359\n    if r<0 or h<0:\n        return None\n    else:\n        base_area=(math.pi*(r**2))/4\n        side_area=(pi*r*h)\n        lateral_area=base_area+side_area\n        return lateral_area\ndef linearequation(a,b,c):\n    '''\n    Write a function to find the solution of a quadratic equation\n    '''\n    disc=(b**2)-(4*a*c)\n    x=0\n    if disc>=0:\n        disc_root=math.sqrt(disc)\n        x=(-b+disc_root)/(2*a)\n        return x\n    else:\n        return None\ndef triangular_prism(b,h):\n    '''\n    Write a function to find the lateral surface area of a triangular prism given the base area b and the height h.\n    '''\n    pi=3.14159265359\n    lateral_area=(pi*(b**2))/2\n    if h<0:\n        return None\n    else:\n        lateral_area+=b*h\n        return lateral_area\ndef lateral_triangle(b,h):\n    '''\n    Write a function to find the lateral surface area of a triangular prism given the base area b and the height h.\n    '''\n    pi=3.14159265359\n    lateral_area=(pi*(b**2))/2\n    if h<0:\n        return None\n    else:\n        lateral_area+=b*h\n        return lateral_area\ndef lateral_rectangular_prism(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism given the base area a, the length of the sides b and the height h.\n    '''\n    pi=3.14159265359\n    lateral_area=(2*a*b)+((a**2)+(b**2))/2\n    if h<0:\n        return None\n    else:\n        lateral_area+=a*h\n        return lateral_area\ndef lateral_rectangular_triangle(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular triangle given the base area a, the length of the sides b and the height h.\n    '''\n    pi=3.14159265359\n    lateral_area=(2*a*b)+((a**2)+(b**2))/2\n    if h<0:\n        return None\n    else:\n        lateral_area+=a*h\n        return lateral_area\ndef lateral_parallelogram(a,b):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given the base area a and the height b.\n    '''\n    lateral_area=(a*b)\n    return lateral_area\ndef lateral_square(a):\n    '''\n    Write a function to find the lateral surface area of a square given the base area a.\n    '''\n    lateral_area=a\n    return lateral_area\ndef lateral_rightangle_triangle(a,h):\n    '''\n    Write a function to find the lateral surface area of a right angle triangle given the base area a and the height h.\n    '''\n    pi=3.14159265359\n    lateral_area=((a**2)/2)+h\n    return lateral_area\ndef lateral_rightangle_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a right angle rectangle given the base area a and the length of the sides b.\n    '''\n    lateral_area=a+b\n    return lateral_area\ndef lateral_rightangle_parallelogram(a,b):\n    '''\n    Write a function to find the lateral surface area of a right angle parallelogram given the base area a and the length of the sides b.\n    '''\n    lateral_area=a+b\n    return lateral_area\ndef lateral_parallelogram_rightangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a right angle parallelogram given the base area a and the length of the sides b.\n    '''\n    lateral_area=a+b\n    return lateral_area\ndef lateral_rightangle_rectangular_triangle(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a right angle rectangular triangle given the base area a, the length of the sides b and the height h.\n    '''\n    pi=3.14159265359\n    lateral_area=a+b+((a**2)+(b**2))/2+h\n    return lateral_area\ndef lateral_rectangular_parallelogram_rightangle(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a right angle rectangular parallelogram given the base area a, the length of the sides b and the height h.\n    '''\n    pi=3.14159265359\n    lateral_area=a+b+((a**2)+(b**2))/2+h\n    return lateral_area\ndef lateral_square_rightangle(a):\n    '''\n    Write a function to find the lateral surface area of a right angle square given the base area a.\n    '''\n    lateral_area=a\n    return lateral_area\ndef lateral_rectangular_triangle_rightangle(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a right angle rectangular triangle given the base area a, the length of the sides b and the height h.\n    '''\n    pi=3.14159265359\n    lateral_area=a+b+((a**2)+(b**2))/2+h\n    return lateral_area\ndef lateral_triangle_rightangle(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a right angle triangle given the base area a, the length of the sides b and the height h.\n    '''\n    pi=3.14159265359\n    lateral_area=a+b+((a**2)+(b**2))/2+h\n    return lateral_area\ndef lateral_rightangle_rectangular_parallelogram(a,b):\n    '''\n    Write a function to find the lateral surface area of a right angle rectangular parallelogram given the base area a, the length of the sides b.\n    '''\n    lateral_area=a+b\n    return lateral_area\ndef lateral_parallelogram_rectangular_rightangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangular parallelogram given the base area a and the length of the sides b.\n    '''\n    lateral_area=a+b\n    return lateral_area\ndef lateral_parallelogram_triangle_rightangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangular parallelogram given the base area a and the length of the sides b.\n    '''\n    lateral_area=a+b\n    return lateral_area\ndef lateral_triangle_parallelogram(a,b):\n    '''\n    Write a function to find the lateral surface area of a triangular parallelogram given the base area a and the length of the sides b.\n    '''\n    lateral_area=a+b\n    return lateral_area\ndef lateral_triangle_square(a):\n    '''\n    Write a function to find the lateral surface area of a triangular square given the base area a.\n    '''\n    lateral_area=a\n    return lateral_area\ndef lateral_square_rectangle(a):\n    '''\n    Write a function to find the lateral surface area of a square rectangular parallelogram given the base area a.\n    '''\n    lateral_area=a\n    return lateral_area\ndef lateral_rectangle_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangular parallelogram given the base area a and the length of the sides b.\n    '''\n    lateral_area=a+b\n    return lateral_area\ndef lateral_rightangle_parallelogram_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a right angle rectangular parallelogram given the base area a an"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    result = math.pi*(r**2) + 2*math.pi*r*h\n    return result\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 3.14*r**2 + 2*3.14*r*h\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = 3.14159\n    surface_area = (3.14159*r*r)+(3.14159*r*math.sqrt(r*r+h*h))\n    return surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    lateral_surface_area = (pi * (r**2)) + ((pi * r**2) * (h/2))\n    return lateral_surface_area\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[\\.,\\s]\", \":\", text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return(text.replace(' ',':'))\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # use built-in replace\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[ |,|.]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\",\", \":\").replace(\".\", \":\").replace(\" \", \":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # remove all special characters\n    text = re.sub('[,.:; ]', '', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('.', ':')\n    text = text.replace(',', ':')\n    text = text.replace(' ', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    \n    return text.replace(' ',':').replace(',',' ').replace('.',' ')\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    if text is None:\n        return ''\n    else:\n        return re.sub('[.,\\s]',':',text)\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A)-1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if x > A[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while(low <= high):\n        mid = (low + high) // 2\n        if x == A[mid]:\n            if (mid == 0 or x > A[mid - 1]):\n                return mid\n            high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        elif x > A[mid]:\n            left = mid + 1\n    return result\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n    \n    while low <= high:\n        mid = (high+low)//2\n        if A[mid] < x:\n            low = mid+1\n        elif A[mid] > x:\n            high = mid-1\n        else:\n            if mid-1 < 0:\n                return mid\n            if A[mid-1]!= x:\n                return mid\n            high = mid-1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first, last = 0, len(A)-1\n    \n    while first <= last:\n        mid = (first + last) // 2\n        \n        if x < A[mid]:\n            last = mid - 1\n        elif x > A[mid]:\n            first = mid + 1\n        else:\n            if mid == 0 or x!= A[mid-1]:\n                return mid\n            else:\n                last = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if A[mid - 1]!= A[mid]:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A)-1\n    \n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1 if low < len(A) and A[low] == x else low\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    start, end = 0, len(A)-1\n    while start <= end:\n        mid = (start + end) // 2\n        if x == A[mid]:\n            if mid == 0 or x!= A[mid-1]:\n                return mid\n            end = mid - 1\n        elif x > A[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sub_array_list = []\n    product = 1\n    for sub_array_len in range(len(arr)+1):\n        for i in range(len(arr)+1-sub_array_len):\n            sub_array_list.append([arr[i:i+sub_array_len]])\n    for sub_array in sub_array_list:\n        for num in sub_array:\n            product = product*num\n    print(product)\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod_so_far = 1\n    sum_of_prod = 0\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_len = len(arr)\n    result = 0\n    for i in range(arr_len+1):\n        for j in range(i+1, arr_len+1):\n            temp = 1\n            for k in range(i, j):\n                temp *= arr[k]\n            result += temp\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    size = len(arr)\n    if size == 0:\n        return 0\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod_sum = 0\n    temp = 1\n    for i in range(n):\n        temp *= arr[i]\n        prod_sum += temp\n    temp = 1\n    for j in range(n-1, -1, -1):\n        temp *= arr[j]\n        prod_sum += temp\n    return prod_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #use hashmap to store frequency of each element in arr\n    freq = {}\n    for i in arr:\n        freq[i] = arr.count(i)\n    \n    #check if arr is empty, if yes then return 0\n    if not arr:\n        return 0\n    \n    #arr.sort()\n    #iterate over each element\n    ans = 0\n    for i in range(len(arr)):\n        #if we have only 1 occurrence of arr[i] then we don't have to do further computation\n        if freq[arr[i]] == 1:\n            ans += arr[i]\n        else:\n            #nums stores the elements that have duplicates\n            nums = []\n            #find if there are any duplicates of arr[i]\n            for j in range(i,len(arr)):\n                if arr[j] == arr[i]:\n                    nums.append(arr[j])\n            #if no duplicates then compute sum of products of sublist with arr[i]\n            if not nums:\n                ans += arr[i]*arr[i]\n            #if there are duplicates then we need to compute sum of products of sublist with arr[i] and each element of nums\n            else:\n                p = 1\n                for j in range(len(nums)):\n                    p *= (arr[i]*nums[j])\n                ans += p\n    return ans\n    \n    \ndef triangle_Pascal(n):\n    '''\n    https://www.geeksforgeeks.org/triangle-pascal-triangle-dp-18/\n    Write a python function to find nth row of Pascal's triangle.\n    '''\n    #return the nth row of triangle\n    arr = [[1]*(n+1) for i in range(n+1)]\n    for i in range(2,n+1):\n        for j in range(1,i):\n            arr[i][j] = arr[i-1][j-1] + arr[i-1][j]\n    return arr[n]\n    \ndef pattern_Pascal(n):\n    '''\n    https://www.geeksforgeeks.org/pattern-pascal-triangle-dp-18/\n    Write a python function to find nth row of Pascal's triangle.\n    '''\n    #return the nth row of triangle\n    arr = [[1]*(n+1) for i in range(n+1)]\n    for i in range(2,n+1):\n        for j in range(1,i):\n            arr[i][j] = arr[i-1][j-1] + arr[i-1][j]\n    return arr\n    \ndef subset_Sum_Subarray(arr):\n    '''\n    Write a python function to find number of subarrays whose sum is divisible by k. https://www.geeksforgeeks.org/count-number-subarrays-sum-k-divisible-k/\n    '''\n    #number of subarrays having sum divisible by k\n    dp = [[0 for i in range(sum(arr)+1)] for i in range(len(arr)+1)]\n    \n    for i in range(len(dp)):\n        for j in range(len(dp[0])):\n            if i == 0 and j == 0:\n                dp[i][j] = 1\n            elif i == 0:\n                dp[i][j] = 0\n            elif j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i][j-arr[i-1]] + dp[i-1][j]\n    \n    return dp[-1][-1]\n    \ndef subset_Sum_Subarray_HashMap(arr,k):\n    '''\n    Write a python function to find number of subarrays whose sum is divisible by k. https://www.geeksforgeeks.org/count-number-subarrays-sum-k-divisible-k/\n    '''\n    #number of subarrays having sum divisible by k\n    dp = [[0 for i in range(sum(arr)+1)] for i in range(len(arr)+1)]\n    \n    for i in range(len(dp)):\n        for j in range(len(dp[0])):\n            if i == 0 and j == 0:\n                dp[i][j] = 1\n            elif i == 0:\n                dp[i][j] = 0\n            elif j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i][j-arr[i-1]] + dp[i-1][j]\n    \n    #return dp[-1][-1]\n    #now we need to find the number of subarrays having sum divisible by k\n    hashmap = {}\n    count = 0\n    for i in range(len(dp)):\n        for j in range(len(dp[0])):\n            key = str(i) + \":\" + str(j)\n            hashmap[key] = dp[i][j]\n    \n    for i in hashmap:\n        if hashmap[i] > 0:\n            if k % hashmap[i] == 0:\n                count += hashmap[i]\n    \n    return count\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod=1\n    l=[]\n    for i in range(len(arr)):\n        prod=prod*arr[i]\n        l.append(prod)\n    \n    res=[]\n    for i in range(len(l)):\n        for j in range(i,len(l)):\n            res.append(l[j]-l[i])\n    return sum(res)\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_subarrays = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            subarray = arr[i:j+1]\n            print(subarray)\n            product = 1\n            for x in subarray:\n                product = product*x\n            sum_of_subarrays = sum_of_subarrays + product\n    return sum_of_subarrays\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        j = i\n        prod = 1\n        while j < len(arr):\n            prod *= arr[j]\n            sum += prod\n            j += 1\n    return sum\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # return ((n >> 2) ^ ((n & 1) << 1))\n    return ~((~n & (2**(len(bin(n))-2))+1) << 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit_mask = 1\n    while bit_mask <= n:\n        n ^= bit_mask\n        bit_mask <<= 1\n    return n\nprint(set_middle_bits(101))\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n >> 1)\n    n = n ^ (n << 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(bin(n))\n    print(bin(n & 0b
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n & ~(0b111111 << 1)) >> 1) | ((n & ~(0b111111)) << 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print (\"Original Number  : \",n) \n    n = n ^ (1 << 1) \n    n = n ^ (1 << 2) \n    n = n ^ (1 << 3) \n    print (\"Modified Number  : \",n)\n    return n \n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n ^= n >> 1\n    n ^= n >> 2\n    n ^= n >> 4\n    n ^= n >> 8\n    n ^= n >> 16\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle(n):\n        return n ^ (1 << len(bin(n)) - 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n >> 1)\n    n = n ^ (n << 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b11111110\n    n &= mask\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    return n\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i, j in enumerate(a):\n        if x >= j:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x in a:\n        return a.index(x)\n    else:\n        bisect.bisect(a, x)\n        return a.index(x)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if a[i] >= x:\n            a.insert(i,x)\n            return\n    a.append(x)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # a is the list of numbers, x is the target number\n    if len(a) == 0:\n        return 0\n    else:\n        if x > a[-1]:\n            return len(a)\n        elif x < a[0]:\n            return 0\n        else:\n            i = bisect.bisect_left(a, x)\n            if x == a[i]:\n                return i\n            else:\n                return i - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    print(i)\n    if i == 0:\n        print(-1)\n    else:\n        print(i)\n    return\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Search for the index of the first value greater than x\n    i = bisect.bisect_left(a, x, 0, len(a))\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    b = []\n    for i in range(0, len(a)):\n        b.append(a[i])\n    if x in b:\n        return b.index(x)\n    else:\n        bisect.insort(b, x)\n        return b.index(x)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    i = bisect.bisect_left(a, x)\n    if i < len(a) and a[i] == x:\n        return i\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = bisect.bisect_left(a, x)\n    if l >= len(a) or a[l]!= x:\n        return l\n    else:\n        while a[l] == x:\n            l += 1\n        return l\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = bisect.bisect_right(a, x)\n    if l >= len(a) or a[l]!= x:\n        return l\n    else:\n        while a[l] == x:\n            l += 1\n        return l\ndef find_left_index(a, x):\n    '''\n    Write a function to locate the left index for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = bisect.bisect_left(a, x)\n    if l < len(a) and a[l] == x:\n        return l\n    else:\n        return -1\ndef find_right_index(a, x):\n    '''\n    Write a function to locate the right index for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = bisect.bisect_right(a, x)\n    if l < len(a) and a[l] == x:\n        return l\n    else:\n        return -1\ndef binary_search_iterative(a, x):\n    '''\n    Write a function to find the index of a specified value in a sorted array using binary search. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    mid = 0\n    while l <= r:\n        mid = (l + r) // 2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\ndef binary_search_recursive(a, x, l=0, r=0):\n    '''\n    Write a function to find the index of a specified value in a sorted array using binary search. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if l <= r:\n        mid = (l + r) // 2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            return binary_search_recursive(a, x, l, mid - 1)\n        else:\n            return binary_search_recursive(a, x, mid + 1, r)\n    else:\n        return -1\ndef binary_search_iterative_modified(a, x):\n    '''\n    Write a function to find the index of a specified value in a sorted array using binary search. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            r = mid - 1\n        else:\n            l = mid + 1\n    if l > r:\n        return -1\n    else:\n        return l\ndef binary_search_recursive_modified(a, x, l=0, r=0):\n    '''\n    Write a function to find the index of a specified value in a sorted array using binary search. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if l <= r:\n        mid = (l + r) // 2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            return binary_search_recursive_modified(a, x, l, mid - 1)\n        else:\n            return binary_search_recursive_modified(a, x, mid + 1, r)\n    else:\n        return -1\ndef linear_search(a, x):\n    '''\n    Write a function to find the index of a specified value in a sorted array using linear search. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if a[i] == x:\n            return i\n    return -1\ndef linear_search_iterative(a, x):\n    '''\n    Write a function to find the index of a specified value in a sorted array using linear search. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if x == a[i]:\n            return i\n    return -1\ndef linear_search_recursive(a, x, l=0, r=0):\n    '''\n    Write a function to find the index of a specified value in a sorted array using linear search. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if l <= r:\n        mid = (l + r) // 2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            return linear_search_recursive(a, x, l, mid - 1)\n        else:\n            return linear_search_recursive(a, x, mid + 1, r)\n    else:\n        return -1\ndef search_rotated_sorted_array(a, x):\n    '''\n    Write a function to find the index of a specified value in a rotated sorted array using binary search. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left_index = left_insertion(a, x)\n    right_index = right_insertion(a, x)\n    if left_index == -1:\n        return binary_search_iterative(a, x)\n    else:\n        if right_index == len(a) or a[left_index]!= x:\n            return left_index\n        else:\n            while a[left_index] == x:\n                left_index += 1\n            return left_index\ndef search_rotated_sorted_array_modified(a, x):\n    '''\n    Write a function to find the index of a specified value in a rotated sorted array using binary search. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left_index = left_insertion(a, x)\n    right_index = right_insertion(a, x)\n    if left_index == -1:\n        return binary_search_iterative_modified(a, x)\n    else:\n        if right_index == len(a) or a[left_index]!= x:\n            return left_index\n        else:\n            while a[left_index] == x:\n                left_index +"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if (re.search(regex,string)): \n        return True \n    else: \n        return False \nprint(check_str(\"regex\")) \nprint(check_str(\"car\")) \nprint(check_str(\"aeiou\")) \nprint(check_str(\"aeiouAEIOU\")) \nprint(check_str(\"aeiouAEIOU_a\")) \nprint(check_str(\"_aeiouAEIOU\")) \nprint(check_str(\"aeiouAEIOU_a_\")) \nprint(check_str(\"aeiouAEIOU_a_a\")) \nprint(check_str(\"_aeiouAEIOU_a_a\")) \nprint(check_str(\"_aeiouAEIOU_a_a_\")) \nprint(check_str(\"\")) \nprint(check_str(\"_aeiouAEIOU_a_a_\")) \nprint(check_str(\"_aeiouAEIOU_a_a\")) \nprint(check_str(\"_aeiouAEIOU_a\")) \nprint(check_str(\"aeiouAEIOU_a\")) \nprint(check_str(\"aeiouAEIOU_a_\")) \nprint(check_str(\"aeiouAEIOU\")) \nprint(check_str(\"aeiouAEIOU_\")) \nprint(check_str(\"aeiouAEIOU_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex,string)\nprint(check_str(\"ABCDEFG\"))\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string) \n    if match: \n        return 'String Starts With a Vowel'\n    else: \n        return 'String Doesnt Starts With a Vowel'\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex, string)): \n        print(string, \"Starting with a vowel\")\n    else: \n        print(string, \"Not starting with a vowel\")\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    try:\n        regex_match = re.search(regex, string)\n        if regex_match:\n            print('String is starting with a vowel')\n        else:\n            print('String is not starting with a vowel')\n    except TypeError:\n        print('Please check your input format and try again')\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.search(regex, string)\n    return bool(matches)\n    \n    # return True if string.startswith(('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')) else False \n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string)) \n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string): \n        print(True) \n    else: \n        print(False) \n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex, string)\n    if(result):\n        return True\n    else:\n        return False\nprint(check_str('test'))\nprint(check_str('asdf'))\nprint(check_str('aSdf')"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def g_sum(n):\n        if n == 0:\n            return 0\n        return n + g_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 / (2-n) + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return 2**(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*(1 - geometric_sum(n - 1))\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return 2 * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2 * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while(1): \n        if (math.log10(i) + 1 == n): \n            return i \n        i += 1\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    if n == 1: \n        return 1\n    if n > 1: \n        for i in range(1, n + 1): \n            index = (i * (i + 1)) // 2\n            if n <= index: \n                break\n    return index \n    \ndef find_Triangular_Number(n): \n    '''\n    Write a python function to find the nth triangular number\n    '''\n    if n < 1: \n        return -1\n    return (n * (n + 1)) // 2\n    \ndef get_factors(n): \n    '''\n    Write a python function to print the factors of the given number\n    '''\n    for i in range(1, n + 1): \n        if (n % i == 0): \n            print(i, end = \" \") \n    print() \n    \ndef get_Perfect_number(n): \n    '''\n    Write a python function to print the perfect numbers from 1 to the given number\n    '''\n    for i in range(1, n + 1): \n        sum = 0\n        for j in range(1, i): \n            if (i % j == 0): \n                sum += j \n        if (sum == i): \n            print(i, end = \" \") \n    print() \n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Every term is the sum of the two preceding terms. The first term is 0 and the second term is 1. \n    # The third term is 1 and the fourth term is 2. \n    # The fifth term is 2 and the sixth term is 3. \n    # The seventh term is 3 and the eighth term is 4. \n    # The ninth term is 4 and the tenth term is 5. \n    # The eleventh term is 5 and the twelfth term is 6. \n    # The thirteenth term is 6 and the fourteenth term is 7. \n    # The fifteenth term is 7 and the sixteenth term is 8. \n    # The seventeenth term is 8 and the eighteenth term is 9. \n    # The nineteenth term is 9 and the twentieth term is 10. \n    # The twenty-first term is 10 and the twenty-second term is 11. \n    # The twenty-third term is 11 and the twenty-fourth term is 12. \n    # The twenty-fifth term is 12 and the twenty-sixth term is 13. \n    # The twenty-seventh term is 13 and the twenty-eighth term is 14. \n    # The twenty-ninth term is 14 and the thirtieth term is 15. \n    # The thirty-first term is 15 and the thirty-second term is 16. \n    # The thirty-third term is 16 and the thirty-fourth term is 17. \n    # The thirty-fifth term is 17 and the thirty-sixth term is 18. \n    # The thirty-seventh term is 18 and the thirty-eighth term is 19. \n    # The thirty-ninth term is 19 and the fourteenth term is 20. \n    # The fifteenth term is 20 and the sixteenth term is 21. \n    # The seventeenth term is 21 and the eighteenth term is 22. \n    # The nineteenth term is 22 and the twentieth term is 23. \n    # The twenty-first term is 23 and the twenty-second term is 24. \n    # The twenty-third term is 24 and the twenty-fourth term is 25. \n    # The twenty-fifth term is 25 and the twenty-sixth term is 26. \n    # The twenty-seventh term is 26 and the twenty-eighth term is 27. \n    # The twenty-ninth term is 27 and the thirtieth term is 28. \n    # The thirty-first term is 28 and the thirty-second term is 29. \n    # The thirty-third term is 29 and the thirty-fourth term is 30. \n    # The thirty-fifth term is 30 and the thirty-sixth term is 31. \n    # The thirty-seventh term is 31 and the thirty-eighth term is 32. \n    # The thirty-ninth term is 32 and the fourteenth term is 33. \n    # The fifteenth term is 33 and the sixteenth term is 34. \n    # The seventeenth term is 34 and the eighteenth term is 35. \n    # The nineteenth term is 35 and the twentieth term is 36. \n    # The twenty-first term is 36 and the twenty-second term is 37. \n    # The twenty-third term is 37 and the twenty-fourth term is 38. \n    # The twenty-fifth term is 38 and the twenty-sixth term is 39. \n    # The twenty-seventh term is 39 and the twenty-eighth term is 40. \n    # The twenty-ninth term is 40 and the thirtieth term is 41. \n    # The thirty-first term is 41 and the thirty-second term is 42. \n    # The thirty-third term is 42 and the thirty-fourth term is 43. \n    # The thirty-fifth term is 43 and the thirty-sixth term is 44. \n    # The thirty-seventh term is 44 and the thirty-eighth term is 45. \n    # The thirty-ninth term is 45 and the fourteenth term is 46. \n    # The fifteenth term is 46 and the sixteenth term is 47. \n    # The seventeenth term is 47 and the eighteenth term is 48. \n    # The nineteenth term is 48 and the twentieth term is 49. \n    # The twenty-first term is 49 and the twenty-second term is 50. \n    # The twenty-third term is 50 and the twenty-fourth term is 51. \n    # The twenty-fifth term is 51 and the twenty-sixth term is 52. \n    # The twenty-seventh term is 52 and the twenty-eighth term is 53. \n    # The twenty-ninth term is 53 and the thirtieth term is 54. \n    # The thirty-first term is 54 and the thirty-second term is 55. \n    # The thirty-third term is 55 and the thirty-fourth term is 56. \n    # The thirty-fifth term is 56 and the thirty-sixth term is 57. \n    # The thirty-seventh term is 57 and the thirty-eighth term is 58. \n    # The thirty-ninth term is 58 and the fourteenth term is 59. \n    # The fifteenth term is 59 and the sixteenth term is 60. \n    # The seventeenth term is 60 and the eighteenth term is 61. \n    # The nineteenth term is 61 and the twentieth term is 62. \n    # The twenty-first term is 62 and the twenty-second term is 63. \n    # The twenty-third term is 63 and the twenty-fourth term is 64. \n    # The twenty-fifth term is 64 and the twenty-sixth term is 65. \n    # The twenty-seventh term is 65 and the twenty-eighth term is 66. \n    # The twenty-ninth term is 66 and the thirtieth term is 67. \n    # The thirty-first term is 67 and the thirty-second term is 68. \n    # The thirty-third term is 68 and the thirty-fourth term is 69. \n    # The thirty-fifth term is 69 and the thirty-sixth term is 70. \n    # The thirty-seventh term is 70 and the thirty-eighth term is 71. \n    # The thirty-ninth term is 71 and the fourteenth term is 72. \n    # The fifteenth term is 72 and the sixteenth term is 73. \n    # The seventeenth term is 73 and the eighteenth term is 74. \n    # The nineteenth term is 74 and the twentieth term is 75. \n    # The twenty-first term is 75 and the twenty-second term is 76. \n    # The twenty-third term is 76 and the twenty-fourth term is 77. \n    # The twenty-fifth term is 77 and the twenty-sixth term is 78. \n    # The twenty-seventh term is 78 and the twenty-eighth term is 79. \n    # The twenty-ninth term is 79 and the thirtieth term is 80. \n    # The thirty-first term is 80 and the thirty-second term is 81. \n    # The thirty-third term is 81 and the thirty-fourth term is 82. \n    # The thirty-fifth term is 82 and the thirty-sixth term is 83. \n    # The thirty-seventh term is 83 and the thirty-eighth term is 84. \n    # The thirty-ninth term is 84 and the fourteenth term is 85. \n    # The fifteenth term is 85 and the sixteenth term is 86. \n    # The seventeenth term is 86 and the eighteenth term is 87. \n    # The nineteenth term is 87 and the twentieth term is 88. \n    # The twenty-first term is 88 and the twenty-second term is 89. \n    # The twenty-third term is 89 and the twenty-fourth term is 90. \n    # The twenty-fifth term is 90 and the twenty-sixth term is 91. \n    # The twenty-seventh term is 91 and the twenty-eighth term is 92. \n    # The twenty-ninth term is 92 and the thirtieth term is 93. \n    # The thirty-first term is 93 and the thirty-second term is 94. \n    # The thirty-third term is 94 and the thirty-fourth term is 95. \n    # The thirty-fifth term is 95 and the thirty-sixth term is 96. \n    # The thirty-seventh term is 96 and the thirty-eighth term is 97. \n    # The thirty-ninth term is 97 and the fourteenth term is 98. \n    # The fifteenth term is 98 and the sixteenth term is 99. \n    # The seventeenth term is 99 and the eighteenth term is 100. \n    # The nineteenth term is 100 and the twentiet"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a = int(n)\n    t=1\n    for i in range(1,n):\n        t += i\n        if(len(str(t)) == n):\n            return i\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # a = [0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 315, 351, 370, 390, 421, 456, 486, 527, 576, 616, 657, 693, 741, 784, 826, 876, 927, 979, 1015]\n    a = [0]\n    for i in range(1,10):\n        a.append(a[i-1]+i)\n    a.sort()\n    # print(a)\n    for i in range(len(a)):\n        if len(str(a[i])) == n:\n            return a[i]\n        else:\n            pass\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 1\n    while True: \n        triangle = count * (count + 1) / 2\n        if len(str(triangle)) == n:\n            return triangle\n        count += 1\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Value of 10^7 \n    MAX = 1000000000\n    # Variable to store \n    # the smallest value. \n    # Initialize it with \n    # a value greater than \n    # maximum value of n. \n    min_ = MAX + 1\n    # Find all possible values \n    # for n-th triangular number. \n    for i in range(1, n + 1): \n        # Find value of n-th \n        # triangular number. \n        temp = (i * (i + 1)) // 2\n        # If its value is less \n        # than the minimum value, \n        # then update the value of \n        # minimum and its index. \n        if temp < min_: \n            min_ = temp \n            index = i \n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def find_Triangular_Number(n): \n        x = 0\n        for i in range(1, n + 1): \n            x += i \n        return x \n    \n    def check_triangular(n): \n        '''\n        Write a python function to check whether a given number is a triangular number or not. https://www.geeksforgeeks.org/python-program-check-given-number-triangular-number-not/\n        '''\n        sq = int(math.sqrt(n)) \n        return (sq * (sq + 1)) // 2 == n \n    \n    # for n = 1, return 0 because n is already a triangular number \n    if (n == 1): \n        return 0\n    \n    # find the smallest triangular number with n digits \n    num = find_Triangular_Number(n) \n    \n    # check if the smallest triangular number with n digits has n digits \n    if (check_triangular(num)): \n        return num \n    \n    # check if the smallest triangular number with n digits is less than current index \n    # if yes then return its index \n    num = find_Triangular_Number(n - 1) \n    if (num < n): \n        return n - 1\n    \n    # if not then return the index of smallest triangular number with n-1 digits \n    return find_Index(n - 1) \n    "
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Variable to store nth \n    # triangular number\n    n_th_trib = 0\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for i in range(1,n+1):\n        index = index + i\n    return index\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print(\"Input: {}\".format(test_tup))\n    print(\"Output: {}\".format(dict(zip(test_tup[0::2], test_tup[1::2]))))\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for idx,val in enumerate(test_tup):\n        if idx%2 == 0:\n            dict[val] = test_tup[idx+1]\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    temp = dict()\n    for i in range(0, len(test_tup)):\n        if i % 2 == 0:\n            temp[test_tup[i]] = test_tup[i + 1]\n    return temp\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print(type(test_tup))\n    test_dict = {}\n    for i in range(0,len(test_tup),2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return(test_dict)\n    \n    \ntest_tup = ('Geeks', 'For', 'Geeks', 'is', 'portal', 'for', 'Geeks')\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup)-1, 2)}\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = dict()\n    i=0\n    while i < len(test_tup):\n        test_dict.update({test_tup[i]:test_tup[i+1]})\n        i+=2\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    keys = 'abcdef'\n    new_dict = {}\n    for index in range(len(test_tup)):\n        new_dict[keys[index]] = test_tup[index]\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1 :\n        return True\n    elif len(s) == 0 :\n        return True\n    else :\n        return False\n    # Code here\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0,len(s)-1):\n        if s[i]!=s[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0, len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True\nprint(all_Characters_Same('python'))\nprint(all_Characters_Same('python') == False)\nprint(all_Characters_Same('python') == True)\nprint(all_Characters_Same('pytho'))\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = s.replace(\" \", \"\")\n    return len(set(s)) == 1\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    result = False\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if(len(s) == 0 or len(s) == 1) :\n        return True\n    else :\n        for i in range(0,len(s)-1) :\n            if(s[i]!= s[i+1]) :\n                return False\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(char == s[0] for char in s)\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[0]!= s[i] :\n            return False\n    return True\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(3)/4) * (side * side)\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return side * side\ndef area_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the area of a triangle\n    '''\n    s = (side1 + side2 + side3) / 2\n    return (math.sqrt(s * (s - side1) * (s - side2) * (s - side3)))\ndef area_parallelogram(side1, side2):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return side1 * side2\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi * radius * radius\ndef volume_cuboid(width, length, height):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return width * length * height\ndef volume_cone(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return (1/3) * math.pi * radius * radius * height\ndef volume_pyramid(width, length, height):\n    '''\n    Write a function to calculate the volume of a pyramid.\n    '''\n    return 1/3 * width * length * height\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return math.pi * radius * radius * height\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4/3) * math.pi * radius * radius * radius\ndef volume_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    s = (side1 + side2 + side3) / 2\n    return (s * (s - side1) * (s - side2) * (s - side3))**(1/2)\ndef area_parallelogram_2(side1, side2):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return side1 * side2\ndef volume_cylinder_2(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return math.pi * radius * radius * height\ndef volume_pyramid_2(width, length, height):\n    '''\n    Write a function to calculate the volume of a pyramid.\n    '''\n    return 1/3 * width * length * height\ndef volume_cone_2(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return 1/3 * math.pi * radius * radius * height\ndef area_circle_2(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi * radius * radius\ndef volume_sphere_2(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4/3) * math.pi * radius * radius * radius\ndef volume_triangle_2(side1, side2, side3):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    s = (side1 + side2 + side3) / 2\n    return (s * (s - side1) * (s - side2) * (s - side3))**(1/2)\ndef volume_cube(width, height, length):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return width * height * length\ndef perimeter_parallelogram(side1, side2):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    return side1 + side2 + side1 + side2\ndef perimeter_square(side):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    return 4 * side\ndef perimeter_triangle(side1, side2, side3):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    return side1 + side2 + side3\ndef perimeter_circle(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2 * math.pi * radius\ndef perimeter_pyramid(width, length, height):\n    '''\n    Write a function to calculate the perimeter of a pyramid.\n    '''\n    return 2 * (width + length)\ndef perimeter_cone(radius, height):\n    '''\n    Write a function to calculate the perimeter of a cone.\n    '''\n    return 2 * radius * math.pi + 2 * math.pi * radius * height\ndef perimeter_cylinder(radius, height):\n    '''\n    Write a function to calculate the perimeter of a cylinder.\n    '''\n    return 2 * radius * math.pi * height + 2 * math.pi * radius * radius\ndef perimeter_sphere(radius):\n    '''\n    Write a function to calculate the perimeter of a sphere.\n    '''\n    return 4 * math.pi * radius\ndef perimeter_rectangle(side1, side2):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    return 2 * (side1 + side2)\ndef perimeter_parallelogram_2(side1, side2):\n    '''\n    Write a function to calculate the perimeter of a parallelogram.\n    '''\n    return side1 + side2 + side1 + side2\ndef perimeter_square_2(side):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    return 4 * side\ndef perimeter_triangle_2(side1, side2, side3):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    return side1 + side2 + side3\ndef perimeter_circle_2(radius):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    return 2 * math.pi * radius\ndef perimeter_pyramid_2(width, length, height):\n    '''\n    Write a function to calculate the perimeter of a pyramid.\n    '''\n    return 2 * (width + length)\ndef perimeter_cone_2(radius, height):\n    '''\n    Write a function to calculate the perimeter of a cone.\n    '''\n    return 2 * radius * math.pi + 2 * math.pi * radius * height\ndef perimeter_cylinder_2(radius, height):\n    '''\n    Write a function to calculate the perimeter of a cylinder.\n    '''\n    return 2 * radius * math.pi * height + 2 * math.pi * radius * radius\ndef perimeter_sphere_2(radius):\n    '''\n    Write a function to calculate the perimeter of a sphere.\n    '''\n    return 4 * math.pi * radius\ndef area_circle_3(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi * radius * radius\ndef area_circle_4(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return (4/3) * math.pi * radius * radius\ndef area_circle_5(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return (4/3) * math.pi * radius * radius\ndef area_square_3(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return side * side\ndef area_square_4(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return side * side\ndef area_square_5(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return side * side\ndef area_triangle_3(side1, side2, side3):\n    '''\n    Write a function t"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side ** 3 / (6 * math.sqrt(2))\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4 * (side ** 2) * math.sqrt(2) / 3\n    \n    \ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return side ** 3\n    \ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return side ** 2\n    \ndef volume_square(side):\n    '''\n    Write a function to caluclate the volume of a square.\n    '''\n    return side ** 3\n    \ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return 6 * (side ** 2)\n    \ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side ** 3\n    \ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of a octahedron.\n    '''\n    return 8 * (side ** 2)\n    \ndef volume_octahedron(side):\n    '''\n    Write a function to caluclate the volume of a octahedron.\n    '''\n    return side ** 3\n    \ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of a icosahedron.\n    '''\n    return 20 * (side ** 2)\n    \ndef volume_icosahedron(side):\n    '''\n    Write a function to caluclate the volume of a icosahedron.\n    '''\n    return side ** 3\n    \ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    return 20 * (side ** 2)\n    \ndef volume_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return side ** 3\n    \ndef area_truncated_prism(base, height, base_color, face_color):\n    '''\n    Write a function to caluclate the area of a truncated prism.\n    '''\n    return base * base_color + (height ** 2 + base ** 2) * face_color\n    \ndef volume_truncated_prism(base, height, base_color, face_color):\n    '''\n    Write a function to caluclate the volume of a truncated prism.\n    '''\n    return height * base_color + (base ** 3 + height ** 3) / 3 * face_color\n    \ndef area_convex_polygon(number_of_sides, side_length, color):\n    '''\n    Write a function to caluclate the area of a convex polygon.\n    '''\n    if number_of_sides == 3:\n        return (side_length ** 2) * math.sqrt(3) / 4\n    if number_of_sides == 4:\n        return (side_length ** 2) / 2\n    if number_of_sides == 5:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 6:\n        return (side_length ** 2) * math.sqrt(3 * (3 + 2 * math.sqrt(3))) / 12\n    if number_of_sides == 7:\n        return (side_length ** 2) * math.sqrt(7 * (7 + 2 * math.sqrt(7))) / 12\n    if number_of_sides == 8:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 9:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 10:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 11:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 12:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 13:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 14:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 15:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 16:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 17:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 18:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 19:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 20:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 21:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 22:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 23:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 24:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 25:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 26:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 27:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 28:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 29:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 30:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 31:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides == 32:\n        return (side_length ** 2) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) / 12\n    if number_of_sides ="
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)*(3**(1/2))/4\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side ** 2 * math.sqrt(3) / 4\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return float(4*math.sqrt(3)/3*side*side)\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(side**2/4)\ndef area_parallelogram(base, height):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return base * height\ndef area_triangle(base, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return base * height / 2\ndef area_trapezoid(base_1, base_2, height):\n    '''\n    Write a function to calculate the area of a trapezoid.\n    '''\n    return (base_1 + base_2) * height / 2\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return 3.14 * radius**2\ndef area_ellipse(radius_1, radius_2):\n    '''\n    Write a function to calculate the area of an ellipse.\n    '''\n    return 3.14 * radius_1 * radius_2\ndef area_rhombus(diagonal_1, diagonal_2):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    return (diagonal_1 * diagonal_2) / 2\ndef area_rectangle(side_1, side_2):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return side_1 * side_2\ndef area_square(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return side**2\ndef area_kite(diagonal_1, diagonal_2):\n    '''\n    Write a function to calculate the area of a kite.\n    '''\n    return diagonal_1 * diagonal_2 / 2\ndef area_triangle_sides_given(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the area of a triangle when the sides are known.\n    '''\n    return side_1 * side_2 / 2\ndef area_parallelogram_given(base, height):\n    '''\n    Write a function to calculate the area of a parallelogram when the base and height are known.\n    '''\n    return base * height\ndef area_trapezoid_given(base_1, base_2, height):\n    '''\n    Write a function to calculate the area of a trapezoid when the bases and height are known.\n    '''\n    return (base_1 + base_2) * height / 2\ndef area_circle_given(radius):\n    '''\n    Write a function to calculate the area of a circle when the radius is known.\n    '''\n    return 3.14 * radius**2\ndef area_circle_circumference(radius):\n    '''\n    Write a function to calculate the area of a circle when the radius is known and the circumference is needed.\n    '''\n    return 3.14 * radius * 2\ndef area_circle_area_of_circle(radius):\n    '''\n    Write a function to calculate the area of a circle when the radius is known and the area of a circle is needed.\n    '''\n    return 3.14 * radius**2\ndef area_circle_diameter(radius):\n    '''\n    Write a function to calculate the area of a circle when the radius is known and the diameter is needed.\n    '''\n    return 3.14 * radius * 2\ndef area_circle_circumference_diameter(radius):\n    '''\n    Write a function to calculate the area of a circle when the radius is known and the circumference and diameter are needed.\n    '''\n    return 3.14 * radius * 2\ndef area_circle_area_of_diameter(radius):\n    '''\n    Write a function to calculate the area of a circle when the radius is known and the area of a diameter is needed.\n    '''\n    return 3.14 * radius**2\ndef area_ellipse_given(radius_1, radius_2):\n    '''\n    Write a function to calculate the area of an ellipse when the radii are known.\n    '''\n    return 3.14 * radius_1 * radius_2\ndef area_rhombus_given(diagonal_1, diagonal_2):\n    '''\n    Write a function to calculate the area of a rhombus when the diagonals are known.\n    '''\n    return (diagonal_1 * diagonal_2) / 2\ndef area_kite_given(diagonal_1, diagonal_2):\n    '''\n    Write a function to calculate the area of a kite when the diagonals are known.\n    '''\n    return diagonal_1 * diagonal_2 / 2\ndef area_rectangle_given(side_1, side_2):\n    '''\n    Write a function to calculate the area of a rectangle when the sides are known.\n    '''\n    return side_1 * side_2\ndef area_square_given(side):\n    '''\n    Write a function to calculate the area of a square when the side is known.\n    '''\n    return side**2\ndef area_parrallelogram_sides_given(base, height):\n    '''\n    Write a function to calculate the area of a parallelogram when the sides are known.\n    '''\n    return base * height\ndef area_trapezoid_sides_given(base_1, base_2, height):\n    '''\n    Write a function to calculate the area of a trapezoid when the sides are known.\n    '''\n    return (base_1 + base_2) * height / 2\ndef area_circle_radius_diameter_circumference(radius):\n    '''\n    Write a function to calculate the area of a circle when the radius is known and the diameter, circumference, and area of a circle are needed.\n    '''\n    return 3.14 * radius**2\ndef area_rectangle_given_sides(side_1, side_2):\n    '''\n    Write a function to calculate the area of a rectangle when the sides are known.\n    '''\n    return side_1 * side_2\ndef area_rhombus_given_sides(diagonal_1, diagonal_2):\n    '''\n    Write a function to calculate the area of a rhombus when the diagonals are known.\n    '''\n    return (diagonal_1 * diagonal_2) / 2\ndef area_kite_given_sides(diagonal_1, diagonal_2):\n    '''\n    Write a function to calculate the area of a kite when the diagonals are known.\n    '''\n    return diagonal_1 * diagonal_2 / 2\ndef area_triangle_given_sides(side_1, side_2, side_3):\n    '''\n    Write a function to calculate the area of a triangle when the sides are known.\n    '''\n    return side_1 * side_2 / 2\ndef area_trapezoid_given_sides(side_1, side_2):\n    '''\n    Write a function to calculate the area of a trapezoid when the sides are known.\n    '''\n    return (side_1 + side_2) * height / 2\ndef area_circle_radius_diameter_area_of_circle(radius):\n    '''\n    Write a function to calculate the area of a circle when the radius is known and the diameter, circumference, and area of a circle are needed.\n    '''\n    return 3.14 * radius**2\ndef area_rectangle_given_sides_height(side_1, side_2, height):\n    '''\n    Write a function to calculate the area of a rectangle when the sides are known and the height is known.\n    '''\n    return side_1 * side_2 * height\ndef area_circle_area_of_a_circle_given_radius(radius):\n    '''\n    Write a function to calculate the area of a circle when the radius is known and the area of a circle is needed.\n    '''\n    return 3.14 * radius**2\ndef area_circle_circumference_given_radius(radius):\n    '''\n    Write a function to calculate the area of a circle when the radius is known and the circumference is needed.\n    '''\n    return 3.14 * radius * 2\ndef area_circle_area_of_a_circle_given_diameter(diameter):\n    '''\n    Write a function to calculate the area of a circle when the radiu"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/4 * pow(side, 2)\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3/12\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4 * math.sqrt(3) * side ** 2 / 3\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[-m:] + list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    rlist = []\n    for i in range(len(list) - m, len(list)):\n        rlist.append(list[i])\n    for i in range(0, len(list) - m):\n        rlist.append(list[i])\n    return rlist\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_len = len(list)\n    end = list_len - m\n    start = list_len - m - 1\n    first_part = list[:start]\n    last_part = list[end:]\n    reversed_list = list[start:end]\n    reversed_list.reverse()\n    list = first_part + reversed_list + last_part\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    x = list[-m:]\n    x.extend(list[0:-m])\n    return x\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_len = len(list)\n    n = list_len - m\n    for i in range(m):\n        list[i] = list[i + n]\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    return list[-m:] + list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    count = 0\n    while count < m:\n        temp = list.pop(0)\n        list.append(temp)\n        count += 1\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) > m:\n        for i in range(m):\n            list.append(list[i])\n        for i in range(m, len(list)):\n            list[i] = list[i-m]\n    else:\n        for i in range(len(list)-m):\n            list.append(list[i])\n        for i in range(len(list)-m, len(list)):\n            list[i] = list[i-m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    last = list[-1 * m:]\n    list = list[:-1 * m]\n    list.extend(last)\n    return list\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for each in test_tup:\n        if each == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None in test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    res = any(test_tup)\n    return res\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    assert isinstance(test_tup, tuple)\n    return all(isinstance(item, int) for item in test_tup)\n    \ndef check_true(test_tup):\n    '''\n    Write a function to check if the given tuple has any True value or not.\n    '''\n    assert isinstance(test_tup, tuple)\n    return all(item == True for item in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None in test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    #return True if None in test_tup else False\n    #print(any(test_tup))\n    print(test_tup)\n    print(type(test_tup))\n    for tup in test_tup:\n        print(tup)\n        if tup == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return True if None in test_tup else False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return True if None in test_tup else False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(type(i) == None for i in test_tup)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #\n    # my_list = [i for i in range(startnum, endnum) if (i % 3 == 0) and (i % 4 == 0) and (i % 5 == 0) and (i % 6 == 0) and (i % 7 == 0) and (i % 8 == 0) and (i % 9 == 0) and (i % 10 == 0)]\n    # return my_list\n    # OR\n    my_list = []\n    for i in range(startnum, endnum):\n        if all([i % d == 0 for d in range(1, 10)]):\n            my_list.append(i)\n    return my_list\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def check(num):\n        '''\n        Helper function to check if a number is divisible by all its digits\n        '''\n        s = str(num)\n        if len(s) < 2:\n            return False\n        return all(i == 1 for i in [int(x) for x in s])\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n        numlist = [x for x in range(startnum, endnum + 1)]\n        \n        # return list(filter(lambda x: x == 10, numlist))\n        # return list(filter(lambda x: x % 1 == 0, numlist))\n        return list(filter(lambda x: x == 10, numlist))\n    print(divisible_by_digits(100,10**6))\n    '''\n    Write a function named sum_of_digits to find the sum of all digits of a number. \n    '''\n    def sum_of_digits(num):\n        return sum([int(i) for i in list(str(num))])\n    print(sum_of_digits(17))\n    '''\n    Write a function named digits_in_range to find all the numbers between 1,000 and 10,000 (both included) where each digit of a number is an even number.\n    '''\n    def digits_in_range(start, end):\n        return list(filter(lambda x: (x - (x % 2)) > 0 and x > start and x < end, range(start, end + 1)))\n    print(digits_in_range(1000,10000))\n    \n    '''\n    Write a function named bigger_than_average that accepts a list of numbers and returns only those numbers that are bigger than the average of the numbers in the list.\n    '''\n    def bigger_than_average(numberlist):\n        average = sum(numberlist) / len(numberlist)\n        return list(filter(lambda x: x > average, numberlist))\n    print(bigger_than_average([1,2,3,4,5,6,7,8,9,10]))\n    \n    '''\n    Write a function named remove_evens that accepts a list and returns a new list with all the even numbers removed.\n    '''\n    def remove_evens(numlist):\n        return list(filter(lambda x: x % 2!= 0, numlist))\n    print(remove_evens([1,2,3,4,5,6,7,8,9,10]))\n    \n    '''\n    Write a function named remove_odds that accepts a list and returns a new list with all the odd numbers removed.\n    '''\n    def remove_odds(numlist):\n        return list(filter(lambda x: x % 2 == 0, numlist))\n    print(remove_odds([1,2,3,4,5,6,7,8,9,10]))\n    \n    '''\n    Write a function named num_of_evens that accepts a list and returns the number of even numbers in the list.\n    '''\n    def num_of_evens(numlist):\n        return sum([1 for x in numlist if x % 2 == 0])\n    print(num_of_evens([1,2,3,4,5,6,7,8,9,10]))\n    \n    '''\n    Write a function named num_of_odds that accepts a list and returns the number of odd numbers in the list.\n    '''\n    def num_of_odds(numlist):\n        return sum([1 for x in numlist if x % 2!= 0])\n    print(num_of_odds([1,2,3,4,5,6,7,8,9,10]))\n    \n    '''\n    Write a function named list_of_multiples that accepts a list of numbers and a number and returns a new list containing only the numbers that are a multiple of the number.\n    '''\n    def list_of_multiples(numlist, mult):\n        return list(filter(lambda x: x % mult == 0, numlist))\n    print(list_of_multiples([1,2,3,4,5,6,7,8,9,10], 2))\n    '''\n    Write a function named remove_every_other that accepts a list and returns a new list with every second item removed.\n    '''\n    def remove_every_other(numlist):\n        return list(numlist[::2])\n    print(remove_every_other([1,2,3,4,5,6,7,8,9,10]))\n    '''\n    Write a function named remove_odds_and_evens that accepts a list and returns a new list with all the even numbers and all the odd numbers removed.\n    '''\n    def remove_odds_and_evens(numlist):\n        return list(filter(lambda x: x % 2!= 0, numlist))\n    print(remove_odds_and_evens([1,2,3,4,5,6,7,8,9,10]))\n    \n    '''\n    Write a function named reverse_list that accepts a list and returns a new list with the items reversed.\n    '''\n    def reverse_list(numlist):\n        return list(reversed(numlist))\n    print(reverse_list([1,2,3,4,5,6,7,8,9,10]))\n    '''\n    Write a function named remove_negative that accepts a list of numbers and returns a new list with all the negative numbers removed.\n    '''\n    def remove_negative(numlist):\n        return list(filter(lambda x: x > 0, numlist))\n    print(remove_negative([1,2,3,4,-5,6,7,8,9,10]))\n    '''\n    Write a function named count_negatives that accepts a list of numbers and returns a count of how many negative numbers are in the list.\n    '''\n    def count_negatives(numlist):\n        return sum([1 for x in numlist if x < 0])\n    print(count_negatives([1,2,3,4,-5,6,7,8,9,10]))\n    \n    '''\n    Write a function named find_negatives that accepts a list of numbers and returns a list of negative numbers contained in the list.\n    '''\n    def find_negatives(numlist):\n        return list(filter(lambda x: x < 0, numlist))\n    print(find_negatives([1,2,3,4,5,6,7,8,9,10]))\n    \n    '''\n    Write a function named count_positives that accepts a list of numbers and returns a count of how many positive numbers are in the list.\n    '''\n    def count_positives(numlist):\n        return sum([1 for x in numlist if x > 0])\n    print(count_positives([1,2,3,4,5,6,7,8,9,10]))\n    '''\n    Write a function named find_positives that accepts a list of numbers and returns a list of positive numbers contained in the list.\n    '''\n    def find_positives(numlist):\n        return list(filter(lambda x: x > 0, numlist))\n    print(find_positives([1,2,3,4,5,6,7,8,9,10]))\n    '''\n    Write a function named find_greater_than that accepts a list and an integer and returns a list containing only the integers from the original list that are greater than the given integer.\n    '''\n    def find_greater_than(numlist, x):\n        return list(filter(lambda x: x > x, numlist))\n    print(find_greater_than([1,2,3,4,5,6,7,8,9,10], 10))\n    '''\n    Write a function named find_less_than that accepts a list and an integer and returns a list containing only the integers from the original list that are less than the given integer.\n    '''\n    def find_less_than(numlist, x):\n        return list(filter(lambda x: x < x, numlist))\n    print(find_less_than([1,2,3,4,5,6,7,8,9,10], 10))\n    '''\n    Write a function named count_greater_than that accepts a list and an integer and returns the number of items in the list that are greater than the integer.\n    '''\n    def count_greater_than(numlist, x):"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible(n):\n        if n < 10:\n            return True\n        for i in str(n):\n            if i == '0':\n                return False\n            if n % int(i)!= 0:\n                return False\n        return True\n    \n    range = list(range(startnum, endnum+1))\n    print(list(filter(divisible, range)))\n    \ndivisible_by_digits(100, 999)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [n for n in range(startnum, endnum + 1) if all([n % int(d) == 0 for d in str(n)])]\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digit(num):\n        digit_list = []\n        for digit in num:\n            if num % int(digit) == 0:\n                digit_list.append(digit)\n        return len(digit_list)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    lst = []\n    for i in range(startnum,endnum+1):\n        if not list(filter(lambda x: i%x!=0, [int(x) for x in list(str(i))])) == []:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x : all([x % int(i) == 0 for i in str(x)]), range(startnum,endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) == 0 or x % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers_divisible_by_digits = list(filter(lambda x: all(x % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))\n    return numbers_divisible_by_digits\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return a*r**2\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a=a/180*math.pi\n    if a>=2*math.pi:\n        print(\"Invalid value for angle\")\n    else:\n        area=(math.pi*(r**2)*a)/360\n        print(\"Area of sector is: %.2f\" %area)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #use the math module to find the area of a circle\n    import math\n    #use the pi value from the math module\n    pi = math.pi\n    #test to see if the angle is larger than 360\n    if a>360:\n        return None\n    #use the mathematical formula to find the area of a sector\n    else:\n        area = pi*r*r*(a/360)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<360:\n        return math.pi*(r**2)*(a/360)\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = int(input(\"Enter the sector's angle: \"))\n    if angle > 360:\n        return None\n    area = math.pi*(r**2)*(angle/360)\n    return area\nprint(sector_area(3,360))\nprint(sector_area(3,180))\nprint(sector_area(3,270))\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a < 360):\n        return r * r * math.sin(math.radians(a))\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*(a/360)\n        \n    \ndef rectangle_area(w,l):\n    '''\n    Write a function to find area of a rectangle. The function takes the width and length as inputs. Function should return None if width or length is 0 or negative.\n    '''\n    if w<=0 or l<=0:\n        return None\n    else:\n        return w*l\n        \n    \ndef right_triangle_area(a,b):\n    '''\n    Write a function to find area of a right triangle. The function takes the base and height as inputs. Function should return None if the base or height is 0 or negative.\n    '''\n    if a<=0 or b<=0:\n        return None\n    else:\n        return (a*b)/2\n        \n        \ndef trapezoid_area(a,b,h):\n    '''\n    Write a function to find area of a trapezoid. The function takes the top base, base and height as inputs. Function should return None if top base, base or height is 0 or negative.\n    '''\n    if a<=0 or b<=0 or h<=0:\n        return None\n    else:\n        return ((a+b)*h)/2\n        \n    \ndef parallelogram_area(a,b):\n    '''\n    Write a function to find area of a parallelogram. The function takes the base and height as inputs. Function should return None if base or height is 0 or negative.\n    '''\n    if a<=0 or b<=0:\n        return None\n    else:\n        return a*b\n        \n        \ndef isosceles_triangle_area(a,b):\n    '''\n    Write a function to find area of isosceles triangle. The function takes the base and height as inputs. Function should return None if base or height is 0 or negative.\n    '''\n    if a<=0 or b<=0:\n        return None\n    else:\n        return (a*b)/2\n        \n        \ndef triangle_area(a,b,c):\n    '''\n    Write a function to find area of a triangle. The function takes the three sides as inputs. Function should return None if the side is negative or zero.\n    '''\n    if a<=0 or b<=0 or c<=0:\n        return None\n    else:\n        s = (a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    \n    \ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function to find perimeter of a triangle. The function takes the three sides as inputs. Function should return None if the side is negative or zero.\n    '''\n    if a<=0 or b<=0 or c<=0:\n        return None\n    else:\n        return a+b+c\n        \n        \ndef rectangle_perimeter(w,l):\n    '''\n    Write a function to find perimeter of a rectangle. The function takes the width and length as inputs. Function should return None if width or length is 0 or negative.\n    '''\n    if w<=0 or l<=0:\n        return None\n    else:\n        return 2*(w+l)\n        \n        \ndef trapezoid_perimeter(a,b,h):\n    '''\n    Write a function to find perimeter of a trapezoid. The function takes the top base, base and height as inputs. Function should return None if top base, base or height is 0 or negative.\n    '''\n    if a<=0 or b<=0 or h<=0:\n        return None\n    else:\n        return a+b+h\n        \n        \ndef circle_area(r):\n    '''\n    Write a function to find area of a circle. The function takes the radius as input. Function should return None if radius is 0 or negative.\n    '''\n    if r<=0:\n        return None\n    else:\n        return math.pi*r**2\n        \n        \ndef circle_perimeter(r):\n    '''\n    Write a function to find perimeter of a circle. The function takes the radius as input. Function should return None if radius is 0 or negative.\n    '''\n    if r<=0:\n        return None\n    else:\n        return 2*math.pi*r\n        \n        \ndef right_circle_area(r):\n    '''\n    Write a function to find area of a right circle. The function takes the radius as input. Function should return None if radius is 0 or negative.\n    '''\n    if r<=0:\n        return None\n    else:\n        return math.pi*r**2\n        \n        \ndef right_circle_perimeter(r):\n    '''\n    Write a function to find perimeter of a right circle. The function takes the radius as input. Function should return None if radius is 0 or negative.\n    '''\n    if r<=0:\n        return None\n    else:\n        return 2*math.pi*r\n        \n        \ndef circle_diameter(r):\n    '''\n    Write a function to find diameter of a circle. The function takes the radius as input. Function should return None if radius is 0 or negative.\n    '''\n    if r<=0:\n        return None\n    else:\n        return 2*r\n        \n        \ndef circle_diameter_circle_area(r):\n    '''\n    Write a function to find the area of the circle with given diameter. The function takes the radius as input. Function should return None if radius is 0 or negative.\n    '''\n    if r<=0:\n        return None\n    else:\n        return math.pi*r**2\n        \n        \ndef circle_diameter_circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of the circle with given diameter. The function takes the radius as input. Function should return None if radius is 0 or negative.\n    '''\n    if r<=0:\n        return None\n    else:\n        return 2*math.pi*r\n        \n        \ndef right_circle_diameter(r):\n    '''\n    Write a function to find the diameter of a right circle. The function takes the radius as input. Function should return None if radius is 0 or negative.\n    '''\n    if r<=0:\n        return None\n    else:\n        return 2*r\n        \n        \ndef right_circle_diameter_circle_area(r):\n    '''\n    Write a function to find the area of the right circle with given diameter. The function takes the radius as input. Function should return None if radius is 0 or negative.\n    '''\n    if r<=0:\n        return None\n    else:\n        return math.pi*r**2\n        \n        \ndef right_circle_diameter_circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of the right circle with given diameter. The function takes the radius as input. Function should return None if radius is 0 or negative.\n    '''\n    if r<=0:\n        return None\n    else:\n        return 2*math.pi*r\n        \n        \ndef circle_circumference(r):\n    '''\n    Write a function to find circumference of a circle. The function takes the radius as input. Function should return None if radius is 0 or negative.\n    '''\n    if r<=0:\n        return None\n    else:\n        return 2*math.pi*r\n        \n        \ndef circle_circumference_circle_area(r):\n    '''\n    Write a function to find the area of the circle with given circumference. The function takes the radius as input. Function should return None if radius is 0 or negative.\n    '''\n    if r<=0:\n        return None\n    else:\n        return math.pi*r**2\n        \n        \ndef circle_circumference_circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of the circle with given circumference. The function takes the radius as input. Function should return None if radius is 0 or negative.\n    '''\n    if r<=0:\n        return None\n    else:\n        return 2*math.pi*r\n        \n        \ndef sector_area(r,a):\n    '"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = (r**2)*a\n    if a<360:\n        return area\n    else:\n        return None"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<360:\n        #angle less than 360, convert to degree\n        a=a*(180/math.pi)\n        #area of sector=pi*r*r-pi*r*(math.cos(a*(math.pi/180)))\n        #print(a*(math.pi/180))\n        return round(math.pi*r*r-math.pi*r*math.cos(a*(math.pi/180)),2)\n    else:\n        return None\n        #angle more than 360, return None\n        \n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (a/360)*(r**2)*math.pi\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[None]*(l+1) for i in range(n+1)] for j in range(m+1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return LCS_of_two(X, Y) + LCS_of_two(X, Z) + LCS_of_two(Y, Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None] for k in range(l+1)] for i in range(m+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[None]*(l + 1) for i in range(n + 1)] for j in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(l + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1]+1\n                else: \n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n    return L[m][n][l] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    print(\"Length of X is:\", m) \n    print(\"Length of Y is:\", n) \n    print(\"Length of Z is:\", o) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    table = [[[None] for i in range(m + 1)] for j in range(n + 1)]\n    return _lcs(X, Y, Z, m, n, l, table)\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y)\n    l = len(Z)\n    # Create a table to store the longest common suffix \n    # for the three sequences. \n    # Note that LCSuff[i][j] will have two possible values: \n    # 1. LCSuff[i - 1][j - 1] + 1 and 2. LCSuff[i][j - 1] \n    # when the last character matches.\n    LCSuff = [[0 for k in range(n + 1)] for l in range(m + 1)]\n    result = 0\n    # Fill the table in a bottom-up manner by considering \n    # all the sub-sequences one by one. \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0: \n                LCSuff[i][j] = 0\n            elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[j - 1]: \n                LCSuff[i][j] = LCSuff[i - 1][j - 1] + 1\n                result = max(result, LCSuff[i][j])\n            else: \n                LCSuff[i][j] = max(LCSuff[i - 1][j], LCSuff[i][j - 1]) \n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.sub(r'(?<=[A-Z])(?=[A-Z]|[\\s|,|;])','', str1, flags=re.IGNORECASE)\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if type(str1) == str:\n        return re.sub(r'([A-Z])', r' \\1', str1)\n    else:\n        return \"Input is not a string\"\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s = ''\n    for i in range(len(str1)):\n        if (str1[i].isupper() and i > 0 and str1[i-1].isalpha()):\n            s = s +'' + str1[i]\n        elif(str1[i].isupper()):\n            s = s + str1[i]\n        else:\n            s = s + str1[i]\n    return s\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Your code here\n    # print(str1)\n    p=re.compile(r'(\\b[A-Z]\\w*)')\n    m=p.findall(str1)\n    for i in range(len(m)):\n        m[i]=m[i].title()\n    # print(m)\n    str1=''\n    for i in range(len(m)):\n        str1+=m[i]\n        str1+=' '\n    # print(str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #Using re.findall()\n    #finds all the words starting with capital letters and puts a space after them\n    #returns the final string with the words separated by spaces\n    return re.sub(r\"([A-Z])(\\w)\", r\"\\1 \\2\", str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'(?<=[a-zA-Z])[A-Z](?=[a-zA-Z0-9])',' ',str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'[A-Z][a-z]',r' \\1',str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    my_str = str1\n    x = re.findall(r'[A-Z][a-z]+',my_str)\n    #print(x)\n    for i in range(len(x)):\n        if(i!=0):\n            my_str = re.sub(r'([A-Z][a-z]+)',r\" \\1\",my_str)\n        else:\n            my_str = re.sub(r'([A-Z][a-z]+)',r\"\\1\",my_str)\n    return my_str\nprint(capital_words_spaces('This is an example showing how we can put spaces between words starting with capital letters'))\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.split('(\\W)',str1)\n    str3 = ''\n    for i in str2:\n        if i.istitle():\n            str3 += i +''\n        else:\n            str3 += i\n    return str3\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'([A-Z])', r' \\1', str1)\n    return str1\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Create a numeric string key function\n    def atoi(s):\n        n = 0\n        for i in range(len(s)):\n            n = n * 10 + ord(s[i]) - ord('0')\n        return n\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def sort_numeric_strings_helper(x):\n        return int(x) if x.isdigit() else x\n    nums_str.sort(key = sort_numeric_strings_helper)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    print('Original List:', nums_str)\n    print('Sorted List:', sorted(nums_str, key=lambda x: [int(i) if i.isdigit() else i for i in re.split('(\\d+)', x)]))\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        nums.append(int(num))\n    sorted_nums = sorted(nums)\n    sorted_nums_str = []\n    for i in sorted_nums:\n        sorted_nums_str.append(str(i))\n    return sorted_nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: list(map(int, x.split())))\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in range(len(nums_str)):\n        nums.append(float(nums_str[i]))\n    nums.sort(key = float, reverse = False)\n    print(nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x: int(x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x.split('.')[0]))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_numbers = sorted(nums_str, key=numeric_string_sort_key)\n    return sorted_numbers\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    print('Given tuple: ', test_tup)\n    print('Given list: ', test_list)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass #replace this with your implementation\n    \n    "
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return None\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return None\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    #base case:\n    if len(test_list) == 0:\n        return test_tup\n    else:\n        #recursive case:\n        test_list[0] = test_tup[0]\n        test_list.pop(0)\n        return add_tuple(test_list, test_tup[1:])\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= int(len(arr)/2):\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr)==0 or i>=len(arr):\n        return -1\n    if i==0:\n        return True\n    if arr[i]>arr[int((i-1)/2)]:\n        return False\n    return check_min_heap_helper(arr,int((i-1)/2))\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n    if (i*2+1 < n) and (arr[i] > arr[i*2+1]):\n        return False\n    if (i*2+2 < n) and (arr[i] > arr[i*2+2]):\n        return False\n    return check_min_heap_helper(arr, i*2+1) and check_min_heap_helper(arr, i*2+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] < arr[2 * i + 1] or arr[i] < arr[2 * i + 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If i is root, then both left and right child should be less than i\n    if i >= 2:\n        if arr[i] < arr[i // 2] or arr[i // 2] < arr[i // 2 + 1]:\n            return False\n    # If i is not root, then both left child and right child should be less than i\n    if i >= 3:\n        if arr[i] < arr[i // 2] or arr[i // 2] < arr[i // 2 + 1]:\n            return False\n    # If i is leaf, then it should be greater than both of its child\n    if i >= n:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If i is the index of last element in the array\n    if i == 0:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    length = len(arr)\n    if i >= length:\n        return True\n    left_index = 2*i+1\n    right_index = 2*i+2\n    if left_index < length and arr[left_index] < arr[i]:\n        return False\n    if right_index < length and arr[right_index] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left_index) and check_min_heap_helper(arr, right_index)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    length = len(arr)\n    if i >= length:\n        return True\n    # Check if the tree is correct\n    if (arr[i] < arr[int((i-1)/2)] and i%2 == 0) or (arr[i] < arr[int((i-1)/2)] and i%2 == 1):\n        return False\n    # Recursively call for the subtrees\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    else:\n        if 2*i+1 < len(arr) and arr[2*i+1] < arr[i]:\n            return False\n        else:\n            return check_min_heap_helper(arr, 2*i+1)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if (i == 0):\n        return\n    if arr[i] > arr[(i - 1) // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i // 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if(n<0):\n        print(\"invalid input\")\n    elif(n==0):\n        return 0\n    elif(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    else:\n        return jacobsthal_num(n-1)+jacobsthal_num(n-2)\nprint(jacobsthal_num(10))\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 1\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # if n == 1:\n    #     return 1\n    # return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n    \n    # alternatively, we can store the results in an array and return the nth entry\n    j = [0,1]\n    for i in range(2,n+1):\n        j.append(j[i-1] + j[i-2])\n    return j[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = 0\n    b = 1\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 2:\n        return n\n    else:\n        return (jacobsthal_num(n-1) + jacobsthal_num(n-2))\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j=0\n    if(n<=1):\n        return 1\n    else:\n        for i in range(1,n+1):\n            if((i%2==0 and i%3==0) or (i%2!=0 and i%3!=0)):\n                j=j+1\n        return(j)\n        \n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*jacobsthal_num(n-1))+(2*jacobsthal_num(n-2))\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j = 1\n    if n == 1:\n        return 1\n    while j <= n:\n        j += (j+2)%j\n    return j\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def is_jacobsthal(n):\n        a = 0 \n        b = 1\n        for i in range(2, n):\n            c = a + b \n            a = b \n            b = c \n            if c == n:\n                return True \n        return False \n    if is_jacobsthal(n):\n        return True \n    return False \n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    jacobsthal_nums = []\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n        jacobsthal_nums.append(a)\n    return jacobsthal_nums[-1]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # assume min_records is the minimum no. of records to be returned from the list\n    min_records = K\n    # edge case\n    if len(test_list) <= K:\n        return test_list\n    # initializing first K records\n    test_list = test_list[:K]\n    # using heapq to get the top K records.\n    heapq.heapify(test_list)\n    # list to store remaining records\n    remaining = []\n    # traversing through remaining records\n    for i in range(len(test_list), len(test_list) + len(remaining)):\n        if len(test_list) < min_records:\n            heapq.heappush(test_list, test_list[0])\n        else:\n            heapq.heappush(test_list, remaining.pop(0))\n    return test_list\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #import collections\n    #sorted_list = sorted(test_list, key=lambda x:x[0])\n    #print(sorted_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # base case\n    if(len(test_list) <= K):\n        return tuple(test_list)\n    # return list\n    min_tuple = []\n    test_list.sort()\n    return list(itertools.islice(test_list, K))\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 1:\n        return (min(test_list[0], test_list[0][::-1]))\n    test_list = sorted(test_list)\n    return_list = []\n    while len(test_list) > 0:\n        if len(test_list) == K:\n            return_list.append(test_list.pop(0))\n        else:\n            return_list.append(test_list.pop(0))\n            test_list = sorted(test_list, key = lambda x: x[0])\n    return tuple(return_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            return test_list[i]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Select min value K times, and save the index of the kth minimum\n    min_index_list = []\n    for i in range(K):\n        min_index_list.append(test_list.index(min(test_list)))\n        test_list[test_list.index(min(test_list))] = sys.maxsize\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    final_list = []\n    if K > len(test_list):\n        final_list = test_list\n    else:\n        for i in range(K):\n            final_list.append(min(test_list))\n            test_list.remove(min(test_list))\n    print(final_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list, key=lambda x: x[0], reverse=False)\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return list(map(list, zip(*sorted(map(tuple, test_list))[:K])))\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return None\n    heap = MinHeap()\n    for i in range(K):\n        heap.insert(test_list[i])\n    for i in range(K, len(test_list)):\n        if test_list[i][1] < heap.root():\n            heap.replace_root(test_list[i])\n    return [heap.root()[0] for i in range(K)]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(0, len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    assert len(l1) == len(l2) and len(l2) == len(l3)\n    output = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            output.append(l1[i])\n    return output\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    list_1 = []\n    list_2 = []\n    list_3 = []\n    list_4 = []\n    for i in l1:\n        list_1.append(i)\n    for i in l2:\n        list_2.append(i)\n    for i in l3:\n        list_3.append(i)\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in index_list:\n            index_list.append(l1[i])\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in range(len(l1)) if l1[i] in l2 and l1[i] in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    r = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3:\n            r.append(l1[i])\n    return r\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in range(len(l1)) if i in l2 and i in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    l1_dict = {}\n    l2_dict = {}\n    l3_dict = {}\n    #count the frequency of each number in list 1\n    for i in range(len(l1)):\n        l1_dict[l1[i]] = l1_dict.get(l1[i], 0) + 1\n    #count the frequency of each number in list 2\n    for i in range(len(l2)):\n        l2_dict[l2[i]] = l2_dict.get(l2[i], 0) + 1\n    #count the frequency of each number in list 3\n    for i in range(len(l3)):\n        l3_dict[l3[i]] = l3_dict.get(l3[i], 0) + 1\n    for key in l1_dict:\n        #if the key is in all three lists, add it to the list\n        if l1_dict[key] == 1 and key in l2_dict and key in l3_dict:\n            index_list.append(key)\n    return index_list\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = list(numbers)\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 1:\n        return False\n    else:\n        if numbers[0] > numbers[1]:\n            return second_smallest(numbers[1:])\n        else:\n            return second_smallest(numbers[1:])\n        return\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise Exception('not enough numbers')\n    min_num = min(numbers)\n    numbers.remove(min_num)\n    return min(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        raise ValueError('List is empty')\n    if len(numbers) == 1:\n        return numbers[0]\n    if numbers[0] < numbers[1]:\n        return second_smallest(numbers[1:])\n    return second_smallest(numbers[1:])\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Your code here\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return sorted(numbers)[1]\n    return sorted(numbers)[1:][0]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # No. 1\n    # min_num = numbers[0]\n    # for num in numbers:\n    #     if num < min_num:\n    #         min_num = num\n    # second_min_num = min_num\n    # for num in numbers:\n    #     if num < second_min_num and num!= min_num:\n    #         second_min_num = num\n    # return second_min_num\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(list(set(numbers)))[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    second_smallest = min(numbers)\n    return second_smallest\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab*')\n    result = pattern.search(text)\n    if result!= None:\n        return True\n    return False\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r\"ab*\", text):\n        return \"Match\"\n    else:\n        return \"No match\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"ab*\"\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab*')\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.findall(r'a\\db+', text, re.I)\n    return match\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(\"a[b]+?\")\n    if pattern.search(text):\n        return \"found a match\"\n    else:\n        return \"no match\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = re.compile(r'a.+b')\n    pattern = re.compile('^a.*b$')\n    #pattern = re.compile(r'a.*b')\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.strip()\n    regex = re.compile(r'^a.+?b+?$')\n    result = regex.findall(text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = '^a.+b$'\n    result = re.search(pattern, text)\n    return result!= None\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"a.+?b\", re.IGNORECASE)\n    result = pattern.search(text)\n    if result:\n        return \"Match found!\"\n    else:\n        return \"Match not found!\"\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # test_list = [{'a': ['b', 'c', 'd', 'e']}, {'x': ['c', 'a', 'b', 'e']}, {'a': ['b', 'c', 'd', 'e']}]\n    l = len(test_list)\n    result = []\n    for i in range(l):\n        for j in range(i + 1, l):\n            if test_list[i] == test_list[j][::-1]:\n                result.append(test_list[i])\n    return len(result)\n    \n    \ndef check_for_palindrome(s):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    # s = 'aabaa'\n    return s == s[::-1]\n    \n    \ndef check_if_prime_number(n):\n    '''\n    Write a function to check if a given number is a prime number or not.\n    '''\n    # n = 15\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef check_all_if_prime_number(nums):\n    '''\n    Write a function to check if all the numbers in a given list are prime numbers or not.\n    '''\n    # nums = [11, 7, 13, 17, 21, 19]\n    l = len(nums)\n    result = True\n    for i in range(l):\n        if not check_if_prime_number(nums[i]):\n            result = False\n            break\n    return result\n    \n    \ndef reverse_list(list1):\n    '''\n    Write a function to reverse the order of the given list.\n    '''\n    # list1 = [1, 2, 3, 4, 5, 6]\n    l = len(list1)\n    for i in range(l // 2):\n        list1[i], list1[l - i - 1] = list1[l - i - 1], list1[i]\n    return list1\n    \n    \ndef reverse_list_inplace(list1):\n    '''\n    Write a function to reverse the order of the given list in place.\n    '''\n    # list1 = [1, 2, 3, 4, 5, 6]\n    l = len(list1)\n    for i in range(l // 2):\n        list1[i], list1[l - i - 1] = list1[l - i - 1], list1[i]\n    return list1\n    \n    \ndef is_subset(list1, list2):\n    '''\n    Write a function to check if one list is a subset of another list.\n    '''\n    # list1 = [1, 2, 3, 4]\n    # list2 = [2, 3, 4]\n    return set(list1).issubset(set(list2))\n    \n    \ndef count_n_in_list(list1, n):\n    '''\n    Write a function to count number of n's in the given list.\n    '''\n    # list1 = [1, 1, 2, 3, 4, 5, 5]\n    return list1.count(n)\n    \n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from the given list.\n    '''\n    # list1 = [1, 2, 2, 3, 4, 4, 5, 5]\n    return list(set(list1))\n    \n    \ndef swap_first_and_last_index(list1):\n    '''\n    Write a function to swap the first and last index of a list.\n    '''\n    # list1 = [1, 2, 3, 4, 5, 6]\n    return [list1[-1]] + list1[1:-1] + [list1[0]]\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    # s = 'aabaa'\n    return s == s[::-1]\n    \n    \ndef is_permutation(s1, s2):\n    '''\n    Write a function to check if the given two strings are permutations of each other or not.\n    '''\n    # s1 = 'aabcc'\n    # s2 = 'abc'\n    # s1 = 'aabcc'\n    # s2 = 'acb'\n    return sorted(s1) == sorted(s2)\n    \n    \ndef find_largest_and_smallest(list1):\n    '''\n    Write a function to find the largest and smallest number from the given list.\n    '''\n    # list1 = [1, 2, 3, 4, 5]\n    return min(list1), max(list1)\n    \n    \ndef find_pair_sum_to_k(list1, k):\n    '''\n    Write a function to find if the two numbers in the list pair sum up to a given number k.\n    '''\n    # list1 = [1, 2, 3, 4, 5]\n    # k = 6\n    return [k - x for x in list1 if k - x in list1]\n    \n    \ndef find_all_pairs_that_sum_up_to_k(list1, k):\n    '''\n    Write a function to find all the pairs of numbers in a given list that sum up to a given number k.\n    '''\n    # list1 = [1, 2, 3, 4, 5]\n    # k = 6\n    return [[x, k - x] for x in list1 if k - x in list1]\n    \n    \ndef check_if_all_strings_are_palindromes(list1):\n    '''\n    Write a function to check if all the strings in the list are palindromes or not.\n    '''\n    # list1 = ['aabcc', 'abc', 'abb']\n    return all([check_if_palindrome(x) for x in list1])\n    \n    \ndef check_if_all_strings_are_permutations(list1):\n    '''\n    Write a function to check if all the strings in the list are permutations of each other or not.\n    '''\n    # list1 = ['aabcc', 'abc', 'abb']\n    return all([is_permutation(x, x[::-1]) for x in list1])\n    \n    \ndef sort_list_by_length(list1):\n    '''\n    Write a function to sort a list of strings by length.\n    '''\n    # list1 = ['a', 'ab', 'abc', 'abcd']\n    return sorted(list1, key=lambda x: len(x))\n    \n    \ndef sort_list_by_length_in_place(list1):\n    '''\n    Write a function to sort a list of strings by length in place.\n    '''\n    # list1 = ['a', 'ab', 'abc', 'abcd']\n    return sorted(list1, key=lambda x: len(x))\n    \n    \ndef get_list_of_lists(list1):\n    '''\n    Write a function to get the list of lists from a given list.\n    '''\n    # list1 = [1, 2, 3, 4, 5]\n    return [x for x in list1]\n    \n    \ndef get_list_of_lists_from_tuple(tup1):\n    '''\n    Write a function to get the list of lists from a given tuple of tuples.\n    '''\n    # tup1 = ((1, 2), (3, 4), (5, 6), (7, 8))\n    return [x for x in tup1]\n    \n    \ndef get_set_of_tuples_from_list_of_lists(list1):\n    '''\n    Write a function to get the set of tuples from a given list of lists.\n    '''\n    # list1 = [[1, 2], [3, 4], [5, 6]]\n    return [tuple(x) for x in list"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Declaring a set to store the words present in the list\n    unique_words = set()\n    # Declaring a dictionary to store the count of the words\n    word_count = {}\n    # Iterating through each word in the list\n    for word in test_list:\n        # If the word is not present in the set, then add it to the set\n        if word not in unique_words:\n            unique_words.add(word)\n            # If the word is present in the dictionary, then increment its value by one\n            if word in word_count:\n                word_count[word] += 1\n            # Else add it to the dictionary and assign it a value of one\n            else:\n                word_count[word] = 1\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if not test_list:\n        return 0\n    test_list = [x[::-1] for x in test_list]\n    count = 0\n    for x in test_list:\n        if x in test_list:\n            count += test_list.count(x)\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(0,len(test_list)):\n        if test_list[i][::-1] in test_list:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[j][::-1] == test_list[i]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_list = [x[::-1] for x in test_list]\n    unique_reverse_list = list(set(reverse_list))\n    result = []\n    for x in unique_reverse_list:\n        result.append(reverse_list.count(x))\n    return result\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Function to count the reverse pairs.\n    def count_reverse_pairs(test_list):\n    # Initializing a variable for count\n    # variable to keep count of no of reverse pairs\n    reverse_pairs = 0\n    # Sorting a given list\n    test_list.sort()\n    # Iterating through sorted list\n    for i in range(len(test_list)):\n        # Checking condition for reverse pair\n        if i < len(test_list) - 1 and test_list[i] == test_list[i + 1][::-1]:\n            reverse_pairs += 1\n    # Printing the count\n    print(\"Number of reverse pairs in the given list is:\", reverse_pairs)\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j][::-1] == test_list[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    set_str_lst = set(test_list)\n    counter = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = test_list.split()\n    print(test_list)\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(tuple(i))\n    count = {}\n    for x in list2:\n        if x in count:\n            count[x] += 1\n        else:\n            count[x] = 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(tuple(i))\n    my_dict = {}\n    for i in new_list:\n        if i in my_dict.keys():\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    return my_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return_list = []\n    sublists = []\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = list(set(list1))\n    dict1 = {}\n    for i in list1:\n        list2 = []\n        for j in list1:\n            if j == i:\n                list2.append(j)\n        dict1[tuple(list2)] = len(list2)\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple in count_dict:\n            count_dict[item_tuple] += 1\n        else:\n            count_dict[item_tuple] = 1\n    return count_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = [1, 2, 3, 4, 1, 1, 3, 3, 2, 1, 2]\n    list1 = list(set(list1))\n    unique_list = {}\n    for x in range(len(list1)):\n        unique_list[tuple(list1[x])] = list1.count(list1[x])\n    print(unique_list)\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = tuple(list1[i])\n    unique_tuple = set(list1)\n    unique_list = list(unique_tuple)\n    result_dictionary = {}\n    for i in range(len(unique_list)):\n        result_dictionary[unique_list[i]] = list1.count(unique_list[i])\n    return result_dictionary\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = list(list1)\n    \n    unique_list = []\n    unique_dic = {}\n    \n    for i in list1:\n        if i not in unique_list:\n            unique_list.append(i)\n            unique_dic[i] = list1.count(i)\n    \n    return unique_dic\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(tuple(i))\n    print(set(list2))\n    print(len(list2))\n    print(len(set(list2)))\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # print(list1)\n    sub_lists = set([tuple(i) for i in list1])\n    # print(sub_lists)\n    for i in sub_lists:\n        count = 0\n        for j in list1:\n            if i == tuple(j):\n                count += 1\n        sub_lists.add((i, count))\n    return dict(sub_lists)\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    try:\n        float(num)\n    except:\n        return False\n    \n    if num.count('.')!= 1 or num.count('-') > 1:\n        return False\n    \n    else:\n        if num[0] == '.':\n            num = num[1:]\n        \n        if num.count('-') == 1:\n            return num[0].isdigit() and num[1].isdigit() and num[2] == '-' and num[3:].isdigit()\n        \n        else:\n            if num.isdigit():\n                return True\n            \n            else:\n                return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, int):\n        return True\n    if not isinstance(num, str):\n        return False\n    if num.isdigit():\n        return True\n    if num[0] == '-' and num[1:].isdigit():\n        return True\n    if num[0] == '+' and num[1:].isdigit():\n        return True\n    if num.count('.') == 1 and num[0]!= '.' and num[-1]!= '.' and num.count('-') < 2:\n        if '.' in num[1:]:\n            if num[0]!= '-':\n                return False\n        num = num.replace('.', '')\n        if num.isdigit():\n            return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Your code here\n    num = float(num)\n    if '.' in num:\n        if num.count('.') == 1:\n            num = num.split('.')\n            if len(num[1]) > 2:\n                return False\n            else:\n                return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num[0]=='-':\n        if num[1]=='.' and len(num)==3:\n            return True\n        else:\n            return False\n    else:\n        if num[0]=='.' and num[1]=='.' and len(num)==4:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # 0.12, 23.12\n    try:\n        int(num)\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    for i in range(len(num)):\n        if num[i] == '.':\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_num = re.compile(r'^\\d*?\\.\\d{2}$')\n    decimal_re = decimal_num.match(num)\n    if decimal_re:\n        return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not num:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = 0\n    for i in arr:\n        if(arr.count(i) == 1):\n            unique = i\n    return unique\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if(len(set(arr)) == 1):\n        print(\"Unique element\")\n    else:\n        print(\"More than one element\")\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #unique_elements = []\n    #for i in arr:\n    #    if i not in unique_elements:\n    #        unique_elements.append(i)\n    #return len(unique_elements)\n    \n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    uniq = set(arr)\n    if len(uniq) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_set = set(arr)\n    if len(distinct_set) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_numbers = set()\n    for n in arr:\n        if n in unique_numbers:\n            return False\n        unique_numbers.add(n)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_number_count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            unique_number_count += 1\n    if unique_number_count == len(arr):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    num_set = set()\n    for num in arr:\n        if num in num_set:\n            return False\n        num_set.add(num)\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4,6,9,11]:\n        return 30\n    elif monthnum3 in [1,3,5,7,8,10,12]:\n        return 31\n    else:\n        return 28\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        print(\"Month number is a leap year\")\n    else:\n        print(\"Month number is not a leap year\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthlist=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    return monthlist[monthnum3-1]\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_no = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    if month_no[monthnum3] == 30:\n        print('Yes! Month {} has 30 days.'.format(monthnum3))\n    else:\n        print('No! Month {} does not have 30 days.'.format(monthnum3))\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return 'No'\n    elif monthnum3 == 4:\n        return 'Yes'\n    elif monthnum3 == 6:\n        return 'Yes'\n    elif monthnum3 == 9:\n        return 'Yes'\n    elif monthnum3 == 11:\n        return 'Yes'\n    else:\n        return 'No'\n        \ncheck_monthnumber_number(3)\n        \n        \ndef divisible_by_ten(num2):\n    '''\n    Write a function which will return True if the given number is divisible by 10, otherwise it will return False.\n    '''\n    if num2 % 10 == 0:\n        return True\n    else:\n        return False\n        \ndivisible_by_ten(60)\ndivisible_by_ten(77)\ndivisible_by_ten(41)\n        \n        \ndef check_leap_year(year2):\n    '''\n    Write a function to check whether a year is a leap year or not.\n    '''\n    if year2 % 4 == 0 and year2 % 100!= 0:\n        return True\n    elif year2 % 400 == 0:\n        return True\n    else:\n        return False\n        \ncheck_leap_year(2020)\ncheck_leap_year(1999)\ncheck_leap_year(2000)\n        \n        \ndef number_of_days_in_month(month2,year2):\n    '''\n    Write a function to return the number of days of a specific month of a given year.\n    '''\n    if month2 == 1:\n        return 31\n    elif month2 == 2:\n        return check_leap_year(year2)\n    elif month2 == 3:\n        return 31\n    elif month2 == 4:\n        return 30\n    elif month2 == 5:\n        return 31\n    elif month2 == 6:\n        return 30\n    elif month2 == 7:\n        return 31\n    elif month2 == 8:\n        return 31\n    elif month2 == 9:\n        return 30\n    elif month2 == 10:\n        return 31\n    elif month2 == 11:\n        return 30\n    else:\n        return 31\n        \nnumber_of_days_in_month(1,2000)\nnumber_of_days_in_month(1,2017)\nnumber_of_days_in_month(1,2019)\n        \n        \ndef is_leap_year(year3):\n    '''\n    Write a function to check whether a given year is leap year or not.\n    '''\n    if year3 % 4 == 0 and year3 % 100!= 0:\n        return True\n    elif year3 % 400 == 0:\n        return True\n    else:\n        return False\n        \nis_leap_year(2012)\nis_leap_year(1900)\nis_leap_year(2020)\n        \n        \ndef date_to_tuple(date4):\n    '''\n    Write a function to take a date in format year/month/day and return it as a tuple: (year,month,day).\n    '''\n    date4 = date4.split('/')\n    return int(date4[0]),int(date4[1]),int(date4[2])\n        \ndate_to_tuple('1999/08/26')\ndate_to_tuple('2012/08/26')\ndate_to_tuple('2000/08/26')\n        \n        \ndef tuple_to_date(date5):\n    '''\n    Write a function to take a tuple (year,month,day) and return it as a date in the format year/month/day.\n    '''\n    date5 = date5[0],date5[1],date5[2]\n    return '/'.join(str(x) for x in date5)\n        \ntuple_to_date((1999,8,26))\ntuple_to_date((2012,8,26))\ntuple_to_date((2000,8,26))\n        \n        \ndef date_to_isoformat(date6):\n    '''\n    Write a function to take a date in the format year/month/day and return it in isoformat.\n    '''\n    date6 = date6.split('/')\n    return '/'.join(str(x) for x in date6)\n        \ndate_to_isoformat('2012/08/26')\ndate_to_isoformat('1999/08/26')\ndate_to_isoformat('2012/08/26')\n        \n        \ndef is_isoformat(date7):\n    '''\n    Write a function to check whether a date is in isoformat or not.\n    '''\n    if date7[0] == '/' and date7[1] == '/' and date7[2].isdigit() and date7[3].isdigit():\n        return True\n    else:\n        return False\n        \nis_isoformat('1999/08/26')\nis_isoformat('1999/8/26')\nis_isoformat('1999/8/26/')\nis_isoformat('1999/08/26/')\nis_isoformat('1999/8/26/1')\nis_isoformat('1999/8/26/1/')\n        \n        \ndef isoformat_to_date(date8):\n    '''\n    Write a function to take an isoformat date and return it as a tuple: (year,month,day).\n    '''\n    date8 = date8.split('/')\n    return int(date8[0]),int(date8[1]),int(date8[2])\n        \nisoformat_to_date('1999/8/26')\nisoformat_to_date('1999/8/26/')\nisoformat_to_date('1999/8/26/1')\nisoformat_to_date('1999/8/26/1/')\n        \n        \ndef date_to_isoformat_lower(date9):\n    '''\n    Write a function to take a date in the format year/month/day and return it in isoformat: YYYY-MM-DD.\n    '''\n    date9 = date9.split('/')\n    return '-'.join(str(x) for x in date9)\n        \ndate_to_isoformat_lower('1999/8/26')\ndate_to_isoformat_lower('1999/8/26/')\ndate_to_isoformat_lower('1999/8/26/1')\ndate_to_isoformat_lower('1999/8/26/1/')\n        \n        \ndef tuple_to_isoformat_lower(date10):\n    '''\n    Write a function to take a tuple (year,month,day) and return it in isoformat: YYYY-MM-DD.\n    '''\n    date10 = date10[0],date10[1],date10[2]\n    return '-'.join(str(x) for x in date10)\n        \ntuple_to_isoformat_lower((1999,8,26))\ntuple_to_isoformat_lower((2012,8,26))\ntuple_to_isoformat_lower((2000,8,26))\n        \n        \ndef isoformat_lower_to_date(date11):\n    '''\n    Write a function to take an isoformat date and return it as a tuple: (year,month,day).\n    '''\n    date11 = date11.split('-')\n    return int(date11[0]),int(date11[1]),int(date11[2])\n        \nisoformat_lower_to_date('1999/8/26')\nisoformat_lower_to_date('1999-8-26')\nisoformat_lower_to_date('1999-8-26-')\nisoformat_lower_to_date('1999-8-26-1')\nisoformat_lower_to_date('1999-8-26-1-')\n        \n        \ndef month_to_isoformat_lower(monthnum4):\n    '''\n    Write a function to take a month number and return it in isoformat: MM.\n    '''\n    if monthnum4 == 1:\n        return 'Jan'\n    elif monthnum4 == 2:\n        return 'Feb'\n    elif monthnum4 == 3:\n        return 'Mar'\n    elif monthnum4 == 4:\n        return 'Apr'\n    e"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnumber_number = {'january': 1, 'february': 2,'march': 3, 'april': 4,'may': 5, 'june': 6, 'july': 7, 'august': 8,'september': 9, 'october': 10, 'november': 11, 'december': 12}\n    monthname = {1: 'january', 2: 'february', 3:'march', 4: 'april', 5:'may', 6: 'june', 7: 'july', 8: 'august', 9:'september', 10: 'october', 11: 'november', 12: 'december'}\n    if monthnum3 in monthnumber_number:\n        if monthnum3 == monthnumber_number['january'] or monthnum3 == monthnumber_number['february'] or monthnum3 == monthnumber_number['march']:\n            return True\n        elif monthnum3 == monthnumber_number['april'] or monthnum3 == monthnumber_number['may'] or monthnum3 == monthnumber_number['june']:\n            return True\n        elif monthnum3 == monthnumber_number['july'] or monthnum3 == monthnumber_number['august'] or monthnum3 == monthnumber_number['september']:\n            return True\n        elif monthnum3 == monthnumber_number['october'] or monthnum3 == monthnumber_number['november'] or monthnum3 == monthnumber_number['december']:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_check = []\n    month_check.append(31)\n    month_check.append(28)\n    month_check.append(31)\n    month_check.append(30)\n    month_check.append(31)\n    month_check.append(30)\n    month_check.append(31)\n    month_check.append(31)\n    month_check.append(30)\n    month_check.append(31)\n    month_check.append(30)\n    month_check.append(31)\n    month_check.append(30)\n    month_check.append(31)\n    month_check.append(30)\n    month_check.append(31)\n    if monthnum3 in month_check:\n        print(\"The given month number contains 30 days\")\n    else:\n        print(\"The given month number does not contain 30 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    #create a list of months\n    month_list = ['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december']\n    #create a list of months with 30 days\n    month30 = ['april', 'june','september', 'november']\n    #create a list of months with 31 days\n    month31 = ['january','march','may', 'july', 'august', 'october', 'december']\n    #create a list of months with 28 days\n    month28 = ['february']\n    #create a list of months with 29 days\n    month29 = ['january', 'february','march']\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    if monthnum3 in month:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return(28)\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return(30)\n    else:\n        return(31)\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if not arr:\n        return -1\n    arr.sort()\n    diff = arr[n-1] - arr[0]\n    for i in range(1,n):\n        diff = min(diff, arr[i] - arr[i-1])\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Initialize min and max \n    min_diff = arr[1] - arr[0] \n    max_diff = arr[1] - arr[0] \n    \n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if (abs(arr[i] - arr[j]) < min_diff): \n                min_diff = abs(arr[i] - arr[j]) \n            elif (abs(arr[i] - arr[j]) > max_diff): \n                max_diff = abs(arr[i] - arr[j]) \n    return min_diff, max_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    mini = arr[1] - arr[0] \n    for i in range(n): \n        if i < n-1: \n            mini = min(mini, arr[i+1] - arr[i]) \n    return mini \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    # Initialize result \n    result = arr[n-1] - arr[0] \n    for i in range(0,n-1): \n        if (arr[i+1] - arr[i]) < result: \n            result = arr[i+1] - arr[i] \n    return result \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Initialize the minimum difference \n    # to a large value \n    min_diff = 10**9\n    \n    # Sort the array \n    arr.sort() \n    \n    # Pick the two ends of the array \n    j = 0\n    k = n-1\n    \n    # Pick the smallest difference \n    # and update the array \n    while(j < k): \n        min_diff = min(min_diff,\n                    arr[k] - arr[j]) \n        j += 1\n        k -= 1\n    \n    # Return the minimum difference \n    # between any two elements \n    return min_diff \n    \nif __name__ == \"__main__\":\n    arr = [2, 3, 10, 6, 4, 8, 1] \n    n = len(arr) \n    print(find_min_diff(arr, n))"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort array\n    arr.sort()\n    # Initialize minimum difference\n    minimum = arr[1] - arr[0]\n    # Traverse array elements\n    for i in range(1, n):\n        # check if difference is less than minimum\n        if arr[i] - arr[i - 1] < minimum:\n            # update minimum value\n            minimum = arr[i] - arr[i - 1]\n    # return minimum\n    return minimum\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array\n    arr.sort() \n    # initialize minimum difference\n    minimum = abs(arr[0] - arr[1])\n    # iterate through the array\n    for i in range(n): \n        # get difference between adjacent elements \n        diff = abs(arr[i] - arr[i + 1])\n        # if difference is smaller than minimum, \n        # update minimum difference\n        if (minimum > diff): \n            minimum = diff\n    return minimum\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array\n    arr.sort() \n    # initialize the difference with a very large value\n    diff = arr[n - 1] - arr[0] \n    # initialize the first index and last index of the subarray\n    first = 0\n    last = n - 1\n    # move the first index to the right until the first index is less than the last index\n    while (arr[first] < arr[last]): \n        # move the first index to the right\n        first += 1\n        # check the difference between the first index and last index\n        # if the difference is smaller, change the difference\n        if (arr[first] - arr[last] < diff): \n            diff = arr[first] - arr[last] \n    return diff\n    \n    \ndef count_sort(arr,exp): \n    '''\n    Write a python function to sort the numbers in a given array using the count sort method. https://www.geeksforgeeks.org/counting-sort/\n    '''\n    # initialize the count array \n    count = [0] * (10) \n    # iterate the numbers in the array \n    for i in range(0, len(arr)): \n        # get the number at the index position\n        key = arr[i] // exp \n        # increment the count\n        count[key % 10] += 1\n    # iterate the count array\n    for i in range(1, len(count)): \n        # increment the count\n        count[i] += count[i - 1] \n    # initialize the output array\n    output = [0] * (len(arr))\n    # iterate the numbers in the array\n    for i in range(len(arr) - 1, -1, -1): \n        # get the number at the index position\n        key = arr[i] // exp \n        # get the output index\n        output_index = count[key % 10] - 1\n        # increment the output index\n        count[key % 10] -= 1\n        # add the number to the output array\n        output[output_index] = arr[i] \n    # iterate the output array\n    for i in range(0, len(arr)): \n        # store the output array in the input array\n        arr[i] = output[i] \n    return arr\n    \n    \ndef radix_sort(arr): \n    '''\n    Write a python function to sort the numbers in a given array using the radix sort method. https://www.geeksforgeeks.org/radix-sort/\n    '''\n    # get the maximum number\n    max_element = max(arr) \n    # get the length of the array\n    arr_len = len(arr) \n    # initialize the count array\n    count = [0] * (10) \n    # initialize the output array\n    output = [0] * (arr_len) \n    # initialize the exp\n    exp = 1\n    # while the max element is greater than 0\n    while (max_element): \n        # iterate the numbers in the array\n        for i in range(0, arr_len): \n            # get the number at the index position\n            key = arr[i] // exp \n            # increment the count\n            count[key % 10] += 1\n        # iterate the count array\n        for i in range(1, len(count)): \n            # increment the count\n            count[i] += count[i - 1] \n        # initialize the temp array\n        temp = [0] * (arr_len) \n        # iterate the numbers in the array\n        for i in range(len(arr) - 1, -1, -1): \n            # get the number at the index position\n            key = arr[i] // exp \n            # get the output index\n            output_index = count[key % 10] - 1\n            # increment the output index\n            count[key % 10] -= 1\n            # add the number to the output array\n            temp[output_index] = arr[i] \n        # iterate the temp array\n        for i in range(0, len(arr)): \n            # store the output array in the input array\n            arr[i] = temp[i] \n        # increment the exp\n        exp *= 10\n        # set the max element to 0\n        max_element = 0\n    return arr\n    \n    \ndef max_consecutive(arr): \n    '''\n    Write a python function to find the maximum consecutive numbers in the given array. https://www.geeksforgeeks.org/find-maximum-consecutive-elements-in-an-array/\n    '''\n    # initialize the count\n    count = 1\n    # iterate the numbers in the array\n    for i in range(0, len(arr)): \n        # check the index to the right\n        if ((i + 1) < len(arr) and arr[i] == arr[i + 1]): \n            # increment the count\n            count += 1\n        else: \n            # print the count\n            print(arr[i], count) \n            # set the count to 1\n            count = 1\n    return\n    \n    \ndef bubble_sort(arr): \n    '''\n    Write a python function to sort the numbers in a given array using the bubble sort method. https://www.geeksforgeeks.org/bubble-sort/\n    '''\n    # iterate the array\n    for i in range(len(arr)): \n        # iterate the array again\n        for j in range(0, len(arr) - i - 1): \n            # check if the current number is greater than the number next to it\n            if arr[j] > arr[j + 1]: \n                # swap the numbers\n                arr[j], arr[j + 1] = arr[j + 1], arr[j] \n    return\n    \n    \ndef merge_sort(arr, start, end): \n    '''\n    Write a python function to sort the numbers in a given array using the merge sort method. https://www.geeksforgeeks.org/merge-sort/\n    '''\n    # check if the start index is less than the end index\n    if (start < end): \n        # get the middle index\n        middle = (start + end) // 2\n        # sort the first half\n        merge_sort(arr, start, middle) \n        # sort the second half\n        merge_sort(arr, middle + 1, end) \n        # merge the first and second half\n        merge(arr, start, middle, end)\n    return\n    \n    \ndef merge(arr, start, middle, end): \n    '''\n    Write a python function to merge the numbers in a given array using the merge sort method. https://www.geeksforgeeks.org/merge-sort/\n    '''\n    # initialize the first index\n    first = start \n    # initialize the last index\n    last = middle + 1\n    # initialize the output array\n    output = [0] * (end - start + 1)\n    # iterate the output array\n    for i in range(len(output)): \n        # check if the first index is less than the last index\n        if (first <= middle and (last > end or arr[first] <= arr[last])): \n            # store the value in the output array\n            output[i] = arr[first] \n            # increment the first index\n            first += 1\n        elif (last <= end): \n            # store the value in the output array\n            output[i] = arr[last] \n            # increment the last index\n            last += 1\n    # iterate the output array\n    for i in range(len(output)): \n        # store the value in the input array\n        arr[start + i] = output[i] \n    return\n    \n    \ndef quick_sort(arr, start, end): \n    '''\n    Write a python function to sort the numbers in a given array using the quick sort method. https://www.geeksforgeeks.org/quick-sort/\n    '''\n    # check if the start index is less than the end index\n    if (start < end): \n        # get the pivot index\n        pivot = partition(arr, start, end) \n        # sort the first half\n        quick_sort(arr, start, pivot - 1) \n        # sort the second half\n    "
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1,n):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = []\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if arr[j] - arr[i] > 0:\n                diff.append(arr[j] - arr[i])\n    return min(diff)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number_of_digits = 0\n    for i in str:\n        if i.isdigit():\n            number_of_digits += 1\n    return number_of_digits\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digit = 0\n    for char in str:\n        if char.isdigit():\n            digit += 1\n    return digit\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return sum(range(n+1))\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 0\n    while(n > num):\n        num += 1\n        if is_polite_helper(num):\n            n -= 1\n    return num\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return 2\n    if n==2:\n        return 3\n    if n==3:\n        return 5\n    if n==4:\n        return 7\n    if n==5:\n        return 11\n    if n==6:\n        return 13\n    if n==7:\n        return 17\n    if n==8:\n        return 23\n    if n==9:\n        return 29\n    if n==10:\n        return 31\n    if n==11:\n        return 37\n    if n==12:\n        return 43\n    if n==13:\n        return 47\n    if n==14:\n        return 53\n    if n==15:\n        return 59\n    if n==16:\n        return 61\n    if n==17:\n        return 67\n    if n==18:\n        return 71\n    if n==19:\n        return 73\n    if n==20:\n        return 79\n    if n==21:\n        return 83\n    if n==22:\n        return 89\n    if n==23:\n        return 97\n    if n==24:\n        return 103\n    if n==25:\n        return 107\n    if n==26:\n        return 109\n    if n==27:\n        return 113\n    if n==28:\n        return 127\n    if n==29:\n        return 131\n    if n==30:\n        return 137\n    if n==31:\n        return 139\n    if n==32:\n        return 149\n    if n==33:\n        return 151\n    if n==34:\n        return 157\n    if n==35:\n        return 163\n    if n==36:\n        return 167\n    if n==37:\n        return 173\n    if n==38:\n        return 179\n    if n==39:\n        return 181\n    if n==40:\n        return 191\n    if n==41:\n        return 193\n    if n==42:\n        return 197\n    if n==43:\n        return 199\n    if n==44:\n        return 211\n    if n==45:\n        return 223\n    if n==46:\n        return 227\n    if n==47:\n        return 229\n    if n==48:\n        return 233\n    if n==49:\n        return 239\n    if n==50:\n        return 241\n    if n==51:\n        return 251\n    if n==52:\n        return 257\n    if n==53:\n        return 263\n    if n==54:\n        return 269\n    if n==55:\n        return 271\n    if n==56:\n        return 277\n    if n==57:\n        return 281\n    if n==58:\n        return 283\n    if n==59:\n        return 293\n    if n==60:\n        return 307\n    if n==61:\n        return 311\n    if n==62:\n        return 313\n    if n==63:\n        return 317\n    if n==64:\n        return 331\n    if n==65:\n        return 337\n    if n==66:\n        return 347\n    if n==67:\n        return 349\n    if n==68:\n        return 353\n    if n==69:\n        return 359\n    if n==70:\n        return 367\n    if n==71:\n        return 373\n    if n==72:\n        return 379\n    if n==73:\n        return 383\n    if n==74:\n        return 389\n    if n==75:\n        return 397\n    if n==76:\n        return 401\n    if n==77:\n        return 409\n    if n==78:\n        return 419\n    if n==79:\n        return 421\n    if n==80:\n        return 431\n    if n==81:\n        return 433\n    if n==82:\n        return 439\n    if n==83:\n        return 443\n    if n==84:\n        return 449\n    if n==85:\n        return 457\n    if n==86:\n        return 461\n    if n==87:\n        return 463\n    if n==88:\n        return 467\n    if n==89:\n        return 479\n    if n==90:\n        return 487\n    if n==91:\n        return 491\n    if n==92:\n        return 499\n    if n==93:\n        return 503\n    if n==94:\n        return 509\n    if n==95:\n        return 521\n    if n==96:\n        return 523\n    if n==97:\n        return 541\n    if n==98:\n        return 547\n    if n==99:\n        return 557\n    if n==100:\n        return 563\n    if n==101:\n        return 569\n    if n==102:\n        return 571\n    if n==103:\n        return 577\n    if n==104:\n        return 581\n    if n==105:\n        return 583\n    if n==106:\n        return 593\n    if n==107:\n        return 601\n    if n==108:\n        return 607\n    if n==109:\n        return 613\n    if n==110:\n        return 617\n    if n==111:\n        return 619\n    if n==112:\n        return 631\n    if n==113:\n        return 641\n    if n==114:\n        return 643\n    if n==115:\n        return 647\n    if n==116:\n        return 653\n    if n==117:\n        return 659\n    if n==118:\n        return 661\n    if n==119:\n        return 673\n    if n==120:\n        return 677\n    if n==121:\n        return 683\n    if n==122:\n        return 691\n    if n==123:\n        return 701\n    if n==124:\n        return 709\n    if n==125:\n        return 719\n    if n==126:\n        return 727\n    if n==127:\n        return 733\n    if n==128:\n        return 739\n    if n==129:\n        return 743\n    if n==130:\n        return 751\n    if n==131:\n        return 757\n    if n==132:\n        return 761\n    if n==133:\n        return 769\n    if n==134:\n        return 773\n    if n==135:\n        return 787\n    if n==136:\n        return 797\n    if n==137:\n        return 809\n    if n==138:\n        return 811\n    if n==139:\n        return 821\n    if n==140:\n        return 823\n    if n==141:\n        return 827\n    if n==142:\n        return 829\n    if n==143:\n        return 839\n    if n==144:\n        return 853\n    if n==145:\n        return 857\n    if n==146:\n        return 859\n    if n==147:\n        return 863\n    if n==148:\n        return 877\n    if n==149:\n        return 881\n    if n==150:\n        return 883\n    if n==151:\n        return 891\n    if n==152:\n        return 897\n    if n==153:\n        return 907\n    if n==154:\n        return 911\n    if n==155:\n        return 919\n    if n==156:\n        return 929\n    if n==157:\n        return 937\n    if n==158:\n        return 941\n    if n==159:\n        return 947\n    if n==160:\n        return 953\n    if n==161:\n        return 967\n    if n==162:\n        return 971\n    if n==163:\n        return 977\n    if n==164:\n        return 983\n    if n==165:\n        return 991\n    if n==166:\n        return 997\n    if n==167:\n        return 1009\n    if n==168:\n        return 1013\n    if n==169:\n        return 1019\n    if n==170:\n        return 1021\n    if n==171:\n        return 1031\n    if n==172:\n        return 1033\n    if n==173:\n        return 1039\n    if n==174:\n    "
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            polite += 1\n    return polite\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2): \n        if n % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    if n <= 0: \n        return None\n    if n == 1: \n        return 2\n    \n    if n % 2 == 0: \n        return n // 2\n    \n    return 3*n + 1\n    \ndef is_polite2(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    if n <= 0: \n        return None\n    if n == 1: \n        return 2\n    \n    if n % 2 == 0: \n        return n // 2\n    \n    return 3*n + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # The nth polite number is 1 + 2 + 3 + \u2026 + n. \n    # The function should take input n and return the nth polite number. \n    # For example: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, \u2026.\n    nth_polite = 1\n    for i in range(2, n+1): \n        nth_polite = nth_polite + i \n    return nth_polite\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count=0\n    k=1\n    #counting the polite numbers\n    while(n>count):\n        k+=1\n        n=n+math.factorial(k)\n        count+=k\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0: \n        return 0 \n    if n == 1: \n        return 1 \n    dp = [0]*(n+1) \n    # 1 is the first polite number \n    dp[1] = 1 \n    dp[2] = 2 \n    # for 3 to n. \n    # 1 + 1 + 1 \n    # 2 + 1 + 1 \n    # 3 + 1 + 1 \n    # 4 + 1 + 1 \n    # 5 + 2 \n    # 6 + 2 \n    # 7 + 3 \n    # 8 + 3 \n    # 9 + 4 \n    for i in range(3, n+1): \n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] \n    return dp[n] \n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return 0\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not\n    '''\n    return 0\ndef is_super_prime(n):\n    '''\n    Write a function to check if a number is a super prime or not\n    '''\n    return 0\ndef is_perfect_square(n):\n    '''\n    Write a function to check if a number is a perfect square or not\n    '''\n    return 0\ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is palindrome or not\n    '''\n    return 0\ndef is_armstrong(n):\n    '''\n    Write a function to check if a number is armstrong or not\n    '''\n    return 0\ndef is_factorial(n):\n    '''\n    Write a function to check if a number is factorial or not\n    '''\n    return 0\ndef is_pythagorean(a,b,c):\n    '''\n    Write a function to check if a number is pythagorean triplet or not\n    '''\n    return 0\ndef is_harshad(n):\n    '''\n    Write a function to check if a number is harshad or not\n    '''\n    return 0\ndef is_fibonacci(n):\n    '''\n    Write a function to check if a number is fibonacci or not\n    '''\n    return 0\ndef is_lucas(n):\n    '''\n    Write a function to check if a number is lucas or not\n    '''\n    return 0\ndef is_sum_of_series(n):\n    '''\n    Write a function to check if a number is a sum of series or not\n    '''\n    return 0\ndef is_sum_of_squares(n):\n    '''\n    Write a function to check if a number is a sum of squares or not\n    '''\n    return 0\ndef is_power(x,y):\n    '''\n    Write a function to check if a number is a power of a given base or not\n    '''\n    return 0\ndef is_prime_factors(n):\n    '''\n    Write a function to print prime factors of a given number\n    '''\n    return 0\ndef is_palindrome_number(n):\n    '''\n    Write a function to check if a number is palindrome or not\n    '''\n    return 0\ndef is_semiprime(n):\n    '''\n    Write a function to check if a number is semiprime or not\n    '''\n    return 0\ndef is_prime_number(n):\n    '''\n    Write a function to check if a number is prime or not\n    '''\n    return 0\ndef is_perfect_number(n):\n    '''\n    Write a function to check if a number is perfect or not\n    '''\n    return 0\ndef is_perfect_number_check_for(n):\n    '''\n    Write a function to check if a number is perfect or not\n    '''\n    return 0\ndef is_super_perfect_number(n):\n    '''\n    Write a function to check if a number is super perfect or not\n    '''\n    return 0\ndef is_triangular_number(n):\n    '''\n    Write a function to check if a number is triangular or not\n    '''\n    return 0\ndef is_strong_number(n):\n    '''\n    Write a function to check if a number is strong or not\n    '''\n    return 0\ndef is_disarium_number(n):\n    '''\n    Write a function to check if a number is disarium or not\n    '''\n    return 0\ndef is_permutation(n, m):\n    '''\n    Write a function to check if a number is permutation of another number or not\n    '''\n    return 0\ndef is_truncatable_prime(n):\n    '''\n    Write a function to check if a number is truncatable prime or not\n    '''\n    return 0\ndef is_pandigital_prime(n):\n    '''\n    Write a function to check if a number is pandigital prime or not\n    '''\n    return 0\ndef is_pentagonal_number(n):\n    '''\n    Write a function to check if a number is pentagonal or not\n    '''\n    return 0\ndef is_hexagonal_number(n):\n    '''\n    Write a function to check if a number is hexagonal or not\n    '''\n    return 0\ndef is_heptagonal_number(n):\n    '''\n    Write a function to check if a number is heptagonal or not\n    '''\n    return 0\ndef is_octagonal_number(n):\n    '''\n    Write a function to check if a number is octagonal or not\n    '''\n    return 0\ndef is_triangular_number(n):\n    '''\n    Write a function to check if a number is triangular or not\n    '''\n    return 0\ndef is_pentagonal_number(n):\n    '''\n    Write a function to check if a number is pentagonal or not\n    '''\n    return 0\ndef is_hexagonal_number(n):\n    '''\n    Write a function to check if a number is hexagonal or not\n    '''\n    return 0\ndef is_heptagonal_number(n):\n    '''\n    Write a function to check if a number is heptagonal or not\n    '''\n    return 0\ndef is_octagonal_number(n):\n    '''\n    Write a function to check if a number is octagonal or not\n    '''\n    return 0\ndef is_cyclic_number(n):\n    '''\n    Write a function to check if a number is cyclic or not\n    '''\n    return 0\ndef is_square_root_of_prime(n):\n    '''\n    Write a function to check if a number is square root of prime or not\n    '''\n    return 0\ndef is_square_of_prime(n):\n    '''\n    Write a function to check if a number is square of prime or not\n    '''\n    return 0\ndef is_square_of_triangular_number(n):\n    '''\n    Write a function to check if a number is square of triangular number or not\n    '''\n    return 0\ndef is_square_of_hexagonal_number(n):\n    '''\n    Write a function to check if a number is square of hexagonal number or not\n    '''\n    return 0\ndef is_square_of_pentagonal_number(n):\n    '''\n    Write a function to check if a number is square of pentagonal number or not\n    '''\n    return 0\ndef is_square_of_octagonal_number(n):\n    '''\n    Write a function to check if a number is square of octagonal number or not\n    '''\n    return 0\ndef is_prime_number(n):\n    '''\n    Write a function to check if a number is prime or not\n    '''\n    return 0\ndef is_super_prime_number(n):\n    '''\n    Write a function to check if a number is super prime or not\n    '''\n    return 0\ndef is_semiprime_number(n):\n    '''\n    Write a function to check if a number is semiprime or not\n    '''\n    return 0\ndef is_strong_number(n):\n    '''\n    Write a function to check if a number is strong or not\n    '''\n    return 0\ndef is_disarium_number(n):\n    '''\n    Write a function to check if a number is disarium or not\n    '''\n    return 0\ndef is_disarium_number_check_for(n):\n    '''\n    Write a function to check if a number is disarium or not\n    '''\n    return 0\ndef is_disarium_number_check_while(n):\n    '''\n    Write a function to check if a number is disarium or not\n    '''\n    return 0\ndef is_permutation(n, m):\n    '''\n    Write a function to check if a number is permutation of another number or not\n    '''\n    return 0\ndef is_truncatable_prime_check_for(n):\n    '''\n    Write a function t"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1) - 1):\n        l2.append((l1[i], l1[i+1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if i == len(l1) - 1:\n            break\n        else:\n            result.append([l1[i], l1[i+1]])\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair = []\n    for i in range(len(l1)):\n        if i < len(l1)-1:\n            pair.append((l1[i], l1[i+1]))\n    return pair\n    #print(pair)\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for idx in range(1,len(l1)):\n        result.append((l1[idx],l1[idx-1]))\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs=[]\n    l1.append(0)\n    for i in range(len(l1)-1):\n        pairs.append((l1[i],l1[i+1]))\n    return pairs\ndef find_searches(d):\n    '''\n    Write a function to determine how many times each word appears in a list.\n    '''\n    d2={}\n    for i in d:\n        if i not in d2:\n            d2[i]=d.count(i)\n    return d2\ndef remove_letters(l,l1):\n    '''\n    Write a function to remove all occurrences of a given letter from a given string.\n    '''\n    return l.replace(l1,'')\ndef list_letters(l):\n    '''\n    Write a function to return a list of all the letters in a given string.\n    '''\n    return list(l)\ndef is_palindrome(l):\n    '''\n    Write a function to check whether a given string is a palindrome.\n    '''\n    return l == l[::-1]\ndef sort_list(l):\n    '''\n    Write a function to sort a list of letters according to the order of their appearance.\n    '''\n    d={}\n    for i in l:\n        if i not in d:\n            d[i]=l.count(i)\n    return sorted(d,key=d.get)\ndef unique_list(l):\n    '''\n    Write a function to get a list of the unique elements in a given list.\n    '''\n    return list(set(l))\ndef is_pangram(l):\n    '''\n    Write a function to check whether a given string is a pangram.\n    '''\n    return set(l).issuperset(set(string.ascii_lowercase))\ndef sum_of_even_indexes(l):\n    '''\n    Write a function to return the sum of all items at even indexes in a given list.\n    '''\n    return sum([l[i] for i in range(len(l)) if i % 2 == 0])\ndef remove_numbers(l):\n    '''\n    Write a function to remove all instances of a given number in a given list.\n    '''\n    l1=[]\n    for i in l:\n        if i!= l[-1]:\n            if i!= l[0]:\n                l1.append(i)\n        else:\n            l1.append(i)\n    return l1\ndef replace_numbers(l):\n    '''\n    Write a function to replace all instances of a given number in a given list with the next largest number.\n    '''\n    for i in range(len(l)-1):\n        if l[i]!= max(l):\n            for j in range(i,len(l)):\n                if l[j] == l[i]:\n                    l[j] = l[j+1]\n    return l\ndef common_elements(l,l1):\n    '''\n    Write a function to return a list of common elements in a given list.\n    '''\n    return list(set(l) & set(l1))\ndef remove_duplicates(l):\n    '''\n    Write a function to remove duplicate items from a given list.\n    '''\n    return list(set(l))\ndef contains(l,l1):\n    '''\n    Write a function to determine whether a given list contains a list of elements.\n    '''\n    return set(l).issuperset(set(l1))\ndef power_list(l):\n    '''\n    Write a function to return a list containing the powers of a given number.\n    '''\n    return [l[i]**i for i in range(len(l))]\ndef maximum_of_even_indexes(l):\n    '''\n    Write a function to return the maximum of all items at even indexes in a given list.\n    '''\n    return max([l[i] for i in range(len(l)) if i % 2 == 0])\ndef replace_letters(l,l1):\n    '''\n    Write a function to replace each letter in a given list with the next letter in the alphabet.\n    '''\n    return [chr(ord(l1[i])+1) if l[i]!= l[-1] else chr(ord(l1[i])+1-len(l)) for i in range(len(l))]\ndef remove_adjacent_duplicates(l):\n    '''\n    Write a function to return a list of all items in a given list except for adjacent duplicate items.\n    '''\n    return list(set(l))\ndef is_anagram(l,l1):\n    '''\n    Write a function to check whether two given lists are anagrams.\n    '''\n    return sorted(l) == sorted(l1)\ndef replace_greater_than(l):\n    '''\n    Write a function to replace all instances of the letter 'x' with 'zzz' in a given list.\n    '''\n    return [i if i!= 'x' else 'zzz' for i in l]\ndef replace_occurrences_of_letter(l,l1):\n    '''\n    Write a function to replace each occurrence of a letter with another letter in a given list.\n    '''\n    return [i if i!= l1 else l1 for i in l]\ndef sum_matrix(m):\n    '''\n    Write a function to return the sum of all items in a given two dimensional list.\n    '''\n    return sum([sum(i) for i in m])\ndef duplicate_list(l):\n    '''\n    Write a function to return a list of lists that contain all duplicates from a given list.\n    '''\n    return [i for i in l if l.count(i) > 1]\ndef reverse_words(l):\n    '''\n    Write a function to reverse the order of the words in a given list.\n    '''\n    return [i[::-1] for i in l]\ndef find_repetitions(l):\n    '''\n    Write a function to return a list of lists, where each sublist contains the indexes of a given item in a given list.\n    '''\n    return [[i] for i in range(len(l)) if l[i] == l[i+1]]\ndef delete_spaces(l):\n    '''\n    Write a function to return a list where all instances of the space character have been replaced with the letter 'a'.\n    '''\n    return [i if i!='' else 'a' for i in l]\ndef convert_list(l):\n    '''\n    Write a function to convert a given list of multiple integers into a list of integers.\n    '''\n    return [int(i) for i in l]\ndef first_and_last(l):\n    '''\n    Write a function to return a list containing the first and last elements of a given list.\n    '''\n    return [l[0],l[-1]]\ndef filter_list(l):\n    '''\n    Write a function to return a list of all items in a given list that are not divisible by 3.\n    '''\n    return [i for i in l if i % 3!= 0]\ndef remove_from_list(l,l1):\n    '''\n    Write a function to return a list with all instances of a given list removed.\n    '''\n    return [i for i in l if i not in l1]\ndef remove_first_and_last_element(l):\n    '''\n    Write a function to return a list with the first and last elements removed.\n    '''\n    return l[1:-1]\ndef sum_matrix_diagonal(m):\n    '''\n    Write a function to return the sum of all items on the diagonal in a given two dimensional list.\n    '''\n    return sum([m[i][i] for i in range(len(m))])\ndef number_of_lists(l):\n    '''\n    Write a function to return the number of lists in a given list.\n    '''\n    return len([i for i in l if type(i) == list])\ndef remove_middle(l):\n    '''\n    Write a function to return a list where all instances of the second element have been removed.\n    '''\n    return l[:1]+l[2:]\ndef combin"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if i+1<len(l1) and l1[i] + 1 == l1[i+1]:\n            l.append([l1[i], l1[i+1]])\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i],l1[i+1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        raise ValueError('Too small list')\n    l2 = []\n    for i in range(0, len(l1)-1):\n        l2.append((l1[i], l1[i+1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    res=[]\n    for i in range(len(l1)-1):\n        res.append([l1[i],l1[i+1]])\n    return res\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n                \n    return count\n    \n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    s = set()\n    for num in arr:\n        if (sum - num) in s:\n            count += 1\n        s.add(num)\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                print('Pairs are : ', arr[i], arr[j])\n                count = count + 1\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count=0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i]+arr[j]==sum:\n                count+=1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_counter = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pair_counter += 1\n    return pair_counter\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i in li1 and i not in li2] \n    return li_dif \n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2] \n    return li_dif \n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([((i+1)*(i+3))**4 for i in range(0,n) if (i+1) % 2!= 0])"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n > 0 :\n        res = 0\n        i = 1\n        while i <= n : \n            if i%2 == 1 : \n                res += i**4\n            i += 1\n        return res\n    else : \n        print('Invalid input')\n        return\n    \n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2) : \n        sum += i**4\n    return sum\nprint(odd_num_sum(3))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if i % 2!= 0 :\n            sum = sum + (i**4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return (n*(n+1)*(n+2)*(n+3)) // 6\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2!=0:\n            sum = sum + (i**4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 :\n        return 0\n    odd_num_list = []\n    for i in range(1,n+1) :\n        if i % 2!= 0 :\n            odd_num_list.append(i**4)\n    return sum(odd_num_list)\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if i % 2!= 0 : \n            sum += pow(i,4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)*(3*n+1)/24\nn=int(input())\nprint(int(odd_num_sum(n))"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if i % 2!= 0 :\n            sum = sum + (i**4)\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top == '(' and i == ')':\n                continue\n            elif top == '{' and i == '}':\n                continue\n            elif top == '[' and i == ']':\n                continue\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef remove_duplicate(num_arr):\n    '''\n    Write a function to remove all the duplicate numbers from an array\n    '''\n    num_set = set()\n    num_set_arr = []\n    for i in num_arr:\n        if i in num_set:\n            continue\n        else:\n            num_set.add(i)\n            num_set_arr.append(i)\n    return num_set_arr\ndef get_max_length_substring(string):\n    '''\n    Write a function to get the longest substring in a given string.\n    '''\n    sub_arr = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_arr.append(string[i:j])\n    return max(sub_arr, key=len)\ndef count_numbers(num):\n    '''\n    Write a function to count the number of digits in a number.\n    '''\n    count = 0\n    for i in range(len(num)):\n        if num[i] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            count += 1\n    return count\ndef get_longest_substring_without_duplication(string):\n    '''\n    Write a function to get the longest substring without any duplicate characters.\n    '''\n    sub_arr = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_arr.append(string[i:j])\n    return max(sub_arr, key=len)\ndef is_palindrome(string):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    rev_str = string[::-1]\n    if rev_str == string:\n        return True\n    else:\n        return False\ndef duplicate_number(arr):\n    '''\n    Write a function to find the duplicate number in an array.\n    '''\n    num_set = set()\n    for i in arr:\n        if i in num_set:\n            return i\n        else:\n            num_set.add(i)\ndef print_left_view(root):\n    '''\n    Write a function to print the left view of the binary tree. The left view of a binary tree is the set of nodes visible when the tree is viewed from the left.\n    '''\n    queue = deque()\n    queue.append(root)\n    while queue:\n        level = []\n        level_nodes = []\n        for i in range(len(queue)):\n            temp = queue.popleft()\n            level.append(temp.data)\n            if temp.left:\n                queue.append(temp.left)\n            if temp.right:\n                queue.append(temp.right)\n        if len(level)!= 0:\n            print(level[0])\ndef check_sum(root, sum):\n    '''\n    Write a function to check if the given binary tree is a binary search tree or not.\n    '''\n    queue = deque()\n    queue.append(root)\n    sum_arr = []\n    while queue:\n        level = []\n        level_nodes = []\n        for i in range(len(queue)):\n            temp = queue.popleft()\n            level.append(temp.data)\n            if temp.left:\n                queue.append(temp.left)\n            if temp.right:\n                queue.append(temp.right)\n        sum_arr.append(sum(level))\n    return sum_arr\ndef sorted_array_to_bst(arr):\n    '''\n    Write a function to convert a given array to a BST.\n    '''\n    if len(arr) == 0:\n        return None\n    mid = len(arr)//2\n    root = Node(arr[mid])\n    root.left = sorted_array_to_bst(arr[:mid])\n    root.right = sorted_array_to_bst(arr[mid+1:])\n    return root\ndef closest_value_in_bst(root, target):\n    '''\n    Write a function that finds the closest value to a given value in a BST.\n    '''\n    queue = deque()\n    queue.append(root)\n    min_diff = float('inf')\n    result = None\n    while queue:\n        level = []\n        level_nodes = []\n        for i in range(len(queue)):\n            temp = queue.popleft()\n            level.append(temp.data)\n            if temp.left:\n                queue.append(temp.left)\n            if temp.right:\n                queue.append(temp.right)\n        for i in level:\n            if abs(i-target) < min_diff:\n                min_diff = abs(i-target)\n                result = i\n    return result\ndef inorder_traversal(root):\n    '''\n    Write a function to do inorder traversal of a given binary tree.\n    '''\n    if root:\n        inorder_traversal(root.left)\n        print(root.data, end=' ')\n        inorder_traversal(root.right)\ndef preorder_traversal(root):\n    '''\n    Write a function to do preorder traversal of a given binary tree.\n    '''\n    if root:\n        print(root.data, end=' ')\n        preorder_traversal(root.left)\n        preorder_traversal(root.right)\ndef postorder_traversal(root):\n    '''\n    Write a function to do postorder traversal of a given binary tree.\n    '''\n    if root:\n        postorder_traversal(root.left)\n        postorder_traversal(root.right)\n        print(root.data, end=' ')\ndef diameter_of_binary_tree(root):\n    '''\n    Write a function to get the diameter of a binary tree. The diameter of a binary tree is the number of nodes on the longest path between two leaf nodes.\n    '''\n    return diameter_helper(root)\ndef diameter_helper(root):\n    if root == None:\n        return 0\n    else:\n        l_height = diameter_helper(root.left)\n        r_height = diameter_helper(root.right)\n        return max(l_height, r_height) + 1\ndef sum_of_path_numbers(root, sum):\n    '''\n    Write a function to get the sum of all root-to-leaf numbers.\n    '''\n    queue = deque()\n    queue.append(root)\n    sum_arr = []\n    while queue:\n        level = []\n        level_nodes = []\n        for i in range(len(queue)):\n            temp = queue.popleft()\n            level.append(temp.data)\n            if temp.left:\n                queue.append(temp.left)\n            if temp.right:\n                queue.append(temp.right)\n        level_sum = 0\n        for i in level:\n            level_sum += i\n        if level_sum == sum:\n            sum_arr.append(1)\n        else:\n            sum_arr.append(0)\n    return sum_arr\ndef invert_binary_tree(root):\n    '''\n    Write a function to invert a binary tree.\n    '''\n    if root:\n        root.left, root.right = root.right, root.left\n        invert"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # To check if string is balanced or not\n    def check(exp):\n        stack = deque()\n        \n        # traverse string in reverse order\n        for char in reversed(exp):\n            if char in ['(', '{', '[']:\n                stack.append(char)\n            else:\n                if not stack:\n                    return False\n                current_char = stack.pop()\n                if current_char == '(':\n                    if char!= \")\":\n                        return False\n                if current_char == '{':\n                    if char!= \"}\":\n                        return False\n                if current_char == '[':\n                    if char!= \"]\":\n                        return False\n        if stack:\n            return False\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in \"({[\":\n            stack.append(char)\n        elif char in \")}]\":\n            if len(stack) == 0:\n                return False\n            val = stack.pop()\n            if char == \")\" and val!= \"(\":\n                return False\n            if char == \"]\" and val!= \"[\":\n                return False\n            if char == \"}\" and val!= \"{\":\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = []\n    \n    for c in exp:\n        if c == '(' or c == '[' or c == '{':\n            s.append(c)\n            #print(s)\n        elif c == ')' or c == ']' or c == '}':\n            if not s:\n                return False\n            p = s.pop()\n            if p == '(' and c!= ')':\n                return False\n            if p == '[' and c!= ']':\n                return False\n            if p == '{' and c!= '}':\n                return False\n    if s:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                top_element = stack.pop()\n                if top_element == \"(\":\n                    if char!= \")\":\n                        return False\n                elif top_element == \"{\":\n                    if char!= \"}\":\n                        return False\n                elif top_element == \"[\":\n                    if char!= \"]\":\n                        return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Creating a deque object\n    dq = deque()\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    S = deque()\n    for x in exp:\n        if x == '{' or x == '[' or x == '(':\n            S.append(x)\n        elif x == '}':\n            if len(S) == 0:\n                return False\n            elif S.pop()!= '{':\n                return False\n        elif x == ']':\n            if len(S) == 0:\n                return False\n            elif S.pop()!= '[':\n                return False\n        elif x == ')':\n            if len(S) == 0:\n                return False\n            elif S.pop()!= '(':\n                return False\n    return len(S) == 0\n    \n    \ndef generate_island_grid(num_islands, rows, cols):\n    '''\n    Write a function to generate an N x N grid, with a 1 in the top-left, bottom-right corner, and all other entries 0.\n    '''\n    grid = [[0 for _ in range(cols)] for _ in range(rows)]\n    grid[0][0] = 1\n    queue = []\n    queue.append((0,0))\n    while len(queue)!= 0:\n        i,j = queue.pop()\n        grid[i][j] = 1\n        if i+1 < rows and grid[i+1][j] == 0:\n            grid[i+1][j] = 1\n            queue.append((i+1, j))\n        if i-1 >= 0 and grid[i-1][j] == 0:\n            grid[i-1][j] = 1\n            queue.append((i-1, j))\n        if j+1 < cols and grid[i][j+1] == 0:\n            grid[i][j+1] = 1\n            queue.append((i, j+1))\n        if j-1 >= 0 and grid[i][j-1] == 0:\n            grid[i][j-1] = 1\n            queue.append((i, j-1))\n    return grid\n    \ndef min_cost_climbing_stairs(cost):\n    '''\n    Write an efficient algorithm that calculates the minimum cost of climbing the stairs.\n    '''\n    if len(cost) == 2:\n        return cost[0] + cost[1]\n    if len(cost) == 1:\n        return cost[0]\n    if len(cost) == 3:\n        return cost[0] + cost[2]\n    dp = [float('inf') for _ in range(len(cost))]\n    dp[0] = cost[0]\n    dp[1] = cost[1]\n    dp[2] = cost[2] + cost[0]\n    for i in range(3, len(cost)):\n        dp[i] = cost[i] + min(dp[i-1], dp[i-2])\n    return min(dp[-1], dp[-2])\n    \ndef min_cost_climbing_stairs_v2(cost):\n    '''\n    Write an efficient algorithm that calculates the minimum cost of climbing the stairs.\n    '''\n    dp = [0 for _ in range(len(cost))]\n    dp[0] = cost[0]\n    dp[1] = cost[1]\n    dp[2] = cost[2] + cost[0]\n    for i in range(3, len(cost)):\n        dp[i] = cost[i] + min(dp[i-1], dp[i-2])\n    return min(dp[-1], dp[-2])\n    \ndef min_cost_climbing_stairs_v3(cost):\n    '''\n    Write an efficient algorithm that calculates the minimum cost of climbing the stairs.\n    '''\n    if len(cost) == 2:\n        return cost[0] + cost[1]\n    if len(cost) == 1:\n        return cost[0]\n    if len(cost) == 3:\n        return cost[0] + cost[2]\n    dp = [0 for _ in range(len(cost))]\n    dp[0] = cost[0]\n    dp[1] = cost[1]\n    dp[2] = cost[2] + cost[0]\n    for i in range(3, len(cost)):\n        dp[i] = cost[i] + min(dp[i-1], dp[i-2])\n    return min(dp[-1], dp[-2])\n    \ndef min_cost_climbing_stairs_v4(cost):\n    '''\n    Write an efficient algorithm that calculates the minimum cost of climbing the stairs.\n    '''\n    if len(cost) == 2:\n        return cost[0] + cost[1]\n    if len(cost) == 1:\n        return cost[0]\n    if len(cost) == 3:\n        return cost[0] + cost[2]\n    dp = [0 for _ in range(len(cost))]\n    dp[0] = cost[0]\n    dp[1] = cost[1]\n    dp[2] = cost[2] + cost[0]\n    for i in range(3, len(cost)):\n        dp[i] = cost[i] + min(dp[i-1], dp[i-2])\n    return min(dp[-1], dp[-2])\n    \ndef min_cost_climbing_stairs_v5(cost):\n    '''\n    Write an efficient algorithm that calculates the minimum cost of climbing the stairs.\n    '''\n    if len(cost) == 2:\n        return cost[0] + cost[1]\n    if len(cost) == 1:\n        return cost[0]\n    if len(cost) == 3:\n        return cost[0] + cost[2]\n    dp = [0 for _ in range(len(cost))]\n    dp[0] = cost[0]\n    dp[1] = cost[1]\n    dp[2] = cost[2] + cost[0]\n    for i in range(3, len(cost)):\n        dp[i] = cost[i] + min(dp[i-1], dp[i-2])\n    return min(dp[-1], dp[-2])\n    \ndef max_area_histogram(arr):\n    '''\n    Given an array of numbers, calculate the maximum area under the histogram that can be formed by all the bars of the histogram.\n    '''\n    stack = []\n    max_area = 0\n    i = 0\n    while i < len(arr):\n        if len(stack) == 0 or arr[stack[-1]] <= arr[i]:\n            stack.append(i)\n            i += 1\n        else:\n            top = stack.pop()\n            if len(stack) == 0:\n                width = i\n            else:\n                width = i - stack[-1] - 1\n            area = width * arr[top]\n            max_area = max(max_area, area)\n    while len(stack)!= 0:\n        top = stack.pop()\n        if len(stack) == 0:\n            width = i\n        else:\n            width = i - stack[-1] - 1\n        area = width * arr[top]\n        max_area = max(max_area, area)\n    return max_area\n    \ndef max_area_histogram_v2(arr):\n    '''\n    Given an array of numbers, calculate the maximum area under the histogram that can be formed by all the bars of the histogram.\n    '''\n    stack = []\n    max_area = 0\n    i = 0\n    while i < len(arr):\n        if len(stack) == 0 or arr[stack[-1]] <= arr[i]:\n            stack.append(i)\n            i += 1\n        else:\n            top = stack.pop()\n            if len(stack) == 0:\n                width = i\n            else:\n                width = i - stack[-1] - 1\n            area = width * arr[top]\n            max_area = max(max_area, area)\n    while len(stack)!= 0:\n        top = stack.pop()\n        if len(stack) == 0:\n            width = i\n        else:\n            width = i "
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for bracket in exp:\n        if bracket in '({[':\n            stack.append(bracket)\n        elif bracket in ')}]':\n            if len(stack) == 0:\n                return False\n            opening_bracket = stack.pop()\n            if (opening_bracket == '(' and bracket == ')') or (opening_bracket == '{' and bracket == '}') or (opening_bracket == '[' and bracket == ']'):\n                continue\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join([word for word in test_str.split(' ') if len(word) < K])\n    "
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    split_str = test_str.split()\n    print(split_str)\n    new_split_str = []\n    for word in split_str:\n        if len(word)!= K:\n            new_split_str.append(word)\n    return''.join(new_split_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = ''\n    for word in test_str.split():\n        if len(word)!= K:\n            result += word +''\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    print(\"Input: \", test_str, K)\n    test_str = test_str.split()\n    res = []\n    for i in test_str:\n        if len(i)!= K:\n            res.append(i)\n    print(\"\\nOutput: \",''.join(res))\n    print()\n    return''.join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    lst = []\n    for word in test_str.split(' '):\n        if len(word) == K:\n            lst.append(word)\n    for i in lst:\n        test_str = test_str.replace(''+ i +'','')\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join([i for i in test_str.split() if len(i)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split(' ')\n    ans = []\n    for i in test_str:\n        if len(i) == K:\n            continue\n        else:\n            ans.append(i)\n    return''.join(ans)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split(' ')\n    final_list = []\n    for element in test_list:\n        if len(element)!= K:\n            final_list.append(element)\n    final_str =''.join(final_list)\n    return final_str\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = ''\n    i = 0\n    while i < len(test_str):\n        if len(test_str[i:i+K]) == K:\n            i = i + K\n        else:\n            res += test_str[i]\n        i += 1\n    return res\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # s = test_str.split()\n    s = test_str.split(\" \")\n    result = []\n    for word in s:\n        if len(word)!= K:\n            result.append(word)\n    print(result)\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #pattern=re.compile(pattern)\n    #text=input(\"Enter the text:\")\n    #pattern=input(\"Enter the pattern to search:\")\n    if pattern in text:\n        print(\"Pattern '{}' is found in '{}'\".format(pattern,text))\n        return pattern\n    else:\n        print(\"Pattern '{}' not found in '{}'\".format(pattern,text))\n        return None\ndef search_file(pattern,filename):\n    '''\n    Write a function to search for a string in a file. It should return the number of occurrences of the string in the file.\n    '''\n    #pattern=input(\"Enter the pattern to search:\")\n    #filename=input(\"Enter the file to search:\")\n    try:\n        with open(filename) as f:\n            text=f.read()\n        print(\"Number of occurrence of '{}' in file '{}': {}\".format(pattern,filename,text.count(pattern)))\n        return text.count(pattern)\n    except IOError:\n        print(\"File '{}' not accessible!\".format(filename))\n        return None\ndef string_in_file(filename):\n    '''\n    Write a function to search for a string in a file. It should return a list of string that contains the string, and their positions in the file.\n    '''\n    #filename=input(\"Enter the file to search:\")\n    try:\n        with open(filename) as f:\n            text=f.read()\n        print(\"The following string is found in '{}': {}\".format(filename,text.split()))\n        return text.split()\n    except IOError:\n        print(\"File '{}' not accessible!\".format(filename))\n        return None\ndef count_vowels(word):\n    '''\n    Write a function to count the number of vowels in a word. Return the number of vowels in the word.\n    '''\n    #word=input(\"Enter the word:\")\n    vowels=['a','e','i','o','u']\n    word=list(word)\n    vowel_count=0\n    for i in word:\n        if i in vowels:\n            vowel_count+=1\n    print(\"The number of vowels in '{}' is {}\".format(word,vowel_count))\n    return vowel_count\ndef find_alphabet(letter):\n    '''\n    Write a function to find the position of a letter in the alphabet. Return None if there is no match.\n    '''\n    #letter=input(\"Enter the letter:\")\n    try:\n        if letter in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n            print(\"The position of '{}' is {}\".format(letter,ord(letter)-96))\n            return ord(letter)-96\n    except IOError:\n        print(\"Letter '{}' not in alphabet\".format(letter))\n        return None\ndef replace_string(text,old,new):\n    '''\n    Write a function to replace a string with another string. Return the text with the old string replaced with the new string.\n    '''\n    #text=input(\"Enter the text:\")\n    #old=input(\"Enter the string to be replaced:\")\n    #new=input(\"Enter the string to replace with:\")\n    text=re.sub(old,new,text,count=1)\n    print(\"The new text is: {}\".format(text))\n    return text\ndef replace_multiple(text,pattern,new_string):\n    '''\n    Write a function to replace multiple strings with another string. Return the text with all the occurrences of the old string replaced with the new string.\n    '''\n    #text=input(\"Enter the text:\")\n    #pattern=input(\"Enter the string to be replaced:\")\n    #new_string=input(\"Enter the string to replace with:\")\n    text=re.sub(pattern,new_string,text)\n    print(\"The new text is: {}\".format(text))\n    return text\ndef count_string(text,string):\n    '''\n    Write a function to count the occurrence of a string within another string.\n    '''\n    #text=input(\"Enter the text:\")\n    #string=input(\"Enter the string to be counted:\")\n    count=0\n    for i in text.split():\n        if string in i:\n            count+=1\n    print(\"The number of occurrences of the string '{}' is {}\".format(string,count))\n    return count\ndef split_words(text):\n    '''\n    Write a function to split a string into a list of words. Return the list of words.\n    '''\n    #text=input(\"Enter the text:\")\n    words=re.split('\\s+|(?<!\\d)[,.](?!\\d)',text)\n    print(\"The list of words is: {}\".format(words))\n    return words\ndef split_lines(text):\n    '''\n    Write a function to split a string into a list of lines. Return the list of lines.\n    '''\n    #text=input(\"Enter the text:\")\n    lines=text.split('\\n')\n    print(\"The list of lines is: {}\".format(lines))\n    return lines\ndef string_to_characters(text):\n    '''\n    Write a function to convert a string to a list of characters. Return the list of characters.\n    '''\n    #text=input(\"Enter the text:\")\n    characters=list(text)\n    print(\"The list of characters is: {}\".format(characters))\n    return characters\ndef reverse(text):\n    '''\n    Write a function to reverse a string. Return the string reversed.\n    '''\n    #text=input(\"Enter the text:\")\n    print(\"The reversed text is: {}\".format(text[::-1]))\n    return text[::-1]\ndef add_space_character(text):\n    '''\n    Write a function to add a space character at the end of each line in a string. Return the text with spaces at the end of each line.\n    '''\n    #text=input(\"Enter the text:\")\n    lines=text.split('\\n')\n    print(\"The list of lines is: {}\".format(lines))\n    lines=[i+''for i in lines]\n    print(\"The new text with space at the end of each line: {}\".format('\\n'.join(lines)))\n    return '\\n'.join(lines)\ndef remove_whitespace(text):\n    '''\n    Write a function to remove all the whitespace characters in a string. Return the text with no whitespaces.\n    '''\n    #text=input(\"Enter the text:\")\n    print(\"The text without whitespace is: {}\".format(text.strip()))\n    return text.strip()\ndef check_capital(text):\n    '''\n    Write a function to check whether a text starts with a capital letter or not. Return True if the text starts with a capital letter, else False.\n    '''\n    #text=input(\"Enter the text:\")\n    if text[0].isupper():\n        print(\"The text starts with a capital letter: {}\".format(True))\n    else:\n        print(\"The text starts with a capital letter: {}\".format(False))\ndef lower_string(text):\n    '''\n    Write a function to convert a text into a lowercase string. Return the lowercase string.\n    '''\n    #text=input(\"Enter the text:\")\n    print(\"The lowercase text is: {}\".format(text.lower()))\n    return text.lower()\ndef upper_string(text):\n    '''\n    Write a function to convert a text into an uppercase string. Return the uppercase string.\n    '''\n    #text=input(\"Enter the text:\")\n    print(\"The uppercase text is: {}\".format(text.upper()))\n    return text.upper()\ndef remove_character(text,string):\n    '''\n    Write a function to remove a character from a string. Return the text with the character removed.\n    '''\n    #text=input(\"Enter the text:\")\n    #string=input(\"Enter the character to be removed:\")\n    text=text.replace(string,'')\n    print("
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if(pattern == ''):\n        return None\n    elif(len(pattern) == 1):\n        for i in range(len(text)):\n            if(text[i] == pattern):\n                return i\n        return None\n    else:\n        occurance = []\n        for i in range(len(text)-len(pattern)+1):\n            if(text[i:i+len(pattern)] == pattern):\n                occurance.append(i)\n        return occurance\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    search_result= re.search(pattern,text)\n    if search_result:\n        return search_result.group(0)\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    if len(pattern) > len(text):\n        return None\n    occurance = []\n    index = []\n    for i in range(len(text)-len(pattern)+1):\n        if text[i] == pattern[0] and text[i:i+len(pattern)] == pattern:\n            occurance.append(text[i:i+len(pattern)])\n            index.append(i)\n    return occurance,index\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(r'\\b'+ pattern + r'\\b')\n    match = pattern.search(text)\n    if match:\n        print(match.group(0))\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.findall(pattern,text)\n    if len(match)==0:\n        return None\n    return match\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern,text)\n    if result:\n        print(\"substring\",result)\n    else:\n        print(\"none\")\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex=re.compile(pattern)\n    occurance=regex.findall(text)\n    #print(occurance)\n    if occurance==[]:\n        return None\n    else:\n        for i in occurance:\n            position=regex.search(text)\n            #print(position.start(),position.end())\n            if position.start()<position.end():\n                start=position.start()\n                end=position.end()\n            else:\n                start=position.end()\n                end=position.start()\n        return (occurance,start,end)"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    positions = []\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    else:\n        positions.append(index)\n        index = text.find(pattern,index+1)\n        while index!= -1:\n            positions.append(index)\n            index = text.find(pattern,index+1)\n    return positions\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance = re.findall(pattern,text)\n    if occurance == []:\n        return None\n    else:\n        return occurance\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    new_nums = []\n    for i in range(1, len(nums) + 1, 2):\n        new_nums.append(nums[i - 1])\n    return new_nums\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    result = None\n    #Remove pass and write your code here\n    if len(nums)==0:\n        result = True\n    else:\n        if nums[0]%2!=0:\n            result = True\n        else:\n            result = False\n            return result\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return True\n    for index in range(0,len(nums),2):\n        if nums[index] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(0,len(nums)):\n        if (i+1)%2==0:\n            if nums[i]%2==0:\n                count = count + 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(0,len(nums),2):\n        if nums[index] %2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all([num%2 for num in nums[::2]])\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    result = []\n    for index, val in enumerate(nums):\n        if index % 2 == 0 and val % 2 == 0:\n            result.append(False)\n        elif index % 2!= 0 and val % 2!= 0:\n            result.append(False)\n        else:\n            result.append(True)\n    return result\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i%2!= 0:\n            if nums[i]%2!= 0:\n                count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) % 2 == 0:\n        return False\n    i = 1\n    while i <= len(nums):\n        if i % 2!= 0 and nums[i - 1] % 2 == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all([nums[i]%2==1 for i in range(0,len(nums),2)])\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return sum([1 for i in test_str if i in 'aeiouAEIOU'])\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if i==0 and test_str[i+1] in 'aeiou' or i==len(test_str)-1 and test_str[i-1] in 'aeiou' or test_str[i-1] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count +=1\n        elif test_str[i-1] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count +=1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    for index, character in enumerate(test_str):\n        if character.lower() in vowels:\n            try:\n                if (test_str[index + 1].lower() in vowels) or (test_str[index - 1].lower() in vowels):\n                    count += 1\n            except IndexError:\n                pass\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # return sum([1 if ((ord(test_str[i-1]) in [97, 101, 105, 111, 117]) and (ord(test_str[i+1]) in [97, 101, 105, 111, 117])) else 0 for i in range(1, len(test_str)-1)])\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if not test_str:\n        return 0\n    \n    vowel_set = set('aeiou')\n    vowel_count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowel_set and (test_str[i - 1] in vowel_set or test_str[i + 1] in vowel_set):\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u' or test_str[i] == 'A' or test_str[i] == 'E' or test_str[i] == 'I' or test_str[i] == 'O' or test_str[i] == 'U':\n            if test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u' or test_str[i+1] == 'A' or test_str[i+1] == 'E' or test_str[i+1] == 'I' or test_str[i+1] == 'O' or test_str[i+1] == 'U':\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a','e','i','o','u'])\n    count = 0\n    for i in range(0,len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_letters = set(\"aeiou\")\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowel_letters and test_str[i-1] in vowel_letters:\n            count += 1\n        elif test_str[i] in vowel_letters and test_str[i+1] in vowel_letters:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_dict = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n    for char in test_str:\n        if char in vowels_dict.keys():\n            vowels_dict[char] += 1\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_non_repeated_elements = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            sum_non_repeated_elements += num\n    return sum_non_repeated_elements\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = [1,2,3,4,5,5,6,7,8,9,7,7]\n    num = []\n    for i in arr:\n        if i not in num:\n            num.append(i)\n    return sum(num)\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_arr = [] \n    sum_arr = sum(set(arr),[]) \n    return sum_arr \n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    print(\"Sum of non-repeated elements:\", sum(set(arr)))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # initialize a new list to store sum of non-repeated elements\n    arr_sum = []\n    # Iterate over list of input\n    for i in arr:\n        # check if input is not in the list and add it to the list\n        if i not in arr_sum:\n            arr_sum.append(i)\n    # Return the sum of non-repeated elements\n    return sum(arr_sum)\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr)) \n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Python program to find sum of non-repeated\n    # elements in a given array\n    # initialize array\n    arr = [1,2,3,4,5]\n    # get array length\n    n = len(arr)\n    # create a set to store unique elements in\n    # array\n    s = set()\n    # traverse array elements\n    for i in range(n):\n        # check if exists in set or not\n        if arr[i] in s:\n            continue\n        else:\n            s.add(arr[i])\n            # print elements\n            print(arr[i])\n    # Driver code\n    # print(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # get the set of unique elements from the list\n    unique_elements = set(arr) \n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr_set = set(arr)\n    sum = 0\n    for num in arr_set:\n        sum += num\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # arr = [10, 20, 30, 10, 20, 30]\n    # return sum(set(arr))\n    return sum(arr)\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #result = []\n    #for key,group in groupby(list1,lambda x: x==list1[0]):\n    #    result.append(list(group))\n    #return result\n    result = []\n    for key,group in groupby(list1,lambda x: x==list1[0]):\n        result.append(list(group))\n    return result\n    \nl1 = [1,1,1,1,2,2,3,4,5,5,6,6,7,8,9,10,11,12,12,12]\nprint(pack_consecutive_duplicates(l1))\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    from itertools import groupby\n    def pack_duplicates(list1):\n        return [list(g) for k,g in groupby(list1)]\n    return pack_duplicates(list1)\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # list1=[1,1,2,3,3,3,4,4,4,4,5,6]\n    # list1=[1,1,1,1,2,2,2,3,3,4,4,5,6]\n    # list1=[1,1,1,1,2,2,3,3,3,3,4,4,4,4,5,6]\n    list1.sort()\n    new_list=[]\n    for key,group in groupby(list1):\n        new_list.append(list(group))\n    print(new_list)\npack_consecutive_duplicates([1,1,1,1,2,2,3,3,3,3,4,4,4,4,5,6])"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1_new = []\n    for k, g in groupby(list1):\n        list1_new.append(list(g))\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_elements = list1\n    result = [[k, len(list(g))] for k, g in groupby(list_elements)]\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #groupby, but only care about duplicates\n    for k, g in groupby(list1):\n        yield list(g)\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        list1[:] = [list(group) for key, group in groupby(list1)]\n        list1[:] = [list(group) for key, group in groupby(list1)]\n        list1[:] = [list(group) for key, group in groupby(list1)]\n        list1[:] = [list(group) for key, group in groupby(list1)]\n        list1[:] = [list(group) for key, group in groupby(list1)]\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result_list = [[list(g) for k, g in groupby(list1) if k == i] for i in set(list1)]\n    return result_list\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    print(list(zip(*[(k, len(list(v))) for k,v in groupby(list1)])))\n    \npack_consecutive_duplicates([1,2,3,3,3,3,4,5])\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    list3 = []\n    for key,group in groupby(list1):\n        list2.append(list(group))\n    for i in list2:\n        if len(i) > 1:\n            list3.append(i)\n    return list3\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    final = {}\n    for i in list1:\n        final[tuple(i)] = list1.count(i)\n    return final\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {tuple(i):list1.count(i) for i in list1}\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    for x in list1:\n        if x not in list2:\n            list2.append(x)\n        else:\n            continue\n    return list2\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def list_tuple(list_):\n        list_tuple = []\n        for i in list_:\n            list_tuple.append(tuple(i))\n        return list_tuple\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if tuple(i) not in count:\n            count[tuple(i)] = 1\n        else:\n            count[tuple(i)] += 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return list(map(tuple, set(map(tuple, list1))))\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(tuple(list1[i]))\n    unique_sublists = set(list2)\n    dict1 = {}\n    for i in unique_sublists:\n        dict1[i] = list2.count(i)\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_count = {}\n    for i in list1:\n        if tuple(i) in list_count:\n            list_count[tuple(i)] += 1\n        else:\n            list_count[tuple(i)] = 1\n    return list_count\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n    dictionary = dict()\n    for item in unique_list:\n        dictionary[tuple(item)] = list1.count(item)\n    return dictionary\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    uniq_list=[]\n    uniq_tuples=[]\n    for i in list1:\n        if i not in uniq_list:\n            uniq_list.append(i)\n    for i in uniq_list:\n        uniq_tuples.append(tuple(i))\n    unique_tuples_dict={}\n    for i in uniq_tuples:\n        unique_tuples_dict[i] = list1.count(i)\n    return unique_tuples_dict\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)):\n        combination = list(combinations(test_list, i))\n        result.extend(combination)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    \n    for i in range(0,len(test_list)+1):\n        \n        combinations_of_sums = list(combinations(test_list, i))\n        #print(combinations_of_sums)\n        all_combinations.extend(combinations_of_sums)\n    return all_combinations\n    \ntest_list = [1,2,3,4,5,6,7]\nprint(find_combinations(test_list))"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums_list = []\n    # test_list = (1,2,3,4,5,6)\n    # sum = (1,2,3,4,5,6)\n    for i in test_list:\n        for j in test_list:\n            for k in test_list:\n                sums_list.append((i,j,k))\n    print(sums_list)\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = [] \n    for i in range(len(test_list) + 1): \n        comb.extend(list(combinations(test_list, i))) \n    return comb\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            sum = test_list[i] + test_list[j]\n            if sum not in all_combinations:\n                all_combinations.append(sum)\n    print(all_combinations)\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Declare a list that will store the tuples\n    combinations_list = []\n    # Iterate the given tuple list\n    for i in test_list:\n        # Iterate the test_list for every index\n        for j in range(len(test_list)):\n            # Check if the current index is not equal to the current index\n            if i[j]!= test_list[j]:\n                # Find the index of the next different number\n                next_index = test_list[j].index(i[j]) + 1\n                # Remove the numbers from the current index to the next different number\n                remove_numbers = test_list[j][next_index:]\n                # Find the next different number in the list\n                for k in range(len(test_list)):\n                    if test_list[k][0] not in remove_numbers:\n                        next_number = test_list[k][0]\n                        break\n                # Remove the next different number from all the lists\n                for l in range(len(test_list)):\n                    test_list[l] = test_list[l][:test_list[l].index(next_number)]\n                # Add the removed number tuple to the combinations list\n                combinations_list.append(i + (next_number,))\n                # Add the tuple with the removed number to the combinations list\n                combinations_list.append((next_number,) + i)\n                # Find all the tuples without the removed number\n                test_list = find_unique_tuples(test_list, next_number)\n                break\n    # Return the combinations list\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                sum_list.append((test_list[i], test_list[j]))\n    return sum_list\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    ans_list = []\n    #Using list comprehension to compute the combinations in the list\n    return [sum(elem) for elem in combinations(test_list,2)]\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    sum_list2 = []\n    for i in test_list:\n        if type(i) == tuple:\n            for j in i:\n                sum_list.append(j)\n        else:\n            sum_list.append(i)\n    for i in range(1, len(sum_list) + 1):\n        sum_list2.append(i)\n    for i in combinations(sum_list2, 2):\n        if sum(i) in sum_list:\n            print(i)\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #function to find the combinations of tuples in the given tuple list\n    #input: tuple list\n    #output: tuple list\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n) :\n        if (n % i == 0) : \n            count = count + 1\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    n=int(n)\n    c=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            c+=1\n    if(c%2==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i <= math.sqrt(n):\n        if (n % i == 0):\n            if (n / i == i):\n                count = count + 1\n            else:\n                count = count + 2\n        i = i + 1\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    count = 0\n    while (i <= n) : \n        if (n % i == 0) : \n            count = count + 1\n        i = i + 1\n    if (count % 2 == 0) : \n        return \"Even\"\n    else : \n        return \"Odd\""
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    if (count % 2 == 0) : \n        print(str(n) + \" is a perfect number\")\n    else : \n        print(str(n) + \" is not a perfect number\")\n    return\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n % 2 == 0:\n        print(\"The number of divisors of {0} is {1}\".format(n, int((n + 1)/2)))\n    else:\n        print(\"The number of divisors of {0} is {1}\".format(n, int(n/2)))\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, (n // 2) + 1) : \n        if (n % i == 0) : \n            count = count + 1\n    if(count%2==0) :\n        print(\"count of divisors is even\")\n    else : \n        print(\"count of divisors is odd\")\ndef prime_number(n): \n    '''\n    Write a python function to print all prime numbers in a given range. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-13.php\n    '''\n    for i in range(1, n + 1) : \n        for j in range(2, i) : \n            if (i % j == 0) : \n                break\n        else : \n            print(i)\ndef prime_list(n): \n    '''\n    Write a python function to print all prime numbers in a given range. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-13.php\n    '''\n    primes = []\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    return(primes)\ndef find_next_prime(n):\n    '''\n    Write a python function to print the first n prime numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-9.php\n    '''\n    if(n<=1):\n        return(1)\n    if(n==2):\n        return(2)\n    if(n%2==0):\n        n=n+1\n    else:\n        n=n+2\n    for i in range(3,n):\n        for j in range(2,i):\n            if(i%j==0):\n                break\n        else:\n            return(i)\ndef fibonacci(n): \n    '''\n    Write a python function to print the nth term in Fibonacci series. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    if(n<0):\n        return(0)\n    elif(n==1 or n==2):\n        return(n)\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\ndef factorial(n): \n    '''\n    Write a python function to calculate the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-17.php\n    '''\n    if(n==0):\n        return(1)\n    elif(n>0):\n        return(n*factorial(n-1))\n    else:\n        return(0)\ndef harmonic(n): \n    '''\n    Write a python function to calculate the harmonic sum of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if(n==1):\n        return(1)\n    else:\n        return(1/n+harmonic(n-1))\ndef pascal_triangle(n): \n    '''\n    Write a python function to print the first n rows of Pascal's Triangle. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    if(n==1):\n        print([1])\n    elif(n>1):\n        print([1])\n        print([1,1])\n        for i in range(3,n+1):\n            curr_row = [1]\n            prev_row = [1,1]\n            for j in range(1, i):\n                curr_row.append(prev_row[j] + prev_row[j-1])\n            curr_row.append(1)\n            print(curr_row)\n            prev_row = curr_row\ndef reverse_a_string(s):\n    '''\n    Write a python function to print the reverse of a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    rev = ''\n    for i in s:\n        rev = i + rev\n    return(rev)\ndef check_prime(n): \n    '''\n    Write a python function to check whether a number is prime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-9.php\n    '''\n    if(n<0):\n        return(False)\n    elif(n==0 or n==1):\n        return(False)\n    elif(n==2):\n        return(True)\n    else:\n        for i in range(2,n):\n            if(n%i==0):\n                return(False)\n        return(True)\ndef factorial(n): \n    '''\n    Write a python function to calculate the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-17.php\n    '''\n    if(n==0):\n        return(1)\n    elif(n>0):\n        return(n*factorial(n-1))\n    else:\n        return(0)\ndef harmonic(n): \n    '''\n    Write a python function to calculate the harmonic sum of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if(n==1):\n        return(1)\n    else:\n        return(1/n+harmonic(n-1))\ndef pascal_triangle(n): \n    '''\n    Write a python function to print the first n rows of Pascal's Triangle. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    if(n==1):\n        print([1])\n    elif(n>1):\n        print([1])\n        print([1,1])\n        for i in range(3,n+1):\n            curr_row = [1]\n            prev_row = [1,1]\n            for j in range(1, i):\n                curr_row.append(prev_row[j] + prev_row[j-1])\n            curr_row.append(1)\n            print(curr_row)\n            prev_row = curr_row\ndef reverse_a_string(s):\n    '''\n    Write a python function to print the reverse of a string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    rev = ''\n    for i in s:\n        rev = i + rev\n    return(rev)\ndef check_prime(n): \n    '''\n    Write a python function to check whether a number is prime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-9.php\n    '''\n    if(n<0):\n        return(False)\n    elif(n==0 or n==1):\n        return(False)\n    elif(n==2):\n        return(True)\n    else:\n        for i in range(2,n):\n            if(n%i==0):\n                return(False)\n        return(True)\ndef factorial(n): \n    '''\n    Write a python function to calculate the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-17.php\n    '''\n    if(n==0):\n        return(1)\n    elif(n>0):\n        return(n*factorial("
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    cnt = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    if (cnt % 2 == 0) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            count += 1\n    if count%2 == 0 :\n        return True\n    else :\n        return False\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,int(math.sqrt(n))+1): \n        if (n % i == 0): \n            if (n / i == i): \n                divisors += 1\n            else: \n                divisors += 2\n    return divisors\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        for i in range(0,len(arr),2):\n            if len(arr[i:]) == 2:\n                sum += arr[i] + arr[i+1]\n            else:\n                sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([arr[i] for i in range(len(arr)) if len(arr) % 2 == 1])\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i+1)%2!= 0:\n                sum += arr[i:j+1]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([sum(x) for x in arr if len(x)%2 == 1])\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if len(arr[i:j+1]) % 2 == 1:\n                total += sum(arr[i:j+1])\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    for i in range(len(arr)):\n        temp = arr[i]\n        for j in range(len(arr) - i):\n            temp += arr[i+j]\n            if len(temp) % 2 == 0:\n                temp = temp[:-1]\n            else:\n                return temp\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([sum(arr[i:i+x]) for x in range(1,len(arr)+1,2) for i in range(len(arr))])\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i+1) % 2!= 0:\n                # print(arr[i:j+1])\n                sum += sum(arr[i:j+1])\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    ans = 0\n    for i in range(len(arr)):\n        ans += sum(arr[i:i+len(arr)%2])\n    return ans\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        sum = 0\n        for j in range(i, len(arr)):\n            if j-i % 2 == 1:\n                sum = sum + arr[j]\n        ans = ans + sum\n    return ans\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #Convert hue, saturation, and value to rgb color.\n    if s == 0:\n        r = v\n        g = v\n        b = v\n    else:\n        if h >= 360 or h < 0:\n            print('input h must be <360 and >0')\n            sys.exit()\n        h = float(h)\n        h_ = h/60\n        p = v*(1-s)\n        q = v*(1-s*h_)\n        t = v*(1-s*(1-h_))\n        if h >=0 and h < 120:\n            r = v\n            g = t\n            b = p\n        elif h >= 120 and h < 240:\n            r = q\n            g = v\n            b = p\n        elif h >= 240 and h < 360:\n            r = p\n            g = v\n            b = t\n        elif h == 360 or h == 0:\n            r = v\n            g = p\n            b = q\n        return r, g, b\n        \n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # TODO: Write your code here\n    r /= 255\n    g /= 255\n    b /= 255\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    # print(r,g,b)\n    rgb_max = max(r, g, b)\n    rgb_min = min(r, g, b)\n    v = rgb_max\n    if (r == g) and (g == b):\n        s = 0\n    else:\n        if rgb_max == r:\n            h = (60 * ((g-b)/(rgb_max-rgb_min))+360)%360\n        elif rgb_max == g:\n            h = (60 * ((b-r)/(rgb_max-rgb_min))+120)%360\n        elif rgb_max == b:\n            h = (60 * ((r-g)/(rgb_max-rgb_min))+240)%360\n        if h < 0:\n            h = h + 360\n        s = ((rgb_max-rgb_min)/rgb_max)\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    h = h/360 * 255\n    s = s/100 * 255\n    v = v/100 * 255\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #print(r, g, b)\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    h = h/360 * 100\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    # h, s, v = 0, 0, 0\n    mx, mn = max(r, g, b), min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255\n    g = g/255\n    b = b/255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b)/delta)%6\n    elif cmax == g:\n        h = ((b - r)/delta)+2\n    elif cmax == b:\n        h = ((r - g)/delta)+4\n    if h < 0:\n        h += 6\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    # h, s, v = hue, saturation, value = \n    c_max = max(r, g, b)\n    c_min = min(r, g, b)\n    delta = c_max-c_min\n    \n    # Hue\n    if c_max == c_min:\n        h = 0\n    elif c_max == r:\n        h = (60 * ((g-b)/delta) + 360) % 360\n    elif c_max == g:\n        h = (60 * ((b-r)/delta) + 120) % 360\n    elif c_max == b:\n        h = (60 * ((r-g)/delta) + 240) % 360\n    # Saturation\n    if c_max == 0:\n        s = 0\n    else:\n        s = (delta/c_max) * 100\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for i in list1:\n        if list1.index(i) % 2 == 0:\n            even_product = even_product * i\n        else:\n            odd_product = odd_product * i\n    return even_product, odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    l=list1.split()\n    l1=[]\n    l2=[]\n    for i in l:\n        if int(i)%2==0:\n            l1.append(int(i))\n        else:\n            l2.append(int(i))\n    print(f'Even numbers in list: {l1}')\n    print(f'Odd numbers in list: {l2}')\n    print(f'Product of first even and odd number is: {l1[0]*l2[0]}')\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num%2 == 0:\n            even_num = even_num*num\n        else:\n            odd_num = odd_num*num\n    return even_num,odd_num\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_even = 1\n    product_odd = 1\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if (i % 2 == 0):\n            result *= i\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return reduce(lambda x, y: x * y, [i for i in list1 if i % 2 == 0 and i % 1!= 0])\n    \nif __name__ == '__main__':\n    list1 = [5, 6, 7, 8, 9]\n    print(mul_even_odd(list1)"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product1=1\n    product2=1\n    for i in range(len(list1)):\n        if i%2==0:\n            product1*=list1[i]\n        else:\n            product2*=list1[i]\n    return product1,product2\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for x in list1:\n        if x % 2 == 0:\n            product *= x\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i % 2 == 0:\n            product *= i\n        else:\n            pass\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    i=0\n    while i < len(list1):\n        if list1[i] % 2 == 0:\n            prod *= list1[i]\n        i+=1\n    i=0\n    while i < len(list1):\n        if list1[i] % 2!= 0:\n            prod *= list1[i]\n        i+=1\n    return prod\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(item) for item in test_str.split(\",\"))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        str_list = test_str.split(',')\n        int_list = []\n        for str_ in str_list:\n            int_list.append(int(str_))\n        return tuple(int_list)\n    except ValueError:\n        return 'Invalid input!'\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(', '))\n    pass\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = tuple(test_str.split(','))\n    return tuple_str\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(map(int, test_str.split(',')))\n    except:\n        return 'Invalid'\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # the str() function can be used to convert the values to a string.\n    # the tuple() function can be used to convert the string to a tuple.\n    # by using tuple() function and str() function, you can convert the string into tuple.\n    # by using split() function and join() function, you can split the string into an array of values.\n    # by using int() function, you can convert the string into integer.\n    # by using split() function, you can split the values in the string.\n    # in the end, you can use join() function to join the strings in the array.\n    \n    # split the str with comma to array of values.\n    split_str = test_str.split(',')\n    \n    # convert the array of values into a tuple.\n    tuple_str_int = tuple(map(int, split_str))\n    \n    # join the values in the array into a string.\n    tuple_str_int = ','.join(split_str)\n    \n    return tuple_str_int\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = []\n    for i in test_str.split(','):\n        test_list.append(int(i))\n    return tuple(test_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    list_str = test_str.split(',')\n    return tuple(int(i) for i in list_str)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    i = bisect.bisect_left(a, x)\n    if i!= n and a[i] == x:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    right = bisect.bisect_right(a, x)\n    return right\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i in range(len(a)):\n        if a[i] < x:\n            return i\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    length = len(a)\n    if length == 0:\n        return 0\n    for i in range(length):\n        if a[i] >= x:\n            return i\n    return length\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a or x < a[0]:\n        return 0\n    elif x > a[-1]:\n        return len(a)\n    l, r = 0, len(a) - 1\n    while l < r:\n        m = l + (r - l) // 2\n        if x > a[m]:\n            l = m + 1\n        else:\n            r = m\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a,x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\ndef binary_search(a, x):\n    '''\n    Write a function to search for a specific element within a sorted array. \n    '''\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\ndef binary_search_recur(a, low, high, x):\n    '''\n    Write a recursive function to search for a specified element within a sorted array. \n    '''\n    if low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            return binary_search_recur(a, mid + 1, high, x)\n        else:\n            return binary_search_recur(a, low, mid - 1, x)\n    return -1\ndef interpolation_search(a, x):\n    '''\n    Write a function to search for a specified element within a sorted array using the binary search method. \n    '''\n    low, high = 0, len(a) - 1\n    while low <= high and x >= a[low] and x <= a[high]:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    if low > high:\n        return -1\n    left = a[low]\n    right = a[high]\n    if left > right:\n        i = right_insertion(a, x)\n        if x >= a[i] and x <= a[i]:\n            return i\n    return -1\ndef binary_search_iterative(a, x):\n    '''\n    Write an iterative function to search for a specified element within a sorted array using the binary search method. \n    '''\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\ndef rotated_array_search(a, x):\n    '''\n    Write an efficient function to search for a value in rotated array using the binary search algorithm. \n    '''\n    if not a:\n        return -1\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < a[high]:\n            if a[mid] < x <= a[high]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        elif a[mid] > a[high]:\n            if a[low] <= x < a[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        else:\n            low = mid + 1\n    return -1\ndef find_pivot(a, low, high):\n    '''\n    Find the pivot point of a rotated array. \n    '''\n    if low >= high:\n        return low\n    mid = (low + high) // 2\n    if a[low] < a[mid]:\n        return find_pivot(a, low, mid)\n    else:\n        return find_pivot(a, mid + 1, high)\ndef rotated_array_search_recursive(a, low, high, x):\n    '''\n    Write an efficient recursive function to search for a value in a rotated array. \n    '''\n    if low > high:\n        return -1\n    mid = (low + high) // 2\n    if x == a[mid]:\n        return mid\n    if x > a[mid]:\n        return rotated_array_search_recursive(a, mid + 1, high, x)\n    if x < a[mid]:\n        return rotated_array_search_recursive(a, low, mid - 1, x)\ndef search_insert_position(a, x):\n    '''\n    Write an efficient function to search for a specific value within a sorted array. \n    '''\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\ndef jump_search(a, x):\n    '''\n    Write an efficient function to search for a specified element within a sorted array using jump search. \n    '''\n    high = len(a) - 1\n    while a[high] >= x and a[high]!= x:\n        high -= 1\n    if a[high] == x:\n        return high\n    low = 0\n    while a[low] <= x and a[low]!= x:\n        low += 1\n    if a[low] == x:\n        return low\n    if a[high] < x:\n        return -1\n    if a[low] > x:\n        return -1\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    if a[low] == x:\n        return low\n    return -1\ndef jump_search_recursive(a, x, low, high):\n    '''\n    Write a recursive function to search for a specified element within a sorted array using jump search. \n    '''\n    if low > high:\n        return -1\n    mid = low + (high - low) // 2\n    if a[mid] == x:\n        return mid\n    if a[mid] < x:\n        return jump_search_recursive(a, x, mid + 1, high)\n    if a[mid] > x:\n        return jump_search_recursive(a, x, low, mid - 1)\n    if a[low] == x:\n        return low\n    if a[high] == x:\n        return high\n    return -1\ndef search_greater_equal(a, x):\n    '''\n    Write an efficient function to search for a specific element within a sorted array using binary search. \n    '''\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] >= x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\ndef search_greater_equal_recursive(a, x, low, high):\n    '''\n    Write a recursive function to search for a specific element within a sorted array using binary search. \n    '''\n    if low > high:\n        return -1\n    mid = (low + high) // 2\n    if x < a[mid]:\n        return search_greater_equal_recursive(a, x, low, mid - 1)\n    elif x == a[mid]:\n        return mid\n    else:\n        return search_greater_equal_recursive(a, x, mid + 1, high)\ndef find_first_greater(a, x):\n    '''\n    Write a function to find the first occurrence of an element greater than or equal to a given element in a sorted array. \n    '''\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] >= x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\ndef find_first_greater_recursive(a, x):\n    '''\n    Write a recursive functio"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x <= a[0]: return 0\n    elif x == a[len(a)-1]: return len(a)\n    for i in range(1, len(a)):\n        if x <= a[i]: return i\n    return len(a)\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('a...b{3}')\n    if pattern.search(text):\n        return 'found a...b{3}'\n    else:\n        return 'no match'\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"ab{3}\")\n    if pattern.search(text):\n        return \"Match\"\n    else:\n        return \"No Match\"\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search(\"ab{3}\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = 'ab{3}'\n    if re.search(pattern,text):\n        return 'Found match!'\n    else:\n        return 'Not matched'\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text):\n        return 'Found a match'\n    else:\n        return 'Not matched'\nprint(text_match_three('ab'))\nprint(text_match_three('abbbbbbbbbbb'))\nprint(text_match_three('abbbbbbbbbbbbbbb'))\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('ab{3}',text):\n        return True\n    else:\n        return False\ndef text_match_two_vowels(text):\n    '''\n    Write a function that matches a string that has \n    2 vowels in a row. \n    '''\n    if re.search('[aeiou]{2}',text):\n        return True\n    else:\n        return False\ndef text_match_vowel_with_consonant(text):\n    '''\n    Write a function that matches a string that has \n    a vowel followed by a consonant.\n    '''\n    if re.search('[aeiou]{1}[bcdfghjklmnpqrstvwxyz]{1}',text):\n        return True\n    else:\n        return False\ndef text_match_word_with_number(text):\n    '''\n    Write a function that matches a string that \n    contains 1 or more digits.\n    '''\n    if re.search('\\d+',text):\n        return True\n    else:\n        return False\ndef text_match_word_with_letter(text):\n    '''\n    Write a function that matches a string that \n    contains 1 or more lowercase letters.\n    '''\n    if re.search('[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits(text):\n    '''\n    Write a function that matches a string \n    that contains only 10 digits.\n    '''\n    if re.search('\\d{10}',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits_with_hyphen(text):\n    '''\n    Write a function that matches a string \n    that has 10 or more digits, and 2 or more \n    non-overlapping hyphens.\n    '''\n    if re.search('\\d{10}[-]{2,}',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits_with_underscore(text):\n    '''\n    Write a function that matches a string \n    that has 10 or more digits, and 2 or more \n    non-overlapping underscores.\n    '''\n    if re.search('\\d{10}_{2,}',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits_with_non_overlapping_whitespace(text):\n    '''\n    Write a function that matches a string \n    that has 10 or more digits, and 2 or more \n    non-overlapping whitespace.\n    '''\n    if re.search('\\d{10}[\\s]{2,}',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits_with_non_overlapping_punctuation(text):\n    '''\n    Write a function that matches a string \n    that has 10 or more digits, and 2 or more \n    non-overlapping punctuation.\n    '''\n    if re.search('\\d{10}[\\s]{2,}',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits_with_non_overlapping_hyphen_and_underscore(text):\n    '''\n    Write a function that matches a string \n    that has 10 or more digits, and 2 or more \n    non-overlapping hyphen and underscore.\n    '''\n    if re.search('\\d{10}[-_]{2,}',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits_with_non_overlapping_whitespace_and_punctuation(text):\n    '''\n    Write a function that matches a string \n    that has 10 or more digits, and 2 or more \n    non-overlapping whitespace and punctuation.\n    '''\n    if re.search('\\d{10}[-_\\s]{2,}',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits_with_underscore_and_punctuation(text):\n    '''\n    Write a function that matches a string \n    that has 10 or more digits, and 2 or more \n    non-overlapping underscores and punctuation.\n    '''\n    if re.search('\\d{10}[-_\\s]{2,}',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits_with_non_overlapping_hyphen_and_underscore_and_punctuation(text):\n    '''\n    Write a function that matches a string \n    that has 10 or more digits, and 2 or more \n    non-overlapping hyphen, underscore, and punctuation.\n    '''\n    if re.search('\\d{10}[-_\\s]{2,}',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits_with_underscore_and_hyphen_and_punctuation(text):\n    '''\n    Write a function that matches a string \n    that has 10 or more digits, and 2 or more \n    non-overlapping underscores, hyphen, and punctuation.\n    '''\n    if re.search('\\d{10}[-_\\s]{2,}',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits_with_non_overlapping_punctuation_and_hyphen(text):\n    '''\n    Write a function that matches a string \n    that has 10 or more digits, and 2 or more \n    non-overlapping punctuation and hyphen.\n    '''\n    if re.search('\\d{10}[-\\s]{2,}',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits_with_underscore_and_hyphen_and_punctuation(text):\n    '''\n    Write a function that matches a string \n    that has 10 or more digits, and 2 or more \n    non-overlapping underscores, hyphen, and punctuation.\n    '''\n    if re.search('\\d{10}[-\\s]{2,}',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits_with_non_overlapping_punctuation_and_hyphen_and_underscore(text):\n    '''\n    Write a function that matches a string \n    that has 10 or more digits, and 2 or more \n    non-overlapping punctuation, hyphen, and underscore.\n    '''\n    if re.search('\\d{10}[-\\s]{2,}',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits_with_non_overlapping_whitespace_hyphen_and_punctuation(text):\n    '''\n    Write a function that matches a string \n    that has 10 or more digits, and 2 or more \n    non-overlapping whitespace, hyphen, and punctuation.\n    '''\n    if re.search('\\d{10}[-\\s]{2,}',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits_with_non_overlapping_punctuation_hyphen_and_underscore(text):\n    '''\n    Write a function that matches a string \n    that has 10 or more digits, and 2 or more \n    non-overlapping punctuation, hyphen, and underscore.\n    '''\n    if re.search('\\d{10}[-\\s]{2,}',text):\n        return True\n    else:\n        return False\ndef text_match_10_digits_with_non_overlapping_hyphen_punctuation_and_underscore(text):\n    '''\n    Write a function that matches a string \n    that has 10 or more digits, and 2 or more \n    non-overlapping hyphen, punctuation, and underscore.\n    '"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    patterns = 'ab{3}?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3}', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.findall(r'ab{3}', text)\n    return match\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_list:\n        return tuple(test_list)\n    elif test_str:\n        return tuple(test_str)\n    else:\n        return ()\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list+[test_str])\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    print(new_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str)\n    print('Tuple: {}'.format(new_tuple))\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str, )\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return test_str, test_list\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    #create a new tuple from the given string and list\n    #DO NOT modify the original lists\n    #return new_tuple as a tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    my_tuple = ()\n    my_tuple = tuple(test_list)\n    my_tuple = my_tuple + (test_str,)\n    return my_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string to a list, split at commas\n    test_list = test_str.split(\",\")\n    # Convert the list to a tuple\n    test_list = tuple(test_list)\n    # Return the tuple\n    return test_list\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    # print(list(test_list))\n    # print(test_str)\n    \n    new_str = ''.join(test_list)\n    print(new_str)\n    \n    # new_str = tuple(test_list)\n    # print(new_str)\n    \n    # return new_str\n    \n    return tuple(test_list)\n    # return tuple(test_str)\n    # return new_str\n    # return tuple(new_str)\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in range(0, len(nums), 2):\n        if nums[index] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    if len(nums) > 1:\n        return (nums[0] % 2 == 0) and even_position(nums[1:])\n    else:\n        return False\n    \nprint(even_position([2,2,4]))\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all([sum(nums[i::2]) % 2 == 0 for i in range(0, len(nums), 2)])\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for num in nums[1::2]:\n        if num%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    temp = ()\n    for tup in test_tup:\n        if type(tup) is tuple:\n            pass\n        else:\n            temp += (tup,)\n    return temp\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    try:\n        while True:\n            test_tup.remove(test_tup[1])\n    except ValueError:\n        return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda x: not isinstance(x, tuple), test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #new_tup = test_tup.copy()\n    new_tup = test_tup[:]\n    while(True):\n        if len(new_tup) == 0:\n            break\n        for i in range(len(new_tup)):\n            if not isinstance(new_tup[i], tuple):\n                continue\n            if len(new_tup[i]) == 1:\n                new_tup[i] = new_tup[i][0]\n            else:\n                new_tup[i] = tuple(new_tup[i])\n        new_tup = [i for i in new_tup if not isinstance(i, tuple)]\n    return tuple(new_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            break\n        else:\n            new_tup += (i, )\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_nested_helper(test_tup):\n        if type(test_tup) == tuple:\n            return False\n        else:\n            return True\n    \n    def recursive_helper(test_tup):\n        if remove_nested_helper(test_tup):\n            return list(test_tup)\n        else:\n            return recursive_helper(test_tup[0]) + recursive_helper(test_tup[1:])\n        \n    return tuple(recursive_helper(test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in range(0, len(test_tup)):\n        for j in range(0, len(test_tup)):\n            if test_tup[i][0] == test_tup[j][1]:\n                break\n        else:\n            new_tup.append(test_tup[i])\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    out_tup = ()\n    for e in test_tup:\n        if type(e) is tuple:\n            continue\n        else:\n            out_tup += (e,)\n    return out_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def nested(a):\n        if type(a) == tuple:\n            return True\n        return False\n    def check(a,b):\n        if nested(a) and nested(b):\n            if len(a) == len(b):\n                for i in range(len(a)):\n                    if not nested(a[i]) and not nested(b[i]):\n                        if a[i]!= b[i]:\n                            return False\n                    elif nested(a[i]) and nested(b[i]):\n                        if a[i]!= b[i]:\n                            return False\n                    else:\n                        return False\n                return True\n            else:\n                return False\n        elif nested(a):\n            return False\n        elif nested(b):\n            return False\n        else:\n            return False\n    ret = []\n    for tup in test_tup:\n        if not check(tup,ret):\n            ret.append(tup)\n    return ret\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for element in input_list:\n        if type(element) == list:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_of_lists = 0\n    for item in input_list:\n        if type(item) == list:\n            num_of_lists += 1\n    return num_of_lists\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for ele in input_list: \n        if isinstance(ele, list): \n            count += 1\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    output_list = []\n    counter = 0\n    for x in input_list: \n        if type(x) == list: \n            counter += 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    if type(input_list[0]) == list:\n        for i in range(len(input_list)):\n            if type(input_list[i]) == list:\n                count += 1\n    else:\n        count = 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == type([]):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) == list:\n            count += 1\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0 \n    if isinstance(input_list, list): \n        for x in input_list: \n            if isinstance(x, list): \n                counter += 1 \n    return counter \n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for each_item in input_list:\n        if type(each_item) is list:\n            count += 1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low,high = 0,len(arr)-1\n    while low <= high:\n        mid = (low+high)//2\n        if x>arr[mid]:\n            low = mid + 1\n        elif x<arr[mid]:\n            high = mid - 1\n        else:\n            if mid == len(arr)-1 or x!= arr[mid+1]:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = int((high+low)/2)\n        if arr[mid] == x:\n            if mid-1 < 0:\n                return mid\n            if arr[mid-1] == x:\n                high = mid-1\n            else:\n                return mid\n        elif arr[mid] < x:\n            low = mid+1\n        else:\n            high = mid-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # code here\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = (low+high)//2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or x!=arr[mid+1]:\n                return mid\n            else:\n                low = mid+1\n        elif arr[mid]>x:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    start = 0\n    end = len(arr)-1\n    while(start<=end):\n        mid = start + (end-start)//2\n        if arr[mid]==x:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                start=mid+1\n        elif arr[mid]>x:\n            end = mid - 1\n        else:\n            start=mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low+high)//2\n        if x > arr[mid]:\n            low = mid + 1\n        elif x < arr[mid]:\n            high = mid - 1\n        else:\n            if mid == len(arr) - 1 or arr[mid + 1]!= arr[mid]:\n                return mid\n            else:\n                low = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)\n    while low<high:\n        mid=low+high//2\n        if arr[mid]==x:\n            if mid==len(arr)-1:\n                return mid\n            elif arr[mid+1]>x:\n                return mid+1\n            else:\n                low=mid+1\n        elif arr[mid]>x:\n            high=mid\n        else:\n            low=mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start,end = 0,len(arr)-1\n    while start <= end:\n        mid = start + (end-start)//2\n        if arr[mid] < x:\n            start = mid + 1\n        elif arr[mid] > x:\n            end = mid - 1\n        else:\n            if mid == len(arr)-1 or arr[mid+1]!= x:\n                return mid\n            else:\n                start = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (end+start)//2\n        if arr[mid] == x and (mid == len(arr)-1 or arr[mid+1]!= x):\n            return mid\n        elif arr[mid] > x:\n            end = mid -1\n        else:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    if arr[-1] == x:\n        return len(arr)-1\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low+high)//2\n        if arr[mid] == x:\n            low = mid+1\n        elif arr[mid] > x:\n            high = mid-1\n        else:\n            low = mid+1\n    if low > len(arr)-1 or arr[low]!= x:\n        return None\n    return low-1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,0,-1):\n        if arr[i] == x:\n            return i\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*?b$\"\n    result = re.match(pattern, text)\n    return result!= None\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = pattern.match(text)\n    if result:\n        return result.group()\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*ab\",text)\n    \n    \ndef text_has_aba(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*a.a.*ab\",text)\n    \n    \ndef all_start_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\"a.*b$\",text)\n    \n    \ndef all_start_end_or_not_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\"a.*?b$\",text)\n    \n    \ndef all_start_end_a_not_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\"a.*b\",text)\n    \n    \ndef all_start_a_end_not_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\"a.*?b\",text)\n    \n    \ndef all_start_a_end_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\"a.*b\",text)\n    \n    \ndef all_start_end_not_a_or_not_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*?[^ab]$\",text)\n    \n    \ndef all_start_end_not_a_or_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*?[^ab]b$\",text)\n    \n    \ndef all_start_end_b_not_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*?b[^ab]$\",text)\n    \n    \ndef all_start_a_or_end_not_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\"a.*?[^ab]$\",text)\n    \n    \ndef all_start_a_or_not_b_or_not_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\"a.*?[^ab]$\",text)\n    \n    \ndef all_start_a_b_or_not_b_or_not_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\"a.*?b.*?[^ab]$\",text)\n    \n    \ndef all_start_a_or_end_not_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\"a.*?[^ab]$\",text)\n    \n    \ndef all_start_end_or_not_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*?[^ab]$\",text)\n    \n    \ndef all_start_end_or_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*b\",text)\n    \n    \ndef all_start_end_or_not_a_or_not_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*?[^ab]$\",text)\n    \n    \ndef all_start_end_or_a_not_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*ab\",text)\n    \n    \ndef all_start_end_or_not_a_or_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*?[^ab]b$\",text)\n    \n    \ndef all_start_end_or_b_not_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*b[^ab]$\",text)\n    \n    \ndef all_start_end_or_not_a_or_not_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*?[^ab]$\",text)\n    \n    \ndef all_start_end_or_not_a_or_not_b_or_not_c(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*?[^ab]$\",text)\n    \n    \ndef all_start_end_or_a_not_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*ab\",text)\n    \n    \ndef all_start_end_or_not_a_or_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*?[^ab]b$\",text)\n    \n    \ndef all_start_end_or_not_a_or_b_or_not_c(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*?[^ab]b$\",text)\n    \n    \ndef all_start_end_or_a_not_b_or_not_c(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*ab\",text)\n    \n    \ndef all_start_end_or_not_a_or_b_or_not_c(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\".*?[^ab]$\",text)\n    \n    \ndef all_start_a_b_c(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r\"a.*?b\",text)\n    \n    \ndef all_start_not_a_or_b_or_no"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(\"a.b$\")\n    result = pattern.match(text)\n    return result!= None\n    #return re.search(r'a.b$', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r\"a.*b$\"\n    if re.search(regex,text):\n        print(\"\\n Match was found.\\n\")\n    else:\n        print(\"\\n Match was not found.\\n\")\ntext_starta_endb(\"aab\")\ntext_starta_endb(\"a\")\ntext_starta_endb(\"aabab\")\ntext_starta_endb(\"aab\")\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a+[^b]')\n    return pattern.match(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    import re\n    pattern = r'a.*b$'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return True if re.search(r'a.b$', text) else False\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.findall('a.*?b$', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r\"a.b\", text)\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    summ = 0\n    for i in dict.values():\n        summ += i\n    return summ\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k,v in dict.items():\n        total += v\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_dict = 0\n    for num in dict:\n        sum_dict += dict[num]\n    return sum_dict\n    "
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k, v in dict.items():\n        total += v\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if not dict:\n        return 0\n    return sum(dict.values())\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(n) if i%2!= 0])\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i % 2 == 1):\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = 20\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(list(range(n)))\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(list(range(l, r + 1))[::2])\ndef sum_even(n):\n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    return sum(list(range(l, r + 1))[1::2])\ndef sum_odd_rec(n):\n    '''\n    Write a recursive python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return (n < r + 1 and n > l and n % 2) and (n + sum_odd_rec(n + 2))\ndef sum_even_rec(n):\n    '''\n    Write a recursive python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    return (n < r + 1 and n > l and n % 2 == 0) and (n + sum_even_rec(n + 2))\nif __name__ == '__main__':\n    l = int(input())\n    r = int(input())\n    print(sum_odd(l, r))\n    print(sum_even(l, r))\n    print(sum_odd_rec(l, r))\n    print(sum_even_rec(l, r))"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(1,n,2))\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0:\n        return 0\n    else:\n        return (n*(n+1))/2\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter lower limit : \"))\n    r = int(input(\"Enter upper limit : \"))\n    sum = 0\n    if l%2==0:\n        for i in range(l,r+1,2):\n            sum+=i\n        print(sum)\n    else:\n        for i in range(l,r+1,2):\n            sum+=i\n        print(sum)\n    \n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(n))\nprint(sum_odd(100))\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n    \n    \ndef _multiply(arr):\n    '''\n    Write a python function to multiply all the items in an array.\n    '''\n    total = 1\n    for i in range(len(arr)):\n        total *= arr[i]\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    x = 0\n    for i in range(0, len(arr)):\n        x += arr[i]\n    return x\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for x in arr:\n        sum = sum + x\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    res = 0\n    for i in arr:\n        res += i\n    return res\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    _sum = 0\n    for i in arr:\n        _sum += i\n    return _sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in arr:\n        s += i\n    return s\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF << (32-d)\n    return (n & mask) | (n >> d)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #Step 1:  Shift the binary representation of the number by d bits.\n    #Step 2:  Get the result of the bitwise and.\n    \n    return n >> d & ((1 << 32) - 1)\n    \n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    return (n << d) | (n >> (32 - d)) & ((1 << 32) - 1)\n    \n    \ndef rotate_left_bits(n,d):\n    '''\n    Write a function that rotate left d bits of a given number. We assume that the number is 32 bits.\n    '''\n    \n    return n << d | (n >> 32 - d)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    res = 0\n    for i in range(32):\n        res <<= 1\n        res |= (n & 1)\n        n >>= 1\n    res >>= d\n    return res\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Your code here\n    mask = (2**d)-1\n    left_most = n & mask\n    return (n << d) | left_most\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #First solution\n    return (n << d)|(n >> 32 - d)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return ((n << d) | (n >> (32 - d))) & ((1 << 32) - 1)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32\n    mask = 0\n    for i in range(32):\n        if i < d:\n            mask += 1<<i\n    return (n<<d)|(n>>(32-d))&mask\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0:\n        return 0\n    elif d >= n:\n        return n\n    else:\n        return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #l = len(bin(n))-2\n    #print(n,l)\n    #rotate = n>>(l-d) | n<<d\n    #return rotate\n    if d <= 0:\n        return n\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    result = pattern.sub('', text)\n    return result\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text, flags=re.UNICODE)\n    \ndef remove_all_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return text.translate(str.maketrans('', '', '!\"#$%&\\'()*+,/:;<=>?@[\\\\]^_`{|}~'))\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Check string\n    if type(text) is not str:\n        raise TypeError('Input string is not a string.')\n    # Remove all whitespaces\n    text = ''.join(text.split())\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('[\\s]', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\n    \n    \ndef remove_extra_spaces(text):\n    '''\n    Write a function to remove multiple spaces in a string.\n    '''\n    return re.sub(r\" +\",'', text)\n    \n    \ndef remove_letters_and_numbers(text):\n    '''\n    Write a function to remove all letters and numbers from a string.\n    '''\n    return re.sub(r\"[a-zA-Z0-9]\", '', text)\n    \n    \ndef remove_all_punctuation(text):\n    '''\n    Write a function to remove all punctuations from a string.\n    '''\n    return re.sub(r\"[^\\w\\s]\",'', text)\n    \n    \ndef remove_non_letter_non_number_characters(text):\n    '''\n    Write a function to remove all non-letter and non-number characters from a string.\n    '''\n    return re.sub(r\"[^a-zA-Z0-9]\",'', text)\n    \n    \ndef remove_duplicate_spaces(text):\n    '''\n    Write a function to remove duplicate spaces from a string.\n    '''\n    return re.sub(r\" +\",'', text)\n    \n    \ndef remove_non_alpha_characters(text):\n    '''\n    Write a function to remove all non-letter characters from a string.\n    '''\n    return re.sub(r\"[^a-zA-Z]\",'', text)\n    \n    \ndef remove_multiple_non_alpha_characters(text):\n    '''\n    Write a function to remove multiple non-letter characters from a string.\n    '''\n    return re.sub(r\"[^a-zA-Z]{2,}\",'', text)\n    \n    \ndef swap_all_case(text):\n    '''\n    Write a function to swap all the uppercase and lowercase letters from a string.\n    '''\n    return re.sub(r\"[a-z]+\", lambda x: x.group().swapcase(), text)\n    \n    \ndef remove_all_numbers(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r\"\\d\",'', text)\n    \n    \ndef remove_all_punctuation_and_all_numbers(text):\n    '''\n    Write a function to remove all punctuations and numbers from a string.\n    '''\n    return re.sub(r\"[^a-zA-Z0-9]\",'', text)\n    \n    \ndef remove_all_punctuation_and_all_non_alpha_characters(text):\n    '''\n    Write a function to remove all punctuations and non-letter characters from a string.\n    '''\n    return re.sub(r\"[^a-zA-Z]\",'', text)\n    \n    \ndef remove_non_ascii_characters(text):\n    '''\n    Write a function to remove all non-ASCII characters from a string.\n    '''\n    return re.sub(r\"\\W\",'', text)\n    \n    \ndef replace_non_alpha_characters(text):\n    '''\n    Write a function to replace all non-letter characters with a space.\n    '''\n    return re.sub(r\"[^a-zA-Z]\",'', text)\n    \n    \ndef remove_multiple_spaces(text):\n    '''\n    Write a function to remove multiple spaces in a string.\n    '''\n    return re.sub(r\" +\",'', text)\n    \n    \ndef remove_leading_space(text):\n    '''\n    Write a function to remove leading space from a string.\n    '''\n    return re.sub(r\"^ +\", '', text)\n    \n    \ndef remove_trailing_space(text):\n    '''\n    Write a function to remove trailing space from a string.\n    '''\n    return re.sub(r\" +$\", '', text)\n    \n    \ndef remove_leading_and_trailing_space(text):\n    '''\n    Write a function to remove leading and trailing space from a string.\n    '''\n    return re.sub(r\" +\",'', text)\n    \n    \ndef remove_leading_and_trailing_spaces(text):\n    '''\n    Write a function to remove leading and trailing spaces from a string.\n    '''\n    return re.sub(r\"^ +| +$\", '', text)\n    \n    \ndef remove_all_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\",'', text)\n    \n    \ndef remove_all_characters(text):\n    '''\n    Write a function to remove all characters from a string.\n    '''\n    return re.sub(r\"\\w+\", '', text)\n    \n    \ndef replace_characters(text):\n    '''\n    Write a function to replace all characters with a space.\n    '''\n    return re.sub(r\"\\w+\",'', text)\n    \n    \ndef replace_more_than_one_character(text):\n    '''\n    Write a function to replace all more than one characters with a space.\n    '''\n    return re.sub(r\"\\w{2,}\",'', text)\n    \n    \ndef replace_all_characters(text):\n    '''\n    Write a function to replace all characters with a space.\n    '''\n    return re.sub(r\"\\w+\",'', text)\n    \n    \ndef replace_all_characters_except_numbers(text):\n    '''\n    Write a function to replace all characters with a space except numbers.\n    '''\n    return re.sub(r\"\\w+\",'', text)\n    \n    \ndef replace_characters_except_numbers(text):\n    '''\n    Write a function to replace all characters with a space except numbers.\n    '''\n    return re.sub(r\"\\w+\",'', text)\n    \n    \ndef replace_all_numbers(text):\n    '''\n    Write a function to replace all numbers with a space.\n    '''\n    return re.sub(r\"\\d+\",'', text)\n    \n    \ndef replace_more_than_one_number(text):\n    '''\n    Write a function to replace all more than one numbers with a space.\n    '''\n    return re.sub(r\"\\d{2,}\",'', text)\n    \n    \ndef replace_all_numbers(text):\n    '''\n    Write a function to replace all numbers with a space.\n    '''\n    return re.sub(r\"\\d+\",'', text)\n    \n    \ndef replace_all_punctuation(text):\n    '''\n    Write a function to replace all punctuations with a space.\n    '''\n    return re.sub(r\"\\W+\",'', text)\n    \n    \ndef replace_all_numbers_and_punctuations(text):\n    '''\n    Write a function to replace all numbers and punctuations with a space.\n    '''\n    return re.sub(r\"\\W+\",'', text)\n    \n    \ndef replace_characters_and_numbers(text):\n    '''\n    Write a function to replace all numbers and characters with a space.\n    '''\n    return re.sub(r\"\\w+|\\d+\",'', text)\n    \n    \ndef replace_numbers(text):\n    '''\n    Write a function to replace all numbers with a space.\n    '''\n    return re.sub(r\"\\d+\",'', text)\n    \n    \ndef replace_punctuations(text):\n    '''\n    Write a function to replace all punctuations with a space.\n    '''\n    return re.sub(r\"\\W+\",'', text)\n    \n    \ndef replace_numbers_and_punctuations(text):\n    '''\n    Write a function to replace all numbers and punctuations with a space.\n    '''\n    return re.sub(r\"\\d+"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(' ','')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    if text is None:\n        return None\n    elif type(text)!= str:\n        return None\n    else:\n        return re.sub(\"\\s+\", \"\", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    \n    text = text.replace(\" \", \"\")\n    \n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or x==z or y==z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    counter = 0\n    if x == y:\n        counter += 1\n    if x == z:\n        counter += 1\n    if y == z:\n        counter += 1\n    return counter\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y or x == z or y == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return len([i for i in [x,y,z] if i == x])\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    l=[]\n    l.append(x)\n    l.append(y)\n    l.append(z)\n    l=set(l)\n    if len(l)==1:\n        return \"All are Equal\"\n    elif len(l)==2:\n        return \"Two are Equal\"\n    else:\n        return \"No are Equal\"\nprint(test_three_equal(10,10,10))\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(5,5,5))\nprint(test_three_equal(3,5,3))\nprint(test_three_equal(4,5,4))\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x_count, y_count, z_count = 0,0,0\n    if x==y:\n        x_count = x_count +1\n    if x==z:\n        x_count = x_count +1\n    if y==z:\n        y_count = y_count +1\n    if x_count == 1:\n        return y_count\n    elif y_count == 1:\n        return x_count\n    else:\n        return z_count\nprint(test_three_equal(2,3,4))\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y:\n        if x == z:\n            equal_count = 3\n            return equal_count\n        else:\n            equal_count = 2\n            return equal_count\n    else:\n        if y == z:\n            equal_count = 2\n            return equal_count\n        else:\n            equal_count = 0\n            return equal_count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    number_of_equal = 0\n    if x==y==z:\n        number_of_equal += 1\n    if x==y:\n        number_of_equal += 1\n    if x==z:\n        number_of_equal += 1\n    if y==z:\n        number_of_equal += 1\n    if y==z:\n        number_of_equal += 1\n    if x==z:\n        number_of_equal += 1\n    return number_of_equal\nprint(test_three_equal(10,10,10)"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if(x==y==z):\n        print(\"The numbers are equal\")\n    else:\n        print(\"The numbers are not equal\")\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        if arr[start] > arr[end]:\n            return start\n        mid = (start + end) // 2\n        if arr[mid] > arr[start] and arr[mid] < arr[end]:\n            start = mid + 1\n        elif arr[mid] < arr[start] and arr[mid] > arr[end]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    start = 0\n    end = n - 1\n    mid = 0\n    while(start <= end):\n        mid = int((start + end)/2)\n        if (arr[mid] > arr[end]):\n            start = mid + 1\n        elif (arr[mid] < arr[end]):\n            end = mid\n        else:\n            end = end - 1\n    return (n - start)\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def rotation_count(arr):\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] > arr[i+1]:\n                count += 1\n        return count\n        \n    return rotation_count(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def rotation_count(arr):\n        count = 0\n        for i in range(0, len(arr)-1):\n            if arr[i] > arr[i+1]:\n                count = count + 1\n        return count\n    return rotation_count(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # initialize count with 0\n    count = 0\n    for i in range(len(arr)):\n        # if i is greater than i+1 then array is rotated\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    low = 0\n    high = n - 1\n    mid = 0\n    while mid <= high:\n        if arr[mid] == 0:\n            arr[low],arr[mid] = arr[mid],arr[low]\n            low += 1\n            mid += 1\n        elif arr[mid] == 1:\n            mid += 1\n        else:\n            arr[high],arr[mid] = arr[mid],arr[high]\n            high -= 1\n    return arr\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    rotations = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            rotations += 1\n        if arr[i] < arr[i+1]:\n            break\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def is_sorted(arr):\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n    def count_rotations(arr):\n        start = 0\n        end = len(arr) - 1\n        while start <= end:\n            mid = (start+end)//2\n            if is_sorted(arr):\n                return 0\n            if arr[start] > arr[end]:\n                return mid + 1\n            if arr[start] <= arr[mid] and arr[mid] >= arr[end]:\n                start = mid + 1\n            elif arr[start] >= arr[mid] and arr[mid] <= arr[end]:\n                end = mid - 1\n    return count_rotations(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr_list = list(arr)\n    arr_list.sort()\n    count = 0\n    for i in range(len(arr_list)):\n        if arr_list[i]!= arr[i]:\n            count +=1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    return count(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n // 2\n    while (x * x > n):\n        x = x - 1\n    return (x * x == n)\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    # check if number is negative, positive or zero\n    if x<0:\n        return False\n    elif x==0 or x==1:\n        return True\n    else:\n        while n>=0 and x>0:\n            x=n%x\n            n=n//x\n    if n==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    x = 1\n    while(x * x < n):\n        x = x + 1\n    if x * x == n:\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n ** 0.5\n    return (sqrt - int(sqrt) == 0)\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n<2:\n        return False\n    low = 1\n    high = n//2\n    while(low<=high):\n        mid = low + (high - low) //2\n        if mid*mid == n:\n            return True\n        elif mid*mid < n:\n            low = mid + 1\n        else:\n            high = mid -1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    #Implement this function\n    if n<2:\n        return False\n    i=2\n    while i<n:\n        if(n%i==0):\n            return False\n        i=i+1\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n;  \n    y = int(math.sqrt(n));  \n    return (x == y * y);\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = int(math.sqrt(n))\n    return (sqrt * sqrt == n)\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Return true if n is square, else false\n    root = math.sqrt(n)\n    return root - math.floor(root) == 0\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n;\n    y = (int)(math.sqrt(n));\n    if ((y*y) == n) :\n        return True;\n    return False;\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product = product * num\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce((lambda x, y: x * y), arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return all(i%2==0 for i in arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    ans = 1\n    for i in arr:\n        ans *= i\n    if ans % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if (1 in arr):\n        return False\n    else:\n        for i in range(len(arr)):\n            if (i == 0):\n                prod = arr[i] * arr[i+1]\n            elif (i == len(arr)-1):\n                prod *= arr[i]\n            else:\n                prod = prod * arr[i]\n    if (prod % 2 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for number in arr: \n        product *= number \n    if product % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # Initialize variables \n    product = 1\n    \n    # Loop through the array \n    for number in arr:\n        \n        # Update the product \n        product *= number\n        \n    # Check if the product is even \n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for num in arr: \n        prod *= num \n    if prod % 2 == 0: \n        return True \n    return False \n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) < 1:\n        return None\n    # max_sum = lists[0][0]\n    # max_list = []\n    # for list in lists:\n    #     sum_list = 0\n    #     for element in list:\n    #         sum_list += element\n    #     if sum_list > max_sum:\n    #         max_sum = sum_list\n    #         max_list = list\n    # return max_list\n    max_list = []\n    max_sum = lists[0][0]\n    for index, list in enumerate(lists):\n        if index == 0:\n            max_sum = sum(list)\n            max_list = list\n        else:\n            if sum(list) > max_sum:\n                max_sum = sum(list)\n                max_list = list\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    best_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    for sublist in lists:\n        if max(sublist) > sum(max_sum_list):\n            max_sum_list = sublist\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return [max(l, key=sum) for l in lists]\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return None\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = 0\n    \n    for list in lists:\n        current_sum = 0\n        for element in list:\n            current_sum += element\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    summ=0\n    l=[]\n    for sublist in lists:\n        for item in sublist:\n            summ+=item\n        l.append(summ)\n        summ=0\n    return [lists[i] for i in range(len(l)) if l[i]==max(l)]\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) < 2:\n        return None\n    if len(lists) == 2:\n        return [max(lists[0], lists[1]), min(lists[0], lists[1])]\n    return [max_sum_list(lists[1:]), max_sum_list(lists[:-1])]\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sum_list = []\n    for i in range(len(lists)):\n        sum_list.append(sum(lists[i]))\n    index_max_sum = sum_list.index(max(sum_list))\n    return lists[index_max_sum]\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in lists:\n        for j in i:\n            sum = sum + j\n        if sum > max_sum:\n            max_sum = sum\n            max_list = i\n        sum = 0\n    return max_list\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    return max(max_run_uppercase(test_str[1:]) + 1 if test_str[0].isupper() else 1, max_run_uppercase(test_str[1:]))\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 0\n    if count > max_count:\n        max_count = count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 0\n    if count > max_count:\n        max_count = count\n    return max_count\nprint(\"***********\")\nprint(max_run_uppercase(\"abCCddee\"))\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not isinstance(test_str, str):\n        return 0\n    if test_str == \"\":\n        return 0\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for i in test_str:\n        if i.isupper():\n            count+=1\n            if count>max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 1\n    for i in range(len(test_str)):\n        if i+1 < len(test_str):\n            if test_str[i] == test_str[i+1]:\n                count+=1\n                if test_str[i].isupper():\n                    max_count = max(count, max_count)\n            elif test_str[i].isupper() and test_str[i+1].isupper():\n                count = 1\n            else:\n                count = 1\n        else:\n            if test_str[i].isupper():\n                max_count = max(count, max_count)\n            count = 1\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppers = test_str.upper()\n    max_length = 1\n    current_length = 1\n    for i in range(1, len(uppers)):\n        if uppers[i] == uppers[i-1]:\n            current_length += 1\n        else:\n            current_length = 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run = 0\n    for c in test_str:\n        if c.isupper():\n            run += 1\n        else:\n            run = 0\n    return run\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    for i in range(len(test_str)):\n        j = i+1\n        while j < len(test_str) and test_str[j].isupper():\n            j += 1\n        if j-i > 1:\n            return j-i\n    return 0\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_len = 0\n    cur_len = 0\n    for c in test_str:\n        if c.isupper():\n            cur_len += 1\n            if cur_len > max_len:\n                max_len = cur_len\n        else:\n            cur_len = 0\n    return max_len\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odds = [num for num in nums if num % 2 == 1]\n    return odds[0] if odds else None\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            nums[i]+=1\n            break\n    return nums"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        for num in nums:\n            if num % 2 == 1:\n                return num\n            else:\n                continue\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd = []\n    for i in nums:\n        if i % 2!= 0:\n            odd.append(i)\n    if odd == []:\n        return \"No odd numbers are present in the list\"\n    else:\n        return odd[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n % 2!= 0:\n            return n\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # code goes here\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return 'No odd numbers found'\n    "
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2 == 1:\n            return nums[i]\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2 == 1:\n            return i\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if(K[0] == test_tup[i][0] and K[1] == test_tup[i][1]):\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for x, y in test_tup:\n        for i, j in K:\n            if x == i and y == j:\n                return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if len(test_tup) >= K else False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if K in test_tup[i]:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i]!= K[i]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(K):\n        if not test_tup[i]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for test_item in test_tup:\n        if test_item not in K:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in K:\n        if tup[0] in test_tup:\n            return True\n    return False\n    \ndef gen_sample_kernel(samples, k):\n    '''\n    Write a function that takes in a list of sample tuples and a tuple index and returns the set of all tuples in the list K (with k in their tuple)\n    '''\n    K = set()\n    for i in range(len(samples)):\n        for j in range(i+1, len(samples)):\n            if check_K(samples[i], K) and check_K(samples[j], K):\n                K.add(tuple([samples[i], samples[j]]))\n    return list(K)\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if (test_tup[0], test_tup[1]) == K:\n        return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for idx, elem in enumerate(test_tup1):\n        if elem > test_tup2[idx]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup1 = (1, 2, 3, 4)\n    test_tup2 = (3, 1, 2, 6)\n    result = False\n    \n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            result = True\n        else:\n            result = False\n            break\n    \n    return result\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(x1 < x2 for x1, x2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    #raise NotImplementedError()\n    return all([test_tup1[i] < test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    is_smaller = True\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if(test_tup2[0] < test_tup1[0] and test_tup2[1] < test_tup1[1] and test_tup2[2] < test_tup1[2] and test_tup2[3] < test_tup1[3]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return True\n    elif test_tup1[0] < test_tup2[0]:\n        return False\n    elif test_tup1[1] > test_tup2[1]:\n        return True\n    elif test_tup1[1] < test_tup2[1]:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if all(tup1 < tup2 for tup1, tup2 in zip(test_tup1, test_tup2)):\n        return True\n    else:\n        return False\n"
    }
]